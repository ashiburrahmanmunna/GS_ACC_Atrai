using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Atrai.Data.Migrations
{
    /// <inheritdoc />
    public partial class databaseshifting : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Acc_VoucherNoCreatedType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VoucherNoCreatedTypeCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VoucherNoCreatedTypeName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherNoCreatedType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Acc_VoucherType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VoucherTypeName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VoucherTypeNameShort = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VoucherTypeClass = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VoucherTypeButtonClass = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isSystem = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountCategory",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccountCategoryName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ParentAccountCategoryId = table.Column<int>(type: "int", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    AccountType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    NoteNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AccountCategory_AccountCategory_ParentAccountCategoryId",
                        column: x => x.ParentAccountCategoryId,
                        principalTable: "AccountCategory",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AccountsReport",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Tab = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Group = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReportName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ControllerName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ActionName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    IsFavorite = table.Column<bool>(type: "bit", nullable: false),
                    SerialNo = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountsReport", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AndroidMenu",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MenuName = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    MenuPage = table.Column<int>(type: "int", nullable: false),
                    MenuCaption = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    ColorOne = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    ColorTwo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    ColorThree = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    GradiantStyle = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    IconName = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    IconPath = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    FontColor = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    MenuRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    Radius = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AndroidMenu", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ApprovalType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ApprovalType = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ApprovalStage = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovalType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ApprovedBy",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ApprovedByName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ApprovedByShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovedBy", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BusinessType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BusinessTypeName = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    BusinessTypeRemarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    AppsName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    IsAccounts = table.Column<bool>(type: "bit", nullable: false),
                    IsWalton = table.Column<bool>(type: "bit", nullable: false),
                    IsMarcel = table.Column<bool>(type: "bit", nullable: false),
                    IsDealerBasedOrganization = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BusinessType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_AccountType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccTypeName = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_AccountType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_BloodGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BloodName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    BloodNameB = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_BloodGroup", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Emp_Type",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpTypeName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    EmpTypeNameB = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TtlManpower = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Emp_Type", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_EmployeeType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmployeeTypeBangla = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Slno = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_EmployeeType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Gender",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GenderName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    GenderNameB = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Gender", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Leave_Type",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LTypeName = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    LTypeNameShort = table.Column<string>(type: "nvarchar(5)", maxLength: 5, nullable: false),
                    LDays = table.Column<float>(type: "real", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Leave_Type", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_PayMode",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PayModeName = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_PayMode", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Religion",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReligionName = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ReligionNameB = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Religion", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_SalaryType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalaryType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Slno = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_SalaryType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cat_WeekSegment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WeekName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Slno = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_WeekSegment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CommercialLCType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CommercialLCTypeName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CommercialLCTypeShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommercialLCType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Country",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CountryCode = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    DialCode = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    CountryName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CountryShortName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CultureInfo = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    CurrencyName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CurrencySymbol = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CurrencyShortName = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    FlagClass = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    isActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Country", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CustomFormStyleVariable",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VariableName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    VariableValue = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    VariableFor = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomFormStyleVariable", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DayList",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DayListName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DayListShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DayListGroup = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DayList", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DocType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocType = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    DocFor = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DocTypeValue = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DocumentStatus",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentStatusName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DocumentStatusShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DurationTime",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DurationName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Day = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DurationTime", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExportOrderCategory",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExportOrderCategoryName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ExportOrderCategoryShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExportOrderCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExportOrderStatus",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExportOrderStatusName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ExportOrderStatusShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExportOrderStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FiscalYearType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FYName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    FYStartDate = table.Column<int>(type: "int", nullable: false),
                    FYStartMonth = table.Column<int>(type: "int", nullable: false),
                    FYEndDate = table.Column<int>(type: "int", nullable: false),
                    FYEndMonth = table.Column<int>(type: "int", nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FiscalYearType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HR_IncType",
                columns: table => new
                {
                    IncTypeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    IncType = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    DtTran = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_IncType", x => x.IncTypeId);
                });

            migrationBuilder.CreateTable(
                name: "HR_OverTimeSetting",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsAllowMinute = table.Column<bool>(type: "bit", nullable: false),
                    GraceTimeFrom = table.Column<int>(type: "int", nullable: false),
                    GraceTimeTo = table.Column<int>(type: "int", nullable: false),
                    From1 = table.Column<int>(type: "int", nullable: false),
                    To1 = table.Column<int>(type: "int", nullable: false),
                    OT1 = table.Column<float>(type: "real", nullable: false),
                    From2 = table.Column<int>(type: "int", nullable: false),
                    To2 = table.Column<int>(type: "int", nullable: false),
                    OT2 = table.Column<float>(type: "real", nullable: false),
                    From3 = table.Column<int>(type: "int", nullable: false),
                    To3 = table.Column<int>(type: "int", nullable: false),
                    OT3 = table.Column<float>(type: "real", nullable: false),
                    From4 = table.Column<int>(type: "int", nullable: false),
                    To4 = table.Column<int>(type: "int", nullable: false),
                    OT4 = table.Column<float>(type: "real", nullable: false),
                    OTStart = table.Column<int>(type: "int", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_OverTimeSetting", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LCNature",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LCNatureName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LCNatureShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LCNature", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LCStatus",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LCStatusName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LCStatusShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LCStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LCType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LCTypeName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LCTypeShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LCType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Menu",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MenuName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    MenuClass = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MenuRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isParent = table.Column<bool>(type: "bit", nullable: false),
                    MenuGroupName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ControllerName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ActionName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    isGroup = table.Column<bool>(type: "bit", nullable: false),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    AllActionName = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    FirstParameter = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FirstValue = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsCreateAction = table.Column<bool>(type: "bit", nullable: false),
                    IsEditAction = table.Column<bool>(type: "bit", nullable: false),
                    IsDeleteAction = table.Column<bool>(type: "bit", nullable: false),
                    IsViewAction = table.Column<bool>(type: "bit", nullable: false),
                    IsListAction = table.Column<bool>(type: "bit", nullable: false),
                    IsReportAction = table.Column<bool>(type: "bit", nullable: false),
                    IsVatMenu = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Menu", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Menu_Menu_ParentId",
                        column: x => x.ParentId,
                        principalTable: "Menu",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "PaymentTermss",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PaymentTermsName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PaymentTermsShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Days = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentTermss", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PaymentType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TypeShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: true),
                    IsDeliveryService = table.Column<bool>(type: "bit", nullable: false),
                    IsTrading = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProductType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TypeName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IconClass = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DivId = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ReportGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportGroupName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    FileName = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: false),
                    Iconclass = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportGroup", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ReportStyle",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportStyleName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    ReportStyleRemarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    ReportFor = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LogoPlacement = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    TextPlacement = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportStyle", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ShipModel",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShipName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ShipShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ShipModel", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TaxForm",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TaxFormName = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaxForm", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TimeZoneSettings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TimeZoneName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    TimeZoneNameJquery = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    UTCTime = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeZoneSettings", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TradeTerm",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TradeTermName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TradeTermShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TradeTerm", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Variable",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VariableName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    VariableValue = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    VariableFor = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    VariableCategory = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    ClassName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    VariableAction = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    VariableController = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    VariablePerameter = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PerameterValue = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsTop = table.Column<bool>(type: "bit", nullable: false),
                    Icons = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Variable", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VoucherTranGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VoucherTranGroupName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VoucherTranGroup", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WorkorderStatus",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkorderStatusName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    WorkorderStatusShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkorderStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountHead_System",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BusinessTypeId = table.Column<int>(type: "int", nullable: true),
                    AccType = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: false),
                    AccName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    NumericNumber = table.Column<int>(type: "int", nullable: true),
                    AccCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isSystem = table.Column<bool>(type: "bit", nullable: false),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    AccountCategoryId = table.Column<int>(type: "int", nullable: true),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    IsItemDepExp = table.Column<bool>(type: "bit", nullable: false),
                    IsItemAccmulateddDep = table.Column<bool>(type: "bit", nullable: false),
                    OpDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    AccumulatedDepId = table.Column<int>(type: "int", nullable: true),
                    DepExpenseId = table.Column<int>(type: "int", nullable: true),
                    DepreciationRate = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    LevelId = table.Column<int>(type: "int", nullable: true),
                    Level = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountHead_System", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AccountHead_System_AccountCategory_AccountCategoryId",
                        column: x => x.AccountCategoryId,
                        principalTable: "AccountCategory",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_AccountHead_System_AccountHead_System_ParentId",
                        column: x => x.ParentId,
                        principalTable: "AccountHead_System",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_AccountHead_System_BusinessType_BusinessTypeId",
                        column: x => x.BusinessTypeId,
                        principalTable: "BusinessType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AndroidMenuPermission",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BusinessTypeId = table.Column<int>(type: "int", nullable: false),
                    AndroidMenuId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AndroidMenuPermission", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AndroidMenuPermission_AndroidMenu_AndroidMenuId",
                        column: x => x.AndroidMenuId,
                        principalTable: "AndroidMenu",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AndroidMenuPermission_BusinessType_BusinessTypeId",
                        column: x => x.BusinessTypeId,
                        principalTable: "BusinessType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SubscriptionType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SubscriptionName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    SubscriptionRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ValidityDay = table.Column<int>(type: "int", nullable: false),
                    SubscriptionAmount = table.Column<float>(type: "real", nullable: false),
                    ValidationRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BusinessTypeId = table.Column<int>(type: "int", nullable: true),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SubscriptionType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SubscriptionType_BusinessType_BusinessTypeId",
                        column: x => x.BusinessTypeId,
                        principalTable: "BusinessType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserRole",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    RoleRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BusinessTypeId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserRole", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserRole_BusinessType_BusinessTypeId",
                        column: x => x.BusinessTypeId,
                        principalTable: "BusinessType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Status",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    StatusShort = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    DocTypeId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Status", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Status_DocType_DocTypeId",
                        column: x => x.DocTypeId,
                        principalTable: "DocType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "SoftwarePackage",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SoftwarePackageCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SoftwarePackageDescription = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LinkAdd = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PackagePrice = table.Column<float>(type: "real", nullable: false),
                    DiscountPercentage = table.Column<float>(type: "real", nullable: false),
                    Duration = table.Column<float>(type: "real", nullable: false),
                    UserCount = table.Column<int>(type: "int", nullable: false),
                    SoftwarePackageImagePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SoftwarePackageFileExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ActiveYesNo = table.Column<bool>(type: "bit", nullable: false),
                    BusinessTypeId = table.Column<int>(type: "int", nullable: true),
                    DurationId = table.Column<int>(type: "int", nullable: true),
                    TotalDays = table.Column<int>(type: "int", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SoftwarePackage", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SoftwarePackage_BusinessType_BusinessTypeId",
                        column: x => x.BusinessTypeId,
                        principalTable: "BusinessType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SoftwarePackage_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SoftwarePackage_DurationTime_DurationId",
                        column: x => x.DurationId,
                        principalTable: "DurationTime",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Warrenty",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(80)", maxLength: 80, nullable: false),
                    DurationTimeId = table.Column<int>(type: "int", nullable: true),
                    Day = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Warrenty", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Warrenty_DurationTime_DurationTimeId",
                        column: x => x.DurationTimeId,
                        principalTable: "DurationTime",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "MenuPermission",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BusinessTypeId = table.Column<int>(type: "int", nullable: false),
                    MenuId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MenuPermission", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MenuPermission_BusinessType_BusinessTypeId",
                        column: x => x.BusinessTypeId,
                        principalTable: "BusinessType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MenuPermission_Menu_MenuId",
                        column: x => x.MenuId,
                        principalTable: "Menu",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Reports",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ReportLink = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    GroupId = table.Column<int>(type: "int", nullable: true),
                    InActive = table.Column<bool>(type: "bit", nullable: false),
                    IsNew = table.Column<bool>(type: "bit", nullable: false),
                    IsManagement = table.Column<bool>(type: "bit", nullable: false),
                    Category = table.Column<int>(type: "int", nullable: false),
                    CustomValue = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Type = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    ComId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reports", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Reports_ReportGroup_GroupId",
                        column: x => x.GroupId,
                        principalTable: "ReportGroup",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Company",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UniqueCompanyId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CompanyCode = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    CompanyName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CompanyShortName = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    SecoundaryAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    comPhone = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    comEmail = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    comWeb = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ContPerson = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ContDesig = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    SubscriptionTypeId = table.Column<int>(type: "int", nullable: true),
                    BusinessTypeId = table.Column<int>(type: "int", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: false),
                    isMultiCurrency = table.Column<bool>(type: "bit", nullable: false),
                    isMultiDebitCredit = table.Column<bool>(type: "bit", nullable: false),
                    isVoucherDistributionEntry = table.Column<bool>(type: "bit", nullable: false),
                    isChequeDetails = table.Column<bool>(type: "bit", nullable: false),
                    VoucherNoCreatedTypeId = table.Column<int>(type: "int", nullable: true),
                    isSMSService = table.Column<bool>(type: "bit", nullable: false),
                    isEmailSerivce = table.Column<bool>(type: "bit", nullable: false),
                    IsSignature = table.Column<bool>(type: "bit", nullable: false),
                    LegalName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    BusinessIdNo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    vat = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    customerFacingEmail = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    State = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    ZipCode = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerFacingAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerFacingCityAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerFacingState = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerFacingZipCode = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalCityAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalState = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalZipCode = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Company", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Company_Acc_VoucherNoCreatedType_VoucherNoCreatedTypeId",
                        column: x => x.VoucherNoCreatedTypeId,
                        principalTable: "Acc_VoucherNoCreatedType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Company_BusinessType_BusinessTypeId",
                        column: x => x.BusinessTypeId,
                        principalTable: "BusinessType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Company_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Company_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Company_SubscriptionType_SubscriptionTypeId",
                        column: x => x.SubscriptionTypeId,
                        principalTable: "SubscriptionType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "DocStatus",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    DocTypeId = table.Column<int>(type: "int", nullable: true),
                    StatusId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocStatus", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocStatus_DocType_DocTypeId",
                        column: x => x.DocTypeId,
                        principalTable: "DocType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_DocStatus_Status_StatusId",
                        column: x => x.StatusId,
                        principalTable: "Status",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Color",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ColorName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    ColorShortName = table.Column<string>(type: "nvarchar(4)", maxLength: 4, nullable: false),
                    ColorCode = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Color", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Color_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Size",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SizeName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    SizeShortName = table.Column<string>(type: "nvarchar(4)", maxLength: 4, nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Size", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Size_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "SubscriptionActivationCompany",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Amount = table.Column<float>(type: "real", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ValidityDay = table.Column<double>(type: "float", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    ActiveFromDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ActiveToDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SubscriptionTypeId = table.Column<int>(type: "int", nullable: true),
                    ComId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SubscriptionActivationCompany", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SubscriptionActivationCompany_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SubscriptionActivationCompany_SubscriptionType_SubscriptionTypeId",
                        column: x => x.SubscriptionTypeId,
                        principalTable: "SubscriptionType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Acc_BudgetMain",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    FiscalYearId = table.Column<int>(type: "int", nullable: true),
                    Interval = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PreFillId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_BudgetMain", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_BudgetMain_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Acc_BudgetSub",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BudgetId = table.Column<int>(type: "int", nullable: true),
                    AccId = table.Column<int>(type: "int", nullable: false),
                    Jan = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Feb = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Mar = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    April = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    May = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Jun = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Jul = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Aug = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Sep = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Oct = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Nov = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Dec = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Total = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Quarter1 = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Quarter2 = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Quarter3 = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Quarter4 = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Yearly = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_BudgetSub", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_BudgetSub_Acc_BudgetMain_BudgetId",
                        column: x => x.BudgetId,
                        principalTable: "Acc_BudgetMain",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Acc_BudgetSub_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Acc_FiscalHalfYear",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    HyearName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HyearNameBangla = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    dtFrom = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    dtTo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FYId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_FiscalHalfYear", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_FiscalHalfYear_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Acc_FiscalMonth",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    MonthName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MonthNameBangla = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    dtFrom = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    dtTo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OpeningdtFrom = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ClosingdtTo = table.Column<DateTime>(type: "datetime2", nullable: false),
                    FYId = table.Column<int>(type: "int", nullable: false),
                    HYearId = table.Column<int>(type: "int", nullable: false),
                    QtrId = table.Column<int>(type: "int", nullable: false),
                    isLocked = table.Column<bool>(type: "bit", nullable: false),
                    isLockedStore = table.Column<bool>(type: "bit", nullable: false),
                    isLockedAccounts = table.Column<bool>(type: "bit", nullable: false),
                    isLockedAttendance = table.Column<bool>(type: "bit", nullable: false),
                    isLockedSalary = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_FiscalMonth", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_FiscalMonth_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Acc_FiscalQtr",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    QtrName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    QtrNameBangla = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    dtFrom = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    dtTo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FYId = table.Column<int>(type: "int", nullable: false),
                    HYearId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_FiscalQtr", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_FiscalQtr_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Acc_FiscalYear",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    FYName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FYNameBangla = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OpDate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ClDate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OpeningDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ClosingDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    isWorking = table.Column<bool>(type: "bit", nullable: false),
                    isRunning = table.Column<bool>(type: "bit", nullable: false),
                    RowNo = table.Column<int>(type: "int", nullable: true),
                    isLocked = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_FiscalYear", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_FiscalYear_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Acc_VoucherMain",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VoucherSerialId = table.Column<int>(type: "int", nullable: false),
                    YearlyVoucherTypeWiseSerial = table.Column<int>(type: "int", nullable: true),
                    VoucherNo = table.Column<string>(type: "varchar(25)", maxLength: 25, nullable: false),
                    VoucherDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    VoucherInputDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    FilePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MasterCurrencyRate = table.Column<double>(type: "float", nullable: false),
                    PrdUnitId = table.Column<int>(type: "int", nullable: true),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    VoucherDesc = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LuserIdCheck = table.Column<int>(type: "int", nullable: true),
                    LuserIdApprove = table.Column<int>(type: "int", nullable: true),
                    isAutoEntry = table.Column<bool>(type: "bit", nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    VAmount = table.Column<double>(type: "float", nullable: false),
                    vAmountInWords = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Source = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SourceId = table.Column<int>(type: "int", nullable: false),
                    ConvRate = table.Column<double>(type: "float", nullable: false),
                    vAmountLocal = table.Column<double>(type: "float", nullable: false),
                    Referance = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReferanceTwo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReferanceThree = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsCash = table.Column<bool>(type: "bit", nullable: false),
                    VoucherTypeId = table.Column<int>(type: "int", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: false),
                    CountryIdLocal = table.Column<int>(type: "int", nullable: false),
                    FiscalYearId = table.Column<int>(type: "int", nullable: true),
                    FiscalMonthId = table.Column<int>(type: "int", nullable: true),
                    VoucherTranGroupList = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VoucherTranGroupId = table.Column<int>(type: "int", nullable: true),
                    VoucherFilePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherMain", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherMain_Acc_FiscalMonth_FiscalMonthId",
                        column: x => x.FiscalMonthId,
                        principalTable: "Acc_FiscalMonth",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Acc_VoucherMain_Acc_FiscalYear_FiscalYearId",
                        column: x => x.FiscalYearId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Acc_VoucherMain_Acc_VoucherType_VoucherTypeId",
                        column: x => x.VoucherTypeId,
                        principalTable: "Acc_VoucherType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherMain_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherMain_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherMain_Country_CountryIdLocal",
                        column: x => x.CountryIdLocal,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherMain_VoucherTranGroup_VoucherTranGroupId",
                        column: x => x.VoucherTranGroupId,
                        principalTable: "VoucherTranGroup",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Acc_VoucherNoPrefix",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VoucherTypeId = table.Column<int>(type: "int", nullable: false),
                    VoucherShortPrefix = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Length = table.Column<int>(type: "int", nullable: false),
                    isVisible = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherNoPrefix", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherNoPrefix_Acc_VoucherType_VoucherTypeId",
                        column: x => x.VoucherTypeId,
                        principalTable: "Acc_VoucherType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherNoPrefix_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Acc_VoucherSub",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccId = table.Column<int>(type: "int", nullable: false),
                    SRowNo = table.Column<int>(type: "int", nullable: false),
                    ccId = table.Column<int>(type: "int", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: false),
                    CurrencyForeignId = table.Column<int>(type: "int", nullable: false),
                    TKDebit = table.Column<double>(type: "float", nullable: false),
                    TKCredit = table.Column<double>(type: "float", nullable: false),
                    TKDebitLocal = table.Column<double>(type: "float", nullable: false),
                    TKCreditLocal = table.Column<double>(type: "float", nullable: false),
                    CurrencyRate = table.Column<double>(type: "float", nullable: false),
                    Note1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Note2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Note3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Note4 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Note5 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowNo = table.Column<int>(type: "int", nullable: true),
                    RefId = table.Column<int>(type: "int", nullable: true),
                    SLNo = table.Column<int>(type: "int", nullable: true),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<int>(type: "int", nullable: false),
                    VoucherTranGroupIdRow = table.Column<int>(type: "int", nullable: true),
                    SalesId = table.Column<int>(type: "int", nullable: true),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    SalesReturnId = table.Column<int>(type: "int", nullable: true),
                    PurchaseReturnId = table.Column<int>(type: "int", nullable: true),
                    DamageId = table.Column<int>(type: "int", nullable: true),
                    IssueId = table.Column<int>(type: "int", nullable: true),
                    TransferInId = table.Column<int>(type: "int", nullable: true),
                    TransferOutId = table.Column<int>(type: "int", nullable: true),
                    MemberId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherSub", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSub_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSub_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSub_Country_CurrencyForeignId",
                        column: x => x.CurrencyForeignId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSub_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSub_VoucherTranGroup_VoucherTranGroupIdRow",
                        column: x => x.VoucherTranGroupIdRow,
                        principalTable: "VoucherTranGroup",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Acc_VoucherSubCheckno",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowNoChk = table.Column<int>(type: "int", nullable: false),
                    SRowNo = table.Column<int>(type: "int", nullable: true),
                    ChkNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    dtChk = table.Column<DateTime>(type: "datetime2", nullable: true),
                    dtChkTo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    InterestRate = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isClear = table.Column<bool>(type: "bit", nullable: false),
                    dtChkClear = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Criteria = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VoucherId = table.Column<int>(type: "int", nullable: true),
                    VoucherSubId = table.Column<int>(type: "int", nullable: true),
                    AccId = table.Column<int>(type: "int", nullable: false),
                    LuserIdCheck = table.Column<int>(type: "int", nullable: true),
                    LuserIdApprove = table.Column<int>(type: "int", nullable: true),
                    isManualEntry = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherSubCheckno", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSubCheckno_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSubCheckno_Acc_VoucherSub_VoucherSubId",
                        column: x => x.VoucherSubId,
                        principalTable: "Acc_VoucherSub",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSubCheckno_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Acc_VoucherSubSection",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VoucherSubId = table.Column<int>(type: "int", nullable: false),
                    RowNoSSec = table.Column<int>(type: "int", nullable: false),
                    VoucherId = table.Column<int>(type: "int", nullable: false),
                    AccId = table.Column<int>(type: "int", nullable: false),
                    SRowNo = table.Column<int>(type: "int", nullable: false),
                    SubSectId = table.Column<int>(type: "int", nullable: false),
                    Note1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Note2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    SubSectionId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherSubSection", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSubSection_Acc_VoucherSub_VoucherSubId",
                        column: x => x.VoucherSubId,
                        principalTable: "Acc_VoucherSub",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherSubSection_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Acc_VoucherTags",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VoucherId = table.Column<int>(type: "int", nullable: false),
                    tag = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherTags", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherTags_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherTags_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Acc_VoucherTranGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VoucherTranGroupId = table.Column<int>(type: "int", nullable: false),
                    VoucherId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Acc_VoucherTranGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherTranGroup_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherTranGroup_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Acc_VoucherTranGroup_VoucherTranGroup_VoucherTranGroupId",
                        column: x => x.VoucherTranGroupId,
                        principalTable: "VoucherTranGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccountHead",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccType = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: false),
                    AccName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    NumericNumber = table.Column<int>(type: "int", nullable: true),
                    AccCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isSystem = table.Column<bool>(type: "bit", nullable: false),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    AccountCategoryId = table.Column<int>(type: "int", nullable: true),
                    AccountBalance = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    AccountBalanceLive = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    OpDebit = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OpCredit = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Rate = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OpDebitLocal = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OpCreditLocal = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    IsCashItem = table.Column<bool>(type: "bit", nullable: false),
                    IsBankItem = table.Column<bool>(type: "bit", nullable: false),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    isItemConsumed = table.Column<bool>(type: "bit", nullable: false),
                    isItemInventory = table.Column<bool>(type: "bit", nullable: false),
                    IsChkRef = table.Column<bool>(type: "bit", nullable: false),
                    IsItemDepExp = table.Column<bool>(type: "bit", nullable: false),
                    IsItemAccmulateddDep = table.Column<bool>(type: "bit", nullable: false),
                    IsItemBS = table.Column<bool>(type: "bit", nullable: false),
                    IsItemPL = table.Column<bool>(type: "bit", nullable: false),
                    IsItemTA = table.Column<bool>(type: "bit", nullable: false),
                    IsItemCS = table.Column<bool>(type: "bit", nullable: false),
                    OpDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    AccumulatedDepId = table.Column<int>(type: "int", nullable: true),
                    DepExpenseId = table.Column<int>(type: "int", nullable: true),
                    DepreciationRate = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    LevelId = table.Column<int>(type: "int", nullable: true),
                    Level = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountHead", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AccountHead_AccountCategory_AccountCategoryId",
                        column: x => x.AccountCategoryId,
                        principalTable: "AccountCategory",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_AccountHead_AccountHead_ParentId",
                        column: x => x.ParentId,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_AccountHead_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AccountHead_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AccountHeadPermission",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LuserIdAllow = table.Column<int>(type: "int", nullable: false),
                    AccId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountHeadPermission", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AccountHeadPermission_AccountHead_AccId",
                        column: x => x.AccId,
                        principalTable: "AccountHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AccountHeadPermission_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "AccountsDailyTransaction",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TransactionCode = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TransactionType = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TransactionCategory = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    InputDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PaymentTypeId = table.Column<int>(type: "int", nullable: true),
                    IsRecurring = table.Column<bool>(type: "bit", nullable: false),
                    FilePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TransactionFilePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CurrencyRate = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TransactionAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TransactionQuantity = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TransactionRate = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DiscountAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    VATAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    AITAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isPost = table.Column<bool>(type: "bit", nullable: false),
                    isSystem = table.Column<bool>(type: "bit", nullable: false),
                    DebitAccountId = table.Column<int>(type: "int", nullable: false),
                    CreditAccountId = table.Column<int>(type: "int", nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    MemberId = table.Column<int>(type: "int", nullable: true),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    PurchaseReturnId = table.Column<int>(type: "int", nullable: true),
                    SalarySheetId = table.Column<int>(type: "int", nullable: true),
                    SalesId = table.Column<int>(type: "int", nullable: true),
                    SalesReturnId = table.Column<int>(type: "int", nullable: true),
                    IssueId = table.Column<int>(type: "int", nullable: true),
                    DamageId = table.Column<int>(type: "int", nullable: true),
                    TransferInId = table.Column<int>(type: "int", nullable: true),
                    TransferOutId = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<int>(type: "int", nullable: true),
                    ParentTransactionId = table.Column<int>(type: "int", nullable: true),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    ComingFrom = table.Column<int>(type: "int", nullable: true),
                    ProductItemId = table.Column<int>(type: "int", nullable: true),
                    CategoryItemId = table.Column<int>(type: "int", nullable: true),
                    CheckNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    dtFromChk = table.Column<DateTime>(type: "datetime2", nullable: true),
                    dtToChk = table.Column<DateTime>(type: "datetime2", nullable: true),
                    dtClearChk = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CheckRemarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    isReceipt = table.Column<bool>(type: "bit", nullable: false),
                    isPayment = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountsDailyTransaction", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransaction_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransaction_AccountHead_CreditAccountId",
                        column: x => x.CreditAccountId,
                        principalTable: "AccountHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransaction_AccountHead_DebitAccountId",
                        column: x => x.DebitAccountId,
                        principalTable: "AccountHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransaction_AccountsDailyTransaction_ParentTransactionId",
                        column: x => x.ParentTransactionId,
                        principalTable: "AccountsDailyTransaction",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransaction_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransaction_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransaction_PaymentType_PaymentTypeId",
                        column: x => x.PaymentTypeId,
                        principalTable: "PaymentType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AccountsDailyTransactionDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TransactionId = table.Column<int>(type: "int", nullable: false),
                    SalesId = table.Column<int>(type: "int", nullable: true),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    Amount = table.Column<float>(type: "real", nullable: false),
                    Discount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ExchangeLossGain = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    VAT = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    AIT = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    NetAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountsDailyTransactionDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransactionDetails_AccountsDailyTransaction_TransactionId",
                        column: x => x.TransactionId,
                        principalTable: "AccountsDailyTransaction",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AccountsDailyTransactionDetails_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ActivationTicket",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TicketNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ContactName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ContactNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Address = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    AreaZone = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PromiseDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    OTC = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    MRC = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    PackageId = table.Column<int>(type: "int", nullable: true),
                    UserType = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Priority = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ONUFrom = table.Column<string>(type: "nvarchar(120)", maxLength: 120, nullable: false),
                    ROUTERFrom = table.Column<string>(type: "nvarchar(120)", maxLength: 120, nullable: false),
                    ReferanceBy = table.Column<string>(type: "nvarchar(120)", maxLength: 120, nullable: false),
                    Note = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    FusionTeamLUserId = table.Column<int>(type: "int", nullable: true),
                    ActivatedbyLUserId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivationTicket", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActivationTicket_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AdvanceTrasactionTracking",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Duration = table.Column<int>(type: "int", nullable: false),
                    SalesId = table.Column<int>(type: "int", nullable: true),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    OccuringDate = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    Occurence = table.Column<int>(type: "int", nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AdvanceTrasactionTracking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AdvanceTrasactionTracking_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Agency",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AgencyName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Fillingfrequency = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ReportingMethod = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StartOfTaxPeriod = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Agency", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Agency_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AndroidMenuPermission_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AndroidMenuPermissionId = table.Column<int>(type: "int", nullable: false),
                    MenuId = table.Column<int>(type: "int", nullable: false),
                    IsCreate = table.Column<bool>(type: "bit", nullable: false),
                    IsEdit = table.Column<bool>(type: "bit", nullable: false),
                    IsDeleteP = table.Column<bool>(type: "bit", nullable: false),
                    IsView = table.Column<bool>(type: "bit", nullable: false),
                    IsReport = table.Column<bool>(type: "bit", nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    isDefault = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AndroidMenuPermission_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AndroidMenuPermission_Details_AndroidMenu_MenuId",
                        column: x => x.MenuId,
                        principalTable: "AndroidMenu",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AndroidMenuPermission_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LUserIdPermission = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AndroidMenuPermission_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AndroidMenuPermission_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BankAccountNo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BankAccountNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: true),
                    OpeningBankId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankAccountNo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankAccountNo_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BarcodePrintInfo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    WarehosueId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BarcodePrintInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BarcodePrintInfo_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BBLC_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BBLCMainId = table.Column<int>(type: "int", nullable: true),
                    PIId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BBLC_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BBLC_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BBLCMaster",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BBLCNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    BBLCAmdNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UDNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AmdNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: true),
                    TruckInfoId = table.Column<int>(type: "int", nullable: true),
                    ShipModeId = table.Column<int>(type: "int", nullable: true),
                    GroupLCId = table.Column<int>(type: "int", nullable: true),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Tenor = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PaymentTerm = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentTermsId = table.Column<int>(type: "int", nullable: true),
                    DayListId = table.Column<int>(type: "int", nullable: true),
                    DayListTermId = table.Column<int>(type: "int", nullable: true),
                    Insurance = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    PortOfLoadingId = table.Column<int>(type: "int", nullable: true),
                    PortOfDischargeId = table.Column<int>(type: "int", nullable: true),
                    OpeningBankId = table.Column<int>(type: "int", nullable: true),
                    LienBankId = table.Column<int>(type: "int", nullable: true),
                    TradeTermId = table.Column<int>(type: "int", nullable: true),
                    LcOpeningDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ExpiryDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UDDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    FirstShipmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastShipmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DestinationID = table.Column<int>(type: "int", nullable: true),
                    ConvertRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BBLCValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BBLCQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    GroupLCAverage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Balance = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PrevBBLCValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    IncreaseValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    DecreaseValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    NetValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BBLCPrintDocRef = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    BBLCPrintDocDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    COM_MasterLCId = table.Column<int>(type: "int", nullable: false),
                    ApprovalPerson = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ApprovedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateApproval = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RefNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrintDate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Percentage = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemGroupId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BBLCMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BBLCMaster_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_BBLCMaster_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_BBLCMaster_DayList_DayListId",
                        column: x => x.DayListId,
                        principalTable: "DayList",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_BBLCMaster_PaymentTermss_PaymentTermsId",
                        column: x => x.PaymentTermsId,
                        principalTable: "PaymentTermss",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_BBLCMaster_TradeTerm_TradeTermId",
                        column: x => x.TradeTermId,
                        principalTable: "TradeTerm",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "BOMAllocationCategory",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ShortName = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BOMAllocationCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BOMAllocationCategory_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BOMDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Remarks1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Remarks2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    BOMMasterId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    SizeId = table.Column<int>(type: "int", nullable: true),
                    BOMAllocationCategoryId = table.Column<int>(type: "int", nullable: true),
                    LossPercentage = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BOMDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BOMDetails_BOMAllocationCategory_BOMAllocationCategoryId",
                        column: x => x.BOMAllocationCategoryId,
                        principalTable: "BOMAllocationCategory",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_BOMDetails_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BOMMaster",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BOMCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StyleId = table.Column<int>(type: "int", nullable: false),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    SizeId = table.Column<int>(type: "int", nullable: true),
                    LossPercentage = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BOMMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BOMMaster_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Brand",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BrandName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ImagePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FileExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Brand", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Brand_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BuyerGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BuyerGroupName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    BuyerGroupCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BuyerGroupShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BuyerGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BuyerGroup_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BuyerPO_Consumption",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BuyerPOId = table.Column<int>(type: "int", nullable: false),
                    BOMMasterId = table.Column<int>(type: "int", nullable: false),
                    Remarks1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Remarks2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    SizeId = table.Column<int>(type: "int", nullable: true),
                    BOMAllocationCategoryId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BuyerPO_Consumption", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BuyerPO_Consumption_BOMAllocationCategory_BOMAllocationCategoryId",
                        column: x => x.BOMAllocationCategoryId,
                        principalTable: "BOMAllocationCategory",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_BuyerPO_Consumption_BOMMaster_BOMMasterId",
                        column: x => x.BOMMasterId,
                        principalTable: "BOMMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_BuyerPO_Consumption_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "BuyerPO_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BuyerPOId = table.Column<int>(type: "int", nullable: false),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    SizeId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BuyerPO_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BuyerPO_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BuyerPO_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StyleId = table.Column<int>(type: "int", nullable: true),
                    BuyerId = table.Column<int>(type: "int", nullable: true),
                    TotalQuantity = table.Column<double>(type: "float", nullable: false),
                    UnitPrice = table.Column<double>(type: "float", nullable: false),
                    TotalAmount = table.Column<double>(type: "float", nullable: false),
                    BuyerPO = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BuyerPO_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BuyerPO_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Bank",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BankName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    BankShortName = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    BankAddress = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Bank", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Bank_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_BankBranch",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BranchName = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: false),
                    BranchAddress = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_BankBranch", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_BankBranch_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_BuildingType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BuildingName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    BuildingShortName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    BuildingNameB = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_BuildingType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_BuildingType_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Department",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DeptCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DeptName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DeptBangla = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Slno = table.Column<short>(type: "smallint", nullable: true),
                    PcName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DtInput = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Department", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Department_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Designation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DesigName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DesigNameB = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SalaryRange = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SlNo = table.Column<int>(type: "int", nullable: true),
                    Gsmin = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    GradeId = table.Column<int>(type: "int", nullable: true),
                    AttBonus = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TtlManpower = table.Column<int>(type: "int", nullable: true),
                    ProposedManPower = table.Column<int>(type: "int", nullable: true),
                    PcName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DtInput = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Designation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Designation_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_District",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DistName = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    DistNameB = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    DistNameShort = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    SL = table.Column<int>(type: "int", nullable: true),
                    DtInput = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_District", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_District_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_PoliceStation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PStationName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PStationNameB = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    DistId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_PoliceStation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_PoliceStation_Cat_District_DistId",
                        column: x => x.DistId,
                        principalTable: "Cat_District",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_PostOffice",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    POName = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    POCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    PONameB = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    DistId = table.Column<int>(type: "int", nullable: false),
                    PStationId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_PostOffice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_PostOffice_Cat_District_DistId",
                        column: x => x.DistId,
                        principalTable: "Cat_District",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Cat_PostOffice_Cat_PoliceStation_PStationId",
                        column: x => x.PStationId,
                        principalTable: "Cat_PoliceStation",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Cat_Floor",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FloorName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FloorNameB = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Floor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Floor_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Grade",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GradeName = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    GradeNameB = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    MinGS = table.Column<double>(type: "float", nullable: true),
                    TtlManpower = table.Column<int>(type: "int", nullable: true),
                    SalaryRange = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TtlManPowerWorker = table.Column<int>(type: "int", nullable: true),
                    SlNo = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Grade", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Grade_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Line",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LineName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LineNameB = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Line", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Line_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Location",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LocationName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    LocationNameB = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    LocationNameShort = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    LocationNameShortB = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PcName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Location", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Location_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Section",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SectName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SectNameB = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DeptId = table.Column<int>(type: "int", nullable: true),
                    Slno = table.Column<int>(type: "int", nullable: false),
                    DtInput = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Section", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Section_Cat_Department_DeptId",
                        column: x => x.DeptId,
                        principalTable: "Cat_Department",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Cat_Section_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Shift",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShiftName = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    ShiftCode = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    ShiftDesc = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShiftIn = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ShiftOut = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ShiftLate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LunchTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LunchIn = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LunchOut = table.Column<DateTime>(type: "datetime2", nullable: false),
                    TiffinTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    TiffinIn = table.Column<DateTime>(type: "datetime2", nullable: false),
                    TiffinOut = table.Column<DateTime>(type: "datetime2", nullable: false),
                    RegHour = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ShiftType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShiftCat = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsInactive = table.Column<bool>(type: "bit", nullable: false),
                    TiffinTime1 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TiffinTimeIn1 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TiffinTime2 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TiffinTimeIn2 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtInput = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Shift", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Shift_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Skill",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SkillName = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    SkillNameB = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Skill", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Skill_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Cat_SubSection",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SubSectName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SubSectNameB = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SectId = table.Column<int>(type: "int", nullable: false),
                    DeptId = table.Column<int>(type: "int", nullable: false),
                    Slno = table.Column<short>(type: "smallint", nullable: false),
                    PcName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DtInput = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_SubSection", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_SubSection_Cat_Department_DeptId",
                        column: x => x.DeptId,
                        principalTable: "Cat_Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Cat_SubSection_Cat_Section_SectId",
                        column: x => x.SectId,
                        principalTable: "Cat_Section",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Cat_SubSection_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Cat_Unit",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UnitName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    UnitShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    UnitNameB = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cat_Unit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cat_Unit_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Category",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CategoryParentId = table.Column<int>(type: "int", nullable: true),
                    TaxPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isTaxExcluded = table.Column<bool>(type: "bit", nullable: false),
                    ImagePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FileExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Category", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Category_Category_CategoryParentId",
                        column: x => x.CategoryParentId,
                        principalTable: "Category",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Category_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ColorChild",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ColorId = table.Column<int>(type: "int", nullable: false),
                    StyleId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ColorChild", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ColorChild_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Colors",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ColorName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ColorCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ColorDesc = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    FilePath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ColorsFilePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Colors", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Colors_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "COM_CommercialInvoice",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CommercialInvoiceNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CommercialInvoiceDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CommercialCompanyID = table.Column<int>(type: "int", nullable: true),
                    BBLCId = table.Column<int>(type: "int", nullable: true),
                    SupplierID = table.Column<int>(type: "int", nullable: true),
                    TotalPI = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    DocumentReceiptDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Quantity = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    UnitMasterId = table.Column<int>(type: "int", nullable: true),
                    ConversionRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ItemGroupName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemDescription = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemDescList = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemGroupId = table.Column<int>(type: "int", nullable: true),
                    ItemDescId = table.Column<int>(type: "int", nullable: true),
                    BLNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BLDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DocumentStatusId = table.Column<int>(type: "int", nullable: true),
                    DocumentAssesmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BillOfEntryNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BillOfEntryDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CustomAssesmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    VasselETADate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ETBDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    GoodsInhouseDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    MotherVassel = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FidderVasel = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LCType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CommercialLCTypeId = table.Column<int>(type: "int", nullable: true),
                    MachinaryLCId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_CommercialInvoice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_CommercialInvoice_BBLCMaster_BBLCId",
                        column: x => x.BBLCId,
                        principalTable: "BBLCMaster",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_CommercialInvoice_CommercialLCType_CommercialLCTypeId",
                        column: x => x.CommercialLCTypeId,
                        principalTable: "CommercialLCType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_CommercialInvoice_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_COM_CommercialInvoice_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_CommercialInvoice_DocumentStatus_DocumentStatusId",
                        column: x => x.DocumentStatusId,
                        principalTable: "DocumentStatus",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "COM_CommercialInvoice_Sub",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemDescId = table.Column<int>(type: "int", nullable: false),
                    CommercialInvoiceId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_CommercialInvoice_Sub", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_CommercialInvoice_Sub_COM_CommercialInvoice_CommercialInvoiceId",
                        column: x => x.CommercialInvoiceId,
                        principalTable: "COM_CommercialInvoice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_COM_CommercialInvoice_Sub_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "COM_DocumentAcceptance_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CommercialInvoiceId = table.Column<int>(type: "int", nullable: true),
                    DocumentAcceptanceMasterId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_DocumentAcceptance_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_DocumentAcceptance_Details_COM_CommercialInvoice_CommercialInvoiceId",
                        column: x => x.CommercialInvoiceId,
                        principalTable: "COM_CommercialInvoice",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_DocumentAcceptance_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "COM_DocumentAcceptance_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillOfExchangeRef = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    BillDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BillMaturityDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BillPaymentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: true),
                    BuyerId = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    BBLCId = table.Column<int>(type: "int", nullable: true),
                    GroupLCId = table.Column<int>(type: "int", nullable: true),
                    MasterLCRef = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MasterLCId = table.Column<int>(type: "int", nullable: true),
                    TotalBBLCAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    PaidAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    PayableAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    AcceptedAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    NewCIAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ConversionRate = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_DocumentAcceptance_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_DocumentAcceptance_Master_BBLCMaster_BBLCId",
                        column: x => x.BBLCId,
                        principalTable: "BBLCMaster",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_DocumentAcceptance_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_COM_DocumentAcceptance_Master_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "COM_MachinaryLC_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MachinaryLCMasterID = table.Column<int>(type: "int", nullable: true),
                    PIId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_MachinaryLC_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_MachinaryLC_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "COM_MachinaryLC_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MachinaryLCNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    UDNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: true),
                    ShipModeId = table.Column<int>(type: "int", nullable: true),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Tenor = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PaymentTerm = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentTermsId = table.Column<int>(type: "int", nullable: true),
                    DayListId = table.Column<int>(type: "int", nullable: true),
                    Insurance = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    PortOfLoadingId = table.Column<int>(type: "int", nullable: true),
                    PortOfDischargeId = table.Column<int>(type: "int", nullable: true),
                    OpeningBankId = table.Column<int>(type: "int", nullable: true),
                    LienBankId = table.Column<int>(type: "int", nullable: true),
                    TradeTermId = table.Column<int>(type: "int", nullable: true),
                    LcOpeningDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ExpiryDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UDDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    FirstShipmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastShipmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DestinationID = table.Column<int>(type: "int", nullable: true),
                    ConvertRate = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    MachinaryLCValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    MachinaryLCQty = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    IncreaseValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    DecreaseValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    NetValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    GroupLCAverage = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Balance = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    MachinaryLCPrintDocRef = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MachinaryLCPrintDocDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CompanyId = table.Column<int>(type: "int", nullable: false),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemGroupId = table.Column<int>(type: "int", nullable: true),
                    ItemGroupsId = table.Column<int>(type: "int", nullable: false),
                    LCAmdNo = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: false),
                    LCAmdNote = table.Column<string>(type: "nvarchar(600)", maxLength: 600, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_MachinaryLC_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_MachinaryLC_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_COM_MachinaryLC_Master_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_MachinaryLC_Master_DayList_DayListId",
                        column: x => x.DayListId,
                        principalTable: "DayList",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_MachinaryLC_Master_PaymentTermss_PaymentTermsId",
                        column: x => x.PaymentTermsId,
                        principalTable: "PaymentTermss",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_MachinaryLC_Master_TradeTerm_TradeTermId",
                        column: x => x.TradeTermId,
                        principalTable: "TradeTerm",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "COM_MachineryLCDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MachineryLCId = table.Column<int>(type: "int", nullable: false),
                    WorkOrderId = table.Column<int>(type: "int", nullable: false),
                    WorkOrderRef = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_MachineryLCDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_MachineryLCDetails_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "COM_MasterLC_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SL = table.Column<int>(type: "int", nullable: true),
                    ExportPONo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    StyleName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ItemName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    HSCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Fabrication = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false),
                    OrderQty = table.Column<float>(type: "real", nullable: false),
                    Factor = table.Column<float>(type: "real", nullable: false),
                    QtyInPcs = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    UnitPrice = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ShipmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Destination = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ContractNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    OrderType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CatNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DeliveryNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DestinationPO = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Kimball = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    ColorCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ContractDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    MasterLCID = table.Column<int>(type: "int", nullable: false),
                    BuyerPOId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_MasterLC_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_MasterLC_Details_BuyerPO_Master_BuyerPOId",
                        column: x => x.BuyerPOId,
                        principalTable: "BuyerPO_Master",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_MasterLC_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "COM_MasterLCExport",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExportOrderID = table.Column<int>(type: "int", nullable: false),
                    ExportPONo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ExportOrderStatus = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MasterLCModelId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_MasterLCExport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_MasterLCExport_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "COM_ProformaInvoice_Sub",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemDescId = table.Column<int>(type: "int", nullable: true),
                    PIId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_ProformaInvoice_Sub", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_ProformaInvoice_Sub_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "COM_ProformaInvoices",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PINo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PIDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PIReceivingDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    ImportPONo = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    FileNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LCAF = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    ItemDescList = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemGroupId = table.Column<int>(type: "int", nullable: true),
                    GroupLCId = table.Column<int>(type: "int", nullable: true),
                    ItemGroupName = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    ItemDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    ItemDescId = table.Column<int>(type: "int", nullable: true),
                    Size = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Remarks = table.Column<string>(type: "VARCHAR(500)", maxLength: 500, nullable: false),
                    ImportQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ImportRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CartonRollQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    HSCode = table.Column<string>(type: "VARCHAR(50)", maxLength: 50, nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    MerchandiserName = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    RevNo = table.Column<string>(type: "VARCHAR(300)", maxLength: 300, nullable: false),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    PaymentTermsId = table.Column<int>(type: "int", nullable: true),
                    DayListId = table.Column<int>(type: "int", nullable: true),
                    OpeningBankId = table.Column<int>(type: "int", nullable: true),
                    BankAccountId = table.Column<int>(type: "int", nullable: true),
                    LienBankId = table.Column<int>(type: "int", nullable: true),
                    PITypeId = table.Column<int>(type: "int", nullable: true),
                    PortOfLoadingId = table.Column<int>(type: "int", nullable: true),
                    PortOfLoadingDestinationId = table.Column<int>(type: "int", nullable: true),
                    PortOfLoadingCountryOfOriginId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_COM_ProformaInvoices", x => x.Id);
                    table.ForeignKey(
                        name: "FK_COM_ProformaInvoices_BankAccountNo_BankAccountId",
                        column: x => x.BankAccountId,
                        principalTable: "BankAccountNo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_ProformaInvoices_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_COM_ProformaInvoices_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_ProformaInvoices_DayList_DayListId",
                        column: x => x.DayListId,
                        principalTable: "DayList",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_COM_ProformaInvoices_PaymentTermss_PaymentTermsId",
                        column: x => x.PaymentTermsId,
                        principalTable: "PaymentTermss",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Commercial",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CompanyName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CompanyShortName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FactoryPhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FaxNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EmailID = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Web = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TradeLicenceNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TINNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VATNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IRCNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BKMEARegNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContactPerson = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContactPersonDesignation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BusinessType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Status = table.Column<bool>(type: "bit", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Commercial", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Commercial_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CompanyCurrencies",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CurrencyId = table.Column<int>(type: "int", nullable: false),
                    CurrencyRate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AsOf = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompanyCurrencies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompanyCurrencies_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CompanyCurrencies_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CompanyPermission",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    isDefault = table.Column<bool>(type: "bit", nullable: false),
                    isChecked = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompanyPermission", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompanyPermission_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CostCalculated",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    PurchaseReturnId = table.Column<int>(type: "int", nullable: true),
                    SalesId = table.Column<int>(type: "int", nullable: true),
                    SalesReturnId = table.Column<int>(type: "int", nullable: true),
                    SalesExchangeId = table.Column<int>(type: "int", nullable: true),
                    IssueId = table.Column<int>(type: "int", nullable: true),
                    DamageId = table.Column<int>(type: "int", nullable: true),
                    InternalTransferId = table.Column<int>(type: "int", nullable: true),
                    IsTransferIn = table.Column<bool>(type: "bit", nullable: false),
                    IsTransferOut = table.Column<bool>(type: "bit", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: true),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    isManualProcess = table.Column<bool>(type: "bit", nullable: false),
                    CurrQty = table.Column<decimal>(type: "decimal(18,6)", nullable: false),
                    CurrPrice = table.Column<decimal>(type: "decimal(18,5)", nullable: false),
                    TotalCurrPrice = table.Column<decimal>(type: "decimal(18,5)", nullable: false),
                    PrevQty = table.Column<decimal>(type: "decimal(18,6)", nullable: false),
                    PrevPrice = table.Column<decimal>(type: "decimal(18,5)", nullable: false),
                    TotalPrevPrice = table.Column<decimal>(type: "decimal(18,5)", nullable: false),
                    CalculatedPrice = table.Column<decimal>(type: "decimal(18,5)", nullable: false),
                    CalculatedDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DeletedDocNo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CostCalculated", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CostCalculated_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CreditBalance",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ActivationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ValidityDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PurchaseQuantity = table.Column<int>(type: "int", nullable: false),
                    UsedQuantity = table.Column<int>(type: "int", nullable: false),
                    PurchaseRate = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    SoftwarePackageId = table.Column<int>(type: "int", nullable: true),
                    Type = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CreditBalance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CreditBalance_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CreditBalance_SoftwarePackage_SoftwarePackageId",
                        column: x => x.SoftwarePackageId,
                        principalTable: "SoftwarePackage",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "CreditUsed",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SMSText = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    CommandType = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    TextLength = table.Column<int>(type: "int", nullable: false),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    UsedValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    SendingDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CreditUsed", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CreditUsed_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Customer",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Title = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    MiddelName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Suffix = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    DisplayName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CompanyName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    MobileNumber = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Fax = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Other = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CustomerCurrencyId = table.Column<int>(type: "int", nullable: false),
                    BillingStreetAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    BillingCity = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    BillingProvince = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    BillingPostalCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    BillingCountry = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ShippingStreetAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShippingCity = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ShippingProvince = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ShippingPostalCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ShippingCountry = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FileName = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Phone = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SecoundaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    City = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CustType = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: false),
                    CustParentId = table.Column<int>(type: "int", nullable: true),
                    OpBalance = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ClBalance = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OverDueBalance = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CreditLimit = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TradeTermsId = table.Column<int>(type: "int", nullable: true),
                    MonthlyTarget = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    SalesRepresentativeId = table.Column<int>(type: "int", nullable: true),
                    NextPaymentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LoginId = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Password = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    CustomerCommissionPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    SRCommissionPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ContactPersonName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ContactPersonDesignation = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Website = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PaymentTypeId = table.Column<int>(type: "int", nullable: true),
                    PaymentTermsId = table.Column<int>(type: "int", nullable: true),
                    DeliveryOptions = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Language = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Taxes = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    OpeningDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Customer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Customer_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Customer_Country_CustomerCurrencyId",
                        column: x => x.CustomerCurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Customer_Customer_CustParentId",
                        column: x => x.CustParentId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Customer_PaymentType_PaymentTypeId",
                        column: x => x.PaymentTypeId,
                        principalTable: "PaymentType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "CustomFormStyle",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    ReportFor = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Template = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    BusinessName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Color = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    FontColor = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Phone = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    LogoSize = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FontSize = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CompanyRegNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LogoPlacement = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    BusinessAllAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FontFamily = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PageMarginLeft = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PageMarginRight = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PageMarginTop = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PageMarginBottom = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsFitPrinted = table.Column<bool>(type: "bit", nullable: false),
                    IsLetterHeadUsed = table.Column<bool>(type: "bit", nullable: false),
                    DocTypeId = table.Column<int>(type: "int", nullable: true),
                    IsDefault = table.Column<bool>(type: "bit", nullable: false),
                    IsBusinessNameShow = table.Column<bool>(type: "bit", nullable: false),
                    IsPhoneShow = table.Column<bool>(type: "bit", nullable: false),
                    IsEmailShow = table.Column<bool>(type: "bit", nullable: false),
                    IsComRegShow = table.Column<bool>(type: "bit", nullable: false),
                    IsBusinessAddrsShow = table.Column<bool>(type: "bit", nullable: false),
                    IsWebsiteShow = table.Column<bool>(type: "bit", nullable: false),
                    IsFormNumbers = table.Column<bool>(type: "bit", nullable: false),
                    IsCustomTranUsed = table.Column<bool>(type: "bit", nullable: false),
                    IsBillingAddress = table.Column<bool>(type: "bit", nullable: false),
                    IsShipping = table.Column<bool>(type: "bit", nullable: false),
                    IsDueDate = table.Column<bool>(type: "bit", nullable: false),
                    IsCustomVatNo = table.Column<bool>(type: "bit", nullable: false),
                    IsDiscounted = table.Column<bool>(type: "bit", nullable: false),
                    IsDeposited = table.Column<bool>(type: "bit", nullable: false),
                    IsTaxSummary = table.Column<bool>(type: "bit", nullable: false),
                    IsEstimateSummary = table.Column<bool>(type: "bit", nullable: false),
                    IsShowOnInvoice = table.Column<bool>(type: "bit", nullable: false),
                    MessageToCustomer = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    FooterText = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    Invoice = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TaxInvoice = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ComRegNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Website = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    MessageToCustTextSize = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    FooterTextSize = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    FootertextPlacement = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ColumnOrder = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsFullDetails = table.Column<bool>(type: "bit", nullable: false),
                    IsSummarizedDetails = table.Column<bool>(type: "bit", nullable: false),
                    IsPdfAttached = table.Column<bool>(type: "bit", nullable: false),
                    StandardEmailSubject = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsStandardEmialGreetingUsed = table.Column<bool>(type: "bit", nullable: false),
                    StandardEmailGreetingsAppeal = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    StandardEmailGreetingFullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    StandardEmailMsgToCustomer = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReiminderEmailSubject = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsReiminderEmailGreetingUsed = table.Column<bool>(type: "bit", nullable: false),
                    ReiminderEmailGreetingsAppeal = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReiminderEmailGreetingFullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReiminderEmailMsgToCustomer = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    StandardEmailTemplateHolder = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReminderEmailTemplateHolder = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomFormStyle", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CustomFormStyle_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CustomFormStyle_DocType_DocTypeId",
                        column: x => x.DocTypeId,
                        principalTable: "DocType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "DailyCurrencyRate",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    tranDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CountryIdForeign = table.Column<int>(type: "int", nullable: false),
                    AmountForeign = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CountryIdLocal = table.Column<int>(type: "int", nullable: false),
                    AmountLocalBuy = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    AmountLocalSale = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isAutoEntry = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DailyCurrencyRate", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DailyCurrencyRate_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DailyProduction_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DailyProductionId = table.Column<int>(type: "int", nullable: false),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    SizeId = table.Column<int>(type: "int", nullable: true),
                    ReceivedQuantity = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DailyProduction_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DailyProduction_Details_Colors_ColorId",
                        column: x => x.ColorId,
                        principalTable: "Colors",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_DailyProduction_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DailyProduction_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StyleId = table.Column<int>(type: "int", nullable: true),
                    BuyerPOId = table.Column<int>(type: "int", nullable: true),
                    BuyerId = table.Column<int>(type: "int", nullable: true),
                    TotalQuantity = table.Column<double>(type: "float", nullable: false),
                    DepartmentId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DailyProduction_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DailyProduction_Master_BuyerPO_Master_BuyerPOId",
                        column: x => x.BuyerPOId,
                        principalTable: "BuyerPO_Master",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_DailyProduction_Master_Cat_Department_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Cat_Department",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_DailyProduction_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DailyProduction_Master_Customer_BuyerId",
                        column: x => x.BuyerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Damage",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DamageDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DamageCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReferanceOne = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ReferanceTwo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    WarehouseIdMain = table.Column<int>(type: "int", nullable: true),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Damage", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Damage_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DamageBatchItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DamageItemId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchId = table.Column<int>(type: "int", nullable: false),
                    BatchSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DamageBatchItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DamageBatchItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DamageItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    AvgCostPrice = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    DamageId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    SerialItem = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DamageItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DamageItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_DamageItems_Damage_DamageId",
                        column: x => x.DamageId,
                        principalTable: "Damage",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DashBoardLayoutOrder",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DashId = table.Column<int>(type: "int", nullable: false),
                    Order = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DashBoardLayoutOrder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DashBoardLayoutOrder_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DayListTerm",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DayListTermName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DayListTermShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DayListTermGroup = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DayListTerm", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DayListTerm_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryService",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    PhoneNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    PickupPoint = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CategoryId = table.Column<int>(type: "int", nullable: true),
                    WeightId = table.Column<int>(type: "int", nullable: true),
                    DistanceId = table.Column<int>(type: "int", nullable: true),
                    PaymentTypeId = table.Column<int>(type: "int", nullable: true),
                    DeliveryClientPhoneNo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    DeliveryClientName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    DeliveryClientAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PreferableDateTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DeliveryTimingId = table.Column<int>(type: "int", nullable: true),
                    BilledDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Note = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BillAmount = table.Column<float>(type: "real", nullable: false),
                    ReceivedAmount = table.Column<float>(type: "real", nullable: false),
                    Discount = table.Column<float>(type: "real", nullable: false),
                    isPost = table.Column<bool>(type: "bit", nullable: false),
                    isSystem = table.Column<bool>(type: "bit", nullable: false),
                    InWords = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeliveryService_Category_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "Category",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_DeliveryService_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DeliveryService_Customer_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_DeliveryService_PaymentType_PaymentTypeId",
                        column: x => x.PaymentTypeId,
                        principalTable: "PaymentType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "DeliveryServiceComment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CommentToLuserId = table.Column<int>(type: "int", nullable: true),
                    DeliveryServiceId = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    DeliveryServiceModelId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryServiceComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeliveryServiceComment_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DeliveryServiceComment_DeliveryServiceComment_DeliveryServiceId",
                        column: x => x.DeliveryServiceId,
                        principalTable: "DeliveryServiceComment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_DeliveryServiceComment_DeliveryService_DeliveryServiceModelId",
                        column: x => x.DeliveryServiceModelId,
                        principalTable: "DeliveryService",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "DeliveryServiceDistance",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DistanceName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    DistanceDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FigureForCalculation = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isInActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryServiceDistance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeliveryServiceDistance_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryServiceTiming",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TimingName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TimingDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FigureForCalculation = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isInActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryServiceTiming", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeliveryServiceTiming_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryServiceWeight",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WeightName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    WeightDescription = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FigureForCalculation = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isInActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryServiceWeight", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeliveryServiceWeight_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Destination",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DestinationNameSearch = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DestinationCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DestinationName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Destination", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Destination_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Destination_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "DiagnosisReport",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isInActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiagnosisReport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DiagnosisReport_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DiscountType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    IsDefault = table.Column<int>(type: "int", nullable: false),
                    DisPer = table.Column<double>(type: "float", nullable: false),
                    DiscountFor = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiscountType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DiscountType_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DocApprovalSetting",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocTypeId = table.Column<int>(type: "int", nullable: true),
                    ApprovalTypeId = table.Column<int>(type: "int", nullable: true),
                    LuserIdEntry = table.Column<int>(type: "int", nullable: false),
                    LuserIdCheck = table.Column<int>(type: "int", nullable: true),
                    LuserIdVerify = table.Column<int>(type: "int", nullable: true),
                    LuserIdApprove = table.Column<int>(type: "int", nullable: true),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocApprovalSetting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocApprovalSetting_ApprovalType_ApprovalTypeId",
                        column: x => x.ApprovalTypeId,
                        principalTable: "ApprovalType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_DocApprovalSetting_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DocApprovalSetting_DocType_DocTypeId",
                        column: x => x.DocTypeId,
                        principalTable: "DocType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "DyDashBoard",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ChartType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ChartTitle = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Grouptitle = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    GroupBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    GroupFilterValue = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    AdditionalFilterTitle = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    AdditionalFilter = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    AdditionalFilterValue = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TimePriod = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TimePriodValue = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Oder = table.Column<int>(type: "int", nullable: false),
                    Isvisible = table.Column<bool>(type: "bit", nullable: false),
                    IsSystem = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DyDashBoard", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DyDashBoard_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DynamicReport",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DynamicReportName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    DynamicReportPackingListName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DynamicReportPackingDetailsName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DynamicReportCaption = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DynamicReportActionName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReportDesignByPerson = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReportLocation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReportController = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VerifiedByPerson = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isVerified = table.Column<bool>(type: "bit", nullable: false),
                    CompletePercentage = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BuyerId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DynamicReport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DynamicReport_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DynamicReport_Customer_BuyerId",
                        column: x => x.BuyerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "EmailSettings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MailServer = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MailPort = table.Column<int>(type: "int", nullable: false),
                    Sender = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SenderName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmailSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmailSettings_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Employee",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmployeeName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    FathersName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    MobileNo = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: false),
                    NID = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PresentAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    PermanentAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    EmergencyContactName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmergencyMobileNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmergencyContactRelationship = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IntroducerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IntroducerContctNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IntroducerAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    PositionTitle = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DepartmentId = table.Column<int>(type: "int", nullable: true),
                    Designationid = table.Column<int>(type: "int", nullable: true),
                    GrossSalary = table.Column<float>(type: "real", nullable: false),
                    Basic = table.Column<float>(type: "real", nullable: false),
                    HR = table.Column<float>(type: "real", nullable: false),
                    MA = table.Column<float>(type: "real", nullable: false),
                    OthersAllowance = table.Column<float>(type: "real", nullable: false),
                    ProductionRate = table.Column<float>(type: "real", nullable: false),
                    HoursRate = table.Column<float>(type: "real", nullable: false),
                    EmpAdvanceBalance = table.Column<float>(type: "real", nullable: false),
                    EmpLoanBalance = table.Column<float>(type: "real", nullable: false),
                    WorkLocation = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Photo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isActive = table.Column<bool>(type: "bit", nullable: false),
                    EmployeeImagePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsExistImage = table.Column<bool>(type: "bit", nullable: false),
                    EmpNameB = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    RelgionId = table.Column<int>(type: "int", nullable: true),
                    BloodId = table.Column<int>(type: "int", nullable: true),
                    EmployeeTypeId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    DeptId = table.Column<int>(type: "int", nullable: true),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    DesigId = table.Column<int>(type: "int", nullable: true),
                    SectId = table.Column<int>(type: "int", nullable: true),
                    SubSectId = table.Column<int>(type: "int", nullable: true),
                    DtBirth = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtJoin = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtIncrement = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtPromotion = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtConfirm = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtPF = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtReleased = table.Column<DateTime>(type: "datetime2", nullable: true),
                    GenderId = table.Column<int>(type: "int", nullable: true),
                    FingerId = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    IsCasual = table.Column<bool>(type: "bit", nullable: false),
                    IsConfirm = table.Column<bool>(type: "bit", nullable: false),
                    SkillId = table.Column<int>(type: "int", nullable: true),
                    EmpPhone1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpPhone2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsInactive = table.Column<bool>(type: "bit", nullable: false),
                    IsIncentiveBns = table.Column<bool>(type: "bit", nullable: false),
                    EmpPerZip = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmpEmail = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmpRemarks = table.Column<string>(type: "nvarchar(120)", maxLength: 120, nullable: false),
                    GradeId = table.Column<int>(type: "int", nullable: true),
                    FloorId = table.Column<int>(type: "int", nullable: true),
                    LineId = table.Column<int>(type: "int", nullable: true),
                    IsAllowOT = table.Column<bool>(type: "bit", nullable: false),
                    DtLocalJoin = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ManageType = table.Column<int>(type: "int", nullable: false),
                    LinkUserId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Employee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Employee_Cat_BloodGroup_BloodId",
                        column: x => x.BloodId,
                        principalTable: "Cat_BloodGroup",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Department_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Cat_Department",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Department_DeptId",
                        column: x => x.DeptId,
                        principalTable: "Cat_Department",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Designation_DesigId",
                        column: x => x.DesigId,
                        principalTable: "Cat_Designation",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Designation_Designationid",
                        column: x => x.Designationid,
                        principalTable: "Cat_Designation",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_EmployeeType_EmployeeTypeId",
                        column: x => x.EmployeeTypeId,
                        principalTable: "Cat_EmployeeType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Floor_FloorId",
                        column: x => x.FloorId,
                        principalTable: "Cat_Floor",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Gender_GenderId",
                        column: x => x.GenderId,
                        principalTable: "Cat_Gender",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Grade_GradeId",
                        column: x => x.GradeId,
                        principalTable: "Cat_Grade",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Line_LineId",
                        column: x => x.LineId,
                        principalTable: "Cat_Line",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Religion_RelgionId",
                        column: x => x.RelgionId,
                        principalTable: "Cat_Religion",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Section_SectId",
                        column: x => x.SectId,
                        principalTable: "Cat_Section",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Shift_ShiftId",
                        column: x => x.ShiftId,
                        principalTable: "Cat_Shift",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Skill_SkillId",
                        column: x => x.SkillId,
                        principalTable: "Cat_Skill",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_SubSection_SubSectId",
                        column: x => x.SubSectId,
                        principalTable: "Cat_SubSection",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Cat_Unit_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Cat_Unit",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Employee_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HR_AttFixed",
                columns: table => new
                {
                    AttId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    DtPunchDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ShiftId = table.Column<int>(type: "int", nullable: false),
                    TimeIn = table.Column<TimeSpan>(type: "time", nullable: false),
                    TimeOut = table.Column<TimeSpan>(type: "time", nullable: false),
                    StatusId = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OTHour = table.Column<float>(type: "real", nullable: false),
                    OTHourInTime = table.Column<TimeSpan>(type: "time", nullable: false),
                    OT = table.Column<float>(type: "real", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsInactive = table.Column<bool>(type: "bit", nullable: false),
                    TimeInPrev = table.Column<TimeSpan>(type: "time", nullable: false),
                    TimeOutPrev = table.Column<TimeSpan>(type: "time", nullable: false),
                    StatusPrev = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OTHourPrev = table.Column<float>(type: "real", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    DtTran = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_AttFixed", x => x.AttId);
                    table.ForeignKey(
                        name: "FK_HR_AttFixed_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Address",
                columns: table => new
                {
                    EmpAddId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    EmpCurrCityVill = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    EmpPerCityVill = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    EmpRemarksCurr = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    EmpRemarksPer = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    EmpCurrPOId = table.Column<int>(type: "int", nullable: true),
                    EmpPerPOId = table.Column<int>(type: "int", nullable: true),
                    EmpCurrPSId = table.Column<int>(type: "int", nullable: true),
                    EmpPerPSId = table.Column<int>(type: "int", nullable: true),
                    EmpCurrDistId = table.Column<int>(type: "int", nullable: true),
                    EmpPerDistId = table.Column<int>(type: "int", nullable: true),
                    ComId = table.Column<int>(type: "int", maxLength: 80, nullable: false),
                    PcName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    LuserId = table.Column<int>(type: "int", maxLength: 80, nullable: false),
                    DateAdded = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UpdateByUserId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateUpdated = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Address", x => x.EmpAddId);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Address_Cat_District_EmpCurrDistId",
                        column: x => x.EmpCurrDistId,
                        principalTable: "Cat_District",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Address_Cat_District_EmpPerDistId",
                        column: x => x.EmpPerDistId,
                        principalTable: "Cat_District",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Address_Cat_PoliceStation_EmpCurrPSId",
                        column: x => x.EmpCurrPSId,
                        principalTable: "Cat_PoliceStation",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Address_Cat_PoliceStation_EmpPerPSId",
                        column: x => x.EmpPerPSId,
                        principalTable: "Cat_PoliceStation",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Address_Cat_PostOffice_EmpCurrPOId",
                        column: x => x.EmpCurrPOId,
                        principalTable: "Cat_PostOffice",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Address_Cat_PostOffice_EmpPerPOId",
                        column: x => x.EmpPerPOId,
                        principalTable: "Cat_PostOffice",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Address_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Image",
                columns: table => new
                {
                    EmpImageId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    EmpImage = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    EmpImagePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EmpImageExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EmpSign = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    EmpSignPath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EmpSignExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ComId = table.Column<int>(type: "int", maxLength: 80, nullable: false),
                    PcName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    LuserId = table.Column<int>(type: "int", maxLength: 80, nullable: false),
                    DateAdded = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UpdateByUserId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateUpdated = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Image", x => x.EmpImageId);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Image_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HR_RawData_App",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DeviceNo = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    CardNo = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    FPId = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    dtPunchDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    dtPunchTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    StNo = table.Column<int>(type: "int", nullable: true),
                    InOut = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    OvNMark = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsNew = table.Column<byte>(type: "tinyint", nullable: true),
                    wId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    PCName = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    LUserId = table.Column<int>(type: "int", nullable: true),
                    DeviceType = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Latitude = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    QRData = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Imei = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    LocationName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PicBack = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PicFront = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EmployeeModelId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_RawData_App", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_RawData_App_Employee_EmployeeModelId",
                        column: x => x.EmployeeModelId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserAccount",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UniqueUserId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PhoneNumber = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Password = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    UserRoleId = table.Column<int>(type: "int", nullable: true),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    IsEmailVerified = table.Column<bool>(type: "bit", nullable: false),
                    IsPhoneVerified = table.Column<bool>(type: "bit", nullable: false),
                    IsBaseUser = table.Column<bool>(type: "bit", nullable: false),
                    IsInacitve = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    OTP = table.Column<string>(type: "VARCHAR(6)", maxLength: 6, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserAccount", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserAccount_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserAccount_Employee_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_UserAccount_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_UserAccount_UserRole_UserRoleId",
                        column: x => x.UserRoleId,
                        principalTable: "UserRole",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "EmployeeAttendance",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Latitude = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    PunchDateTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PunchDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    InTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    OutTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    EmployeeLuerId = table.Column<int>(type: "int", nullable: false),
                    LocationName = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: false),
                    Status = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    ImagePathFront = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ImagePathBack = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeAttendance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeAttendance_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeAttendance_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Feedback",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FeedbackForm = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Rating = table.Column<int>(type: "int", nullable: false),
                    Feedback = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Feedback", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Feedback_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Feedback_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Gallery",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    Tags = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    UploadTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ModifiedTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LuserId = table.Column<int>(type: "int", nullable: true),
                    ComId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Gallery", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Gallery_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Gallery_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "GatePass",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GatePassDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    GatePassCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Status = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    StyleNo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    BuyerName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    EmailId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    City = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Transport = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ManualNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Through = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ToName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GatePass", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GatePass_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_GatePass_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "GroupLC_Main",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Margin = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    FreightChargePer = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: false),
                    BuyerId = table.Column<int>(type: "int", nullable: false),
                    GroupLCRefName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TotalGroupLCValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalGroupLCValueManual = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalGroupLCQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    FirstShipDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastShipDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    GroupLCAmdNo = table.Column<string>(type: "VARCHAR(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GroupLC_Main", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GroupLC_Main_Commercial_CommercialCompanyId",
                        column: x => x.CommercialCompanyId,
                        principalTable: "Commercial",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_GroupLC_Main_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_GroupLC_Main_Customer_BuyerId",
                        column: x => x.BuyerId,
                        principalTable: "Customer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_GroupLC_Main_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_BankInfo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    PayModeId = table.Column<int>(type: "int", nullable: true),
                    AccTypeId = table.Column<int>(type: "int", nullable: true),
                    BankId = table.Column<int>(type: "int", nullable: true),
                    BranchId = table.Column<int>(type: "int", nullable: true),
                    RoutingNumber = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    AccountNumber = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    AccountName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    IsApproved = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_BankInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_BankInfo_Cat_AccountType_AccTypeId",
                        column: x => x.AccTypeId,
                        principalTable: "Cat_AccountType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_BankInfo_Cat_BankBranch_BranchId",
                        column: x => x.BranchId,
                        principalTable: "Cat_BankBranch",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_BankInfo_Cat_Bank_BankId",
                        column: x => x.BankId,
                        principalTable: "Cat_Bank",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_BankInfo_Cat_PayMode_PayModeId",
                        column: x => x.PayModeId,
                        principalTable: "Cat_PayMode",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_BankInfo_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_BankInfo_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_BankInfo_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Education",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    ExamName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    ExamResult = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    MajorSub = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    InstituteName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    BoardName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PassingYear = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Certificate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Education", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Education_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Education_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Education_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Experience",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    PrevCompany = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PrevDesignation = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PrevSalary = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    DtFromJob = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtToJob = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ExpYear = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Experience", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Experience_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Experience_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Experience_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Family",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    EmpFather = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpFatherB = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpFatherNID = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    EmpFatherMobile = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpMother = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpMotherB = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpMotherNID = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    EmpMotherMobile = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpSpouse = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpSpouseB = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpSpouseNID = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    EmpSpouseMobile = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpChildName1 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpChildDOB1 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    EmpChildEdu1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpChildBirthCer1 = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    EmpChildName2 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpChildDOB2 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    EmpChildEdu2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpChildBirthCer2 = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    EmpChildName3 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpChildDOB3 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    EmpChildEdu3 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpChildBirthCer3 = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    EmpChildName4 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpChildDOB4 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    EmpChildEdu4 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpChildBirthCer4 = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Family", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Family_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Family_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Family_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Increment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    DtIncrement = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtPromotion = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Amount = table.Column<double>(type: "float", nullable: true),
                    Percentage = table.Column<float>(type: "real", nullable: true),
                    OldSalary = table.Column<double>(type: "float", nullable: true),
                    NewSalary = table.Column<double>(type: "float", nullable: true),
                    OldBS = table.Column<double>(type: "float", nullable: true),
                    NewBS = table.Column<double>(type: "float", nullable: true),
                    NewHR = table.Column<double>(type: "float", nullable: true),
                    OldHR = table.Column<double>(type: "float", nullable: true),
                    NewHRExp = table.Column<double>(type: "float", nullable: true),
                    OldHRExp = table.Column<double>(type: "float", nullable: true),
                    NewHRExpOther = table.Column<double>(type: "float", nullable: true),
                    OldHRExpOther = table.Column<double>(type: "float", nullable: true),
                    OldMA = table.Column<double>(type: "float", nullable: true),
                    NewMA = table.Column<double>(type: "float", nullable: true),
                    NewTA = table.Column<double>(type: "float", nullable: true),
                    OldTA = table.Column<double>(type: "float", nullable: true),
                    NewFA = table.Column<double>(type: "float", nullable: true),
                    OldFA = table.Column<double>(type: "float", nullable: true),
                    OldPA = table.Column<double>(type: "float", nullable: true),
                    NewPA = table.Column<double>(type: "float", nullable: true),
                    OldDA = table.Column<double>(type: "float", nullable: true),
                    NewDA = table.Column<double>(type: "float", nullable: true),
                    BSDiff = table.Column<float>(type: "real", nullable: true),
                    HRDiff = table.Column<float>(type: "real", nullable: true),
                    HRExpDiff = table.Column<float>(type: "real", nullable: true),
                    HRExpOtherDiff = table.Column<float>(type: "real", nullable: true),
                    MADiff = table.Column<float>(type: "real", nullable: true),
                    OldUnitId = table.Column<int>(type: "int", nullable: true),
                    NewUnitId = table.Column<int>(type: "int", nullable: true),
                    OldDeptId = table.Column<int>(type: "int", nullable: true),
                    NewDeptId = table.Column<int>(type: "int", nullable: true),
                    OldSectId = table.Column<int>(type: "int", nullable: true),
                    NewSectId = table.Column<int>(type: "int", nullable: true),
                    OldDesigId = table.Column<int>(type: "int", nullable: true),
                    NewDesigId = table.Column<int>(type: "int", nullable: true),
                    IncTypeId = table.Column<int>(type: "int", nullable: true),
                    OldEmpTypeId = table.Column<int>(type: "int", nullable: true),
                    NewEmpTypeId = table.Column<int>(type: "int", nullable: true),
                    OldGenderId = table.Column<int>(type: "int", nullable: true),
                    NewGenderId = table.Column<int>(type: "int", nullable: true),
                    PcName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    DateAdded = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UpdateByUserId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtInput = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    UserAccountListId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Increment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Department_NewDeptId",
                        column: x => x.NewDeptId,
                        principalTable: "Cat_Department",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Department_OldDeptId",
                        column: x => x.OldDeptId,
                        principalTable: "Cat_Department",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Designation_NewDesigId",
                        column: x => x.NewDesigId,
                        principalTable: "Cat_Designation",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Designation_OldDesigId",
                        column: x => x.OldDesigId,
                        principalTable: "Cat_Designation",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Emp_Type_NewEmpTypeId",
                        column: x => x.NewEmpTypeId,
                        principalTable: "Cat_Emp_Type",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Emp_Type_OldEmpTypeId",
                        column: x => x.OldEmpTypeId,
                        principalTable: "Cat_Emp_Type",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Gender_NewGenderId",
                        column: x => x.NewGenderId,
                        principalTable: "Cat_Gender",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Gender_OldGenderId",
                        column: x => x.OldGenderId,
                        principalTable: "Cat_Gender",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Section_NewSectId",
                        column: x => x.NewSectId,
                        principalTable: "Cat_Section",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Section_OldSectId",
                        column: x => x.OldSectId,
                        principalTable: "Cat_Section",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Unit_NewUnitId",
                        column: x => x.NewUnitId,
                        principalTable: "Cat_Unit",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Cat_Unit_OldUnitId",
                        column: x => x.OldUnitId,
                        principalTable: "Cat_Unit",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_HR_IncType_IncTypeId",
                        column: x => x.IncTypeId,
                        principalTable: "HR_IncType",
                        principalColumn: "IncTypeId");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Increment_UserAccount_UserAccountListId",
                        column: x => x.UserAccountListId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Nominee",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    EmpNomineeName1 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpNomineeDOB1 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    EmpNomineeJobType1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmpNomineeMobile1 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpNomineeNID1 = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    EmpNomineeRelation1 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    EmpNomineePercentage1 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    EmpNomineeAddress1 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    EmpNomineeName2 = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmpNomineeDOB2 = table.Column<DateTime>(type: "datetime2", nullable: true),
                    EmpNomineeJobType2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmpNomineeMobile2 = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmpNomineeNID2 = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    EmpNomineeRelation2 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    EmpNomineePercentage2 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    EmpNomineeAddress2 = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Nominee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Nominee_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Nominee_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Nominee_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_PersonalInfo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    NickName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    PassportNo = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    BirthCertificate = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    TINNo = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    MaritalStatus = table.Column<bool>(type: "bit", nullable: false),
                    ChildNo = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    Nationality = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Caste = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    IdentificationSign = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    Height = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Weight = table.Column<float>(type: "real", nullable: true),
                    IsUsingHouse = table.Column<bool>(type: "bit", nullable: false),
                    BId = table.Column<int>(type: "int", nullable: true),
                    EmpFileNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    MedicalBookNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    EmergencyContactName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmergencyContactNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    RelationEmerContact = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    EmployeeCodeBCIC = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Grade = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PoliceVerificationStatus = table.Column<bool>(type: "bit", nullable: false),
                    PFFileNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    IsAllowPF = table.Column<bool>(type: "bit", nullable: false),
                    DtPF = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IsPFFinal = table.Column<bool>(type: "bit", nullable: false),
                    PFFinalYId = table.Column<int>(type: "int", nullable: true),
                    IsPFFundTransfer = table.Column<bool>(type: "bit", nullable: false),
                    PFFundTransferYId = table.Column<int>(type: "int", nullable: true),
                    IsWFFinal = table.Column<bool>(type: "bit", nullable: false),
                    WFFinalYId = table.Column<int>(type: "int", nullable: true),
                    IsWFFundTransfer = table.Column<bool>(type: "bit", nullable: false),
                    WFFundTransferYId = table.Column<int>(type: "int", nullable: true),
                    IsGratuityFinal = table.Column<bool>(type: "bit", nullable: false),
                    GratuityFinalYId = table.Column<int>(type: "int", nullable: true),
                    IsGratuityFundTransfer = table.Column<bool>(type: "bit", nullable: false),
                    GratuityFundTransferYId = table.Column<int>(type: "int", nullable: true),
                    WeekDay = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_PersonalInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Acc_FiscalYear_GratuityFinalYId",
                        column: x => x.GratuityFinalYId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Acc_FiscalYear_GratuityFundTransferYId",
                        column: x => x.GratuityFundTransferYId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Acc_FiscalYear_PFFinalYId",
                        column: x => x.PFFinalYId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Acc_FiscalYear_PFFundTransferYId",
                        column: x => x.PFFundTransferYId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Acc_FiscalYear_WFFinalYId",
                        column: x => x.WFFinalYId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Acc_FiscalYear_WFFundTransferYId",
                        column: x => x.WFFundTransferYId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Cat_BuildingType_BId",
                        column: x => x.BId,
                        principalTable: "Cat_BuildingType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_PersonalInfo_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Released",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    DtReleased = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(120)", maxLength: 120, nullable: false),
                    RelType = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    IsApproved = table.Column<bool>(type: "bit", nullable: false),
                    DtPresentLast = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DtSubmit = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Released", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Released_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Released_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Released_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_Salary",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    LId1 = table.Column<int>(type: "int", nullable: true),
                    LId2 = table.Column<int>(type: "int", nullable: true),
                    LId3 = table.Column<int>(type: "int", nullable: true),
                    BId = table.Column<int>(type: "int", nullable: true),
                    PFLId = table.Column<int>(type: "int", nullable: true),
                    WelfareLId = table.Column<int>(type: "int", nullable: true),
                    MCLId = table.Column<int>(type: "int", nullable: true),
                    HBLId = table.Column<int>(type: "int", nullable: true),
                    HBLId2 = table.Column<int>(type: "int", nullable: true),
                    HBLId3 = table.Column<int>(type: "int", nullable: true),
                    PFLLId = table.Column<int>(type: "int", nullable: true),
                    PFLLId2 = table.Column<int>(type: "int", nullable: true),
                    PFLLId3 = table.Column<int>(type: "int", nullable: true),
                    GLId = table.Column<int>(type: "int", nullable: true),
                    BasicSalary = table.Column<float>(type: "real", nullable: false),
                    IsBS = table.Column<bool>(type: "bit", nullable: false),
                    HouseRent = table.Column<float>(type: "real", nullable: true),
                    IsHr = table.Column<bool>(type: "bit", nullable: false),
                    MadicalAllow = table.Column<float>(type: "real", nullable: true),
                    IsMa = table.Column<bool>(type: "bit", nullable: false),
                    FoodAllow = table.Column<float>(type: "real", nullable: true),
                    IsFa = table.Column<bool>(type: "bit", nullable: false),
                    HRExpensesOther = table.Column<float>(type: "real", nullable: true),
                    IsHRExpensesOther = table.Column<bool>(type: "bit", nullable: false),
                    ConveyanceAllow = table.Column<float>(type: "real", nullable: true),
                    IsConvAllow = table.Column<bool>(type: "bit", nullable: false),
                    DearnessAllow = table.Column<float>(type: "real", nullable: true),
                    IsDearAllow = table.Column<bool>(type: "bit", nullable: false),
                    GasAllow = table.Column<float>(type: "real", nullable: true),
                    IsGasAllow = table.Column<bool>(type: "bit", nullable: false),
                    PersonalPay = table.Column<float>(type: "real", nullable: true),
                    IsPersonalPay = table.Column<bool>(type: "bit", nullable: false),
                    ArrearBasic = table.Column<float>(type: "real", nullable: true),
                    IsArrearBasic = table.Column<bool>(type: "bit", nullable: false),
                    ArrearBonus = table.Column<float>(type: "real", nullable: true),
                    IsArrearBonus = table.Column<bool>(type: "bit", nullable: false),
                    WashingAllow = table.Column<float>(type: "real", nullable: true),
                    IsWashingAllow = table.Column<bool>(type: "bit", nullable: false),
                    SiftAllow = table.Column<float>(type: "real", nullable: true),
                    IsSiftAllow = table.Column<bool>(type: "bit", nullable: false),
                    ChargeAllow = table.Column<float>(type: "real", nullable: true),
                    IsChargAllow = table.Column<bool>(type: "bit", nullable: false),
                    MiscAdd = table.Column<float>(type: "real", nullable: true),
                    IsMiscAdd = table.Column<bool>(type: "bit", nullable: false),
                    ContainSub = table.Column<float>(type: "real", nullable: true),
                    IsContainSub = table.Column<bool>(type: "bit", nullable: false),
                    ComPfCount = table.Column<float>(type: "real", nullable: true),
                    IsComPfcount = table.Column<bool>(type: "bit", nullable: false),
                    EduAllow = table.Column<float>(type: "real", nullable: true),
                    IsEduAllow = table.Column<bool>(type: "bit", nullable: false),
                    TiffinAllow = table.Column<float>(type: "real", nullable: true),
                    IsTiffinAllow = table.Column<bool>(type: "bit", nullable: false),
                    CanteenAllow = table.Column<float>(type: "real", nullable: true),
                    IsCanteenAllow = table.Column<bool>(type: "bit", nullable: false),
                    AttAllow = table.Column<float>(type: "real", nullable: true),
                    IsAttAllow = table.Column<bool>(type: "bit", nullable: false),
                    FestivalBonus = table.Column<float>(type: "real", nullable: true),
                    IsFestivalBonus = table.Column<bool>(type: "bit", nullable: false),
                    RiskAllow = table.Column<float>(type: "real", nullable: true),
                    IsRiskAllow = table.Column<bool>(type: "bit", nullable: false),
                    NightAllow = table.Column<float>(type: "real", nullable: true),
                    IsNightAllow = table.Column<bool>(type: "bit", nullable: false),
                    MobileAllow = table.Column<float>(type: "real", nullable: true),
                    IsMobileAllow = table.Column<bool>(type: "bit", nullable: false),
                    Pf = table.Column<float>(type: "real", nullable: true),
                    IsPf = table.Column<bool>(type: "bit", nullable: false),
                    PfAdd = table.Column<float>(type: "real", nullable: true),
                    IsPfAdd = table.Column<bool>(type: "bit", nullable: false),
                    HrExp = table.Column<float>(type: "real", nullable: true),
                    IsHrexp = table.Column<bool>(type: "bit", nullable: false),
                    FesBonusDed = table.Column<float>(type: "real", nullable: true),
                    IsFesBonus = table.Column<bool>(type: "bit", nullable: false),
                    Transportcharge = table.Column<float>(type: "real", nullable: true),
                    IsTrncharge = table.Column<bool>(type: "bit", nullable: false),
                    TeliphoneCharge = table.Column<float>(type: "real", nullable: true),
                    IsTelcharge = table.Column<bool>(type: "bit", nullable: false),
                    GasChargeOther = table.Column<float>(type: "real", nullable: true),
                    IsGasChargeOther = table.Column<bool>(type: "bit", nullable: false),
                    ElectricChargeOther = table.Column<float>(type: "real", nullable: true),
                    IsElectricChargeOther = table.Column<bool>(type: "bit", nullable: false),
                    WaterChargeOther = table.Column<float>(type: "real", nullable: true),
                    IsWaterChargeOther = table.Column<bool>(type: "bit", nullable: false),
                    TAExpense = table.Column<float>(type: "real", nullable: true),
                    IsTAExp = table.Column<bool>(type: "bit", nullable: false),
                    SalaryAdv = table.Column<float>(type: "real", nullable: true),
                    IsSalaryAdv = table.Column<bool>(type: "bit", nullable: false),
                    PurchaseAdv = table.Column<float>(type: "real", nullable: true),
                    IsPurchaseAdv = table.Column<bool>(type: "bit", nullable: false),
                    McloanDed = table.Column<float>(type: "real", nullable: true),
                    IsMcloan = table.Column<bool>(type: "bit", nullable: false),
                    HbloanDed = table.Column<float>(type: "real", nullable: true),
                    IsHbloan = table.Column<bool>(type: "bit", nullable: false),
                    PfloannDed = table.Column<float>(type: "real", nullable: true),
                    IsPfloann = table.Column<bool>(type: "bit", nullable: false),
                    WfloanLocal = table.Column<float>(type: "real", nullable: true),
                    IsWfloanLocal = table.Column<bool>(type: "bit", nullable: false),
                    WfloanOther = table.Column<float>(type: "real", nullable: true),
                    IsWfloanOther = table.Column<bool>(type: "bit", nullable: false),
                    WpfloanDed = table.Column<float>(type: "real", nullable: true),
                    IsWpfloanDed = table.Column<bool>(type: "bit", nullable: false),
                    MaterialLoanDed = table.Column<float>(type: "real", nullable: true),
                    IsMaterialLoan = table.Column<bool>(type: "bit", nullable: false),
                    MiscDed = table.Column<float>(type: "real", nullable: true),
                    IsMiscDed = table.Column<bool>(type: "bit", nullable: false),
                    AdvAgainstExp = table.Column<float>(type: "real", nullable: true),
                    IsAdvAgainstExp = table.Column<bool>(type: "bit", nullable: false),
                    AdvFacility = table.Column<float>(type: "real", nullable: true),
                    IsAdvFacility = table.Column<bool>(type: "bit", nullable: false),
                    ElectricCharge = table.Column<float>(type: "real", nullable: true),
                    IsElectricCharge = table.Column<bool>(type: "bit", nullable: false),
                    Gascharge = table.Column<float>(type: "real", nullable: true),
                    IsGascharge = table.Column<bool>(type: "bit", nullable: false),
                    HazScheme = table.Column<float>(type: "real", nullable: true),
                    IsHazScheme = table.Column<bool>(type: "bit", nullable: false),
                    Donation = table.Column<float>(type: "real", nullable: true),
                    IsDonation = table.Column<bool>(type: "bit", nullable: false),
                    Dishantenna = table.Column<float>(type: "real", nullable: true),
                    IsDishantenna = table.Column<bool>(type: "bit", nullable: false),
                    RevenueStamp = table.Column<float>(type: "real", nullable: true),
                    IsRevenueStamp = table.Column<bool>(type: "bit", nullable: false),
                    OwaSub = table.Column<float>(type: "real", nullable: true),
                    IsOwaSub = table.Column<bool>(type: "bit", nullable: false),
                    DedIncBns = table.Column<float>(type: "real", nullable: true),
                    IsDedIncBns = table.Column<bool>(type: "bit", nullable: false),
                    DapEmpClub = table.Column<float>(type: "real", nullable: true),
                    IsDapEmpClub = table.Column<bool>(type: "bit", nullable: false),
                    Moktab = table.Column<float>(type: "real", nullable: true),
                    IsMoktab = table.Column<bool>(type: "bit", nullable: false),
                    ChemicalForum = table.Column<float>(type: "real", nullable: true),
                    IsChemicalForum = table.Column<bool>(type: "bit", nullable: false),
                    DiplomaassoDed = table.Column<float>(type: "real", nullable: true),
                    IsDiplomaassoDed = table.Column<bool>(type: "bit", nullable: false),
                    EnggassoDed = table.Column<float>(type: "real", nullable: true),
                    IsEnggassoDed = table.Column<bool>(type: "bit", nullable: false),
                    Wfsub = table.Column<float>(type: "real", nullable: true),
                    IsWfsub = table.Column<bool>(type: "bit", nullable: false),
                    EduAlloDed = table.Column<float>(type: "real", nullable: true),
                    IsEduAlloDed = table.Column<bool>(type: "bit", nullable: false),
                    PurChange = table.Column<float>(type: "real", nullable: true),
                    IsPurChange = table.Column<bool>(type: "bit", nullable: false),
                    IncomeTax = table.Column<float>(type: "real", nullable: true),
                    IsIncomeTax = table.Column<bool>(type: "bit", nullable: false),
                    ArrearInTaxDed = table.Column<float>(type: "real", nullable: true),
                    IsArrearInTaxDed = table.Column<bool>(type: "bit", nullable: false),
                    OffWlfareAsso = table.Column<float>(type: "real", nullable: true),
                    IsOffWlfareAsso = table.Column<bool>(type: "bit", nullable: false),
                    OfficeclubDed = table.Column<float>(type: "real", nullable: true),
                    IsOfficeclubDed = table.Column<bool>(type: "bit", nullable: false),
                    IncBonusDed = table.Column<float>(type: "real", nullable: true),
                    IsIncBonusDed = table.Column<bool>(type: "bit", nullable: false),
                    Watercharge = table.Column<float>(type: "real", nullable: true),
                    IsWatercharge = table.Column<bool>(type: "bit", nullable: false),
                    ChemicalAsso = table.Column<float>(type: "real", nullable: true),
                    IsChemicalAsso = table.Column<bool>(type: "bit", nullable: false),
                    AdvInTaxDed = table.Column<float>(type: "real", nullable: true),
                    IsAdvInTaxDed = table.Column<bool>(type: "bit", nullable: false),
                    ConvAllowDed = table.Column<float>(type: "real", nullable: true),
                    IsConvAllowDed = table.Column<bool>(type: "bit", nullable: false),
                    DedIncBonusOf = table.Column<float>(type: "real", nullable: true),
                    IsDedIncBonusOf = table.Column<bool>(type: "bit", nullable: false),
                    UnionSubDed = table.Column<float>(type: "real", nullable: true),
                    IsUnionSubDed = table.Column<bool>(type: "bit", nullable: false),
                    EmpClubDed = table.Column<float>(type: "real", nullable: true),
                    IsEmpClubDed = table.Column<bool>(type: "bit", nullable: false),
                    MedicalExp = table.Column<float>(type: "real", nullable: true),
                    IsMedicalExp = table.Column<bool>(type: "bit", nullable: false),
                    WagesaAdv = table.Column<float>(type: "real", nullable: true),
                    IsWagesaAdv = table.Column<bool>(type: "bit", nullable: false),
                    MedicalLoanDed = table.Column<float>(type: "real", nullable: true),
                    IsMedicalLoanDed = table.Column<bool>(type: "bit", nullable: false),
                    AdvWagesDed = table.Column<float>(type: "real", nullable: true),
                    IsAdvWagesDed = table.Column<bool>(type: "bit", nullable: false),
                    WFL = table.Column<float>(type: "real", nullable: true),
                    IsWFL = table.Column<bool>(type: "bit", nullable: false),
                    CheForum = table.Column<float>(type: "real", nullable: true),
                    IsCheForum = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_Salary", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_BuildingType_BId",
                        column: x => x.BId,
                        principalTable: "Cat_BuildingType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_GLId",
                        column: x => x.GLId,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_HBLId",
                        column: x => x.HBLId,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_HBLId2",
                        column: x => x.HBLId2,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_HBLId3",
                        column: x => x.HBLId3,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_LId1",
                        column: x => x.LId1,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_LId2",
                        column: x => x.LId2,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_LId3",
                        column: x => x.LId3,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_MCLId",
                        column: x => x.MCLId,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_PFLId",
                        column: x => x.PFLId,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_PFLLId",
                        column: x => x.PFLLId,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_PFLLId2",
                        column: x => x.PFLLId2,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_PFLLId3",
                        column: x => x.PFLLId3,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Cat_Location_WelfareLId",
                        column: x => x.WelfareLId,
                        principalTable: "Cat_Location",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_Emp_Salary_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Emp_ShiftInput",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DtDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    FromDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ToDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    ShiftId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Emp_ShiftInput", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Emp_ShiftInput_Cat_Shift_ShiftId",
                        column: x => x.ShiftId,
                        principalTable: "Cat_Shift",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_ShiftInput_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Emp_ShiftInput_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Emp_ShiftInput_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Leave_Avail",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    LTypeId = table.Column<int>(type: "int", nullable: false),
                    DtLvInput = table.Column<DateTime>(type: "date", nullable: false),
                    DtFrom = table.Column<DateTime>(type: "date", nullable: false),
                    DtTo = table.Column<DateTime>(type: "date", nullable: false),
                    InputType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TotalDay = table.Column<float>(type: "real", nullable: true),
                    LvType = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: false),
                    LvApp = table.Column<float>(type: "real", nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    Remark = table.Column<string>(type: "nvarchar(80)", maxLength: 80, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Leave_Avail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Leave_Avail_Cat_Leave_Type_LTypeId",
                        column: x => x.LTypeId,
                        principalTable: "Cat_Leave_Type",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Leave_Avail_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Leave_Avail_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Leave_Avail_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_Leave_Balance",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    DtOpeningBalance = table.Column<int>(type: "int", nullable: false),
                    CL = table.Column<float>(type: "real", nullable: false),
                    ACL = table.Column<float>(type: "real", nullable: true),
                    SL = table.Column<float>(type: "real", nullable: false),
                    ASL = table.Column<float>(type: "real", nullable: true),
                    EL = table.Column<float>(type: "real", nullable: false),
                    AEL = table.Column<float>(type: "real", nullable: true),
                    ML = table.Column<float>(type: "real", nullable: true),
                    AML = table.Column<float>(type: "real", nullable: true),
                    LWP = table.Column<float>(type: "real", nullable: true),
                    ALWP = table.Column<float>(type: "real", nullable: true),
                    ACCL = table.Column<float>(type: "real", nullable: true),
                    AACCL = table.Column<float>(type: "real", nullable: true),
                    SPL = table.Column<float>(type: "real", nullable: true),
                    ASPL = table.Column<float>(type: "real", nullable: true),
                    TL = table.Column<float>(type: "real", nullable: true),
                    ATL = table.Column<float>(type: "real", nullable: true),
                    BL = table.Column<float>(type: "real", nullable: true),
                    ABL = table.Column<float>(type: "real", nullable: true),
                    IsELPaid = table.Column<bool>(type: "bit", nullable: false),
                    DtInput = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_Leave_Balance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_Leave_Balance_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_Leave_Balance_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_Leave_Balance_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_ProcessedData",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmpId = table.Column<int>(type: "int", nullable: false),
                    EmpCode = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    DtPunchDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ShiftId = table.Column<int>(type: "int", nullable: true),
                    DeptId = table.Column<int>(type: "int", nullable: true),
                    SectId = table.Column<int>(type: "int", nullable: true),
                    TimeIn = table.Column<TimeSpan>(type: "time", nullable: false),
                    TimeOut = table.Column<TimeSpan>(type: "time", nullable: false),
                    Late = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Status = table.Column<string>(type: "nvarchar(5)", maxLength: 5, nullable: false),
                    RegHour = table.Column<float>(type: "real", nullable: false),
                    OTHour = table.Column<float>(type: "real", nullable: false),
                    OT = table.Column<float>(type: "real", nullable: true),
                    OTHourDed = table.Column<float>(type: "real", nullable: false),
                    ROT = table.Column<float>(type: "real", nullable: false),
                    EOT = table.Column<float>(type: "real", nullable: false),
                    StaffOT = table.Column<float>(type: "real", nullable: false),
                    IsLunchDay = table.Column<float>(type: "real", nullable: false),
                    IsNightShift = table.Column<float>(type: "real", nullable: false),
                    ShiftIn = table.Column<DateTime>(type: "datetime2", nullable: true),
                    AdJusted = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ShiftType = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    AbTn = table.Column<int>(type: "int", nullable: true),
                    OTAmt = table.Column<float>(type: "real", nullable: false),
                    ROTAmt = table.Column<float>(type: "real", nullable: false),
                    EOTAmt = table.Column<float>(type: "real", nullable: false),
                    PTimeIn = table.Column<DateTime>(type: "datetime2", nullable: true),
                    PTimeOut = table.Column<DateTime>(type: "datetime2", nullable: true),
                    PStatus = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    OTRate = table.Column<float>(type: "real", nullable: false),
                    BS = table.Column<float>(type: "real", nullable: false),
                    EmployeeModelId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_ProcessedData", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_ProcessedData_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_HR_ProcessedData_Employee_EmployeeModelId",
                        column: x => x.EmployeeModelId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_ProcessedData_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_ProcessLock",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LockType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DtDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DtToDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    FiscalYearId = table.Column<int>(type: "int", nullable: true),
                    FiscalMonthId = table.Column<int>(type: "int", nullable: true),
                    IsLock = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_ProcessLock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_ProcessLock_Acc_FiscalMonth_FiscalMonthId",
                        column: x => x.FiscalMonthId,
                        principalTable: "Acc_FiscalMonth",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_ProcessLock_Acc_FiscalYear_FiscalYearId",
                        column: x => x.FiscalYearId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_HR_ProcessLock_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_ProcessLock_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_ProssType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProssDt = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DaySts = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    DayStsB = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    IsLock = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DtTran = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_ProssType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_ProssType_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_ProssType_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "HR_ProssType_WHDay",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    dtPunchDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DaySts = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    DayStsB = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HR_ProssType_WHDay", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HR_ProssType_WHDay_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HR_ProssType_WHDay_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Hr_RawData",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DeviceNo = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    CardNo = table.Column<string>(type: "nvarchar(80)", maxLength: 80, nullable: false),
                    FPId = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    EmpId = table.Column<int>(type: "int", nullable: true),
                    DtPunchDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DtPunchTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    StNo = table.Column<int>(type: "int", nullable: true),
                    InOut = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    OvNMark = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    IsNew = table.Column<int>(type: "int", nullable: true),
                    Latitude = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    QRData = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Imei = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    LocationName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PicFront = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    PicBack = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Hr_RawData", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Hr_RawData_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Hr_RawData_Employee_EmpId",
                        column: x => x.EmpId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Hr_RawData_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "IntegrationSettingMain",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IntegrationSettingName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IntegrationTableName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IntegrationRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MainSLNo = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    FromDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ToDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    VoucherTypeId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IntegrationSettingMain", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IntegrationSettingMain_Acc_VoucherType_VoucherTypeId",
                        column: x => x.VoucherTypeId,
                        principalTable: "Acc_VoucherType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_IntegrationSettingMain_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_IntegrationSettingMain_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "InternetComplain",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ComplainName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isInActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternetComplain", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternetComplain_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_InternetComplain_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "InternetPackage",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PackageName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Speed = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PackageActiveDay = table.Column<int>(type: "int", nullable: false),
                    PackageAmount = table.Column<float>(type: "real", nullable: false),
                    PackageDescription = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternetPackage", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternetPackage_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_InternetPackage_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "InternetUserStatus",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserStatusLong = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    UserStatusShort = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternetUserStatus", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternetUserStatus_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_InternetUserStatus_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ItemGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemGroupName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ItemGroupCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemGroupHSCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemMargin = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ItemGroupShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemGroup_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ItemGroup_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "LienBank",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LienBankName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: false),
                    SwiftCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LienBankAccountNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BranchAddress = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BranchAddress2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LienBank", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LienBank_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LienBank_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LienBank_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "LinkShare",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SecretKey = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LinkShare", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LinkShare_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LinkShare_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Market",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MarketCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MarketNameEng = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    MarketNameBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PrName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PrPhoneNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SecName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SecPhoneNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Floors = table.Column<int>(type: "int", nullable: true),
                    FirstFloor = table.Column<int>(type: "int", nullable: true),
                    SecoundFloor = table.Column<int>(type: "int", nullable: true),
                    ThirdFloor = table.Column<int>(type: "int", nullable: true),
                    FourthFloor = table.Column<int>(type: "int", nullable: true),
                    FifthFloor = table.Column<int>(type: "int", nullable: true),
                    TotalShop = table.Column<int>(type: "int", nullable: true),
                    ClosedShop = table.Column<int>(type: "int", nullable: true),
                    ActiveMember = table.Column<int>(type: "int", nullable: true),
                    Website = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PresidentImagePath = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PresidentFileExtension = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    SecretaryImagePath = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SecretaryFileExtension = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Market", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Market_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Market_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MasterPO_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MasterPONo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TotalQty = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MasterPO_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MasterPO_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MasterPO_Master_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MasterSalesTax",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DocForTax = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MasterSalesTax", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MasterSalesTax_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MasterSalesTax_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MemberStatus",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MemberStatusLong = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    MemberStatusShort = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberStatus", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberStatus_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MemberStatus_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MenuPermission_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LUserIdPermission = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    Active = table.Column<bool>(type: "bit", nullable: false),
                    SummaryView = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MenuPermission_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MenuPermission_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MenuPermission_Master_UserAccount_LUserIdPermission",
                        column: x => x.LUserIdPermission,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MobileImages",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileImages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MobileImages_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MobileImages_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MobileTextAnimation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TextMessageOne = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    TextMessageTwo = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    TextMessageThree = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    Type = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsSeen = table.Column<bool>(type: "bit", nullable: false),
                    AnimationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    TypeColor = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TextMessageOneColor = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TextMessageTwoColor = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TextMessageThreeColor = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    TypeSize = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    TextMessageOneSize = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    TextMessageTwoSize = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    TextMessageThreeSize = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileTextAnimation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MobileTextAnimation_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MobileTextAnimation_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MonthlySales",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Year = table.Column<int>(type: "int", nullable: false),
                    MonthId = table.Column<int>(type: "int", nullable: false),
                    MonthName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TotalSales = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlySales", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MonthlySales_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MonthlySales_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Notification",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TextMessage = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    Type = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Value = table.Column<int>(type: "int", nullable: true),
                    IsSeen = table.Column<bool>(type: "bit", nullable: false),
                    NotifyDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Notification_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Notification_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "NotificationSettings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DeviceToken = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NotificationSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NotificationSettings_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_NotificationSettings_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Offer",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OfferName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    OfferType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    OfferRangeStart = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OfferRangeEnd = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OfferFigure = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Offer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Offer_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Offer_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "OpeningBank",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OpeningBankName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: false),
                    SwiftCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BranchAddress = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BranchAddress2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpeningBank", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OpeningBank_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OpeningBank_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OpeningBank_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Orders",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrdersDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    OrderCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Status = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    GrandTotal = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DisPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DisAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ServiceCharge = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Shipping = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TotalVat = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    NetAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    CustomerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SecoundaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmailId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Orders", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Orders_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Orders_Customer_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Orders_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PackageActivation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ValidityDay = table.Column<double>(type: "float", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    ActiveFromDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ActiveToDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PackageId = table.Column<int>(type: "int", nullable: true),
                    InvoiceNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    BillingName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Status = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    PaymentDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    TrxId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ActiveYesNo = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PackageActivation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PackageActivation_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PackageActivation_SoftwarePackage_PackageId",
                        column: x => x.PackageId,
                        principalTable: "SoftwarePackage",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PackageActivation_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PaymentTerms",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TermName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DueInFixedDays = table.Column<int>(type: "int", nullable: true),
                    DueByDayOfMonth = table.Column<int>(type: "int", nullable: true),
                    DueNextMonthWithinDays = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentTerms", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PaymentTerms_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PaymentTerms_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PayrollIntegration",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DataType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EmployeeType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AccId = table.Column<int>(type: "int", nullable: false),
                    FiscalYearId = table.Column<int>(type: "int", nullable: true),
                    FiscalMonthId = table.Column<int>(type: "int", nullable: true),
                    TKDebitLocal = table.Column<double>(type: "float", nullable: false),
                    TKCreditLocal = table.Column<double>(type: "float", nullable: false),
                    SLNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FromDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ToDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Note1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Note2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Note3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PayrollIntegration", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PayrollIntegration_Acc_FiscalMonth_FiscalMonthId",
                        column: x => x.FiscalMonthId,
                        principalTable: "Acc_FiscalMonth",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PayrollIntegration_Acc_FiscalYear_FiscalYearId",
                        column: x => x.FiscalYearId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PayrollIntegration_AccountHead_AccId",
                        column: x => x.AccId,
                        principalTable: "AccountHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PayrollIntegration_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PayrollIntegration_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PIType",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PITytpeName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PITytpeShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PIType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PIType_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PIType_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PortOfDischarge",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PortOfDischargeName = table.Column<string>(type: "VARCHAR(200)", maxLength: 200, nullable: false),
                    PortCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PortOfDischarge", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PortOfDischarge_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PortOfDischarge_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PortOfDischarge_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PortOfLoading",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PortOfLoadingName = table.Column<string>(type: "VARCHAR(200)", maxLength: 200, nullable: false),
                    PortCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PortOfLoading", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PortOfLoading_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PortOfLoading_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PortOfLoading_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PrdUnit",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PrdUnitCode = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    PrdUnitName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrdUnitShortName = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    isPrdUnit = table.Column<bool>(type: "bit", nullable: false),
                    PrdUnitBanglaName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PrdUnit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PrdUnit_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PrdUnit_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ProcessLock",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LockType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DtDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DtToDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    FiscalYearId = table.Column<int>(type: "int", nullable: true),
                    FiscalMonthId = table.Column<int>(type: "int", nullable: true),
                    IsLock = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcessLock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProcessLock_Acc_FiscalMonth_FiscalMonthId",
                        column: x => x.FiscalMonthId,
                        principalTable: "Acc_FiscalMonth",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ProcessLock_Acc_FiscalYear_FiscalYearId",
                        column: x => x.FiscalYearId,
                        principalTable: "Acc_FiscalYear",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ProcessLock_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProcessLock_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ReportUserTracking",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportUserTracking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReportUserTracking_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ReportUserTracking_Reports_ReportId",
                        column: x => x.ReportId,
                        principalTable: "Reports",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ReportUserTracking_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ShipMode",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShipModeName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ShipModeShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ShipMode", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ShipMode_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ShipMode_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ShippingCharge",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShippingLocationName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ChargeAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ShippingCharge", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ShippingCharge_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ShippingCharge_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ShortLink",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Url = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ShortLink", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ShortLink_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ShortLink_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Sizes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SizeName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SizeCode = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SizeDesc = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sizes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Sizes_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Sizes_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SmsSetting",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    smsAddress = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    smsUser = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    smsPassword = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    smsSender = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SmsProvider = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SmsSetting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SmsSetting_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SmsSetting_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Style",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StyleNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    BuyerId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Style", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Style_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Style_Customer_BuyerId",
                        column: x => x.BuyerId,
                        principalTable: "Customer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Style_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SubscriptionActivation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Amount = table.Column<float>(type: "real", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ValidityDay = table.Column<double>(type: "float", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    ActiveFromDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ActiveToDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SubscriptionTypeId = table.Column<int>(type: "int", nullable: true),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SubscriptionActivation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SubscriptionActivation_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SubscriptionActivation_SubscriptionType_SubscriptionTypeId",
                        column: x => x.SubscriptionTypeId,
                        principalTable: "SubscriptionType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SubscriptionActivation_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Tags",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TagName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TagShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TagsType = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tags", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Tags_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Tags_Tags_ParentId",
                        column: x => x.ParentId,
                        principalTable: "Tags",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Tags_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TaskToDo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TaskTitle = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TaskDetails = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    TaskRemarks = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    TaskColour = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    InputDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ExpiryDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CompleteDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IsComplete = table.Column<bool>(type: "bit", nullable: false),
                    TaskPercentage = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    AssaignToPerson = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    TaskToDoParentId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskToDo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskToDo_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TaskToDo_TaskToDo_TaskToDoParentId",
                        column: x => x.TaskToDoParentId,
                        principalTable: "TaskToDo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TaskToDo_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TermsMain",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TermsName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    TermsRemarks = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TermsMain", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TermsMain_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TermsMain_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TradeTerms",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TradeTermCaption = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Day = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    isInactive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TradeTerms", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TradeTerms_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TradeTerms_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TransactionTags",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TransactionId = table.Column<int>(type: "int", nullable: false),
                    tag = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransactionTags", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TransactionTags_AccountsDailyTransaction_TransactionId",
                        column: x => x.TransactionId,
                        principalTable: "AccountsDailyTransaction",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TransactionTags_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_TransactionTags_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TruckInfo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TruckNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrintDate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RefNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Percentage = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DriverName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MobileNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LCId = table.Column<int>(type: "int", nullable: true),
                    LCNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReportName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PINo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    GroupLcId = table.Column<int>(type: "int", nullable: true),
                    MasterLC = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TruckInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TruckInfo_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TruckInfo_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Unit",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UnitName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UnitNameBangla = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UnitShortName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Unit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Unit_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Unit_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "UnitGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UnitGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UnitGroup_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UnitGroup_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "UserLogingInfo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WebLink = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    Status = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LongString = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LoginDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LoginTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    PcName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MacAddress = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    IPAddress = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    DeviceType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Platform = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    WebBrowserName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Latitude = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserLogingInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserLogingInfo_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserLogingInfo_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "UserTransactionLog",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WebLink = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    TransactionStatement = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    ControllerName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    ActionName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DocumentReferance = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CommandType = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    PcName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    FromDateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ToDateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    FlagValue = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IPAddress = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserTransactionLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserTransactionLog_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_UserTransactionLog_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "VGM",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    VGANo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VGAMethod = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContainerNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContainerType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContainerSize = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TareWeight = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VerifiedGrossMass = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreviouslyDeclaredweight = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VGMWeightbyCPA = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NameofShipper = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingAgent = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VGMPerformedShipperBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WeightBridgeRegistrationNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressOfWeightBridge = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IssuedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VGM", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VGM_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_VGM_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Voter",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    voterNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    name = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    nameEn = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    father = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    mother = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    gender = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    spouse = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    dob = table.Column<DateTime>(type: "datetime2", nullable: false),
                    permanentAddress = table.Column<string>(type: "nvarchar(600)", maxLength: 600, nullable: false),
                    presentAddressBN = table.Column<string>(type: "nvarchar(600)", maxLength: 600, nullable: false),
                    profession = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    photo = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    Status = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    photoPath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    photoExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    oldNationalIdNumber = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Voter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Voter_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Voter_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Wallet",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TransactionType = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    PurchaseDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ValidityDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    RechargeBy = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    RechargeAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    UsedAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    IsPost = table.Column<bool>(type: "bit", nullable: false),
                    IsSystem = table.Column<bool>(type: "bit", nullable: false),
                    CreditBalanceId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Wallet", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Wallet_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Wallet_CreditBalance_CreditBalanceId",
                        column: x => x.CreditBalanceId,
                        principalTable: "CreditBalance",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Wallet_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Warehouse",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WhName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    WhShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    WhType = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: false),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    StoreAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Warehouse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Warehouse_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Warehouse_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Warehouse_Warehouse_ParentId",
                        column: x => x.ParentId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "IntegrationSettingDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IntegrationSettingMainId = table.Column<int>(type: "int", nullable: false),
                    AccId = table.Column<int>(type: "int", nullable: false),
                    SelectColumnNameOne = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false),
                    ConditionCount = table.Column<int>(type: "int", nullable: false),
                    ColNameOne = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    colNameOneValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ColNameTwo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    colNameTwoValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ColNameThree = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    colNameThreeValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ColNameFour = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    colNameFourValue = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    SelectStatement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WhereCondition = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ColNameOneGroupBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ColNameTwoGroupBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ColNameThreeGroupBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ColNameFourGroupBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    GroupByCondition = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    IsSubtract = table.Column<bool>(type: "bit", nullable: false),
                    IsDebit = table.Column<bool>(type: "bit", nullable: false),
                    IsCredit = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    PcName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    UserId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    DateAdded = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UpdateByUserId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateUpdated = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CompanyListId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IntegrationSettingDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IntegrationSettingDetails_AccountHead_AccId",
                        column: x => x.AccId,
                        principalTable: "AccountHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_IntegrationSettingDetails_Company_CompanyListId",
                        column: x => x.CompanyListId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_IntegrationSettingDetails_IntegrationSettingMain_IntegrationSettingMainId",
                        column: x => x.IntegrationSettingMainId,
                        principalTable: "IntegrationSettingMain",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_IntegrationSettingDetails_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "InternetUser",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Password = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    UserType = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    LastBilledDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastExpiredDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastReceivedDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    MobileNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Address = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ONUMac = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IPAddress = table.Column<string>(type: "nvarchar(120)", maxLength: 120, nullable: false),
                    ConnectionPointAddress = table.Column<string>(type: "nvarchar(120)", maxLength: 120, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    TotalDue = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PaidStatus = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NationalIdCard = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    UserStatusId = table.Column<int>(type: "int", nullable: true),
                    PackageId = table.Column<int>(type: "int", nullable: true),
                    ImagePath = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    FileExtension = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternetUser", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternetUser_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_InternetUser_InternetPackage_PackageId",
                        column: x => x.PackageId,
                        principalTable: "InternetPackage",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_InternetUser_InternetUserStatus_UserStatusId",
                        column: x => x.UserStatusId,
                        principalTable: "InternetUserStatus",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_InternetUser_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ItemDesc",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemDescCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemDescHSCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemDescName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ItemDescShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ItemGroupId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemDesc", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemDesc_ItemGroup_ItemGroupId",
                        column: x => x.ItemGroupId,
                        principalTable: "ItemGroup",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ItemDescription",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ItemDescCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemDescHSCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemDescName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ItemDescShortName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ItemGroupId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemDescription", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemDescription_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ItemDescription_ItemGroup_ItemGroupId",
                        column: x => x.ItemGroupId,
                        principalTable: "ItemGroup",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ItemDescription_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Shop",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShopCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MarketId = table.Column<int>(type: "int", nullable: true),
                    ShopNameEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopNameBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    HoldingNoEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    HoldingNoBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopBusinessAddressBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopBusinessAddressEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopWebSite = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ShopEmail = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ShopMobile = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShopOwnerEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopOwnerBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopTypeItemProduct = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopDescription = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopImage = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    ShopImagePath = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopFileExtension = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Shop", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Shop_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Shop_Market_MarketId",
                        column: x => x.MarketId,
                        principalTable: "Market",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Shop_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MasterPO_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MasterPOId = table.Column<int>(type: "int", nullable: false),
                    BuyerPOId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MasterPO_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MasterPO_Details_BuyerPO_Master_BuyerPOId",
                        column: x => x.BuyerPOId,
                        principalTable: "BuyerPO_Master",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterPO_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterPO_Details_MasterPO_Master_MasterPOId",
                        column: x => x.MasterPOId,
                        principalTable: "MasterPO_Master",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MasterPO_Details_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesTax",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nickname = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AgentId = table.Column<int>(type: "int", nullable: true),
                    SalesTaxMasterId = table.Column<int>(type: "int", nullable: true),
                    Rate = table.Column<float>(type: "real", nullable: true),
                    CustomRateTotal = table.Column<float>(type: "real", nullable: true),
                    IsSingleTax = table.Column<bool>(type: "bit", nullable: false),
                    AccIdSalesTaxes = table.Column<int>(type: "int", nullable: true),
                    AccIdPurchaseTaxes = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesTax", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesTax_AccountHead_AccIdPurchaseTaxes",
                        column: x => x.AccIdPurchaseTaxes,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesTax_AccountHead_AccIdSalesTaxes",
                        column: x => x.AccIdSalesTaxes,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesTax_Agency_AgentId",
                        column: x => x.AgentId,
                        principalTable: "Agency",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesTax_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesTax_MasterSalesTax_SalesTaxMasterId",
                        column: x => x.SalesTaxMasterId,
                        principalTable: "MasterSalesTax",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesTax_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MenuPermission_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MenuPermissionId = table.Column<int>(type: "int", nullable: false),
                    MenuId = table.Column<int>(type: "int", nullable: false),
                    IsCreate = table.Column<bool>(type: "bit", nullable: false),
                    IsEdit = table.Column<bool>(type: "bit", nullable: false),
                    IsDeleteP = table.Column<bool>(type: "bit", nullable: false),
                    IsView = table.Column<bool>(type: "bit", nullable: false),
                    IsReport = table.Column<bool>(type: "bit", nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    isDefault = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MenuPermission_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MenuPermission_Details_MenuPermission_Master_MenuPermissionId",
                        column: x => x.MenuPermissionId,
                        principalTable: "MenuPermission_Master",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MenuPermission_Details_Menu_MenuId",
                        column: x => x.MenuId,
                        principalTable: "Menu",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ImagesGallery",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    URL = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BookModelId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ImagesGallery", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ImagesGallery_MobileImages_BookModelId",
                        column: x => x.BookModelId,
                        principalTable: "MobileImages",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "NotificationSeen",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotificationId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NotificationSeen", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NotificationSeen_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_NotificationSeen_Notification_NotificationId",
                        column: x => x.NotificationId,
                        principalTable: "Notification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_NotificationSeen_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "NotificationMassages",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotificationSettingId = table.Column<int>(type: "int", nullable: false),
                    Massage = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ScheduleTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NotificationMassages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NotificationMassages_NotificationSettings_NotificationSettingId",
                        column: x => x.NotificationSettingId,
                        principalTable: "NotificationSettings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OrdersPayment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrdersId = table.Column<int>(type: "int", nullable: false),
                    PaymentCardNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    RowNo = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdersPayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrdersPayment_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_OrdersPayment_Orders_OrdersId",
                        column: x => x.OrdersId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OrdersPayment_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "StoreSetting",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Logo = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: false),
                    StoreName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Web = table.Column<string>(type: "nvarchar(80)", maxLength: 80, nullable: false),
                    Facebook = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Phone = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneTwo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    ReportCaptionSmall = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CustomizedReportFormatName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    Address = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: false),
                    BusinessTypeId = table.Column<int>(type: "int", nullable: false),
                    TimeZoneSettingsId = table.Column<int>(type: "int", nullable: false),
                    SalesReportStyleId = table.Column<int>(type: "int", nullable: true),
                    PurchaseReportStyleId = table.Column<int>(type: "int", nullable: true),
                    BarcodeReportStyleId = table.Column<int>(type: "int", nullable: true),
                    SubscriptionTypeId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: false),
                    DecimalField = table.Column<int>(type: "int", nullable: false),
                    TaxPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isTaxExcluded = table.Column<bool>(type: "bit", nullable: false),
                    OfferDiscountPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isDiscountOffer = table.Column<bool>(type: "bit", nullable: false),
                    HeaderCaption = table.Column<string>(type: "nvarchar(400)", maxLength: 400, nullable: false),
                    isMultiCurrency = table.Column<bool>(type: "bit", nullable: false),
                    IsTermsCondition = table.Column<bool>(type: "bit", nullable: false),
                    IsDefaultDisAmount = table.Column<bool>(type: "bit", nullable: false),
                    isMultiDebitCredit = table.Column<bool>(type: "bit", nullable: false),
                    isVoucherDistributionEntry = table.Column<bool>(type: "bit", nullable: false),
                    isChequeDetails = table.Column<bool>(type: "bit", nullable: false),
                    VoucherNoCreatedTypeId = table.Column<int>(type: "int", nullable: true),
                    IsFixedSalesValue = table.Column<bool>(type: "bit", nullable: false),
                    isMultiSelect = table.Column<bool>(type: "bit", nullable: false),
                    IsFixedDiscountRowValue = table.Column<bool>(type: "bit", nullable: false),
                    MaxDiscountRowValue = table.Column<double>(type: "float", nullable: false),
                    IsFixedDiscountMainValue = table.Column<bool>(type: "bit", nullable: false),
                    MaxDiscountMainValue = table.Column<double>(type: "float", nullable: false),
                    MaxDiscountPercentageMainValue = table.Column<double>(type: "float", nullable: false),
                    IsFirstLetterUpperCase = table.Column<bool>(type: "bit", nullable: false),
                    Days = table.Column<int>(type: "int", nullable: false),
                    RedirectToEcommercePage = table.Column<bool>(type: "bit", nullable: false),
                    isBackDatePermission = table.Column<bool>(type: "bit", nullable: false),
                    IsSerialSales = table.Column<bool>(type: "bit", nullable: false),
                    IsSalesDescription = table.Column<bool>(type: "bit", nullable: false),
                    IsIndDiscount = table.Column<bool>(type: "bit", nullable: false),
                    PrintProductCode = table.Column<bool>(type: "bit", nullable: false),
                    PrintProductName = table.Column<bool>(type: "bit", nullable: false),
                    PrintBrandName = table.Column<bool>(type: "bit", nullable: false),
                    PrintModelName = table.Column<bool>(type: "bit", nullable: false),
                    PrintSizeName = table.Column<bool>(type: "bit", nullable: false),
                    PrintProductDescription = table.Column<bool>(type: "bit", nullable: false),
                    VisibleSalesCommission = table.Column<bool>(type: "bit", nullable: false),
                    IsVatLogin = table.Column<bool>(type: "bit", nullable: false),
                    BaseComId = table.Column<int>(type: "int", nullable: false),
                    isSMSService = table.Column<bool>(type: "bit", nullable: false),
                    isEmailSerivce = table.Column<bool>(type: "bit", nullable: false),
                    IsSignature = table.Column<bool>(type: "bit", nullable: false),
                    isScanner = table.Column<bool>(type: "bit", nullable: false),
                    ShortCutKey = table.Column<string>(type: "nvarchar(2)", maxLength: 2, nullable: false),
                    BarcodePrefixForWeightScale = table.Column<string>(type: "nvarchar(6)", maxLength: 6, nullable: false),
                    SoftwarePackageId = table.Column<int>(type: "int", nullable: true),
                    LegalName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    BusinessIdNo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    vat = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    customerFacingEmail = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    City = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    State = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    ZipCode = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerFacingAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerFacingCityAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerFacingState = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CustomerFacingZipCode = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalCityAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalState = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalZipCode = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    TaxFormId = table.Column<int>(type: "int", nullable: true),
                    TermsId = table.Column<int>(type: "int", nullable: true),
                    DeliveryMethod = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsShipping = table.Column<bool>(type: "bit", nullable: false),
                    IsCustomTransactionNumber = table.Column<bool>(type: "bit", nullable: false),
                    IsServiceDate = table.Column<bool>(type: "bit", nullable: false),
                    IsDiscount = table.Column<bool>(type: "bit", nullable: false),
                    IsDeposit = table.Column<bool>(type: "bit", nullable: false),
                    IsTags = table.Column<bool>(type: "bit", nullable: false),
                    PaymentInstructions = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    IsShowProductServiceColumn = table.Column<bool>(type: "bit", nullable: false),
                    IsShowSku = table.Column<bool>(type: "bit", nullable: false),
                    IsTracktyRatePrice = table.Column<bool>(type: "bit", nullable: false),
                    IsTrackQtyOnHand = table.Column<bool>(type: "bit", nullable: false),
                    IsCreateMultiplePartialInvoice = table.Column<bool>(type: "bit", nullable: false),
                    GreetingAppeal = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    GreetingNameFormat = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DocTypeId = table.Column<int>(type: "int", nullable: true),
                    EmailSubjectLine = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmailMessage = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    IsCopyEmail = table.Column<bool>(type: "bit", nullable: false),
                    Cc = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Bcc = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReminderOneDays = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReminderOneDueDate = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ReminderOneSubjectLine = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ReminderOneGreetingAppeal = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ReminderOneGreetingNameFormat = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ReminderOneMessage = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    ReminderTwoDays = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReminderTwoDueDate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReminderTwoSubjectLine = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ReminderTwoGreetingAppeal = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ReminderTwoGreetingNameFormat = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ReminderTwoMessage = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    ReminderThreeDays = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReminderThreeDueDate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReminderThreeSubjectLine = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ReminderThreeGreetingAppeal = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ReminderThreeGreetingNameFormat = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ReminderThreeMessage = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    IsShowSummaryInEmail = table.Column<bool>(type: "bit", nullable: false),
                    IsShowFullDetailsInEmail = table.Column<bool>(type: "bit", nullable: false),
                    IsPdfAttached = table.Column<bool>(type: "bit", nullable: false),
                    AdditionalEmailOptions = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsListEachTransaction = table.Column<bool>(type: "bit", nullable: false),
                    IsListAllTransaction = table.Column<bool>(type: "bit", nullable: false),
                    IsShowItemsTablesOnForms = table.Column<bool>(type: "bit", nullable: false),
                    IsShowTagsOnFroms = table.Column<bool>(type: "bit", nullable: false),
                    IsTrackedByCustomer = table.Column<bool>(type: "bit", nullable: false),
                    IsBillableItemAndExpenses = table.Column<bool>(type: "bit", nullable: false),
                    IsSalesCustomtransactionNumber = table.Column<bool>(type: "bit", nullable: false),
                    DefaultMessageForPurchase = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    SalesGreetingAppeal = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    SalesGreetingNameFormat = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SalesEmailSubjectLine = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SalesEmailMessage = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    IsSalesCopyEmail = table.Column<bool>(type: "bit", nullable: false),
                    SalesCc = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SalesBcc = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    FirstDayOfWeek = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsShowServiceField = table.Column<bool>(type: "bit", nullable: false),
                    IsAllowTimeToBillable = table.Column<bool>(type: "bit", nullable: false),
                    IsShowBillingRateToUser = table.Column<bool>(type: "bit", nullable: false),
                    FinancialYearId = table.Column<int>(type: "int", nullable: true),
                    AccountingMethodId = table.Column<int>(type: "int", nullable: true),
                    TaxRateId = table.Column<int>(type: "int", nullable: true),
                    LanguageId = table.Column<int>(type: "int", nullable: true),
                    DateFormatId = table.Column<int>(type: "int", nullable: true),
                    NumberFormatId = table.Column<int>(type: "int", nullable: true),
                    SignOutDurationId = table.Column<int>(type: "int", nullable: true),
                    fixMonthofTaxYear = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsCloseTheBooks = table.Column<bool>(type: "bit", nullable: false),
                    IsEnabledAccNumbers = table.Column<bool>(type: "bit", nullable: false),
                    IsTrackedClasses = table.Column<bool>(type: "bit", nullable: false),
                    IsTrackedLocations = table.Column<bool>(type: "bit", nullable: false),
                    IsPreFillFormsPrevEnteredContent = table.Column<bool>(type: "bit", nullable: false),
                    IsAutoInvoicedUnbilled = table.Column<bool>(type: "bit", nullable: false),
                    IsAutoAppliedBillPayment = table.Column<bool>(type: "bit", nullable: false),
                    IsOrganisedJob = table.Column<bool>(type: "bit", nullable: false),
                    IsDuplicateCheque = table.Column<bool>(type: "bit", nullable: false),
                    IsDuplicateBillNo = table.Column<bool>(type: "bit", nullable: false),
                    IsDuplicateJournal = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreSetting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StoreSetting_Acc_VoucherNoCreatedType_VoucherNoCreatedTypeId",
                        column: x => x.VoucherNoCreatedTypeId,
                        principalTable: "Acc_VoucherNoCreatedType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_BusinessType_BusinessTypeId",
                        column: x => x.BusinessTypeId,
                        principalTable: "BusinessType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_StoreSetting_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_StoreSetting_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_StoreSetting_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_StoreSetting_DocType_DocTypeId",
                        column: x => x.DocTypeId,
                        principalTable: "DocType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_PaymentTerms_TermsId",
                        column: x => x.TermsId,
                        principalTable: "PaymentTerms",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_ReportStyle_BarcodeReportStyleId",
                        column: x => x.BarcodeReportStyleId,
                        principalTable: "ReportStyle",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_ReportStyle_PurchaseReportStyleId",
                        column: x => x.PurchaseReportStyleId,
                        principalTable: "ReportStyle",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_ReportStyle_SalesReportStyleId",
                        column: x => x.SalesReportStyleId,
                        principalTable: "ReportStyle",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_SoftwarePackage_SoftwarePackageId",
                        column: x => x.SoftwarePackageId,
                        principalTable: "SoftwarePackage",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_SubscriptionType_SubscriptionTypeId",
                        column: x => x.SubscriptionTypeId,
                        principalTable: "SubscriptionType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_TaxForm_TaxFormId",
                        column: x => x.TaxFormId,
                        principalTable: "TaxForm",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_TimeZoneSettings_TimeZoneSettingsId",
                        column: x => x.TimeZoneSettingsId,
                        principalTable: "TimeZoneSettings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_StoreSetting_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_StoreSetting_Variable_AccountingMethodId",
                        column: x => x.AccountingMethodId,
                        principalTable: "Variable",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_Variable_DateFormatId",
                        column: x => x.DateFormatId,
                        principalTable: "Variable",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_Variable_FinancialYearId",
                        column: x => x.FinancialYearId,
                        principalTable: "Variable",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_Variable_LanguageId",
                        column: x => x.LanguageId,
                        principalTable: "Variable",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_Variable_NumberFormatId",
                        column: x => x.NumberFormatId,
                        principalTable: "Variable",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_Variable_SignOutDurationId",
                        column: x => x.SignOutDurationId,
                        principalTable: "Variable",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_StoreSetting_Variable_TaxRateId",
                        column: x => x.TaxRateId,
                        principalTable: "Variable",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Supplier",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SupplierName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Phone = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SupplierCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SecoundaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    City = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    StatusRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SupType = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: false),
                    SupParentId = table.Column<int>(type: "int", nullable: true),
                    OpBalance = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ClBalance = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    LoginId = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Password = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    TradeLicenseNo = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    IsInActive = table.Column<bool>(type: "bit", nullable: false),
                    SupplierCommissionPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ContactPersonName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ContactPersonDesignation = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Website = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Title = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    MiddleName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    Suffix = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    CompanyName = table.Column<string>(type: "nvarchar(120)", maxLength: 120, nullable: false),
                    MobileNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Fax = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    Other = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StreetAddress = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Province = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    Country = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FilePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SupplierFilePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BusinessIdNo = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    BillingRate = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    PaymentTermsId = table.Column<int>(type: "int", nullable: true),
                    AccountNo = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    AccIdExpenseCategory = table.Column<int>(type: "int", nullable: true),
                    AsOf = table.Column<DateTime>(type: "datetime2", nullable: true),
                    SupplierCurrencyId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Supplier", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Supplier_AccountHead_AccIdExpenseCategory",
                        column: x => x.AccIdExpenseCategory,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Supplier_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Supplier_Country_SupplierCurrencyId",
                        column: x => x.SupplierCurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Supplier_PaymentTerms_PaymentTermsId",
                        column: x => x.PaymentTermsId,
                        principalTable: "PaymentTerms",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Supplier_Supplier_SupParentId",
                        column: x => x.SupParentId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Supplier_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "NotifyParty",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NotifyPartyName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NotifyPartyNameSearch = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BuyerId = table.Column<int>(type: "int", nullable: true),
                    CountryId = table.Column<int>(type: "int", nullable: true),
                    PortOfDischargeId = table.Column<int>(type: "int", nullable: true),
                    ShopCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippedTo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isInactive = table.Column<bool>(type: "bit", nullable: true),
                    SLNO = table.Column<int>(type: "int", nullable: true),
                    DynamicReportId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NotifyParty", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NotifyParty_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_NotifyParty_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_NotifyParty_Customer_BuyerId",
                        column: x => x.BuyerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_NotifyParty_DynamicReport_DynamicReportId",
                        column: x => x.DynamicReportId,
                        principalTable: "DynamicReport",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_NotifyParty_PortOfDischarge_PortOfDischargeId",
                        column: x => x.PortOfDischargeId,
                        principalTable: "PortOfDischarge",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_NotifyParty_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ShortLinkHit",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ShortLinkId = table.Column<int>(type: "int", nullable: false),
                    WebLink = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LongString = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IPAddress = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeviceType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Platform = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    WebBrowserName = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Latitude = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ShortLinkHit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ShortLinkHit_ShortLink_ShortLinkId",
                        column: x => x.ShortLinkId,
                        principalTable: "ShortLink",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SizeChild",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SizeId = table.Column<int>(type: "int", nullable: false),
                    StyleId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SizeChild", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SizeChild_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SizeChild_Sizes_SizeId",
                        column: x => x.SizeId,
                        principalTable: "Sizes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SizeChild_Style_StyleId",
                        column: x => x.StyleId,
                        principalTable: "Style",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SizeChild_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TermsSub",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Terms = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    TermsDescription = table.Column<string>(type: "nvarchar(3000)", maxLength: 3000, nullable: false),
                    TermsSerialNo = table.Column<int>(type: "int", nullable: false),
                    TermsId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TermsSub", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TermsSub_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_TermsSub_TermsMain_TermsId",
                        column: x => x.TermsId,
                        principalTable: "TermsMain",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TermsSub_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "UnitMaster",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UnitMasterId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UnitName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RelativeFactor = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    IsBaseUOM = table.Column<bool>(type: "bit", nullable: true),
                    ExportOrdersId = table.Column<int>(type: "int", nullable: true),
                    UnitGroupId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UnitMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UnitMaster_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UnitMaster_UnitGroup_UnitGroupId",
                        column: x => x.UnitGroupId,
                        principalTable: "UnitGroup",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_UnitMaster_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeSalary_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalaryMonth = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SalaryMonthFrom = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SalaryMonthTo = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SalaryTypeId = table.Column<int>(type: "int", nullable: true),
                    EmployeeTypeId = table.Column<int>(type: "int", nullable: true),
                    DepartmentId = table.Column<int>(type: "int", nullable: true),
                    WeekSegmentId = table.Column<int>(type: "int", nullable: true),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    SalaryMasterRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsPosted = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeSalary_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Master_Cat_Department_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Cat_Department",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Master_Cat_EmployeeType_EmployeeTypeId",
                        column: x => x.EmployeeTypeId,
                        principalTable: "Cat_EmployeeType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Master_Cat_SalaryType_SalaryTypeId",
                        column: x => x.SalaryTypeId,
                        principalTable: "Cat_SalaryType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Master_Cat_WeekSegment_WeekSegmentId",
                        column: x => x.WeekSegmentId,
                        principalTable: "Cat_WeekSegment",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Master_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Master_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "FromWarehousePermission",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LuserIdAllow = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FromWarehousePermission", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FromWarehousePermission_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_FromWarehousePermission_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_FromWarehousePermission_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ToWarehousePermission",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LuserIdAllow = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToWarehousePermission", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ToWarehousePermission_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ToWarehousePermission_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ToWarehousePermission_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ExpireDateExtend",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InternetUserId = table.Column<int>(type: "int", nullable: false),
                    OldExpireDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    NewExpiredDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Note = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    TotalDays = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExpireDateExtend", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExpireDateExtend_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ExpireDateExtend_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExpireDateExtend_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "InternalTransfer",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InternalTransferDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    InternalTransferCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReferanceOne = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ReferanceTwo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    WarehouseIdMain = table.Column<int>(type: "int", nullable: true),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternalTransfer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternalTransfer_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_InternalTransfer_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_InternalTransfer_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_InternalTransfer_Warehouse_WarehouseIdMain",
                        column: x => x.WarehouseIdMain,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "InvoiceBill",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    UserId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    BilledDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    NextFollowDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ExpiredDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ReceivedDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BillAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ReceivedAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Discount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    BadDebt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isPost = table.Column<bool>(type: "bit", nullable: false),
                    isSystem = table.Column<bool>(type: "bit", nullable: false),
                    InWords = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    AccountReceiveHeadId = table.Column<int>(type: "int", nullable: true),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InvoiceBill", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InvoiceBill_AccountHead_AccountReceiveHeadId",
                        column: x => x.AccountReceiveHeadId,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_InvoiceBill_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_InvoiceBill_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_InvoiceBill_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Issue",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IssueDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IssueCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReferanceOne = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ReferanceTwo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    WarehouseIdMain = table.Column<int>(type: "int", nullable: true),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    GrandTotal = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Issue", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Issue_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Issue_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Issue_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Issue_Warehouse_WarehouseIdMain",
                        column: x => x.WarehouseIdMain,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsRecognition = table.Column<bool>(type: "bit", nullable: false),
                    SalesDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsPaymentDone = table.Column<bool>(type: "bit", nullable: false),
                    DueDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SaleCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    StatusBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StatusDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Total = table.Column<double>(type: "float", nullable: false),
                    SubTotal = table.Column<double>(type: "float", nullable: false),
                    TaxAmount = table.Column<double>(type: "float", nullable: false),
                    StatusRemarks = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ReturnStatus = table.Column<int>(type: "int", nullable: false),
                    PaymentStatus = table.Column<int>(type: "int", nullable: false),
                    Discount = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    CustomerCommissionAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    SRCommissionAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    CustomerCommissionPer = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    SRCommissionPer = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    GrandTotal = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TotalCommisionAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PrevDue = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    salesRecievedtTermsId = table.Column<int>(type: "int", nullable: true),
                    PhoneNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmailId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    City = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDisPer = table.Column<bool>(type: "bit", nullable: false),
                    DisPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DisAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ServiceCharge = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Shipping = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ShippingTax = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    AmountsAre = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    TotalVat = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    NetAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PaidAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    IsRecurring = table.Column<bool>(type: "bit", nullable: false),
                    RewardPointValue = table.Column<int>(type: "int", nullable: false),
                    DueAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    WarehouseIdMain = table.Column<int>(type: "int", nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: false),
                    CustomerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SecoundaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isPOSSales = table.Column<bool>(type: "bit", nullable: false),
                    isSerialSales = table.Column<bool>(type: "bit", nullable: false),
                    isWholeSales = table.Column<bool>(type: "bit", nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    Profit = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ProfitPercentage = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    FinalCostingPrice = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PaidAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ChangeAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    IsVatSales = table.Column<bool>(type: "bit", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    StatusId = table.Column<int>(type: "int", nullable: true),
                    CurrencyRate = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ShippingTo = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ShippingVia = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ShippingDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TrackingNo = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FileName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MessageInvoice = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MessageStatement = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StatusUpdatedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    StatusUpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    DocTypeId = table.Column<int>(type: "int", nullable: true),
                    SalesRepId = table.Column<int>(type: "int", nullable: true),
                    OrderId = table.Column<int>(type: "int", nullable: true),
                    DocStatusId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sales", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Sales_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Sales_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Sales_Customer_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Customer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Sales_DocStatus_DocStatusId",
                        column: x => x.DocStatusId,
                        principalTable: "DocStatus",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Sales_DocType_DocTypeId",
                        column: x => x.DocTypeId,
                        principalTable: "DocType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Sales_Employee_SalesRepId",
                        column: x => x.SalesRepId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Sales_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Sales_Orders_OrderId",
                        column: x => x.OrderId,
                        principalTable: "Orders",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Sales_PaymentTerms_salesRecievedtTermsId",
                        column: x => x.salesRecievedtTermsId,
                        principalTable: "PaymentTerms",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Sales_Status_StatusId",
                        column: x => x.StatusId,
                        principalTable: "Status",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Sales_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Sales_Warehouse_WarehouseIdMain",
                        column: x => x.WarehouseIdMain,
                        principalTable: "Warehouse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ToDo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntryDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Subject = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    TicketId = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    StaffComment = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    AssaignFusionTeam = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Status = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ToDo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ToDo_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ToDo_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ToDo_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TroubleTicket",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TicketNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    InternetComplainId = table.Column<int>(type: "int", nullable: true),
                    DiagonosisByLUserId = table.Column<int>(type: "int", nullable: true),
                    DiagnosisReportId = table.Column<int>(type: "int", nullable: true),
                    SupportByLUserId = table.Column<int>(type: "int", nullable: true),
                    Recommendation = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Priority = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Note = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TroubleTicket", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TroubleTicket_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TroubleTicket_DiagnosisReport_DiagnosisReportId",
                        column: x => x.DiagnosisReportId,
                        principalTable: "DiagnosisReport",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TroubleTicket_InternetComplain_InternetComplainId",
                        column: x => x.InternetComplainId,
                        principalTable: "InternetComplain",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TroubleTicket_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TroubleTicket_UserAccount_DiagonosisByLUserId",
                        column: x => x.DiagonosisByLUserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TroubleTicket_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_TroubleTicket_UserAccount_SupportByLUserId",
                        column: x => x.SupportByLUserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserTerminate",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InternetUserId = table.Column<int>(type: "int", nullable: false),
                    TerminateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    MobileNoIfNecessary = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DeviceUpdate = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    NextFollowDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Note = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserTerminate", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserTerminate_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_UserTerminate_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserTerminate_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Member",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MemberAccessId = table.Column<int>(type: "int", nullable: false),
                    MemberBarcodeId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MembersNameEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    MembersNameBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    FathersNameEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    FathersNameBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopNameEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ShopNameBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    BusinessAddressEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    BusinessAddressBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    HoldingNoEng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    HoldingNoBng = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    NID = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CardNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FixedAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    DOB = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Mobile = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MarketName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Photo = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    BloodGroup = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    MemberHomePhone = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    isActive = table.Column<bool>(type: "bit", nullable: false),
                    MemberImagePath = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsExistImage = table.Column<bool>(type: "bit", nullable: false),
                    MemberType = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    OwnerShipType = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    EducationalQualification = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Occupation = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ProposerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ProposerMemberNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    SupporterName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SupporterMemberNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    MarketId = table.Column<int>(type: "int", nullable: true),
                    ShopId = table.Column<int>(type: "int", nullable: true),
                    MemberStatusId = table.Column<int>(type: "int", nullable: true),
                    isCanceled = table.Column<bool>(type: "bit", nullable: false),
                    CanceledRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsApplied = table.Column<bool>(type: "bit", maxLength: 200, nullable: false),
                    AppliedRemarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsChecked = table.Column<bool>(type: "bit", nullable: false),
                    CheckedRemarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isVerified = table.Column<bool>(type: "bit", nullable: false),
                    VerifiedRemarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isApproved = table.Column<bool>(type: "bit", nullable: false),
                    ApprovalRemarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Member", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Member_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Member_Market_MarketId",
                        column: x => x.MarketId,
                        principalTable: "Market",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Member_MemberStatus_MemberStatusId",
                        column: x => x.MemberStatusId,
                        principalTable: "MemberStatus",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Member_Shop_ShopId",
                        column: x => x.ShopId,
                        principalTable: "Shop",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Member_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PaymentMethod",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CardNumber = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CardNickName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    NameOnCard = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CountryId = table.Column<int>(type: "int", nullable: false),
                    IsDebitCredit = table.Column<bool>(type: "bit", nullable: false),
                    IsPayPal = table.Column<bool>(type: "bit", nullable: false),
                    StoreSettingId = table.Column<int>(type: "int", nullable: true),
                    Month = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Year = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CW = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Address = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    City = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    State = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    ZipCode = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalCityAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalState = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    LegalZipCode = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    BusinessIdNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentMethod", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PaymentMethod_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PaymentMethod_Country_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Country",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PaymentMethod_StoreSetting_StoreSettingId",
                        column: x => x.StoreSettingId,
                        principalTable: "StoreSetting",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PaymentMethod_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "Product",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    LocalName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EANCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Price = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CostPrice = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    WholeSalePrice = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    CategoryId = table.Column<int>(type: "int", nullable: false),
                    BrandId = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<int>(type: "int", nullable: false),
                    WarrentyId = table.Column<int>(type: "int", nullable: true),
                    AccIdInventory = table.Column<int>(type: "int", nullable: true),
                    AccIdConsumption = table.Column<int>(type: "int", nullable: true),
                    AccIdSales = table.Column<int>(type: "int", nullable: true),
                    AccIdSalesVAT = table.Column<int>(type: "int", nullable: true),
                    AccIdPurchaseVAT = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    ImagePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FileExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ROL = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ROLTwo = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ROLThree = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ROLStatus = table.Column<int>(type: "int", nullable: false),
                    ROQ = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    MOQ = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PCTN = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OldPrice = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ModelName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    SizeName = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    GSM = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ColorName = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    IsPublished = table.Column<bool>(type: "bit", nullable: false),
                    IsFeatured = table.Column<bool>(type: "bit", nullable: false),
                    IsNonInventory = table.Column<bool>(type: "bit", nullable: false),
                    CommissionPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CommissionAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ProductType = table.Column<string>(type: "nvarchar(1)", maxLength: 1, nullable: false),
                    isSystem = table.Column<bool>(type: "bit", nullable: false),
                    ParentProductId = table.Column<int>(type: "int", nullable: true),
                    SalesTaxId = table.Column<int>(type: "int", nullable: true),
                    PurchaseTaxId = table.Column<int>(type: "int", nullable: true),
                    ProductTypeId = table.Column<int>(type: "int", nullable: true),
                    SizeId = table.Column<int>(type: "int", nullable: true),
                    ProductColorList = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProductSizeList = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    ProductDiscountPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ProductDiscountAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ProductProfitPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    RunTimeLiveStock = table.Column<double>(type: "float", nullable: false),
                    OpeningDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsTaxInclusive = table.Column<bool>(type: "bit", nullable: false),
                    IsPurchaseTaxInclusive = table.Column<bool>(type: "bit", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Product", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Product_AccountHead_AccIdConsumption",
                        column: x => x.AccIdConsumption,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_AccountHead_AccIdInventory",
                        column: x => x.AccIdInventory,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_AccountHead_AccIdPurchaseVAT",
                        column: x => x.AccIdPurchaseVAT,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_AccountHead_AccIdSales",
                        column: x => x.AccIdSales,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_AccountHead_AccIdSalesVAT",
                        column: x => x.AccIdSalesVAT,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_Brand_BrandId",
                        column: x => x.BrandId,
                        principalTable: "Brand",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_Category_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "Category",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Product_Color_ColorId",
                        column: x => x.ColorId,
                        principalTable: "Color",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Product_MasterSalesTax_PurchaseTaxId",
                        column: x => x.PurchaseTaxId,
                        principalTable: "MasterSalesTax",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_MasterSalesTax_SalesTaxId",
                        column: x => x.SalesTaxId,
                        principalTable: "MasterSalesTax",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_ProductType_ProductTypeId",
                        column: x => x.ProductTypeId,
                        principalTable: "ProductType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_Product_ParentProductId",
                        column: x => x.ParentProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_Size_SizeId",
                        column: x => x.SizeId,
                        principalTable: "Size",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Product_Unit_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Product_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Product_Warrenty_WarrentyId",
                        column: x => x.WarrentyId,
                        principalTable: "Warrenty",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsRecognition = table.Column<bool>(type: "bit", nullable: false),
                    PurchaseDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DueDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    PurchaseCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    IsPaymentDone = table.Column<bool>(type: "bit", nullable: false),
                    PermitNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: true),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Total = table.Column<double>(type: "float", nullable: false),
                    Status = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Discount = table.Column<double>(type: "float", nullable: true),
                    GrandTotal = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PaymentMethod = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ReturnStatus = table.Column<int>(type: "int", nullable: false),
                    PaymentStatus = table.Column<int>(type: "int", nullable: false),
                    AmountsAre = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(12)", maxLength: 12, nullable: false),
                    EmailId = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ShippingAddress = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    ShipVia = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    City = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FilePath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PurchaseFilePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ChkPer = table.Column<bool>(type: "bit", nullable: false),
                    DisPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DisAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isDisPer = table.Column<bool>(type: "bit", nullable: false),
                    IsSystem = table.Column<bool>(type: "bit", nullable: false),
                    ServiceCharge = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Shipping = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TotalVat = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    NetAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PaidAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DueAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ChequeNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    WarehouseIdMain = table.Column<int>(type: "int", nullable: false),
                    MasterPOId = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    SupplierName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    SecoundaryAddress = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    isPOSPurchase = table.Column<bool>(type: "bit", nullable: false),
                    isBatchPurchase = table.Column<bool>(type: "bit", nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    DocStatusId = table.Column<int>(type: "int", nullable: true),
                    IsVatSales = table.Column<bool>(type: "bit", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CurrencyRate = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    DocTypeId = table.Column<int>(type: "int", nullable: true),
                    Cc = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Bcc = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentTermsId = table.Column<int>(type: "int", nullable: true),
                    IsRecurring = table.Column<bool>(type: "bit", nullable: false),
                    StatusId = table.Column<int>(type: "int", nullable: true),
                    DocStatusCount = table.Column<int>(type: "int", nullable: false),
                    LuserIdCheck = table.Column<int>(type: "int", nullable: true),
                    CheckDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LuserIdVerify = table.Column<int>(type: "int", nullable: true),
                    VerifyDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LuserIdApprove = table.Column<int>(type: "int", nullable: true),
                    ApproveDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Purchase", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Purchase_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Purchase_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_Customer_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_DocStatus_DocStatusId",
                        column: x => x.DocStatusId,
                        principalTable: "DocStatus",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_DocType_DocTypeId",
                        column: x => x.DocTypeId,
                        principalTable: "DocType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_MasterPO_Master_MasterPOId",
                        column: x => x.MasterPOId,
                        principalTable: "MasterPO_Master",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_PaymentTerms_PaymentTermsId",
                        column: x => x.PaymentTermsId,
                        principalTable: "PaymentTerms",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_Status_StatusId",
                        column: x => x.StatusId,
                        principalTable: "Status",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_Purchase_UserAccount_LuserIdApprove",
                        column: x => x.LuserIdApprove,
                        principalTable: "UserAccount",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_UserAccount_LuserIdCheck",
                        column: x => x.LuserIdCheck,
                        principalTable: "UserAccount",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_UserAccount_LuserIdVerify",
                        column: x => x.LuserIdVerify,
                        principalTable: "UserAccount",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Purchase_Warehouse_WarehouseIdMain",
                        column: x => x.WarehouseIdMain,
                        principalTable: "Warehouse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "WorkOCOM_MachineryLCMasterrderMaster",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LCNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LCDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    PaymentTermsId = table.Column<int>(type: "int", nullable: true),
                    DefferredPaymentDays = table.Column<int>(type: "int", nullable: true),
                    ShipDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    InsuranceCompanyId = table.Column<int>(type: "int", nullable: true),
                    InsurancePayStatus = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ImportBillNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ImportBillDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BillMacturityDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BillPayDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TotalBillAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Addedby = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateAdded = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkOCOM_MachineryLCMasterrderMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkOCOM_MachineryLCMasterrderMaster_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WorkOCOM_MachineryLCMasterrderMaster_PaymentTermss_PaymentTermsId",
                        column: x => x.PaymentTermsId,
                        principalTable: "PaymentTermss",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOCOM_MachineryLCMasterrderMaster_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOCOM_MachineryLCMasterrderMaster_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "WorkOrderMaster",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: true),
                    WorkOrderNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WorkOrderDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    ToPerson = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AgreementDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeliveryDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ServiceContractStartDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ServiceContractEndDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    ConversionRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    WorkOrderType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Subject = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Body = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentTerms = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OtherTerms = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WorkOrderQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    WorkOrderRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    SubTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    SalesTax = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OtherExp = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    WorkOrderAmt = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AdvancePayment = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    NetPayable = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsLocked = table.Column<bool>(type: "bit", nullable: false),
                    ServiceContract = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WorkOrderStatusId = table.Column<int>(type: "int", nullable: true),
                    WODetails = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShipTo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Shipping = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Total = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ApprovedById = table.Column<int>(type: "int", nullable: true),
                    RecommenedById = table.Column<int>(type: "int", nullable: true),
                    DateApproval = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ItemDescList = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ItemGroupId = table.Column<int>(type: "int", nullable: true),
                    ItemGroupName = table.Column<string>(type: "VARCHAR(500)", maxLength: 500, nullable: false),
                    ItemDescription = table.Column<string>(type: "VARCHAR(500)", maxLength: 500, nullable: false),
                    ItemDescId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkOrderMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_ApprovedBy_ApprovedById",
                        column: x => x.ApprovedById,
                        principalTable: "ApprovedBy",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_ApprovedBy_RecommenedById",
                        column: x => x.RecommenedById,
                        principalTable: "ApprovedBy",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_Commercial_CommercialCompanyId",
                        column: x => x.CommercialCompanyId,
                        principalTable: "Commercial",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_ItemDescription_ItemDescId",
                        column: x => x.ItemDescId,
                        principalTable: "ItemDescription",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_ItemGroup_ItemGroupId",
                        column: x => x.ItemGroupId,
                        principalTable: "ItemGroup",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_WorkOrderMaster_WorkorderStatus_WorkOrderStatusId",
                        column: x => x.WorkOrderStatusId,
                        principalTable: "WorkorderStatus",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ExportOrder",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BuyerContactPONo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    POLineNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PoDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DestinationID = table.Column<int>(type: "int", nullable: false),
                    OrderQty = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Rate = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    CM = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OrderValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ShipModelId = table.Column<int>(type: "int", nullable: true),
                    ExFactoryDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ShipDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ExportOrderStatusId = table.Column<int>(type: "int", nullable: true),
                    ExportOrderCategoryId = table.Column<int>(type: "int", nullable: true),
                    Remark = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StyleId = table.Column<int>(type: "int", nullable: true),
                    UnitMasterId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExportOrder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExportOrder_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExportOrder_Style_StyleId",
                        column: x => x.StyleId,
                        principalTable: "Style",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportOrder_UnitMaster_UnitMasterId",
                        column: x => x.UnitMasterId,
                        principalTable: "UnitMaster",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportOrder_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "MasterLC",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LCRefNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LCMargin = table.Column<float>(type: "real", nullable: false),
                    LCTypeId = table.Column<int>(type: "int", nullable: false),
                    TradeTermId = table.Column<int>(type: "int", nullable: true),
                    DestinationId = table.Column<int>(type: "int", nullable: false),
                    ShipModeId = table.Column<int>(type: "int", nullable: false),
                    BuyerLCRef = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LCNOforImport = table.Column<string>(type: "VARCHAR(200)", maxLength: 200, nullable: false),
                    LCOpenDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SalesContractIssueDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LCExpirydate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastShipmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TotalLCQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    UnitMasterId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LCValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Balance = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    MasterLCValueManual = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ExportLCValueManual = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    LCStatusId = table.Column<int>(type: "int", nullable: false),
                    LCNatureId = table.Column<int>(type: "int", nullable: true),
                    Tenor = table.Column<int>(type: "int", nullable: true),
                    ShipModelId = table.Column<int>(type: "int", nullable: true),
                    PaymentTermsId = table.Column<int>(type: "int", nullable: true),
                    DayListId = table.Column<int>(type: "int", nullable: false),
                    BuyerID = table.Column<int>(type: "int", nullable: false),
                    BuyerGroupID = table.Column<int>(type: "int", nullable: true),
                    DestinationContract = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: false),
                    unitId = table.Column<int>(type: "int", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    OpeningBankId = table.Column<int>(type: "int", nullable: true),
                    BankAccountId = table.Column<int>(type: "int", nullable: true),
                    LienBankId = table.Column<int>(type: "int", nullable: false),
                    PortOfLoadingId = table.Column<int>(type: "int", nullable: true),
                    PortOfDischargeId = table.Column<int>(type: "int", nullable: true),
                    Tolerance = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    Insurance = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AccountNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FirstShipmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RemarksOne = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RemarksTwo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RemarksThree = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RemarksFour = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RemarksFive = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FileNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MasterLC", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MasterLC_BankAccountNo_BankAccountId",
                        column: x => x.BankAccountId,
                        principalTable: "BankAccountNo",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_BuyerGroup_BuyerGroupID",
                        column: x => x.BuyerGroupID,
                        principalTable: "BuyerGroup",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_Commercial_CommercialCompanyId",
                        column: x => x.CommercialCompanyId,
                        principalTable: "Commercial",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterLC_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterLC_Country_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Country",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_Customer_BuyerID",
                        column: x => x.BuyerID,
                        principalTable: "Customer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MasterLC_DayList_DayListId",
                        column: x => x.DayListId,
                        principalTable: "DayList",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterLC_Destination_DestinationId",
                        column: x => x.DestinationId,
                        principalTable: "Destination",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterLC_LCNature_LCNatureId",
                        column: x => x.LCNatureId,
                        principalTable: "LCNature",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_LCStatus_LCStatusId",
                        column: x => x.LCStatusId,
                        principalTable: "LCStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterLC_LCType_LCTypeId",
                        column: x => x.LCTypeId,
                        principalTable: "LCType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterLC_LienBank_LienBankId",
                        column: x => x.LienBankId,
                        principalTable: "LienBank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterLC_OpeningBank_OpeningBankId",
                        column: x => x.OpeningBankId,
                        principalTable: "OpeningBank",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_PaymentTermss_PaymentTermsId",
                        column: x => x.PaymentTermsId,
                        principalTable: "PaymentTermss",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_PortOfDischarge_PortOfDischargeId",
                        column: x => x.PortOfDischargeId,
                        principalTable: "PortOfDischarge",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_PortOfLoading_PortOfLoadingId",
                        column: x => x.PortOfLoadingId,
                        principalTable: "PortOfLoading",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_ShipMode_ShipModeId",
                        column: x => x.ShipModeId,
                        principalTable: "ShipMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MasterLC_ShipModel_ShipModelId",
                        column: x => x.ShipModelId,
                        principalTable: "ShipModel",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_TradeTerm_TradeTermId",
                        column: x => x.TradeTermId,
                        principalTable: "TradeTerm",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_UnitMaster_unitId",
                        column: x => x.unitId,
                        principalTable: "UnitMaster",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MasterLC_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeSalary_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalaryMasterId = table.Column<int>(type: "int", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    GS = table.Column<float>(type: "real", nullable: false),
                    BS = table.Column<float>(type: "real", nullable: false),
                    Allowance = table.Column<float>(type: "real", nullable: false),
                    TotalDay = table.Column<float>(type: "real", nullable: false),
                    OtherAddition = table.Column<float>(type: "real", nullable: false),
                    AbsentDay = table.Column<float>(type: "real", nullable: false),
                    AbsentDeduction = table.Column<float>(type: "real", nullable: false),
                    OtherDeduction = table.Column<float>(type: "real", nullable: false),
                    AdvanceDeduction = table.Column<float>(type: "real", nullable: false),
                    LoanDeduction = table.Column<float>(type: "real", nullable: false),
                    NetAmount = table.Column<float>(type: "real", nullable: false),
                    HourProductionCount = table.Column<float>(type: "real", nullable: false),
                    SalaryDetailsRemarks = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeSalary_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Details_EmployeeSalary_Master_SalaryMasterId",
                        column: x => x.SalaryMasterId,
                        principalTable: "EmployeeSalary_Master",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Details_Employee_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_EmployeeSalary_Details_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesPayment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesId = table.Column<int>(type: "int", nullable: false),
                    PaymentCardNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    RowNo = table.Column<int>(type: "int", nullable: true),
                    AccountHeadId = table.Column<int>(type: "int", nullable: true),
                    TransactionId = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<int>(type: "int", nullable: true),
                    PaymentTypeModelId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesPayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesPayment_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesPayment_AccountHead_AccountHeadId",
                        column: x => x.AccountHeadId,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesPayment_AccountsDailyTransaction_TransactionId",
                        column: x => x.TransactionId,
                        principalTable: "AccountsDailyTransaction",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesPayment_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesPayment_PaymentType_PaymentTypeModelId",
                        column: x => x.PaymentTypeModelId,
                        principalTable: "PaymentType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesPayment_Sales_SalesId",
                        column: x => x.SalesId,
                        principalTable: "Sales",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesPayment_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesProductTax",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesId = table.Column<int>(type: "int", nullable: false),
                    Nickname = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Amount = table.Column<float>(type: "real", nullable: true),
                    TotalAmount = table.Column<float>(type: "real", nullable: true),
                    TaxId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesProductTax", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesProductTax_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesProductTax_SalesTax_TaxId",
                        column: x => x.TaxId,
                        principalTable: "SalesTax",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesProductTax_Sales_SalesId",
                        column: x => x.SalesId,
                        principalTable: "Sales",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesProductTax_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesReturn",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesReturnDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SalesReturnCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Total = table.Column<double>(type: "float", nullable: false),
                    Status = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Discount = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    GrandTotal = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TotalCommisionAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmailId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    City = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ChkPer = table.Column<bool>(type: "bit", nullable: false),
                    DisPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DisAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ServiceCharge = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Shipping = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TotalVat = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    NetAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PaidAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DueAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    WarehouseIdMain = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: false),
                    SaleId = table.Column<int>(type: "int", nullable: true),
                    CustomerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SecoundaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isPOSSalesReturn = table.Column<bool>(type: "bit", nullable: false),
                    isSerialSalesReturn = table.Column<bool>(type: "bit", nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    Profit = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ProfitPercentage = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    FinalCostingPrice = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    SalesRepId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesReturn", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesReturn_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturn_Customer_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Customer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesReturn_Employee_SalesRepId",
                        column: x => x.SalesRepId,
                        principalTable: "Employee",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesReturn_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesReturn_Sales_SaleId",
                        column: x => x.SaleId,
                        principalTable: "Sales",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesReturn_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturn_Warehouse_WarehouseIdMain",
                        column: x => x.WarehouseIdMain,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "salesTag",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesId = table.Column<int>(type: "int", nullable: false),
                    TagsId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_salesTag", x => x.Id);
                    table.ForeignKey(
                        name: "FK_salesTag_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_salesTag_Sales_SalesId",
                        column: x => x.SalesId,
                        principalTable: "Sales",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_salesTag_Tags_TagsId",
                        column: x => x.TagsId,
                        principalTable: "Tags",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_salesTag_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesTerms",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesId = table.Column<int>(type: "int", nullable: false),
                    TermsName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    TermsDescription = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    TermsSLNo = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesTerms", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesTerms_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesTerms_Sales_SalesId",
                        column: x => x.SalesId,
                        principalTable: "Sales",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesTerms_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TroubleTicketComment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CommentToLuserId = table.Column<int>(type: "int", nullable: true),
                    TroubleTicketId = table.Column<int>(type: "int", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TroubleTicketComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TroubleTicketComment_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_TroubleTicketComment_TroubleTicket_TroubleTicketId",
                        column: x => x.TroubleTicketId,
                        principalTable: "TroubleTicket",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TroubleTicketComment_UserAccount_CommentToLuserId",
                        column: x => x.CommentToLuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TroubleTicketComment_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "GatePassItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: true),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    ColorName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SizeName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    PackageQuantity = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    GatePassId = table.Column<int>(type: "int", nullable: false),
                    IsTransaction = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GatePassItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GatePassItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_GatePassItems_GatePass_GatePassId",
                        column: x => x.GatePassId,
                        principalTable: "GatePass",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_GatePassItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_GatePassItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "InternalTransferItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    AvgCostPrice = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    InternalTransferId = table.Column<int>(type: "int", nullable: false),
                    FromWarehouseId = table.Column<int>(type: "int", nullable: true),
                    ToWarehouseId = table.Column<int>(type: "int", nullable: true),
                    SerialItem = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternalTransferItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternalTransferItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_InternalTransferItems_InternalTransfer_InternalTransferId",
                        column: x => x.InternalTransferId,
                        principalTable: "InternalTransfer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_InternalTransferItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_InternalTransferItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_InternalTransferItems_Warehouse_FromWarehouseId",
                        column: x => x.FromWarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_InternalTransferItems_Warehouse_ToWarehouseId",
                        column: x => x.ToWarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "IssueItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    AvgCostPrice = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IssueId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    SerialItem = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IssueItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IssueItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_IssueItems_Issue_IssueId",
                        column: x => x.IssueId,
                        principalTable: "Issue",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_IssueItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_IssueItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_IssueItems_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "MASTERPO_Consumption",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MasterPOId = table.Column<int>(type: "int", nullable: false),
                    BuyerPOId = table.Column<int>(type: "int", nullable: false),
                    BOMMasterId = table.Column<int>(type: "int", nullable: false),
                    Remarks1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Remarks2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    SizeId = table.Column<int>(type: "int", nullable: true),
                    BOMAllocationCategoryId = table.Column<int>(type: "int", nullable: true),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MASTERPO_Consumption", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_BOMAllocationCategory_BOMAllocationCategoryId",
                        column: x => x.BOMAllocationCategoryId,
                        principalTable: "BOMAllocationCategory",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_BOMMaster_BOMMasterId",
                        column: x => x.BOMMasterId,
                        principalTable: "BOMMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_BuyerPO_Master_BuyerPOId",
                        column: x => x.BuyerPOId,
                        principalTable: "BuyerPO_Master",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_Colors_ColorId",
                        column: x => x.ColorId,
                        principalTable: "Colors",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_MasterPO_Master_MasterPOId",
                        column: x => x.MasterPOId,
                        principalTable: "MasterPO_Master",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_Sizes_SizeId",
                        column: x => x.SizeId,
                        principalTable: "Sizes",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_MASTERPO_Consumption_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "OrdersItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Price = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OrdersId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrdersItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrdersItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_OrdersItems_Orders_OrdersId",
                        column: x => x.OrdersId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OrdersItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_OrdersItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ProductColor",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    ColorId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductColor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductColor_Color_ColorId",
                        column: x => x.ColorId,
                        principalTable: "Color",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductColor_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductImage",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    ProductImageTitle = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImagePath = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductImage", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductImage_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductLedger",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    ProductId = table.Column<int>(type: "int", nullable: true),
                    PrdDescription = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    EntryDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    TicketId = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    TeamType = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Subject = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Referance = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ReceivedBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductLedger", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductLedger_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductLedger_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ProductLedger_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ProductLedger_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ProductReviews",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Ratings = table.Column<int>(type: "int", nullable: false),
                    Reviews = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductReviews", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductReviews_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProductSecoundaryUnit",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    UnitId = table.Column<int>(type: "int", nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    SecUnitRemarks = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductSecoundaryUnit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductSecoundaryUnit_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ProductSecoundaryUnit_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductSecoundaryUnit_Unit_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ProductSecoundaryUnit_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ProductSize",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    SizeId = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductSize", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductSize_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProductSize_Size_SizeId",
                        column: x => x.SizeId,
                        principalTable: "Size",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TestRouterOnuTracking",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EntryDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: true),
                    PrdDescription = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    MacSerial = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    WithdrawnDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Status = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    GivenBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    WithdrawnBy = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Note = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TestRouterOnuTracking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TestRouterOnuTracking_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TestRouterOnuTracking_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TestRouterOnuTracking_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TestRouterOnuTracking_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "TokenSales",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WarehouseIdMain = table.Column<int>(type: "int", nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: false),
                    TokenCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    TokenDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    CustomerName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    BlackProductId = table.Column<int>(type: "int", nullable: true),
                    WhiteProductId = table.Column<int>(type: "int", nullable: true),
                    OtherOneProductId = table.Column<int>(type: "int", nullable: true),
                    OtherTwoProductId = table.Column<int>(type: "int", nullable: true),
                    BlackGross = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    WhiteGross = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OtherOneGross = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OtherTwoGross = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    BlackTare = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    WhiteTare = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OtherOneTare = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OtherTwoTare = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    BlackNet = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    WhiteNet = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OtherOneNet = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    OtherTwoNet = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    DocTypeId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TokenSales", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TokenSales_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_TokenSales_Customer_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Customer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TokenSales_DocType_DocTypeId",
                        column: x => x.DocTypeId,
                        principalTable: "DocType",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TokenSales_Product_BlackProductId",
                        column: x => x.BlackProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TokenSales_Product_OtherOneProductId",
                        column: x => x.OtherOneProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TokenSales_Product_OtherTwoProductId",
                        column: x => x.OtherTwoProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TokenSales_Product_WhiteProductId",
                        column: x => x.WhiteProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_TokenSales_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_TokenSales_Warehouse_WarehouseIdMain",
                        column: x => x.WarehouseIdMain,
                        principalTable: "Warehouse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Price = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Quantity = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SKU = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    QTY = table.Column<double>(type: "float", nullable: false),
                    Rate = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    MasterTaxId = table.Column<int>(type: "int", nullable: true),
                    MasterTaxName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    WHName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    BatchStartFrom = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PurchaseId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    StyleId = table.Column<int>(type: "int", nullable: true),
                    ColorId = table.Column<int>(type: "int", nullable: true),
                    SizeId = table.Column<int>(type: "int", nullable: true),
                    BuyerPOId = table.Column<int>(type: "int", nullable: true),
                    PurchaseItemsId = table.Column<int>(type: "int", nullable: true),
                    IndDiscount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    IndShippingProportion = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    isDisPerRow = table.Column<bool>(type: "bit", nullable: false),
                    SalesUnitPrice = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ProfitPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ItemsReturnStatus = table.Column<int>(type: "int", nullable: true),
                    IndDiscountProportion = table.Column<double>(type: "float", nullable: false),
                    NewQTY = table.Column<double>(type: "float", nullable: false),
                    QTYOnHand = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseItems_BuyerPO_Master_BuyerPOId",
                        column: x => x.BuyerPOId,
                        principalTable: "BuyerPO_Master",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItems_Colors_ColorId",
                        column: x => x.ColorId,
                        principalTable: "Colors",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseItems_Customer_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItems_MasterSalesTax_MasterTaxId",
                        column: x => x.MasterTaxId,
                        principalTable: "MasterSalesTax",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseItems_PurchaseItems_PurchaseItemsId",
                        column: x => x.PurchaseItemsId,
                        principalTable: "PurchaseItems",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItems_Purchase_PurchaseId",
                        column: x => x.PurchaseId,
                        principalTable: "Purchase",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseItems_Sizes_SizeId",
                        column: x => x.SizeId,
                        principalTable: "Sizes",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItems_Style_StyleId",
                        column: x => x.StyleId,
                        principalTable: "Style",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseItems_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "PurchaseItemsCategory",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AccId = table.Column<int>(type: "int", nullable: false),
                    PurchaseItemsCategoryId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    IsBillable = table.Column<bool>(type: "bit", nullable: false),
                    IsTax = table.Column<bool>(type: "bit", nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    MasterTaxId = table.Column<int>(type: "int", nullable: true),
                    MasterTaxName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseItemsCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseItemsCategory_AccountHead_AccId",
                        column: x => x.AccId,
                        principalTable: "AccountHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseItemsCategory_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseItemsCategory_Customer_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItemsCategory_MasterSalesTax_MasterTaxId",
                        column: x => x.MasterTaxId,
                        principalTable: "MasterSalesTax",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItemsCategory_PurchaseItemsCategory_PurchaseItemsCategoryId",
                        column: x => x.PurchaseItemsCategoryId,
                        principalTable: "PurchaseItemsCategory",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItemsCategory_Purchase_PurchaseId",
                        column: x => x.PurchaseId,
                        principalTable: "Purchase",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseItemsCategory_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PurchasePayment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseId = table.Column<int>(type: "int", nullable: false),
                    PaymentCardNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    RowNo = table.Column<int>(type: "int", nullable: true),
                    AccountHeadId = table.Column<int>(type: "int", nullable: true),
                    TransactionId = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchasePayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchasePayment_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchasePayment_AccountHead_AccountHeadId",
                        column: x => x.AccountHeadId,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchasePayment_AccountsDailyTransaction_TransactionId",
                        column: x => x.TransactionId,
                        principalTable: "AccountsDailyTransaction",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchasePayment_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchasePayment_Purchase_PurchaseId",
                        column: x => x.PurchaseId,
                        principalTable: "Purchase",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchasePayment_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseProductTax",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    Nickname = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Amount = table.Column<float>(type: "real", nullable: true),
                    TaxId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseProductTax", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseProductTax_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseProductTax_Purchase_PurchaseId",
                        column: x => x.PurchaseId,
                        principalTable: "Purchase",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseProductTax_SalesTax_TaxId",
                        column: x => x.TaxId,
                        principalTable: "SalesTax",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseProductTax_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseReturn",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseReturnDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PurchaseReturnCode = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    Notes = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Total = table.Column<double>(type: "float", nullable: false),
                    Status = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Discount = table.Column<decimal>(type: "decimal(18,4)", nullable: true),
                    GrandTotal = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TotalCommisionAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PhoneNo = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    EmailId = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    City = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ChkPer = table.Column<bool>(type: "bit", nullable: false),
                    DisPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DisAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ServiceCharge = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    Shipping = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TotalVat = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    NetAmount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PaidAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    DueAmt = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    WarehouseIdMain = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: false),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    SupplierName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SecoundaryAddress = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    isPOSPurchaseReturn = table.Column<bool>(type: "bit", nullable: false),
                    isSerialPurchaseReturn = table.Column<bool>(type: "bit", nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    Profit = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ProfitPercentage = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    FinalCostingPrice = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    InternetUserId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseReturn", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseReturn_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturn_InternetUser_InternetUserId",
                        column: x => x.InternetUserId,
                        principalTable: "InternetUser",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseReturn_Purchase_PurchaseId",
                        column: x => x.PurchaseId,
                        principalTable: "Purchase",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseReturn_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseReturn_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturn_Warehouse_WarehouseIdMain",
                        column: x => x.WarehouseIdMain,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "purchaseTag",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseId = table.Column<int>(type: "int", nullable: false),
                    TagsId = table.Column<int>(type: "int", nullable: true),
                    tag = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_purchaseTag", x => x.Id);
                    table.ForeignKey(
                        name: "FK_purchaseTag_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_purchaseTag_Purchase_PurchaseId",
                        column: x => x.PurchaseId,
                        principalTable: "Purchase",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_purchaseTag_Tags_TagsId",
                        column: x => x.TagsId,
                        principalTable: "Tags",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_purchaseTag_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseTerms",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseId = table.Column<int>(type: "int", nullable: false),
                    TermsName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    TermsDescription = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    TermsSLNo = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseTerms", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseTerms_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseTerms_Purchase_PurchaseId",
                        column: x => x.PurchaseId,
                        principalTable: "Purchase",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseTerms_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "RecurringDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TemplateName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TemplateType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDays = table.Column<int>(type: "int", nullable: false),
                    Interval = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Every_ = table.Column<int>(type: "int", nullable: false),
                    Week_ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Month_ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Integer_ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Count_ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RecurringStartDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    RecurringEndDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PreviousDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    NextDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    End_ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    occurences = table.Column<int>(type: "int", nullable: false),
                    SalesId = table.Column<int>(type: "int", nullable: true),
                    PurchaseId = table.Column<int>(type: "int", nullable: true),
                    TransactionId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RecurringDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RecurringDetails_AccountsDailyTransaction_TransactionId",
                        column: x => x.TransactionId,
                        principalTable: "AccountsDailyTransaction",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_RecurringDetails_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RecurringDetails_Purchase_PurchaseId",
                        column: x => x.PurchaseId,
                        principalTable: "Purchase",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_RecurringDetails_Sales_SalesId",
                        column: x => x.SalesId,
                        principalTable: "Sales",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_RecurringDetails_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ExportInvoiceMaster",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvoiceNo = table.Column<string>(type: "VARCHAR(100)", maxLength: 100, nullable: false),
                    InvoiceDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DeliveryTerm = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TotalShipped = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    BalanceShip = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    MasterLCId = table.Column<int>(type: "int", nullable: true),
                    BuyerId = table.Column<int>(type: "int", nullable: true),
                    ManufactureId = table.Column<int>(type: "int", nullable: true),
                    FirstNotifyPartyId = table.Column<int>(type: "int", nullable: true),
                    SecondNotifyPartyId = table.Column<int>(type: "int", nullable: true),
                    ThirdNotifyPartyId = table.Column<int>(type: "int", nullable: true),
                    CommercialCompanyId = table.Column<int>(type: "int", nullable: true),
                    PortOfLoadingId = table.Column<int>(type: "int", nullable: true),
                    PortOfDischargeId = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    ExfactoryDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    OnboardDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ExpNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    ExpDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BLNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    BLDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BookingNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BookingDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    GoodsDescription = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    CartonMeasurement = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    VesselName = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    ShipmentAuthorization = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    VoyageNo = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    MainMark = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    NetWeight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    GrossWeight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CBM = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalCartonQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PackingType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentTermsManual = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Session = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TotalInvoiceQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalInvoiceQtyPcs = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Rate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Discount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    NetValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CMPPercentage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CMPValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CargoHandoverDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ContainerNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BankAccNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingBillNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingBillDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IsRevised = table.Column<bool>(type: "bit", nullable: false),
                    RevisedNo = table.Column<int>(type: "int", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExportInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_Commercial_CommercialCompanyId",
                        column: x => x.CommercialCompanyId,
                        principalTable: "Commercial",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_Commercial_ManufactureId",
                        column: x => x.ManufactureId,
                        principalTable: "Commercial",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_Customer_BuyerId",
                        column: x => x.BuyerId,
                        principalTable: "Customer",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_MasterLC_MasterLCId",
                        column: x => x.MasterLCId,
                        principalTable: "MasterLC",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_NotifyParty_FirstNotifyPartyId",
                        column: x => x.FirstNotifyPartyId,
                        principalTable: "NotifyParty",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_NotifyParty_SecondNotifyPartyId",
                        column: x => x.SecondNotifyPartyId,
                        principalTable: "NotifyParty",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_NotifyParty_ThirdNotifyPartyId",
                        column: x => x.ThirdNotifyPartyId,
                        principalTable: "NotifyParty",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_PortOfDischarge_PortOfDischargeId",
                        column: x => x.PortOfDischargeId,
                        principalTable: "PortOfDischarge",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_PortOfLoading_PortOfLoadingId",
                        column: x => x.PortOfLoadingId,
                        principalTable: "PortOfLoading",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportInvoiceMaster_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ExportRealization_Master",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExportFormNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FileNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    MasterLCId = table.Column<int>(type: "int", nullable: true),
                    FBPNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FBPDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DueDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    PaymentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BankRef = table.Column<string>(type: "VARCHAR(100)", maxLength: 100, nullable: false),
                    CourierNo = table.Column<string>(type: "VARCHAR(100)", maxLength: 100, nullable: false),
                    CourierDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RealizationAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    RealizationDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TotalInvoiceQty = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ReceivingVlaue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    BankCharge = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Remarks = table.Column<string>(type: "varchar(100)", maxLength: 100, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExportRealization_Master", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExportRealization_Master_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExportRealization_Master_MasterLC_MasterLCId",
                        column: x => x.MasterLCId,
                        principalTable: "MasterLC",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExportRealization_Master_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "GroupLC_Sub",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MasterLCID = table.Column<int>(type: "int", nullable: true),
                    GroupLCId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GroupLC_Sub", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GroupLC_Sub_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_GroupLC_Sub_GroupLC_Main_GroupLCId",
                        column: x => x.GroupLCId,
                        principalTable: "GroupLC_Main",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_GroupLC_Sub_MasterLC_MasterLCID",
                        column: x => x.MasterLCID,
                        principalTable: "MasterLC",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_GroupLC_Sub_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesReturnItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CommissionAmount = table.Column<double>(type: "float", nullable: false),
                    CommissionPer = table.Column<double>(type: "float", nullable: false),
                    UserCommissionAmount = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SalesReturnId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    SerialItem = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CostPrice = table.Column<double>(type: "float", nullable: false),
                    AvgCostPrice = table.Column<double>(type: "float", nullable: false),
                    IndDiscount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    IndDisPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesReturnItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesReturnItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturnItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturnItems_SalesReturn_SalesReturnId",
                        column: x => x.SalesReturnId,
                        principalTable: "SalesReturn",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesReturnItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturnItems_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "SalesReturnPayment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PaymentCardNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    RowNo = table.Column<int>(type: "int", nullable: true),
                    SalesReturnId = table.Column<int>(type: "int", nullable: false),
                    AccountHeadId = table.Column<int>(type: "int", nullable: true),
                    TransactionId = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesReturnPayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesReturnPayment_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesReturnPayment_AccountHead_AccountHeadId",
                        column: x => x.AccountHeadId,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesReturnPayment_AccountsDailyTransaction_TransactionId",
                        column: x => x.TransactionId,
                        principalTable: "AccountsDailyTransaction",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesReturnPayment_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturnPayment_SalesReturn_SalesReturnId",
                        column: x => x.SalesReturnId,
                        principalTable: "SalesReturn",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesReturnPayment_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseBatchItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseItemId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    BatchSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    ExchangeSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    ExchangeDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    SLNo = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchPrice = table.Column<double>(type: "float", nullable: false),
                    PurchaseBatchQuantity = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchAmount = table.Column<double>(type: "float", nullable: false),
                    BatchRemarks = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    IsReturn = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseBatchItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseBatchItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseBatchItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseBatchItems_PurchaseItems_PurchaseItemId",
                        column: x => x.PurchaseItemId,
                        principalTable: "PurchaseItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseBatchItems_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseBatchItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesExchangeItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CommissionAmount = table.Column<double>(type: "float", nullable: false),
                    CommissionPer = table.Column<double>(type: "float", nullable: false),
                    UserCommissionAmount = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SalesReturnId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    SerialItem = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CostPrice = table.Column<double>(type: "float", nullable: false),
                    AvgCostPrice = table.Column<double>(type: "float", nullable: false),
                    IndDiscountProportionExc = table.Column<double>(type: "float", nullable: false),
                    IndDiscount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    IndDisPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    PurchaseItemsId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesExchangeItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesExchangeItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesExchangeItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesExchangeItems_PurchaseItems_PurchaseItemsId",
                        column: x => x.PurchaseItemsId,
                        principalTable: "PurchaseItems",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesExchangeItems_SalesReturn_SalesReturnId",
                        column: x => x.SalesReturnId,
                        principalTable: "SalesReturn",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesExchangeItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesExchangeItems_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "SalesItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    DefaultPrice = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<double>(type: "float", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CommissionAmount = table.Column<double>(type: "float", nullable: false),
                    CommissionPer = table.Column<double>(type: "float", nullable: false),
                    UserCommissionAmount = table.Column<double>(type: "float", nullable: false),
                    PCTN = table.Column<double>(type: "float", nullable: false),
                    CartonQty = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SalesId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    ServiceDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsTax = table.Column<bool>(type: "bit", nullable: true),
                    SerialItem = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CostPrice = table.Column<double>(type: "float", nullable: false),
                    AvgCostPrice = table.Column<double>(type: "float", nullable: false),
                    IndDiscount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    IndDisPer = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    IndDiscountProportion = table.Column<double>(type: "float", nullable: false),
                    isDisPerRow = table.Column<bool>(type: "bit", nullable: false),
                    MasterTaxId = table.Column<int>(type: "int", nullable: false),
                    MasterTaxName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WHName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SalesItemsId = table.Column<int>(type: "int", nullable: true),
                    ItemsReturnStatus = table.Column<int>(type: "int", nullable: true),
                    PurchaseItemsId = table.Column<int>(type: "int", nullable: true),
                    TokenItemsId = table.Column<int>(type: "int", nullable: true),
                    IssueQuantity = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ReturnQuantity = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    ForwardSalesQuantity = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    TokenSalesQty = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesItems_PurchaseItems_PurchaseItemsId",
                        column: x => x.PurchaseItemsId,
                        principalTable: "PurchaseItems",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesItems_SalesItems_SalesItemsId",
                        column: x => x.SalesItemsId,
                        principalTable: "SalesItems",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesItems_Sales_SalesId",
                        column: x => x.SalesId,
                        principalTable: "Sales",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesItems_TokenSales_TokenItemsId",
                        column: x => x.TokenItemsId,
                        principalTable: "TokenSales",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SalesItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesItems_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "PurchaseReturnItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CommissionAmount = table.Column<double>(type: "float", nullable: false),
                    CommissionPer = table.Column<double>(type: "float", nullable: false),
                    UserCommissionAmount = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PurchaseReturnId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    SerialItem = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CostPrice = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseReturnItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnItems_PurchaseReturn_PurchaseReturnId",
                        column: x => x.PurchaseReturnId,
                        principalTable: "PurchaseReturn",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnItems_Warehouse_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouse",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "PurchaseReturnPayment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseReturnId = table.Column<int>(type: "int", nullable: false),
                    PaymentCardNo = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    isPosted = table.Column<bool>(type: "bit", nullable: false),
                    Amount = table.Column<decimal>(type: "decimal(18,4)", nullable: false),
                    RowNo = table.Column<int>(type: "int", nullable: true),
                    AccountHeadId = table.Column<int>(type: "int", nullable: true),
                    TransactionId = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<int>(type: "int", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseReturnPayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnPayment_Acc_VoucherMain_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Acc_VoucherMain",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseReturnPayment_AccountHead_AccountHeadId",
                        column: x => x.AccountHeadId,
                        principalTable: "AccountHead",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseReturnPayment_AccountsDailyTransaction_TransactionId",
                        column: x => x.TransactionId,
                        principalTable: "AccountsDailyTransaction",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_PurchaseReturnPayment_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnPayment_PurchaseReturn_PurchaseReturnId",
                        column: x => x.PurchaseReturnId,
                        principalTable: "PurchaseReturn",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnPayment_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ExportInvoiceDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InvoiceId = table.Column<int>(type: "int", nullable: false),
                    ExportInvoiceMasterId = table.Column<int>(type: "int", nullable: false),
                    MasterLCDetailsID = table.Column<int>(type: "int", nullable: false),
                    StyleNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ExportPoNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Destination = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LCQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    UnitMasterId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UnitMasterId1 = table.Column<int>(type: "int", nullable: false),
                    InvoiceQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    InvoiceRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    InvoiceValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ShipmentDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    NetWeightLine = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    GrossWeightLine = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CBMLine = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CartonQty = table.Column<int>(type: "int", nullable: true),
                    DocumentSendDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BillReceiveDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ColorCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    PODate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BoxLength = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BoxWidth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BoxHeight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    SLNO = table.Column<int>(type: "int", nullable: true),
                    InvoiceFactor = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    InvoiceQtyInPcs = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExportInvoiceDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExportInvoiceDetails_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ExportInvoiceDetails_ExportInvoiceMaster_ExportInvoiceMasterId",
                        column: x => x.ExportInvoiceMasterId,
                        principalTable: "ExportInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExportInvoiceDetails_UnitMaster_UnitMasterId1",
                        column: x => x.UnitMasterId1,
                        principalTable: "UnitMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ExportInvoiceDetails_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ExportRealization_Details",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RealizationId = table.Column<int>(type: "int", nullable: false),
                    InvoiceId = table.Column<int>(type: "int", nullable: false),
                    TotalQty = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ReceivingValue = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    BankCharge = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExportRealization_Details", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExportRealization_Details_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ExportRealization_Details_ExportInvoiceMaster_InvoiceId",
                        column: x => x.InvoiceId,
                        principalTable: "ExportInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ExportRealization_Details_ExportRealization_Master_RealizationId",
                        column: x => x.RealizationId,
                        principalTable: "ExportRealization_Master",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExportRealization_Details_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "InternalTransferBatchItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    InternalTransferItemId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchId = table.Column<int>(type: "int", nullable: false),
                    BatchSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InternalTransferBatchItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InternalTransferBatchItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_InternalTransferBatchItems_InternalTransferItems_InternalTransferItemId",
                        column: x => x.InternalTransferItemId,
                        principalTable: "InternalTransferItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_InternalTransferBatchItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_InternalTransferBatchItems_PurchaseBatchItems_PurchaseBatchId",
                        column: x => x.PurchaseBatchId,
                        principalTable: "PurchaseBatchItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_InternalTransferBatchItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "IssueBatchItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IssueItemId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchId = table.Column<int>(type: "int", nullable: false),
                    BatchSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IssueBatchItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IssueBatchItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_IssueBatchItems_IssueItems_IssueItemId",
                        column: x => x.IssueItemId,
                        principalTable: "IssueItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_IssueBatchItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_IssueBatchItems_PurchaseBatchItems_PurchaseBatchId",
                        column: x => x.PurchaseBatchId,
                        principalTable: "PurchaseBatchItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_IssueBatchItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesReturnBatchItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesReturnItemId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchId = table.Column<int>(type: "int", nullable: false),
                    BatchSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesReturnBatchItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesReturnBatchItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturnBatchItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturnBatchItems_PurchaseBatchItems_PurchaseBatchId",
                        column: x => x.PurchaseBatchId,
                        principalTable: "PurchaseBatchItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesReturnBatchItems_SalesReturnItems_SalesReturnItemId",
                        column: x => x.SalesReturnItemId,
                        principalTable: "SalesReturnItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesReturnBatchItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "WarrentyItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ComplainNo = table.Column<string>(type: "nvarchar(40)", maxLength: 40, nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: true),
                    PurchaseBatchId = table.Column<int>(type: "int", nullable: true),
                    ReplacedSerialNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Complainer = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ContactNo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    PrimaryAddress = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    Remarks = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Problem = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    SalesId = table.Column<int>(type: "int", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    ReplacedDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    NextFollowDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    Status = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarrentyItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WarrentyItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WarrentyItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WarrentyItems_PurchaseBatchItems_PurchaseBatchId",
                        column: x => x.PurchaseBatchId,
                        principalTable: "PurchaseBatchItems",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WarrentyItems_Sales_SalesId",
                        column: x => x.SalesId,
                        principalTable: "Sales",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WarrentyItems_Supplier_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Supplier",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_WarrentyItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesExchangeBatchItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesExchangeItemId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchId = table.Column<int>(type: "int", nullable: false),
                    BatchSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesExchangeBatchItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesExchangeBatchItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesExchangeBatchItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesExchangeBatchItems_PurchaseBatchItems_PurchaseBatchId",
                        column: x => x.PurchaseBatchId,
                        principalTable: "PurchaseBatchItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesExchangeBatchItems_SalesExchangeItems_SalesExchangeItemId",
                        column: x => x.SalesExchangeItemId,
                        principalTable: "SalesExchangeItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesExchangeBatchItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "SalesBatchItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SalesItemId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchId = table.Column<int>(type: "int", nullable: false),
                    BatchSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    SalesBatchQuantity = table.Column<int>(type: "int", nullable: false),
                    SalesBatchAmount = table.Column<double>(type: "float", nullable: false),
                    SalesBatchPrice = table.Column<double>(type: "float", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesBatchItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesBatchItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesBatchItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesBatchItems_PurchaseBatchItems_PurchaseBatchId",
                        column: x => x.PurchaseBatchId,
                        principalTable: "PurchaseBatchItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_SalesBatchItems_SalesItems_SalesItemId",
                        column: x => x.SalesItemId,
                        principalTable: "SalesItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalesBatchItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseReturnBatchItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseReturnItemId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<int>(type: "int", nullable: false),
                    PurchaseBatchId = table.Column<int>(type: "int", nullable: false),
                    BatchSerialNo = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseReturnBatchItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnBatchItems_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnBatchItems_Product_ProductId",
                        column: x => x.ProductId,
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnBatchItems_PurchaseBatchItems_PurchaseBatchId",
                        column: x => x.PurchaseBatchId,
                        principalTable: "PurchaseBatchItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnBatchItems_PurchaseReturnItems_PurchaseReturnItemId",
                        column: x => x.PurchaseReturnItemId,
                        principalTable: "PurchaseReturnItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnBatchItems_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateTable(
                name: "ExportInvoicePackingList",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExportInvoiceDetailsId = table.Column<int>(type: "int", nullable: false),
                    ExportPoNo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CartonQty = table.Column<int>(type: "int", nullable: true),
                    GrossWeightLinePacking = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    NetWeightLinePacking = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BoxLengthLinePacking = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BoxWidthLinePacking = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BoxHeightLinePacking = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CBMLinePacking = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    SLNOLinePacking = table.Column<int>(type: "int", nullable: true),
                    ItemNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UPCNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Qty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    UnitPrice = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ColorPL = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ttlPcsPL = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    remainingPL = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    netPcsPL = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PcsCTN = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CtnNoFromPL = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CtnNoToPL = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TotalNetWeightPL = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalGrossWeightPL = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UpdateDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    ComId = table.Column<int>(type: "int", nullable: false),
                    LuserId = table.Column<int>(type: "int", nullable: false),
                    LuserIdUpdate = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExportInvoicePackingList", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExportInvoicePackingList_Company_ComId",
                        column: x => x.ComId,
                        principalTable: "Company",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                    table.ForeignKey(
                        name: "FK_ExportInvoicePackingList_ExportInvoiceDetails_ExportInvoiceDetailsId",
                        column: x => x.ExportInvoiceDetailsId,
                        principalTable: "ExportInvoiceDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ExportInvoicePackingList_UserAccount_LuserId",
                        column: x => x.LuserId,
                        principalTable: "UserAccount",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.NoAction);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Acc_BudgetMain_ComId",
                table: "Acc_BudgetMain",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_BudgetMain_FiscalYearId",
                table: "Acc_BudgetMain",
                column: "FiscalYearId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_BudgetMain_LuserId",
                table: "Acc_BudgetMain",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_BudgetMain_PreFillId",
                table: "Acc_BudgetMain",
                column: "PreFillId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_BudgetSub_AccId",
                table: "Acc_BudgetSub",
                column: "AccId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_BudgetSub_BudgetId",
                table: "Acc_BudgetSub",
                column: "BudgetId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_BudgetSub_ComId",
                table: "Acc_BudgetSub",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_BudgetSub_LuserId",
                table: "Acc_BudgetSub",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_FiscalHalfYear_ComId",
                table: "Acc_FiscalHalfYear",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_FiscalHalfYear_LuserId",
                table: "Acc_FiscalHalfYear",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_FiscalMonth_ComId",
                table: "Acc_FiscalMonth",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_FiscalMonth_LuserId",
                table: "Acc_FiscalMonth",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_FiscalQtr_ComId",
                table: "Acc_FiscalQtr",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_FiscalQtr_LuserId",
                table: "Acc_FiscalQtr",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_FiscalYear_ComId",
                table: "Acc_FiscalYear",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_FiscalYear_LuserId",
                table: "Acc_FiscalYear",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_ComId",
                table: "Acc_VoucherMain",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_CountryId",
                table: "Acc_VoucherMain",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_CountryIdLocal",
                table: "Acc_VoucherMain",
                column: "CountryIdLocal");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_FiscalMonthId",
                table: "Acc_VoucherMain",
                column: "FiscalMonthId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_FiscalYearId",
                table: "Acc_VoucherMain",
                column: "FiscalYearId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_LuserId",
                table: "Acc_VoucherMain",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_PrdUnitId",
                table: "Acc_VoucherMain",
                column: "PrdUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_VoucherTranGroupId",
                table: "Acc_VoucherMain",
                column: "VoucherTranGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_VoucherTypeId",
                table: "Acc_VoucherMain",
                column: "VoucherTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherMain_WarehouseId",
                table: "Acc_VoucherMain",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherNoPrefix_ComId",
                table: "Acc_VoucherNoPrefix",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherNoPrefix_LuserId",
                table: "Acc_VoucherNoPrefix",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherNoPrefix_VoucherTypeId",
                table: "Acc_VoucherNoPrefix",
                column: "VoucherTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_AccId",
                table: "Acc_VoucherSub",
                column: "AccId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_ComId",
                table: "Acc_VoucherSub",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_CurrencyForeignId",
                table: "Acc_VoucherSub",
                column: "CurrencyForeignId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_CurrencyId",
                table: "Acc_VoucherSub",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_CustomerId",
                table: "Acc_VoucherSub",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_DamageId",
                table: "Acc_VoucherSub",
                column: "DamageId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_EmpId",
                table: "Acc_VoucherSub",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_IssueId",
                table: "Acc_VoucherSub",
                column: "IssueId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_LuserId",
                table: "Acc_VoucherSub",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_MemberId",
                table: "Acc_VoucherSub",
                column: "MemberId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_PurchaseId",
                table: "Acc_VoucherSub",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_PurchaseReturnId",
                table: "Acc_VoucherSub",
                column: "PurchaseReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_SalesId",
                table: "Acc_VoucherSub",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_SalesReturnId",
                table: "Acc_VoucherSub",
                column: "SalesReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_SupplierId",
                table: "Acc_VoucherSub",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_TransferInId",
                table: "Acc_VoucherSub",
                column: "TransferInId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_TransferOutId",
                table: "Acc_VoucherSub",
                column: "TransferOutId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_VoucherId",
                table: "Acc_VoucherSub",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSub_VoucherTranGroupIdRow",
                table: "Acc_VoucherSub",
                column: "VoucherTranGroupIdRow");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubCheckno_AccId",
                table: "Acc_VoucherSubCheckno",
                column: "AccId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubCheckno_ComId",
                table: "Acc_VoucherSubCheckno",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubCheckno_LuserId",
                table: "Acc_VoucherSubCheckno",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubCheckno_VoucherId",
                table: "Acc_VoucherSubCheckno",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubCheckno_VoucherSubId",
                table: "Acc_VoucherSubCheckno",
                column: "VoucherSubId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubSection_ComId",
                table: "Acc_VoucherSubSection",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubSection_LuserId",
                table: "Acc_VoucherSubSection",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubSection_SubSectionId",
                table: "Acc_VoucherSubSection",
                column: "SubSectionId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherSubSection_VoucherSubId",
                table: "Acc_VoucherSubSection",
                column: "VoucherSubId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherTags_ComId",
                table: "Acc_VoucherTags",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherTags_LuserId",
                table: "Acc_VoucherTags",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherTags_VoucherId",
                table: "Acc_VoucherTags",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherTranGroup_ComId",
                table: "Acc_VoucherTranGroup",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherTranGroup_LuserId",
                table: "Acc_VoucherTranGroup",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherTranGroup_VoucherId",
                table: "Acc_VoucherTranGroup",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_Acc_VoucherTranGroup_VoucherTranGroupId",
                table: "Acc_VoucherTranGroup",
                column: "VoucherTranGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountCategory_ParentAccountCategoryId",
                table: "AccountCategory",
                column: "ParentAccountCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_AccountCategoryId",
                table: "AccountHead",
                column: "AccountCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_ComId",
                table: "AccountHead",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_CountryId",
                table: "AccountHead",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_LuserId",
                table: "AccountHead",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_ParentId",
                table: "AccountHead",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_WarehouseId",
                table: "AccountHead",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_System_AccountCategoryId",
                table: "AccountHead_System",
                column: "AccountCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_System_BusinessTypeId",
                table: "AccountHead_System",
                column: "BusinessTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHead_System_ParentId",
                table: "AccountHead_System",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHeadPermission_AccId",
                table: "AccountHeadPermission",
                column: "AccId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHeadPermission_ComId",
                table: "AccountHeadPermission",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountHeadPermission_LuserId",
                table: "AccountHeadPermission",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_CategoryItemId",
                table: "AccountsDailyTransaction",
                column: "CategoryItemId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_ComId",
                table: "AccountsDailyTransaction",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_CreditAccountId",
                table: "AccountsDailyTransaction",
                column: "CreditAccountId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_CurrencyId",
                table: "AccountsDailyTransaction",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_CustomerId",
                table: "AccountsDailyTransaction",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_DamageId",
                table: "AccountsDailyTransaction",
                column: "DamageId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_DebitAccountId",
                table: "AccountsDailyTransaction",
                column: "DebitAccountId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_EmployeeId",
                table: "AccountsDailyTransaction",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_InternetUserId",
                table: "AccountsDailyTransaction",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_IssueId",
                table: "AccountsDailyTransaction",
                column: "IssueId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_LuserId",
                table: "AccountsDailyTransaction",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_MemberId",
                table: "AccountsDailyTransaction",
                column: "MemberId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_ParentTransactionId",
                table: "AccountsDailyTransaction",
                column: "ParentTransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_PaymentTypeId",
                table: "AccountsDailyTransaction",
                column: "PaymentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_ProductItemId",
                table: "AccountsDailyTransaction",
                column: "ProductItemId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_PurchaseId",
                table: "AccountsDailyTransaction",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_PurchaseReturnId",
                table: "AccountsDailyTransaction",
                column: "PurchaseReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_SalarySheetId",
                table: "AccountsDailyTransaction",
                column: "SalarySheetId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_SalesId",
                table: "AccountsDailyTransaction",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_SalesReturnId",
                table: "AccountsDailyTransaction",
                column: "SalesReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_SupplierId",
                table: "AccountsDailyTransaction",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_TransferInId",
                table: "AccountsDailyTransaction",
                column: "TransferInId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_TransferOutId",
                table: "AccountsDailyTransaction",
                column: "TransferOutId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_VoucherId",
                table: "AccountsDailyTransaction",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransaction_WarehouseId",
                table: "AccountsDailyTransaction",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransactionDetails_ComId",
                table: "AccountsDailyTransactionDetails",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransactionDetails_LuserId",
                table: "AccountsDailyTransactionDetails",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransactionDetails_PurchaseId",
                table: "AccountsDailyTransactionDetails",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransactionDetails_SalesId",
                table: "AccountsDailyTransactionDetails",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountsDailyTransactionDetails_TransactionId",
                table: "AccountsDailyTransactionDetails",
                column: "TransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivationTicket_ActivatedbyLUserId",
                table: "ActivationTicket",
                column: "ActivatedbyLUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivationTicket_ComId_TicketNo",
                table: "ActivationTicket",
                columns: new[] { "ComId", "TicketNo" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ActivationTicket_FusionTeamLUserId",
                table: "ActivationTicket",
                column: "FusionTeamLUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivationTicket_LuserId",
                table: "ActivationTicket",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivationTicket_PackageId",
                table: "ActivationTicket",
                column: "PackageId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvanceTrasactionTracking_ComId",
                table: "AdvanceTrasactionTracking",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvanceTrasactionTracking_LuserId",
                table: "AdvanceTrasactionTracking",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvanceTrasactionTracking_PurchaseId",
                table: "AdvanceTrasactionTracking",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvanceTrasactionTracking_SalesId",
                table: "AdvanceTrasactionTracking",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_Agency_ComId",
                table: "Agency",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Agency_LuserId",
                table: "Agency",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_AndroidMenuPermission_AndroidMenuId",
                table: "AndroidMenuPermission",
                column: "AndroidMenuId");

            migrationBuilder.CreateIndex(
                name: "IX_AndroidMenuPermission_BusinessTypeId",
                table: "AndroidMenuPermission",
                column: "BusinessTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AndroidMenuPermission_Details_AndroidMenuPermissionId",
                table: "AndroidMenuPermission_Details",
                column: "AndroidMenuPermissionId");

            migrationBuilder.CreateIndex(
                name: "IX_AndroidMenuPermission_Details_MenuId",
                table: "AndroidMenuPermission_Details",
                column: "MenuId");

            migrationBuilder.CreateIndex(
                name: "IX_AndroidMenuPermission_Master_ComId",
                table: "AndroidMenuPermission_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_AndroidMenuPermission_Master_LUserIdPermission",
                table: "AndroidMenuPermission_Master",
                column: "LUserIdPermission");

            migrationBuilder.CreateIndex(
                name: "IX_BankAccountNo_ComId",
                table: "BankAccountNo",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BankAccountNo_CommercialCompanyId",
                table: "BankAccountNo",
                column: "CommercialCompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_BankAccountNo_LuserId",
                table: "BankAccountNo",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BankAccountNo_OpeningBankId",
                table: "BankAccountNo",
                column: "OpeningBankId");

            migrationBuilder.CreateIndex(
                name: "IX_BarcodePrintInfo_ComId",
                table: "BarcodePrintInfo",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BarcodePrintInfo_LuserId",
                table: "BarcodePrintInfo",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLC_Details_BBLCMainId",
                table: "BBLC_Details",
                column: "BBLCMainId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLC_Details_ComId",
                table: "BBLC_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLC_Details_LuserId",
                table: "BBLC_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLC_Details_PIId",
                table: "BBLC_Details",
                column: "PIId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_COM_MasterLCId",
                table: "BBLCMaster",
                column: "COM_MasterLCId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_ComId",
                table: "BBLCMaster",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_CommercialCompanyId",
                table: "BBLCMaster",
                column: "CommercialCompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_CurrencyId",
                table: "BBLCMaster",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_DayListId",
                table: "BBLCMaster",
                column: "DayListId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_DayListTermId",
                table: "BBLCMaster",
                column: "DayListTermId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_DestinationID",
                table: "BBLCMaster",
                column: "DestinationID");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_GroupLCId",
                table: "BBLCMaster",
                column: "GroupLCId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_ItemGroupId",
                table: "BBLCMaster",
                column: "ItemGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_LienBankId",
                table: "BBLCMaster",
                column: "LienBankId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_LuserId",
                table: "BBLCMaster",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_OpeningBankId",
                table: "BBLCMaster",
                column: "OpeningBankId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_PaymentTermsId",
                table: "BBLCMaster",
                column: "PaymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_PortOfDischargeId",
                table: "BBLCMaster",
                column: "PortOfDischargeId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_PortOfLoadingId",
                table: "BBLCMaster",
                column: "PortOfLoadingId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_ShipModeId",
                table: "BBLCMaster",
                column: "ShipModeId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_SupplierId",
                table: "BBLCMaster",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_TradeTermId",
                table: "BBLCMaster",
                column: "TradeTermId");

            migrationBuilder.CreateIndex(
                name: "IX_BBLCMaster_TruckInfoId",
                table: "BBLCMaster",
                column: "TruckInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMAllocationCategory_ComId",
                table: "BOMAllocationCategory",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMAllocationCategory_LuserId",
                table: "BOMAllocationCategory",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_BOMAllocationCategoryId",
                table: "BOMDetails",
                column: "BOMAllocationCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_BOMMasterId",
                table: "BOMDetails",
                column: "BOMMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_ColorId",
                table: "BOMDetails",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_ComId",
                table: "BOMDetails",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_LuserId",
                table: "BOMDetails",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_ProductId",
                table: "BOMDetails",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_SizeId",
                table: "BOMDetails",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMMaster_ColorId",
                table: "BOMMaster",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMMaster_ComId",
                table: "BOMMaster",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMMaster_LuserId",
                table: "BOMMaster",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMMaster_SizeId",
                table: "BOMMaster",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMMaster_StyleId",
                table: "BOMMaster",
                column: "StyleId");

            migrationBuilder.CreateIndex(
                name: "IX_Brand_ComId",
                table: "Brand",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Brand_LuserId",
                table: "Brand",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerGroup_ComId",
                table: "BuyerGroup",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerGroup_LuserId",
                table: "BuyerGroup",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Consumption_BOMAllocationCategoryId",
                table: "BuyerPO_Consumption",
                column: "BOMAllocationCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Consumption_BOMMasterId",
                table: "BuyerPO_Consumption",
                column: "BOMMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Consumption_BuyerPOId",
                table: "BuyerPO_Consumption",
                column: "BuyerPOId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Consumption_ColorId",
                table: "BuyerPO_Consumption",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Consumption_ComId",
                table: "BuyerPO_Consumption",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Consumption_LuserId",
                table: "BuyerPO_Consumption",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Consumption_ProductId",
                table: "BuyerPO_Consumption",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Consumption_SizeId",
                table: "BuyerPO_Consumption",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Details_BuyerPOId",
                table: "BuyerPO_Details",
                column: "BuyerPOId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Details_ColorId",
                table: "BuyerPO_Details",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Details_ComId",
                table: "BuyerPO_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Details_LuserId",
                table: "BuyerPO_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Details_SizeId",
                table: "BuyerPO_Details",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Master_BuyerId",
                table: "BuyerPO_Master",
                column: "BuyerId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Master_ComId",
                table: "BuyerPO_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Master_LuserId",
                table: "BuyerPO_Master",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerPO_Master_StyleId",
                table: "BuyerPO_Master",
                column: "StyleId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Bank_ComId",
                table: "Cat_Bank",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Bank_LuserId",
                table: "Cat_Bank",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_BankBranch_ComId",
                table: "Cat_BankBranch",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_BankBranch_LuserId",
                table: "Cat_BankBranch",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_BuildingType_ComId",
                table: "Cat_BuildingType",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_BuildingType_LuserId",
                table: "Cat_BuildingType",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Department_ComId",
                table: "Cat_Department",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Department_LuserId",
                table: "Cat_Department",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Designation_ComId",
                table: "Cat_Designation",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Designation_GradeId",
                table: "Cat_Designation",
                column: "GradeId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Designation_LuserId",
                table: "Cat_Designation",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_District_ComId",
                table: "Cat_District",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_District_LuserId",
                table: "Cat_District",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Floor_ComId",
                table: "Cat_Floor",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Floor_LuserId",
                table: "Cat_Floor",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Grade_ComId",
                table: "Cat_Grade",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Grade_LuserId",
                table: "Cat_Grade",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Line_ComId",
                table: "Cat_Line",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Line_LuserId",
                table: "Cat_Line",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Location_ComId",
                table: "Cat_Location",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Location_LuserId",
                table: "Cat_Location",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_PoliceStation_DistId",
                table: "Cat_PoliceStation",
                column: "DistId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_PostOffice_DistId",
                table: "Cat_PostOffice",
                column: "DistId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_PostOffice_PStationId",
                table: "Cat_PostOffice",
                column: "PStationId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Section_ComId",
                table: "Cat_Section",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Section_DeptId",
                table: "Cat_Section",
                column: "DeptId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Section_LuserId",
                table: "Cat_Section",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Shift_ComId",
                table: "Cat_Shift",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Shift_LuserId",
                table: "Cat_Shift",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Skill_ComId",
                table: "Cat_Skill",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Skill_LuserId",
                table: "Cat_Skill",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_SubSection_ComId",
                table: "Cat_SubSection",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_SubSection_DeptId",
                table: "Cat_SubSection",
                column: "DeptId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_SubSection_LuserId",
                table: "Cat_SubSection",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_SubSection_SectId",
                table: "Cat_SubSection",
                column: "SectId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Unit_ComId",
                table: "Cat_Unit",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Cat_Unit_LuserId",
                table: "Cat_Unit",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Category_CategoryParentId",
                table: "Category",
                column: "CategoryParentId");

            migrationBuilder.CreateIndex(
                name: "IX_Category_ComId",
                table: "Category",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Category_LuserId",
                table: "Category",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Color_ComId",
                table: "Color",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ColorChild_ColorId",
                table: "ColorChild",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_ColorChild_ComId",
                table: "ColorChild",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ColorChild_LuserId",
                table: "ColorChild",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ColorChild_StyleId",
                table: "ColorChild",
                column: "StyleId");

            migrationBuilder.CreateIndex(
                name: "IX_Colors_ComId",
                table: "Colors",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Colors_LuserId",
                table: "Colors",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_BBLCId",
                table: "COM_CommercialInvoice",
                column: "BBLCId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_ComId",
                table: "COM_CommercialInvoice",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_CommercialCompanyID",
                table: "COM_CommercialInvoice",
                column: "CommercialCompanyID");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_CommercialLCTypeId",
                table: "COM_CommercialInvoice",
                column: "CommercialLCTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_CurrencyId",
                table: "COM_CommercialInvoice",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_DocumentStatusId",
                table: "COM_CommercialInvoice",
                column: "DocumentStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_ItemDescId",
                table: "COM_CommercialInvoice",
                column: "ItemDescId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_ItemGroupId",
                table: "COM_CommercialInvoice",
                column: "ItemGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_LuserId",
                table: "COM_CommercialInvoice",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_MachinaryLCId",
                table: "COM_CommercialInvoice",
                column: "MachinaryLCId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_SupplierID",
                table: "COM_CommercialInvoice",
                column: "SupplierID");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_UnitMasterId",
                table: "COM_CommercialInvoice",
                column: "UnitMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_Sub_ComId",
                table: "COM_CommercialInvoice_Sub",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_Sub_CommercialInvoiceId",
                table: "COM_CommercialInvoice_Sub",
                column: "CommercialInvoiceId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_Sub_ItemDescId",
                table: "COM_CommercialInvoice_Sub",
                column: "ItemDescId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_CommercialInvoice_Sub_LuserId",
                table: "COM_CommercialInvoice_Sub",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Details_ComId",
                table: "COM_DocumentAcceptance_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Details_CommercialInvoiceId",
                table: "COM_DocumentAcceptance_Details",
                column: "CommercialInvoiceId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Details_DocumentAcceptanceMasterId",
                table: "COM_DocumentAcceptance_Details",
                column: "DocumentAcceptanceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Details_LuserId",
                table: "COM_DocumentAcceptance_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_BBLCId",
                table: "COM_DocumentAcceptance_Master",
                column: "BBLCId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_BuyerId",
                table: "COM_DocumentAcceptance_Master",
                column: "BuyerId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_ComId",
                table: "COM_DocumentAcceptance_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_CommercialCompanyId",
                table: "COM_DocumentAcceptance_Master",
                column: "CommercialCompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_CurrencyId",
                table: "COM_DocumentAcceptance_Master",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_GroupLCId",
                table: "COM_DocumentAcceptance_Master",
                column: "GroupLCId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_LuserId",
                table: "COM_DocumentAcceptance_Master",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_MasterLCId",
                table: "COM_DocumentAcceptance_Master",
                column: "MasterLCId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_DocumentAcceptance_Master_SupplierId",
                table: "COM_DocumentAcceptance_Master",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Details_ComId",
                table: "COM_MachinaryLC_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Details_LuserId",
                table: "COM_MachinaryLC_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Details_MachinaryLCMasterID",
                table: "COM_MachinaryLC_Details",
                column: "MachinaryLCMasterID");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Details_PIId",
                table: "COM_MachinaryLC_Details",
                column: "PIId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_ComId",
                table: "COM_MachinaryLC_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_CompanyId",
                table: "COM_MachinaryLC_Master",
                column: "CompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_CurrencyId",
                table: "COM_MachinaryLC_Master",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_DayListId",
                table: "COM_MachinaryLC_Master",
                column: "DayListId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_DestinationID",
                table: "COM_MachinaryLC_Master",
                column: "DestinationID");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_ItemGroupsId",
                table: "COM_MachinaryLC_Master",
                column: "ItemGroupsId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_LienBankId",
                table: "COM_MachinaryLC_Master",
                column: "LienBankId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_LuserId",
                table: "COM_MachinaryLC_Master",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_OpeningBankId",
                table: "COM_MachinaryLC_Master",
                column: "OpeningBankId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_PaymentTermsId",
                table: "COM_MachinaryLC_Master",
                column: "PaymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_PortOfDischargeId",
                table: "COM_MachinaryLC_Master",
                column: "PortOfDischargeId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_PortOfLoadingId",
                table: "COM_MachinaryLC_Master",
                column: "PortOfLoadingId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_ShipModeId",
                table: "COM_MachinaryLC_Master",
                column: "ShipModeId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_SupplierId",
                table: "COM_MachinaryLC_Master",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachinaryLC_Master_TradeTermId",
                table: "COM_MachinaryLC_Master",
                column: "TradeTermId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachineryLCDetails_ComId",
                table: "COM_MachineryLCDetails",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachineryLCDetails_LuserId",
                table: "COM_MachineryLCDetails",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachineryLCDetails_MachineryLCId",
                table: "COM_MachineryLCDetails",
                column: "MachineryLCId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MachineryLCDetails_WorkOrderId",
                table: "COM_MachineryLCDetails",
                column: "WorkOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MasterLC_Details_BuyerPOId",
                table: "COM_MasterLC_Details",
                column: "BuyerPOId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MasterLC_Details_ComId",
                table: "COM_MasterLC_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MasterLC_Details_LuserId",
                table: "COM_MasterLC_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MasterLC_Details_MasterLCID",
                table: "COM_MasterLC_Details",
                column: "MasterLCID");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MasterLCExport_ComId",
                table: "COM_MasterLCExport",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MasterLCExport_LuserId",
                table: "COM_MasterLCExport",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_MasterLCExport_MasterLCModelId",
                table: "COM_MasterLCExport",
                column: "MasterLCModelId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoice_Sub_ComId",
                table: "COM_ProformaInvoice_Sub",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoice_Sub_ItemDescId",
                table: "COM_ProformaInvoice_Sub",
                column: "ItemDescId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoice_Sub_LuserId",
                table: "COM_ProformaInvoice_Sub",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoice_Sub_PIId",
                table: "COM_ProformaInvoice_Sub",
                column: "PIId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_BankAccountId",
                table: "COM_ProformaInvoices",
                column: "BankAccountId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_ComId",
                table: "COM_ProformaInvoices",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_CommercialCompanyId",
                table: "COM_ProformaInvoices",
                column: "CommercialCompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_CurrencyId",
                table: "COM_ProformaInvoices",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_DayListId",
                table: "COM_ProformaInvoices",
                column: "DayListId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_EmployeeId",
                table: "COM_ProformaInvoices",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_GroupLCId",
                table: "COM_ProformaInvoices",
                column: "GroupLCId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_ItemDescId",
                table: "COM_ProformaInvoices",
                column: "ItemDescId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_ItemGroupId",
                table: "COM_ProformaInvoices",
                column: "ItemGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_LienBankId",
                table: "COM_ProformaInvoices",
                column: "LienBankId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_LuserId",
                table: "COM_ProformaInvoices",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_OpeningBankId",
                table: "COM_ProformaInvoices",
                column: "OpeningBankId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_PaymentTermsId",
                table: "COM_ProformaInvoices",
                column: "PaymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_PITypeId",
                table: "COM_ProformaInvoices",
                column: "PITypeId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_PortOfLoadingCountryOfOriginId",
                table: "COM_ProformaInvoices",
                column: "PortOfLoadingCountryOfOriginId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_PortOfLoadingDestinationId",
                table: "COM_ProformaInvoices",
                column: "PortOfLoadingDestinationId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_PortOfLoadingId",
                table: "COM_ProformaInvoices",
                column: "PortOfLoadingId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_SupplierId",
                table: "COM_ProformaInvoices",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_COM_ProformaInvoices_UnitId",
                table: "COM_ProformaInvoices",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Commercial_ComId",
                table: "Commercial",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Commercial_LuserId",
                table: "Commercial",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Company_BusinessTypeId",
                table: "Company",
                column: "BusinessTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Company_CountryId",
                table: "Company",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_Company_CurrencyId",
                table: "Company",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Company_SubscriptionTypeId",
                table: "Company",
                column: "SubscriptionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Company_VoucherNoCreatedTypeId",
                table: "Company",
                column: "VoucherNoCreatedTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyCurrencies_ComId",
                table: "CompanyCurrencies",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyCurrencies_CurrencyId",
                table: "CompanyCurrencies",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyCurrencies_LuserId",
                table: "CompanyCurrencies",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyPermission_ComId",
                table: "CompanyPermission",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyPermission_LuserId",
                table: "CompanyPermission",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_ComId",
                table: "CostCalculated",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_DamageId",
                table: "CostCalculated",
                column: "DamageId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_InternalTransferId",
                table: "CostCalculated",
                column: "InternalTransferId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_IssueId",
                table: "CostCalculated",
                column: "IssueId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_LuserId",
                table: "CostCalculated",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_ProductId",
                table: "CostCalculated",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_PurchaseId",
                table: "CostCalculated",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_PurchaseReturnId",
                table: "CostCalculated",
                column: "PurchaseReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_SalesId",
                table: "CostCalculated",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_SalesReturnId",
                table: "CostCalculated",
                column: "SalesReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCalculated_WarehouseId",
                table: "CostCalculated",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_CreditBalance_ComId",
                table: "CreditBalance",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_CreditBalance_LuserId",
                table: "CreditBalance",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_CreditBalance_SoftwarePackageId",
                table: "CreditBalance",
                column: "SoftwarePackageId");

            migrationBuilder.CreateIndex(
                name: "IX_CreditUsed_ComId",
                table: "CreditUsed",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_CreditUsed_LuserId",
                table: "CreditUsed",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Customer_ComId",
                table: "Customer",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Customer_CustomerCurrencyId",
                table: "Customer",
                column: "CustomerCurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Customer_CustParentId",
                table: "Customer",
                column: "CustParentId");

            migrationBuilder.CreateIndex(
                name: "IX_Customer_LuserId",
                table: "Customer",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Customer_PaymentTermsId",
                table: "Customer",
                column: "PaymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_Customer_PaymentTypeId",
                table: "Customer",
                column: "PaymentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Customer_SalesRepresentativeId",
                table: "Customer",
                column: "SalesRepresentativeId");

            migrationBuilder.CreateIndex(
                name: "IX_Customer_TradeTermsId",
                table: "Customer",
                column: "TradeTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomFormStyle_ComId",
                table: "CustomFormStyle",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomFormStyle_DocTypeId",
                table: "CustomFormStyle",
                column: "DocTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomFormStyle_LuserId",
                table: "CustomFormStyle",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyCurrencyRate_ComId",
                table: "DailyCurrencyRate",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyCurrencyRate_LuserId",
                table: "DailyCurrencyRate",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Details_ColorId",
                table: "DailyProduction_Details",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Details_ComId",
                table: "DailyProduction_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Details_DailyProductionId",
                table: "DailyProduction_Details",
                column: "DailyProductionId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Details_LuserId",
                table: "DailyProduction_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Details_SizeId",
                table: "DailyProduction_Details",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Master_BuyerId",
                table: "DailyProduction_Master",
                column: "BuyerId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Master_BuyerPOId",
                table: "DailyProduction_Master",
                column: "BuyerPOId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Master_ComId",
                table: "DailyProduction_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Master_DepartmentId",
                table: "DailyProduction_Master",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Master_LuserId",
                table: "DailyProduction_Master",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProduction_Master_StyleId",
                table: "DailyProduction_Master",
                column: "StyleId");

            migrationBuilder.CreateIndex(
                name: "IX_Damage_ComId_DamageCode",
                table: "Damage",
                columns: new[] { "ComId", "DamageCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Damage_InternetUserId",
                table: "Damage",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Damage_LuserId",
                table: "Damage",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Damage_WarehouseIdMain",
                table: "Damage",
                column: "WarehouseIdMain");

            migrationBuilder.CreateIndex(
                name: "IX_DamageBatchItems_ComId",
                table: "DamageBatchItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageBatchItems_DamageItemId",
                table: "DamageBatchItems",
                column: "DamageItemId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageBatchItems_LuserId",
                table: "DamageBatchItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageBatchItems_ProductId",
                table: "DamageBatchItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageBatchItems_PurchaseBatchId",
                table: "DamageBatchItems",
                column: "PurchaseBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageItems_ComId",
                table: "DamageItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageItems_DamageId",
                table: "DamageItems",
                column: "DamageId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageItems_LuserId",
                table: "DamageItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageItems_ProductId",
                table: "DamageItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_DamageItems_WarehouseId",
                table: "DamageItems",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_DashBoardLayoutOrder_ComId",
                table: "DashBoardLayoutOrder",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DashBoardLayoutOrder_LuserId",
                table: "DashBoardLayoutOrder",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DayListTerm_ComId",
                table: "DayListTerm",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DayListTerm_LuserId",
                table: "DayListTerm",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryService_CategoryId",
                table: "DeliveryService",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryService_ComId_BillNo",
                table: "DeliveryService",
                columns: new[] { "ComId", "BillNo" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryService_CustomerId",
                table: "DeliveryService",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryService_DeliveryTimingId",
                table: "DeliveryService",
                column: "DeliveryTimingId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryService_DistanceId",
                table: "DeliveryService",
                column: "DistanceId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryService_LuserId",
                table: "DeliveryService",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryService_PaymentTypeId",
                table: "DeliveryService",
                column: "PaymentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryService_WeightId",
                table: "DeliveryService",
                column: "WeightId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceComment_ComId",
                table: "DeliveryServiceComment",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceComment_CommentToLuserId",
                table: "DeliveryServiceComment",
                column: "CommentToLuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceComment_DeliveryServiceId",
                table: "DeliveryServiceComment",
                column: "DeliveryServiceId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceComment_DeliveryServiceModelId",
                table: "DeliveryServiceComment",
                column: "DeliveryServiceModelId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceComment_LuserId",
                table: "DeliveryServiceComment",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceDistance_ComId",
                table: "DeliveryServiceDistance",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceDistance_LuserId",
                table: "DeliveryServiceDistance",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceTiming_ComId",
                table: "DeliveryServiceTiming",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceTiming_LuserId",
                table: "DeliveryServiceTiming",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceWeight_ComId",
                table: "DeliveryServiceWeight",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryServiceWeight_LuserId",
                table: "DeliveryServiceWeight",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Destination_ComId",
                table: "Destination",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Destination_CountryId",
                table: "Destination",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_Destination_LuserId",
                table: "Destination",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosisReport_ComId",
                table: "DiagnosisReport",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosisReport_LuserId",
                table: "DiagnosisReport",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DiscountType_ComId",
                table: "DiscountType",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DiscountType_LuserId",
                table: "DiscountType",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DocApprovalSetting_ApprovalTypeId",
                table: "DocApprovalSetting",
                column: "ApprovalTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_DocApprovalSetting_ComId",
                table: "DocApprovalSetting",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DocApprovalSetting_DocTypeId",
                table: "DocApprovalSetting",
                column: "DocTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_DocApprovalSetting_LuserId",
                table: "DocApprovalSetting",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DocApprovalSetting_LuserIdApprove",
                table: "DocApprovalSetting",
                column: "LuserIdApprove");

            migrationBuilder.CreateIndex(
                name: "IX_DocApprovalSetting_LuserIdCheck",
                table: "DocApprovalSetting",
                column: "LuserIdCheck");

            migrationBuilder.CreateIndex(
                name: "IX_DocApprovalSetting_LuserIdEntry",
                table: "DocApprovalSetting",
                column: "LuserIdEntry");

            migrationBuilder.CreateIndex(
                name: "IX_DocApprovalSetting_LuserIdVerify",
                table: "DocApprovalSetting",
                column: "LuserIdVerify");

            migrationBuilder.CreateIndex(
                name: "IX_DocStatus_DocTypeId",
                table: "DocStatus",
                column: "DocTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_DocStatus_StatusId",
                table: "DocStatus",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "IX_DyDashBoard_ComId",
                table: "DyDashBoard",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DyDashBoard_LuserId",
                table: "DyDashBoard",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_DynamicReport_BuyerId",
                table: "DynamicReport",
                column: "BuyerId");

            migrationBuilder.CreateIndex(
                name: "IX_DynamicReport_ComId",
                table: "DynamicReport",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_DynamicReport_LuserId",
                table: "DynamicReport",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmailSettings_ComId",
                table: "EmailSettings",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_EmailSettings_LuserId",
                table: "EmailSettings",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_BloodId",
                table: "Employee",
                column: "BloodId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_ComId",
                table: "Employee",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_DepartmentId",
                table: "Employee",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_DeptId",
                table: "Employee",
                column: "DeptId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_DesigId",
                table: "Employee",
                column: "DesigId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_Designationid",
                table: "Employee",
                column: "Designationid");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_EmployeeTypeId",
                table: "Employee",
                column: "EmployeeTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_FloorId",
                table: "Employee",
                column: "FloorId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_GenderId",
                table: "Employee",
                column: "GenderId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_GradeId",
                table: "Employee",
                column: "GradeId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_LineId",
                table: "Employee",
                column: "LineId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_LuserId",
                table: "Employee",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_RelgionId",
                table: "Employee",
                column: "RelgionId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_SectId",
                table: "Employee",
                column: "SectId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_ShiftId",
                table: "Employee",
                column: "ShiftId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_SkillId",
                table: "Employee",
                column: "SkillId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_SubSectId",
                table: "Employee",
                column: "SubSectId");

            migrationBuilder.CreateIndex(
                name: "IX_Employee_UnitId",
                table: "Employee",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAttendance_ComId",
                table: "EmployeeAttendance",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAttendance_LuserId",
                table: "EmployeeAttendance",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Details_ComId",
                table: "EmployeeSalary_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Details_EmployeeId",
                table: "EmployeeSalary_Details",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Details_LuserId",
                table: "EmployeeSalary_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Details_SalaryMasterId",
                table: "EmployeeSalary_Details",
                column: "SalaryMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Master_ComId",
                table: "EmployeeSalary_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Master_DepartmentId",
                table: "EmployeeSalary_Master",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Master_EmployeeTypeId",
                table: "EmployeeSalary_Master",
                column: "EmployeeTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Master_LuserId",
                table: "EmployeeSalary_Master",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Master_SalaryTypeId",
                table: "EmployeeSalary_Master",
                column: "SalaryTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Master_WarehouseId",
                table: "EmployeeSalary_Master",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalary_Master_WeekSegmentId",
                table: "EmployeeSalary_Master",
                column: "WeekSegmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ExpireDateExtend_ComId",
                table: "ExpireDateExtend",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ExpireDateExtend_InternetUserId",
                table: "ExpireDateExtend",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExpireDateExtend_LuserId",
                table: "ExpireDateExtend",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceDetails_ComId",
                table: "ExportInvoiceDetails",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceDetails_ExportInvoiceMasterId",
                table: "ExportInvoiceDetails",
                column: "ExportInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceDetails_LuserId",
                table: "ExportInvoiceDetails",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceDetails_UnitMasterId1",
                table: "ExportInvoiceDetails",
                column: "UnitMasterId1");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_BuyerId",
                table: "ExportInvoiceMaster",
                column: "BuyerId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_ComId",
                table: "ExportInvoiceMaster",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_CommercialCompanyId",
                table: "ExportInvoiceMaster",
                column: "CommercialCompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_FirstNotifyPartyId",
                table: "ExportInvoiceMaster",
                column: "FirstNotifyPartyId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_LuserId",
                table: "ExportInvoiceMaster",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_ManufactureId",
                table: "ExportInvoiceMaster",
                column: "ManufactureId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_MasterLCId",
                table: "ExportInvoiceMaster",
                column: "MasterLCId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_PortOfDischargeId",
                table: "ExportInvoiceMaster",
                column: "PortOfDischargeId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_PortOfLoadingId",
                table: "ExportInvoiceMaster",
                column: "PortOfLoadingId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_SecondNotifyPartyId",
                table: "ExportInvoiceMaster",
                column: "SecondNotifyPartyId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_SupplierId",
                table: "ExportInvoiceMaster",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoiceMaster_ThirdNotifyPartyId",
                table: "ExportInvoiceMaster",
                column: "ThirdNotifyPartyId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoicePackingList_ComId",
                table: "ExportInvoicePackingList",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoicePackingList_ExportInvoiceDetailsId",
                table: "ExportInvoicePackingList",
                column: "ExportInvoiceDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportInvoicePackingList_LuserId",
                table: "ExportInvoicePackingList",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportOrder_ComId",
                table: "ExportOrder",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportOrder_LuserId",
                table: "ExportOrder",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportOrder_StyleId",
                table: "ExportOrder",
                column: "StyleId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportOrder_UnitMasterId",
                table: "ExportOrder",
                column: "UnitMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportRealization_Details_ComId",
                table: "ExportRealization_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportRealization_Details_InvoiceId",
                table: "ExportRealization_Details",
                column: "InvoiceId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportRealization_Details_LuserId",
                table: "ExportRealization_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportRealization_Details_RealizationId",
                table: "ExportRealization_Details",
                column: "RealizationId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportRealization_Master_ComId",
                table: "ExportRealization_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportRealization_Master_LuserId",
                table: "ExportRealization_Master",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExportRealization_Master_MasterLCId",
                table: "ExportRealization_Master",
                column: "MasterLCId");

            migrationBuilder.CreateIndex(
                name: "IX_Feedback_ComId",
                table: "Feedback",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Feedback_LuserId",
                table: "Feedback",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_FromWarehousePermission_ComId",
                table: "FromWarehousePermission",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_FromWarehousePermission_LuserId",
                table: "FromWarehousePermission",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_FromWarehousePermission_WarehouseId",
                table: "FromWarehousePermission",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_Gallery_ComId",
                table: "Gallery",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Gallery_LuserId",
                table: "Gallery",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_GatePass_ComId",
                table: "GatePass",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_GatePass_LuserId",
                table: "GatePass",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_GatePassItems_ComId",
                table: "GatePassItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_GatePassItems_GatePassId",
                table: "GatePassItems",
                column: "GatePassId");

            migrationBuilder.CreateIndex(
                name: "IX_GatePassItems_LuserId",
                table: "GatePassItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_GatePassItems_ProductId",
                table: "GatePassItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_GroupLC_Main_BuyerId",
                table: "GroupLC_Main",
                column: "BuyerId");

            migrationBuilder.CreateIndex(
                name: "IX_GroupLC_Main_ComId",
                table: "GroupLC_Main",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_GroupLC_Main_CommercialCompanyId",
                table: "GroupLC_Main",
                column: "CommercialCompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_GroupLC_Main_LuserId",
                table: "GroupLC_Main",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_GroupLC_Sub_ComId",
                table: "GroupLC_Sub",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_GroupLC_Sub_GroupLCId",
                table: "GroupLC_Sub",
                column: "GroupLCId");

            migrationBuilder.CreateIndex(
                name: "IX_GroupLC_Sub_LuserId",
                table: "GroupLC_Sub",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_GroupLC_Sub_MasterLCID",
                table: "GroupLC_Sub",
                column: "MasterLCID");

            migrationBuilder.CreateIndex(
                name: "IX_HR_AttFixed_EmpId",
                table: "HR_AttFixed",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Address_EmpCurrDistId",
                table: "HR_Emp_Address",
                column: "EmpCurrDistId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Address_EmpCurrPOId",
                table: "HR_Emp_Address",
                column: "EmpCurrPOId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Address_EmpCurrPSId",
                table: "HR_Emp_Address",
                column: "EmpCurrPSId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Address_EmpId",
                table: "HR_Emp_Address",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Address_EmpPerDistId",
                table: "HR_Emp_Address",
                column: "EmpPerDistId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Address_EmpPerPOId",
                table: "HR_Emp_Address",
                column: "EmpPerPOId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Address_EmpPerPSId",
                table: "HR_Emp_Address",
                column: "EmpPerPSId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_BankInfo_AccTypeId",
                table: "HR_Emp_BankInfo",
                column: "AccTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_BankInfo_BankId",
                table: "HR_Emp_BankInfo",
                column: "BankId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_BankInfo_BranchId",
                table: "HR_Emp_BankInfo",
                column: "BranchId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_BankInfo_ComId",
                table: "HR_Emp_BankInfo",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_BankInfo_EmpId",
                table: "HR_Emp_BankInfo",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_BankInfo_LuserId",
                table: "HR_Emp_BankInfo",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_BankInfo_PayModeId",
                table: "HR_Emp_BankInfo",
                column: "PayModeId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Education_ComId",
                table: "HR_Emp_Education",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Education_EmpId",
                table: "HR_Emp_Education",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Education_LuserId",
                table: "HR_Emp_Education",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Experience_ComId",
                table: "HR_Emp_Experience",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Experience_EmpId",
                table: "HR_Emp_Experience",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Experience_LuserId",
                table: "HR_Emp_Experience",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Family_ComId",
                table: "HR_Emp_Family",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Family_EmpId",
                table: "HR_Emp_Family",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Family_LuserId",
                table: "HR_Emp_Family",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Image_EmpId",
                table: "HR_Emp_Image",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_ComId",
                table: "HR_Emp_Increment",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_EmpId",
                table: "HR_Emp_Increment",
                column: "EmpId",
                unique: true,
                filter: "[EmpId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_IncTypeId",
                table: "HR_Emp_Increment",
                column: "IncTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_NewDeptId",
                table: "HR_Emp_Increment",
                column: "NewDeptId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_NewDesigId",
                table: "HR_Emp_Increment",
                column: "NewDesigId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_NewEmpTypeId",
                table: "HR_Emp_Increment",
                column: "NewEmpTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_NewGenderId",
                table: "HR_Emp_Increment",
                column: "NewGenderId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_NewSectId",
                table: "HR_Emp_Increment",
                column: "NewSectId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_NewUnitId",
                table: "HR_Emp_Increment",
                column: "NewUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_OldDeptId",
                table: "HR_Emp_Increment",
                column: "OldDeptId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_OldDesigId",
                table: "HR_Emp_Increment",
                column: "OldDesigId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_OldEmpTypeId",
                table: "HR_Emp_Increment",
                column: "OldEmpTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_OldGenderId",
                table: "HR_Emp_Increment",
                column: "OldGenderId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_OldSectId",
                table: "HR_Emp_Increment",
                column: "OldSectId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_OldUnitId",
                table: "HR_Emp_Increment",
                column: "OldUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Increment_UserAccountListId",
                table: "HR_Emp_Increment",
                column: "UserAccountListId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Nominee_ComId",
                table: "HR_Emp_Nominee",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Nominee_EmpId",
                table: "HR_Emp_Nominee",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Nominee_LuserId",
                table: "HR_Emp_Nominee",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_BId",
                table: "HR_Emp_PersonalInfo",
                column: "BId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_ComId",
                table: "HR_Emp_PersonalInfo",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_EmpId",
                table: "HR_Emp_PersonalInfo",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_GratuityFinalYId",
                table: "HR_Emp_PersonalInfo",
                column: "GratuityFinalYId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_GratuityFundTransferYId",
                table: "HR_Emp_PersonalInfo",
                column: "GratuityFundTransferYId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_LuserId",
                table: "HR_Emp_PersonalInfo",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_PFFinalYId",
                table: "HR_Emp_PersonalInfo",
                column: "PFFinalYId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_PFFundTransferYId",
                table: "HR_Emp_PersonalInfo",
                column: "PFFundTransferYId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_WFFinalYId",
                table: "HR_Emp_PersonalInfo",
                column: "WFFinalYId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_PersonalInfo_WFFundTransferYId",
                table: "HR_Emp_PersonalInfo",
                column: "WFFundTransferYId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Released_ComId",
                table: "HR_Emp_Released",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Released_EmpId",
                table: "HR_Emp_Released",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Released_LuserId",
                table: "HR_Emp_Released",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_BId",
                table: "HR_Emp_Salary",
                column: "BId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_ComId",
                table: "HR_Emp_Salary",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_EmpId",
                table: "HR_Emp_Salary",
                column: "EmpId",
                unique: true,
                filter: "[EmpId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_GLId",
                table: "HR_Emp_Salary",
                column: "GLId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_HBLId",
                table: "HR_Emp_Salary",
                column: "HBLId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_HBLId2",
                table: "HR_Emp_Salary",
                column: "HBLId2");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_HBLId3",
                table: "HR_Emp_Salary",
                column: "HBLId3");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_LId1",
                table: "HR_Emp_Salary",
                column: "LId1");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_LId2",
                table: "HR_Emp_Salary",
                column: "LId2");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_LId3",
                table: "HR_Emp_Salary",
                column: "LId3");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_LuserId",
                table: "HR_Emp_Salary",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_MCLId",
                table: "HR_Emp_Salary",
                column: "MCLId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_PFLId",
                table: "HR_Emp_Salary",
                column: "PFLId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_PFLLId",
                table: "HR_Emp_Salary",
                column: "PFLLId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_PFLLId2",
                table: "HR_Emp_Salary",
                column: "PFLLId2");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_PFLLId3",
                table: "HR_Emp_Salary",
                column: "PFLLId3");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_Salary_WelfareLId",
                table: "HR_Emp_Salary",
                column: "WelfareLId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_ShiftInput_ComId",
                table: "HR_Emp_ShiftInput",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_ShiftInput_EmpId",
                table: "HR_Emp_ShiftInput",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_ShiftInput_LuserId",
                table: "HR_Emp_ShiftInput",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Emp_ShiftInput_ShiftId",
                table: "HR_Emp_ShiftInput",
                column: "ShiftId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Leave_Avail_ComId",
                table: "HR_Leave_Avail",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Leave_Avail_EmpId",
                table: "HR_Leave_Avail",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Leave_Avail_LTypeId",
                table: "HR_Leave_Avail",
                column: "LTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Leave_Avail_LuserId",
                table: "HR_Leave_Avail",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Leave_Balance_ComId",
                table: "HR_Leave_Balance",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_Leave_Balance_EmpId",
                table: "HR_Leave_Balance",
                column: "EmpId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_HR_Leave_Balance_LuserId",
                table: "HR_Leave_Balance",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProcessedData_ComId",
                table: "HR_ProcessedData",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProcessedData_EmployeeModelId",
                table: "HR_ProcessedData",
                column: "EmployeeModelId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProcessedData_LuserId",
                table: "HR_ProcessedData",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProcessLock_ComId",
                table: "HR_ProcessLock",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProcessLock_FiscalMonthId",
                table: "HR_ProcessLock",
                column: "FiscalMonthId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProcessLock_FiscalYearId",
                table: "HR_ProcessLock",
                column: "FiscalYearId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProcessLock_LuserId",
                table: "HR_ProcessLock",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProssType_ComId",
                table: "HR_ProssType",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProssType_LuserId",
                table: "HR_ProssType",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProssType_WHDay_ComId",
                table: "HR_ProssType_WHDay",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_ProssType_WHDay_LuserId",
                table: "HR_ProssType_WHDay",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_RawData_ComId",
                table: "Hr_RawData",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_RawData_EmpId",
                table: "Hr_RawData",
                column: "EmpId");

            migrationBuilder.CreateIndex(
                name: "IX_Hr_RawData_LuserId",
                table: "Hr_RawData",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_HR_RawData_App_EmployeeModelId",
                table: "HR_RawData_App",
                column: "EmployeeModelId");

            migrationBuilder.CreateIndex(
                name: "IX_ImagesGallery_BookModelId",
                table: "ImagesGallery",
                column: "BookModelId");

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationSettingDetails_AccId",
                table: "IntegrationSettingDetails",
                column: "AccId");

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationSettingDetails_CompanyListId",
                table: "IntegrationSettingDetails",
                column: "CompanyListId");

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationSettingDetails_IntegrationSettingMainId",
                table: "IntegrationSettingDetails",
                column: "IntegrationSettingMainId");

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationSettingDetails_LuserId",
                table: "IntegrationSettingDetails",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationSettingMain_ComId",
                table: "IntegrationSettingMain",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationSettingMain_LuserId",
                table: "IntegrationSettingMain",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationSettingMain_VoucherTypeId",
                table: "IntegrationSettingMain",
                column: "VoucherTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransfer_ComId_InternalTransferCode",
                table: "InternalTransfer",
                columns: new[] { "ComId", "InternalTransferCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransfer_InternetUserId",
                table: "InternalTransfer",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransfer_LuserId",
                table: "InternalTransfer",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransfer_WarehouseIdMain",
                table: "InternalTransfer",
                column: "WarehouseIdMain");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferBatchItems_ComId",
                table: "InternalTransferBatchItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferBatchItems_InternalTransferItemId",
                table: "InternalTransferBatchItems",
                column: "InternalTransferItemId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferBatchItems_LuserId",
                table: "InternalTransferBatchItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferBatchItems_ProductId",
                table: "InternalTransferBatchItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferBatchItems_PurchaseBatchId",
                table: "InternalTransferBatchItems",
                column: "PurchaseBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferItems_ComId",
                table: "InternalTransferItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferItems_FromWarehouseId",
                table: "InternalTransferItems",
                column: "FromWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferItems_InternalTransferId",
                table: "InternalTransferItems",
                column: "InternalTransferId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferItems_LuserId",
                table: "InternalTransferItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferItems_ProductId",
                table: "InternalTransferItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_InternalTransferItems_ToWarehouseId",
                table: "InternalTransferItems",
                column: "ToWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetComplain_ComId",
                table: "InternetComplain",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetComplain_LuserId",
                table: "InternetComplain",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetPackage_ComId",
                table: "InternetPackage",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetPackage_LuserId",
                table: "InternetPackage",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetUser_ComId_UserId",
                table: "InternetUser",
                columns: new[] { "ComId", "UserId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_InternetUser_LuserId",
                table: "InternetUser",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetUser_PackageId",
                table: "InternetUser",
                column: "PackageId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetUser_UserStatusId",
                table: "InternetUser",
                column: "UserStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetUserStatus_ComId",
                table: "InternetUserStatus",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_InternetUserStatus_LuserId",
                table: "InternetUserStatus",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_InvoiceBill_AccountReceiveHeadId",
                table: "InvoiceBill",
                column: "AccountReceiveHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_InvoiceBill_ComId_BillNo",
                table: "InvoiceBill",
                columns: new[] { "ComId", "BillNo" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_InvoiceBill_InternetUserId",
                table: "InvoiceBill",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_InvoiceBill_LuserId",
                table: "InvoiceBill",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Issue_ComId_IssueCode",
                table: "Issue",
                columns: new[] { "ComId", "IssueCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Issue_InternetUserId",
                table: "Issue",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Issue_LuserId",
                table: "Issue",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Issue_WarehouseIdMain",
                table: "Issue",
                column: "WarehouseIdMain");

            migrationBuilder.CreateIndex(
                name: "IX_IssueBatchItems_ComId",
                table: "IssueBatchItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueBatchItems_IssueItemId",
                table: "IssueBatchItems",
                column: "IssueItemId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueBatchItems_LuserId",
                table: "IssueBatchItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueBatchItems_ProductId",
                table: "IssueBatchItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueBatchItems_PurchaseBatchId",
                table: "IssueBatchItems",
                column: "PurchaseBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueItems_ComId",
                table: "IssueItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueItems_IssueId",
                table: "IssueItems",
                column: "IssueId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueItems_LuserId",
                table: "IssueItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueItems_ProductId",
                table: "IssueItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_IssueItems_WarehouseId",
                table: "IssueItems",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemDesc_ItemGroupId",
                table: "ItemDesc",
                column: "ItemGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemDescription_ComId",
                table: "ItemDescription",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemDescription_ItemGroupId",
                table: "ItemDescription",
                column: "ItemGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemDescription_LuserId",
                table: "ItemDescription",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemGroup_ComId",
                table: "ItemGroup",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemGroup_LuserId",
                table: "ItemGroup",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_LienBank_ComId",
                table: "LienBank",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_LienBank_CountryId",
                table: "LienBank",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_LienBank_LuserId",
                table: "LienBank",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_LinkShare_ComId",
                table: "LinkShare",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_LinkShare_LuserId",
                table: "LinkShare",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Market_ComId",
                table: "Market",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Market_LuserId",
                table: "Market",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_BankAccountId",
                table: "MasterLC",
                column: "BankAccountId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_BuyerGroupID",
                table: "MasterLC",
                column: "BuyerGroupID");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_BuyerID",
                table: "MasterLC",
                column: "BuyerID");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_ComId",
                table: "MasterLC",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_CommercialCompanyId",
                table: "MasterLC",
                column: "CommercialCompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_CurrencyId",
                table: "MasterLC",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_DayListId",
                table: "MasterLC",
                column: "DayListId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_DestinationId",
                table: "MasterLC",
                column: "DestinationId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_LCNatureId",
                table: "MasterLC",
                column: "LCNatureId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_LCStatusId",
                table: "MasterLC",
                column: "LCStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_LCTypeId",
                table: "MasterLC",
                column: "LCTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_LienBankId",
                table: "MasterLC",
                column: "LienBankId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_LuserId",
                table: "MasterLC",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_OpeningBankId",
                table: "MasterLC",
                column: "OpeningBankId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_PaymentTermsId",
                table: "MasterLC",
                column: "PaymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_PortOfDischargeId",
                table: "MasterLC",
                column: "PortOfDischargeId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_PortOfLoadingId",
                table: "MasterLC",
                column: "PortOfLoadingId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_ShipModeId",
                table: "MasterLC",
                column: "ShipModeId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_ShipModelId",
                table: "MasterLC",
                column: "ShipModelId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_SupplierId",
                table: "MasterLC",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_TradeTermId",
                table: "MasterLC",
                column: "TradeTermId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterLC_unitId",
                table: "MasterLC",
                column: "unitId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_BOMAllocationCategoryId",
                table: "MASTERPO_Consumption",
                column: "BOMAllocationCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_BOMMasterId",
                table: "MASTERPO_Consumption",
                column: "BOMMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_BuyerPOId",
                table: "MASTERPO_Consumption",
                column: "BuyerPOId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_ColorId",
                table: "MASTERPO_Consumption",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_ComId",
                table: "MASTERPO_Consumption",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_LuserId",
                table: "MASTERPO_Consumption",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_MasterPOId",
                table: "MASTERPO_Consumption",
                column: "MasterPOId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_ProductId",
                table: "MASTERPO_Consumption",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_SizeId",
                table: "MASTERPO_Consumption",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_MASTERPO_Consumption_SupplierId",
                table: "MASTERPO_Consumption",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterPO_Details_BuyerPOId",
                table: "MasterPO_Details",
                column: "BuyerPOId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterPO_Details_ComId",
                table: "MasterPO_Details",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterPO_Details_LuserId",
                table: "MasterPO_Details",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterPO_Details_MasterPOId",
                table: "MasterPO_Details",
                column: "MasterPOId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterPO_Master_ComId",
                table: "MasterPO_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterPO_Master_LuserId",
                table: "MasterPO_Master",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterSalesTax_ComId",
                table: "MasterSalesTax",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MasterSalesTax_LuserId",
                table: "MasterSalesTax",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Member_ComId",
                table: "Member",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Member_LuserId",
                table: "Member",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Member_MarketId",
                table: "Member",
                column: "MarketId");

            migrationBuilder.CreateIndex(
                name: "IX_Member_MemberStatusId",
                table: "Member",
                column: "MemberStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Member_ShopId",
                table: "Member",
                column: "ShopId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberStatus_ComId",
                table: "MemberStatus",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberStatus_LuserId",
                table: "MemberStatus",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Menu_ParentId",
                table: "Menu",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_MenuPermission_BusinessTypeId",
                table: "MenuPermission",
                column: "BusinessTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MenuPermission_MenuId",
                table: "MenuPermission",
                column: "MenuId");

            migrationBuilder.CreateIndex(
                name: "IX_MenuPermission_Details_MenuId",
                table: "MenuPermission_Details",
                column: "MenuId");

            migrationBuilder.CreateIndex(
                name: "IX_MenuPermission_Details_MenuPermissionId",
                table: "MenuPermission_Details",
                column: "MenuPermissionId");

            migrationBuilder.CreateIndex(
                name: "IX_MenuPermission_Master_ComId",
                table: "MenuPermission_Master",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MenuPermission_Master_LUserIdPermission",
                table: "MenuPermission_Master",
                column: "LUserIdPermission");

            migrationBuilder.CreateIndex(
                name: "IX_MobileImages_ComId",
                table: "MobileImages",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MobileImages_LuserId",
                table: "MobileImages",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_MobileTextAnimation_ComId",
                table: "MobileTextAnimation",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MobileTextAnimation_LuserId",
                table: "MobileTextAnimation",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_MonthlySales_ComId",
                table: "MonthlySales",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_MonthlySales_LuserId",
                table: "MonthlySales",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Notification_ComId",
                table: "Notification",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Notification_LuserId",
                table: "Notification",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_NotificationMassages_NotificationSettingId",
                table: "NotificationMassages",
                column: "NotificationSettingId");

            migrationBuilder.CreateIndex(
                name: "IX_NotificationSeen_ComId",
                table: "NotificationSeen",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_NotificationSeen_LuserId",
                table: "NotificationSeen",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_NotificationSeen_NotificationId",
                table: "NotificationSeen",
                column: "NotificationId");

            migrationBuilder.CreateIndex(
                name: "IX_NotificationSettings_ComId",
                table: "NotificationSettings",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_NotificationSettings_LuserId",
                table: "NotificationSettings",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_NotifyParty_BuyerId",
                table: "NotifyParty",
                column: "BuyerId");

            migrationBuilder.CreateIndex(
                name: "IX_NotifyParty_ComId",
                table: "NotifyParty",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_NotifyParty_CountryId",
                table: "NotifyParty",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_NotifyParty_DynamicReportId",
                table: "NotifyParty",
                column: "DynamicReportId");

            migrationBuilder.CreateIndex(
                name: "IX_NotifyParty_LuserId",
                table: "NotifyParty",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_NotifyParty_PortOfDischargeId",
                table: "NotifyParty",
                column: "PortOfDischargeId");

            migrationBuilder.CreateIndex(
                name: "IX_Offer_ComId",
                table: "Offer",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Offer_LuserId",
                table: "Offer",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_OpeningBank_ComId",
                table: "OpeningBank",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_OpeningBank_CountryId",
                table: "OpeningBank",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_OpeningBank_LuserId",
                table: "OpeningBank",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_ComId_OrderCode",
                table: "Orders",
                columns: new[] { "ComId", "OrderCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Orders_CustomerId",
                table: "Orders",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_LuserId",
                table: "Orders",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_OrdersItems_ComId",
                table: "OrdersItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_OrdersItems_LuserId",
                table: "OrdersItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_OrdersItems_OrdersId",
                table: "OrdersItems",
                column: "OrdersId");

            migrationBuilder.CreateIndex(
                name: "IX_OrdersItems_ProductId",
                table: "OrdersItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_OrdersPayment_ComId",
                table: "OrdersPayment",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_OrdersPayment_LuserId",
                table: "OrdersPayment",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_OrdersPayment_OrdersId",
                table: "OrdersPayment",
                column: "OrdersId");

            migrationBuilder.CreateIndex(
                name: "IX_PackageActivation_ComId_InvoiceNo",
                table: "PackageActivation",
                columns: new[] { "ComId", "InvoiceNo" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PackageActivation_LuserId",
                table: "PackageActivation",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PackageActivation_PackageId",
                table: "PackageActivation",
                column: "PackageId");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentMethod_ComId",
                table: "PaymentMethod",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentMethod_CountryId",
                table: "PaymentMethod",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentMethod_LuserId",
                table: "PaymentMethod",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentMethod_StoreSettingId",
                table: "PaymentMethod",
                column: "StoreSettingId");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentTerms_ComId",
                table: "PaymentTerms",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentTerms_LuserId",
                table: "PaymentTerms",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PayrollIntegration_AccId",
                table: "PayrollIntegration",
                column: "AccId");

            migrationBuilder.CreateIndex(
                name: "IX_PayrollIntegration_ComId",
                table: "PayrollIntegration",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PayrollIntegration_FiscalMonthId",
                table: "PayrollIntegration",
                column: "FiscalMonthId");

            migrationBuilder.CreateIndex(
                name: "IX_PayrollIntegration_FiscalYearId",
                table: "PayrollIntegration",
                column: "FiscalYearId");

            migrationBuilder.CreateIndex(
                name: "IX_PayrollIntegration_LuserId",
                table: "PayrollIntegration",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PIType_ComId",
                table: "PIType",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PIType_LuserId",
                table: "PIType",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PortOfDischarge_ComId",
                table: "PortOfDischarge",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PortOfDischarge_CountryId",
                table: "PortOfDischarge",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_PortOfDischarge_LuserId",
                table: "PortOfDischarge",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PortOfLoading_ComId",
                table: "PortOfLoading",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PortOfLoading_CountryId",
                table: "PortOfLoading",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_PortOfLoading_LuserId",
                table: "PortOfLoading",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PrdUnit_ComId",
                table: "PrdUnit",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PrdUnit_LuserId",
                table: "PrdUnit",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessLock_ComId",
                table: "ProcessLock",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessLock_FiscalMonthId",
                table: "ProcessLock",
                column: "FiscalMonthId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessLock_FiscalYearId",
                table: "ProcessLock",
                column: "FiscalYearId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessLock_LuserId",
                table: "ProcessLock",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_AccIdConsumption",
                table: "Product",
                column: "AccIdConsumption");

            migrationBuilder.CreateIndex(
                name: "IX_Product_AccIdInventory",
                table: "Product",
                column: "AccIdInventory");

            migrationBuilder.CreateIndex(
                name: "IX_Product_AccIdPurchaseVAT",
                table: "Product",
                column: "AccIdPurchaseVAT");

            migrationBuilder.CreateIndex(
                name: "IX_Product_AccIdSales",
                table: "Product",
                column: "AccIdSales");

            migrationBuilder.CreateIndex(
                name: "IX_Product_AccIdSalesVAT",
                table: "Product",
                column: "AccIdSalesVAT");

            migrationBuilder.CreateIndex(
                name: "IX_Product_BrandId",
                table: "Product",
                column: "BrandId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_CategoryId",
                table: "Product",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_ColorId",
                table: "Product",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_ComId_Code",
                table: "Product",
                columns: new[] { "ComId", "Code" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Product_LuserId",
                table: "Product",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_ParentProductId",
                table: "Product",
                column: "ParentProductId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_ProductTypeId",
                table: "Product",
                column: "ProductTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_PurchaseTaxId",
                table: "Product",
                column: "PurchaseTaxId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_SalesTaxId",
                table: "Product",
                column: "SalesTaxId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_SizeId",
                table: "Product",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_SupplierId",
                table: "Product",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_UnitId",
                table: "Product",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_Product_WarrentyId",
                table: "Product",
                column: "WarrentyId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductColor_ColorId",
                table: "ProductColor",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductColor_ProductId",
                table: "ProductColor",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductImage_ProductId",
                table: "ProductImage",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductLedger_ComId",
                table: "ProductLedger",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductLedger_InternetUserId",
                table: "ProductLedger",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductLedger_LuserId",
                table: "ProductLedger",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductLedger_ProductId",
                table: "ProductLedger",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductReviews_ProductId",
                table: "ProductReviews",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductSecoundaryUnit_ComId",
                table: "ProductSecoundaryUnit",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductSecoundaryUnit_LuserId",
                table: "ProductSecoundaryUnit",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductSecoundaryUnit_ProductId",
                table: "ProductSecoundaryUnit",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductSecoundaryUnit_UnitId",
                table: "ProductSecoundaryUnit",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductSize_ProductId",
                table: "ProductSize",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductSize_SizeId",
                table: "ProductSize",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_ComId_PurchaseCode",
                table: "Purchase",
                columns: new[] { "ComId", "PurchaseCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_CurrencyId",
                table: "Purchase",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_CustomerId",
                table: "Purchase",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_DocStatusId",
                table: "Purchase",
                column: "DocStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_DocTypeId",
                table: "Purchase",
                column: "DocTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_LuserId",
                table: "Purchase",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_LuserIdApprove",
                table: "Purchase",
                column: "LuserIdApprove");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_LuserIdCheck",
                table: "Purchase",
                column: "LuserIdCheck");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_LuserIdVerify",
                table: "Purchase",
                column: "LuserIdVerify");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_MasterPOId",
                table: "Purchase",
                column: "MasterPOId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_PaymentTermsId",
                table: "Purchase",
                column: "PaymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_StatusId",
                table: "Purchase",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_SupplierId",
                table: "Purchase",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_Purchase_WarehouseIdMain",
                table: "Purchase",
                column: "WarehouseIdMain");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseBatchItems_ComId",
                table: "PurchaseBatchItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseBatchItems_LuserId",
                table: "PurchaseBatchItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseBatchItems_ProductId",
                table: "PurchaseBatchItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseBatchItems_PurchaseItemId",
                table: "PurchaseBatchItems",
                column: "PurchaseItemId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseBatchItems_SupplierId",
                table: "PurchaseBatchItems",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_BuyerPOId",
                table: "PurchaseItems",
                column: "BuyerPOId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_ColorId",
                table: "PurchaseItems",
                column: "ColorId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_ComId",
                table: "PurchaseItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_CustomerId",
                table: "PurchaseItems",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_LuserId",
                table: "PurchaseItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_MasterTaxId",
                table: "PurchaseItems",
                column: "MasterTaxId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_ProductId",
                table: "PurchaseItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_PurchaseId",
                table: "PurchaseItems",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_PurchaseItemsId",
                table: "PurchaseItems",
                column: "PurchaseItemsId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_SizeId",
                table: "PurchaseItems",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_StyleId",
                table: "PurchaseItems",
                column: "StyleId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItems_WarehouseId",
                table: "PurchaseItems",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItemsCategory_AccId",
                table: "PurchaseItemsCategory",
                column: "AccId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItemsCategory_ComId",
                table: "PurchaseItemsCategory",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItemsCategory_CustomerId",
                table: "PurchaseItemsCategory",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItemsCategory_LuserId",
                table: "PurchaseItemsCategory",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItemsCategory_MasterTaxId",
                table: "PurchaseItemsCategory",
                column: "MasterTaxId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItemsCategory_PurchaseId",
                table: "PurchaseItemsCategory",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseItemsCategory_PurchaseItemsCategoryId",
                table: "PurchaseItemsCategory",
                column: "PurchaseItemsCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchasePayment_AccountHeadId",
                table: "PurchasePayment",
                column: "AccountHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchasePayment_ComId",
                table: "PurchasePayment",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchasePayment_LuserId",
                table: "PurchasePayment",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchasePayment_PurchaseId",
                table: "PurchasePayment",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchasePayment_TransactionId",
                table: "PurchasePayment",
                column: "TransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchasePayment_VoucherId",
                table: "PurchasePayment",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseProductTax_ComId",
                table: "PurchaseProductTax",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseProductTax_LuserId",
                table: "PurchaseProductTax",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseProductTax_PurchaseId",
                table: "PurchaseProductTax",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseProductTax_TaxId",
                table: "PurchaseProductTax",
                column: "TaxId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturn_ComId_PurchaseReturnCode",
                table: "PurchaseReturn",
                columns: new[] { "ComId", "PurchaseReturnCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturn_InternetUserId",
                table: "PurchaseReturn",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturn_LuserId",
                table: "PurchaseReturn",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturn_PurchaseId",
                table: "PurchaseReturn",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturn_SupplierId",
                table: "PurchaseReturn",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturn_WarehouseIdMain",
                table: "PurchaseReturn",
                column: "WarehouseIdMain");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnBatchItems_ComId",
                table: "PurchaseReturnBatchItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnBatchItems_LuserId",
                table: "PurchaseReturnBatchItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnBatchItems_ProductId",
                table: "PurchaseReturnBatchItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnBatchItems_PurchaseBatchId",
                table: "PurchaseReturnBatchItems",
                column: "PurchaseBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnBatchItems_PurchaseReturnItemId",
                table: "PurchaseReturnBatchItems",
                column: "PurchaseReturnItemId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnItems_ComId",
                table: "PurchaseReturnItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnItems_LuserId",
                table: "PurchaseReturnItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnItems_ProductId",
                table: "PurchaseReturnItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnItems_PurchaseReturnId",
                table: "PurchaseReturnItems",
                column: "PurchaseReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnItems_WarehouseId",
                table: "PurchaseReturnItems",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnPayment_AccountHeadId",
                table: "PurchaseReturnPayment",
                column: "AccountHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnPayment_ComId",
                table: "PurchaseReturnPayment",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnPayment_LuserId",
                table: "PurchaseReturnPayment",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnPayment_PurchaseReturnId",
                table: "PurchaseReturnPayment",
                column: "PurchaseReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnPayment_TransactionId",
                table: "PurchaseReturnPayment",
                column: "TransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnPayment_VoucherId",
                table: "PurchaseReturnPayment",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_purchaseTag_ComId",
                table: "purchaseTag",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_purchaseTag_LuserId",
                table: "purchaseTag",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_purchaseTag_PurchaseId",
                table: "purchaseTag",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_purchaseTag_TagsId",
                table: "purchaseTag",
                column: "TagsId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseTerms_ComId",
                table: "PurchaseTerms",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseTerms_LuserId",
                table: "PurchaseTerms",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseTerms_PurchaseId",
                table: "PurchaseTerms",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_RecurringDetails_ComId",
                table: "RecurringDetails",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_RecurringDetails_LuserId",
                table: "RecurringDetails",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_RecurringDetails_PurchaseId",
                table: "RecurringDetails",
                column: "PurchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_RecurringDetails_SalesId",
                table: "RecurringDetails",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_RecurringDetails_TransactionId",
                table: "RecurringDetails",
                column: "TransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_Reports_GroupId",
                table: "Reports",
                column: "GroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ReportUserTracking_ComId",
                table: "ReportUserTracking",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ReportUserTracking_LuserId",
                table: "ReportUserTracking",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ReportUserTracking_ReportId",
                table: "ReportUserTracking",
                column: "ReportId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_ComId_SaleCode",
                table: "Sales",
                columns: new[] { "ComId", "SaleCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Sales_CurrencyId",
                table: "Sales",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_CustomerId",
                table: "Sales",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_DocStatusId",
                table: "Sales",
                column: "DocStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_DocTypeId",
                table: "Sales",
                column: "DocTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_InternetUserId",
                table: "Sales",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_LuserId",
                table: "Sales",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_OrderId",
                table: "Sales",
                column: "OrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_salesRecievedtTermsId",
                table: "Sales",
                column: "salesRecievedtTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_SalesRepId",
                table: "Sales",
                column: "SalesRepId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_StatusId",
                table: "Sales",
                column: "StatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Sales_WarehouseIdMain",
                table: "Sales",
                column: "WarehouseIdMain");

            migrationBuilder.CreateIndex(
                name: "IX_SalesBatchItems_ComId",
                table: "SalesBatchItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesBatchItems_LuserId",
                table: "SalesBatchItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesBatchItems_ProductId",
                table: "SalesBatchItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesBatchItems_PurchaseBatchId",
                table: "SalesBatchItems",
                column: "PurchaseBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesBatchItems_SalesItemId",
                table: "SalesBatchItems",
                column: "SalesItemId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeBatchItems_ComId",
                table: "SalesExchangeBatchItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeBatchItems_LuserId",
                table: "SalesExchangeBatchItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeBatchItems_ProductId",
                table: "SalesExchangeBatchItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeBatchItems_PurchaseBatchId",
                table: "SalesExchangeBatchItems",
                column: "PurchaseBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeBatchItems_SalesExchangeItemId",
                table: "SalesExchangeBatchItems",
                column: "SalesExchangeItemId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeItems_ComId",
                table: "SalesExchangeItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeItems_LuserId",
                table: "SalesExchangeItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeItems_ProductId",
                table: "SalesExchangeItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeItems_PurchaseItemsId",
                table: "SalesExchangeItems",
                column: "PurchaseItemsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeItems_SalesReturnId",
                table: "SalesExchangeItems",
                column: "SalesReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesExchangeItems_WarehouseId",
                table: "SalesExchangeItems",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesItems_ComId",
                table: "SalesItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesItems_LuserId",
                table: "SalesItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesItems_ProductId",
                table: "SalesItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesItems_PurchaseItemsId",
                table: "SalesItems",
                column: "PurchaseItemsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesItems_SalesId",
                table: "SalesItems",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesItems_SalesItemsId",
                table: "SalesItems",
                column: "SalesItemsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesItems_TokenItemsId",
                table: "SalesItems",
                column: "TokenItemsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesItems_WarehouseId",
                table: "SalesItems",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesPayment_AccountHeadId",
                table: "SalesPayment",
                column: "AccountHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesPayment_ComId",
                table: "SalesPayment",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesPayment_LuserId",
                table: "SalesPayment",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesPayment_PaymentTypeModelId",
                table: "SalesPayment",
                column: "PaymentTypeModelId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesPayment_SalesId",
                table: "SalesPayment",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesPayment_TransactionId",
                table: "SalesPayment",
                column: "TransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesPayment_VoucherId",
                table: "SalesPayment",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesProductTax_ComId",
                table: "SalesProductTax",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesProductTax_LuserId",
                table: "SalesProductTax",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesProductTax_SalesId",
                table: "SalesProductTax",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesProductTax_TaxId",
                table: "SalesProductTax",
                column: "TaxId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturn_ComId_SalesReturnCode",
                table: "SalesReturn",
                columns: new[] { "ComId", "SalesReturnCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturn_CustomerId",
                table: "SalesReturn",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturn_InternetUserId",
                table: "SalesReturn",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturn_LuserId",
                table: "SalesReturn",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturn_SaleId",
                table: "SalesReturn",
                column: "SaleId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturn_SalesRepId",
                table: "SalesReturn",
                column: "SalesRepId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturn_WarehouseIdMain",
                table: "SalesReturn",
                column: "WarehouseIdMain");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnBatchItems_ComId",
                table: "SalesReturnBatchItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnBatchItems_LuserId",
                table: "SalesReturnBatchItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnBatchItems_ProductId",
                table: "SalesReturnBatchItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnBatchItems_PurchaseBatchId",
                table: "SalesReturnBatchItems",
                column: "PurchaseBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnBatchItems_SalesReturnItemId",
                table: "SalesReturnBatchItems",
                column: "SalesReturnItemId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnItems_ComId",
                table: "SalesReturnItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnItems_LuserId",
                table: "SalesReturnItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnItems_ProductId",
                table: "SalesReturnItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnItems_SalesReturnId",
                table: "SalesReturnItems",
                column: "SalesReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnItems_WarehouseId",
                table: "SalesReturnItems",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnPayment_AccountHeadId",
                table: "SalesReturnPayment",
                column: "AccountHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnPayment_ComId",
                table: "SalesReturnPayment",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnPayment_LuserId",
                table: "SalesReturnPayment",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnPayment_SalesReturnId",
                table: "SalesReturnPayment",
                column: "SalesReturnId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnPayment_TransactionId",
                table: "SalesReturnPayment",
                column: "TransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnPayment_VoucherId",
                table: "SalesReturnPayment",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_salesTag_ComId",
                table: "salesTag",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_salesTag_LuserId",
                table: "salesTag",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_salesTag_SalesId",
                table: "salesTag",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_salesTag_TagsId",
                table: "salesTag",
                column: "TagsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTax_AccIdPurchaseTaxes",
                table: "SalesTax",
                column: "AccIdPurchaseTaxes");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTax_AccIdSalesTaxes",
                table: "SalesTax",
                column: "AccIdSalesTaxes");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTax_AgentId",
                table: "SalesTax",
                column: "AgentId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTax_ComId",
                table: "SalesTax",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTax_LuserId",
                table: "SalesTax",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTax_SalesTaxMasterId",
                table: "SalesTax",
                column: "SalesTaxMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTerms_ComId",
                table: "SalesTerms",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTerms_LuserId",
                table: "SalesTerms",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTerms_SalesId",
                table: "SalesTerms",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_ShipMode_ComId",
                table: "ShipMode",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ShipMode_LuserId",
                table: "ShipMode",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ShippingCharge_ComId",
                table: "ShippingCharge",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ShippingCharge_LuserId",
                table: "ShippingCharge",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Shop_ComId",
                table: "Shop",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Shop_LuserId",
                table: "Shop",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Shop_MarketId",
                table: "Shop",
                column: "MarketId");

            migrationBuilder.CreateIndex(
                name: "IX_ShortLink_ComId",
                table: "ShortLink",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ShortLink_LuserId",
                table: "ShortLink",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ShortLinkHit_ShortLinkId",
                table: "ShortLinkHit",
                column: "ShortLinkId");

            migrationBuilder.CreateIndex(
                name: "IX_Size_ComId",
                table: "Size",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SizeChild_ComId",
                table: "SizeChild",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SizeChild_LuserId",
                table: "SizeChild",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SizeChild_SizeId",
                table: "SizeChild",
                column: "SizeId");

            migrationBuilder.CreateIndex(
                name: "IX_SizeChild_StyleId",
                table: "SizeChild",
                column: "StyleId");

            migrationBuilder.CreateIndex(
                name: "IX_Sizes_ComId",
                table: "Sizes",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Sizes_LuserId",
                table: "Sizes",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SmsSetting_ComId",
                table: "SmsSetting",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SmsSetting_LuserId",
                table: "SmsSetting",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SoftwarePackage_BusinessTypeId",
                table: "SoftwarePackage",
                column: "BusinessTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SoftwarePackage_CurrencyId",
                table: "SoftwarePackage",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_SoftwarePackage_DurationId",
                table: "SoftwarePackage",
                column: "DurationId");

            migrationBuilder.CreateIndex(
                name: "IX_Status_DocTypeId",
                table: "Status",
                column: "DocTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_AccountingMethodId",
                table: "StoreSetting",
                column: "AccountingMethodId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_BarcodeReportStyleId",
                table: "StoreSetting",
                column: "BarcodeReportStyleId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_BusinessTypeId",
                table: "StoreSetting",
                column: "BusinessTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_ComId",
                table: "StoreSetting",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_CountryId",
                table: "StoreSetting",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_CurrencyId",
                table: "StoreSetting",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_DateFormatId",
                table: "StoreSetting",
                column: "DateFormatId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_DocTypeId",
                table: "StoreSetting",
                column: "DocTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_FinancialYearId",
                table: "StoreSetting",
                column: "FinancialYearId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_LanguageId",
                table: "StoreSetting",
                column: "LanguageId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_LuserId",
                table: "StoreSetting",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_NumberFormatId",
                table: "StoreSetting",
                column: "NumberFormatId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_PurchaseReportStyleId",
                table: "StoreSetting",
                column: "PurchaseReportStyleId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_SalesReportStyleId",
                table: "StoreSetting",
                column: "SalesReportStyleId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_SignOutDurationId",
                table: "StoreSetting",
                column: "SignOutDurationId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_SoftwarePackageId",
                table: "StoreSetting",
                column: "SoftwarePackageId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_SubscriptionTypeId",
                table: "StoreSetting",
                column: "SubscriptionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_TaxFormId",
                table: "StoreSetting",
                column: "TaxFormId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_TaxRateId",
                table: "StoreSetting",
                column: "TaxRateId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_TermsId",
                table: "StoreSetting",
                column: "TermsId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_TimeZoneSettingsId",
                table: "StoreSetting",
                column: "TimeZoneSettingsId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreSetting_VoucherNoCreatedTypeId",
                table: "StoreSetting",
                column: "VoucherNoCreatedTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Style_BuyerId",
                table: "Style",
                column: "BuyerId");

            migrationBuilder.CreateIndex(
                name: "IX_Style_ComId",
                table: "Style",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Style_LuserId",
                table: "Style",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SubscriptionActivation_ComId",
                table: "SubscriptionActivation",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SubscriptionActivation_LuserId",
                table: "SubscriptionActivation",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_SubscriptionActivation_SubscriptionTypeId",
                table: "SubscriptionActivation",
                column: "SubscriptionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SubscriptionActivationCompany_ComId",
                table: "SubscriptionActivationCompany",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_SubscriptionActivationCompany_SubscriptionTypeId",
                table: "SubscriptionActivationCompany",
                column: "SubscriptionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SubscriptionType_BusinessTypeId",
                table: "SubscriptionType",
                column: "BusinessTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Supplier_AccIdExpenseCategory",
                table: "Supplier",
                column: "AccIdExpenseCategory");

            migrationBuilder.CreateIndex(
                name: "IX_Supplier_ComId",
                table: "Supplier",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Supplier_LuserId",
                table: "Supplier",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Supplier_PaymentTermsId",
                table: "Supplier",
                column: "PaymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_Supplier_SupParentId",
                table: "Supplier",
                column: "SupParentId");

            migrationBuilder.CreateIndex(
                name: "IX_Supplier_SupplierCurrencyId",
                table: "Supplier",
                column: "SupplierCurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_ComId",
                table: "Tags",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_LuserId",
                table: "Tags",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_ParentId",
                table: "Tags",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskToDo_ComId",
                table: "TaskToDo",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskToDo_LuserId",
                table: "TaskToDo",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskToDo_TaskToDoParentId",
                table: "TaskToDo",
                column: "TaskToDoParentId");

            migrationBuilder.CreateIndex(
                name: "IX_TermsMain_ComId",
                table: "TermsMain",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_TermsMain_LuserId",
                table: "TermsMain",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TermsSub_ComId",
                table: "TermsSub",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_TermsSub_LuserId",
                table: "TermsSub",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TermsSub_TermsId",
                table: "TermsSub",
                column: "TermsId");

            migrationBuilder.CreateIndex(
                name: "IX_TestRouterOnuTracking_ComId",
                table: "TestRouterOnuTracking",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_TestRouterOnuTracking_InternetUserId",
                table: "TestRouterOnuTracking",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_TestRouterOnuTracking_LuserId",
                table: "TestRouterOnuTracking",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TestRouterOnuTracking_ProductId",
                table: "TestRouterOnuTracking",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_ToDo_ComId",
                table: "ToDo",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ToDo_InternetUserId",
                table: "ToDo",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ToDo_LuserId",
                table: "ToDo",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_BlackProductId",
                table: "TokenSales",
                column: "BlackProductId");

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_ComId_TokenCode",
                table: "TokenSales",
                columns: new[] { "ComId", "TokenCode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_CustomerId",
                table: "TokenSales",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_DocTypeId",
                table: "TokenSales",
                column: "DocTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_LuserId",
                table: "TokenSales",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_OtherOneProductId",
                table: "TokenSales",
                column: "OtherOneProductId");

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_OtherTwoProductId",
                table: "TokenSales",
                column: "OtherTwoProductId");

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_WarehouseIdMain",
                table: "TokenSales",
                column: "WarehouseIdMain");

            migrationBuilder.CreateIndex(
                name: "IX_TokenSales_WhiteProductId",
                table: "TokenSales",
                column: "WhiteProductId");

            migrationBuilder.CreateIndex(
                name: "IX_ToWarehousePermission_ComId",
                table: "ToWarehousePermission",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_ToWarehousePermission_LuserId",
                table: "ToWarehousePermission",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_ToWarehousePermission_WarehouseId",
                table: "ToWarehousePermission",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_TradeTerms_ComId",
                table: "TradeTerms",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_TradeTerms_LuserId",
                table: "TradeTerms",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TransactionTags_ComId",
                table: "TransactionTags",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_TransactionTags_LuserId",
                table: "TransactionTags",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TransactionTags_TransactionId",
                table: "TransactionTags",
                column: "TransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicket_ComId_TicketNo",
                table: "TroubleTicket",
                columns: new[] { "ComId", "TicketNo" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicket_DiagnosisReportId",
                table: "TroubleTicket",
                column: "DiagnosisReportId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicket_DiagonosisByLUserId",
                table: "TroubleTicket",
                column: "DiagonosisByLUserId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicket_InternetComplainId",
                table: "TroubleTicket",
                column: "InternetComplainId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicket_InternetUserId",
                table: "TroubleTicket",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicket_LuserId",
                table: "TroubleTicket",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicket_SupportByLUserId",
                table: "TroubleTicket",
                column: "SupportByLUserId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicketComment_ComId",
                table: "TroubleTicketComment",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicketComment_CommentToLuserId",
                table: "TroubleTicketComment",
                column: "CommentToLuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicketComment_LuserId",
                table: "TroubleTicketComment",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_TroubleTicketComment_TroubleTicketId",
                table: "TroubleTicketComment",
                column: "TroubleTicketId");

            migrationBuilder.CreateIndex(
                name: "IX_TruckInfo_ComId",
                table: "TruckInfo",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_TruckInfo_LuserId",
                table: "TruckInfo",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Unit_ComId",
                table: "Unit",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Unit_LuserId",
                table: "Unit",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_UnitGroup_ComId",
                table: "UnitGroup",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_UnitGroup_LuserId",
                table: "UnitGroup",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_UnitMaster_ComId",
                table: "UnitMaster",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_UnitMaster_LuserId",
                table: "UnitMaster",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_UnitMaster_UnitGroupId",
                table: "UnitMaster",
                column: "UnitGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAccount_ComId",
                table: "UserAccount",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAccount_Email",
                table: "UserAccount",
                column: "Email",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UserAccount_EmployeeId",
                table: "UserAccount",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAccount_LuserId",
                table: "UserAccount",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAccount_UserRoleId",
                table: "UserAccount",
                column: "UserRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_UserLogingInfo_ComId",
                table: "UserLogingInfo",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_UserLogingInfo_LuserId",
                table: "UserLogingInfo",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserRole_BusinessTypeId",
                table: "UserRole",
                column: "BusinessTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_UserTerminate_ComId",
                table: "UserTerminate",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_UserTerminate_InternetUserId",
                table: "UserTerminate",
                column: "InternetUserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserTerminate_LuserId",
                table: "UserTerminate",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserTransactionLog_ComId",
                table: "UserTransactionLog",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_UserTransactionLog_LuserId",
                table: "UserTransactionLog",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_VGM_ComId",
                table: "VGM",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_VGM_LuserId",
                table: "VGM",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Voter_ComId",
                table: "Voter",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Voter_LuserId",
                table: "Voter",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Wallet_ComId",
                table: "Wallet",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Wallet_CreditBalanceId",
                table: "Wallet",
                column: "CreditBalanceId");

            migrationBuilder.CreateIndex(
                name: "IX_Wallet_LuserId",
                table: "Wallet",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Warehouse_ComId",
                table: "Warehouse",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_Warehouse_LuserId",
                table: "Warehouse",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Warehouse_ParentId",
                table: "Warehouse",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_Warrenty_DurationTimeId",
                table: "Warrenty",
                column: "DurationTimeId");

            migrationBuilder.CreateIndex(
                name: "IX_WarrentyItems_ComId",
                table: "WarrentyItems",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_WarrentyItems_LuserId",
                table: "WarrentyItems",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_WarrentyItems_ProductId",
                table: "WarrentyItems",
                column: "ProductId");

            migrationBuilder.CreateIndex(
                name: "IX_WarrentyItems_PurchaseBatchId",
                table: "WarrentyItems",
                column: "PurchaseBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_WarrentyItems_SalesId",
                table: "WarrentyItems",
                column: "SalesId");

            migrationBuilder.CreateIndex(
                name: "IX_WarrentyItems_SupplierId",
                table: "WarrentyItems",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOCOM_MachineryLCMasterrderMaster_ComId",
                table: "WorkOCOM_MachineryLCMasterrderMaster",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOCOM_MachineryLCMasterrderMaster_LuserId",
                table: "WorkOCOM_MachineryLCMasterrderMaster",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOCOM_MachineryLCMasterrderMaster_PaymentTermsId",
                table: "WorkOCOM_MachineryLCMasterrderMaster",
                column: "PaymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOCOM_MachineryLCMasterrderMaster_SupplierId",
                table: "WorkOCOM_MachineryLCMasterrderMaster",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_ApprovedById",
                table: "WorkOrderMaster",
                column: "ApprovedById");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_ComId",
                table: "WorkOrderMaster",
                column: "ComId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_CommercialCompanyId",
                table: "WorkOrderMaster",
                column: "CommercialCompanyId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_CurrencyId",
                table: "WorkOrderMaster",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_ItemDescId",
                table: "WorkOrderMaster",
                column: "ItemDescId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_ItemGroupId",
                table: "WorkOrderMaster",
                column: "ItemGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_LuserId",
                table: "WorkOrderMaster",
                column: "LuserId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_RecommenedById",
                table: "WorkOrderMaster",
                column: "RecommenedById");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_SupplierId",
                table: "WorkOrderMaster",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkOrderMaster_WorkOrderStatusId",
                table: "WorkOrderMaster",
                column: "WorkOrderStatusId");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_BudgetMain_Acc_FiscalYear_FiscalYearId",
                table: "Acc_BudgetMain",
                column: "FiscalYearId",
                principalTable: "Acc_FiscalYear",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_BudgetMain_Acc_FiscalYear_PreFillId",
                table: "Acc_BudgetMain",
                column: "PreFillId",
                principalTable: "Acc_FiscalYear",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_BudgetMain_UserAccount_LuserId",
                table: "Acc_BudgetMain",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_BudgetSub_AccountHead_AccId",
                table: "Acc_BudgetSub",
                column: "AccId",
                principalTable: "AccountHead",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_BudgetSub_UserAccount_LuserId",
                table: "Acc_BudgetSub",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_FiscalHalfYear_UserAccount_LuserId",
                table: "Acc_FiscalHalfYear",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_FiscalMonth_UserAccount_LuserId",
                table: "Acc_FiscalMonth",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_FiscalQtr_UserAccount_LuserId",
                table: "Acc_FiscalQtr",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_FiscalYear_UserAccount_LuserId",
                table: "Acc_FiscalYear",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherMain_PrdUnit_PrdUnitId",
                table: "Acc_VoucherMain",
                column: "PrdUnitId",
                principalTable: "PrdUnit",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherMain_UserAccount_LuserId",
                table: "Acc_VoucherMain",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherMain_Warehouse_WarehouseId",
                table: "Acc_VoucherMain",
                column: "WarehouseId",
                principalTable: "Warehouse",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherNoPrefix_UserAccount_LuserId",
                table: "Acc_VoucherNoPrefix",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_AccountHead_AccId",
                table: "Acc_VoucherSub",
                column: "AccId",
                principalTable: "AccountHead",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_Customer_CustomerId",
                table: "Acc_VoucherSub",
                column: "CustomerId",
                principalTable: "Customer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_Damage_DamageId",
                table: "Acc_VoucherSub",
                column: "DamageId",
                principalTable: "Damage",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_Employee_EmpId",
                table: "Acc_VoucherSub",
                column: "EmpId",
                principalTable: "Employee",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_InternalTransfer_TransferInId",
                table: "Acc_VoucherSub",
                column: "TransferInId",
                principalTable: "InternalTransfer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_InternalTransfer_TransferOutId",
                table: "Acc_VoucherSub",
                column: "TransferOutId",
                principalTable: "InternalTransfer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_Issue_IssueId",
                table: "Acc_VoucherSub",
                column: "IssueId",
                principalTable: "Issue",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_Member_MemberId",
                table: "Acc_VoucherSub",
                column: "MemberId",
                principalTable: "Member",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_PurchaseReturn_PurchaseReturnId",
                table: "Acc_VoucherSub",
                column: "PurchaseReturnId",
                principalTable: "PurchaseReturn",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_Purchase_PurchaseId",
                table: "Acc_VoucherSub",
                column: "PurchaseId",
                principalTable: "Purchase",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_SalesReturn_SalesReturnId",
                table: "Acc_VoucherSub",
                column: "SalesReturnId",
                principalTable: "SalesReturn",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_Sales_SalesId",
                table: "Acc_VoucherSub",
                column: "SalesId",
                principalTable: "Sales",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_Supplier_SupplierId",
                table: "Acc_VoucherSub",
                column: "SupplierId",
                principalTable: "Supplier",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSub_UserAccount_LuserId",
                table: "Acc_VoucherSub",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSubCheckno_AccountHead_AccId",
                table: "Acc_VoucherSubCheckno",
                column: "AccId",
                principalTable: "AccountHead",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSubCheckno_UserAccount_LuserId",
                table: "Acc_VoucherSubCheckno",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSubSection_Cat_SubSection_SubSectionId",
                table: "Acc_VoucherSubSection",
                column: "SubSectionId",
                principalTable: "Cat_SubSection",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherSubSection_UserAccount_LuserId",
                table: "Acc_VoucherSubSection",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherTags_UserAccount_LuserId",
                table: "Acc_VoucherTags",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Acc_VoucherTranGroup_UserAccount_LuserId",
                table: "Acc_VoucherTranGroup",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_AccountHead_UserAccount_LuserId",
                table: "AccountHead",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_AccountHead_Warehouse_WarehouseId",
                table: "AccountHead",
                column: "WarehouseId",
                principalTable: "Warehouse",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountHeadPermission_UserAccount_LuserId",
                table: "AccountHeadPermission",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Category_CategoryItemId",
                table: "AccountsDailyTransaction",
                column: "CategoryItemId",
                principalTable: "Category",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Customer_CustomerId",
                table: "AccountsDailyTransaction",
                column: "CustomerId",
                principalTable: "Customer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Damage_DamageId",
                table: "AccountsDailyTransaction",
                column: "DamageId",
                principalTable: "Damage",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_EmployeeSalary_Master_SalarySheetId",
                table: "AccountsDailyTransaction",
                column: "SalarySheetId",
                principalTable: "EmployeeSalary_Master",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Employee_EmployeeId",
                table: "AccountsDailyTransaction",
                column: "EmployeeId",
                principalTable: "Employee",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_InternalTransfer_TransferInId",
                table: "AccountsDailyTransaction",
                column: "TransferInId",
                principalTable: "InternalTransfer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_InternalTransfer_TransferOutId",
                table: "AccountsDailyTransaction",
                column: "TransferOutId",
                principalTable: "InternalTransfer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_InternetUser_InternetUserId",
                table: "AccountsDailyTransaction",
                column: "InternetUserId",
                principalTable: "InternetUser",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Issue_IssueId",
                table: "AccountsDailyTransaction",
                column: "IssueId",
                principalTable: "Issue",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Member_MemberId",
                table: "AccountsDailyTransaction",
                column: "MemberId",
                principalTable: "Member",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Product_ProductItemId",
                table: "AccountsDailyTransaction",
                column: "ProductItemId",
                principalTable: "Product",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_PurchaseReturn_PurchaseReturnId",
                table: "AccountsDailyTransaction",
                column: "PurchaseReturnId",
                principalTable: "PurchaseReturn",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Purchase_PurchaseId",
                table: "AccountsDailyTransaction",
                column: "PurchaseId",
                principalTable: "Purchase",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_SalesReturn_SalesReturnId",
                table: "AccountsDailyTransaction",
                column: "SalesReturnId",
                principalTable: "SalesReturn",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Sales_SalesId",
                table: "AccountsDailyTransaction",
                column: "SalesId",
                principalTable: "Sales",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Supplier_SupplierId",
                table: "AccountsDailyTransaction",
                column: "SupplierId",
                principalTable: "Supplier",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_UserAccount_LuserId",
                table: "AccountsDailyTransaction",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransaction_Warehouse_WarehouseId",
                table: "AccountsDailyTransaction",
                column: "WarehouseId",
                principalTable: "Warehouse",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransactionDetails_Purchase_PurchaseId",
                table: "AccountsDailyTransactionDetails",
                column: "PurchaseId",
                principalTable: "Purchase",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransactionDetails_Sales_SalesId",
                table: "AccountsDailyTransactionDetails",
                column: "SalesId",
                principalTable: "Sales",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AccountsDailyTransactionDetails_UserAccount_LuserId",
                table: "AccountsDailyTransactionDetails",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_ActivationTicket_InternetPackage_PackageId",
                table: "ActivationTicket",
                column: "PackageId",
                principalTable: "InternetPackage",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_ActivationTicket_UserAccount_ActivatedbyLUserId",
                table: "ActivationTicket",
                column: "ActivatedbyLUserId",
                principalTable: "UserAccount",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_ActivationTicket_UserAccount_FusionTeamLUserId",
                table: "ActivationTicket",
                column: "FusionTeamLUserId",
                principalTable: "UserAccount",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_ActivationTicket_UserAccount_LuserId",
                table: "ActivationTicket",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_AdvanceTrasactionTracking_Purchase_PurchaseId",
                table: "AdvanceTrasactionTracking",
                column: "PurchaseId",
                principalTable: "Purchase",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AdvanceTrasactionTracking_Sales_SalesId",
                table: "AdvanceTrasactionTracking",
                column: "SalesId",
                principalTable: "Sales",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_AdvanceTrasactionTracking_UserAccount_LuserId",
                table: "AdvanceTrasactionTracking",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Agency_UserAccount_LuserId",
                table: "Agency",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_AndroidMenuPermission_Details_AndroidMenuPermission_Master_AndroidMenuPermissionId",
                table: "AndroidMenuPermission_Details",
                column: "AndroidMenuPermissionId",
                principalTable: "AndroidMenuPermission_Master",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_AndroidMenuPermission_Master_UserAccount_LUserIdPermission",
                table: "AndroidMenuPermission_Master",
                column: "LUserIdPermission",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BankAccountNo_Commercial_CommercialCompanyId",
                table: "BankAccountNo",
                column: "CommercialCompanyId",
                principalTable: "Commercial",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BankAccountNo_OpeningBank_OpeningBankId",
                table: "BankAccountNo",
                column: "OpeningBankId",
                principalTable: "OpeningBank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BankAccountNo_UserAccount_LuserId",
                table: "BankAccountNo",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BarcodePrintInfo_UserAccount_LuserId",
                table: "BarcodePrintInfo",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BBLC_Details_BBLCMaster_BBLCMainId",
                table: "BBLC_Details",
                column: "BBLCMainId",
                principalTable: "BBLCMaster",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLC_Details_COM_ProformaInvoices_PIId",
                table: "BBLC_Details",
                column: "PIId",
                principalTable: "COM_ProformaInvoices",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLC_Details_UserAccount_LuserId",
                table: "BBLC_Details",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_Commercial_CommercialCompanyId",
                table: "BBLCMaster",
                column: "CommercialCompanyId",
                principalTable: "Commercial",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_DayListTerm_DayListTermId",
                table: "BBLCMaster",
                column: "DayListTermId",
                principalTable: "DayListTerm",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_Destination_DestinationID",
                table: "BBLCMaster",
                column: "DestinationID",
                principalTable: "Destination",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_GroupLC_Main_GroupLCId",
                table: "BBLCMaster",
                column: "GroupLCId",
                principalTable: "GroupLC_Main",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_ItemGroup_ItemGroupId",
                table: "BBLCMaster",
                column: "ItemGroupId",
                principalTable: "ItemGroup",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_LienBank_LienBankId",
                table: "BBLCMaster",
                column: "LienBankId",
                principalTable: "LienBank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_MasterLC_COM_MasterLCId",
                table: "BBLCMaster",
                column: "COM_MasterLCId",
                principalTable: "MasterLC",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_OpeningBank_OpeningBankId",
                table: "BBLCMaster",
                column: "OpeningBankId",
                principalTable: "OpeningBank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_PortOfDischarge_PortOfDischargeId",
                table: "BBLCMaster",
                column: "PortOfDischargeId",
                principalTable: "PortOfDischarge",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_PortOfLoading_PortOfLoadingId",
                table: "BBLCMaster",
                column: "PortOfLoadingId",
                principalTable: "PortOfLoading",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_ShipMode_ShipModeId",
                table: "BBLCMaster",
                column: "ShipModeId",
                principalTable: "ShipMode",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_Supplier_SupplierId",
                table: "BBLCMaster",
                column: "SupplierId",
                principalTable: "Supplier",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_TruckInfo_TruckInfoId",
                table: "BBLCMaster",
                column: "TruckInfoId",
                principalTable: "TruckInfo",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BBLCMaster_UserAccount_LuserId",
                table: "BBLCMaster",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BOMAllocationCategory_UserAccount_LuserId",
                table: "BOMAllocationCategory",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BOMDetails_BOMMaster_BOMMasterId",
                table: "BOMDetails",
                column: "BOMMasterId",
                principalTable: "BOMMaster",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BOMDetails_Colors_ColorId",
                table: "BOMDetails",
                column: "ColorId",
                principalTable: "Colors",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BOMDetails_Product_ProductId",
                table: "BOMDetails",
                column: "ProductId",
                principalTable: "Product",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BOMDetails_Sizes_SizeId",
                table: "BOMDetails",
                column: "SizeId",
                principalTable: "Sizes",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BOMDetails_UserAccount_LuserId",
                table: "BOMDetails",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BOMMaster_Colors_ColorId",
                table: "BOMMaster",
                column: "ColorId",
                principalTable: "Colors",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BOMMaster_Sizes_SizeId",
                table: "BOMMaster",
                column: "SizeId",
                principalTable: "Sizes",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BOMMaster_Style_StyleId",
                table: "BOMMaster",
                column: "StyleId",
                principalTable: "Style",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BOMMaster_UserAccount_LuserId",
                table: "BOMMaster",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Brand_UserAccount_LuserId",
                table: "Brand",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerGroup_UserAccount_LuserId",
                table: "BuyerGroup",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Consumption_BuyerPO_Master_BuyerPOId",
                table: "BuyerPO_Consumption",
                column: "BuyerPOId",
                principalTable: "BuyerPO_Master",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Consumption_Colors_ColorId",
                table: "BuyerPO_Consumption",
                column: "ColorId",
                principalTable: "Colors",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Consumption_Product_ProductId",
                table: "BuyerPO_Consumption",
                column: "ProductId",
                principalTable: "Product",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Consumption_Sizes_SizeId",
                table: "BuyerPO_Consumption",
                column: "SizeId",
                principalTable: "Sizes",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Consumption_UserAccount_LuserId",
                table: "BuyerPO_Consumption",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Details_BuyerPO_Master_BuyerPOId",
                table: "BuyerPO_Details",
                column: "BuyerPOId",
                principalTable: "BuyerPO_Master",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Details_Colors_ColorId",
                table: "BuyerPO_Details",
                column: "ColorId",
                principalTable: "Colors",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Details_Sizes_SizeId",
                table: "BuyerPO_Details",
                column: "SizeId",
                principalTable: "Sizes",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Details_UserAccount_LuserId",
                table: "BuyerPO_Details",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Master_Customer_BuyerId",
                table: "BuyerPO_Master",
                column: "BuyerId",
                principalTable: "Customer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Master_Style_StyleId",
                table: "BuyerPO_Master",
                column: "StyleId",
                principalTable: "Style",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_BuyerPO_Master_UserAccount_LuserId",
                table: "BuyerPO_Master",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Bank_UserAccount_LuserId",
                table: "Cat_Bank",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_BankBranch_UserAccount_LuserId",
                table: "Cat_BankBranch",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_BuildingType_UserAccount_LuserId",
                table: "Cat_BuildingType",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Department_UserAccount_LuserId",
                table: "Cat_Department",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Designation_Cat_Grade_GradeId",
                table: "Cat_Designation",
                column: "GradeId",
                principalTable: "Cat_Grade",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Designation_UserAccount_LuserId",
                table: "Cat_Designation",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_District_UserAccount_LuserId",
                table: "Cat_District",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Floor_UserAccount_LuserId",
                table: "Cat_Floor",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Grade_UserAccount_LuserId",
                table: "Cat_Grade",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Line_UserAccount_LuserId",
                table: "Cat_Line",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Location_UserAccount_LuserId",
                table: "Cat_Location",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Section_UserAccount_LuserId",
                table: "Cat_Section",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Shift_UserAccount_LuserId",
                table: "Cat_Shift",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Skill_UserAccount_LuserId",
                table: "Cat_Skill",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_SubSection_UserAccount_LuserId",
                table: "Cat_SubSection",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Cat_Unit_UserAccount_LuserId",
                table: "Cat_Unit",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Category_UserAccount_LuserId",
                table: "Category",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_ColorChild_Colors_ColorId",
                table: "ColorChild",
                column: "ColorId",
                principalTable: "Colors",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_ColorChild_Style_StyleId",
                table: "ColorChild",
                column: "StyleId",
                principalTable: "Style",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_ColorChild_UserAccount_LuserId",
                table: "ColorChild",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Colors_UserAccount_LuserId",
                table: "Colors",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_COM_MachinaryLC_Master_MachinaryLCId",
                table: "COM_CommercialInvoice",
                column: "MachinaryLCId",
                principalTable: "COM_MachinaryLC_Master",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_Commercial_CommercialCompanyID",
                table: "COM_CommercialInvoice",
                column: "CommercialCompanyID",
                principalTable: "Commercial",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_ItemDescription_ItemDescId",
                table: "COM_CommercialInvoice",
                column: "ItemDescId",
                principalTable: "ItemDescription",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_ItemGroup_ItemGroupId",
                table: "COM_CommercialInvoice",
                column: "ItemGroupId",
                principalTable: "ItemGroup",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_Supplier_SupplierID",
                table: "COM_CommercialInvoice",
                column: "SupplierID",
                principalTable: "Supplier",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_Unit_UnitMasterId",
                table: "COM_CommercialInvoice",
                column: "UnitMasterId",
                principalTable: "Unit",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_UserAccount_LuserId",
                table: "COM_CommercialInvoice",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_Sub_ItemDesc_ItemDescId",
                table: "COM_CommercialInvoice_Sub",
                column: "ItemDescId",
                principalTable: "ItemDesc",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_CommercialInvoice_Sub_UserAccount_LuserId",
                table: "COM_CommercialInvoice_Sub",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_DocumentAcceptance_Details_COM_DocumentAcceptance_Master_DocumentAcceptanceMasterId",
                table: "COM_DocumentAcceptance_Details",
                column: "DocumentAcceptanceMasterId",
                principalTable: "COM_DocumentAcceptance_Master",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_DocumentAcceptance_Details_UserAccount_LuserId",
                table: "COM_DocumentAcceptance_Details",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_DocumentAcceptance_Master_Commercial_CommercialCompanyId",
                table: "COM_DocumentAcceptance_Master",
                column: "CommercialCompanyId",
                principalTable: "Commercial",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_DocumentAcceptance_Master_Customer_BuyerId",
                table: "COM_DocumentAcceptance_Master",
                column: "BuyerId",
                principalTable: "Customer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_DocumentAcceptance_Master_GroupLC_Main_GroupLCId",
                table: "COM_DocumentAcceptance_Master",
                column: "GroupLCId",
                principalTable: "GroupLC_Main",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_DocumentAcceptance_Master_MasterLC_MasterLCId",
                table: "COM_DocumentAcceptance_Master",
                column: "MasterLCId",
                principalTable: "MasterLC",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_DocumentAcceptance_Master_Supplier_SupplierId",
                table: "COM_DocumentAcceptance_Master",
                column: "SupplierId",
                principalTable: "Supplier",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_DocumentAcceptance_Master_UserAccount_LuserId",
                table: "COM_DocumentAcceptance_Master",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Details_COM_MachinaryLC_Master_MachinaryLCMasterID",
                table: "COM_MachinaryLC_Details",
                column: "MachinaryLCMasterID",
                principalTable: "COM_MachinaryLC_Master",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Details_COM_ProformaInvoices_PIId",
                table: "COM_MachinaryLC_Details",
                column: "PIId",
                principalTable: "COM_ProformaInvoices",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Details_UserAccount_LuserId",
                table: "COM_MachinaryLC_Details",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_Commercial_CompanyId",
                table: "COM_MachinaryLC_Master",
                column: "CompanyId",
                principalTable: "Commercial",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_Destination_DestinationID",
                table: "COM_MachinaryLC_Master",
                column: "DestinationID",
                principalTable: "Destination",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_ItemGroup_ItemGroupsId",
                table: "COM_MachinaryLC_Master",
                column: "ItemGroupsId",
                principalTable: "ItemGroup",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_LienBank_LienBankId",
                table: "COM_MachinaryLC_Master",
                column: "LienBankId",
                principalTable: "LienBank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_OpeningBank_OpeningBankId",
                table: "COM_MachinaryLC_Master",
                column: "OpeningBankId",
                principalTable: "OpeningBank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_PortOfDischarge_PortOfDischargeId",
                table: "COM_MachinaryLC_Master",
                column: "PortOfDischargeId",
                principalTable: "PortOfDischarge",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_PortOfLoading_PortOfLoadingId",
                table: "COM_MachinaryLC_Master",
                column: "PortOfLoadingId",
                principalTable: "PortOfLoading",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_ShipMode_ShipModeId",
                table: "COM_MachinaryLC_Master",
                column: "ShipModeId",
                principalTable: "ShipMode",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_Supplier_SupplierId",
                table: "COM_MachinaryLC_Master",
                column: "SupplierId",
                principalTable: "Supplier",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachinaryLC_Master_UserAccount_LuserId",
                table: "COM_MachinaryLC_Master",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachineryLCDetails_UserAccount_LuserId",
                table: "COM_MachineryLCDetails",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachineryLCDetails_WorkOCOM_MachineryLCMasterrderMaster_MachineryLCId",
                table: "COM_MachineryLCDetails",
                column: "MachineryLCId",
                principalTable: "WorkOCOM_MachineryLCMasterrderMaster",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MachineryLCDetails_WorkOrderMaster_WorkOrderId",
                table: "COM_MachineryLCDetails",
                column: "WorkOrderId",
                principalTable: "WorkOrderMaster",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MasterLC_Details_MasterLC_MasterLCID",
                table: "COM_MasterLC_Details",
                column: "MasterLCID",
                principalTable: "MasterLC",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MasterLC_Details_UserAccount_LuserId",
                table: "COM_MasterLC_Details",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MasterLCExport_MasterLC_MasterLCModelId",
                table: "COM_MasterLCExport",
                column: "MasterLCModelId",
                principalTable: "MasterLC",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_MasterLCExport_UserAccount_LuserId",
                table: "COM_MasterLCExport",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoice_Sub_COM_ProformaInvoices_PIId",
                table: "COM_ProformaInvoice_Sub",
                column: "PIId",
                principalTable: "COM_ProformaInvoices",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoice_Sub_ItemDescription_ItemDescId",
                table: "COM_ProformaInvoice_Sub",
                column: "ItemDescId",
                principalTable: "ItemDescription",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoice_Sub_UserAccount_LuserId",
                table: "COM_ProformaInvoice_Sub",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_Commercial_CommercialCompanyId",
                table: "COM_ProformaInvoices",
                column: "CommercialCompanyId",
                principalTable: "Commercial",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_Employee_EmployeeId",
                table: "COM_ProformaInvoices",
                column: "EmployeeId",
                principalTable: "Employee",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_GroupLC_Main_GroupLCId",
                table: "COM_ProformaInvoices",
                column: "GroupLCId",
                principalTable: "GroupLC_Main",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_ItemDescription_ItemDescId",
                table: "COM_ProformaInvoices",
                column: "ItemDescId",
                principalTable: "ItemDescription",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_ItemGroup_ItemGroupId",
                table: "COM_ProformaInvoices",
                column: "ItemGroupId",
                principalTable: "ItemGroup",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_LienBank_LienBankId",
                table: "COM_ProformaInvoices",
                column: "LienBankId",
                principalTable: "LienBank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_OpeningBank_OpeningBankId",
                table: "COM_ProformaInvoices",
                column: "OpeningBankId",
                principalTable: "OpeningBank",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_PIType_PITypeId",
                table: "COM_ProformaInvoices",
                column: "PITypeId",
                principalTable: "PIType",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_PortOfLoading_PortOfLoadingCountryOfOriginId",
                table: "COM_ProformaInvoices",
                column: "PortOfLoadingCountryOfOriginId",
                principalTable: "PortOfLoading",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_PortOfLoading_PortOfLoadingDestinationId",
                table: "COM_ProformaInvoices",
                column: "PortOfLoadingDestinationId",
                principalTable: "PortOfLoading",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_PortOfLoading_PortOfLoadingId",
                table: "COM_ProformaInvoices",
                column: "PortOfLoadingId",
                principalTable: "PortOfLoading",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_Supplier_SupplierId",
                table: "COM_ProformaInvoices",
                column: "SupplierId",
                principalTable: "Supplier",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_Unit_UnitId",
                table: "COM_ProformaInvoices",
                column: "UnitId",
                principalTable: "Unit",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_COM_ProformaInvoices_UserAccount_LuserId",
                table: "COM_ProformaInvoices",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Commercial_UserAccount_LuserId",
                table: "Commercial",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_CompanyCurrencies_UserAccount_LuserId",
                table: "CompanyCurrencies",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_CompanyPermission_UserAccount_LuserId",
                table: "CompanyPermission",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_Damage_DamageId",
                table: "CostCalculated",
                column: "DamageId",
                principalTable: "Damage",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_InternalTransfer_InternalTransferId",
                table: "CostCalculated",
                column: "InternalTransferId",
                principalTable: "InternalTransfer",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_Issue_IssueId",
                table: "CostCalculated",
                column: "IssueId",
                principalTable: "Issue",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_Product_ProductId",
                table: "CostCalculated",
                column: "ProductId",
                principalTable: "Product",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_PurchaseReturn_PurchaseReturnId",
                table: "CostCalculated",
                column: "PurchaseReturnId",
                principalTable: "PurchaseReturn",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_Purchase_PurchaseId",
                table: "CostCalculated",
                column: "PurchaseId",
                principalTable: "Purchase",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_SalesReturn_SalesReturnId",
                table: "CostCalculated",
                column: "SalesReturnId",
                principalTable: "SalesReturn",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_Sales_SalesId",
                table: "CostCalculated",
                column: "SalesId",
                principalTable: "Sales",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_UserAccount_LuserId",
                table: "CostCalculated",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_CostCalculated_Warehouse_WarehouseId",
                table: "CostCalculated",
                column: "WarehouseId",
                principalTable: "Warehouse",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CreditBalance_UserAccount_LuserId",
                table: "CreditBalance",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_CreditUsed_UserAccount_LuserId",
                table: "CreditUsed",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Customer_Employee_SalesRepresentativeId",
                table: "Customer",
                column: "SalesRepresentativeId",
                principalTable: "Employee",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Customer_PaymentTerms_PaymentTermsId",
                table: "Customer",
                column: "PaymentTermsId",
                principalTable: "PaymentTerms",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Customer_TradeTerms_TradeTermsId",
                table: "Customer",
                column: "TradeTermsId",
                principalTable: "TradeTerms",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Customer_UserAccount_LuserId",
                table: "Customer",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_CustomFormStyle_UserAccount_LuserId",
                table: "CustomFormStyle",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DailyCurrencyRate_UserAccount_LuserId",
                table: "DailyCurrencyRate",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DailyProduction_Details_DailyProduction_Master_DailyProductionId",
                table: "DailyProduction_Details",
                column: "DailyProductionId",
                principalTable: "DailyProduction_Master",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DailyProduction_Details_Sizes_SizeId",
                table: "DailyProduction_Details",
                column: "SizeId",
                principalTable: "Sizes",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DailyProduction_Details_UserAccount_LuserId",
                table: "DailyProduction_Details",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DailyProduction_Master_Style_StyleId",
                table: "DailyProduction_Master",
                column: "StyleId",
                principalTable: "Style",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DailyProduction_Master_UserAccount_LuserId",
                table: "DailyProduction_Master",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Damage_InternetUser_InternetUserId",
                table: "Damage",
                column: "InternetUserId",
                principalTable: "InternetUser",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Damage_UserAccount_LuserId",
                table: "Damage",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Damage_Warehouse_WarehouseIdMain",
                table: "Damage",
                column: "WarehouseIdMain",
                principalTable: "Warehouse",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DamageBatchItems_DamageItems_DamageItemId",
                table: "DamageBatchItems",
                column: "DamageItemId",
                principalTable: "DamageItems",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DamageBatchItems_Product_ProductId",
                table: "DamageBatchItems",
                column: "ProductId",
                principalTable: "Product",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DamageBatchItems_PurchaseBatchItems_PurchaseBatchId",
                table: "DamageBatchItems",
                column: "PurchaseBatchId",
                principalTable: "PurchaseBatchItems",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DamageBatchItems_UserAccount_LuserId",
                table: "DamageBatchItems",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DamageItems_Product_ProductId",
                table: "DamageItems",
                column: "ProductId",
                principalTable: "Product",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DamageItems_UserAccount_LuserId",
                table: "DamageItems",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DamageItems_Warehouse_WarehouseId",
                table: "DamageItems",
                column: "WarehouseId",
                principalTable: "Warehouse",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DashBoardLayoutOrder_UserAccount_LuserId",
                table: "DashBoardLayoutOrder",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DayListTerm_UserAccount_LuserId",
                table: "DayListTerm",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryService_DeliveryServiceDistance_DistanceId",
                table: "DeliveryService",
                column: "DistanceId",
                principalTable: "DeliveryServiceDistance",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryService_DeliveryServiceTiming_DeliveryTimingId",
                table: "DeliveryService",
                column: "DeliveryTimingId",
                principalTable: "DeliveryServiceTiming",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryService_DeliveryServiceWeight_WeightId",
                table: "DeliveryService",
                column: "WeightId",
                principalTable: "DeliveryServiceWeight",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryService_UserAccount_LuserId",
                table: "DeliveryService",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryServiceComment_UserAccount_CommentToLuserId",
                table: "DeliveryServiceComment",
                column: "CommentToLuserId",
                principalTable: "UserAccount",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryServiceComment_UserAccount_LuserId",
                table: "DeliveryServiceComment",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryServiceDistance_UserAccount_LuserId",
                table: "DeliveryServiceDistance",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryServiceTiming_UserAccount_LuserId",
                table: "DeliveryServiceTiming",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DeliveryServiceWeight_UserAccount_LuserId",
                table: "DeliveryServiceWeight",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Destination_UserAccount_LuserId",
                table: "Destination",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DiagnosisReport_UserAccount_LuserId",
                table: "DiagnosisReport",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DiscountType_UserAccount_LuserId",
                table: "DiscountType",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DocApprovalSetting_UserAccount_LuserId",
                table: "DocApprovalSetting",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DocApprovalSetting_UserAccount_LuserIdApprove",
                table: "DocApprovalSetting",
                column: "LuserIdApprove",
                principalTable: "UserAccount",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DocApprovalSetting_UserAccount_LuserIdCheck",
                table: "DocApprovalSetting",
                column: "LuserIdCheck",
                principalTable: "UserAccount",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DocApprovalSetting_UserAccount_LuserIdEntry",
                table: "DocApprovalSetting",
                column: "LuserIdEntry",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DocApprovalSetting_UserAccount_LuserIdVerify",
                table: "DocApprovalSetting",
                column: "LuserIdVerify",
                principalTable: "UserAccount",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_DyDashBoard_UserAccount_LuserId",
                table: "DyDashBoard",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_DynamicReport_UserAccount_LuserId",
                table: "DynamicReport",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_EmailSettings_UserAccount_LuserId",
                table: "EmailSettings",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);

            migrationBuilder.AddForeignKey(
                name: "FK_Employee_UserAccount_LuserId",
                table: "Employee",
                column: "LuserId",
                principalTable: "UserAccount",
                principalColumn: "Id",
                onDelete: ReferentialAction.NoAction);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Department_Company_ComId",
                table: "Cat_Department");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Designation_Company_ComId",
                table: "Cat_Designation");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Floor_Company_ComId",
                table: "Cat_Floor");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Grade_Company_ComId",
                table: "Cat_Grade");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Line_Company_ComId",
                table: "Cat_Line");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Section_Company_ComId",
                table: "Cat_Section");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Shift_Company_ComId",
                table: "Cat_Shift");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Skill_Company_ComId",
                table: "Cat_Skill");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_SubSection_Company_ComId",
                table: "Cat_SubSection");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Unit_Company_ComId",
                table: "Cat_Unit");

            migrationBuilder.DropForeignKey(
                name: "FK_Employee_Company_ComId",
                table: "Employee");

            migrationBuilder.DropForeignKey(
                name: "FK_UserAccount_Company_ComId",
                table: "UserAccount");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Department_UserAccount_LuserId",
                table: "Cat_Department");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Designation_UserAccount_LuserId",
                table: "Cat_Designation");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Floor_UserAccount_LuserId",
                table: "Cat_Floor");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Grade_UserAccount_LuserId",
                table: "Cat_Grade");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Line_UserAccount_LuserId",
                table: "Cat_Line");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Section_UserAccount_LuserId",
                table: "Cat_Section");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Shift_UserAccount_LuserId",
                table: "Cat_Shift");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Skill_UserAccount_LuserId",
                table: "Cat_Skill");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_SubSection_UserAccount_LuserId",
                table: "Cat_SubSection");

            migrationBuilder.DropForeignKey(
                name: "FK_Cat_Unit_UserAccount_LuserId",
                table: "Cat_Unit");

            migrationBuilder.DropForeignKey(
                name: "FK_Employee_UserAccount_LuserId",
                table: "Employee");

            migrationBuilder.DropTable(
                name: "Acc_BudgetSub");

            migrationBuilder.DropTable(
                name: "Acc_FiscalHalfYear");

            migrationBuilder.DropTable(
                name: "Acc_FiscalQtr");

            migrationBuilder.DropTable(
                name: "Acc_VoucherNoPrefix");

            migrationBuilder.DropTable(
                name: "Acc_VoucherSubCheckno");

            migrationBuilder.DropTable(
                name: "Acc_VoucherSubSection");

            migrationBuilder.DropTable(
                name: "Acc_VoucherTags");

            migrationBuilder.DropTable(
                name: "Acc_VoucherTranGroup");

            migrationBuilder.DropTable(
                name: "AccountHead_System");

            migrationBuilder.DropTable(
                name: "AccountHeadPermission");

            migrationBuilder.DropTable(
                name: "AccountsDailyTransactionDetails");

            migrationBuilder.DropTable(
                name: "AccountsReport");

            migrationBuilder.DropTable(
                name: "ActivationTicket");

            migrationBuilder.DropTable(
                name: "AdvanceTrasactionTracking");

            migrationBuilder.DropTable(
                name: "AndroidMenuPermission");

            migrationBuilder.DropTable(
                name: "AndroidMenuPermission_Details");

            migrationBuilder.DropTable(
                name: "BarcodePrintInfo");

            migrationBuilder.DropTable(
                name: "BBLC_Details");

            migrationBuilder.DropTable(
                name: "BOMDetails");

            migrationBuilder.DropTable(
                name: "BuyerPO_Consumption");

            migrationBuilder.DropTable(
                name: "BuyerPO_Details");

            migrationBuilder.DropTable(
                name: "ColorChild");

            migrationBuilder.DropTable(
                name: "COM_CommercialInvoice_Sub");

            migrationBuilder.DropTable(
                name: "COM_DocumentAcceptance_Details");

            migrationBuilder.DropTable(
                name: "COM_MachinaryLC_Details");

            migrationBuilder.DropTable(
                name: "COM_MachineryLCDetails");

            migrationBuilder.DropTable(
                name: "COM_MasterLC_Details");

            migrationBuilder.DropTable(
                name: "COM_MasterLCExport");

            migrationBuilder.DropTable(
                name: "COM_ProformaInvoice_Sub");

            migrationBuilder.DropTable(
                name: "CompanyCurrencies");

            migrationBuilder.DropTable(
                name: "CompanyPermission");

            migrationBuilder.DropTable(
                name: "CostCalculated");

            migrationBuilder.DropTable(
                name: "CreditUsed");

            migrationBuilder.DropTable(
                name: "CustomFormStyle");

            migrationBuilder.DropTable(
                name: "CustomFormStyleVariable");

            migrationBuilder.DropTable(
                name: "DailyCurrencyRate");

            migrationBuilder.DropTable(
                name: "DailyProduction_Details");

            migrationBuilder.DropTable(
                name: "DamageBatchItems");

            migrationBuilder.DropTable(
                name: "DashBoardLayoutOrder");

            migrationBuilder.DropTable(
                name: "DeliveryServiceComment");

            migrationBuilder.DropTable(
                name: "DiscountType");

            migrationBuilder.DropTable(
                name: "DocApprovalSetting");

            migrationBuilder.DropTable(
                name: "DyDashBoard");

            migrationBuilder.DropTable(
                name: "EmailSettings");

            migrationBuilder.DropTable(
                name: "EmployeeAttendance");

            migrationBuilder.DropTable(
                name: "EmployeeSalary_Details");

            migrationBuilder.DropTable(
                name: "ExpireDateExtend");

            migrationBuilder.DropTable(
                name: "ExportInvoicePackingList");

            migrationBuilder.DropTable(
                name: "ExportOrder");

            migrationBuilder.DropTable(
                name: "ExportOrderCategory");

            migrationBuilder.DropTable(
                name: "ExportOrderStatus");

            migrationBuilder.DropTable(
                name: "ExportRealization_Details");

            migrationBuilder.DropTable(
                name: "Feedback");

            migrationBuilder.DropTable(
                name: "FiscalYearType");

            migrationBuilder.DropTable(
                name: "FromWarehousePermission");

            migrationBuilder.DropTable(
                name: "Gallery");

            migrationBuilder.DropTable(
                name: "GatePassItems");

            migrationBuilder.DropTable(
                name: "GroupLC_Sub");

            migrationBuilder.DropTable(
                name: "HR_AttFixed");

            migrationBuilder.DropTable(
                name: "HR_Emp_Address");

            migrationBuilder.DropTable(
                name: "HR_Emp_BankInfo");

            migrationBuilder.DropTable(
                name: "HR_Emp_Education");

            migrationBuilder.DropTable(
                name: "HR_Emp_Experience");

            migrationBuilder.DropTable(
                name: "HR_Emp_Family");

            migrationBuilder.DropTable(
                name: "HR_Emp_Image");

            migrationBuilder.DropTable(
                name: "HR_Emp_Increment");

            migrationBuilder.DropTable(
                name: "HR_Emp_Nominee");

            migrationBuilder.DropTable(
                name: "HR_Emp_PersonalInfo");

            migrationBuilder.DropTable(
                name: "HR_Emp_Released");

            migrationBuilder.DropTable(
                name: "HR_Emp_Salary");

            migrationBuilder.DropTable(
                name: "HR_Emp_ShiftInput");

            migrationBuilder.DropTable(
                name: "HR_Leave_Avail");

            migrationBuilder.DropTable(
                name: "HR_Leave_Balance");

            migrationBuilder.DropTable(
                name: "HR_OverTimeSetting");

            migrationBuilder.DropTable(
                name: "HR_ProcessedData");

            migrationBuilder.DropTable(
                name: "HR_ProcessLock");

            migrationBuilder.DropTable(
                name: "HR_ProssType");

            migrationBuilder.DropTable(
                name: "HR_ProssType_WHDay");

            migrationBuilder.DropTable(
                name: "Hr_RawData");

            migrationBuilder.DropTable(
                name: "HR_RawData_App");

            migrationBuilder.DropTable(
                name: "ImagesGallery");

            migrationBuilder.DropTable(
                name: "IntegrationSettingDetails");

            migrationBuilder.DropTable(
                name: "InternalTransferBatchItems");

            migrationBuilder.DropTable(
                name: "InvoiceBill");

            migrationBuilder.DropTable(
                name: "IssueBatchItems");

            migrationBuilder.DropTable(
                name: "LinkShare");

            migrationBuilder.DropTable(
                name: "MASTERPO_Consumption");

            migrationBuilder.DropTable(
                name: "MasterPO_Details");

            migrationBuilder.DropTable(
                name: "MenuPermission");

            migrationBuilder.DropTable(
                name: "MenuPermission_Details");

            migrationBuilder.DropTable(
                name: "MobileTextAnimation");

            migrationBuilder.DropTable(
                name: "MonthlySales");

            migrationBuilder.DropTable(
                name: "NotificationMassages");

            migrationBuilder.DropTable(
                name: "NotificationSeen");

            migrationBuilder.DropTable(
                name: "Offer");

            migrationBuilder.DropTable(
                name: "OrdersItems");

            migrationBuilder.DropTable(
                name: "OrdersPayment");

            migrationBuilder.DropTable(
                name: "PackageActivation");

            migrationBuilder.DropTable(
                name: "PaymentMethod");

            migrationBuilder.DropTable(
                name: "PayrollIntegration");

            migrationBuilder.DropTable(
                name: "ProcessLock");

            migrationBuilder.DropTable(
                name: "ProductColor");

            migrationBuilder.DropTable(
                name: "ProductImage");

            migrationBuilder.DropTable(
                name: "ProductLedger");

            migrationBuilder.DropTable(
                name: "ProductReviews");

            migrationBuilder.DropTable(
                name: "ProductSecoundaryUnit");

            migrationBuilder.DropTable(
                name: "ProductSize");

            migrationBuilder.DropTable(
                name: "PurchaseItemsCategory");

            migrationBuilder.DropTable(
                name: "PurchasePayment");

            migrationBuilder.DropTable(
                name: "PurchaseProductTax");

            migrationBuilder.DropTable(
                name: "PurchaseReturnBatchItems");

            migrationBuilder.DropTable(
                name: "PurchaseReturnPayment");

            migrationBuilder.DropTable(
                name: "purchaseTag");

            migrationBuilder.DropTable(
                name: "PurchaseTerms");

            migrationBuilder.DropTable(
                name: "RecurringDetails");

            migrationBuilder.DropTable(
                name: "ReportUserTracking");

            migrationBuilder.DropTable(
                name: "SalesBatchItems");

            migrationBuilder.DropTable(
                name: "SalesExchangeBatchItems");

            migrationBuilder.DropTable(
                name: "SalesPayment");

            migrationBuilder.DropTable(
                name: "SalesProductTax");

            migrationBuilder.DropTable(
                name: "SalesReturnBatchItems");

            migrationBuilder.DropTable(
                name: "SalesReturnPayment");

            migrationBuilder.DropTable(
                name: "salesTag");

            migrationBuilder.DropTable(
                name: "SalesTerms");

            migrationBuilder.DropTable(
                name: "ShippingCharge");

            migrationBuilder.DropTable(
                name: "ShortLinkHit");

            migrationBuilder.DropTable(
                name: "SizeChild");

            migrationBuilder.DropTable(
                name: "SmsSetting");

            migrationBuilder.DropTable(
                name: "SubscriptionActivation");

            migrationBuilder.DropTable(
                name: "SubscriptionActivationCompany");

            migrationBuilder.DropTable(
                name: "TaskToDo");

            migrationBuilder.DropTable(
                name: "TermsSub");

            migrationBuilder.DropTable(
                name: "TestRouterOnuTracking");

            migrationBuilder.DropTable(
                name: "ToDo");

            migrationBuilder.DropTable(
                name: "ToWarehousePermission");

            migrationBuilder.DropTable(
                name: "TransactionTags");

            migrationBuilder.DropTable(
                name: "TroubleTicketComment");

            migrationBuilder.DropTable(
                name: "UserLogingInfo");

            migrationBuilder.DropTable(
                name: "UserTerminate");

            migrationBuilder.DropTable(
                name: "UserTransactionLog");

            migrationBuilder.DropTable(
                name: "VGM");

            migrationBuilder.DropTable(
                name: "Voter");

            migrationBuilder.DropTable(
                name: "Wallet");

            migrationBuilder.DropTable(
                name: "WarrentyItems");

            migrationBuilder.DropTable(
                name: "Acc_BudgetMain");

            migrationBuilder.DropTable(
                name: "Acc_VoucherSub");

            migrationBuilder.DropTable(
                name: "AndroidMenuPermission_Master");

            migrationBuilder.DropTable(
                name: "AndroidMenu");

            migrationBuilder.DropTable(
                name: "ItemDesc");

            migrationBuilder.DropTable(
                name: "COM_CommercialInvoice");

            migrationBuilder.DropTable(
                name: "COM_DocumentAcceptance_Master");

            migrationBuilder.DropTable(
                name: "WorkOCOM_MachineryLCMasterrderMaster");

            migrationBuilder.DropTable(
                name: "WorkOrderMaster");

            migrationBuilder.DropTable(
                name: "COM_ProformaInvoices");

            migrationBuilder.DropTable(
                name: "DailyProduction_Master");

            migrationBuilder.DropTable(
                name: "DamageItems");

            migrationBuilder.DropTable(
                name: "DeliveryService");

            migrationBuilder.DropTable(
                name: "ApprovalType");

            migrationBuilder.DropTable(
                name: "ExportInvoiceDetails");

            migrationBuilder.DropTable(
                name: "ExportRealization_Master");

            migrationBuilder.DropTable(
                name: "GatePass");

            migrationBuilder.DropTable(
                name: "Cat_PostOffice");

            migrationBuilder.DropTable(
                name: "Cat_AccountType");

            migrationBuilder.DropTable(
                name: "Cat_BankBranch");

            migrationBuilder.DropTable(
                name: "Cat_Bank");

            migrationBuilder.DropTable(
                name: "Cat_PayMode");

            migrationBuilder.DropTable(
                name: "Cat_Emp_Type");

            migrationBuilder.DropTable(
                name: "HR_IncType");

            migrationBuilder.DropTable(
                name: "Cat_BuildingType");

            migrationBuilder.DropTable(
                name: "Cat_Location");

            migrationBuilder.DropTable(
                name: "Cat_Leave_Type");

            migrationBuilder.DropTable(
                name: "MobileImages");

            migrationBuilder.DropTable(
                name: "IntegrationSettingMain");

            migrationBuilder.DropTable(
                name: "InternalTransferItems");

            migrationBuilder.DropTable(
                name: "IssueItems");

            migrationBuilder.DropTable(
                name: "BOMAllocationCategory");

            migrationBuilder.DropTable(
                name: "BOMMaster");

            migrationBuilder.DropTable(
                name: "MenuPermission_Master");

            migrationBuilder.DropTable(
                name: "Menu");

            migrationBuilder.DropTable(
                name: "NotificationSettings");

            migrationBuilder.DropTable(
                name: "Notification");

            migrationBuilder.DropTable(
                name: "StoreSetting");

            migrationBuilder.DropTable(
                name: "PurchaseReturnItems");

            migrationBuilder.DropTable(
                name: "Reports");

            migrationBuilder.DropTable(
                name: "SalesItems");

            migrationBuilder.DropTable(
                name: "SalesExchangeItems");

            migrationBuilder.DropTable(
                name: "SalesTax");

            migrationBuilder.DropTable(
                name: "SalesReturnItems");

            migrationBuilder.DropTable(
                name: "Tags");

            migrationBuilder.DropTable(
                name: "ShortLink");

            migrationBuilder.DropTable(
                name: "TermsMain");

            migrationBuilder.DropTable(
                name: "AccountsDailyTransaction");

            migrationBuilder.DropTable(
                name: "TroubleTicket");

            migrationBuilder.DropTable(
                name: "CreditBalance");

            migrationBuilder.DropTable(
                name: "PurchaseBatchItems");

            migrationBuilder.DropTable(
                name: "COM_MachinaryLC_Master");

            migrationBuilder.DropTable(
                name: "CommercialLCType");

            migrationBuilder.DropTable(
                name: "DocumentStatus");

            migrationBuilder.DropTable(
                name: "BBLCMaster");

            migrationBuilder.DropTable(
                name: "ApprovedBy");

            migrationBuilder.DropTable(
                name: "WorkorderStatus");

            migrationBuilder.DropTable(
                name: "ItemDescription");

            migrationBuilder.DropTable(
                name: "PIType");

            migrationBuilder.DropTable(
                name: "DeliveryServiceDistance");

            migrationBuilder.DropTable(
                name: "DeliveryServiceTiming");

            migrationBuilder.DropTable(
                name: "DeliveryServiceWeight");

            migrationBuilder.DropTable(
                name: "ExportInvoiceMaster");

            migrationBuilder.DropTable(
                name: "Cat_PoliceStation");

            migrationBuilder.DropTable(
                name: "ReportStyle");

            migrationBuilder.DropTable(
                name: "TaxForm");

            migrationBuilder.DropTable(
                name: "TimeZoneSettings");

            migrationBuilder.DropTable(
                name: "Variable");

            migrationBuilder.DropTable(
                name: "ReportGroup");

            migrationBuilder.DropTable(
                name: "TokenSales");

            migrationBuilder.DropTable(
                name: "Agency");

            migrationBuilder.DropTable(
                name: "Acc_VoucherMain");

            migrationBuilder.DropTable(
                name: "Damage");

            migrationBuilder.DropTable(
                name: "EmployeeSalary_Master");

            migrationBuilder.DropTable(
                name: "InternalTransfer");

            migrationBuilder.DropTable(
                name: "Issue");

            migrationBuilder.DropTable(
                name: "Member");

            migrationBuilder.DropTable(
                name: "PurchaseReturn");

            migrationBuilder.DropTable(
                name: "SalesReturn");

            migrationBuilder.DropTable(
                name: "DiagnosisReport");

            migrationBuilder.DropTable(
                name: "InternetComplain");

            migrationBuilder.DropTable(
                name: "SoftwarePackage");

            migrationBuilder.DropTable(
                name: "PurchaseItems");

            migrationBuilder.DropTable(
                name: "DayListTerm");

            migrationBuilder.DropTable(
                name: "GroupLC_Main");

            migrationBuilder.DropTable(
                name: "TruckInfo");

            migrationBuilder.DropTable(
                name: "ItemGroup");

            migrationBuilder.DropTable(
                name: "MasterLC");

            migrationBuilder.DropTable(
                name: "NotifyParty");

            migrationBuilder.DropTable(
                name: "Cat_District");

            migrationBuilder.DropTable(
                name: "Acc_FiscalMonth");

            migrationBuilder.DropTable(
                name: "Acc_FiscalYear");

            migrationBuilder.DropTable(
                name: "Acc_VoucherType");

            migrationBuilder.DropTable(
                name: "PrdUnit");

            migrationBuilder.DropTable(
                name: "VoucherTranGroup");

            migrationBuilder.DropTable(
                name: "Cat_SalaryType");

            migrationBuilder.DropTable(
                name: "Cat_WeekSegment");

            migrationBuilder.DropTable(
                name: "MemberStatus");

            migrationBuilder.DropTable(
                name: "Shop");

            migrationBuilder.DropTable(
                name: "Sales");

            migrationBuilder.DropTable(
                name: "BuyerPO_Master");

            migrationBuilder.DropTable(
                name: "Colors");

            migrationBuilder.DropTable(
                name: "Product");

            migrationBuilder.DropTable(
                name: "Purchase");

            migrationBuilder.DropTable(
                name: "Sizes");

            migrationBuilder.DropTable(
                name: "BankAccountNo");

            migrationBuilder.DropTable(
                name: "BuyerGroup");

            migrationBuilder.DropTable(
                name: "DayList");

            migrationBuilder.DropTable(
                name: "Destination");

            migrationBuilder.DropTable(
                name: "LCNature");

            migrationBuilder.DropTable(
                name: "LCStatus");

            migrationBuilder.DropTable(
                name: "LCType");

            migrationBuilder.DropTable(
                name: "LienBank");

            migrationBuilder.DropTable(
                name: "PaymentTermss");

            migrationBuilder.DropTable(
                name: "PortOfLoading");

            migrationBuilder.DropTable(
                name: "ShipMode");

            migrationBuilder.DropTable(
                name: "ShipModel");

            migrationBuilder.DropTable(
                name: "TradeTerm");

            migrationBuilder.DropTable(
                name: "UnitMaster");

            migrationBuilder.DropTable(
                name: "DynamicReport");

            migrationBuilder.DropTable(
                name: "PortOfDischarge");

            migrationBuilder.DropTable(
                name: "Market");

            migrationBuilder.DropTable(
                name: "InternetUser");

            migrationBuilder.DropTable(
                name: "Orders");

            migrationBuilder.DropTable(
                name: "Style");

            migrationBuilder.DropTable(
                name: "Brand");

            migrationBuilder.DropTable(
                name: "Category");

            migrationBuilder.DropTable(
                name: "Color");

            migrationBuilder.DropTable(
                name: "MasterSalesTax");

            migrationBuilder.DropTable(
                name: "ProductType");

            migrationBuilder.DropTable(
                name: "Size");

            migrationBuilder.DropTable(
                name: "Unit");

            migrationBuilder.DropTable(
                name: "Warrenty");

            migrationBuilder.DropTable(
                name: "DocStatus");

            migrationBuilder.DropTable(
                name: "MasterPO_Master");

            migrationBuilder.DropTable(
                name: "Supplier");

            migrationBuilder.DropTable(
                name: "Commercial");

            migrationBuilder.DropTable(
                name: "OpeningBank");

            migrationBuilder.DropTable(
                name: "UnitGroup");

            migrationBuilder.DropTable(
                name: "InternetPackage");

            migrationBuilder.DropTable(
                name: "InternetUserStatus");

            migrationBuilder.DropTable(
                name: "Customer");

            migrationBuilder.DropTable(
                name: "DurationTime");

            migrationBuilder.DropTable(
                name: "Status");

            migrationBuilder.DropTable(
                name: "AccountHead");

            migrationBuilder.DropTable(
                name: "PaymentTerms");

            migrationBuilder.DropTable(
                name: "PaymentType");

            migrationBuilder.DropTable(
                name: "TradeTerms");

            migrationBuilder.DropTable(
                name: "DocType");

            migrationBuilder.DropTable(
                name: "AccountCategory");

            migrationBuilder.DropTable(
                name: "Warehouse");

            migrationBuilder.DropTable(
                name: "Company");

            migrationBuilder.DropTable(
                name: "Acc_VoucherNoCreatedType");

            migrationBuilder.DropTable(
                name: "Country");

            migrationBuilder.DropTable(
                name: "SubscriptionType");

            migrationBuilder.DropTable(
                name: "UserAccount");

            migrationBuilder.DropTable(
                name: "Employee");

            migrationBuilder.DropTable(
                name: "UserRole");

            migrationBuilder.DropTable(
                name: "Cat_BloodGroup");

            migrationBuilder.DropTable(
                name: "Cat_Designation");

            migrationBuilder.DropTable(
                name: "Cat_EmployeeType");

            migrationBuilder.DropTable(
                name: "Cat_Floor");

            migrationBuilder.DropTable(
                name: "Cat_Gender");

            migrationBuilder.DropTable(
                name: "Cat_Line");

            migrationBuilder.DropTable(
                name: "Cat_Religion");

            migrationBuilder.DropTable(
                name: "Cat_Shift");

            migrationBuilder.DropTable(
                name: "Cat_Skill");

            migrationBuilder.DropTable(
                name: "Cat_SubSection");

            migrationBuilder.DropTable(
                name: "Cat_Unit");

            migrationBuilder.DropTable(
                name: "BusinessType");

            migrationBuilder.DropTable(
                name: "Cat_Grade");

            migrationBuilder.DropTable(
                name: "Cat_Section");

            migrationBuilder.DropTable(
                name: "Cat_Department");
        }
    }
}
