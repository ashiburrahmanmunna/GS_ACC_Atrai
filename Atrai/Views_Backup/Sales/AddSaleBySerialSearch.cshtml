@using Microsoft.AspNetCore.Http
@*@model Atrai.Core.Entity.SalesModel*@
@inject IHttpContextAccessor HttpContextAccessor
@model int;
@{
    ViewData["Title"] = "AddSale";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}



<style type="text/css">

/*
    ul.ui-autocomplete {
        z-index: 1100;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice {
        background-color: #acadfb;
        border: 1px solid #fff;
        margin: 1.8px;
        padding: 0px 3px;
        font-weight: 500;
        margin-left: .5px;
        color: #041c3c;
        font-size: 13px;
    }

    .select2-container {
        width: 100% !important;
    }

    .table th {
        text-align: center;
    }

    .table > tbody > tr > td, .table > tbody > tr > td > input {
        font-size: 13px;
           }

    .select2-selection {
        overflow: hidden !important;
        height: 32px !important;
        font-size: 14px;
        height: 42px !important;
        vertical-align: middle;
    }

    .bg_1 {
        background-color: green;
    }

    .bg_2 {
        background-color: gray;
    }

    .error_msg {
        color: #f00;
        display: none;
    }




    .ui-combobox {
        display: inline-block;
        margin: 0;
        margin-right: 1.8em;
        position: relative;
    }

    .ui-combobox-input {
        padding: 0.2em;
        margin: 0;
    }

    .ui-combobox-button {
        position: absolute;
        width: 1.8em !important;
        margin: 0;
        margin-left: -1px;
        top: 0;
        bottom: 0;
    }

        .ui-combobox-button .ui-button-text {
            padding: 0em;
        }

    .ui-combobox .ui-autocomplete {
        max-height: 10em;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .table > tbody > tr > td > a i {
        display: block;
        text-align: center;
        font-size: 20px;
        color: red;
    }


    .table th:last-child, .table tbody tr.even td:last-child, .table tbody tr.odd td:last-child {
        position: inherit !important;
    }

    .table th:last-child {
        position: inherit !important;
    }*/
</style>



      <div class="row">
    <div class="col-12 col-lg-12 col-xl-12 d-flex">
                <div class="card">
                    <div class="card-header">
                        <input type="hidden" id="isSerialSales" name="isSerialSales" value="" />
                        <input type="hidden" id="LuserId" value="" />
                        <input type="hidden" id="CreateDate" value="" />
                        <input type="hidden" id="OrderId" />
                        <input type="hidden" id="IsVatSales" />




                        <div class="row">
                            <div class="col-md-4 col-12">
                                <h4 class="text-info">                                   
                                    Invoice / Bill
                                </h4>

                            </div>

                               <div class="col-md-4 col-12 form-inline">
                                <h5 class="text-default">                                  
                                   Prev. Due : &nbsp
                                </h5>
                                <h5 class="text-danger font-weight-bold" id="customerduebalance">
                                </h5>
                            </div>

                            <div class="col-md-4 col-12 text-right">
                                <label class="pr-4 m-0"><input type="radio" name="RptType" value="Scanner" /> Scanner  </label>
                                <label class="pr-4 m-0"><input type="radio" name="RptType" value="Manual" /> Manual  </label>
                            </div>
                        </div>



                    </div>
                    <div class="card-body" id="masterSale">
                        
                        <div class="col-md-12">
                            <div class="row">

                                <div class="col-md-4 col-12 mb-2">

                                    <select id="Customer" class="form-select" style="width:100%" onchange="blankme(this.id)">
                                        @*<option value="">Select Customer</option>*@
                                    </select>
                                    <small id="error_Customer" class="form-text error_msg">Select customer from list</small>
                                   

                                </div>

                                <div class="col-md-4 col-12">

                                    <div class="input-group mb-2">
                                       
                                            <span class="input-group-text py-0">
                                                Sales No 
                                            </span>
                                    
                                        @Html.TextBox("Code", null, new { @class = "form-control", @placeholder = "Enter Sale No", onkeyup = "blankme(this.id)", autocomplete = "off", @readonly = "readonly" })
                                       
                                    </div>
                                     <small id="error_Code" class="form-text error_msg col-md-offset-2 "> Sale Code is Required</small>

                                </div>





                                <div class="col-md-4 col-12">

                                    <div class="input-group  mb-2">
                                      
                                            <span class="input-group-text py-0">
                                                Date 
                                            </span>
                                       
                                        @Html.TextBox("Date", null, new { @class = "form-control mydatepicker", @placeholder = "Select Sale Date ", onchange = "blankme(this.id)", autocomplete = "off" })
                                    </div>
                                        <small id="error_Date" class="form-text error_msg col-md-offset-2 ">Sale Date is Required</small>

                                </div>




                                @*<div class="col-md-3 col-12">

                                <h2 style="color:darkgreen;font-weight:bold;font-family: Bahnschrift; font-size:25px">
                                Invoice / Bill
                                </h2>
                                </div>*@

                            </div>
                            <div class="row" id="customerinfo">

                                <div class="col-md-4 col-12">
                                        <div class="input-group  mb-2">
                                           
                                                <span class="input-group-text py-0">
                                                    Phone No 
                                                </span>
                                                <span class="input-group-text ">
                                                   <i class="bi bi-search"></i>
                                                </span>


                                            @Html.TextBox("PhoneNo", null, new { @class = "form-control form-control-sm", @placeholder = "Enter Phone No", autocomplete = "off" })
                                        </div>
                                            <small id="error_PhoneNo" class="form-text error_msg col-md-offset-2 "> Customer Phone No Required</small>
                                </div>


                                <div class="col-md-4 col-12">
                                   
                                        <div class="input-group mb-2">
                                           
                                                <span class="input-group-text py-0">
                                                    Customer Name  &nbsp
                                                </span>
                                            @Html.TextBox("CustomerName", null, new { @class = "form-control", @placeholder = "Enter Customer Name", autocomplete = "off" })
                                        </div>
                                            <small id="error_CustomerName" class="form-text error_msg col-md-offset-2 "> Customer Name Required</small>
                                  
                                </div>


                                <div class="col-md-4 col-12">
                                  

                                        <div class="input-group mb-2">
                                                <span class="input-group-text py-0">
                                                    Address
                                                </span>
                                            @Html.TextBox("CustomerAddress", null, new { @class = "form-control", @placeholder = "Type Customer Address", autocomplete = "off" })
                                        </div>
                                            <small id="error_CustomerAddress" class="form-text error_msg col-md-offset-2 "> Customer Address Required</small>
                                  
                                </div>

                            </div>

                        </div>

                        <div class="col-md-12">


                            <div class="row">

                                <div class="col-md-5 col-6 mb-2">


                                    <div class="input-group">
                                            <span class="input-group-text bg-purple text-white">
                                              <i class="bi bi-search"></i>
                                            </span>

                                        <input type="text" placeholder="Search Product" name="Search" id="Search" class="form-control">
                                        <span class="input-group-text">
                                            <button type="button" class="btn-purple rounded-0" data-toggle="modal" data-target="#productinfoModal"><i class="bi bi-plus"></i></button>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-md-4 col-6 mb-2" id ="divSearchSerial">
                                    @*<label class="col-md-8">Scan Barcode / Serial</label>*@
                                    <div class="input-group">
                                            <span class="input-group-text">
                                               <i class="bi bi-search"></i>
                                            </span>
                                      
                                        <input type="text" placeholder="Search Serial" name="Search" id="SearchSerial" class="form-control rounded-0">
                                    </div>
                                </div>
                                <div class="col-md-3 col-6">
                                    <div class="input-group mb-2">
                                        
                                            <span class="input-group-text">
                                                Warehouse
                                            </span>
                                       
                                        @Html.DropDownList("Warehouse", ViewBag.Warehouse as List<SelectListItem>, new { id = "Warehouse", @class = "form-control rounded-0" })
                                    </div>
                                </div>
                                

                             <div class="col-md-12">

                             <div class="table-responsive mt-2">
                                    <table class="table table-hover table-striped table-bordered" id="SalesItems" style="width:100%">
                                
                                <thead>
                                    <tr class="font-weight-bolder">
                                        <th class="d-none">Id</th>
                                        <th class="d-none">Product Id</th>
                                        <th class="d-none">Warehouse Id</th>
                                        <th style="min-width:280px;max-width:330px">Name</th>
                                        <th style="min-width:200px;max-width:330px">SLNO / Description</th>
                                        <th style="min-width:80px;max-width:200px">Warehouse</th>
                                        <th style="min-width:80px;max-width:100px">Quantity</th>
                                        <th style="min-width:80px;max-width:100px">Unit Price</th>

                                        <th style="min-width:80px;max-width:100px">Amount</th>
                                        <th style="min-width:40px;max-width:100px">Action</th>
                                        <th style="min-width:40px;max-width:100px">IMEI</th>
                                        <th>IsDelete</th>
                                        <th>IsTransaction</th>
                                        <th class="d-none">Cost Price</th>
                                        <th class="d-none">Commission</th>
                                        <th class="d-none">Commission Per</th>
                                        <th class="d-none">User Commission</th>
                                        <th style="min-width:200px;max-width:200px">Description</th>
                                        <th style="min-width:80px;max-width:70px">Dis. Per.</th>
                                        <th style="min-width:80px;max-width:70px">Dis. Amt</th>



                                    </tr>
                                </thead>
                                <tbody id="itemDetails">
                                </tbody>
                                <tfoot class="text-center">
                                    <tr>
                                        <td class="d-none"></td>
                                        <td class="d-none"></td>
                                        <td class="d-none"></td>
                                   
                                        <td> <strong> Total:</strong> </td>
                                        <td></td>
                                        <td> Count : (<strong id="TotalCountQty">  </strong>) </td>
                                        <td> Sum : <strong id="TotalQty">  </strong> </td>
                                        <td> UP X Q : <strong id="TotalInfo">  </strong> </td>
                                        <td> Sum : <strong id="SubTotal">  </strong> </td>
                          
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td class="d-none"></td>
                                        <td class="d-none"></td>
                                        <td class="d-none"></td>
                                        <td class="d-none"></td>
                                        <td></td>
                                        <td colspan="2">Dis. Sum : <strong id="TotalDiscountInfo"> </strong></td>
                                        





                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                             </div>   


                        <small id="error_SubTotal" class="form-text error_msg">Atleast add one item</small>

                        <div class="row p-3 m-1">

                            <div class="card p-2 col-md-5 rounded-0 mb-2" style="background: whitesmoke;">



                                <div class="row">

                                    <div class="col-md-6 col-6">
                                        <div class="input-group  mb-2">
                                           
                                                <span class="input-group-text border-0 bg-white">
                                                    <span class="custom-control custom-radio">
                                                        <input id="totalpercentage" name="DiscountMethod" type="radio" class="custom-control-input" value="totalpercentage"  required>
                                                        <label class="custom-control-label" for="totalpercentage"> Dis. Per % </label>
                                                    </span>
                                                </span>
                                          
                                            @Html.TextBox("DisPer", null, new { @class = "form-control text-right", @Value = 0, @type = "input", @placeholder = "Discount Per ", onchange = "calculateSum()" , onClick="this.setSelectionRange(0, this.value.length)" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-6">
                                        <div class="input-group  mb-2">
                                         
                                                <span class="input-group-text border-0 bg-white">
                                                    <span class="custom-control custom-radio">
                                                        <input id="totalamount" name="DiscountMethod" type="radio" class="custom-control-input" value="totalamount" checked required>
                                                        <label class="custom-control-label pr-1" for="totalamount">Amount</label>
                                                    </span>
                                                </span>
                                      

                                            @Html.TextBox("Discount", null, new { @class = "form-control text-right", @Value = 0, @type = "input", @placeholder = "Discount Amount ", onchange = "calculateSum()", onClick="this.setSelectionRange(0, this.value.length)"  })

                                        </div>
                                    </div>
                                </div>



                                <div class="row">


                                    <div class="col-md-6 col-12">
                                        <div class="input-group mb-2">
                                        
                                                <span class="input-group-text py-0">
                                                    Service 
                                                </span>
                                       
                                            @Html.TextBox("ServiceCharge", null, new { @class = "form-control text-right", @Value = 0, @type = "input", @placeholder = "Service Charge Amount ", onchange = "calculateSum()" })
                                        </div>
                                            <small id="error_ServiceCharge" class="form-text error_msg">Service Charge can't be empty</small>

                                    </div>

                                    <div class="col-md-6 col-6">

                                        <div class="input-group mb-2">
                                          
                                                <span class="input-group-text">
                                                    Shipping 
                                                </span>
                                           

                                            @Html.TextBox("Shipping", null, new { @class = "form-control text-right", @Value = 0, @type = "input", @placeholder = "Total Shipping Charge", onchange = "calculateSum()" })
                                        </div>
                                            <small id="error_Shipping" class="form-text error_msg">Total Shipping can't be empty</small>

                                    </div>
                                    <div class="col-md-6 col-6">

                                        <div class="input-group mb-2">
                                           
                                                <span class="input-group-text">
                                                    VAT Amt.
                                                </span>
                                            @Html.TextBox("TotalVat", null, new { @class = "form-control text-right", @Value = 0, @type = "input", @placeholder = "Total Vat Charge", onchange = "calculateSum()" })
                                        </div>
                                            <small id="error_TotalVAT" class="form-text error_msg">Total VAT can't be empty</small>

                                    </div>

                                    <div class="col-md-6 col-12">
                                        <div class="input-group mb-2">
                                          
                                                <span class="input-group-text">
                                                    Grand Total 
                                                </span>
                                       
                                            @Html.TextBox("GrandTotal", null, new { @class = "form-control text-right", @Value = 0, @type = "input", @placeholder = "Grand Total" , @readonly = "readonly" })
                                            @*<input type="text" id="GrandTotal" class="form-control text-right" readonly style="font-size:22px;color:purple;font-weight:bold" />*@
                                        </div>
                                            <small id="error_GrandTotal" class="form-text error_msg">Total is empty</small>

                                    </div>





                                </div>




                                <div class="row">
                                    <div class="col-md-12 col-12">

                                        <div class="input-group mb-2">
                                                <span class="input-group-text">
                                                    <label for="Notes"> Notes </label>
                                                </span>
                                            @Html.TextArea("Notes", new { @class = "form-control", @rows = "3", @placeholder = "Enter Notes" })
                                        </div>

                                    </div>

                                    <div class="col-md-8 col-12 mt-2" id="divUserCommission">

                                        <div class="input-group mb-2">
                                            
                                                <span class="input-group-text">
                                                    User Commission Amount
                                                </span>
                                       

                                            @Html.TextBox("UserCommission", null, new { @class = "form-control text-right", @Value = 0, @type = "input", @placeholder = "User Commission", onchange = "calculateSum()", @readonly = "readonly" })
                                            @*<small id="error_TotalVAT" class="form-text error_msg">Total VAT can't be empty</small>*@
                                        </div>
                                    </div>
                                    <div class="col-md-4 col-12 mt-2">
                                        <div class="input-group mb-2">
                                            @Html.DropDownList("DocType", ViewBag.DocType as List<SelectListItem>, new { id = "DocType", @class = "form-control rounded-0" })
                                        </div>
                                    </div>



                                    <div class="col-md-4 col-12 pr-0 divCreditLimit">
                                        <div class="input-group mb-2">
                                        
                                                <span class="input-group-text py-0">
                                                    Credit 
                                                </span>
                                      
                                            @Html.TextBox("CreditLimit", null, new { @class = "form-control form-control-sm text-right", @Value = 0, @type = "input", @placeholder = "Credit Limit", autocomplete = "off", @readonly = "readonly" })
                                        </div>
                                    </div>

                                    <div class="col-md-4 col-12 p-0 divCreditLimit">
                                        <div class="input-group mb-2">
                                         
                                                <span class="input-group-text">
                                                    Prev Due 
                                                </span>
                                       
                                            @Html.TextBox("PrevDue", null, new { @class = "form-control form-control-sm text-right", @Value = 0, @type = "input", @placeholder = "Prev Due", autocomplete = "off", @readonly = "readonly"})
                                        </div>
                                    </div>

                                    <div class="col-md-4 col-12 pl-0 divCreditLimit">
                                        <div class="input-group mb-2">
                                           
                                                <span class="input-group-text">
                                                    Total Due 
                                                </span>
                                       
                                            @Html.TextBox("TotalDue", null, new { @class = "form-control form-control-sm text-right", @Value = 0, @type = "input", @placeholder = "Total Due", autocomplete = "off", @readonly = "readonly"})
                                        </div>
                                    </div>


                                    <div class="col-md-6 col-12 pr-0 divCommissionAmount">
                                        <div class="input-group mb-2">
                                          
                                                <span class="input-group-text">
                                                    Commission Per 
                                                </span>
                                      
                                            @Html.TextBox("CustomerCommissionPer", null, new { @class = "form-control form-control-sm text-right", @Value = 0, @type = "input", autocomplete = "off", @readonly = "readonly"})
                                        </div>
                                    </div>

                                    <div class="col-md-6 col-12 divCommissionAmount">
                                        <div class="input-group mb-2">
                                                <span class="input-group-text">
                                                    Commission 
                                                </span>
                                            @Html.TextBox("CustomerCommissionAmount", null, new { @class = "form-control form-control-sm text-right", @Value = 0, @type = "input", autocomplete = "off", @readonly = "readonly"})
                                        </div>
                                    </div>


                                    <div class="col-md-6 col-12 divCommissionAmount">
                                        <div class="input-group mb-2">
                                           
                                                <span class="input-group-text">
                                                    SR Comm. Pe:
                                                </span>
                                         
                                            @Html.TextBox("SRCommissionPer", null, new { @class = "form-control form-control-sm text-right", @Value = 0, @type = "input", autocomplete = "off", @readonly = "readonly"})
                                        </div>
                                    </div>



                                    <div class="col-md-6 col-12 divCommissionAmount">
                                        <div class="input-group mb-2">
                                           
                                                <span class="input-group-text">
                                                    SR Commission
                                                </span>
                                            
                                            @Html.TextBox("SRCommissionAmount", null, new { @class = "form-control form-control-sm text-right", @Value = 0, @type = "input", autocomplete = "off", @readonly = "readonly"})
                                        </div>
                                    </div>






                                    <div id="divcurrencyid" class="col-md-6 col-12 mt-2">
                                        <div class="input-group mb-2">
                                                <span class="input-group-text">
                                                    Currency
                                                </span>
                                      
                                            @Html.DropDownList("Currency", ViewBag.Currency as List<SelectListItem>, new { id = "CurrencyId", @class = "form-control rounded-0" })
                                        </div>
                                    </div>
                                    <div id="divcurrencyrate" class="col-md-6 col-12 mt-2">

                                        <div class="input-group mb-2">
                                                <span class="input-group-text">
                                                    Rate
                                                </span>

                                            @Html.TextBox("CurrencyRate", null, new { @class = "form-control text-right", @Value = 0.00, @type = "input", @placeholder = "Curr. Rate", onchange = "calculateSum()" })
                                        </div>
                                            <small id="error_Currency" class="form-text error_msg">Currency can't be empty</small>

                                    </div>
                                    @*
                                    <div class="col-md-6 col-12 mt-2">
                                    <div class="input-group input-group-sm  mb-2">
                                    @Html.DropDownList("SalesRep", ViewBag.SalesRep as List<SelectListItem>, new { id = "SalesRep", @class = "form-control rounded-0" })
                                    </div>
                                    </div>*@

                                    <div class="col-md-12 col-12 mb-2">
                                        <div class="input-group mb-2">
                                           
                                                <span class="input-group-text">
                                                    Sales Representative
                                                </span>
                                          
                                            @Html.DropDownList("SalesRep", ViewBag.SalesRep as List<SelectListItem>, new { id = "SalesRep", @class = "form-control rounded-0" })
                                        </div>
                                    </div>

                                </div>

                            </div>

                            <div class="col-md-1 col-md-offset-2"></div>
                            <div class="col-md-6 p-0 mb-2">
                                <div class="card rounded-0">


                                    <div class="card-body p-2">
                                        <div class="table-responsive">

                                            <table id="tblpayments" class="table table-sm tblpayments table-striped table-bordered table-hover text-nowrap" cellspacing="0" width="100%">
                                                <thead>
                                                    <tr>
                                                        <th class="d-none text-center">Sales Payment Id</th>
                                                        <th class="d-none text-center">Payment Type Id</th>
                                                        <th class="text-center">Payment Type</th>
                                                        <th class="d-none text-center">AccountHeadId</th>
                                                        <th class="text-center">Accounts Head</th>
                                                        <th class="text-center">Amount</th>
                                                        <th class="text-center">Card No</th>
                                                        <th class="text-center"></th>
                                                    </tr>
                                                </thead>
                                                <tbody id="paymentdetails">
                                                </tbody>
                                                <tfoot>
                                                    <tr>
                                                        <td class="d-none"></td>
                                                        <td class="d-none"></td>
                                                        <td></td>
                                                        <td class="d-none"></td>
                                                        <td class="text-right"> <strong> Total:</strong> </td>
                                                        <td class="text-right"> <strong id="TotalCollectionAmount">  </strong> </td>
                                                        <td></td>
                                                        <td></td>
                                                    </tr>
                                                </tfoot>
                                            </table>

                                        </div>





                                        <div class="row my-1">
                                            <div class="col-md-6 col-6">
                                                <div class="input-group mb-2" id="divSalesPayments">
                                                    
                                                        <span class="input-group-text py-0">
                                                            <label for="Name">Account Head &nbsp  </label>
                                                        </span>
                                                  
                                                    <select id="AccountHeadRow" class="form-control" onchange="blankme(this.id)">
                                                        @*<option value="">Select Receiving Head</option>*@
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-6">
                                                <div class="input-group mb-2" id="divPaymentAmount">
                                                
                                                        <span class="input-group-text">
                                                            Amount
                                                        </span>
                                             
                                                    @Html.TextBox("PaymentAmount", "0", new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="col-md-10 col-12">
                                                <div class="input-group mb-2" id="divPaymentCardNo">
                                                   
                                                        <span class="input-group-text">
                                                            Card No / Bkash Number / Cheque
                                                        </span>
                                                  
                                                    @Html.TextBox("PaymentCardNo", "0", new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="col-md-2 col-12 d-grid gap-2 mb-2">
                                                <button type="button" id="addpayment" onclick="AddPayments()" class="btn btn-success rounded-0">Add</button>
                                                @*<button type="button" onclick="DeleteRow()" class="btn btn-success mb-2 btn-block" id="btnDelete" value="Delete"/>*@

                                            </div>
                                        </div>















                                        <div class="row">

                                            <div class="col-md-6 col-6">
                                                <div class="input-group mb-2">
                                                   
                                                        <span class="input-group-text">
                                                            Paid 
                                                        </span>
                                                  
                                                    @Html.TextBox("PaidAmount", 0, new { @class = "form-control text-right", @type = "input", onchange = "calculateSum()", @placeholder = "Paid Amount" })
                                                    @*<input type="text" id="GrandTotal" class="form-control text-right" readonly style="font-size:22px;color:purple;font-weight:bold" />*@
                                                </div>
                                                    <small id="error_PaidAmount" class="form-text error_msg">Paid Amount is empty</small>

                                            </div>



                                            <div class="col-md-6 col-6">
                                                <div class="input-group mb-2">
                                                
                                                        <span class="input-group-text py-0">
                                                            Change
                                                        </span>
                                                 
                                                    @Html.TextBox("ChangeAmount", 0, new { @class = "form-control text-right", @type = "input", @placeholder = "Change Amount", @readonly = "readonly" })
                                                    @*<input type="text" id="GrandTotal" class="form-control text-right" readonly style="font-size:22px;color:purple;font-weight:bold" />*@
                                                </div>
                                                    <small id="error_ChangeAmount" class="form-text error_msg">Change Amount is empty</small>

                                            </div>

                                            <div class="col-md-6 col-6 d-grid mb-2">
                                                @*<button type="submit" class="btn btn-success"> Save Changes </button>*@


                                                @if (ViewBag.ActionType == "Create")
                                                {
                                                    <button id="BtnSave" data-sale-Id="@Model" class="btn btn-success rounded-0" type="submit" value="Save">
                                                       <i class="bi bi-save"></i><span>Save</span>

                                                    </button>
                                                }
                                                else if (ViewBag.ActionType == "Edit")
                                                {
                                                    <button id="BtnSave" data-sale-Id="@Model" class="btn btn-warning rounded-0" type="submit" value="Update Sale">
                                                       <i class="bi bi-pencil"></i><span class="mx-2">Update</span>

                                                    </button>
                                                    @*<input type="submit" id="BtnSave" value="Update" class="btn btn-warning btn-block rounded-0" />*@
                                                    @*    <input id="BtnSave" data-sale-Id="@Model" class="btn btn-warning btn-block rounded-0" type="submit" value="Update Sale" />*@
                                                }
                                                else if (ViewBag.ActionType == "Copy")
                                                {
                                                    <button id="BtnSave" data-sale-Id="@Model" class="btn btn-purple rounded-0" type="submit" value="Copy Sale">
                                                        <i class="bi bi-save"></i><span class="mx-2">Copy & Save</span>
                                                    </button>
                                                    @*<input type="submit" id="BtnSave" value="Update" class="btn btn-warning btn-block rounded-0" />*@
                                                    @*    <input id="BtnSave" data-sale-Id="@Model" class="btn btn-warning btn-block rounded-0" type="submit" value="Update Sale" />*@
                                                }
                                                @*else if (ViewBag.ActionType == "Delete")
                                                {
                                                <button class="btn btn-danger btn-block rounded-0" type="button" onclick="Sales_delete()">Delete</button>
                                                }*@
                                                <p class="text-center pt-1">
                                                    Cntrl + S = Save Data Instantly.
                                                </p>

                                            </div>

                                            <div class="col-md-6 col-6 d-grid">

                                                <a class="btn btn-info rounded-0" href="@Url.Action("Index","Sales")"><i class="bi bi-chevron-left"></i><span class="mx-3">Back To List</span> </a>


                                                @*@Html.ActionLink("Back", "Index", "Sales", null, new { @class = "btn btn-info btn-block fa fa-arrow-left rounded-0", @id = "btnBack" })*@
                                                @*<i class="fa fa-arrow-left" aria-hidden="true"></i>*@

                                                <p class="text-center pt-1">
                                                    Cntrl + W = Close Window.
                                                </p>
                                            </div>
                                            @*<div class="form-check m-3">
                                            <input class="form-check-input" type="checkbox" value="false" id="isQuotation">
                                            <label class="form-check-label" for="isQuotation">Quotation / Draft</label>
                                            <input type="hidden" id="checkbox-value"/>
                                            </div>*@



                                        </div>

                                    </div>

                                </div>
                            </div>

                            <hr />

                            <div class="col-md-12 col-12 p-0" id="divTermsCondition">
                                <div class="card rounded-0">


                                    <div class="card-body p-2">

                                        <div class="table-responsive">
                                            <table id="tblterms" class="table table-sm tblterms table-striped table-bordered table-hover text-nowrap" cellspacing="0" width="100%">
                                                <thead>
                                                    <tr>
                                                        <th class="d-none text-center">Sales Terms Id</th>
                                                        <th class="d-none text-center">Terms Id</th>
                                                        <th class="text-center" style="min-width:140px;max-width:190px">Terms Type</th>
                                                        <th>Description</th>
                                                        <th style="min-width:80px;max-width:100px" class="text-center">SLNo</th>
                                                        <th style="min-width:40px;max-width:50px" class="text-center"></th>
                                                    </tr>
                                                </thead>
                                                <tbody id="termsdetails">
                                                </tbody>
                                            </table>
                                        </div>


                                        <div class="row my-1">
                                            <div class="col-md-8 col-12">
                                                <div class="input-group input-group-sm  mb-2" id="divSalesTerms">
                                                    <div class="input-group-prepend">
                                                        <span class="input-group-text py-0">
                                                            <label for="Name">Terms & Condition &nbsp  </label>
                                                        </span>
                                                    </div>
                                                    <select id="TermsList" class="form-control" onchange="blankme(this.id)">
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="col-md-2 col-6">
                                                <button type="button" id="addterms" onclick="LoadTerms()" class="btn btn-sm btn-info mb-2 btn-block rounded-0">Load</button>
                                            </div>
                                            <div class="col-md-2 col-6">
                                                <button type="button" id="loadterms" onclick="AddTerms()" class="btn btn-sm btn-primary mb-2 btn-block rounded-0">Add Row</button>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>


                        </div>






                        @*<div class="form-horizontal">
                        <label> </label>
                        <input id="BtnSave" class="btn btn-success col-md-3 pull-right" type="submit" value="Save Sale" />
                        </div>*@

                    </div>

                </div>
                <!-- panel-body -->
            </div>
            <!-- panel -->
        </div>
 </div>
 </div>

<div class="modal" id="productinfoModal" tabindex="-1" role="dialog" aria-labelledby="productinfoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productinfoModalLabel">Add Product</h5>
                <button id="btnclose" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="productinfo" class="row">
                    <div class="col-md-12">

                        <div class="from-group row">

                            <div class="col-md-12 mb-2">
                                <label>Name</label>
                                <input type="text" id="Name" class="form-control form-control-sm" />
                            </div>
                            <div class="col-md-6 col-12 ">
                                <label>Category</label>
                                @Html.DropDownList("CategoryId", new SelectList((IEnumerable<SelectListItem>)ViewBag.Category, "Value", "Text"), "Select Category", htmlAttributes: new { @class = "form-control", id = "CategoryId" })
                            </div>

                            <div class="col-md-6 col-12 ">
                                <label>Unit</label>
                                @Html.DropDownList("UnitId", new SelectList((IEnumerable<SelectListItem>)ViewBag.Unit, "Value", "Text"), "Select Unit", htmlAttributes: new { @class = "form-control", id = "UnitId" })
                            </div>
                            <div class="col-md-6 col-12 mb-2">
                                <label>Product Code</label>
                                <input type="text" id="ProductCode" class="form-control form-control-sm" />
                            </div>
                            <div class="col-md-6 col-12 mb-2">
                                <label>Brand</label>
                                <input type="text" id="BrandName" class="form-control form-control-sm" />
                            </div>
                            <div class="col-md-6 col-12 mb-2">
                                <label>Color</label>
                                <input type="text" id="ColorName" class="form-control form-control-sm" />
                            </div>
                            <div class="col-md-6 col-12 mb-2">
                                <label>Size</label>
                                <input type="text" id="SizeName" class="form-control form-control-sm" />
                            </div>

                            <div class="col-md-6 col-12 mb-2">
                                <label>Cost Price</label>
                                <input type="text" id="CostPrice" class="form-control form-control-sm" />
                            </div>
                            <div class="col-md-6 col-12 mb-2">
                                <label>Selling Price</label>
                                <input type="text" id="Price" class="form-control form-control-sm" />
                            </div>
                            <div class="col-md-12 mb-2">
                                <label>Description</label>
                                <input type="text" id="Description" class="form-control form-control-sm" />
                            </div>

                            <br />

                        </div>



                    </div>
                </div>  @*Datatable Initializer tblproductserialsearch*@
            </div>
            <div class="modal-footer">
                @*<div class="col-md-12 mb-2" style="text-align:center">
                <button type="button" onclick="Saveproductinfo()" class="btn btn-success rounded-0">Save Product</button>
                </div>*@
                <button type="button" class="btn btn-purple" onclick="Saveproductinfo()">Add New Product</button>

                <button type="button" id="btnCloseProductModal" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="checkModal" tabindex="-2" role="dialog" aria-labelledby="checkModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header d-none">
                <h5 class="modal-title text-center" id="checkModalLabel">Batch Serial </h5>
                @*<button id="btncloseabc" type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>*@
                <div class="from-group row">
                    @*<div class="col mb-2">
                    <input type="text" id="myInputSearch" class="form-control form-control-sm" onkeyup="myFunctionSearch()" onmouseover="this.focus();" placeholder="Search for PONO." title="Type in a name">
                    </div>*@
                    <div class="col mb-2">
                        <input type="text" id="slnoPrefix" class="form-control form-control-sm" placeholder="Prefix" title="Prefix">
                    </div>

                </div>
                <div class="from-group row">

                    <div class="col mb-2">
                        <input type="number" id="BatchFromNo" class="form-control form-control-sm" placeholder="From NO." title="From No">
                    </div>

                </div>
                <div class="from-group row">

                    <div class="col mb-2">
                        <input type="number" id="BatchToNo" class="form-control form-control-sm" placeholder="To NO." title="To No">
                    </div>
                </div>


            </div>

            <div class="modal-header">
                <h5 class="modal-title text-center" id="checkModalLabel">Batch Serial Search</h5>
                @*<div class="from-group row">
                <div class="col-12 mb-2">
                <input type="text" id="slnoSearch" class="form-control form-control-sm" placeholder="Search Serail No" title="SearchSerial">
                </div>

                </div>*@
            </div>


            <div id="BatchSerialListModal" class="modal-body">


                <div class="input-group  col-md-12 mb-2">
                    <div class="input-group-prepend">

                        <span class="input-group-text bg-purple text-white">
                            <i class="ti-search "></i>
                        </span>
                        <input type="text" placeholder="Search Product Serial" name="Search" id="slnoSearch" class="form-control form-control-sm">

                    </div>
                </div>



                <div class="row">
                    <div class="col mb-1">


                        <div class="rounded-0 mb-1">


                            @*<div class="table-responsive text-nowrap">

                            <table id="BatchSerialList" class="table display nowrap table-striped table-hover no-footer text-center" cellspacing="0" width="100%">*@


                            <div class="table-responsive">
                                <table class="table table-hover table-striped table-bordered text-nowrap" id="BatchSerialList" style="width:100%">

                                    <thead>
                                        <tr>
                                            <th class="d-none">Batch Id</th>
                                            <th class="d-none">Sales Items Id</th>
                                            <th class="d-none">Product Id</th>
                                            <th>Product Serial</th>
                                            <th>Quantity</th>
                                            <th>SL No</th>
                                            <th>Action</th>
                                            <th class="">Is Delete</th>
                                            <th class="">Is Used</th>
                                            <th class="">IsTransaction</th>
                                            <th class=""> PurchaseBatchId</th>
                                        </tr>
                                    </thead>
                                    <tbody id="itemDetails">
                                    </tbody>
                                    @*<tfoot>
                                    <tr>
                                    <td class="text-right" colspan="1">
                                    <h6>Total Qty :</h6>
                                    </td>
                                    <td> <strong id="TotalQtyBatch">  </strong> </td>
                                    <td></td>
                                    <td></td>

                                    </tr>

                                    </tfoot>*@
                                </table>
                            </div>


                        </div>

                        <div class="row">

                            @*<div class="col ">
                            <button type="button" onclick="AddSerialDataAuto()" class="btn btn-sm btn-purple mb-2 btn-block rounded-0">Auto</button>
                            </div>
                            <div class="col ">
                            <button type="button" onclick="AddSerialData()" class="btn btn-sm btn-success mb-2 btn-block rounded-0">Add</button>
                            </div>*@
                            <div class="col ">
                                <button type="button" onclick="ShowAllPackingList()" class="btn btn-sm btn-info mb-2 btn-block rounded-0">Show All</button>
                            </div>
                            <div class="col ">
                                <button type="button" class="btn btn-sm btn-danger mb-2 rounded-0 btn-simple btn-block" data-dismiss="modal">Close</button>
                            </div>

                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts {

    <script type="text/javascript">


        // function to calculate local time
        // in a different city
        // given the city’s UTC offset
        function calcTime(city, offset) {

        // create Date object for current location
        d = new Date();

        // convert to msec
        // add local time zone offset
        // get UTC time in msec
        utc = d.getTime() + (d.getTimezoneOffset() * 60000);

        // create new Date object for different city
        // using supplied offset
        nd = new Date(utc + (3600000*offset));

        const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;
        console.log(tz);

        // return time as a string
        return 'The local time in ' + city + ' is ' + nd.toLocaleString();

        }

        // get Bombay time
        //alert(calcTime('Asia/Dhaka', '+6.0'));

        calcTime('Asia/Dhaka', '+6.0');


        //var aryIannaTimeZones = [
        //      'Europe/Andorra',
        //      'Asia/Dubai',
        //      'Asia/Kabul',
        //      'Europe/Tirane',
        //      'Asia/Yerevan',
        //      'Antarctica/Casey',
        //      'Antarctica/Davis',
        //      'Antarctica/DumontDUrville', // https://bugs.chromium.org/p/chromium/issues/detail?id=928068
        //      'Antarctica/Mawson',
        //      'Antarctica/Palmer',
        //      'Antarctica/Rothera',
        //      'Antarctica/Syowa',
        //      'Antarctica/Troll',
        //      'Antarctica/Vostok',
        //      'America/Argentina/Buenos_Aires',
        //      'America/Argentina/Cordoba',
        //      'America/Argentina/Salta',
        //      'America/Argentina/Jujuy',
        //      'America/Argentina/Tucuman',
        //      'America/Argentina/Catamarca',
        //      'America/Argentina/La_Rioja',
        //      'America/Argentina/San_Juan',
        //      'America/Argentina/Mendoza',
        //      'America/Argentina/San_Luis',
        //      'America/Argentina/Rio_Gallegos',
        //      'America/Argentina/Ushuaia',
        //      'Pacific/Pago_Pago',
        //      'Europe/Vienna',
        //      'Australia/Lord_Howe',
        //      'Antarctica/Macquarie',
        //      'Australia/Hobart',
        //      'Australia/Currie',
        //      'Australia/Melbourne',
        //      'Australia/Sydney',
        //      'Australia/Broken_Hill',
        //      'Australia/Brisbane',
        //      'Australia/Lindeman',
        //      'Australia/Adelaide',
        //      'Australia/Darwin',
        //      'Australia/Perth',
        //      'Australia/Eucla',
        //      'Asia/Baku',
        //      'America/Barbados',
        //      'Asia/Dhaka',
        //      'Europe/Brussels',
        //      'Europe/Sofia',
        //      'Atlantic/Bermuda',
        //      'Asia/Brunei',
        //      'America/La_Paz',
        //      'America/Noronha',
        //      'America/Belem',
        //      'America/Fortaleza',
        //      'America/Recife',
        //      'America/Araguaina',
        //      'America/Maceio',
        //      'America/Bahia',
        //      'America/Sao_Paulo',
        //      'America/Campo_Grande',
        //      'America/Cuiaba',
        //      'America/Santarem',
        //      'America/Porto_Velho',
        //      'America/Boa_Vista',
        //      'America/Manaus',
        //      'America/Eirunepe',
        //      'America/Rio_Branco',
        //      'America/Nassau',
        //      'Asia/Thimphu',
        //      'Europe/Minsk',
        //      'America/Belize',
        //      'America/St_Johns',
        //      'America/Halifax',
        //      'America/Glace_Bay',
        //      'America/Moncton',
        //      'America/Goose_Bay',
        //      'America/Blanc-Sablon',
        //      'America/Toronto',
        //      'America/Nipigon',
        //      'America/Thunder_Bay',
        //      'America/Iqaluit',
        //      'America/Pangnirtung',
        //      'America/Atikokan',
        //      'America/Winnipeg',
        //      'America/Rainy_River',
        //      'America/Resolute',
        //      'America/Rankin_Inlet',
        //      'America/Regina',
        //      'America/Swift_Current',
        //      'America/Edmonton',
        //      'America/Cambridge_Bay',
        //      'America/Yellowknife',
        //      'America/Inuvik',
        //      'America/Creston',
        //      'America/Dawson_Creek',
        //      'America/Fort_Nelson',
        //      'America/Vancouver',
        //      'America/Whitehorse',
        //      'America/Dawson',
        //      'Indian/Cocos',
        //      'Europe/Zurich',
        //      'Africa/Abidjan',
        //      'Pacific/Rarotonga',
        //      'America/Santiago',
        //      'America/Punta_Arenas',
        //      'Pacific/Easter',
        //      'Asia/Shanghai',
        //      'Asia/Urumqi',
        //      'America/Bogota',
        //      'America/Costa_Rica',
        //      'America/Havana',
        //      'Atlantic/Cape_Verde',
        //      'America/Curacao',
        //      'Indian/Christmas',
        //      'Asia/Nicosia',
        //      'Asia/Famagusta',
        //      'Europe/Prague',
        //      'Europe/Berlin',
        //      'Europe/Copenhagen',
        //      'America/Santo_Domingo',
        //      'Africa/Algiers',
        //      'America/Guayaquil',
        //      'Pacific/Galapagos',
        //      'Europe/Tallinn',
        //      'Africa/Cairo',
        //      'Africa/El_Aaiun',
        //      'Europe/Madrid',
        //      'Africa/Ceuta',
        //      'Atlantic/Canary',
        //      'Europe/Helsinki',
        //      'Pacific/Fiji',
        //      'Atlantic/Stanley',
        //      'Pacific/Chuuk',
        //      'Pacific/Pohnpei',
        //      'Pacific/Kosrae',
        //      'Atlantic/Faroe',
        //      'Europe/Paris',
        //      'Europe/London',
        //      'Asia/Tbilisi',
        //      'America/Cayenne',
        //      'Africa/Accra',
        //      'Europe/Gibraltar',
        //      'America/Godthab',
        //      'America/Danmarkshavn',
        //      'America/Scoresbysund',
        //      'America/Thule',
        //      'Europe/Athens',
        //      'Atlantic/South_Georgia',
        //      'America/Guatemala',
        //      'Pacific/Guam',
        //      'Africa/Bissau',
        //      'America/Guyana',
        //      'Asia/Hong_Kong',
        //      'America/Tegucigalpa',
        //      'America/Port-au-Prince',
        //      'Europe/Budapest',
        //      'Asia/Jakarta',
        //      'Asia/Pontianak',
        //      'Asia/Makassar',
        //      'Asia/Jayapura',
        //      'Europe/Dublin',
        //      'Asia/Jerusalem',
        //      'Asia/Kolkata',
        //      'Indian/Chagos',
        //      'Asia/Baghdad',
        //      'Asia/Tehran',
        //      'Atlantic/Reykjavik',
        //      'Europe/Rome',
        //      'America/Jamaica',
        //      'Asia/Amman',
        //      'Asia/Tokyo',
        //      'Africa/Nairobi',
        //      'Asia/Bishkek',
        //      'Pacific/Tarawa',
        //      'Pacific/Enderbury',
        //      'Pacific/Kiritimati',
        //      'Asia/Pyongyang',
        //      'Asia/Seoul',
        //      'Asia/Almaty',
        //      'Asia/Qyzylorda',
        //      'Asia/Qostanay', // https://bugs.chromium.org/p/chromium/issues/detail?id=928068
        //      'Asia/Aqtobe',
        //      'Asia/Aqtau',
        //      'Asia/Atyrau',
        //      'Asia/Oral',
        //      'Asia/Beirut',
        //      'Asia/Colombo',
        //      'Africa/Monrovia',
        //      'Europe/Vilnius',
        //      'Europe/Luxembourg',
        //      'Europe/Riga',
        //      'Africa/Tripoli',
        //      'Africa/Casablanca',
        //      'Europe/Monaco',
        //      'Europe/Chisinau',
        //      'Pacific/Majuro',
        //      'Pacific/Kwajalein',
        //      'Asia/Yangon',
        //      'Asia/Ulaanbaatar',
        //      'Asia/Hovd',
        //      'Asia/Choibalsan',
        //      'Asia/Macau',
        //      'America/Martinique',
        //      'Europe/Malta',
        //      'Indian/Mauritius',
        //      'Indian/Maldives',
        //      'America/Mexico_City',
        //      'America/Cancun',
        //      'America/Merida',
        //      'America/Monterrey',
        //      'America/Matamoros',
        //      'America/Mazatlan',
        //      'America/Chihuahua',
        //      'America/Ojinaga',
        //      'America/Hermosillo',
        //      'America/Tijuana',
        //      'America/Bahia_Banderas',
        //      'Asia/Kuala_Lumpur',
        //      'Asia/Kuching',
        //      'Africa/Maputo',
        //      'Africa/Windhoek',
        //      'Pacific/Noumea',
        //      'Pacific/Norfolk',
        //      'Africa/Lagos',
        //      'America/Managua',
        //      'Europe/Amsterdam',
        //      'Europe/Oslo',
        //      'Asia/Kathmandu',
        //      'Pacific/Nauru',
        //      'Pacific/Niue',
        //      'Pacific/Auckland',
        //      'Pacific/Chatham',
        //      'America/Panama',
        //      'America/Lima',
        //      'Pacific/Tahiti',
        //      'Pacific/Marquesas',
        //      'Pacific/Gambier',
        //      'Pacific/Port_Moresby',
        //      'Pacific/Bougainville',
        //      'Asia/Manila',
        //      'Asia/Karachi',
        //      'Europe/Warsaw',
        //      'America/Miquelon',
        //      'Pacific/Pitcairn',
        //      'America/Puerto_Rico',
        //      'Asia/Gaza',
        //      'Asia/Hebron',
        //      'Europe/Lisbon',
        //      'Atlantic/Madeira',
        //      'Atlantic/Azores',
        //      'Pacific/Palau',
        //      'America/Asuncion',
        //      'Asia/Qatar',
        //      'Indian/Reunion',
        //      'Europe/Bucharest',
        //      'Europe/Belgrade',
        //      'Europe/Kaliningrad',
        //      'Europe/Moscow',
        //      'Europe/Simferopol',
        //      'Europe/Kirov',
        //      'Europe/Astrakhan',
        //      'Europe/Volgograd',
        //      'Europe/Saratov',
        //      'Europe/Ulyanovsk',
        //      'Europe/Samara',
        //      'Asia/Yekaterinburg',
        //      'Asia/Omsk',
        //      'Asia/Novosibirsk',
        //      'Asia/Barnaul',
        //      'Asia/Tomsk',
        //      'Asia/Novokuznetsk',
        //      'Asia/Krasnoyarsk',
        //      'Asia/Irkutsk',
        //      'Asia/Chita',
        //      'Asia/Yakutsk',
        //      'Asia/Khandyga',
        //      'Asia/Vladivostok',
        //      'Asia/Ust-Nera',
        //      'Asia/Magadan',
        //      'Asia/Sakhalin',
        //      'Asia/Srednekolymsk',
        //      'Asia/Kamchatka',
        //      'Asia/Anadyr',
        //      'Asia/Riyadh',
        //      'Pacific/Guadalcanal',
        //      'Indian/Mahe',
        //      'Africa/Khartoum',
        //      'Europe/Stockholm',
        //      'Asia/Singapore',
        //      'America/Paramaribo',
        //      'Africa/Juba',
        //      'Africa/Sao_Tome',
        //      'America/El_Salvador',
        //      'Asia/Damascus',
        //      'America/Grand_Turk',
        //      'Africa/Ndjamena',
        //      'Indian/Kerguelen',
        //      'Asia/Bangkok',
        //      'Asia/Dushanbe',
        //      'Pacific/Fakaofo',
        //      'Asia/Dili',
        //      'Asia/Ashgabat',
        //      'Africa/Tunis',
        //      'Pacific/Tongatapu',
        //      'Europe/Istanbul',
        //      'America/Port_of_Spain',
        //      'Pacific/Funafuti',
        //      'Asia/Taipei',
        //      'Europe/Kiev',
        //      'Europe/Uzhgorod',
        //      'Europe/Zaporozhye',
        //      'Pacific/Wake',
        //      'America/New_York',
        //      'America/Detroit',
        //      'America/Kentucky/Louisville',
        //      'America/Kentucky/Monticello',
        //      'America/Indiana/Indianapolis',
        //      'America/Indiana/Vincennes',
        //      'America/Indiana/Winamac',
        //      'America/Indiana/Marengo',
        //      'America/Indiana/Petersburg',
        //      'America/Indiana/Vevay',
        //      'America/Chicago',
        //      'America/Indiana/Tell_City',
        //      'America/Indiana/Knox',
        //      'America/Menominee',
        //      'America/North_Dakota/Center',
        //      'America/North_Dakota/New_Salem',
        //      'America/North_Dakota/Beulah',
        //      'America/Denver',
        //      'America/Boise',
        //      'America/Phoenix',
        //      'America/Los_Angeles',
        //      'America/Anchorage',
        //      'America/Juneau',
        //      'America/Sitka',
        //      'America/Metlakatla',
        //      'America/Yakutat',
        //      'America/Nome',
        //      'America/Adak',
        //      'Pacific/Honolulu',
        //      'America/Montevideo',
        //      'Asia/Samarkand',
        //      'Asia/Tashkent',
        //      'America/Caracas',
        //      'Asia/Ho_Chi_Minh',
        //      'Pacific/Efate',
        //      'Pacific/Wallis',
        //      'Pacific/Apia',
        //      'Africa/Johannesburg'
        //    ];

        //    let date = new Date;
        //    aryIannaTimeZones.forEach((timeZone) =>
        //    {
        //      let strTime = date.toLocaleString("en-US", {timeZone: `${timeZone}`});
        //      console.log(timeZone, strTime);
        //    });
        console.log('test');
        let timeZone = 'Asia/Dubai';
         let date = new Date;
             let strTime = date.toLocaleString("en-US", {timeZone: `${timeZone}`});
              console.log('Asia/Dubai', strTime);


        var DecimalField = '@HttpContextAccessor.HttpContext.Session.GetInt32("DecimalField").ToString()';

        var isMultiCurrency = '@HttpContextAccessor.HttpContext.Session.GetInt32("isMultiCurrency").ToString()';
        if (isMultiCurrency == "0") {
            $("#divcurrencyid").hide();
            $("#divcurrencyrate").hide();
        }


        var VisibleSalesCommission = '@HttpContextAccessor.HttpContext.Session.GetInt32("VisibleSalesCommission").ToString()';
        if (VisibleSalesCommission == "0") {
            $("#divUserCommission").hide();
        }




        var IsTermsCondition = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsTermsCondition").ToString()';
        if (IsTermsCondition == "0") {
            $("#divTermsCondition").hide();
        }


        var IsDefaultDisAmount = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsDefaultDisAmount").ToString()';
        if (IsDefaultDisAmount == "1") {
            $("#Discount").prop("readonly", false);
            $("#DisPer").prop("readonly", true);
            $("input[value='totalamount']").attr('checked', true);

           
        }
        else
        {
            $("#Discount").prop("readonly", true);
            $("#DisPer").prop("readonly", false);
            $("input[value='totalpercentage']").attr('checked', true);
        }

                     


        //alert('hit');


        //$("#Discount").prop("readonly", true);
        $("#CustomerCommissionAmount").prop("readonly", true);
        $("#SRCommissionAmount").prop("readonly", true);

        //$("#DisPer").prop("readonly", false);
         var IsFixedDiscountMainValue = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsFixedDiscountMainValue").ToString()';
        var IsFixedDiscountRowValue = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsFixedDiscountRowValue").ToString()';
        var MaxDiscountMainValue = '@HttpContextAccessor.HttpContext.Session.GetString("MaxDiscountMainValue").ToString()';
        var MaxDiscountRowValue = '@HttpContextAccessor.HttpContext.Session.GetString("MaxDiscountRowValue").ToString()';

        if (IsFixedDiscountMainValue > 0)
        {
            $('input[name=DiscountMethod]').attr("disabled",true);
        }
        else
        {
            $('input[name=DiscountMethod]').attr("disabled",false);
        }
        //radiobutton();
        //$('input[name=DiscountMethod]').attr("disabled",true);
        radiobuttontotal();
        function radiobuttontotal() {
            $("input[name='DiscountMethod']").click(function() {

                var radioValue = $("input[name='DiscountMethod']:checked").val();

                ///alert(radioValue);
                if (IsFixedDiscountMainValue > 0)
                {
                
                    $("#DisPer").prop("readonly", true);
                    $("#Discount").prop("readonly", false);
                    $("#DisPer").val(0);
                    $("#isDisPer").val(false);
                    $('input[name=DiscountMethod]').attr("disabled",true);
                }
                else
                {
                    $('input[name=DiscountMethod]').attr("disabled",false);
                    if (radioValue == "totalpercentage") {

                        //alert('percentage');
                        $("#DisPer").prop("readonly", false);
                        $("#Discount").prop("readonly", true);
                        $("#Discount").val(0);
                        $("#isDisPer").val(true);
                    }
                    else if (radioValue == "totalamount") {

                        $("#DisPer").prop("readonly", true);
                        $("#Discount").prop("readonly", false);
                        $("#DisPer").val(0);
                        $("#isDisPer").val(false);
                    }
                }

            });

        }






        //DefaultFormat(searchtypesession);
        var searchtypesessionabc = '@HttpContextAccessor.HttpContext.Session.GetString("SearchType").ToString()';
        $("input[name=RptType][value='" + searchtypesessionabc + "']").prop("checked", true);
        $('input[name="RptType"]').change(function() {
            selectedValue = this.value;
            DefaultFormat(selectedValue);

        });


        function DefaultFormat(selectedValue) {
            $.ajax({
                type: "GET",
                url: "../Admin/SetSearchType",
                datatype: "Json",
                data: { searchtype: selectedValue },
                success: function(data) {
                    if (data.Success == 1) {
                        toastr.success(selectedValue + " Option Enable");
                        //location.reload();
                    }
                }
            });
        }




        var inputs = $(':input').keypress(function(e) {
            if (e.which == 9) {
                e.preventDefault();
                var nextInput = inputs.get(inputs.index(this) + 1);
                if (nextInput) {
                    nextInput.focus();
                }
            }
        });




        var BatchSerialList = $('#BatchSerialList').DataTable({
            'aoColumns': [
                { "sClass": "BatchId d-none", "visible": true },
                { "sClass": "SalesItemId d-none", "visible": true },
                { "sClass": "ProductId d-none", "visible": true },

                {
                    "sClass": "BatchSerialNoRow ","visible": true
                },
                { "sClass": "BatchQty", "visible": true },
                { "sClass": "SLNo d-none", "visible": true },
                { "sClass": "dltrashimage", "visible": true },
                { "sClass": "IsDelete d-none", "visible": true },
                { "sClass": "IsUsed d-none", "visible": true },
                { "sClass": "IsTransaction d-none", "visible": true },
                { "sClass": "PurchaseBatchId d-none", "visible": true }




            ],
            columnDefs: [
                {
                    "render": function(data, type, row) {
                        var IsUsed = row[8];
                        if (IsUsed == false) {
                            return '<input class="form-control form-control-sm BatchSerialNo  text-center" id="BatchSerialNo"  name="BatchSerialNo" type="text"  value = ' + data + '  >';
                        }
                        else {
                            return '<input class="form-control form-control-sm BatchSerialNo  text-center" id="BatchSerialNo"  name="BatchSerialNo" type="text"  value = ' + data + ' , readonly=readonly  >';
                        }

                    },
                    "targets": 3

                },
                {
                    "render": function(data, type, row) {
                        return '<input class="form-control form-control-sm salesbatchquantity  text-center" id="salesbatchquantity"  name="salesbatchquantity" type="number"  value = ' + data + '  >';
                    },
                    "targets": 4

                }
            ],
            rowCallback: function(row) {
                $(row).addClass('RowBatchSerialList');
            },
            scrollY: "300px",
            scrollX: true,
            //"scrollCollapse": true,
            'paging': false,
            'info': false,
            "ordering": false,
            'searching': false,
            language: { search: '', searchPlaceholder: "Search..." }
            //sorting: false
        });




        $('#tblterms').DataTable({
            'aoColumns': [
                { 'sClass': 'id d-none', 'visible': true },
                { "sClass": "TermsSalesId", "visible": false },
                { "sClass": "TermsName_row", "visible": true },
                { "sClass": "TermsDesc_row", "visible": true },
                { "sClass": "TermsSLNO_row", "visible": true },
                null
            ],
            columnDefs: [
                {
                    "render": function(data, type, row) {

                        return '<input class="form-control form-control-sm termsname  text-center" id="termsname"  name="termsname" type="text"   value="' + data + '"  >';


                    },
                    "targets": 2

                },
                {
                    "render": function(data, type, row) {
                        return '<input class="form-control form-control-sm termsdescription text-center" id="termsdescription"  name="termsdescription" type="text"   value="' + data + '"> ';
                    },
                    "targets": 3

                },
                {
                    "render": function(data, type, row) {
                        return '<input class="form-control form-control-sm termsslno text-center" id="termsslno"  name="termsslno" type="number"  value = ' + data + '  >';
                    },
                    "targets": 4

                }
            ],
            "dom": 'T<"clear">lfrtip',
            //"tableTools": {
            //    "sRowSelector": "td:not(:first-child)"
            //},
            //select: {
            //    style: 'os',
            //    selector: 'td:first-child'
            //},
            //drawCallback: function () {
            //    var sum = $('#example').DataTable().column(2).data().sum();
            //    $('#TotalCollectionAmount').html(sum);
            //},
            //"order": [[1, "asc"]],
            "bLengthChange": false,
            "bFilter": false,
            "bSort": false,
            "bInfo": false,
            "paging": false
        })








        $('#tblpayments').dataTable({
            "aoColumns": [
                { "sClass": "SalesPaymentSubId", "visible": false },
                { "sClass": "PaymentTypeId", "visible": false },
                { "sClass": "TypeShortName", "visible": false },
                { "sClass": "AccountHeadId", "visible": false },
                { "sClass": "Name", "visible": true },
                { "sClass": "Amount", "visible": true },
                { "sClass": "PaymentCardNo", "visible": true },
                null
            ],
            "dom": 'T<"clear">lfrtip',
            //"tableTools": {
            //    "sRowSelector": "td:not(:first-child)"
            //},
            //select: {
            //    style: 'os',
            //    selector: 'td:first-child'
            //},
            //drawCallback: function () {
            //    var sum = $('#example').DataTable().column(2).data().sum();
            //    $('#TotalCollectionAmount').html(sum);
            //},
            //"order": [[1, "asc"]],
            "bLengthChange": false,
            "bFilter": false,
            "bSort": false,
            "bInfo": false,
            "paging": false
        })



        $('#tblpayments tbody').on('click', '.dlttrashpayments', function() {
            var table = $('#tblpayments').DataTable();

            table.row($(this).parents('tr')).remove().draw();
            var x = "1300.00";
            var y = $('#tblpayments').height();
            var z = parseFloat(x) + parseFloat(y);

            $("html, body").animate({ scrollTop: z }, 1300);


            calculateSum();

        });



        $('#tblterms tbody').on('click', '.dlttrashterms', function() {
            var table = $('#tblterms').DataTable();

            table.row($(this).parents('tr')).remove().draw();


            //var x = "1300.00";
            //var y = $('#tblterms').height();
            //var z = parseFloat(x) + parseFloat(y);

            // $("html, body").animate({ scrollTop: z }, 1300);


        });






        ///newly added for payment method
        function AddPayments() {

            $('#tblpayments').dataTable().fnAddData([
                "0",
                null,//$('#PaymentTypes').val(),
                '',//$('#PaymentTypes option:selected').text(),
                $('#AccountHeadRow').val(),
                $('#AccountHeadRow option:selected').text(),
                $('#PaymentAmount').val(),
                $('#PaymentCardNo').val(),
                '<a data-itemId="0" href="#" class="dlttrashpayments deleteItem"> <i class="fa fa-trash"></i></a >']);

            $('#PaymentAmount').val("0");
            $('#PaymentCardNo').val("=N/A=");


            calculateSum();

        }


        function AddTerms() {

            $('#tblterms').dataTable().fnAddData([
                "0",
                null,
                '',
                '',
                0,
                '<a data-itemId="0" href="#" class="dlttrashterms deleteItem"> <i class="fa fa-trash"></i></a >']);

        }




        function LoadTerms() {


            var MyAppUrlSettings = {
                MyUsefulUrl: '@Url.Action("TermsInfo", "Admin")'
            }
            //alert('test');
            $.ajax({
                type: 'POST',
                url: MyAppUrlSettings.MyUsefulUrl,
                dataType: 'json',
                data: { id: $("#TermsList").val() }, //, saleid: $("#Id").val()
                success: function(termsinfo) {

                    // console.log(termsinfo);

                    for (var i = 0; i < termsinfo.length; i++) {
                        $('#tblterms').dataTable().fnAddData([
                            "0",
                            null,
                            termsinfo[i].Terms,
                            termsinfo[i].TermsDescription,
                            0,
                            '<a data-itemId="0" href="#" class="dlttrashterms deleteItem"> <i class="fa fa-trash"></i></a >']);
                    }




                },
                error: function(ex) {
                    alert('Failed.' + ex);
                }
            });
            return false;

        }


        //$('#tblterms').dataTable().fnAddData([
        //    "0",
        //    null,
        //    '',
        //    '',
        //    0,
        //    '<a data-itemId="0" href="#" class="dlttrashterms deleteItem"> <i class="fa fa-trash"></i></a >']);

        //    }








        //function docReady(fn) {
        //    // see if DOM is already available
        //    if (document.readyState === "complete"
        //        || document.readyState === "interactive") {
        //        // call on next available tick
        //        setTimeout(fn, 1);
        //    } else {
        //        document.addEventListener("DOMContentLoaded", fn);
        //    }
        //}

        //docReady(function () {
        //    var resultContainer = document.getElementById('qr-reader-results');
        //    var lastResult, countResults = 0;
        //    function onScanSuccess(decodedText, decodedResult) {
        //        if (decodedText !== lastResult) {
        //            ++countResults;
        //            lastResult = decodedText;
        //            // Handle on success condition with the decoded message.
        //            console.log(`Scan result ${decodedText}`, decodedResult);
        //            beep();
        //            //alert(decodedText);
        //            $("#SearchSerial").val(decodedText);
        //            $("#SearchSerial").focus();
        //            //autocompletefunctionBarcodeScan();
        //        }
        //    }

        //    var html5QrcodeScanner = new Html5QrcodeScanner(
        //        "qr-reader", { fps: 10, qrbox: 250 });
        //    html5QrcodeScanner.render(onScanSuccess);
        //});


        //function beep() {
        //    (new Audio("data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+ Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ 0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7 FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb//////////////////////////// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU="
        //    )).play();
        //}

        (function($) {
            $.fn.inputFilter = function(inputFilter) {
                return this.on("input keydown keyup mousedown mouseup select contextmenu drop", function() {
                    if (inputFilter(this.value)) {
                        this.oldValue = this.value;
                        this.oldSelectionStart = this.selectionStart;
                        this.oldSelectionEnd = this.selectionEnd;
                    } else if (this.hasOwnProperty("oldValue")) {
                        this.value = this.oldValue;
                        this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                    } else {
                        this.value = "";
                    }
                });
            };
        }(jQuery));

        $(document).ready(function() {



            var rowone
            $('#SalesItems tbody').on('click', 'td', function(e) {


                //var table = $('#SalesItems').DataTable();
                //rowone = $(this).parent();


                //var data = table.row(rowone).data();
                ////console.log(data);
                ////alert(data);
                //data[12] = 'True';
                $(this).closest('tr').children('td.IsTransaction').text('True');

                calculateSum();
            });


            var row;

            $('#SalesItems tbody').on('click', '.dlttrashsubsection', function(e) {

                var tableabc = $('#SalesItems').DataTable();
                //row = $(this).parent().parent();
                //var data = table.row(row).data();
                //data[11] = 'True';
                //alert('hit');
                $(this).parent().parent().hide(); ///fahad for checking.
                toastr.error("Items Row Deleted");



                

                
                var saleId = $("#BtnSave").attr("data-sale-Id");

                if (saleId == 0) {

                    tableabc.row($(this).parents('tr')).remove().draw();
                
                }
               

                $(this).closest('tr').children('td.IsDelete').text('True');

                var x = "100.00";
                var y = $('#SalesItems').height();
                var z = parseFloat(x) + parseFloat(y);

                tableabc.draw();

                $("html, body").animate({ scrollTop: z }, 500);
                $(".dataTables_scrollBody").scrollTop(9999);

                calculateSum();

            });




            $('#BatchSerialList tbody').on('click', 'td', function(e) {


                var table = $('#BatchSerialList').DataTable();
                rowone = $(this).parent();


                var data = table.row(rowone).data();
                //alert(data);
                data[9] = 'True';
                $(this).closest('tr').children('td.IsTransaction').text('True');

                calculateSum();
            });




            $('#BatchSerialList tbody').on('click', '.dlttrash', function(e) {

                var targetTablepl = $('#BatchSerialList').DataTable();
                row = $(this).parent().parent();
                var data = targetTablepl.row(row).data();
                data[7] = 'True';

                $(this).parent().parent().hide(); ///fahad for checking.
                toastr.error("Serial Row Deleted")



                $(this).closest('tr').children('td.IsDelete').text('True');

                var x = "100.00";
                var y = $('#BatchSerialList').height();
                var z = parseFloat(x) + parseFloat(y);

                targetTablepl.draw();

                $("html, body").animate({ scrollTop: z }, 500);
                $(".dataTables_scrollBody").scrollTop(9999);




                var xcount = targetTablepl.rows(':visible').count();
                //alert(xcount);
                var table = $('#SalesItems').DataTable();
                //var datacurrentvalue = table.row($('input[type=checkbox]:checked').parents('tr')).data();
                var rownovouchersub = table.row($('input[type=checkbox]:checked').parents('tr')).index();
                //alert(rownovouchersub);

                var cellprice = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.price').val();
                //console.log(cellprice);
                //cellprice.data(xcount);

                var cellqty = table.cell(rownovouchersub, 6);
                cellqty.data(xcount);


                var cellamount = table.cell(rownovouchersub, 8);
                cellamount.data(xcount * cellprice);

                //alert('enter');


                var commissionamountrow = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.commissionamount').val();
                //alert(commissionamountrow);
                //console.log(commissionamountrow.data());
                var cellcommissionamount = table.cell(rownovouchersub, 15);
                cellcommissionamount.data(xcount * commissionamountrow);


                calculateSum();

            });






            $("#ServiceCharge , #Shipping , #TotalVat , #Discount  ").inputFilter(function(value) {
                return /^-?\d*[.,]?\d{0,4}$/.test(value.toFixed(DecimalField));
            });


            $(".price").inputFilter(function(value) {
                return /^-?\d*[.,]?\d{0,4}$/.test(value.toFixed(DecimalField));
            });
        });



        function AddSerialData() {
            //alert('enter');
            var check = $('#SalesItems').find('input[type=checkbox]:checked').length;
            //alert(check);

            if (check > 0) {
                //alert(check);
                //alert("Checkbox Selected");
            }
            else {
                alert("At least One Row Should Be Selected");
                e.preventDefault();
            }
            // alert(serialno);
            // alert('test');

            var targetTablepl = $("#BatchSerialList").DataTable();

            var rowCountpl = targetTablepl
                .column(0)
                .data()
                .length;


            //$('#BatchSerialList').dataTable().fnAddData([
            //    0,
            //    SalesItemId,
            //    newDetailsId,
            //    0,
            //    rowCountpl + 1,
            //    '<a data-itemId="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash"></i></a >',
            //    false
            //]);


            $('#BatchSerialList').dataTable().fnAddData([
                0,
                SalesItemId,
                ProductId,
                "",
                1,
                rowCountpl + 1,
                '<a data-itemId="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash"></i></a >',
                false,
                false,
                true,
                0
            ]);



            var xcount = targetTablepl.rows(':visible').count();
            //alert(xcount);
            var table = $('#SalesItems').DataTable();
            //var datacurrentvalue = table.row($('input[type=checkbox]:checked').parents('tr')).data();
            var rownovouchersub = table.row($('input[type=checkbox]:checked').parents('tr')).index();
            //alert(rownovouchersub);

            var cellprice = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.price').val();
            //console.log(cellprice);
            //cellprice.data(xcount);

            var cellqty = table.cell(rownovouchersub, 6);
            cellqty.data(xcount);
            var cellamount = table.cell(rownovouchersub, 8);
            cellamount.data(xcount * cellprice);


            var commissionamountrow = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.commissionamount').val();
            //alert(commissionamountrow);
            //console.log(commissionamountrow.data());
            var cellcommissionamount = table.cell(rownovouchersub, 15);
            cellcommissionamount.data(xcount * commissionamountrow);

            calculateSum();

        }

        function AddSerialDataAuto() {

            //alert('enter 123');


            var check = $('#SalesItems').find('input[type=checkbox]:checked').length;
            //alert(check);

            if (check > 0) {
                //alert(check);
                //alert("Checkbox Selected");
            }
            else {
                alert("At least One Row Should Be Selected");
                e.preventDefault();
            }
            // alert(serialno);
            // alert('test');

            var targetTablepl = $("#BatchSerialList").DataTable();

            var rowCountpl = targetTablepl
                .column(0)
                .data()
                .length;


            //$('#BatchSerialList').dataTable().fnAddData([
            //    0,
            //    SalesItemId,
            //    newDetailsId,
            //    0,
            //    rowCountpl + 1,
            //    '<a data-itemId="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash"></i></a >',
            //    false
            //]);

            var from = $("#BatchFromNo").val();
            var to = $("#BatchToNo").val();
            var prefix = $("#slnoPrefix").val();


            if (prefix.length > 0 && from.length > 0 && to.length > 0) {
                for (var i = from; i <= to; i++) {
                    $('#BatchSerialList').dataTable().fnAddData([
                        0,
                        SalesItemId,
                        ProductId,
                        prefix + i,
                        1,
                        i,//rowCountpl + 1,
                        '<a data-itemId="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash"></i></a >',
                        false,
                        false,
                        true,
                        0
                    ]);
                }
            }
            else {
                toastr.error("Please fill up Necessary Info.")
            };




            var xcount = targetTablepl.rows(':visible').count();
            //alert(xcount);
            var table = $('#SalesItems').DataTable();
            //var datacurrentvalue = table.row($('input[type=checkbox]:checked').parents('tr')).data();
            var rownovouchersub = table.row($('input[type=checkbox]:checked').parents('tr')).index();
            //alert(rownovouchersub);

            var cellprice = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.price').val();
            //console.log(cellprice);
            //cellprice.data(xcount);

            var cellqty = table.cell(rownovouchersub, 7);
            cellqty.data(xcount);
            var cellamount = table.cell(rownovouchersub, 8);
            cellamount.data(xcount * cellprice);


            var commissionamountrow = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.commissionamount').val();
            //alert(commissionamountrow);
            //console.log(commissionamountrow.data());
            var cellcommissionamount = table.cell(rownovouchersub, 15);
            cellcommissionamount.data(xcount * commissionamountrow);

            calculateSum();


        }


        $('body').on('expanded.pushMenu collapsed.pushMenu', function() {
            setTimeout(function() {
                $.fn.dataTable.tables({ visible: true, api: true }).columns.adjust();
            }, 350);
        });


        function ShowAllPackingList() {
            var cbs = document.getElementsByClassName("clickchk");
            for (var i = 0; i < cbs.length; i++) {
                cbs[i].checked = false;
            }

            $('#BatchSerialList tbody tr').each(function() {
                $(this).show();
            });

        }






        //$("#Search").keyup(function (ev) {
        //    // 13 is ENTER
        //    if (ev.which === 13) {
        //        // do something
        //        alert('hit');
        //    }
        //});

        autocompleteProductCode();
        function autocompleteProductCode() {
            var MyAppUrlset = {
                MyUsefulUrl: '@Url.Action("ProductCodeReferance", "Values")'
            }



            //Referance//ReferanceTwo//ReferanceThree
            $("#ProductCode").autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: MyAppUrlset.MyUsefulUrl,
                        dataType: "json",
                        data: { query: $("#ProductCode").val() },
                        success: function(data) {
                            console.log(data);

                            response($.map(data, function(item) {
                                return { label: item.Text };
                            }));
                        },
                        error: function(xhr, status, error) {
                            alert("Error");
                        },
                    });
                },
                autoFocus: true,
                minLength: 0,
                select: function(event, uirow) {

                    toastr.error("Product Code Should Be Unique.");
                    $("#ProductCode").val("");
                    //alert('test');
                    return false;
                }
            });
        }





        function Saveproductinfo() {


            var Code = $("#ProductCode").val();
            var Name = $("#Name").val();
            var CostPrice = $("#CostPrice").val();
            var Price = $("#Price").val();
            var Description = $("#Description").val();

            var ColorName = $("#ColorName").text();
            var SizeName = $("#SizeName").text();
            var BrandName = $("#BrandName").val();
            var UnitId = $("#UnitId").val();
            var CategoryId = $("#CategoryId").val();

            if ($("#ProductCode").val().length == 0) {

                toastr.error("Please Fill Up Product Code.");
                return true;
            }
            if ($("#Name").val().length == 0) {

                toastr.error("Please Fill Up Product Name.");
                return true;
            }
            if ($("#CostPrice").val().length == 0) {

                toastr.error("Please Fill Up Product Cost Price.");
                return true;
            }
            if ($("#Price").val().length == 0) {

                toastr.error("Please Fill Up Product Sales Price.");
                return true;
            }


            var Product = {
                Code: Code,
                Name: Name,
                CostPrice: CostPrice || 0,
                Price: Price || 0,
                Description: Description,

                ColorName: ColorName,
                SizeName: SizeName,
                BrandName: BrandName,
                UnitId: UnitId,
                CategoryId: CategoryId

            }
            //console.log(Product);
            //alert(`${Code} ${Name} ${CostPrice} ${Price}`);

            $.ajax({




                url: '@Url.Action("SaveProductModal", "Admin")',
                data: JSON.stringify(Product), //use id here
                //data: JSON.stringify(purchasesmain),
                type: 'POST',
                async: true,
                contentType: 'application/json;',
                dataType: 'json',
                success: function(result) {
                    //alert(result);
                    $("#Search").val($("#Name").val());
                    $("#ProductCode").val("");
                    $("#Name").val("");
                    $("#CostPrice").val("");
                    $("#Price").val("");
                    $("#Description").val("");

                    $("#SizeName").val("");
                    $("#BrandName").val("");
                    $("#ColorName").val("");
                    $("#CategoryId").val(null);
                    $("#UnitId").val(0);

                    //productinfo_Info();
                    toastr.success('Product Added Successfully.');
                    $("#btnCloseProductModal").trigger("click");



                    autocompletefunction();
                    $("#Search").focus();
                    var e = jQuery.Event("keydown");
                    e.keyCode = 50;
                    $("#search").trigger(e);

                },
                error: function() {
                    toastr.error('Unable to Save');
                    //alert('Unable to Save');
                }
            });
        }


        //$('#customerinfo').hide();
        //customerinfohide();

        function customerinfohide() {

            var customername = $('#Customer option:selected').text();

            if ($('#Customer option:selected').text().toUpperCase() == "Cash Customer".toUpperCase() || $('#Customer option:selected').text().toUpperCase() == "Walk In Customer".toUpperCase()) {
            if (customername.toUpperCase().includes('CUSTOMER')) {


                includes('good')

                $('#customerinfo').show();


            }
            else {
                $('#customerinfo').hide();
                $('#CustomerName').val('');
                $('#PhoneNo').val('');
                $('#CustomerAddress').val('');
            }
        }

      

        $('#Customer').select2({
             theme: 'bootstrap-5'
        }).on("select2:select", function(e) {


                $.when(customerinfohide()).then(CustomerCreditLimit());

                customerinfohide();
                CustomerCreditLimit();

            });

        $('.divCommissionAmount').hide();
        $('.divCreditLimit').hide();


        function CustomerCreditLimit() {
            //alert($("#Customer").val());

            var MyAppUrlSettings = {
                MyUsefulUrl: '@Url.Action("CustomerInfo", "Sales")'
            }
            //alert('test');
            $.ajax({
                type: 'POST',
                url: MyAppUrlSettings.MyUsefulUrl,
                dataType: 'json',
                data: { id: $("#Customer").val(), isCreditLimit: 1 }, //, saleid: $("#Id").val()
                success: function(Customerss) {

                     $('#SalesRep').val(Customerss.SalesRepresentativeId).change();
                    

                    if (Customerss.CreditLimit > 0) {
                        $('#CreditLimit').val(Customerss.CreditLimit);
                        $('#PrevDue').val(Customerss.PrevDue.toLocaleString()).change();
                       

                        
                        var totalcollection = $('#TotalCollectionAmount').text();
                        $('#TotalDue').val(Customerss.CreditLimit - totalcollection).change();

                        $('.divCreditLimit').show().change();
                        //console.log(Customerss);
                        //alert('wait');

                        //alert($('#PrevDue').val());
                    }
                    else {
                        $('#TotalDue').val(0);
                        $('#CreditLimit').val(0).change();
                        $('#PrevDue').val(0).change();
                        $('.divCreditLimit').hide().change();
                    }
                     $('#customerduebalance').text(Customerss.PrevDue.toLocaleString()).change();


                    if ((Customerss.CustomerCommissionPer + Customerss.SRCommissionPer) > 0) {
                        $('.divCommissionAmount').show();
                        $('#CustomerCommissionPer').val(Customerss.CustomerCommissionPer).change();
                        $('#SRCommissionPer').val(Customerss.SRCommissionPer).change();
                        //alert($('#SRCommissionPer').val());
                        //alert('enter');
                        //alert(Customerss.CustomerCommissionPer);
                        //alert(Customerss.SRCommissionPer);

                        //$('#CustomerCommissionPer').text(Customerss.CustomerCommissionPer).change();
                        //$('#SRCommissionPer').text(Customerss.SRCommissionPer).change();
                    }
                    else {
                        $('.divCommissionAmount').hide();
                        $('#CustomerCommissionPer').val(0);
                        $('#CustomerCommissionPer').text('0');
                        $('#SRCommissionPer').val(0);
                        $('#SRCommissionPer').text('0');

                        //$('.divCommissionAmount').hide().change();
                    }

                    calculateSum();


                },
                error: function(ex) {
                    alert('Failed.' + ex);
                }
            });
            return false;
        };



        function blankme(id) {

            var val = document.getElementById(id).value;
            var error_id = "error_" + id;

            if (val == "" || val === 0.00) {

                document.getElementById(error_id).style.display = "block";
            }
            else {
                document.getElementById(error_id).style.display = "none";
            }
        }
        function submitValidation() {


            var customer = document.getElementById("Customer").value;
            //var accounthead = document.getElementById("AccountHead").value;

            var code = document.getElementById("Code").value;
            var date = document.getElementById("Date").value;
            //var paymentmethod = document.getElementById("Payment").value;
            //var pStaus = document.getElementById("Status").value;
            var total = parseFloat($("#SubTotal").text());
            var gtotal = parseFloat($("#GrandTotal").val());

            var paidamount = parseFloat($("#PaidAmount").val());
            var changeamount = parseFloat($("#ChangeAmount").val());
            var currencyrate = parseFloat($("#CurrencyRate").val());





            //alert('wait');


            //var CreditLimit = $('#CreditLimit').val();
            //var TotalDue = parseFloat($('#PrevDue').val()) + parseFloat($('#GrandTotal').val()) - parseFloat($('#TotalCollectionAmount').text());
            //$('#TotalDue').val(TotalDue);
            ////alert(CreditLimit);
            ////alert(TotalDue);
            //if (parseFloat(CreditLimit)> 0 && parseFloat(TotalDue) > parseFloat(CreditLimit))
            //{
            //   //alert('Credit Limit Over for this supplier..');
            //   toastr.error("Credit Limit Over for this supplier..");
            //   return true;
            //}


            //if (customer == "" || pStaus == "" || code == "" || date == "" || paymentmethod == "" || (total == "" || total == 0.00 || isNaN(total)) || (gtotal == "" || gtotal == 0.00 || isNaN(gtotal))) {
            if (customer == "" || code == "" || date == "" || (total == "" || total == 0.00 || isNaN(total)) || (gtotal == "" || gtotal == 0.00 || isNaN(gtotal))) {


                //if (pStaus == "") {
                //    document.getElementById("error_Status").style.display = "block";
                //}
                //else {
                //    document.getElementById("error_Status").style.display = "none";
                //}



                if (customer == "") {
                    document.getElementById("error_Customer").style.display = "block";
                }
                else {
                    document.getElementById("error_Customer").style.display = "none";
                }


                //if (accounthead == "") {
                //    document.getElementById("error_AccountHead").style.display = "block";
                //}
                //else {
                //    document.getElementById("error_AccountHead").style.display = "none";
                //}

                if (code == "") {
                    document.getElementById("error_Code").style.display = "block";
                }
                else {
                    document.getElementById("error_Code").style.display = "none";
                }


                if (currencyrate = "") {
                    document.getElementById("error_Currency").style.display = "block";
                }
                else {
                    document.getElementById("error_Currency").style.display = "none";
                }


                if (date == "") {
                    document.getElementById("error_Date").style.display = "block";
                }
                else {
                    document.getElementById("error_Date").style.display = "none";
                }
                //if (paymentmethod == "") {
                //    document.getElementById("error_Payment").style.display = "block";
                //}
                //else {
                //    document.getElementById("error_Payment").style.display = "none";
                //}
                if (total == "" || total === 0.00 || isNaN(total)) {
                    document.getElementById("error_SubTotal").style.display = "block";
                }
                else {
                    document.getElementById("error_SubTotal").style.display = "none";
                }
                if (gtotal == "" || gtotal === 0.00 || isNaN(gtotal)) {
                    document.getElementById("error_GrandTotal").style.display = "block";
                }
                else {
                    document.getElementById("error_GrandTotal").style.display = "none";
                }


                if (paidamount == "" || isNaN(paidamount)) {
                    document.getElementById("error_PaidAmount").style.display = "block";
                }
                else {
                    document.getElementById("error_PaidAmount").style.display = "none";
                }


                if (changeamount == "" || isNaN(changeamount)) {
                    document.getElementById("error_ChangeAmount").style.display = "block";
                }
                else {
                    document.getElementById("error_ChangeAmount").style.display = "none";
                }

                return false;
            }

            //else {
            //    return true;
            //}

            return true;
        }



        $(document).ready(function() {
            // console.log("ready!");

            $("#Search").focus();


            //    $("#SalesItems").on('click','.btnSelect',function(){
            //// get the current row
            //        var currentRow=$(this).closest("tr");

            //        var col1=currentRow.find("td:eq(0)").text(); // get current row 1st TD value
            //        var col2=currentRow.find("td:eq(1)").text(); // get current row 2nd TD
            //        var col3=currentRow.find("td:eq(2)").text(); // get current row 3rd TD
            //        var data=col1+"\n"+col2+"\n"+col3;

            //        alert(data);
            //   });


            //$("input[name='textdescription']").keyup(function(){
            //     var str = this;
            //     alert(str.innerText);
            //   })

            // $('input[type="text"]').on('keydown, keyup', function () {
            //  //get a reference to the text input value
            //  var texInputValue = this.val();

            //  //show the text input value in the UI
            //  $('#message p span').html(texInputValue);
            //});
            //function callme(e) {
            //    console.log(e);
            //    //document.getElementById(this.id);
            //    //var edValue = document.getElementById("edValue");
            //    //var s = edValue.value;

            //    //var lblValue = document.getElementById("lblValue");
            //    //lblValue.innerText = "The text box contains: " + s;
            //}

            //window.onkeyup = keyup;
            //////$('#SalesItems').keyup(function(e) {
            //////    //creates a global Javascript variable
            //////    //console.log(e.target);
            //////    var inputTextValue;
            //////    var elementid;
            //////    //function keyup(e) {
            //////    //setting your input text to the global Javascript Variable for every key press
            //////    inputTextValue = e.target.value;
            //////    elementid = e.target.id;
            //////    if (e.target.type == "text" || e.target.type == "number") {
            //////        //alert("this is Text Box.")
            //////        //if (elementid.length > 0)
            //////        //{
            //////        $(`#SalesItems #${elementid}`).attr("value", `${inputTextValue}`);
            //////        // }
            //////    }
            //////    //console.log(elementid);

            //////    //console.log(inputTextValue);


            //////    //$(`input[id=${elementid}]`).val(inputTextValue).change();
            //////    //$("input[name='textdescription']").val(inputTextValue).change();
            //////    //elementid.value = inputTextValue;

            //////    //$("input[name='textdescription']").val(this.value).change();
            //////    //$('#searchValue').text("https://duckduckgo.com/?q=" + inputTextValue);
            //////    //listens for you to press the ENTER key, at which point your web address will change to the one you have input in the search box
            //////    //if (e.keyCode == 13) {
            //////    //  window.location = "https://duckduckgo.com/?q=" + inputTextValue;
            //////    //}
            //////    //}
            //////});




            //$(document).on('keypress',"input[name='textdescription']",function(e) {

            //    console.log(e);
            //    //if(e.which == 13) {
            //    //    console.log($("input[name='textdescription']"));
            //    //    //$("input[name='textdescription']").val(this.value).change();
            //    //    //alert(this.value);

            //    //}
            //});


            //$("#Status").val("Paid");
            //$("#Payment").val("Cash");


            //$(document).on('keyup', function (e) {
            //    //var str = "key = " + e.key + " and code = " + e.code;
            //    // find out if a ceratin key was pressed --
            //    if (e.key == "Escape") {
            //        alert('The ESC key was pressed.');
            //    }
            //    //else {
            //    //    alert(str);
            //    //}
            //});


            $(window).bind('keydown', function(event) {
                if (event.ctrlKey || event.metaKey) {
                    switch (String.fromCharCode(event.which).toLowerCase()) {
                        case 's':
                            event.preventDefault();
                            //alert('ctrl-s');
                            //alert($('#tblpayments').DataTable().data().count());


                            if ($('#tblpayments').DataTable().data().count() == 0 && $('#DocType') != 'Quotation') {
                                $("#addpayment").trigger('click');
                            }


                            $("#BtnSave").trigger('click');


                            //Sales_save();
                            break;
                            @*case 'd':
                            event.preventDefault();
                            //alert('ctrl-s');
                            Sales_delete();
                            break;
                            case 'n':
                            event.preventDefault();
                            //alert('ctrl-n');
                            window.location.href = '@Url.Action("POSCreate", "Sales")';
                            break;
                            case 'r':
                            event.preventDefault();
                            //alert('ctrl-r');
                            window.location.href = '@Url.Action("POSCreate", "Sales")';
                            break;
                            case 'b':
                            event.preventDefault();
                            //alert('ctrl-b');
                            window.location.href = '@Url.Action("Index", "Sales")';
                            //$('#btnBack').click(function () {
                            //    ///Code
                            //});
                            break;*@
                                     }
                }
            });


            $('#masterSale').ready(function() {

                var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
                    "Aug", "Sep", "Oct", "Nov", "Dec"];
                var value = new Date();
                var ret = value.getDate() + "-" + months[value.getMonth()] + "-" + value.getFullYear(); //value.getMonth() + 1 + "/" + value.getDate() + "/" + value.getFullYear();
                $("#Date").val(ret);






                function getSale(id) {
                    return $.ajax({
                        type: 'GET',
                        datatype: "Json",
                        url: "../Sales/GetSales",
                        data: { "saleId": id, isreturn: @ViewBag.IsCopy }
                    });
                }

                var saleId = $("#BtnSave").attr("data-sale-Id");

                if (saleId > 0) {
                    $.when(getSale(saleId)).then(function(res) {
                        //console.log(res);
                        var detArr = [];

                        var stringarray = [""];
                        var arr = [];

                        if (@ViewBag.IsCopy == "2") {
                            let idGencopy = new Generator();
                            $("#BtnSave").attr("data-sale-Id", "0");
                            $('#Code').val("SI-" + idGencopy.getId());
                            //$('#Date').val(ret);
                        }
                        else {
                            $("#Code").val(res.SaleCode);

                        }



                        var value = new Date(res.SalesDate);

                        var ret = value.getDate() + "-" + months[value.getMonth()] + "-" + value.getFullYear(); //value.getMonth() + 1 + "/" + value.getDate() + "/" + value.getFullYear();




                        $("#CreateDate").val(res.CreateDate);
                        $("#LuserId").val(res.LuserId);
                        $("#OrderId").val(res.OrderId);
                        $("#IsVatSales").val(res.IsVatSales);






                        $("#Date").val(ret);

                        $("#CustomerName").val(res.CustomerName);
                        $("#PhoneNo").val(res.PhoneNo);
                        $("#CustomerAddress").val(res.PrimaryAddress);


                        $("#Notes").val(res.Notes);
                        //$("#Payment").val(res.PaymentMethod);
                        //$("#Status").val(res.Status);
                        $("#isSerialSales").val(res.isSerialSales);

                        $("#SubTotal").text(res.Total);

                        $("#TotalVat").val(res.TotalVat);
                        $("#ServiceCharge").val(res.ServiceCharge);
                        $("#Shipping").val(res.Shipping);


                        $("#Discount").val(res.Discount);


                        $("#CustomerCommissionPer").val(res.CustomerCommissionPer);
                        $("#SRCommissionPer").val(res.SRCommissionPer);

                        $("#CustomerCommissionAmount").val(res.CustomerCommissionAmount);
                        $("#SRCommissionAmount").val(res.SRCommissionAmount);


                        $("#DisPer").val(res.DisPer);


                        $("#GrandTotal").val(res.GrandTotal);
                        //alert(res.GrandTotal);
                        $("#PrevDue").val(res.PrevDue);


                        $("#PaidAmount").val(res.PaidAmount);
                        $("#ChangeAmount").val(res.ChangeAmount);
                        $("#CurrencyRate").val(res.CurrencyRate);

                        //$('#checkbox-value').val(res.isQuotation),



                        //if ($("#Status").val() == "Paid") {
                        //    //alert($("#Status").val());
                        //    $("#GrandTotal").val(res.GrandTotal);
                        //    //$("#DueAmt").val(0);
                        //    //alert(paidamt);
                        //}
                        //else if ($("#Status").val() == "Advance") {
                        //    $("#PaidAmt").val(res.PaidAmt);
                        //    //$("#DueAmt").val(res.DueAmt);

                        //}
                        //else {
                        //    //$("#DueAmt").val(res.DueAmt);
                        //    //alert('not found');
                        //}


                        $.each(res.Items, function(i, v) {

                            //var rowid = generateRandom();

                            //alert(v.SerialItem)

                            if (@ViewBag.IsCopy != "2") {
                                $('#SalesItems').dataTable().fnAddData([v.Id, v.ProductId, v.WarehouseId, v.Product.Name + " " + v.Product.Code, v.Description, v.vWarehouse.WhShortName, v.Quantity, v.Price, v.Amount, '<a tabindex="-1" data-itemId="0" href="#" class="dlttrashsubsection deleteItem"> <i class="fa fa-trash"></i></a>', null, false, false, v.CostPrice, v.CommissionAmount, v.CommissionPer, v.UserCommissionAmount, v.Description, v.IndDisPer, v.IndDiscount]);
                            }
                            else {
                                $('#SalesItems').dataTable().fnAddData(["0", v.ProductId, v.WarehouseId, v.Product.Name + " " + v.Product.Code, v.Description, v.vWarehouse.WhShortName, v.Quantity, v.Price, v.Amount, '<a tabindex="-1" data-itemId="0" href="#" class="dlttrashsubsection deleteItem"> <i class="fa fa-trash"></i></a>', null, false, false, v.CostPrice, v.CommissionAmount, v.CommissionPer, v.UserCommissionAmount, v.Description, v.IndDisPer, v.IndDiscount]);

                            }


                            //console.log(v.BatchSerialItems);

                            $.each(v.BatchSerialItems, function(ii, vv) {

                                //var rowid = generateRandom();
                                //alert(vv.ProductId);

                                var deletestring = '<a data-itemId="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash"></i></a >';
                                if (vv.IsUsed == true) { deletestring = '<h5 style="color:Red; font-weight:bold">Sold</h5>' }

                                $('#BatchSerialList').dataTable().fnAddData([
                                    vv.Id,
                                    vv.SalesItemId,
                                    vv.ProductId,
                                    vv.BatchSerialNo,
                                    vv.SalesBatchQuantity,
                                    0,//vv.SLNo,//rowCountpl + 1,
                                    deletestring,
                                    false,
                                    vv.IsUsed,
                                    false,
                                    vv.PurchaseBatchId
                                ]);

                            });
                            //BatchSerialList.draw();



                            var rowid = finalrowid;

                            //$("#N" + rowid).val(v.Name);
                            //$("#D" + rowid).val(v.Description);
                            //$("#P" + rowid).val(v.Price);


                            $("#N" + rowid).autocomplete({
                                source: function(request, response) {
                                    $.ajax({
                                        url: '../admin/ProductSearchAvgCosting/',
                                        dataType: "json",
                                        data: { query: $("#N" + rowid).val(), WarehouseId: $("#WHI" + rowid).val() },
                                        success: function(data) {
                                            //console.log(data);
                                            //alert('Wait');

                                                                //if ((Customerss.CustomerCommissionPer + Customerss.SRCommissionPer) > 0) {
                                                                //    $('.divCommissionAmount').show();
                                                                //    $('#CustomerCommissionPer').val(Customerss.CustomerCommissionPer).change();
                                                                //    $('#SRCommissionPer').val(Customerss.SRCommissionPer).change();
                                                                //    //alert($('#SRCommissionPer').val());
                                                                //    //alert('enter');
                                                                //    //alert(Customerss.CustomerCommissionPer);
                                                                //    //alert(Customerss.SRCommissionPer);

                                                                //    //$('#CustomerCommissionPer').text(Customerss.CustomerCommissionPer).change();
                                                                //    //$('#SRCommissionPer').text(Customerss.SRCommissionPer).change();
                                                                //}
                                                                //else {
                                                                //    $('.divCommissionAmount').hide();
                                                                //    $('#CustomerCommissionPer').val(0);
                                                                //    $('#CustomerCommissionPer').text('0');
                                                                //    $('#SRCommissionPer').val(0);
                                                                //    $('#SRCommissionPer').text('0');

                                                                //    //$('.divCommissionAmount').hide().change();
                                                                //}


                                            response($.map(data, function(item) {
                                                //return { ProductId: item.Id, Description: item.Description, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: v.CommissionAmount, CommissionPer: v.CommissionPer };
                                                return { ProductId: item.Id, Description: item.Description, ProductName: item.Name + ' ' + item.Description + ' ' + item.Code, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer,ProductDiscountAmount: item.ProductDiscountAmount, ProductDiscountPer: item.ProductDiscountPer, QuantityRow: barcodeqty, WarehouseList: item.WarehouseList };
                                            }));
                                        },
                                        error: function(xhr, status, error) {
                                            alert("Error");
                                        },
                                    });
                                },
                                minLength: 2,
                                select: function(event, uirow) {
                                    $("#PI" + rowid).html(uirow.item.ProductId);
                                    //$("#WHI" + rowid).html(uirow.item.ProductId);

                                    $("#P" + rowid).val(uirow.item.Price);
                                    $("#CP" + rowid).val(uirow.item.CostPrice);








                                    if (uirow.item.Price > (uirow.item.CostPrice + uirow.item.CommissionAmount)) {
                                        $("#CA" + rowid).val(uirow.item.CommissionAmount);
                                        $("#CPR" + rowid).val(uirow.item.CommissionPer);
                                        $("#UCA" + rowid).val(uirow.item.CommissionAmount * quantity);
                                    }
                                    else {
                                        $("#CA" + rowid).val(0);
                                        $("#CPR" + rowid).val(0);
                                        $("#UCA" + rowid).val(0);
                                    }


                                    $("#D" + rowid).val(uirow.item.Description);
                                    var quantity = $("#Q" + rowid).val();
                                    //$("#Q" + rowid).focus();
                                    //$("#A" + rowid).html(uirow.item.Price * quantity);

                                      var isDiscountOffer = '@HttpContextAccessor.HttpContext.Session.GetInt32("isDiscountOffer").ToString()';
                                        var OfferDiscountPer = '@HttpContextAccessor.HttpContext.Session.GetString("OfferDiscountPer").ToString()';
                                        var ProductDiscountPer = 0;
                                        var ProductDiscountAmount = 0;

                                        //debugger

                                        if (isDiscountOffer > 0)
                                        {
                                            ProductDiscountPer = OfferDiscountPer;

                                            if (ui.item.ProductDiscountPer > 0)
                                            {
                                                ProductDiscountPer = uirow.item.ProductDiscountPer;
                                            }
                                        }


                                    $("#IDP" + rowid).val(ProductDiscountPer);
                                    $("#IDA" + rowid).val(ProductDiscountAmount);

                                      
                                    //alert('wait');
                                    $("#A" + rowid).html((uirow.item.quantity * uirow.item.Price - ((uirow.item.Price*ProductDiscountPer)/100)).toFixed(DecimalField).toFixed(DecimalField));


                                    
                                    calculateSum();


                                    ////for multi select by fahad
                                    //var terms = split(this.value);
                                    //// remove the current input
                                    //terms.pop();
                                    //// add the selected item
                                    //terms.push(ui.item.value);
                                    //// add placeholder to get the comma-and-space at the end
                                    //terms.push("");
                                    //this.value = terms.join(", ");
                                    //return false;


                                }

                            });





                            $("#D" + rowid).select2({
                                 theme: 'bootstrap-5',
                                minimumResultsForSearch: Infinity
                            });


                            $("#D" + rowid).empty();
                            arr.length = 0;


                            //alert($("#PI" + rowid).html());

                            //alert(v.Quantity);


                            $.ajax({
                                type: 'POST',
                                url: '@Url.Action("ProductsBatchSerialMultiSelect", "Admin")', 
                                dataType: 'json',
                                async: false,
                                data: { ProductId: $("#PI" + rowid).html(), SaleId: $("#BtnSave").attr("data-sale-Id"),WarehouseId : $("#Warehouse").val() },
                                success: function(data) {

                                    $("#D" + rowid).select2({
                                         theme: 'bootstrap-5',
                                        data: data,
                                        escapeMarkup: function(markup) {
                                            return markup;
                                        },
                                        templateResult: function(data) {
                                            return data.html;
                                        },
                                        templateSelection: function(data) {
                                            return data.text;
                                        }

                                    })




                                    ////console.log(data);
                                    //var s = '';//'<option value="-1">Please Select Product</option>';
                                    ////alert(data.length);
                                    //for (var i = 0; i < data.length; i++) {
                                    //    s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                                    //}
                                    ////console.log(s);


                                    //$("#D" + rowid).html(s);

                                    //arr = s;
                                },
                                error: function(ex) {
                                    alert('Failed.' + ex);
                                }

                            });

                            //console.log(v.SerialItemArray);

                            $("#D" + rowid).val(v.SerialItemArray).change();//v.SerialItem
                            //return false;





                        });


                        $.each(res.SalesPayments, function(i, v) {

                            //var rowid = generateRandom();

                            //alert(v.SerialItem)

                            //$('#tblpayments').dataTable().fnAddData([v.Id, v.PaymentTypeId, v.vPaymentType.TypeShortName, v.AccountHeadId, v.vChartofAccounts.AccName, v.Amount, v.PaymentCardNo, '<a data-itemId="0" href="#" class="dlttrashpayments deleteItem"> <i class="fa fa-trash"></i></a >']);

                            if (@ViewBag.IsCopy != "2") {
                                $('#tblpayments').dataTable().fnAddData([v.Id, null, "", v.AccountHeadId, v.vChartofAccounts.AccName, v.Amount, v.PaymentCardNo, '<a data-itemId="0" href="#" class="dlttrashpayments deleteItem"> <i class="fa fa-trash"></i></a >']);

                            }
                            else {
                                $('#tblpayments').dataTable().fnAddData(["0", null, "", v.AccountHeadId, v.vChartofAccounts.AccName, v.Amount, v.PaymentCardNo, '<a data-itemId="0" href="#" class="dlttrashpayments deleteItem"> <i class="fa fa-trash"></i></a >']);

                            }



                        });


                        $.each(res.SalesTerms, function(i, v) {
                            //alert( v.TermsName);
                            //alert(v.TermsDescription);

                            $('#tblterms').dataTable().fnAddData(["0", null, v.TermsName, v.TermsDescription, v.TermsSLNo, '<a data-itemId="0" href="#" class="dlttrashterms deleteItem"> <i class="fa fa-trash"></i></a >']);

                        });


                        $("#Customer").val(res.CustomerId).change();
                        $("#Warehouse").val(res.WarehouseIdMain).change();
                        $("#DocType").val(res.DocTypeId).change();
                        $("#SalesRep").val(res.SalesRepId).change();
                        $("#Currency").val(res.CurrencyId).change();





                        //$("#AccountHead").val(res.AccountPayTypeId).change();
                        customerinfohide();
                        // alert('wait abc');



                        //calculateSum();
                        $.when(CustomerCreditLimit()).then(calculateSum());


                        //var TotalDue = parseFloat($('#PrevDue').val()) + parseFloat(res.GrandTotal) - parseFloat($('#TotalCollectionAmount').text());
                        //$('#TotalDue').val(TotalDue);
                        //$("#orderMasterId").val(res.result.MasterId);

                    }).fail(function(err) {
                        console.log(err);
                    });
                }
                else {
                    let idGen = new Generator();
                    $('#Code').val("SI-" + idGen.getId());

                    $('#Discount').val(0);
                    $('#CustomerCommissionAmount').val(0);
                    $('#SRCommissionAmount').val(0);
                    $('#CustomerCommissionPer').val(0);
                    $('#SRCommissionPer').val(0);
                    $('#DisPer').val(0);

                    $('#Shipping').val(0);
                    $('#TotalVat').val(0);
                    $('#ServiceCharge').val(0);
                    $('#PaidAmt').val(0);
                    $('#PrevDue').val(0);
                    $('#CreditLimit').val(0);
                    $('#TotalDue').val(0);
                    $('#CurrencyRate').val(1);



                }


                if (saleId == 0) {
                    $(document).on('click', 'a.deleteItem', function(e) {
                        e.preventDefault();
                        var $self = $(this);
                        $(this).parents('tr').css("background-color", "#1f306f").fadeOut(800, function() {
                            $(this).remove();
                            calculateSum();
                        });
                    });
                };

                if (@ViewBag.IsCopy == "2") {
                    $("#BtnSave").attr("data-sale-Id", "0");

                }


            });

            $.ajax({
                type: "GET",
                url: "../Sales/GetCustomersDropdown",
                datatype: "Json",
                success: function(data) {
                    //console.log(data);
                    $.each(data, function(index, value) {
                        var PrimaryAddress = value.PrimaryAddress || "";
                        $('#Customer').append('<option value="' + value.Id + '">' + value.Name + ' - ' + PrimaryAddress + '</option>');
                    });
                }
            });


            $.ajax({
                type: "GET",
                url: "../Sales/GetAccountHead",
                datatype: "Json",
                success: function(data) {
                    //console.log(data);

                    //$.each(data, function (index, value) {
                    //    $('#AccountHead').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                    //});



                    $.each(data, function(index, value) {
                        $('#AccountHeadRow').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                    });
                    //$('#AccountHeadRow').append('<option value=null>=N/A=</option>');

                }
            });


            $.ajax({
                type: "GET",
                url: "../Sales/GetSalesTermsList",
                datatype: "Json",
                success: function(data) {
                    //console.log(data);
                    $.each(data, function(index, value) {
                        $('#TermsList').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                    });
                }
            });



            $.ajax({
                type: "GET",
                url: "../Sales/GetPaymentTypes",
                datatype: "Json",
                success: function(data) {

                    $.each(data, function(index, value) {
                        $('#PaymentTypes').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                    });
                }
            });


        });






        function Generator() { };
        var currentdate = new Date();
        var datetime = currentdate.getDate() + ""
            + (currentdate.getMonth() + 1) + ""
            + currentdate.getFullYear().toString().substr(-2) + ""
            + currentdate.getHours() + ""
            + currentdate.getMinutes() + ""
            + currentdate.getSeconds() + ""
            + currentdate.getMilliseconds().toString().substr(-1);

        Generator.prototype.rand = datetime;//Math.floor(Math.random() * 26) + Date.now();
        Generator.prototype.getId = function() {
            return this.rand++;
        };

        //var idGena = new Generator();
        //alert("SI-" + idGena.getId());


        //function Generator() { };
        //Generator.prototype.rand = Math.floor(Math.random() * 26) + Date.now();
        //Generator.prototype.getId = function () {
        //    return this.rand++;
        //};


        $('.mydatepicker').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        });

        $('#SalesItems').on('change', ".quantity , .price , .inddiscount  , .inddisper ", update);

        function update() {

            //alert('hit');
            let qty = parseFloat($(this).parents('tr').find(".quantity").val());
            let price = parseFloat($(this).parents('tr').find(".price").val());

            let inddisper = parseFloat($(this).parents('tr').find(".inddisper").val());
            let inddisamount = parseFloat($(this).parents('tr').find(".inddiscount ").val());
            let discountedprice = parseFloat($(this).parents('tr').find(".price").val());;
            //console.log(inddisper);
            //console.log(inddisamount);


            if (inddisper > 0 && inddisamount == 0) {
                discountedprice = price - ((price * inddisper) / 100);
            }
            else if (inddisamount > 0 && inddisper == 0) {
                discountedprice = price - inddisamount;
            }
            else {
                $(this).parents('tr').find(".inddisper").val(0);
                $(this).parents('tr').find(".inddiscount").val(0);
            }

            let amount = qty * discountedprice;
            $(this).parents('tr').find(".amount").text(amount.toFixed(DecimalField));

            let commissionper = parseFloat($(this).parents('tr').find(".commissionper").text());
            let commissionamount = parseFloat($(this).parents('tr').find(".commissionamount").text());
            let usercommisionamount = qty * commissionamount;

            //alert(commissionamount);
            if (commissionper > 0) {
                usercommisionamount = (amount * commissionper) / 100
            }

            $(this).parents('tr').find(".usercommissionamount").text(usercommisionamount.toFixed());
            //alert('abc');
            calculateSum();
        }


        //$('#SalesItems').on('change', ".prdname , .description", AddRow);

        //function AddRow() {

        //    var x = SalesItems.row(':last-child').data();
        //    console.log(x);
        //    //var qty = parseFloat($(this).parents('tr').find(".quantity").val());
        //    //var price = parseFloat($(this).parents('tr').find(".price").val());
        //    //var amount = qty * price;
        //    //$(this).parents('tr').find(".amount").text(amount);
        //    //calculateSum();
        //}




        function generateRandom() {
            const randomNum = 100000 + Math.random() * 100000;
            return Math.round(randomNum / 10) * 10;
        }
        var finalrowid = 'N1234';


        var isFixedSalesValue = '@HttpContextAccessor.HttpContext.Session.GetInt32("isFixedSalesValue").ToString()';
        var isMultiSelect = '@HttpContextAccessor.HttpContext.Session.GetInt32("isMultiSelect").ToString()';

        var IsFixedDiscountMainValue = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsFixedDiscountMainValue").ToString()';
        var IsFixedDiscountRowValue = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsFixedDiscountRowValue").ToString()';
        var MaxDiscountMainValue = '@HttpContextAccessor.HttpContext.Session.GetString("MaxDiscountMainValue").ToString()';
        var MaxDiscountRowValue = '@HttpContextAccessor.HttpContext.Session.GetString("MaxDiscountRowValue").ToString()';


        //'d-none take dia mialte hobe'
        var IsSerialSales = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsSerialSales").ToString()' == '1';
        var IsIndDiscount = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsIndDiscount").ToString()' == '1';
        var IsSalesDescription = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsSalesDescription").ToString()' == '1';

        if (IsSerialSales == false)
        {
            $('#divSearchSerial').hide();
        
        }



        //var checkdisable = 'readonly';
        //if (isFixedSalesValue == 0) { checkdisable = '';}

        var SalesItems = $('#SalesItems').DataTable({
            dom: '<"dom_wrapper fh-fixedHeader"fl>tip',
            'aoColumns': [
                { 'sClass': 'id d-none', 'visible': true },
                { 'sClass': 'productid d-none', 'visible': true },
                { 'sClass': 'warehouseid d-none', 'visible': true },

                { 'sClass': 'prdname_row', 'visible': true },
                { 'sClass': 'description_row', 'visible': IsSerialSales },
                { 'sClass': 'warehouse_row text-center', 'visible': true },


                                { 'sClass': 'quantity_row', 'visible': true },
                { 'sClass': 'price_row', 'visible': true },

                { 'sClass': 'amount text-right', 'visible': true },
                null,
                {
                    "sClass": "checkbox",
                    "visible": IsSerialSales,
                    "render": function() {
                        return '<input type="checkbox" class="clickchk"  onchange ="cbChange(this)"  data-toggle="modal" data-target="#checkModal" >';
                    }
                },
                { "sClass": "IsDelete d-none", "visible": true },
                { "sClass": "IsTransaction d-none", "visible": true },
                { 'sClass': 'costprice d-none', 'visible': true },
                { 'sClass': 'commissionamount d-none', 'visible': true },
                { 'sClass': 'commissionper d-none', 'visible': true },
                { 'sClass': 'usercommissionamount d-none', 'visible': true },

                { 'sClass': 'textdescription_row', 'visible': IsSalesDescription }, //IsSalesDescription
                { 'sClass': 'inddisper_row', 'visible': IsIndDiscount },
                { 'sClass': 'inddiscount_row', 'visible': IsIndDiscount }

            ],
            columnDefs: [
                {
                    'render': function(data, type, row) {
                        return '<input class="prdname form-control" name="prdname" type="text" value="' + data + '" >';
                    },
                    'targets': 3
                },
                {
                    "render": function(data, type, row) {
                        //<input class="input-tags" type="text" data-role="tagsinput">
                        //return '<input class="input-tags description form-control" name="description" type="text" data-val="true"  value="' + data + '">';
                    
                        if (isMultiSelect == 1) {
                          return '<select class="description form-control" name="description"  data-val="true" value="' + data + '" multiple = "multiple">';
                        }
                        else {
                          return '<select class="description form-control" name="description"  data-val="true" value="' + data + '">';
                        }
                    
                    
                    },
                    "targets": 4
                },
                                {
                    "render": function(data, type, row) {
                        return '<input class="form-control quantity text-center" name="quantity" type="number"   value="' + data + '"  autocomplete = "off"  >';
                    },
                    "targets": 6
                },
                {
                    'render': function(data, type, row) {

                        if (isFixedSalesValue == 0) {
                            return '<input class="form-control price text-center"  name="price" type="number" data-val="true"  value="' + data + '"  autocomplete = "off" >';
                        }
                        else {
                            return '<input class="form-control price text-center" readonly="readonly"  name="price" type="number" data-val="true"  value="' + data + '"  autocomplete = "off" >';
                        }
                    },
                    'targets': 7
                },

                {
                    "render": function(data, type, row) {

                        return '<input class="form-control textdescription text-center" name="textdescription" type="text"   value="' + data + '"  autocomplete = "off"   >';
                    },
                    "targets": 17
                },
                {
                    "render": function(data, type, row) {

                        if (IsFixedDiscountRowValue == 0) {

                           return '<input class="form-control inddisper text-center" name="inddisper" type="number"   value="' + data + '"  autocomplete = "off"  >';
                        }
                        else
                        {
                            return '<input class="form-control inddisper text-center" readonly="readonly"  name="inddisper" type="number"   value="' + data + '"  autocomplete = "off"  >';
                        }


                    },
                    "targets": 18
                },
                {
                    "render": function(data, type, row) {


                                           if (IsFixedDiscountRowValue == 0) {

                         return '<input class="form-control inddiscount text-center" name="inddiscount" type="number"   value="' + data + '"  autocomplete = "off"  >';
                        }
                        else
                        {
                         return '<input class="form-control inddiscount text-center"  readonly="readonly"  name="inddiscount" type="number"   value="' + data + '"  autocomplete = "off"  >';
                        }

                        
                    },
                    "targets": 19
                }
            ],
            "fnCreatedRow": function(nRow, aData, iDataIndex) {
                var rowid = generateRandom();
                //alert(aData);
                //$('td:eq(1)', nRow).attr('name', 'ProductId');
                //console.log(nRow);
                //console.log(aData);
                //console.log(iDataIndex);
                //
                $(nRow).attr('id', 'rowid' + rowid);
                //$(this).find(".id").html()



                //$('td:eq(1)', nRow).attr('id', 'PI' + rowid);
                //$('td:eq(2)', nRow).attr('id', 'WHI' + rowid);
                //$('td:eq(3)', nRow).attr('id', 'N' + rowid);
                //$('td:eq(4)', nRow).find("select[name='description']").attr('id', 'D' + rowid);

                //$('td:eq(5)', nRow).find("input[name='warehouse']").attr('id', 'W' + rowid);
                //$('td:eq(6)', nRow).find("input[name='price']").attr('id', 'P' + rowid);
                //$('td:eq(7)', nRow).find("input[name='quantity']").attr('id', 'Q' + rowid);

                //$('td:eq(8)', nRow).attr('id', 'A' + rowid);
                //$('td:eq(12)', nRow).attr('id', 'T' + rowid);
                //$('td:eq(13)', nRow).attr('id', 'CP' + rowid);

                //$('td:eq(14)', nRow).attr('id', 'CA' + rowid);
                //$('td:eq(15)', nRow).attr('id', 'CPR' + rowid);
                //$('td:eq(16)', nRow).attr('id', 'UCA' + rowid);

                //$('td:eq(17)', nRow).find("input[name='textdescription']").attr('id', 'TD' + rowid);
                //$('td:eq(18)', nRow).find("input[name='inddisper']").attr('id', 'IDS' + rowid);
                //$('td:eq(19)', nRow).find("input[name='inddiscount']").attr('id', 'IDP' + rowid);

                //console.log(rowid);
                //$(nRow).attr('id', 'rowid' + rowid);



                $($(nRow).find(".productid"), nRow).attr('id', 'PI' + rowid);
                $($(nRow).find(".warehouseid"), nRow).attr('id', 'WHI' + rowid);
                $($(nRow).find(".prdname"), nRow).attr('id', 'N' + rowid);
                $($(nRow).find(".description_row"), nRow).find("select[name='description']").attr('id', 'D' + rowid);

                ////$(this).find("select[name='description']").attr('id', 'D' + rowid);


                $(nRow).find("input[name='warehouse']").attr('id', 'W' + rowid);
                                $(nRow).find("input[name='quantity']").attr('id', 'Q' + rowid);
                $(nRow).find("input[name='price']").attr('id', 'P' + rowid);

                //$($(this).find(".quantity_row"), nRow).find("input[name='quantity']").attr('id', 'Q' + rowid);
                $($(nRow).find(".amount"), nRow).attr('id', 'A' + rowid);


                $($(nRow).find(".IsTransaction"), nRow).attr('id', 'T' + rowid);
                $($(nRow).find(".costprice"), nRow).attr('id', 'CP' + rowid);

                $($(nRow).find(".commissionamount"), nRow).attr('id', 'CA' + rowid);
                $($(nRow).find(".commissionper"), nRow).attr('id', 'CPR' + rowid);
                $($(nRow).find(".usercommissionamount"), nRow).attr('id', 'UCA' + rowid);

                $(nRow).find("input[name='textdescription']").attr('id', 'TD' + rowid);
                $(nRow).find("input[name='inddisper']").attr('id', 'IDP' + rowid);
                $(nRow).find("input[name='inddiscount']").attr('id', 'IDA' + rowid);


                finalrowid = rowid;


                var serialrowid = "#D" + rowid;
                //alert(serialrowid);
                $(document).on('change', serialrowid, function() {

                    var countlength = $(serialrowid + ' :selected').length;

                    //alert(countlength);

                    if (countlength > 0) {
                        
                        ///for do need another coding. mobile imei and cement
                        //$("#Q" + rowid).val(countlength);
                        
                        if (countlength ==1)
                        {
                            countlength = $("#Q" + rowid).val();
                        }
                        else        
                        {
                            $("#Q" + rowid).val(countlength);
                        }
                        
                        var price = parseFloat($("#P" + rowid).val());

                        var amount = countlength * price;
                        //alert(amount);
                                    //alert('wait');

                        $("#A" + rowid).text(amount.toFixed(DecimalField));
                        $("#T" + rowid).text('True');


                        var CommissionAmount = parseFloat($("#CA" + rowid).text());
                        var commissionper = parseFloat($("#CPR" + rowid).text());


                        var usercommissionamount = countlength * CommissionAmount;

                        //alert(commissionamount);
                        if (commissionper > 0) {
                            usercommissionamount = (amount * commissionper) / 100
                        }



                        //alert(amount);
                        $("#UCA" + rowid).text(usercommissionamount);
                    }
                    //else if (countlength == 1 )
                    //{
                    //    //$("#Q" + rowid).val(countlength);
                    //    var price = parseFloat($("#P" + rowid).val());

                    //    var amount = countlength * price;
                    //    //alert(amount);
                    //    $("#A" + rowid).text(amount);
                    //    $("#T" + rowid).text('True');


                    //    var CommissionAmount = parseFloat($("#CA" + rowid).text());
                    //    var commissionper = parseFloat($("#CPR" + rowid).text());


                    //    var usercommissionamount = countlength * CommissionAmount;

                    //    //alert(commissionamount);
                    //    if (commissionper > 0) {
                    //        usercommissionamount = (amount * commissionper) / 100
                    //    }



                    //    //alert(amount);
                    //    $("#UCA" + rowid).text(usercommissionamount);
                    //}


                    //if (countlength == 1 && $("#Q" + rowid).val() > 1 )
                    //{

                    //}

                    //$('#SalesItems').on('change', ".quantity , .price", update);

                    //function update() {

                    //alert('hit');
                    //var qty = parseFloat(countlength);


                    calculateSum();
                    //}

                    //calculateSum();
                    //alert(countlength);
                });



            },
            'paging': false,
            'info': false,
            'ordering': false,
            'searching': false,
            //select: true,
            //select: {
            //    style: 'single',
            //    selector: 'td:nth-child(6)'
            //},
            language: { search: '', searchPlaceholder: "Search..." }
        });

        //$(document).on('click', 'a.f', function (e) {
        //    e.preventDefault();
        //    var $self = $(this);
        //    $(this).parents('tr').css("background-color", "#1f306f").fadeOut(800, function () {
        //        $(this).remove();
        //        calculateSum();
        //    });
        //});



        $('#SalesItems tbody').on('click', '.warehouse_row', function() {


            if ($.fn.DataTable.isDataTable('#SalesItems')) {



                ////very much importatnt for unbiding otherwise it will be more heavy
                $("#SalesItems").unbind("click");
                $("#SalesItems").unbind("select");


                SalesItems.$('tr.selected').removeClass('selected');
                $(this).parent().addClass('selected');

                SalesItems
                    .on('select', function(e, dt, type, indexes) {

                        $("#addBtn").text("Modify");
                        if ($("#span").children('#Cancel')) {
                            $("#span").children('#Cancel').remove();
                            $("#span").append('<button type="button" id="Cancel" class="btn btn-sm btn-danger btn-block rounded-0 mb-2  cancel">Cancel</button>');
                        }
                        else {
                            $("#span").append('<button type="button" id="Cancel" class="btn btn-sm btn-danger btn-block rounded-0 mb-2 cancel">Cancel</button>');
                        }


                        var f = SalesItems.rows('.selected').data();
                        //console.log(f[0][2]);
                        //console.log(f[0][3]);
                        //console.log(f[0][4]);
                        //console.log(f[0][5]);



                        selectedItem = `${f[0][2]}`;

                        $('#Warehouse').val(`${f[0][2]}`).change();


                        //calculate();
                    })
                    .on('deselect', function(e, dt, type, indexes) {
                        selectedItem = null;
                        $("#addBtn").text("Add");
                        $("#spn").children('#Cancel').remove();
                        $(".cancel").trigger("click");
                    });
            };
        });


        $('#SalesItems tbody').on('click', ':not(.warehouse_row)', function() {

            // alert('Hit');

            if ($.fn.DataTable.isDataTable('#SalesItems')) {
                $(this).parent().removeClass("selected");
            };
        });









        var barcodeqty = 1;
        //var searchtypesessionabc = $("input[name=RptType]:checked").val();
        var searchtypesessionabc = '@HttpContextAccessor.HttpContext.Session.GetString("SearchType").ToString()';
        var barcodeprefixforweightscale = '@HttpContextAccessor.HttpContext.Session.GetString("barcodeprefixforweightscale").ToString()';

        //alert(searchtypesessionabc);
        autocompletefunction(searchtypesessionabc);
        function autocompletefunction(searchtypesession) {




            $("#Search").autocomplete({
                source: function(request, response) {

                    var barcodedata = $("#Search").val();//.split("00"); // not the space in .split(" ")


                    let result = barcodedata.startsWith("99");
                    if (result == true && barcodedata.length > 8) { //&& result.length == 13

                        barcodedata = $("#Search").val().slice(0, -6);
                        barcodeqty = $("#Search").val().slice(-6) / 10000 || 1


                        $("#Search").val(barcodedata);


                    }
                    else {
                        barcodeqty = 1;



                    }

                    var e = jQuery.Event("keydown");
                    e.keyCode = 50;
                    $("#search").trigger(e);

                    ////////barcodeqty = barcodedata[1]/10000 || 1;

                    //if (barcodeqty.length == 0) {

                    //    barcodeqty = 1;
                    //}
                    //else {

                    //}
                    //console.log(barcodeqty);


                    if (searchtypesession == "Scanner") {

                        $.ajax({
                            url: '../admin/ProductSearchByScan/',
                            dataType: "json",
                            data: {
                                query: $("#Search").val(),
                                WarehouseId: $("#Warehouse").val()
                            },
                            success: function(data) {
                                //console.log(data);
                                response($.map(data, function(item) {
                                    //return { ProductId: item.Id, Description: item.Description, label: item.Name, Price: item.Price, Code: item.Code };
                                    return { ProductId: item.Id, Description: item.Description, ProductName: item.Name + ' ' + item.Description + ' ' + item.Code, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer,ProductDiscountAmount: item.ProductDiscountAmount, ProductDiscountPer: item.ProductDiscountPer, QuantityRow: barcodeqty, WarehouseList: item.WarehouseList };
                                }));
                            },
                            error: function(xhr, status, error) {
                                alert("Error");
                            },
                        });
                    }
                    else {
                        $.ajax({
                            url: '../admin/ProductSearchAvgCosting/',
                            dataType: "json",
                            data: {
                                query: $("#Search").val(),
                                WarehouseId: $("#Warehouse").val()
                            },
                            success: function(data) {
                                //console.log(data);
                                // alert('Wait');
                                response($.map(data, function(item) {

                                    //return { ProductId: item.Id, Description: item.Description, label: item.Name, Price: item.Price, Code: item.Code };
                                    return { ProductId: item.Id, Description: item.Description, ProductName: item.Name + ' ' + item.Description + ' ' + item.Code, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer,ProductDiscountAmount: item.ProductDiscountAmount, ProductDiscountPer: item.ProductDiscountPer, QuantityRow: barcodeqty, WarehouseList: item.WarehouseList };
                                }));
                            },
                            error: function(xhr, status, error) {
                                alert("Error");
                            },
                        });
                    }

                },
                response: function(event, ui) {
                    // Make your preferred selection here
                    //var item = ui.content[0].label;




                    //$(this).val(item).trigger('change');
                    //$(this).data('ui-autocomplete').menu.element.children().first().click();
                    //var e = $.Event("keypress", { which: 9 });
                    //$('#Search').trigger(e);
                    //console.log('Found - ' + searchtypesession);

                    if (searchtypesession == "Scanner") {
                        var len = ui.content.length;
                        //console.log(len);
                        if (len == "1") {
                            //console.log('found');
                            var downKeyEvent = $.Event("keydown");
                            downKeyEvent.keyCode = $.ui.keyCode.DOWN; // event for pressing "down" key

                            var enterKeyEvent = $.Event("keydown");
                            enterKeyEvent.keyCode = $.ui.keyCode.ENTER; // event for pressing "enter" key
                            ////alert('found');

                            ////$("#SearchSerial").val("SSD20"); // enter text to trigger autocomplete
                            $("#Search").trigger(downKeyEvent); // First downkey invokes search
                            $("#Search").trigger(downKeyEvent); // Second downkey highlights first item

                            $("#Search").trigger(enterKeyEvent); // Enter key selects
                        }
                    }
                },
                autoFocus: true,
                //focus: function (event, ui) { event.preventDefault(); },
                minLength: 2,
                select: function(event, ui) {


                    var duplicatefound = 0;

                    $('#SalesItems tbody tr').each(function() {
                        //alert('searching');
                        //alert(ui.item.ProductId);
                        //alert($(this).find('.BatchSerialNo').val());
                        //alert(ui.item.label);
                        //var abc = $(this).find('.textdescription').val() || "";
                        //var xyz = $(this).find('.textdescription').val()
                        //$.trim($(this).find('.textdescription_row').text());
                        //alert("found description row");
                        //alert(abc);
                        //alert($(this).find('.BatchSerialNo').val());
                        if (($.trim($(this).find('.ProductId').text()) == ui.item.ProductId) && ($.trim($(this).find('.textdescription').val()) == "")) {
                            //alert('Duplicate Found !!');
                            toastr.error('Duplicate Found !! ' + ui.item.label);

                            if (confirm('Do You Want to Increase Qty. ?')) {
                                var prevqty = parseFloat($(this).find('.quantity').val());
                                var newqty = prevqty + 1;

                                var quantityid = $(this).find('.quantity').attr('id');
                                //alert(quantityid);
                                $("#" + quantityid).val(newqty).change();
                                //$('#quantityid').val(newqty);
                                //$(this).find('.quantity').text(newqty);

                                calculateSum();
                                $('#Search').val("");
                                duplicatefound = 1;
                                toastr.success('Qty Increased !! ' + ui.item.label);
                                return false;
                            }
                            //else {
                            //    alert('Why did you press cancel? You should have confirmed');
                            //}

                            duplicatefound = 1;
                            return true;
                        }

                    });


                    if (duplicatefound == 0) {
                        //$('#SalesItems').dataTable().fnAddData([
                        //    0,
                        //    SalesItemId,
                        //    ProductId,
                        //    ui.item.label,
                        //    0,//rowCountpl + 1,
                        //    '<a data-itemId="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash"></i></a >',
                        //    false,
                        //    false,
                        //    true,
                        //    ui.item.BatchSerialId
                        //]);
                        newrowwithui(ui);
                        //console.log(barcodeqty);

                    }





                    //newrowwithui(ui);

                    calculateSum();
                    $('#Search').val("");


                    return false;
                }
            }).autocomplete("instance")._renderItem = function(ul, item) {

                var trs = '';
                //console.log(item.WarehouseList);
                if (item.WarehouseList.length > 0) {

                    trs = '<p class="text-sm-left font-italic" style="font-size:12px"> Stock : ';
                    $.each($(item.WarehouseList), function(key, value) {
                        // alert('found');
                        trs += '[ ' + item.WarehouseList[key].WhShortName + ' - ' + item.WarehouseList[key].CurrentStock + ' ]   - Cost :' + item.WarehouseList[key].AverageCosting + '  ';
                    })

                    trs += '</p>';
                }

                return $("<li>")
                    .append("<div class=m-0>" + item.label + trs + "</div>")
                    .appendTo(ul);
            };
        }


        autocompletefunctionPhoneNo();
        function autocompletefunctionPhoneNo() {
            $("#PhoneNo").autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: '../admin/CustomerSearchByPhoneNo/',
                        dataType: "json",
                        data: { query: $("#PhoneNo").val() },
                        success: function(data) {
                            //console.log(data);
                            response($.map(data, function(item) {
                                return { PhoneNo: item.PhoneNo, CustomerName: item.CustomerName, PrimaryAddress: item.PrimaryAddress, label: item.PhoneNo + ' ' + item.CustomerName + ' ' + item.PrimaryAddress };
                            }));
                        },
                        error: function(xhr, status, error) {
                            alert("Error");
                        },
                    });
                },
                autoFocus: true,
                minLength: 2,
                change: function(event, ui) {
                    if (ui.item === null) {
                        //$(this).val('');
                        //$('#PhoneNo').val('');
                        $('#CustomerName').val('');
                        $('#CustomerAddress').val('');
                    }
                },
                select: function(event, ui) {
                    //$('#SearchCustomer').val(ui.item.PhoneNo);

                    $("#PhoneNo").val(ui.item.PhoneNo);
                    $("#CustomerName").val(ui.item.CustomerName);
                    $("#CustomerAddress").val(ui.item.PrimaryAddress);

                    return false;
                }
            });
        }

        $('#CustomerName').keydown(function() {
            if ($('#PhoneNo').val() == "") {
                //$('#PhoneNo').val('');
                $('#CustomerName').val('');
                $('#CustomerAddress').val('');
            }
        });


        autocompletefunctionBarcodeScan();
        function autocompletefunctionBarcodeScan() {
            $("#SearchSerial").autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: '../admin/ProductsSerialSearchByBarcode/',
                        dataType: "json",
                        data: { query: $("#SearchSerial").val() , WarehouseId : $("#Warehouse").val()},
                        success: function(data) {
                            //console.log(data);
                            response($.map(data, function(item) {
                                return { SerialId: item.Id, ProductId: item.ProductId, label: item.BatchSerialNo + ' || ' + item.ProductName, ProductName: item.ProductName, Description: item.Descriptionm, BatchSerialNo: item.BatchSerialNo, Price: item.SalePrice, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer , ProductDiscountAmount: item.ProductDiscountAmount, ProductDiscountPer: item.ProductDiscountPer };
                            }));


                            //function autoselectfunction() {



                            //};
                            //$(this).data('ui-autocomplete').menu.element.children().first().click();
                            //$('#SearchSerial').val("");
                        },
                        error: function(xhr, status, error) {
                            alert("Error");
                        },
                    });
                },
                response: function(event, ui) {
                    // Make your preferred selection here
                    //var item = ui.content[0].label;

                    //$(this).val(item).trigger('change');
                    //$(this).data('ui-autocomplete').menu.element.children().first().click();
                    //var e = $.Event("keypress", { which: 9 });
                    //$('#SearchSerial').trigger(e);
                    var len = $('.ui-autocomplete > li').length;
                    console.log(len);
                    if (len == "1") {

                        var downKeyEvent = $.Event("keydown");
                        downKeyEvent.keyCode = $.ui.keyCode.DOWN; // event for pressing "down" key

                        var enterKeyEvent = $.Event("keydown");
                        enterKeyEvent.keyCode = $.ui.keyCode.ENTER; // event for pressing "enter" key
                        ////alert('found');

                        ////$("#SearchSerial").val("SSD20"); // enter text to trigger autocomplete
                        $("#SearchSerial").trigger(downKeyEvent); // First downkey invokes search
                        $("#SearchSerial").trigger(downKeyEvent); // Second downkey highlights first item


                        $("#SearchSerial").trigger(enterKeyEvent); // Enter key selects
                    }

                },
                autoFocus: true,
                focus: function(event, ui) { event.preventDefault(); },
                minLength: 1,
                select: function(event, ui) {


                    var duplicatefound = 0;

                    $('#SalesItems tbody tr').each(function() {
                        if (($.trim($(this).find('.ProductId').text()) == ui.item.ProductId) && ($.trim($(this).find('.WarehouseId').text()) == $("#Warehouse").val()) && ($.trim($(this).find('.textdescription').val()) == "") && isMultiSelect == 1) { ///&& ($.trim($(this).find('.quantity').val()) == 1)
                            //alert('Duplicate Found !!');
                            //toastr.warning('Product Already Included Here !! ' + ui.item.label);

                            var array = $(this).find('.description').val() || null;
                            var quantityval = $(this).find('.quantity').val();


                            $(this).find('.IsTransaction').val(true);


                            //var arrayforappend = $(this).find('.description').val();

                            //console.log(array);
                            //var stringtext = $(this).find('.description option:selected').text();
                            //console.log(stringtext);

                            //var option_all = $(this).find('.description option:selected').map(function () {
                            //    return $(this).text();
                            //}).get().join(',');
                            //console.log(option_all);

                            //var arraytext = option_all.split(",");
                            //console.log(arraytext);

                            //duplicatefound = 1;

                            var serialtextboxid = $(this).find('.description').attr('id');
                            var quantityid = $(this).find('.quantity ').attr('id');

                            //alert(serialtextboxid);


                            $.each(array, function(key, value) {
                                //alert(ui.item.SerialId);
                                //alert(key + ": " + value);

                                if (value == ui.item.SerialId) {
                                    toastr.error('Duplicate Serial Found !! ' + ui.item.label);

                                }
                                else {

                                    //$.trim($(this).find('.ProductId').text())
                                    //var vendorsArray = [532, 533];
                                    array.push(ui.item.SerialId.toString());
                                    //console.log(arrayforappend);
                                    //$(this).find('.description').push(ui.item.SerialId.toString());
                                    //alert(serialtextboxid);

                                    $("#" + serialtextboxid).val(array).trigger('change');
                                    //$("#" + quantityid).val(parseFloat(quantityval)+1).trigger('change');

                                    //alert('poppuatedropdown');
                                    return true;
                                    //serialtextboxid.val(array).trigger('change');

                                    //var serialtextboxid = $(this).find('.description').getAttribute('id');
                                    //var id = $(this).find('.description').attr('id');
                                    //console.log(id);
                                    //id.val(array);
                                    //$("#D" + rowid).val(v.SerialItemArray);//v.SerialItem
                                }


                            });


                            //alert('get all data');


                            duplicatefound = 1;
                            return true;
                        }

                    });


                    if (duplicatefound == 0) {
                        newrowwithuiBarcode(ui);
                    }





                    //newrowwithuiBarcode(ui);

                    calculateSum();
                    $('#SearchSerial').val("");


                    return false;
                }
            }).on("focus", function() {
                if ($("#SearchSerial").val().length > 0) {
                    $(this).autocomplete("search", '');
                    //$(this).data('ui-autocomplete').menu.element.children().first().click();
                    //var e = $.Event("keypress", { which: 9 });
                    //$('#SearchSerial').trigger(e);
                };

            });
        }

        //$("#openButton").click(function () {
        //    $('#SearchSerial').focus();
        //});
        //var tag = $('#SearchSerial');
        //tag.on("autocompleteopen", function (event, ui) {
        //    var items = tag.autocomplete('instance').menu.element.children();
        //    if (items.length > 0 && autoPick) {
        //        items.eq(0).trigger('click')
        //        autoPick = false;
        //    }
        //});

        ////fahad working testing
        //$("#SearchSerial").val("SSD20212084");
        //$("#SearchSerial").focus();

        //if ($("#SearchSerial").val().length > 0) {
        //    $("#SearchSerial").data("ui-autocomplete").menu.element.children().first().click();
        //  //  $("ul.ui-autocomplete")
        //        //.find("li:contains(JavaScript)")
        //        //.trigger("click");
        //    //$("#SearchSerial").data("ui-autocomplete").menu.element.children().first().click();
        //    //$("#SearchSerial").val("");
        //}


        //$("#SearchSerial").on('keydown focusout', function (event) {
        //    if (event.keyCode != $.ui.keyCode.TAB && !(event.type == "focusout")) return;

        //    event.keyCode = $.ui.keyCode.DOWN;
        //    event.type = "keydown";//change the event from focusout
        //    $(this).trigger(event);

        //    event.keyCode = $.ui.keyCode.ENTER;
        //    $(this).trigger(event);
        //});


        //var e = $.Event("keypress", { which: 9 });
        //$('#SearchSerial').trigger(e);
        //alert('enter key hit');
        //autocompletefunctionBarcodeScan();



        autocompleteSerialSearchfunction();

        function autocompleteSerialSearchfunction() {
            //var tableserial = $('#SalesItems').DataTable();
            //var dataforserial = tableserial.row($('input[type=checkbox]:checked').parents('tr')).data();
            //console.log(dataforserial);
            //var PurchaseItemIdSerial = dataforserial[0];
            //var ProductIdSerial = dataforserial[1];

            $("#slnoSearch").autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: '../admin/ProductsBatchSerial/',
                        dataType: "json",
                        data: { query: $("#slnoSearch").val(), ProductId: ProductId ,WarehouseId : $("#Warehouse").val() },
                        success: function(data) {
                            //console.log(data);
                            //alert(data);
                            response($.map(data, function(item) {
                                //return { ProductId: item.Id, Description: item.Description, label: item.Name, Price: item.Price, Code: item.Code };
                                return { BatchSerialId: item.id, label: item.text };
                            }));
                        },
                        error: function(xhr, status, error) {
                            alert("Error");
                        },
                    });
                },
                autoFocus: true,
                minLength: 2,
                select: function(event, ui) {

                    var duplicatefound = 0;

                    $('#BatchSerialList tbody tr').each(function() {

                        //alert($(this).find('.BatchSerialNo').val());
                        //alert(ui.item.label);

                        //alert($(this).find('.BatchSerialNo').val());
                        if ($(this).find('.BatchSerialNo').val() == ui.item.label) {
                            //alert('Duplicate Found !!');
                            toastr.error('Duplicate Found !! ' + ui.item.label);
                            duplicatefound = 1;
                            return true;
                        }

                    });


                    if (duplicatefound == 0) {
                        $('#BatchSerialList').dataTable().fnAddData([
                            0,
                            SalesItemId,
                            ProductId,
                            ui.item.label,
                            1,
                            0,//rowCountpl + 1,
                            '<a data-itemId="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash"></i></a >',
                            false,
                            false,
                            true,
                            ui.item.BatchSerialId
                        ]);

                    }
                    ///alert('Wait');

                    var targetTablepl = $("#BatchSerialList").DataTable();

                    var xcount = targetTablepl.rows(':visible').count();
                    ////alert(xcount);
                    var table = $('#SalesItems').DataTable();
                    //var datacurrentvalue = table.row($('input[type=checkbox]:checked').parents('tr')).data();
                    var rownovouchersub = table.row($('input[type=checkbox]:checked').parents('tr')).index();
                    //alert(rownovouchersub);

                    var cellprice = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.price').val();
                    //console.log(cellprice);
                    //cellprice.data(xcount);

                    var cellqty = table.cell(rownovouchersub, 6);
                    cellqty.data(xcount);
                    var cellamount = table.cell(rownovouchersub, 8);
                    cellamount.data(xcount * cellprice);



                    var commissionamountrow = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.commissionamount').val();
                    //alert(commissionamountrow);
                    //console.log(commissionamountrow.data());
                    var cellcommissionamount = table.cell(rownovouchersub, 15);
                    cellcommissionamount.data(xcount * commissionamountrow);


                    //update();

                    calculateSum();


                    $('#slnoSearch').val("");
                    $('#slnoSearch').text("");


                    return false;

                    //calculateSum();


                }
            });
        }






        var SalesItemId;
        var ProductId;

        var newDetailsId;
        var newOrderNo;
        var newUnitPrice;



        function cbChange(obj) {
            //calculateQtyBatch();

            var cbs = document.getElementsByClassName("clickchk");
            for (var i = 0; i < cbs.length; i++) {
                cbs[i].checked = false;
            }
            obj.checked = true;
            //alert('hit');
            //console.log(obj);


            var table = $('#SalesItems').DataTable();
            //var tableserial = $('#tblserial').DataTable();
            var data = null;

            if (obj.checked == true) {
                //alert('working');
                //table = $('#tbl').DataTable();
                //table.draw();

                data = table.row($('input[type=checkbox]:checked').parents('tr')).data();

                SalesItemId = data[0];
                ProductId = data[1];


                //alert('clicked');
                //console.log(data);

                //alert(data[3]);
                //var termsid = data[0];
                ////////serialno = data[4];

                ////////SalesItemId = data[2];
                ////////newDetailsId = data[1];
                ////////newOrderNo = data[4];
                ////////newUnitPrice = data[9];

                //alert(serialno);


                $('#BatchSerialList tbody tr').show();
                //alert('working');
                $('#BatchSerialList tbody tr').each(function() {
                    //$(this).hide();

                    //alert($.trim($(this).find('.IsDelete').text()));


                    if ($.trim($(this).find('.ProductId').text()) == ProductId && $.trim($(this).find('.IsDelete').text()) == 'false') { // if V is selected, hide
                        //  alert('found');
                        $(this).show();
                    }
                    else {
                        $(this).hide();
                    }
                });


                var targetTablepl = $("#BatchSerialList").DataTable();

                var xcount = targetTablepl.rows(':visible').count();
                //alert(xcount);
                var table = $('#SalesItems').DataTable();
                //var datacurrentvalue = table.row($('input[type=checkbox]:checked').parents('tr')).data();
                var rownovouchersub = table.row($('input[type=checkbox]:checked').parents('tr')).index();
                //alert(rownovouchersub);

                var cellprice = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.price').val();
                //console.log(cellprice.data());
                //cellprice.data(xcount);

                var cellqty = table.cell(rownovouchersub, 7);
                cellqty.data(xcount);
                var cellamount = table.cell(rownovouchersub, 8);
                cellamount.data(xcount * cellprice);



                var commissionamountrow = $('#SalesItems tbody tr').filter(':has(:checkbox:checked)').find('.commissionamount').val();
                //alert(commissionamountrow);
                //console.log(commissionamountrow.data());
                var cellcommissionamount = table.cell(rownovouchersub, 15);
                cellcommissionamount.data(xcount * commissionamountrow);

                calculateSum();


            }
            else {
                // alert('You Un-Checked it');
            }

        }

        function newblankrow() {


            //alert('hit');

            var rowid = generateRandom();
            $('#SalesItems').dataTable().fnAddData(['0', 0, "", '', "", 0, '0', 0, '<a tabindex="-1" data-itemId="0" href="#" class="dlttrashsubsection deleteItem"> <i class="fa fa-trash"></i></a>', null, false, true, 0, 0, 0, '', 0, 0]);

            rowid = finalrowid;
            $("#N" + rowid).autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: '../admin/ProductSearchAvgCosting/',
                        dataType: "json",
                        data: { query: $("#N" + rowid).val(), WarehouseId: $("#WHI" + rowid).val() },
                        //data: { query: prdnametest },

                        success: function(data) {
                            //console.log(data);
                            //alert('Wait');
                            response($.map(data, function(item) {
                                //return { ProductId: item.Id, Description: item.Description, label: item.Name, Price: item.Price, Code: item.Code };
                                //return { ProductId: item.Id, Description: item.Description, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer };
                                return { ProductId: item.Id, Description: item.Description, ProductName: item.Name + ' ' + item.Description + ' ' + item.Code, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer , ProductDiscountAmount: item.ProductDiscountAmount, ProductDiscountPer: item.ProductDiscountPer, QuantityRow: barcodeqty, WarehouseList: item.WarehouseList };
                            }));
                        },
                        error: function(xhr, status, error) {
                            alert("Error");
                        },
                    });
                },
                minLength: 2,
                select: function(event, uirow) {

                    //console.log(uirow.item);
                    //alert("#P" + rowid);
                    $("#PI" + rowid).html(uirow.item.ProductId);
                    $("#D" + rowid).val(uirow.item.Description);

                    $("#P" + rowid).val(uirow.item.Price);
                    $("#CP" + rowid).val(uirow.item.CostPrice);
                    $("#CA" + rowid).val(uirow.item.CommissionAmount);
                    $("#CPR" + rowid).val(uirow.item.CommissionPer);
                    $("#UCA" + rowid).val(uirow.item.CommissionAmount * quantity);


                    $("#IDP" + rowid).val(uirow.item.ProductDiscountPer);
                    $("#IDA" + rowid).val(uirow.item.ProductDiscountAmount);



                    var quantity = $("#Q" + rowid).val();
                    ////$("#Q" + rowid).focus();
                    //$("#A" + rowid).html(uirow.item.Price * quantity);




                                    $("#D" + rowid).val(uirow.item.Description);
                                    var quantity = $("#Q" + rowid).val();
                                    //$("#Q" + rowid).focus();
                                    //$("#A" + rowid).html(uirow.item.Price * quantity);

                                        var isDiscountOffer = '@HttpContextAccessor.HttpContext.Session.GetInt32("isDiscountOffer").ToString()';
                                        var OfferDiscountPer = '@HttpContextAccessor.HttpContext.Session.GetString("OfferDiscountPer").ToString()';
                                        var ProductDiscountPer = 0;
                                        var ProductDiscountAmount = 0;

                                        //debugger

                                        if (isDiscountOffer > 0)
                                        {
                                            ProductDiscountPer = OfferDiscountPer;

                                            if (ui.item.ProductDiscountPer > 0)
                                            {
                                                ProductDiscountPer = uirow.item.ProductDiscountPer;
                                            }
                                        }


                                    $("#IDP" + rowid).val(ProductDiscountPer);
                                    $("#IDA" + rowid).val(ProductDiscountAmount);


                                  
                                    debugger

                                    $("#A" + rowid).html((uirow.item.quantity * uirow.item.Price - ((uirow.item.Price*ProductDiscountPer)/100)).toFixed(DecimalField));




                    //alert('hit');


                    //var myTab = document.getElementById('SalesItems');


                    // GET THE CELLS COLLECTION OF THE CURRENT ROW.
                    //var objCells = myTab.rows.item(2).cells;
                    //console.log(objCells[1].attr('id'));
                    //alert($().val());

                    //$('#SalesItems').data.reload();


                    //var table123 = $('#SalesItems').DataTable();

                    //let lastRow = table123.rows[table123.rows.length - 1];
                    //console.log(lastRow);

                    //var x = table123.row(':last-child').data();
                    //var z = x[1];
                    //console.log(x);

                    //var z = $('#SalesItems tbody tr').length;
                    ////alert(z);
                    //var abc = $('#SalesItems').dataTable().fnGetData()
                    //console.log(abc);
                    ////var aData = table123.row(z).data()[5];
                    ////alert(aData[z][1]);// will show first column data

                    //if (z > 0) {
                    //    newblankrow();
                    //}
                }
            }).autocomplete("instance")._renderItem = function(ul, item) {

                var trs = '';
                //console.log(item.WarehouseList);
                if (item.WarehouseList.length > 0) {

                    trs = '<p class="text-sm-left font-italic" style="font-size:12px"> Stock : ';
                    $.each($(item.WarehouseList), function(key, value) {
                        // alert('found');
                        trs += '[ ' + item.WarehouseList[key].WhShortName + ' - ' + item.WarehouseList[key].CurrentStock + ' ]   - Cost :' + item.WarehouseList[key].AverageCosting + '  ';
                    })

                    trs += '</p>';
                }

                return $("<li>")
                    .append("<div class=m-0>" + item.label + trs + "</div>")
                    .appendTo(ul);
            };




        }


        //function split(val) {
        //    return val.split(/,\s*/);
        //}
        //function extractLast(term) {
        //    return split(term).pop();
        //}


        function newrowwithui(ui) {

            //alert('wait');

            var rowid = generateRandom();


            if (($("#Warehouse").val() == null) || ($("#Warehouse").val() == "")) {
                toastr.error("Please Select Warehouse / Store location.")
                return true;
            }


            var isDiscountOffer = '@HttpContextAccessor.HttpContext.Session.GetInt32("isDiscountOffer").ToString()';
            var OfferDiscountPer = '@HttpContextAccessor.HttpContext.Session.GetString("OfferDiscountPer").ToString()';
            var ProductDiscountPer = 0;
            var ProductDiscountAmount = 0;

            //debugger

            if (isDiscountOffer > 0)
            {
                ProductDiscountPer = OfferDiscountPer;

                if (ui.item.ProductDiscountPer > 0)
                {
                    ProductDiscountPer = ui.item.ProductDiscountPer;
                }
            }




            $('#SalesItems').dataTable().fnAddData(['0', ui.item.ProductId, $("#Warehouse").val(), ui.item.label, ui.item.Description, $('#Warehouse option:selected').text(), ui.item.QuantityRow, ui.item.Price, (ui.item.QuantityRow * ui.item.Price - ((ui.item.Price*ProductDiscountPer)/100)), '<a tabindex="-1" data-itemId="0" href="#" class="dlttrashsubsection deleteItem"> <i class="fa fa-trash"></i></a>', null, false, true, ui.item.QuantityRow * ui.item.CostPrice, ui.item.CommissionAmount, ui.item.CommissionPer, ui.item.CommissionAmount, '',  ProductDiscountPer, ProductDiscountAmount]);
            
            if (isDiscountOffer > 0)
            {
                calculateSum();
            }
            //alert('found');
            rowid = finalrowid;
            //alert(rowid);

            $("#N" + rowid).autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: '../admin/ProductSearchAvgCosting/',
                        dataType: "json",
                        data: { query: $("#N" + rowid).val(), WarehouseId: $("#WHI" + rowid).val() },
                        //data: { query: prdnametest },

                        success: function(data) {
                            //console.log(data);
                            //alert('Wait');
                            response($.map(data, function(item) {
                                //return { ProductId: item.Id, Description: item.Description, label: item.Name, Price: item.Price, Code: item.Code };
                                //return { ProductId: item.Id, Description: item.Description, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer };
                                return { ProductId: item.Id, Description: item.Description, ProductName: item.Name + ' ' + item.Description + ' ' + item.Code, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer , ProductDiscountAmount: item.ProductDiscountAmount, ProductDiscountPer: item.ProductDiscountPer, QuantityRow: barcodeqty, WarehouseList: item.WarehouseList };
                            }));
                        },
                        error: function(xhr, status, error) {
                            alert("Error");
                        },
                    });
                },
                minLength: 2,
                autoFocus: true,
                select: function(event, uirow) {

                    
                    //alert('hit');
                    //alert(rowid);

                    //alert("#P" + rowid);
                    $("#PI" + rowid).html(uirow.item.ProductId);
                    $("#D" + rowid).val(uirow.item.Description);
                    $("#P" + rowid).val(uirow.item.Price);

                    $("#CP" + rowid).val(uirow.item.CostPrice);
                    $("#CA" + rowid).val(uirow.item.CommissionAmount);
                    $("#CPR" + rowid).val(uirow.item.CommissionPer);

                    $("#UCA" + rowid).val(uirow.item.CommissionAmount * quantity);

                    var quantity = $("#Q" + rowid).val();

                    ///$("#Q" + rowid).focus();////fahad

                    //$("#Search").keyup(function (ev) {
                    //    // 13 is ENTER
                    //    if (ev.which === 13) {
                    //        // do something
                    //        alert('hit');
                    //    }
                    //});


                       var isDiscountOffer = '@HttpContextAccessor.HttpContext.Session.GetInt32("isDiscountOffer").ToString()';
                                        var OfferDiscountPer = '@HttpContextAccessor.HttpContext.Session.GetString("OfferDiscountPer").ToString()';
                                        var ProductDiscountPer = 0;
                                        var ProductDiscountAmount = 0;

                                        //debugger

                                        if (isDiscountOffer > 0)
                                        {
                                            ProductDiscountPer = OfferDiscountPer;

                                            if (ui.item.ProductDiscountPer > 0)
                                            {
                                                ProductDiscountPer = uirow.item.ProductDiscountPer;
                                            }
                                        }


                                    $("#IDP" + rowid).val(ProductDiscountPer);
                                    $("#IDA" + rowid).val(ProductDiscountAmount);


                                    //alert('wait');

                                    //alert((uirow.item.quantity * uirow.item.Price - ((uirow.item.Price*ProductDiscountPer)/100)).toFixed(DecimalField));
                                    $("#A" + rowid).html((uirow.item.quantity * uirow.item.Price - ((uirow.item.Price*ProductDiscountPer)/100)).toFixed(DecimalField));

                    ////$("#A" + rowid).html(uirow.item.Price * quantity);

                    
                    //$("#Q" + rowid).focus(); -- off by fahad


                    //$("#Q" + rowid).val(uirow.item.QuantityRow);


                    //alert('hit');

                    //newblankrow();

                    //alert(rowid);

                    //var serialrowid = "#D" + rowid;
                    ////alert(serialrowid);
                    //$(document).on('change', serialrowid, function () {

                    //    var countlength = $(serialrowid +' :selected').length;
                    //    $("#Q" + rowid).val(countlength);
                    //    //alert(countlength);
                    //});



                    $("#D" + rowid).empty();
                    $("#D" + rowid).val(null);
                    //$("#D" + rowid).select2();

                    //arr.length = 0;

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ProductsBatchSerialMultiSelect", "Admin")',
                        dataType: 'json',
                        async: false,
                        data: { ProductId: $("#PI" + rowid).html(),WarehouseId : $("#Warehouse").val() },
                        success: function(data) {
                            //console.log(data);


                            $("#D" + rowid).select2({
                                 theme: 'bootstrap-5',
                                data: data,
                                escapeMarkup: function(markup) {
                                    return markup;
                                },
                                templateResult: function(data) {
                                    return data.html;
                                },
                                templateSelection: function(data) {
                                    return data.text;
                                }

                            })

                            //console.log(data);
                            //var s = '';//'<option value="-1">Please Select Product</option>';
                            ////alert(data.length);
                            //for (var i = 0; i < data.length; i++) {
                            //    s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                            //}
                            ////console.log(s);


                            //$("#D" + rowid).html(s);

                            //arr = s;
                        },
                        error: function(ex) {
                            alert('Failed.' + ex);
                        }

                    })

                }
            }).autocomplete("instance")._renderItem = function(ul, item) {

                var trs = '';
                //console.log(item.WarehouseList);
                if (item.WarehouseList.length > 0) {

                    trs = '<p class="text-sm-left font-italic" style="font-size:12px"> Stock : ';
                    $.each($(item.WarehouseList), function(key, value) {
                        // alert('found');
                        trs += '[ ' + item.WarehouseList[key].WhShortName + ' - ' + item.WarehouseList[key].CurrentStock + ' ]   - Cost :' + item.WarehouseList[key].AverageCosting + '  ';
                    })

                    trs += '</p>';
                }

                return $("<li>")
                    .append("<div class=m-0>" + item.label + trs + "</div>")
                    .appendTo(ul);
            };




            var stringarray = [""];
            var arr = [];

            var arr_pincode = {};//JSON.parse(`{"24":[${stringarray}]}`);
            //var selected_state = [24, 27];
            //var selected_pin = JSON.parse('["380001"]');

            //var already_slc_pin = [];
            //var current_pin = [];


            $("#D" + rowid).select2({
                 theme: 'bootstrap-5',
                minimumResultsForSearch: Infinity
            });


            $("#D" + rowid).empty();
            arr.length = 0;
            //$("#Q" + rowid).focus();


            //$("#Search").focus();


            if (searchtypesessionabc == "Scanner") {

                $("#Search").focus();

            }
            else {
                $("#Q" + rowid).focus();


                $("#Q" + rowid).bind('keypress', function(e) {
                    if (e.keyCode == 13) {
                        if ($("#Q" + rowid).val() != '') {
                            $("#P" + rowid).focus();
                            //$("#Search").focus();

                        }
                        // Enter pressed... do anything here...
                    }
                });

                 $("#P" + rowid).bind('keypress', function(e) {
                    if (e.keyCode == 13) {
                        if ($("#P" + rowid).val() != '') {
                            $("#Search").focus();

                        }
                        // Enter pressed... do anything here...
                    }
                });



                $("#Q" + rowid).val('1');
                                $("#P" + rowid).select();
                $("#Q" + rowid).select();


            }





            //            $("#Q" + rowid).keyup(function (ev) {
            //// 13 is ENTER
            //    if (ev.which == 13) {
            //        // do something
            //        alert('13');
            //       $("#Search").focus();
            //    }
            //    else
            //    {
            //    alert('not 13');
            //    }
            //});

            //    .on("keydown", function (e) {

            //        if (e.keyCode === 13) {

            //            $("#Search").focus();
            //        }
            //    });



            $.ajax({
                type: 'POST',
                url: '@Url.Action("ProductsBatchSerialMultiSelect", "Admin")',
                dataType: 'json',
                async: false,
                data: { ProductId: $("#PI" + rowid).html() , WarehouseId : $("#Warehouse").val() },
                success: function(data) {
                    // console.log(data);



                    $("#D" + rowid).select2({
                         theme: 'bootstrap-5',
                        data: data,
                        escapeMarkup: function(markup) {
                            return markup;
                        },
                        templateResult: function(data) {
                            return data.html;
                        },
                        templateSelection: function(data) {
                            return data.text;
                        }

                    });

                    //var s = '';//'<option value="-1">Please Select Product</option>';
                    ////alert(data.length);
                    //for (var i = 0; i < data.length; i++) {
                    //    s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                    //}
                    ////console.log(s);


                    //$("#D" + rowid).html(s);

                    //arr = s;
                },
                error: function(ex) {
                    alert('Failed.' + ex);
                }

            });
            return false;
        };


        function newrowwithuiBarcode(ui) {


            var isDiscountOffer = '@HttpContextAccessor.HttpContext.Session.GetInt32("isDiscountOffer").ToString()';
            var OfferDiscountPer = '@HttpContextAccessor.HttpContext.Session.GetString("OfferDiscountPer").ToString()';
            var ProductDiscountPer = 0;
            var ProductDiscountAmount = 0;

            //debugger

            if (isDiscountOffer > 0)
            {
                ProductDiscountPer = OfferDiscountPer;

                if (ui.item.ProductDiscountPer > 0)
                {
                    ProductDiscountPer = ui.item.ProductDiscountPer;
                }
            }


            var rowid = generateRandom();
            $('#SalesItems').dataTable().fnAddData(['0', ui.item.ProductId, $("#Warehouse").val(), ui.item.ProductName, ui.item.Description, $('#Warehouse option:selected').text(),'1', ui.item.Price, (ui.item.QuantityRow * ui.item.Price - ((ui.item.Price*ProductDiscountPer)/100)), '<a data-itemId="0" href="#" class="dlttrashsubsection deleteItem"> <i class="fa fa-trash"></i></a>', null, false, true, ui.item.CostPrice, ui.item.CommissionAmount, ui.item.CommissionPer, ui.item.CommissionAmount, '', ProductDiscountPer, ProductDiscountAmount]);



            rowid = finalrowid;

            $("#N" + rowid).autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: '../admin/ProductSearchAvgCosting/',
                        dataType: "json",
                        data: { query: $("#N" + rowid).val(), WarehouseId: $("#WHI" + rowid).val() },
                        //data: { query: prdnametest },

                        success: function(data) {
                            //alert('wait');

                            //console.log(data);
                            //alert('Wait');
                            response($.map(data, function(item) {
                                //return { ProductId: item.Id, Description: item.Description, label: item.Name, Price: item.Price, Code: item.Code };
                                //return { ProductId: item.Id, Description: item.Description, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer };
                                return { ProductId: item.Id, Description: item.Description, ProductName: item.Name + ' ' + item.Description + ' ' + item.Code, label: item.Category.Name + ' ' + item.Name + ' ' + item.BrandName + ' ' + item.Description + ' ' + item.SizeName + ' ' + item.ColorName + ' ' + item.Code, Price: item.Price, CostPrice: item.CostPrice, CommissionAmount: item.CommissionAmount, CommissionPer: item.CommissionPer , ProductDiscountAmount: item.ProductDiscountAmount, ProductDiscountPer: item.ProductDiscountPer, QuantityRow: barcodeqty, WarehouseList: item.WarehouseList };

                            }));
                        },
                        error: function(xhr, status, error) {
                            alert("Error");
                        },
                    });
                },
                minLength: 2,
                autoFocus: true,
                select: function(event, uirow) {

                    //alert("#P" + rowid);
                    $("#PI" + rowid).html(uirow.item.ProductId);
                    $("#D" + rowid).val(uirow.item.Description);
                    $("#P" + rowid).val(uirow.item.Price);

                    $("#CP" + rowid).val(uirow.item.CostPrice);
                    $("#CA" + rowid).val(uirow.item.CommissionAmount);
                    $("#CPR" + rowid).val(uirow.item.CommissionPer);

                    $("#UCA" + rowid).val(uirow.item.CommissionAmount * quantity);


                    var quantity = $("#Q" + rowid).val();
                    //$("#Q" + rowid).focus();



                       var isDiscountOffer = '@HttpContextAccessor.HttpContext.Session.GetInt32("isDiscountOffer").ToString()';
                                        var OfferDiscountPer = '@HttpContextAccessor.HttpContext.Session.GetString("OfferDiscountPer").ToString()';
                                        var ProductDiscountPer = 0;
                                        var ProductDiscountAmount = 0;

                                        //debugger

                                        if (isDiscountOffer > 0)
                                        {
                                            ProductDiscountPer = OfferDiscountPer;

                                            if (ui.item.ProductDiscountPer > 0)
                                            {
                                                ProductDiscountPer = uirow.item.ProductDiscountPer;
                                            }
                                        }


                                    $("#IDP" + rowid).val(ProductDiscountPer);
                                    $("#IDA" + rowid).val(ProductDiscountAmount);


                                    //alert('wait');
                                    $("#A" + rowid).html((uirow.item.quantity * uirow.item.Price - ((uirow.item.Price*ProductDiscountPer)/100)).toFixed(DecimalField));


                    //////$("#A" + rowid).html(uirow.item.Price * quantity);
                    
                    
                    //newblankrow();
                    //alert('hit');

                    //alert(rowid);


                    $("#D" + rowid).empty();
                    $("#D" + rowid).val(null);
                    //$("#D" + rowid).select2();

                    //arr.length = 0;

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ProductsBatchSerialMultiSelect", "Admin")',
                        dataType: 'json',
                        async: false,
                        data: { ProductId: $("#PI" + rowid).html() , WarehouseId : $("#Warehouse").val() },
                        success: function(data) {


                            $("#D" + rowid).select2({
                                 
                                data: data,
                                escapeMarkup: function(markup) {
                                    return markup;
                                },
                                templateResult: function(data) {
                                    return data.html;
                                },
                                templateSelection: function(data) {
                                    return data.text;
                                },
                                theme: 'bootstrap-5'
                            })

                            //alert('wait');
                            //console.log(data);
                            //var s = '';//'<option value="-1">Please Select Product</option>';
                            ////alert(data.length);
                            //for (var i = 0; i < data.length; i++) {
                            //    s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                            //}
                            ////console.log(s);


                            //$("#D" + rowid).html(s);

                            //arr = s;
                        },
                        error: function(ex) {
                            alert('Failed.' + ex);
                        }

                    });

                }
            });




            var stringarray = [""];
            var arr = [];

            var arr_pincode = {};//JSON.parse(`{"24":[${stringarray}]}`);
            //var selected_state = [24, 27];
            //var selected_pin = JSON.parse('["380001"]');

            //var already_slc_pin = [];
            //var current_pin = [];


            $("#D" + rowid).select2({
                 theme: 'bootstrap-5',
                minimumResultsForSearch: Infinity
            });


            $("#D" + rowid).empty();
            arr.length = 0;

            $.ajax({
                type: 'POST',
                url: '@Url.Action("ProductsBatchSerialMultiSelect", "Admin")',
                dataType: 'json',
                async: false,
                data: { ProductId: $("#PI" + rowid).html() ,WarehouseId : $("#Warehouse").val()},
                success: function(data) {



                    $("#D" + rowid).select2({
                         theme: 'bootstrap-5',
                        data: data,
                        escapeMarkup: function(markup) {
                            return markup;
                        },
                        templateResult: function(data) {
                            return data.html;
                        },
                        templateSelection: function(data) {
                            return data.text;
                        }

                    })

                    //console.log(data);
                    //var s = '';//'<option value="-1">Please Select Product</option>';
                    ////alert(data.length);
                    //for (var i = 0; i < data.length; i++) {
                    //    s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                    //}
                    ////console.log(s);


                    //$("#D" + rowid).html(s);

                    //arr = s;
                },
                error: function(ex) {
                    alert('Failed.' + ex);
                }

            });


            $("#D" + rowid).val(ui.item.SerialId);
            $("#D" + rowid).change();


            return false;
        };





        function calculateSum() {
            var sum = 0.00;
            var sumQty = 0;
            var countQty = 0;
            var sumPriceBeforeDiscount = 0.00;
            var sumPriceDiscount = 0.00;

            // iterate through each td based on class and add the values
            //$("#SalesItems > tbody  > tr .amount").each(function () {

            //    var value = $(this).text();
            //    // add only if the value is number
            //    if (!isNaN(value) && value.length !== 0) {
            //        sum += parseFloat(value);
            //    }
            //});

            //var table = $('#SalesItems').DataTable();
            //var data = table.$('input, select').serialize();
            //console.log(data)
            //alert('wait');

            //$.each($("#SalesItems tbody tr"), function () {
            //// i++;
            //// alert(i);



            // console.log($(this).find('td').children('input[name="prdname"]').attr("value"));
            // //console.log($(this).find('td').children('input[name="price"]').attr("value"));
            // //console.log($(this).find('td').children('input[name="quantity"]').attr("value"));
            // console.log($(this).find('td').children('input[name="textdescription"]').attr("value"));
            // //console.log($(this).find('td').children('input[name="amount"]').attr("value"));

            // //console.log(parseFloat($(this).find('.amount').val()))

            // //console.log($(this).parents('tr').find(".amount").html());

            // console.log(parseFloat($(this).find(".costprice").html()));


            // //console.log($(this).find('td').children('input[name="textdescription"]').text());
            // //console.log($(this).find('td').children('input[name="inddisper"]').html());
            // //console.log($(this).find('td').children('input[name="inddisount"]').attr("value"));


            // //console.log(document.getElementsByName("textdescription").value = 30);

            // //$(this).find('td:eq(3)').html()
            // //alert('wait');
            //});



            $("#SalesItems > tbody  > tr .amount:visible").each(function() {

                //var value = parseInt($(this).find('.amount').val());// $('.amount', this).text().replace(/[\$,]/g, '');//$(this).text();
                var value = $(this).text();

                //alert(value)
                // add only if the value is number
                if (!isNaN(value) && value.length !== 0) {
                    sum += parseFloat(value);
                }
            });


            //alert(sum);

            if (sum == 0) {
                $('#Discount').text("0");

                $('#CustomerCommissionAmount').val(0);
                $('#SRCommissionAmount').val(0);
                //$('#CustomerCommissionPer').val(0);
                //$('#SRCommissionPer').val(0);


                $('#GrandTotal').text("0");
                $('#PaidAmount').text("0");
                $('#ChangeAmount').text("0");

                $('#TotalVat').text("0");
                $('#ServiceCharge').text("0");
                $('#Shipping').text("0");
                $('#PrevDue').text("0");
                $('#CreditLimit').text("0");
                $('#TotalDue').text("0");


            }


            $.each($("#BatchSerialList tbody tr"), function() {

                var Quantity = parseInt($(this).find('.SLNo').val());

                if (!isNaN(Quantity) && Quantity.length !== 0) {
                    sumQty++;
                }
            });


            $.each($("#SalesItems tbody tr:visible"), function() {

                var Quantity = parseFloat($(this).find('.quantity').val());
                var UnitPrice  =  parseFloat($(this).find('.price').val());
                var AmountAfterDiscount  =  parseFloat($(this).find('.amount').text());
                ///alert(AmountAfterDiscount);

                let PriceBeforeDiscount = parseFloat(Quantity) * parseFloat(UnitPrice);
                let DiscountPrice =  (parseFloat(Quantity) * parseFloat(UnitPrice)) - parseFloat(AmountAfterDiscount);

                if (!isNaN(Quantity) && Quantity.length !== 0) {
                    sumQty += parseFloat(Quantity);
                    sumPriceBeforeDiscount +=  parseFloat(PriceBeforeDiscount);
                    sumPriceDiscount +=  parseFloat(DiscountPrice);

                }

                if (!isNaN(Quantity) && Quantity.length !== 0) {
                    countQty++;
                }

            });



            //console.log(sum);
            $('#SubTotal').text(sum.toFixed(DecimalField));
            $('#GrandTotal').val(sum.toFixed(DecimalField));

            $('#TotalQty').text(sumQty.toFixed(DecimalField));
            $('#TotalCountQty').text(countQty);


            $('#TotalInfo').text(sumPriceBeforeDiscount.toFixed(DecimalField));
            $('#TotalDiscountInfo').text(sumPriceDiscount.toFixed(DecimalField));



            var radioValue = $("input[name='DiscountMethod']:checked").val();
            var disper = $('#DisPer').val().replace(/,/g, '') || 0;
            var disamt = $('#Discount').val();

            //alert(radioValue);

            //console.log(radioValue);
            if (radioValue == "totalpercentage") {

                //console.log(disper);
                //console.log(totalvalue.toFixed(DecimalField));

                //alert('totalpercentage');
                var x = ((parseFloat(sum.toFixed(4)) * parseFloat(disper)) / 100);
                //console.log(x);
                $('#Discount').val(x.toFixed(4));



            }
            else if (radioValue == "totalamount") {
                //console.log('totalamount');
                //console.log(disamt);
                //console.log(totalvalue);

                var totaldisper = (parseFloat(disamt) / parseFloat(sum.toFixed(4))) * 100;

                //alert(totalvalue);
                //alert(totaldisper);
                //alert(disamt);
                $("#DisPer").text(totaldisper.toFixed(4));//---fahad
                $("#DisPer").val(totaldisper.toFixed(4));//---fahad


            }

             var IsFixedDiscountMainValue = '@HttpContextAccessor.HttpContext.Session.GetInt32("IsFixedDiscountMainValue").ToString()';
             var MaxDiscountMainValue = '@HttpContextAccessor.HttpContext.Session.GetString("MaxDiscountMainValue").ToString()';
             var MaxDiscountPercentageMainValue = '@HttpContextAccessor.HttpContext.Session.GetString("MaxDiscountPercentageMainValue").ToString()';

            

            if (MaxDiscountMainValue > 0 || MaxDiscountPercentageMainValue > 0)
            {
             var textdiscount  = parseFloat($('#Discount').val());
             var textdisper = parseFloat($('#DisPer').val());


             if (textdiscount >  MaxDiscountMainValue)
             {
                 toastr.error("Discount is not Allowed");
                 $('#Discount').val(0);
                 $('#DisPer').val(0);

             }
             //alert(textdisper);
             //alert(MaxDiscountPercentageMainValue);

             if (textdisper >  MaxDiscountPercentageMainValue)
             {
                 toastr.error("Discount is not Allowed");
                 $('#Discount').val(0);
                 $('#DisPer').val(0);

             }

            }





            var CustomerCommissionPer = parseFloat($('#CustomerCommissionPer').val()).toFixed(DecimalField);
            var SRCommissionPer = parseFloat($('#SRCommissionPer').val()).toFixed(DecimalField);
            //alert(CustomerCommissionPer);
            //alert(SRCommissionPer);



            if (CustomerCommissionPer > 0) {
                var xx = ((parseFloat(sum.toFixed(DecimalField)) * parseFloat(CustomerCommissionPer)) / 100);
                //console.log(x);
                $('#CustomerCommissionAmount').val(xx.toFixed(DecimalField)).show();
                sum = parseFloat(parseFloat(sum.toFixed(DecimalField)) - parseFloat(xx.toFixed(DecimalField)));
            }
            else {
                $('#CustomerCommissionAmount').val(0.00).show();
            }


            if (SRCommissionPer > 0) {
                var xxx = ((parseFloat(sum.toFixed(DecimalField)) * parseFloat(SRCommissionPer)) / 100);
                //console.log(x);
                $('#SRCommissionAmount').val(xxx.toFixed(DecimalField));
            }
            else {
                $('#SRCommissionAmount').val(0.00);
            }

            var CustomerCommissionAmount = 0.00;
            var SRCommissionAmount = 0.00;
            CustomerCommissionAmount = parseFloat($('#CustomerCommissionAmount').val()).toFixed(DecimalField);
            SRCommissionAmount = parseFloat($('#SRCommissionAmount').val()).toFixed(DecimalField);


            var discount = 0;//0.00;
            discount = parseFloat($('#Discount').val()).toFixed(4);
            if (isNaN(discount)) return;
            var subtotal = parseFloat(sum).toFixed(DecimalField);


            var isTaxExcluded = '@HttpContextAccessor.HttpContext.Session.GetInt32("isTaxExcluded").ToString()';
            var TaxPer = '@HttpContextAccessor.HttpContext.Session.GetString("TaxPer").ToString()';
            var TotalVat = 0.00;


            if (TaxPer > 0) {
                //alert(isTaxExcluded);
                //alert(subtotal);
                //alert(TaxPer);

                $('#TotalVat').attr('readonly', true);

                if (isTaxExcluded == 1) {

                    var taxamount = (subtotal * (parseFloat(TaxPer) * 100)) / 100;

                    $('#TotalVat').val(taxamount.toFixed(DecimalField));
                    TotalVat = taxamount.toFixed(DecimalField);
                }
                else {
                    var taxmount = subtotal - (subtotal / (parseFloat(TaxPer) + 1));

                    $('#TotalVat').val(taxmount.toFixed(DecimalField));
                    //alert(taxmount);
                }
            }
            else {
                TotalVat = parseFloat($('#TotalVat').val() || 0);
            }



            //var TotalVat = parseFloat($('#TotalVat').val()).toFixed(DecimalField);



            var ServiceCharge = parseFloat($('#ServiceCharge').val()).toFixed(DecimalField);
            var Shipping = parseFloat($('#Shipping').val()).toFixed(DecimalField);

            //console.log(TotalVat);
            //console.log(ServiceCharge);
            //console.log(Shipping);
            //console.log(subtotal);
            //console.log(Shipping);

            var grandtotal = 0.00;
            grandtotal = parseFloat(parseFloat(TotalVat) + parseFloat(ServiceCharge) + parseFloat(Shipping) + parseFloat(subtotal) - (parseFloat(discount) + parseFloat(CustomerCommissionAmount) + parseFloat(SRCommissionAmount)));
            //alert(grandtotal);

            //alert(CustomerCommissionAmount);
            //alert(SRCommissionAmount);
            //alert(discount);


            $('#GrandTotal').val(grandtotal);




            //$('#PaymentAmount').val(grandtotal);


            //var tableabc = $('#tblpayments').DataTable();
            //var column = tableabc.column(5);
            //$(column.footer()).html(
            //    column.data().reduce(function (a, b) {
            //        return a + b;
            //    })
            //);


            var sumpayment = 0.00;
            $("#tblpayments > tbody  > tr .Amount").each(function() {

                var value = $(this).text();
                // add only if the value is number
                if (!isNaN(value) && value.length !== 0) {
                    sumpayment += parseFloat(value);
                }
            });

            let differenceamount  = parseFloat(sumpayment) - parseFloat(grandtotal);

            if (differenceamount > 0.001) {
                //alert('Credit Limit Over for this supplier..');
                alert("Receiving Amount Should be less than the Bill Amount..");

                toastr.error("Receiving Amount Should be less than the Bill Amount..");

                //return true;
            }


            //alert(sumpayment);

            $('#TotalCollectionAmount').text(sumpayment.toFixed(DecimalField));
            $('#PaymentAmount').val(parseFloat(grandtotal - sumpayment).toFixed(DecimalField));


            var PaidAmount = parseFloat($('#PaidAmount').val()).toFixed(DecimalField) || 0;

            if (PaidAmount > 0) {
                $('#ChangeAmount').val(PaidAmount - grandtotal);

            }



            var totalcommissionamount = 0.00;
            $("#SalesItems > tbody  > tr .usercommissionamount").each(function() {

                var value = $(this).text();
                // add only if the value is number
                if (!isNaN(value) && value.length !== 0) {
                    totalcommissionamount += parseFloat(value);
                }
            });
            //alert(totalcommissionamount);
            $('#UserCommission').val(totalcommissionamount.toFixed(DecimalField));


            var PrevDue = $('#PrevDue').val();
            //alert(PrevDue);
            //alert(grandtotal);
            //alert(sumpayment);

            //alert($('#TotalCollectionAmount').text());

            var TotalDue = parseFloat(PrevDue) + parseFloat(grandtotal) - parseFloat(sumpayment);
            $('#TotalDue').val(TotalDue).change();

            //alert('wait');

            //var sum = $('#tblpayments').DataTable().column(5).data().sum();
            //$('#TotalCollectionAmount').html(sum);

            //$.each($("#tblpayments tbody tr"), function () {

            //    var payamount = parseFloat($(this).find('.Amount').val());

            //    alert(payamount);

            //    if (!isNaN(payamount) && payamount.length !== 0) {
            //        sumQty += parseFloat(payamount);
            //    }
            //});



            //$('#TotalCollectionAmount').text(sumQty.toFixed(DecimalField));



            //console.log(grandtotal);

            //var CreditLimit = $('#CreditLimit').val();
            //alert('start');
            //alert($('#PrevDue').val());
            //alert($('#GrandTotal').val());
            //alert($('#TotalCollectionAmount').text());
            //alert('end');


            //alert(TotalDue);

        };

        //function DiscountAmount() {
        //    //blankme("Discount");
        //    //blankme("GrandTotal");
        //    var discount = parseFloat($('#Discount').val()).toFixed(DecimalField);
        //    if (isNaN(discount)) return;
        //    var subtotal = parseFloat($('#SubTotal').text()).toFixed(DecimalField);
        //    var grandtotal = parseFloat(a - b).toFixed(DecimalField);
        //    $('#GrandTotal').val(grandtotal);
        //}

        @*function saveOrder(data) {

        //alert('Fahad found sales');
        //console.log(data);
        return $.ajax({
        contentType: 'application/json; charset=utf-8',
        //contentType: "application/json",
        dataType: 'json',
        type: 'POST',
        url: "../Sales/AddSale",
        data: data,
        success: function (result) {
        //console.log(result);
        //alert('Wait');
        if (result.Success == "1") {
        toastr.success(result.message);

        window.setTimeout(function () {
        // Move to a new location or you can do something else
        window.location.href = '@Url.Action("Index", "Sales")';
        }, 1000);

        }
        else {
        toastr.error(result.ex);
        }
        },
        error: function (result) {

        if (result.ex = "") {
        toastr.error("Unable To Save The Data");
        } else {
        toastr.error(result.ex);

        }
        }
        });
        }*@

            $("#BtnSave").click(function(e) {
                e.preventDefault();

                if (submitValidation()) {


                    let isvalid = true;

                    $.each($("#SalesItems tbody tr"), function() {
                        ////var arraytest = $(this).find('.description').val() ;
                        //console.log( $(this).find('.IsDelete').val());
                        //console.log( $(this).find('.IsDelete').html());
                        //alert('wait');

                        if ($(this).find('.description').has('option').length > 0 && $(this).find('.description').val() == "" && $(this).find('.IsDelete').html() == 'false') {
                            toastr.error("Please Select IMEI Number For " + $(this).find('.prdname').val());
                            isvalid = false;
                            return false;
                        }

                        //else
                        //{
                        // alert('not found');
                        //}

                    });


                    if (!isvalid) {
                        return false;
                    }



                    var discount;
                    if (parseFloat($('#Discount').val()).toFixed(DecimalField) == "NaN") {
                        discount = 0;
                    }
                    else {
                        discount = $('#Discount').val();
                    }

                    var customercommissionper = 0.00;
                    var customercommissionamount = 0.00;
                    if (parseFloat($('#CustomerCommissionAmount').val()).toFixed(DecimalField) == "NaN") {
                        customercommissionper = 0;
                        customercommissionamount = 0;
                    }
                    else {
                        customercommissionper = $('#CustomerCommissionPer').val();
                        customercommissionamount = $('#CustomerCommissionAmount').val();
                    }

                    var srcommissionper = 0.00;
                    var srcommissionamount = 0.00;
                    if (parseFloat($('#SRCommissionAmount').val()).toFixed(DecimalField) == "NaN") {
                        srcommissionper = 0;
                        srcommissionamount = 0;
                    }
                    else {
                        srcommissionper = $('#SRCommissionPer').val();
                        srcommissionamount = $('#SRCommissionAmount').val();
                    }


                    if ($('#tblpayments').length == 0) {
                        $('#PaymentAmount').val($('#mainpaidamount').val());
                        //$('#PaymentTypes').val().change();
                        AddPayments();
                    }





                    var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                    var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                    //var VatViewActivate = '@HttpContextAccessor.HttpContext.Session.GetInt32("VatViewActivate").ToString()';
                    //var isVatSales = VatViewActivate == 1;
                    // $("#isVatSales").val(isVatSales);
                    //alert(isVatSales);

                    var orderArr = [];
                    orderArr.length = 0;
                    var i = 0
                    $.each($("#SalesItems tbody tr"), function() {
                        // i++;
                        // alert(i);

                        //alert($(this).find('td:eq(3)').html());
                        //alert($(this).find('td:eq(3)').text());

                        //alert($(this).find('.description').val());
                        //alert($(this).find('.description').html());
                        //alert($(this).find('.description').text());

                        var array = [];


                        if (isMultiSelect == 1)
                        {

                        array = $(this).find('.description').val() || null;

                        }
                        else
                        {
                        array.push($(this).find('.description').val());

                        }


                        //console.log(array);
                        var stringtext = $(this).find('.description option:selected').text();
                        //$('#ItemDescId option:selected').text()

                        //alert(arraytext);

                        //console.log(serialliststring);
                        //var array = serialliststring.split(',');

                        //var arraytext = stringtext.split(",");

                        //$.each(arraytext, function (i) {
                        //    alert(arraytext[i]);
                        //});


                        var option_all = $(this).find('.description option:selected').map(function() {
                            return $(this).text();
                        }).get().join(',');
                        //console.log(option_all);
                        //$('#result').text(option_all);


                        var arraytext = option_all.split(",");

                        //$.each(arraytext, function (i) {
                        //    alert(arraytext[i]);
                        //});

                        var firstsalesitemid = $(this).find(".id").html();
                        var firstproductid = parseFloat($(this).find(".productid").html());
                        var firstquantity = parseFloat($(this).find('.quantity').val());

                        var orderbatchArr = [];
                        orderbatchArr.length = 0;

                        //console.log(array);
                        //alert('Wait for array');

                        $.each(array, function(i) {


                            orderbatchArr.push({
                                Id: 0,
                                SalesItemId: firstsalesitemid,
                                ProductId: firstproductid,
                                BatchSerialNo: arraytext[i],
                                SalesBatchQuantity: firstquantity,
                                SLNo: 0,
                                IsDelete: false,
                                IsUsed: false,
                                IsTransaction: false,
                                ComId: ComId,
                                PurchaseBatchId: array[i]
                            });


                        });




                        //$.each($("#BatchSerialList tbody tr"), function () {
                        //       if ($.trim($(this).find('.BatchSerialNo').val()).length > 0) {
                        //           //alert(parseFloat($(this).find(".warehouseid").html()));
                        //           var secoundproductid = parseFloat($(this).find(".warehouseid").html());
                        //           //var IsDeletebatch = $(this).find('td:eq(6)').html();
                        //           //alert(IsDeletebatch);

                        //           if (firstproductid == secoundproductid) { // && IsDeletebatch == 'false'
                        //               //alert($(this).find(".id").html());
                        //               // alert($(this).find('td:eq(6)').html());


                        //               if ($(this).find(".id").html() == 0 && $(this).find('td:eq(9)').html() == 'false') {
                        //                   //alert('pruchaseid = 0');
                        //                       orderbatchArr.push({
                        //                           Id: 0,
                        //                           SalesItemId: firstsalesitemid,
                        //                           ProductId: firstproductid,
                        //                           BatchSerialNo: arraytext[i],
                        //                           SalesBatchQuantity: $(this).find('.salesbatchquantity').val(),
                        //                           SLNo: 0,
                        //                           IsDelete: false,
                        //                           IsUsed: false,
                        //                           IsTransaction: false,
                        //                           ComId: ComId,
                        //                           PurchaseBatchId:  $(this).find('td:eq(10)').html()
                        //                       });
                        //               }
                        //               else if ($(this).find(".id").html() > 0) {
                        //                   //alert('pruchaseid > 0');
                        //                   orderbatchArr.push({
                        //                       Id: $(this).find(".id").html(),
                        //                           SalesItemId: firstsalesitemid,
                        //                           ProductId: firstproductid,
                        //                           BatchSerialNo: arraytext[i],
                        //                           SalesBatchQuantity: $(this).find('.salesbatchquantity').val(),
                        //                           SLNo: 0,
                        //                           IsDelete: false,
                        //                           IsUsed: false,
                        //                           IsTransaction: false,
                        //                           ComId: ComId,
                        //                           PurchaseBatchId:  $(this).find('td:eq(10)').html()
                        //                   });


                        //               }
                        //               //else {
                        //               //    alert('pruchaseid =  else');
                        //               //}
                        //           }
                        //       }
                        //   });


                        //   console.log(orderbatchArr);
                        //   alert('Wait');



                        //console.log(parseFloat($(this).find(".costprice").html()));

                        if ($(this).find(".id").html() == 0 && $(this).find(".IsDelete").html() == 'false' && parseFloat($(this).find('.quantity').val()) > 0) {

                            orderArr.push({

                                Id: $(this).find(".id").html(),
                                ProductId: parseFloat($(this).find(".productid").html()),
                                SalesId: parseInt($("#BtnSave").attr("data-sale-Id")),
                                WarehouseId: parseFloat($(this).find(".warehouseid").html()), //$('#Warehouse option:selected').text()
                                //Name: parseFloat($(this).find(".warehouseid").html()),
                                Name: $(this).find('.prdname').val(),
                                //Description: $(this).find('.description').val(),
                                Price: parseFloat($(this).find('.price').val()),
                                CostPrice: parseFloat($(this).find(".costprice").html()),
                                CommissionAmount: parseFloat($(this).find(".commissionamount").html()),
                                CommissionPer: parseFloat($(this).find(".commissionper").html()),
                                UserCommissionAmount: parseFloat($(this).find(".usercommissionamount").html()),

                                Description: $(this).find('.textdescription').val(),
                                IndDisPer: parseFloat($(this).find('.inddisper').val()) || 0,
                                IndDiscount: parseFloat($(this).find('.inddiscount').val()) || 0,

                                //Price: parseFloat($(this).find('td:eq(4)').html()),
                                Quantity: parseFloat($(this).find('.quantity').val()),
                                Amount: parseFloat($(this).find(".amount").html()),
                                BatchSerialItems: orderbatchArr,
                                SerialItem: !array ? 'Null' : array.toString(),
                                IsDelete: $(this).find(".IsDelete").html(),
                                IsTransaction: $(this).find(".IsTransaction").html(),
                                ComId: ComId
                                //SerialItem: $(this).find('.description').val()
                            });


                        }
                        else if ($(this).find(".id").html() > 0) { //&& parseFloat($(this).find('.quantity').val()) > 0


                            orderArr.push({

                                Id: $(this).find(".id").html(),
                                ProductId: parseFloat($(this).find(".productid").html()),
                                SalesId: parseInt($("#BtnSave").attr("data-sale-Id")),
                                WarehouseId: parseFloat($(this).find(".warehouseid").html()), //$('#Warehouse option:selected').text()
                                //Name: parseFloat($(this).find(".warehouseid").html()),
                                Name: $(this).find('.prdname').val(),
                                //Description: $(this).find('.description').val(),
                                Price: parseFloat($(this).find('.price').val()),
                                CostPrice: parseFloat($(this).find(".costprice").html()),
                                CommissionAmount: parseFloat($(this).find(".commissionamount").html()),//usercommissionamount
                                CommissionPer: parseFloat($(this).find(".commissionper").html()),
                                UserCommissionAmount: parseFloat($(this).find(".usercommissionamount").html()),

                                Description: $(this).find('.textdescription').val(),
                                IndDisPer: parseFloat($(this).find('.inddisper').val()) || 0,
                                IndDiscount: parseFloat($(this).find('.inddiscount').val()) || 0,


                                //Price: parseFloat($(this).find('td:eq(4)').html()),
                                Quantity: parseFloat($(this).find('.quantity').val()),
                                Amount: parseFloat($(this).find(".amount").html()),
                                BatchSerialItems: orderbatchArr,
                                SerialItem: !array ? 'Null' : array.toString(),
                                IsDelete: $(this).find(".IsDelete").html(),
                                IsTransaction: $(this).find(".IsTransaction").html(),
                                ComId: ComId
                                //SerialItem: $(this).find('.description').val()
                            });

                        }

                    });



                    //console.log(orderArr);

                    //alert($("#BtnSave").attr("data-sale-Id"));

                    //alert($("#AccountHead").val());


                    //var paidamt = 0;
                    //var dueamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                    //if ($("#Status").val() == "Paid") {
                    //    //alert($("#Status").val());
                    //    paidamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                    //    dueamt = 0;
                    //    //alert(paidamt);
                    //}
                    //else {
                    //    //alert('not found');
                    //}

                    var paidamt = 0;
                    //var dueamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                    //if ($("#Status").val() == "Paid") {
                    //    //alert($("#Status").val());
                    //    paidamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                    //    dueamt = 0;
                    //    //alert(paidamt);
                    //}
                    //else if ($("#Status").val() == "Advance") {
                    //    paidamt = parseFloat($('#PaidAmt').val()).toFixed(DecimalField);
                    //    dueamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField) - parseFloat($('#PaidAmt').val()).toFixed(DecimalField);
                    //}
                    //else {
                    //    dueamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                    //    //alert('not found');
                    //}


                    //($("#Status").val() == "Paid") { parseFloat($('#GrandTotal').val()).toFixed(DecimalField);} else { 0;};



                    var SalesPaymentSub = { "Id": "", "SalesId": "", "PaymentTypeId": "", "AccountHeadId": "", "Amount": "", "PaymentCardNo": "", "ComId": "", "LuserId": "", "RowNo": "", };
                    var paymentArr = [];
                    paymentArr.length = 0;
                    var i = 0
                    var oTablePayment = $('#tblpayments').dataTable().fnGetData();
                    //console.log(oTablePayment);
                    //alert('test');
                    for (var i = 0; i < oTablePayment.length; i++) {

                        if (oTablePayment[i][5] > 0) {
                            SalesPaymentSub.Id = 0;//oTablePayment[i][0] || 0;
                            SalesPaymentSub.PaymentTypeId = oTablePayment[i][1];
                            SalesPaymentSub.SalesId = parseInt($("#BtnSave").attr("data-sale-Id"));

                            SalesPaymentSub.AccountHeadId = oTablePayment[i][3];
                            //alert(AccountHeadId);
                            SalesPaymentSub.Amount = oTablePayment[i][5];
                            SalesPaymentSub.ComId = ComId;
                            SalesPaymentSub.LuserId = UserId;
                            SalesPaymentSub.RowNo = i;


                            SalesPaymentSub.PaymentCardNo = oTablePayment[i][6];
                            //console.log(SalesPaymentSub);

                            paymentArr.push(SalesPaymentSub);
                            SalesPaymentSub = { "Id": "0", "SalesId": "", "PaymentTypeId": "", "AccountHeadId": "", "Amount": "", "PaymentCardNo": "", "ComId": "", "LuserId": "", "RowNo": "" };

                        }
                    }




                    //var SalesTermsSub = { "Id": "", "SalesId": "", "TermsName": "", "TermsDescription": "", "TermsSLNo": "", "ComId": "", "LuserId": "" };
                    var TermsArr = [];
                    TermsArr.length = 0;
                    var i = 0



                    $.each($("#tblterms tbody tr"), function() {

                        console.log($(this).find(".id").html());
                        //console.log($(this).find(".id").val());
                        //alert('wait');
                        if ($(this).find(".id").html() == 0) {
                            TermsArr.push({
                                Id: 0,
                                SalesId: parseInt($("#BtnSave").attr("data-sale-Id")),

                                TermsName: $(this).find(".termsname").val(),
                                TermsDescription: $(this).find(".termsdescription").val(),
                                TermsSLNo: $(this).find(".termsslno").val(),
                                ComId: ComId,
                                LuserId: UserId

                            });
                        };


                        //SalesTermsSub.Id = 0;
                        //SalesTermsSub.SalesId = parseInt($("#BtnSave").attr("data-sale-Id"));

                        //  SalesTermsSub.TermsName = $(this).find(".termsname").html();
                        //  SalesTermsSub.TermsDescription = $(this).find(".termsdescription").html();
                        //  SalesTermsSub.TermsSLNo = $(this).find(".termsslno").html();
                        //  SalesTermsSub.ComId = ComId;
                        //  SalesTermsSub.LuserId = UserId;

                        // TermsArr.push(SalesTermsSub);
                        // SalesTermsSub = { "Id": "", "SalesId": "", "TermsName": "", "TermsDescription": "", "TermsSLNo": "", "ComId": "", "LuserId": ""};

                    });




                    //var oTableTerms = $('#tblterms').dataTable().fnGetData();
                    ////console.log(oTableTerms);
                    ////alert('test');
                    //for (var i = 0; i < oTableTerms.length; i++) {


                    //        SalesTermsSub.Id = 0;
                    //        SalesTermsSub.SalesId = parseInt($("#BtnSave").attr("data-sale-Id"));

                    //        SalesTermsSub.TermsName = oTableTerms[i][2];
                    //        SalesTermsSub.TermsDescription = oTableTerms[i][3];
                    //        SalesTermsSub.TermsSLNo = oTableTerms[i][4];

                    //        SalesTermsSub.ComId = ComId;
                    //        SalesTermsSub.LuserId = UserId;
                    //        //SalesTermsSub.RowNo = i;

                    //        //console.log(SalesTermsSub);

                    //        TermsArr.push(SalesTermsSub);
                    //        SalesTermsSub = { "Id": "", "SalesId": "", "TermsName": "", "TermsDescription": "", "TermsSLNo": "", "ComId": "", "LuserId": ""};
                    //}





                    //console.log(paymentArr);


                    //alert($('#checkbox-value').val());
                    //alert($("#isVatSales").val());

                    var data = JSON.stringify({
                        Id: parseInt($("#BtnSave").attr("data-sale-Id")),
                        DocTypeId: $("#DocType").val(),
                        SalesRepId: $("#SalesRep").val(),
                        CurrencyId: $("#CurrencyId").val(),
                        CurrencyRate: $("#CurrencyRate").val(),


                        CreateDate: $("#CreateDate").val() || "1-1-2000",
                        LuserId: $("#LuserId").val() || 0,


                        CustomerId: $("#Customer").val(),
                        WarehouseIdMain: $("#Warehouse").val(),

                        //AccountPayTypeId: $("#AccountHead").val(),
                        OrderId: $("#OrderId").val(),
                        //IsVatSales:  $("#isVatSales").val(),

                        CustomerName: $("#CustomerName").val(),
                        PhoneNo: $("#PhoneNo").val() || 0,
                        PrimaryAddress: $("#CustomerAddress").val(),

                        SaleCode: $("#Code").val(),
                        SalesDate: $("#Date").val(),
                        //PaymentMethod: $("#Payment").val(),
                        Total: parseFloat($("#SubTotal").text()),
                        Notes: $("#Notes").val(),
                        //Status: $("#Status").val(),
                        isSerialSales: 'True',
                        Discount: discount,

                        CustomerCommissionPer: customercommissionper,
                        SRCommissionPer: srcommissionper,

                        CustomerCommissionAmount: customercommissionamount,
                        SRCommissionAmount: srcommissionamount,



                        DisPer: $('#DisPer').val(),

                        TotalVat: $("#TotalVat").val(),
                        ServiceCharge: $("#ServiceCharge").val(),
                        Shipping: $("#Shipping").val(),

                        GrandTotal: parseFloat($('#GrandTotal').val()).toFixed(DecimalField),
                        NetAmount: parseFloat($('#GrandTotal').val()).toFixed(DecimalField),

                        PaidAmount: parseFloat($('#PaidAmount').val()).toFixed(DecimalField) || 0,
                        ChangeAmount: parseFloat($('#ChangeAmount').val()).toFixed(DecimalField) || 0,


                        totalcommissionamount: parseFloat($('#UserCommission').val()).toFixed(DecimalField),
                        PrevDue: parseFloat($('#PrevDue').val()).toFixed(DecimalField),

                        //PaidAmt: paidamt,
                        DisAmt: discount,
                        //DueAmt: dueamt,

                        Items: orderArr,
                        SalesPayments: paymentArr,
                        SalesTerms: TermsArr
                    });

                    //console.log(data);
                    //alert('Wait for Amount Changes');
                    $.ajax({
                        contentType: 'application/json; charset=utf-8',
                        //contentType: "application/json",
                        dataType: 'json',
                        type: 'POST',
                        url: "../Sales/AddSale",
                        data: data,
                        success: function(result) {
                            //console.log(result);
                            //alert('Wait');
                            if ((result.Success == "1") || (result.Success == "2")) {
                                //alert('enter');

                                if (result.Success == "1") {
                                    toastr.success(result.message);

                                }
                                else if (result.Success == "2") {
                                    toastr.warning(result.message);
                                }


                                var InvoiceBillsidprint = result.Id;
                                //alert(result.Id)
                                var urllink = '@Url.Action("SaleReport", "Sales", new { saleId = "xxxx" })'.replace("xxxx", InvoiceBillsidprint);
                                //var urllink = '@Url.Action("InvoiceViewReport", "Sales", new { saleId = "xxxx" })'.replace("xxxx", InvoiceBillsidprint);


                                //alert('wait for print');

                                window.open(urllink, '_blank');
                                //window.print();
                                //window.close();
                                //TotalLoadQty();

                                setTimeout(
                                    function() {
                                        //do something special

                                        //var saleIdforprint = $("#BtnSave").attr("data-sale-Id");

                                        var urllinknew = '@Url.Action("AddSaleBySerialSearch", "Sales")';
                                        window.open(urllinknew, "_self");

        @*if ($('#Update').length) {

                                        var urllinknew = '@Url.Action("AddSaleBySerialSearch", "Sales")';
                                        window.open(urllinknew, "_self");
                                        /* it exists */
                                        }
                                        else {
                                        $("#create").prop("disabled", false);
                                        //$("#TruckNumber").val(result.TruckNumber);
                                        //ClearData();
                                        /* it doesn't exist */
                                        }*@



                                                     }, 3000);


                                //alert('wait for print 1');


        @*window.setTimeout(function () {
                                // Move to a new location or you can do something else
                                window.location.href = '@Url.Action("Index", "Sales")';
                                }, 1000);*@

                                         }
                            else {
                                toastr.error(result.message);
                                //toastr.error('Validation Error');

                            }
                        },
                        error: function(result) {

                            if (result.message = "") {
                                toastr.error("Unable To Save The Data");
                            } else {
                                toastr.error(result.message);
                            }
                        }
                    });

                    ////console.log(data);
                    ////alert('Wait');
                    //$.when(saveOrder(data)).then(function (response) {
                    //    //console.log(response);
                    //    //location.href = "../Sales/index";
                    //}).fail(function (err) {

                    //});
                }
            });

                         //$('#BtnUpdate').click(function (e) {
                         //    e.preventDefault();

                         //    if (submitValidation()) {



                         //        var discount;
                         //        if (parseFloat($('#Discount').val()).toFixed(DecimalField) == "NaN") {
                         //            discount = 0;
                         //        }
                         //        else {
                         //            discount = $('#Discount').val();
                         //        }


                         //        var orderArr = [];
                         //        orderArr.length = 0;

                         //        $.each($("#SalesItems tbody tr"), function () {













                         //            orderArr.push({

                         //                Id: $(this).find(".id").html(),
                         //                ProductId: parseFloat($(this).find(".productid").html()),
                         //                WarehouseId: parseFloat($(this).find(".warehouseid").html()),

                         //                //Name: parseFloat($(this).find(".warehouseid").html()),
                         //                Name: $(this).find('.name').val(),
                         //                //WarehouseName: $(this).find('.warehouse_row').val(),

                         //                Description: $(this).find('.description').val(),
                         //                Price: $(this).find('.price').val(),

                         //                //Price: parseFloat($(this).find('td:eq(4)').html()),
                         //                Quantity: parseInt($(this).find('.quantity').val()),
                         //                Amount: parseFloat($(this).find(".amount").html()),
                         //                BatchSerialItems: orderbatchArr,
                         //                ComId: ComId

                         //                //Id: $(this).find(".id").html(),e
                         //                //ProductId: parseFloat($(this).find(".productid").html()),

                         //                //Name: parseFloat($(this).find(".warehouseid").html()),
                         //                ////Description: $(this).find('td:eq(3)').html(),
                         //                //Description: $(this).find('.description').val(),

                         //                //Price: parseFloat($(this).find('td:eq(4)').html()),
                         //                //Quantity: parseInt($(this).find('.quantity').val()),
                         //                //Amount: parseFloat($(this).find('td:eq(6)').html())
                         //            });
                         //        });


                         //        var paidamt = 0;
                         //        var dueamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                         //        if ($("#Status").val() == "Paid") {
                         //            paidamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                         //            dueamt = 0;
                         //            //alert(paidamt);
                         //        }


                         //        var paidamt = 0;
                         //        var dueamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                         //        if ($("#Status").val() == "Paid") {
                         //            //alert($("#Status").val());
                         //            paidamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                         //            dueamt = 0;
                         //            //alert(paidamt);
                         //        }
                         //        else if ($("#Status").val() == "Advance") {
                         //            paidamt = parseFloat($('#PaidAmt').val()).toFixed(DecimalField);
                         //            dueamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField) - parseFloat($('#PaidAmt').val()).toFixed(DecimalField);
                         //        }
                         //        else {
                         //            dueamt = parseFloat($('#GrandTotal').val()).toFixed(DecimalField);
                         //            //alert('not found');
                         //        }





                         //        var data = {

                         //            Id: parseInt($("#BtnSave").attr("data-sale-Id")),
                         //            //Id: parseInt($("#BtnUpdate").attr("data-sale-Id")),
                         //            CustomerId: parseInt($("#Customer").val()),
                         //            AccountPayTypeId: $("#AccountHead").val(),

                         //            SaleCode: $("#Code").val(),
                         //            SalesDate: $("#Date").val(),
                         //            PaymentMethod: $("#Payment").val(),
                         //            Total: parseFloat($("#SubTotal").text()),
                         //            Notes: $("#Notes").val(),
                         //            Status: $("#Status").val(),


                         //            TotalVat: $("#TotalVat").val(),
                         //            ServiceCharge: $("#ServiceCharge").val(),
                         //            Shipping: $("#Shipping").val(),


                         //            Discount: discount,//parseFloat($('#Discount').val()).toFixed(DecimalField),
                         //            GrandTotal: parseFloat($('#GrandTotal').val()).toFixed(DecimalField),
                         //            NetAmount: parseFloat($('#GrandTotal').val()).toFixed(DecimalField),
                         //            PaidAmt: paidamt,
                         //            DisAmt: discount,
                         //            DueAmt: dueamt,



                         //            Items: orderArr
                         //        };

                         //        //console.log(data);
                         //        //$.when(updateOrder(data)).then(function (response) {
                         //        $.when(saveOrder(data)).then(function (response) {
                         //            console.log(response);
                         //            location.href = "../Sales/index";
                         //        }).fail(function (err) {
                         //            console.log(err);
                         //        });
                         //    }

                         //});


//                         $(document).ready(function() {
//    $("input:text").focus(function() { $(this).select(); } );
//});


    </script>
}

