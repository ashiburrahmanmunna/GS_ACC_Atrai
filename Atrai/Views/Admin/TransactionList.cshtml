@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@*@model IEnumerable<Atrai.Model.Core.Entity.TransactionModel>*@
@{
    ViewData["Title"] = "Transaction List";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}
<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />

<style>
    p.lineheight {
        line-height: 6px;
        vertical-align: middle;
    }
    /*
        hr.hr-text {
            position: relative;
            border: none;
            height: 1px;
            background: #999;
        }

            hr.hr-text::before {
                content: attr(data-content);
                display: inline-block;
                background: #fff;
                font-weight: bold;
                font-size: 0.85rem;
                color: #999;
                border-radius: 30rem;
                padding: 0.2rem 0.5rem;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
            }*/

   
    /*style written by shahinur*/
    .jsgrid-grid-body {
        overflow: auto;
    }

    .custom-grid {
        display: grid;
        grid-template-columns: repeat(3, 180px);
        grid-auto-flow: row;
    }

    .separator {
        display: flex;
        align-items: center;
        text-align: center;
        color: #999;
        font-size: 12px;
    }

        .separator::before,
        .separator::after {
            content: '';
            flex: 1;
            border-bottom: 1px solid #999;
        }

        .separator:not(:empty)::before {
            margin-right: .25em;
        }

        .separator:not(:empty)::after {
            margin-left: .25em;
        }
        .btn-check:checked + .btn, .btn.active, .btn.show, .btn:first-child:active, :not(.btn-check) + .btn:active{
            border-color:transparent;

        }
    /*style written by shahinur*/

</style>

<div class="page-wrapper">
    <div class="container-fluid">
        <!-- Start Page Content -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">

                        <div class="row">

                            <div class="col-md-8 col-12">
                                <h4 style="color: #1976d2;">Transaction List</h4>
                            </div>
                            @*                            <div class="col-md-2 col-12">
                            @Html.ActionLink("Create Transaction", "AddTransaction", null, null, new { @class = "btn btn-sm btn-outline-info ", @id = "btnBack" })
                            </div>
                            <div class="col-md-2 col-12">
                            @Html.ActionLink("Received", "AddTransaction", new { Type = "Received" }, new { @class = "btn btn-sm btn-outline-info ", @id = "btnBack" })
                            </div>
                            <div class="col-md-2 col-12">
                            @Html.ActionLink("Paid", "AddTransaction", new { Type = "Paid" }, new { @class = "btn btn-sm btn-outline-info ", @id = "btnBack" })
                            </div>*@

                            <div class="col-md-4 col-12 text-end">
                                <label class="pr-2"><input type="radio" name="RptType" value="PDF" checked="checked" /> PDF  </label>
                                <label class="pr-2"><input type="radio" name="RptType" value="EXCEL" /> EXCEL  </label>
                                <label class="pr-2"><input type="radio" name="RptType" value="WORD" /> WORD  </label>

                            </div>
                        </div>


                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12 col-12 text-end mb-3">
                                <!-- Example single danger button -->
                                <div class="dropdown">
                                    <a class="btn btn-primary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        New
                                    </a>

                                    <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">

                                        @Html.ActionLink("Transaction", "AddTransaction", new { Type = "Journal" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        <div class="separator">Received</div>
                                        @Html.ActionLink("By Income", "AddTransaction", new { Type = "Income" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("From Customer", "AddTransaction", new { Type = "Customer" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("By Invoice", "AddTransaction", new { Type = "Sales" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("From Customer - Multiple Invoice", "AddTransactionDetails", new { Type = "Customer" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("From Supplier", "AddTransaction", new { Type = "ReceivedFromSupplier" }, new { @class = "dropdown-item", @id = "btnFromSupplier" })
                                        @Html.ActionLink("From Employee", "AddTransaction", new { Type = "ReceivedFromEmployee" }, new { @class = "dropdown-item", @id = "btnFromEmployee" })
                                        @*<div class="dropdown-divider"></div>*@
                                        <div class="separator">Paid</div>
                                        @Html.ActionLink("For Expense", "AddTransaction", new { Type = "Expense" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("To Supplier", "AddTransaction", new { Type = "Supplier" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("By Purchase Order", "AddTransaction", new { Type = "Purchase" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("To Supplier - Multiple Invoice", "AddTransactionDetails", new { Type = "Supplier" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("To Customer", "AddTransaction", new { Type = "PaidToCustomer" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("To Employee", "AddTransaction", new { Type = "PaidToEmployee" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        <div class="separator">Accounts</div>
                                        @Html.ActionLink("Cash Received From Bank", "AddTransaction", new { Type = "CashContra" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("Cash Deposit To Bank", "AddTransaction", new { Type = "BankContra" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("Contra", "AddTransaction", new { Type = "Contra" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        <div class="separator">Discount</div>
                                        @Html.ActionLink("Discount To Customer", "AddTransaction", new { Type = "CustomerDiscount" }, new { @class = "dropdown-item", @id = "btnBack" })
                                        @Html.ActionLink("Discount From Supplier", "AddTransaction", new { Type = "SupplierDiscount" }, new { @class = "dropdown-item", @id = "btnBack" })

                                    </div>
                                </div>
                            </div>
                        </div>

                        @Html.Hidden("FromDate", null, new { @class = "form-control text-center FromDate", @placeholder = "From Date", @autocomplete = "off", name = "FromDate" })
                        @Html.Hidden("ToDate", null, new { @class = "form-control text-center ToDate", @placeholder = "To Date", @autocomplete = "off", name = "ToDate" })



                        <div class="row mb-2">
                            <div class="col-md-2 col-12">
                                 <div class="mb-2">
                                @Html.DropDownList("Status", new List<SelectListItem>
                                {
                                new SelectListItem() {Text = "All", Value=""},
                                new SelectListItem() {Text = "Post", Value="Post"},
                                new SelectListItem() {Text = "UnPost", Value="UnPost"}

                                }, new { @class = "form-control" })
                            </div>
                            </div>

                            <div class="col-md-2 col-12">
                                <div class="mb-2">
                                    @Html.DropDownList("Warehouse", ViewBag.Warehouse as List<SelectListItem>, "Select Location", new { id = "WarehouseId", @class = "form-control" })
                                </div>
                            </div>


                            <div class="col-md-2 col-12">
                                <div class="mb-2">
                                    @Html.DropDownList("User", ViewBag.User as List<SelectListItem>, "Select User", new { id = "UserId", @class = "form-control" })
                                </div>
                            </div>

                            <div class="col-md-2 col-12">
                                 <div class="mb-2">
                                @Html.DropDownList("TransactionCategory", new List<SelectListItem>
                                {
                                new SelectListItem() {Text = "All", Value=""},

                                new SelectListItem() {Text = "By Income", Value="Received"},
                                new SelectListItem() {Text = "From Customer", Value="Customer"},
                                new SelectListItem() {Text = "By Invoice", Value="Sales"},
                                new SelectListItem() {Text = "From Customer - Multiple Invoice", Value="Customer"},

                                new SelectListItem() {Text = "For Expense", Value="Paid"},
                                new SelectListItem() {Text = "To Supplier", Value="Supplier"},
                                new SelectListItem() {Text = "By Purchase Order", Value="Purchase"},
                                new SelectListItem() {Text = "To Supplier - Multiple Invoice", Value="Supplier"},


                                new SelectListItem() {Text = "Cash Received From Bank", Value="CashContra"},
                                new SelectListItem() {Text = "Cash Deposit To Bank", Value="BankContra"},
                                new SelectListItem() {Text = "Discount To Customer", Value="CustomerDiscount"},
                                new SelectListItem() {Text = "Discount From Supplier", Value="SupplierDiscount"},
                                }, new { @class = "form-control" })
                            </div>
                            </div>

                            <div class="col-md-4 col-12">
                                <div class="input-group input-group-sm mb-2 divHiddenItems">
                                    <span class="input-group-text py-0 btn-primary">
                                        <i class="bi bi-calendar3"></i>
                                    </span>
                                    <input type="text" class="form-control" name="date" id="daterange-btn">
                                    <button id='btnDec' type="button" class="btn btn-danger" title='Decrement month'><i class="bi bi-calendar-minus" aria-hidden="true"></i></button>
                                    <button id='btnInc' type="button" class="btn btn-success" title='Increment month'><i class="bi bi-calendar-plus" aria-hidden="true"></i></button>
                                  
                                </div>

                            </div>



                        </div>
                        <hr />



                    </div>

                    <!-- Gear Icon configuration for jsgrid Start -->

                    <div>

  



                        <div>

                            <div class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                                <button class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                        aria-expanded="false">
                                    <i class="bi bi-gear" me-1"></i>
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                                        <div class="col">
                                            <span class="fw-bold ms-3">Columns</span>
                                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                                            <ul class="list-unstyled">
                                                <li>
                                                    <div id="dropdown-titles" class="custom-grid">
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>

                                        <div class="col mt-3 vertical-hr">
                                            <span class="fw-bold mt-5 ms-3">Others</span>
                                            <hr class="m-0 w-75 w-sm-50  ms-3" />
                                            <ul class="list-unstyled">
                                                <li><a id="show-all" value="100" class="dropdown-item" href="#">Show all</a></li>
                                                <li><a id="hide-all" class="dropdown-item" href="#">Hide all</a></li>
                                                <li><a id="restore" class="dropdown-item" href="#">Restore</a></li>


                                                <li>
                                                    <select name="rows" id="rows" class="border-0 cursor-pointer text-center">
                                                                @*<option value="0" class="w-100">Rows</option>*@
                                                        <option value="0" disabled selected>Rows</option>
                                                        <option value="5">5</option>
                                                        <option value="10" selected>10</option>
                                                        <option value="20">20</option>
                                                        <option value="50">50</option>
                                                        <option value="100">100</option>
                                                        <option value="1000">1000</option>
                                                    </select>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" href="#">
                                                        <div class="custom-control custom-checkbox">
                                                            <input type="checkbox" class="custom-control-input title-input" id="withChild" value="withChild">
                                                            <label class="custom-control-label cursor-pointer" id="withChild-label" for="withChild">Export with Child</label>
                                                        </div>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>


                            </div>
                        <div class="btn-group">
                            <button class="btn btn-sm border border-end-0" type="button" id="exportUl">
                                <img src="~/assets/excel 1.png" alt="">
                            </button>
                            <button type="button" class="btn border border-start-0 dropdown-toggle dropdown-toggle-split" id="exportBtn" data-bs-toggle="dropdown" data-target="#exportUl" aria-expanded="false">
                                <span class="visually-hidden">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu" id="exportPDF">
                                <li><a class="dropdown-item" href="#"><img src="~/assets/pdf 1.png" alt="">PDF</a></li>
                            </ul>
                        </div>
                    </div>
                    </div>

                    <!-- Gear Icon configuration for jsgrid End -->


                <div class="gridSection">
                    <div class="row mt-2">
                        <div class="col-12 col-md-12">
                            <div id="jsGridItems"></div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <!-- End PAge Content -->
    </div>
</div>

</div>



@section Scripts{
    <script type="text/javascript">
        var globalData = [];
        var globalIds = [];
        var Titles = [];
        //Global fields for jsgrid table starts
        //var globalFields = [
        //    {
        //        name: "CheckBox", title: 'Check Box', headerTemplate: function () {
        //            return $("<button>").attr("type", "button").css({
        //                'border': '0'
        //            }).html("<i class='fas fa-trash'></i>") //text("Delete")
        //                .on("click", function () {
        //                    deleteSelectedItems();
        //                    initjsGrid();
        //                });
        //        },
        //        itemTemplate: function (_, item) {
        //            return $("<input>").attr("type", "checkbox").css({
        //                'width': '20px',
        //                'height': '20px'
        //            }).prop("checked", $.inArray(item, selectedItems) > -1)
        //                .on("change", function () {
        //                    $(this).is(":checked") ? selectItem(item) : unselectItem(item);
        //                });
        //        },

        //        align: "center",
        //        width: 50
        //    },
        //    { name: "AccType", title: 'Type', type: "text", width: 220, visible: false },
        //    { name: "AccountCategory", title: 'Category', type: "text", width: 120, },
        //    { name: "AccCode", title: 'Code', type: "text" },
        //    { name: "AccName", title: 'Account Head', type: "text", width: 150, },
        //    { name: "ParentName", title: 'Group Head', type: "text", },
        //    { name: "AccountBalance", title: 'Balance', type: "text", align: "right" },
        //    /* { name: "AccountType", title: 'Account Type', type: "text", visible: false},*/
        //    {
        //        name: "button", width: '80', title: 'Action', align: 'center', itemTemplate: function (value, data) {
        //            //var options = [
        //            //    { value: "Edit", text: "<i class='fa-solid fa-pen-to-square'></i> Edit"},
        //            //    { value: "Delete", text: "<i class='fa-sharp fa-solid fa-trash'></i> Delete" },
        //            //];
        //            //console.log(data);
        //            var myUrledit = '@Url.Action("EditAccountHead", "Admin")?AccountHeadId=' + data.Id;
        //            var myUrldelete = '@Url.Action("DeleteCOA", "Admin")?AccountHeadId=' + data.Id;
        //            var myUrlGet = `editAccountHead(${data.Id})`;
        //            var message = `return confirm('Are you sure you want to Remove the AccountHead Information ?')`;

        //            var $dropdown = $("<div class='dropdown'>").append(
        //                $("<button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'>")
        //            ).append(
        //                $("<ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>").css({
        //                    'margin-left': '-105px'
        //                }).append(function () {
        //                    return $("<li>").append(
        //                        $(`<a onclick=${myUrlGet} class='text-decoration-none text-black ms-3 mt-1'>`).attr("href", "#").html("<i class='fa-solid fa-pen-to-square'></i> <span>Edit</span>  <br />"),
        //                        $(`<a class='text-decoration-none text-black ms-3 mt-1'>`).attr("href", `#`)
        //                            .html("<i class='fa-sharp fa-solid fa-trash mt-2'></i><span class='ms-2 mt-2' >Delete</span>")
        //                            .click(function () {
        //                                setDeleteUrl(data.Id);
        //                            })
        //                    );
        //                }));


        //            var $iconButton = $(`<a href='#' class="fw-bolder mt-2" >Run Report</a>`).click(function (e) {
        //                e.preventDefault();
        //                getReport(data.Id, data.type);
        //                //alert('checjed');
        //            });
        //            var $flex = $("<div class='d-flex justify-content-center'></div>").append($iconButton).append($dropdown)
        //            var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
        //            return $result.add($flex);
        //        }
        //    }

        //    // { name: "Currency", title: 'Currency', type: "text" },
        //]
        //Global fields for jsgrid table ends

        //console.log(globalFields[7].name);
        
        var showAllPageSize;
        var accType = 'L';
        var IncludingInactive = false;
        var globalIdsForDelete = [];
        var eachGlobalIdForDelete = [];

        //////***** JsGrid ****//////

        function restoreDropdown() {
            $("#dropdown-titles").empty();
            for (var i = 0; i < globalFields.length; i++) {
                var title = globalFields[i].title;
                var name = globalFields[i].name;
                var visible = true;
                if (globalFields[i].visible == false) {
                    visible = false;
                }
                //console.log(visible);
                titles = `<li>
                <a class="dropdown-item" href="#">
                <div class="custom-control custom-checkbox" >
                <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
                <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                </div>
                </a>
                </li>`;

                $("#dropdown-titles").append(titles);

                document.querySelector(`${'#' + name}`).addEventListener('click', function () {
                    var checkbox = event.target;
                    var isChecked = checkbox.checked;
                    if (isChecked) {
                        $("#jsGridItems").jsGrid("fieldOption", this.value, "visible", true);
                    }
                    else {
                        $("#jsGridItems").jsGrid("fieldOption", this.value, "visible", false);
                    }
                });

                $(`${'#' + name}`).prop('checked', visible);


                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                //console.log(data.BankBalance[i].AccName);
            }

            AccType = 'L';
            IncludingInactive = false;
        }

        document.getElementById("rows").addEventListener("change", function (e) {

            globalPageSize = this.value;

            $("#jsGridItems").jsGrid({
                pageSize: globalPageSize
            });


        });

        document.getElementById("hide-all").addEventListener("click", function (e) {
            //e.stopPropagation();
            //e.preventDefault();
            globalPageSize = 0;
            $("#jsGridItems").jsGrid({
                pageSize: globalPageSize
            });

            $("#rows").prop('selectedIndex', 0);

        });
        document.getElementById("show-all").addEventListener("click", function (e) {

            globalPageSize = 100;
            $("#jsGridItems").jsGrid({
                pageSize: globalPageSize
            });
            $("#rows").prop('selectedIndex', 0);

        });
        document.getElementById("restore").addEventListener("click", function (e) {

            globalPageSize = 5;

            $("#jsGridItems").jsGrid({
                pageSize: globalPageSize
            });
            restoreDropdown();

            //$('#rows').value(0);
            $("#rows").prop('selectedIndex', 0);

        });

        var withChildFlag = false;
        document.getElementById("withChild").addEventListener("click", function (e) {


            withChildFlag = true;

            //alert('SAS');
        });

        var globalPageSize = 5;
        var globalFields = [
            { name: "Id", title: "TransactionId", visible: false },
            {
                title: "Details",
                width: "150",
                align: "center",
                itemTemplate: function (_, item) {
                    var transactionPrintUrl = '@Url.Action("TransactionPrint", "Admin")?TransactionId=' + item.Id;
                    var transactionEditUrl = '@Url.Action("EditTransaction", "Admin")?TransactionId=' + item.Id;
                    var transactionDeleteUrl = '@Url.Action("DeleteTransaction", "Admin")?TransactionId=' + item.Id;
                    var transactionViewUrl = '@Url.Action("ViewTransaction", "Admin")?TransactionId=' + item.Id;
                    var transactionReportViewUrl = '@Url.Action("TransactionVoucherViewReport", "Admin")?TransactionId=' + item.Id;
                    var message = "return confirm('Are you sure you want to Remove this Transaction?')";

                    var buttons = '<div class="btn-group">';
                    buttons += '<button type="button" class="btn btn-sm shadow-none blue-custom fw-500"><a href="' + transactionViewUrl + '">View Transaction</a></button>';
                    buttons += '<button type="button" class="btn btn-sm dropdown-toggle dropdown-toggle-split shadow-none" data-bs-toggle="dropdown" aria-expanded="false">';
                    buttons += '<span class="visually-hidden"></span>';
                    buttons += '</button>';
                    buttons += '<ul class="dropdown-menu">';
                    if (!item.isPost) {
                        buttons += `<li><a href="${transactionEditUrl}" class="dropdown-item" target="_blank"><i class="bi bi-pencil-square pe-1"></i>Edit</a></li>`;
                    } else {
                        buttons += `<li><a href="${transactionEditUrl}" class="dropdown-item" target="_blank"><i class="bi bi-pencil-square pe-1"></i>Edit</a></li>`;
                    }
                    buttons += '<div class="dropdown-divider m-0"></div>';
                    //buttons += `<li><a href="${transactionDeleteUrl}" onclick="${message}" class="dropdown-item" target="_blank"><i class="bi bi-x-lg pe-1"></i>Delete</a></li>`;
                    buttons += `<li><a  onclick="setDeleteUrl(${item.Id});" class="dropdown-item" ><i class="bi bi-x-lg pe-1"></i>Delete</a></li>`;
                    buttons += '<div class="dropdown-divider m-0"></div>';
                    //buttons += `<li><a href="${transactionViewUrl}" class="dropdown-item" target="_blank"><i class="bi bi-cash pe-1"></i>Transaction</a></li>`;
                    buttons += `<li><a href="${transactionReportViewUrl}" class="dropdown-item" target="_blank"><i class="bi bi-printer pe-1"></i>Report</a></li>`;

                    buttons += '</ul>';
                    return buttons;
                }
            },
            { name: "LocationName", title: "Location", searchable: true },
            { name: "TransactionCode", title: "Transaction Code", searchable: true },
            {
                name: "InputDate",
                title: "Entry Date",
                type: "datetime",
                width: "120",
                align: "center",
                itemTemplate: function (value, item) {
                    return new Date(value).toLocaleDateString();
                },
                sorting: true,
                filtering: true
            },
            { name: "TransactionAmount", title: "Amount", align: 'center', type: "text", searchable: true },
            { name: "Description", title: "Description", type: "text", width: "120", searchable: true },
            { title: "Type", field: "TransactionType", headerFilter: "input", hozAlign: "left", visible: false },
            { title: "Category", field: "TransactionCategory", headerFilter: "input", hozAlign: "left", visible: false },
            { title: "Debit", field: "DebitAccountName", headerFilter: "input", hozAlign: "left", width: 140, visible: true },
            { title: "Credit", field: "CreditAccountName", headerFilter: "input", hozAlign: "left", width: 140, visible: true },
            { title: "Status", field: "Status", headerFilter: "input", hozAlign: "left", width: 90, visible: true },
            {
                title: "Reference Data",
                width: "200",
                align: "center",
                itemTemplate: function (_, item) {
                    var salesReportUrl = '@Url.Action("InvoiceViewReport", "Sales")?saleId=' + item.SalesId;
                    var purchaseReportUrl = '@Url.Action("PurchaseInvoiceViewReport", "Purchase")?purchaseId=' + item.PurchaseId;

                    var buttons = "";
                    if (item.Customer != null) {
                        buttons += '<p class="m-1" style="color:purple">' + item.Customer + '</p>';
                    }
                    if (item.SalesCode != null) {
                        //buttons += '<a href="' + salesReportUrl + '" class="label label-purple text-black lineheight" style="font-size:14px" target="_blank">' + item.SalesCode + '</a>';
                        buttons += '<a href="' + salesReportUrl + '" class="label label-purple text-black lineheight" style="font-size:14px" target="_blank">' +
                            '<i class="bi bi-printer" style="color: blue; margin-right: 5px;"></i>' +
                            '<span style="color: blue;">' + item.SalesCode + '</span>' + '</a>';
                    }

                    if (item.Supplier != null) {
                        buttons += '<p class="m-1" style="font-size:16px;color:red">' + item.Supplier + '</p>';
                    }
                    if (item.PurchaseCode != null) {
                        //buttons += '<a href="' + purchaseReportUrl + '" class="label label-danger text-black lineheight" style="font-size:14px" target="_blank">' + item.PurchaseCode + '</a>';
                        buttons += '<a href="' + purchaseReportUrl + '" class="label label-danger text-black lineheight" style="font-size:14px" target="_blank">' +
                            '<i class="bi bi-printer" style="color: blue; margin-right: 5px;"></i>' +
                            '<span style="color: blue;">' + item.PurchaseCode + '</span>' + '</a>';
                    }

                    if (item.Member != null) {
                        buttons += '<p style="color:black">' + item.Member + '</p>';
                    }
                    if (item.Employee != null) {
                        buttons += '<p style="color:blue">' + item.Employee + '</p>';
                    }

                    return buttons;
                }
            },
            {
                name: "TransactionAmount",
                title: "Amount",
                width: "120",
                type: "text",
                align: "center",
                sorting: true,
                filtering: true,
                itemTemplate: function (value, item) {
                    var buttons = "";
                    if (item.TransactionAmount > 0) {
                        if (item.TransactionType === "Paid") {
                            buttons += '<p class="label label-danger text-black mt-2" style="font-size:13px;">' + formatter.format(item.TransactionAmount) + '</p>';
                        } else if (item.TransactionType === "Received") {
                            buttons += '<label class="label label-success text-black mt-2" style="font-size:13px;color:black">' + formatter.format(item.TransactionAmount) + '</label>';
                        } else {
                            buttons += '<p style="color:black">' + formatter.format(item.TransactionAmount) + '</p>';
                        }
                    }
                    return buttons;
                }
            },
            {
                title: "Status",
                itemTemplate: function (value, item) {
                    var information = '';

                    if (!item.isPosted) {
                        information = '<p class="narrowlineheight" style="font-weight: bold; color: red">Not Posted</p>';
                    } else {
                        information = '<p class="narrowlineheight" style="font-weight: bold; color: darkgreen">Posted</p>';
                    }

                    return information;
                }
            },
            //{
            //    title: "Actions",
            //    width: "150",
            //    align: "center",
            //    itemTemplate: function (_, item) {
            //        var transactionPrintUrl = '@Url.Action("TransactionPrint", "Admin")?TransactionId=' + item.Id;
            //        var transactionEditUrl = '@Url.Action("EditTransaction", "Admin")?TransactionId=' + item.Id;
            //        var transactionDeleteUrl = '@Url.Action("DeleteTransaction", "Admin")?TransactionId=' + item.Id;
            //        var transactionViewUrl = '@Url.Action("ViewTransaction", "Admin")?TransactionId=' + item.Id;
            //        var transactionReportViewUrl = '@Url.Action("TransactionVoucherViewReport", "Admin")?TransactionId=' + item.Id;
            //        var message = "return confirm('Are you sure you want to Remove this Transaction?')";

            //        var buttons = '<div class="btn-group">';
            //        buttons += '<button type="button" class="btn btn-sm shadow-none blue-custom fw-500"><a href="' + transactionViewUrl + '">View Transaction</a></button>';                   
            //        buttons += '<button type="button" class="btn btn-sm dropdown-toggle dropdown-toggle-split shadow-none" data-bs-toggle="dropdown" aria-expanded="false">';
            //        buttons += '<span class="visually-hidden"></span>';
            //        buttons += '</button>';
            //        buttons += '<ul class="dropdown-menu">';
            //        if (!item.isPost) {
            //            buttons += `<li><a href="${transactionEditUrl}" class="dropdown-item" target="_blank"><i class="bi bi-pencil-square pe-1"></i>Edit</a></li>`;
            //            } else {
            //            buttons += `<li><a href="${transactionEditUrl}" class="dropdown-item" target="_blank"><i class="bi bi-pencil-square pe-1"></i>Edit</a></li>`;
            //        }
            //        buttons += '<div class="dropdown-divider m-0"></div>';
            //        buttons += `<li><a href="${transactionDeleteUrl}" onclick="${message}" class="dropdown-item" target="_blank"><i class="bi bi-x-lg pe-1"></i>Delete</a></li>`;
            //        buttons += '<div class="dropdown-divider m-0"></div>';
            //        //buttons += `<li><a href="${transactionViewUrl}" class="dropdown-item" target="_blank"><i class="bi bi-cash pe-1"></i>Transaction</a></li>`;
            //        buttons += `<li><a href="${transactionReportViewUrl}" class="dropdown-item" target="_blank"><i class="bi bi-printer pe-1"></i>Report</a></li>`;

            //        buttons += '</ul>';
            //        return buttons;
            //    }
            //}
        ];


        var jsGridItemsUrl = '@Url.Action("GetTransactionListByPage", "Admin")';
        function initJsGrid() {
            var jsGridItemsDB = {
                loadData: function (filter) {
                    console.log(filter);
                    var d = $.Deferred();
                    $.ajax({
                        type: "GET",
                        url: jsGridItemsUrl,
                        //headers: {
                        //    contentType: "application/json; charset=utf-8",
                        //    Authorization: token
                        //},
                        data: { searchquery: JSON.stringify(filter) },
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    })

                        .done(function (result) {
                            console.log("jsgrid", result);
                            d.resolve(result);
                            //console.log(result.ProductList);

                        });
                    return d.promise().then(function (q) {

                        //console.log(q);
                        return {

                            data: q,
                            itemsCount: parseInt(q.PageInfo.TotalRecordCount)
                        }
                    });
                }



            }



            //$("#exampleModal").on('hide.bs.modal', function () {
            //      $("#jsGridItems .jsgrid-update-button").trigger( "click" );
            //  });

            var child = [];

            var serial = 0;
            $("#jsGridItems").jsGrid({
                width: "100%",
                height: 500,
                filtering: true,
                editing: true,
                autoload: true,
                pageSize: globalPageSize,
                pageLoading: true,
                pageIndex: 1,
                paging: true,
                controller: jsGridItemsDB,
                pagerFormat: "{prev} {pages} {next}   Results: {pageIndex} - {pageCount} of {itemCount}",
                pagePrevText: "<",
                pageNextText: ">",
                // selecting: true,

                fields: globalFields,
                rowClick: function (args) {
                    // this.select(args.itemIndex, true);

                    // console.log(args.item);
                    // var Item=args.item;

                    child = args.item.PurchaseItems;

                    //// delete (Item);
                    showModal(child, args.item.PurchaseCode);

                    // $("#jsGridItems").jsGrid("updateItem", args.item);


                    $checkbox = $(args.event.currentTarget).find("input[type=checkbox]");
                    if ($(args.event.target).closest("td").index() !== 8 && $(args.event.target).closest("td").index() !== 0 && $(args.event.target).closest("td").index() !== 1) {
                        $checkbox.prop("checked", !$checkbox.prop("checked"));

                        // Update selected items array
                        if ($checkbox.prop("checked")) {
                            selectItem(args.item);
                        } else {
                            unselectItem(args.item);
                        }
                    }

                },

                onItemDeleting: function (args) {
                    console.log(args.item);
                    var abcvalue = args.item.isPosted;
                    console.log(abcvalue);
                    if (abcvalue == true) {
                        //$("#grid").jsGrid("deleteItem", args);
                        args.cancel = true;
                        alert('Already Posted');
                    }

                },
                onItemDeleted: function (args) {
                    parentValue = $('#jsGridItems').jsGrid('option', 'data');
                    var serial = 0;
                    for (var i = 0; i < parentValue.length; i++) {
                        parentValue[i].SLNo = serial + 1;
                        serial++;
                    }
                    console.log('serial');
                    console.log(serial);
                    $("#jsGridItems").jsGrid("refresh");

                }

            });

        }
        initJsGrid();
        restoreDropdown();


        function setDeleteUrl(data) {
            var transactionDeleteUrl = '@Url.Action("DeleteTransaction", "Admin")';
        
                alert('Are you sure want to delete?');
            $.ajax({
                type: "GET",
                data: { TransactionId: data },
                url: transactionDeleteUrl,
                success: function (response) {
                    if (response.success == "1") {
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-green",
                        });
                        //alert('deleted');
                        sendData();
                        //initjsGrid();
                    }
                    else if (response.success == "0") {
                        //alert()
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-red",
                        });
                        //initjsGrid();
                    }
                }
            });
        };



        function sendData() {
            var today = new Date().toISOString().slice(0, 10); // Get current date in YYYY-MM-DD format

            var fromDate = $("#FromDate").val();
            var toDate = $("#ToDate").val();
            var isCurrentDateSelected = (fromDate === today && toDate === today);

            // Determine if a previous date is selected
            var isPreviousDateSelected = !isCurrentDateSelected && fromDate && toDate;

            var jsSendDataDB = {
                loadData: function (filter) {
                    console.log(filter);
                    var d = $.Deferred();
                    $.ajax({
                        type: "GET",
                        url: jsGridItemsUrl,
                        data: {
                            searchquery: JSON.stringify(filter),
                            FromDate: fromDate,
                            ToDate: toDate
                        },
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    })
                        .done(function (result) {
                            d.resolve(result);
                        });
                    return d.promise().then(function (q) {
                        return {
                            data: q.VoucherList,
                            itemsCount: parseInt(q.PageInfo.TotalRecordCount)
                        }
                    });
                }
            }

            // Display data if a previous date is selected or no filters are applied
            if (isPreviousDateSelected || (!fromDate && !toDate)) {
                $("#jsGridItems").jsGrid({
                    controller: jsSendDataDB
                });
            }
        }

        $(document).ready(function () {
            $('#FromDate, #ToDate, #daterange-btn, #UserId, #WarehouseId, #TransactionCategory, #Status').on('change', function () {
                sendData();
            });
            $('#daterange-btn').on('apply.daterangepicker', function () {
                // alert("show");
                sendData();
                
            });

            // Trigger the 'change' event on page load to display data automatically
            $('#FromDate, #ToDate').trigger('change');
        });


        //function sendData() {

        //    var jsSendDataDB = {
        //        loadData: function (filter) {
        //            console.log(filter);
        //            var d = $.Deferred();
        //            $.ajax({
        //                type: "GET",
        //                url: jsGridItemsUrl,
        //                //headers: {
        //                //    contentType: "application/json; charset=utf-8",
        //                //    Authorization: token
        //                //},
        //                data: { searchquery: JSON.stringify(filter), FromDate: $("#FromDate").val(), ToDate: $("#ToDate").val() },
        //                contentType: "application/json; charset=utf-8",
        //                dataType: "json"
        //            })

        //                .done(function (result) {
        //                    //console.log(result);
        //                    d.resolve(result);
        //                    //console.log(result.ProductList);

        //                });
        //            return d.promise().then(function (q) {

        //                //console.log(q);
        //                return {

        //                    data: q.VoucherList,
        //                    itemsCount: parseInt(q.PageInfo.TotalRecordCount)
        //                }
        //            });
        //        }

        //    }

        //    $("#jsGridItems").jsGrid({
        //        controller: jsSendDataDB
        //    })

        //}

        //$(document).ready(function () {
        //    $('#FromDate, #ToDate, #daterange-btn, #UserId, #WarehouseId, #TransactionCategory, #Status').on('change', function () {
        //        // Display an alert message
        //        //alert('Success! Date changed.');
        //        //alert('hit');
        //        sendData();
        //        //loadsummarydata();
        //    });
        //});

        //////***** JsGrid ****//////



        


        //for (var i = 0; i < globalFields.length; i++) {
        //    //console.log(globalFields[i].title);
        //    Titles.push(globalFields[i].title);
        //}
        //let titles = '';
        //console.log(data.BankBalance);

        //restore dropwodn funstion starts
        //function restoreDropdown() {
        //    $("#dropdown-titles").empty();
        //    for (var i = 0; i < globalFields.length; i++) {
        //        var title = globalFields[i].title;
        //        var name = globalFields[i].name;
        //        var visible = true;
        //        if (globalFields[i].visible == false) {
        //            visible = false;
        //        }
        //        //console.log(visible);
        //        titles = `<li>
        //                                <a class="dropdown-item" href="#">
        //                                <div class="custom-control custom-checkbox" >
        //                                <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
        //                                <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
        //                                </div>
        //                                </a>
        //                                </li>`;

        //        $("#dropdown-titles").append(titles);

        //        //document.querySelector(`${'#' + name}`).addEventListener('click', function () {
        //        //    var checkbox = event.target;
        //        //    var isChecked = checkbox.checked;
        //        //    if (isChecked) {
        //        //        $("#jsFilterGrid").jsGrid("fieldOption", this.value, "visible", true);
        //        //    }
        //        //    else {
        //        //        $("#jsFilterGrid").jsGrid("fieldOption", this.value, "visible", false);
        //        //    }
        //        //});

        //        $(`${'#' + name}`).prop('checked', visible);


        //        $('.custom-control-label').on('click', function (e) {
        //            e.stopPropagation();
        //        });
        //        $('#dropdown-titles').on('click', function (e) {
        //            e.stopPropagation();
        //        });

        //        //console.log(data.BankBalance[i].AccName);
        //    }

        //    accType = 'L';
        //    IncludingInactive = false;
        //}


        //console.log(showAllPageSize);
        //console.log(globalPageSize);


        //Search for jsgrid table starts
        //var filterSearchUrl = '@Url.Action("GetCOAList", "Admin")';
        //function initjsGrid() {
        //    var filterSearchDb = {
        //        loadData: function (filter) {

        //            var d = $.Deferred();
        //            $.ajax({
        //                type: "GET",
        //                async: false,
        //                url: filterSearchUrl,
        //                //headers: {
        //                //    contentType: "application/json; charset=utf-8",
        //                //    Authorization: token
        //                //},
        //                data: { AccType: accType, IncludingInactive: IncludingInactive, searchquery: JSON.stringify(filter) },
        //                contentType: "application/json; charset=utf-8",
        //                dataType: "json"
        //            })
        //                .done(function (result) {
        //                    d.resolve(result);
        //                    //console.log(result.AccountHeadList);
        //                    globalData = [...result.AccountHeadList]
        //                    for (var i = 0; i < globalData.length; i++) {
        //                        globalIds.push(globalData[i].Id);
        //                    }
        //                });
        //            return d.promise().then(function (q) {

        //                //console.log(q);
        //                return {

        //                    data: q.AccountHeadList,
        //                    itemsCount: parseInt(q.PageInfo.TotalRecordCount)
        //                }
        //            });


        //        }

        //    }
        //    //Search for jsgrid table ends


        //    //jsgrid table show functionalities starts
        //    $("#jsFilterGrid").jsGrid({

        //        width: "100%",
        //        height: '400',
        //        filtering: true,
        //        autoload: true,
        //        pageLoading: true,
        //        pageSize: globalPageSize, //5,
        //        pageIndex: 1,
        //        paging: true,
        //        controller: filterSearchDb,
        //        pagerFormat: "{prev} {pages} {next}   Results: {pageIndex} - {pageCount} of {itemCount}",
        //        pagePrevText: "<",
        //        pageNextText: ">",
        //        // pageFirstText: "First",
        //        //pageLastText: "Last",
        //        // pageNavigatorNextText: "...",
        //        //pageNavigatorPrevText: "...",
        //        fields: globalFields,
        //        rowClick: function (args) {
        //            $checkbox = $(args.event.currentTarget).find("input[type=checkbox]");
        //            if ($(args.event.target).closest("td").index() !== 6 && $(args.event.target).closest("td").index() !== 0) {
        //                $checkbox.prop("checked", !$checkbox.prop("checked"));

        //                // Update selected items array
        //                if ($checkbox.prop("checked")) {
        //                    selectItem(args.item);
        //                } else {
        //                    unselectItem(args.item);
        //                }
        //            }
        //        },
        //        //rowClick: function (args) {
        //        //    $checkbox = $(args.event.currentTarget).find("input[type=checkbox]");
        //        //    $checkbox.prop("checked", !$checkbox.prop("checked"));

        //        //    // Update selected items array
        //        //    if ($checkbox.prop("checked")) {
        //        //        selectItem(args.item);
        //        //    } else {
        //        //        unselectItem(args.item);
        //        //    }
        //        //},

        //    })

        //}
        //jsgrid table show functionalities ends

        //functions to select/unselect and manage batch delete starts
        var selectedItems = [];

        var selectItem = function (item) {
            selectedItems.push(item);
        };

        var unselectItem = function (item) {
            selectedItems = $.grep(selectedItems, function (i) {
                return i !== item;
            });
        };

        var deleteSelectedItems = function () {
            if (!selectedItems.length || !confirm("Are you sure?"))
                return;

            deleteClientsFromDb(selectedItems);

            var $grid = $("#jsFilterGrid");
            $grid.jsGrid("option", "pageIndex", 1);
            $grid.jsGrid("loadData");

            selectedItems = [];
            eachGlobalIdForDelete = [];
        };

        var deleteClientsFromDb = function (deletingClients) {
            globalIdsForDelete = [...deletingClients]
            for (var i = 0; i < globalIdsForDelete.length; i++) {
                eachGlobalIdForDelete.push(globalIdsForDelete[i].Id);
            }

            for (var i = 0; i < eachGlobalIdForDelete.length; i++) {
                var myUrldelete = '@Url.Action("DeleteCOA", "Admin")?AccountHeadId=' + eachGlobalIdForDelete[i];
                $.ajax({
                    type: "get",
                    url: myUrldelete, /*"/api/AccountHead/DeleteAccountHead?AccountHeadId=" + eachGlobalIdForDelete[i],*/
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                        }
                        else if (response.success == "0") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        //initjsGrid();
                        //console.log(response);
                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            }
        };
        //functions to select/unselect and manage batch delete starts


        //var deleteClientsFromDb = function (deletingClients) {
        //    globalIdsForDelete = [...deletingClients]
        //    //console.log(globalIdsForDelete);
        //    for (var i = 0; i < globalIdsForDelete.length; i++) {
        //        //console.log(globalIdsForDelete[i].Id);
        //        eachGlobalIdForDelete.push(globalIdsForDelete[i].Id);
        //    }
        //    console.log(eachGlobalIdForDelete);
        //};

        var selectedRow;

        $("#jsFilterGrid").on("click", ".jsgrid-row", function () {
            if (selectedRow) {
                $(selectedRow).removeClass("selected");
            }
            selectedRow = this;
            $(selectedRow).addClass("selected");
        });

        //jsgrid table show functionalities ends


        //jsgrid functionalities applied by Mahin ends


        $(document).ready(function () {
            //initjsGrid();
            $('[data-toggle="tooltip"]').tooltip();
            function ExecuteRecurrTransaction() {
                                                        $.ajax({
                                                            url: '@Url.Action("ExecuteRecurrTransactionForTrxn", "Admin")', 
                                                            type: 'GET',
                                                            success: function (response) {
                                                                if (response.Success === 1) {
                            
                                                                } else {
                                                                    console.error(response.ex);
                                                                }
                                                            },
                                                            error: function (error) {
                                                                
                                                            }
                                                        });
                                                    }
            ExecuteRecurrTransaction();
                                                   
            //CurrentDate();

            //    $(".FromDate").datepicker({

            //        dateFormat: "dd-M-y",
            //        changeMonth: true,
            //        changeYear: true

            //    });


            //$(".ToDate").datepicker({

            //    dateFormat: "dd-M-y",
            //    changeMonth: true,
            //    changeYear: true

            //});

            //function CurrentDate() {
            //    var date = new Date();
            //    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            //    var val = date.getDate() + "-" + months[date.getMonth()] + "-" + date.getFullYear().toString().substr(-2);
            //    if ($(".FromDate").val() == '') {
            //        $(".FromDate").val(val);
            //    }
            //    if ($(".ToDate").val() == '') {
            //        $(".ToDate").val(val);
            //    }
            //}

            var UserId = $("#UserId").val();
            var WarehouseId = $("#WarehosueId").val();

            var TransactionCategory = $("#TransactionCategory").val();

            //alert(UserId);
            var fromdate = $("#FromDate").val();
            var todate = $("#ToDate").val();

            //loaddata(fromdate, todate, UserId, 1);

            var filter = '@ViewBag.filter';
            $("#Status").val(filter);

            //function loaddata(FromDate = "", ToDate = "", UserId = "", isAll = 1, WarehouseId) {
            //    //alert(UserId, FromDate, ToDate);

            //    table = $('#tbllist').DataTable({
            //        initComplete: function () {

            //            var input = $('.dataTables_filter input'),//.unbind(),
            //                self = this.api(),

            //                //$searchButton = $('<button class="btn  btn-info btn-sm" tabindex="0" aria-controls="tbllist" TransactionId="button" title="Search"><span><i class="bi bi-file-earmark-excel"></i></span></button>')
            //                //    .text('Search')
            //                //    .click(function () {
            //                //        if (input.val().length > 0) {
            //                //            self.search(input.val()).draw();

            //                //        }
            //                //        else {
            //                //            loaddata(fromdate, todate, UserId, 1);

            //                //        }
            //                //    }),
            //                //$clearButton = $('<button class="btn  btn-warning btn-sm" tabindex="0" aria-controls="tbllist" TransactionId="button" title="Export to PDF"><span><i class="bi bi-file-earmark-pdf"></i></span></button>')
            //                //    .text('Clear')
            //                //    .click(function () {
            //                //        input.val('');
            //                //        $searchButton.click();
            //                //    }),
            //                $allButton = $('<button class="ml-5 btn  btn-primary btn-sm" tabindex="0" aria-controls="tbllist" TransactionId="button" title="Load"><span><i class="bi bi-file-earmark-excel"></i></span></button>')
            //                    .text('Load')
            //                    .click(function () {
            //                        input.val('');
            //                        //alert(FromDate);
            //                        loaddata(fromdate, todate, UserId, 1, WarehouseId);
            //                        //table.ajax.reload();


            //                    })
            //            $('.dataTables_filter').append($allButton);//, $clearButton // , $searchButton
            //        },

            //        serverSide: true,
            //        "scrollX": true,
            //        "orderCellsTop": true,
            //        //"scrollX": true,
            //        //"scrollY": "60vh",
            //        //"scrollCollapse": true,
            //        //"info": true,
            //        "iDisplayLength": 10,
            //        "lengthMenu": [[5, 10, 20, 50, 10000], [5, 10, 20, 50, "All"]],
            //        //"columnDefs": [
            //        //    // Hide second, third and fourth columns
            //        //    { "visible": false, "targets": [] }
            //        //    //{ targets: [7], className: "noWrapTd" } // white-space: nowrap;
            //        //],
            //        dom: '<"dom_wrapper fh-fixedHeader"flB>tip',
            //        buttons: {
            //            dom: {
            //                button: {
            //                    className: 'btn btn-sm '
            //                }
            //            },
            //            buttons: [
            //                //'copy', 'csv', 'excel', 'pdf', 'print'
            //                //{ "extend": 'excel', "text": 'Excel', "className": 'btn btn-sm btn-success-info fa fa-excel rouned-0' }

            //                {
            //                    extend: 'excel',
            //                    text: '<i class="bi bi-file-earmark-excel"></i>',
            //                    className: 'btn-success',
            //                    titleAttr: 'Export to excel'
            //                }

            //            ],
            //        },
            //        //"datatest": function (d) {
            //        //    d.FromDate = $('#FromDate').val();
            //        //    d.ToDate = $('#ToDate').val();
            //        //    alert(d);
            //        //},
            //        //"fixedHeader": true,
            //        //"responsive": true,
            //        "ajax": {
            //            "url": "@Url.Action("GetTransactionList", "Admin")",
            //            "data": { FromDate: $("#FromDate").val(), ToDate: $("#ToDate").val(), UserId: $("#UserId").val(), isAll: isAll, TransactionCategory: $("#TransactionCategory").val(), Status: $("#Status").val(), WarehouseId: $("#WarehouseId").val() },

            //            //"url": "/Cities/GetListViewModel",
            //            "type": "POST",
            //            "datatype": "json"
            //        },
            //        "columns": [
            //            { "title": "TransactionId", "data": "Id", "searchable": true, "visible": false },
            //            { "title": "Location", "data": "LocationName", "searchable": true },

            //            { "title": "Transaction Code", "data": "TransactionCode", "searchable": true },

            //            {
            //                "TransactionId": 'datetime',
            //                "def": function () { return new Date(); },
            //                "format": 'M/D/YYYY',
            //                "fieldInfo": 'US style m/d/y format', "data": "InputDate", "title": "Entry Date", "searchable": false
            //            },
            //            { "title": "Amount", "data": "TransactionAmount", "searchable": false },
            //            { "title": "Description", "data": "Description", "searchable": true },
            //            { "title": "Transaction Type", "data": "TransactionType", "searchable": true },
            //            { "title": "Voucher Type", "data": "TransactionCategory", "searchable": true },

            //            { "title": "Rec / Pay By", "data": "PayReceiveAccountName", "searchable": true },
            //            { "title": "Income / Expense", "data": "IncomeExpenseHead", "searchable": true },

            //            { "title": "Asset / Liability", "data": "LiabilityAssetHead", "searchable": true },

            //            {
            //                "title": "Referance Data",
            //                "className": "text-nowrap text-center",
            //                "data": {
            //                    Id: "Id" //,
            //                },
            //                "render": function (data, type, row) {
            //                    var salesreport = '@Url.Action("InvoiceViewReport", "Sales")?saleId=' + data.SalesId;
            //                    var purchasereport = '@Url.Action("PurchaseInvoiceViewReport", "Purchase")?purchaseId=' + data.PurchaseId;


            //                    var buttons = '';
            //                    if (data.Customer != null) {
            //                        buttons += '<p class="m-1" style="color:purple"> ' + data.Customer + ' </p>';
            //                    }
            //                    if (data.SalesCode != null) {
            //                        buttons += '<a href=' + salesreport + ' class="label label-purple text-white lineheight" style="font-size:16px" target=_blank> ' + data.SalesCode + '</a>';
            //                    }



            //                    if (data.Supplier != null) {
            //                        buttons += '<p class="m-1" style="font-size:14px;color:red"> ' + data.Supplier + ' </p>';
            //                    }
            //                    if (data.PurchaseCode != null) {
            //                        //buttons += '<p class="lineheight" style="font-size:16px;color:black"> ' + data.PurchaseCode + ' </p>';

            //                        buttons += '<a href=' + purchasereport + '  class="label label-danger text-white lineheight" style="font-size:13px"  target=_blank> ' + data.PurchaseCode + '</a>';
            //                    }


            //                    if (data.Member != null) {
            //                        buttons += '<p style="color:black"> ' + data.Member + ' </p>';
            //                    }
            //                    if (data.Employee != null) {
            //                        buttons += '<p style="color:blue"> ' + data.Employee + ' </p>';
            //                    }


            //                    //else {
            //                    //    buttons += '<label class="lineheight" style="font-size:16px;color:black"> =N/A= </label>';

            //                    //}
            //                    return buttons;
            //                }
            //            },


            //            //{ "title": "Customer", "data": "Customer", "searchable": true },
            //            //{ "title": "Supplier", "data": "Supplier", "searchable": true },
            //            //{ "title": "Member", "data": "Member", "searchable": true },
            //            //{ "title": "Employee", "data": "Employee", "searchable": true },

            //            //{ "title": "PurchaseCode", "data": "PurchaseCode", "searchable": true },
            //            //{ "title": "SalesCode", "data": "SalesCode", "searchable": true },




            //            {
            //                "title": "Amount",
            //                "className": "text-nowrap text-center",
            //                "data": {
            //                    Id: "Id" //,
            //                },
            //                "searchable": true,
            //                "render": function (data, type, row) {
            //                    var buttons = '';
            //                    if (data.TransactionAmount > 0) {
            //                        if (data.TransactionType == "Paid") {

            //                            buttons += '<p class="label label-danger text-white mt-2" style="font-size:13px;"> ' + formatter.format(data.TransactionAmount) + ' </p>';

            //                        }
            //                        else if (data.TransactionType == "Received") {
            //                            buttons += '<label class="label label-success text-white mt-2" style="font-size:13px;color:black"> ' + formatter.format(data.TransactionAmount) + ' </label>';

            //                        }
            //                        else {
            //                            buttons += '<p style="color:black"> ' + formatter.format(data.TransactionAmount) + ' </p>';
            //                        }
            //                    }
            //                    return buttons;
            //                }
            //            },

            //            { "title": "Status", "data": "Status", "searchable": true },
            //            {
            //                "className": "text-nowrap",
            //                "data": {
            //                    Id: "Id" //,
            //                    //VoucherTransactionIdName:"VoucherTransactionIdName",
            //                    //isPosted:"isPosted"
            //                },

            //                "render": function (data, TransactionId, row) {
            //                    var myUrlprint = '@Url.Action("TransactionPrint", "Admin")?TransactionId=' + data.Id;
            //                    var myUrledit = '@Url.Action("EditTransaction", "Admin")?TransactionId=' + data.Id;
            //                    var myUrldelete = '@Url.Action("DeleteTransaction", "Admin")?TransactionId=' + data.Id;
            //                    var myUrlView = '@Url.Action("ViewTransaction", "Admin")?TransactionId=' + data.Id;
            //                    var myReportlView = '@Url.Action("TransactionVoucherViewReport", "Admin")?TransactionId=' + data.Id;


            //                    var message = `return confirm('Are you sure you want to Remove this Transaction ?')`;

            //                    var buttons = '';
            //                    //'<span data-toggle="tooltip" title="Print"> < a href =\"' + myUrlprint + '\" class=\"fa fa-eye text-success px-1 h4\" target=\"_blank\"></a></span>';
            //                    //buttons += '<span data-toggle="tooltip" title="Copy"> <a href=\"' + myUrlCreateCopy + '\" class=\"fas fa-copy text-info px-1 h4\" target=\"_blank\"></a></span>'

            //                    if (!data.isPost) {
            //                        buttons += '<span data-toggle="tooltip" title="Edit"> <a href=\"' + myUrledit + '\" class=\"btn btn-icon btn-warning btn-sm  mb-1\" target=\"_blank\"><i class="bi bi-pencil-square"></i></a></span>' +
            //                            '<span data-toggle="tooltip" title="Delete"> <a href=\"' + myUrldelete + '\" onclick = \"' + message + '\"   class=\"btn btn-icon btn-danger btn-sm  mb-1\" target=\"_blank\"><i class="bi bi-x"></i></a></span>' +
            //                            '<span data-toggle="tooltip" title="View"> <a href=\"' + myUrlView + '\" class=\"fa fa-eye fa-2x text-info px-1 h4\" target=\"_blank\"></a></span>' +
            //                            '<span data-toggle="tooltip" title="View"> <a href=\"' + myReportlView + '\" class=\"fa fa-file-pdf-o text-success fa-2x px-1 h4\" target=\"_blank\"></a></span>';


            //                    } else {
            //                        buttons += '<span data-toggle="tooltip" title="View"> <a href=\"' + myUrlView + '\" class=\"fa fa-eye fa-2x text-info px-1 h4\" target=\"_blank\"></a></span>' +
            //                            '<span data-toggle="tooltip" title="View"> <a href=\"' + myReportlView + '\" class=\"fa fa-file-pdf-o fa-2x text-success px-1 h4\" target=\"_blank\"></a></span>';
            //                    }
            //                    return buttons;
            //                }

            //            }
            //        ],
            //        //"order": [0, "desc"],
            //        "processing": true,
            //        "language": {
            //            "lengthMenu": "_MENU_",
            //            //"zeroRecords": "Nothing found - sorry",
            //            //"info": "Showing page _PAGE_ of _PAGES_",
            //            "infoEmpty": "No records available",
            //            "infoFiltered": "(filtered from _MAX_ total records)",
            //            "searchPlaceholder": "Search",
            //            "sSearch": '<em class="bi bi-search"></em>'
            //        },
            //        "destroy": true
            //    });
            //    //$('#tbllist_filter input').unbind();
            //    // alert('Load Successfully');
            //    //$('.dataTables_filter input').bind('keyup', function (e) {
            //    //    if (e.keyCode == 13) {
            //    //        //alert('enter');
            //    //        table.search(this.value).draw();
            //    //    }
            //    //});
            //}

        });

        $('#Status, #WarehouseId, #UserId, #TransactionCategory').select2({
            theme: 'bootstrap-5',
        });

        var CultureInfoViewFormat = '@HttpContextAccessor.HttpContext.Session.GetString("CultureInfoViewFormat").ToString()';
        var CurrencyShortNameViewFormat = '@HttpContextAccessor.HttpContext.Session.GetString("CurrencyShortName").ToString()';


        var formatter = new Intl.NumberFormat(CultureInfoViewFormat, ///'en-US'
            {
                style: 'currency',
                currency: CurrencyShortNameViewFormat,///'BDT'
                minimumFractionDigits: 2,
            });

    </script>
}

