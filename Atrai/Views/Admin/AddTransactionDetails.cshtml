@*@Html.AntiForgeryToken()
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery AntiForgery*@

@model Atrai.Model.Core.Entity.TransactionModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Add Transaction Details";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}

<link href="~/AdminEla/Assets/css/floatingLable.css" rel="stylesheet" />
<style>
    /*  .input-validation-error {
                            border: 2px solid #f00;
                            background: #fee;
                        }

                        #styletext {
                            color: transparent;
                            background: #666666;
                            -webkit-background-clip: text;
                            -moz-background-clip: text;
                            background-clip: text;
                            text-shadow: 0px 3px 3px rgba(255,255,255,0.5);
                            font-weight: 100;
                            font-size: 40px;
                        }


                        th {
                            font-size: 14px;
                        }

                        td {
                            font-size: 12px;
                        }


                        div.dataTables_length {
                            float: right;
                        }

                        div.dataTables_filter {
                            float: left;
                            font-size: 17px;
                        }

                        div.dataTables_paginate {
                            float: right;
                        }

                        div.DTTT {
                            float: left;
                            margin-right: 50px;
                        }

                        div.buttons {
                            clear: both;
                        }

                        .fas, .far {
                            font-size: 10px !important;
                        }

                        .table-sm th {
                            padding: .8em;
                            background: rgb(192,196,196);
                            background: linear-gradient(0deg, rgba(192,196,196,0.6224556717218137) 1%, rgba(255,255,255,0.6224556717218137) 65%, rgba(151,149,162,0.2527077725621498) 100%);
                            font-family: 'Roboto Condensed', sans-serif;
                            font-weight: 500;
                            font-size: 15px;
                        }

                        .table-hover tbody tr:hover td, .table-hover tbody tr:hover th {
                            background: linear-gradient(0deg, rgba(192,196,196,0.6224556717218137) 1%, rgba(255,255,255,0.6224556717218137) 65%, rgba(151,149,162,0.2527077725621498) 100%);
                        }

                        table.dataTable tbody tr.selected, table.dataTable tbody th.selected, table.dataTable tbody td.selected {
                            color: green;
                        }

                        .select-box {
                            position: relative;
                            display: block;
                            width: 100%;
                            margin: 0 auto;
                            font-family: 'Open Sans', 'Helvetica Neue', 'Segoe UI', 'Calibri', 'Arial', sans-serif;
                            font-size: 18px;
                            color: #60666d;
                        }

                        #myInputSearch {
                            background-image: url('../../Content/css/searchicon.png');
                            background-position: 10px 12px;
                            background-repeat: no-repeat;
                            width: 100%;
                            padding: 12px 20px 12px 40px;
                            border: 1px solid #ddd;
                            text-align: center;
                            font-size: 22px;
                            margin-bottom: 12px;
                        }

                          .tbltransactionlist th:first-child, .tbltransactionlist tbody td:first-child {
                            position: sticky !important;
                            left: 0px;
                            background-color: #f2f2f2e6 !important;
                            z-index: 1;
                        }

                        .tbltransactionlist tfoot td:first-child {
                            position: sticky !important;
                            left: 0px;
                            background-color: #f2f2f2e6 !important;
                            z-index: 1;
                        }

                        .tbltransactionlist th:nth-child(2) {
                            position: sticky !important;
                            left: 70px;
                            background-color: #f2f2f2e6 !important;
                            z-index: 1;
                        }

                        .tbltransactionlist tbody td:nth-child(2) {
                            position: sticky !important;
                            left: 70px;
                            background-color: #f2f2f2e6 !important;
                            z-index: 1;
                        }

                        .tbltransactionlist tbody td:nth-child(3), th:nth-child(3) {
                            position: sticky !important;
                            left: 140px;
                            background-color: #f2f2f2e6 !important;
                            z-index: 1;
                        }


                        table.dataTable.display tbody > tr.selected:hover, table.dataTable.display tbody > tr > .selected:hover {
                            background-color: transparent;
                        }*/



    .table td:last-child {
        background-color: transparent !important;
    }

    table.dataTable tbody > tr.selected, table.dataTable tbody > tr > .selected, .txtMultExportInvoice.selected {
        background: linear-gradient(0deg, rgba(94, 121, 203, 0.57) 25%, rgba(209, 229, 250, 0.59) 86%, rgba(159, 217, 255, 0.55) 100%);
        font-weight: bolder;
        font-weight: 400;
        color: #05025e;
    }


    p.lineheight {
        line-height: 6px;
        vertical-align: middle;
    }

    hr.hr-text {
        position: relative;
        border: none;
        height: 1px;
        background: #999;
    }

        hr.hr-text::before {
            content: attr(data-content);
            display: inline-block;
            background: #fff;
            font-weight: bold;
            font-size: 0.85rem;
            color: #999;
            border-radius: 30rem;
            padding: 0.2rem 0.5rem;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

    .dropdown-item {
        padding: 5px 1rem;
        color: #67757c;
        /*text-align: center;*/
    }

      .modal-size {  /*for save modal*/
        width: 80%;
      }

</style>


<div class="page-wrapper">
    @Html.AntiForgeryToken()
    <div class="container-fluid">
        <!-- Start Page Content -->

        <div class="card">
            <div class="card-header py-1">
                @*<div class="py-7 text-center">
                <h2 id="styletext" class="text-center">@ViewBag.Title</h2>
                </div>*@



                @if (@ViewBag.Type == "Sales" || @ViewBag.Type == "Customer")
                {
                    <h3 style="color:darkgreen">Received Amount From Customer</h3>
                }
                else if (@ViewBag.Type == "Purchase" || @ViewBag.Type == "Supplier")
                {
                    <h3 style="color:red">Paid To Supplier</h3>
                }
                else if (@ViewBag.Type == "Paid")
                {
                    <h3 style="color:red">Amount Paid</h3>
                }
                else if (@ViewBag.Type == "Received")
                {
                    <h3 style="color:darkgreen">Amount Received</h3>
                }
                else if (@ViewBag.Type == "CashContra")
                {
                    <h3 style="color:darkgreen"> Cash Received / Withdrawn from Bank.</h3>
                }
                else if (@ViewBag.Type == "BankContra")
                {
                    <h3 style="color:royalblue"> Cash Deposit To Bank.</h3>
                }
                else if (@ViewBag.Type == "CustomerDiscount")
                {
                    <h3 style="color:red"> Discount Given to Customer</h3>
                }
                else if (@ViewBag.Type == "SupplierDiscount")
                {
                    <h3 style="color:royalblue">Discount by Supplier.</h3>
                }
                else
                {
                    <h3 style="color:royalblue"> Accounts Transaction </h3>
                }
            </div>


            <div class="card-body">

                @using (Html.BeginForm("AddTransactionDetails", "Admin", FormMethod.Post, new { id = "myform", enctype = "multipart/form-data" }))
                {
                    @*@Html.AntiForgeryToken()*@
                    <div class="container-fluid">

                        <input type="hidden" id="mode" name="mode" value="@ViewBag.Title" />

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @if (Model != null)
                        {

                            <input type="hidden" id="Id" name="Id" value="@Model.Id" />
                            <input type="hidden" id="TransactionId" name="TransactionId" value="@Model.Id" />

                            <input type="hidden" id="LuserId" name="LuserId" value="@Model.LuserId" />
                            <input type="hidden" id="ComId" name="ComId" value="@Model.ComId" />
                            <input type="hidden" id="LuserIdUpdate" name="LuserIdUpdate" value="@Model.LuserIdUpdate" />
                            <input type="hidden" id="CreateDate" name="CreateDate" value="@Model.CreateDate" />
                            <input type="hidden" id="UpdateDate" name="UpdateDate" value="@Model.UpdateDate" />
                            <input type="hidden" asp-for="isSystem" />
                            <input type="hidden" asp-for="TransactionCategory" />
                            <input type="hidden" asp-for="TransactionType" />


                        }
                        else
                        {
                            <input type="hidden" id="ComId" name="ComId" value="0" />
                            <input type="hidden" id="Id" name="Id" value="" />
                            <input type="hidden" id="CreateDate" name="CreateDate" value="" />
                            <input type="hidden" id="UpdateDate" name="UpdateDate" value="" />


                        }




                        <div class="order-md-1">
                            <form class="needs-validation" novalidate>
                                <div class="row">

                                    <div id="divwarehosueid" class="col-md-2 col-12">
                                        <div class="mb-2">
                                            @*<span class="input-group-text px-2 py-0">
                    @Html.LabelFor(model => model.WarehouseId)
                </span> *@
                                            <strong>@Html.LabelFor(model => model.WarehouseId)</strong>
                                            @Html.DropDownListFor(x => x.WarehouseId,
                                        new SelectList((IEnumerable<SelectListItem>)ViewBag.Warehouse, "Value", "Text"),
                                        htmlAttributes: new { @class = "form-control", id = "WarehouseId" })
                                            @Html.ValidationMessageFor(model => model.WarehouseId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div id="divcurrencyid" class="col-md-2 col-12">

                                        <div class="mb-2">
                                            @* <div class="input-group-prepend">
                     <span class="input-group-text px-2 py-0">
                        @Html.LabelFor(x => x.CurrencyId)
                    </span>
                </div> *@
                                            <strong>@Html.LabelFor(x => x.CurrencyId)</strong>
                                            @Html.DropDownListFor(x => x.CurrencyId,
                                        new SelectList((IEnumerable<SelectListItem>)ViewBag.Currency, "Value", "Text"),
                                        htmlAttributes: new { @class = "form-control", id = "CurrencyId" })
                                            @Html.ValidationMessageFor(x => x.CurrencyId, "", new { @class = "text-danger" })
                                        </div>

                                    </div>
                                    <div class="col-md-1 col-12 mt-1" id="divCurrency">
                                        <div class="d-flex mt-3 ms-2 d-none" id="yourRateParent" style="width: 126%;">
                                            <label style="margin-top: 10px;">1 <span class="rate"></span><span class="flag"></span> = </label>
                                            @* <input type="text" class="form-control" id="CurrencyRate" style="border-radius:0.4; width: 150px;"> *@
                                            <input type="text" class="form-control w-50 h-100 ms-2 me-2" id="MultiiCurrencyId" style="border-radius:0px;" hidden>
                                            @* <label style="margin-top: 10px;">BDT</label> *@
                                        </div>
                                    </div>
                                    <div id="divcurrencyrate" class="col-md-3 col-12">
                                        <div class="mb-2">
                                            @* <div class="input-group-prepend">
                     <span class="input-group-text px-2 py-0">
                        @Html.LabelFor(x => x.CurrencyRate)
                    </span>
                </div> *@
                                            <strong>@Html.LabelFor(x => x.CurrencyRate)<span>(</span><span>BDT</span><i class="flag-icon flag-icon-bd"></i><span>)</span></strong>
                                            @Html.TextBoxFor(x => x.CurrencyRate, null, new { @class = "form-control", @placeholder = "Currency Rate", @value = 1 ,@id = "CurrencyRate"})
                                            @Html.ValidationMessageFor(x => x.CurrencyRate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>



                                <div class="row">

                                    <div class="col-md-2 col-12">
                                        <div class="mb-2">
                                            @* <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.TransactionCode, "Code")
                                                </span>
                                            </div> *@
                                            <strong>@Html.LabelFor(model => model.TransactionCode, "Code")</strong>
                                            @Html.EditorFor(model => model.TransactionCode, new { htmlAttributes = new { @class = "form-control" , @readonly="readonly" } })
                                            @Html.ValidationMessageFor(model => model.TransactionCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="col-md-2 col-12">
                                        <div class="mb-2">
                                            @* <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.InputDate, "Entry Date")
                                                </span>
                                            </div> *@
                                            <strong> @Html.LabelFor(model => model.InputDate, "Entry Date")</strong>
                                            <input asp-for="InputDate" class="form-control tg" value="@Model.InputDate.ToString("yyyy-MM-dd")" type="date" />
                                            <span asp-validation-for="InputDate" class="text-danger"></span>
                                        </div>
                                    </div>

                                </div>




                                <div class="row">
                                    @if (@ViewBag.Type == "Sales" || @ViewBag.Type == "Customer")
                                    {
                                        <div class="col-md-4 col-12">
                                            <div class="mb-2">
                                                @* <div class="input-group-prepend">
                                                     <span class="input-group-text px-2 py-0">
                                                        @Html.LabelFor(model => model.Customer, "Customer")
                                                    </span>
                                                </div> *@
                                                <strong>@Html.LabelFor(model => model.Customer, "Customer")</strong>
                                                @Html.DropDownListFor(x => x.CustomerId,
                                                new SelectList((IEnumerable<SelectListItem>)ViewBag.Customer, "Value", "Text"), "Select Customer",
                                                htmlAttributes: new { @class = "form-control form-control-sm", id = "CustomerId" })

                                                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                            </div>
                                                                                              <h3 id="CustomerPrevDue" class="float-left text-danger">
                                        </h3>
                                        </div>
                                    }
                                    else if (@ViewBag.Type == "Purchase" || @ViewBag.Type == "Supplier")
                                    {
                                        <div id="divsupplierid" class="col-md-2 col-12">
                                            <div class="mb-2">
                                                @* <div class="input-group-prepend">
                                                     <span class="input-group-text px-2 py-0">
                                                        @Html.LabelFor(x => x.Supplier)
                                                    </span>
                                                </div> *@
                                                <strong>@Html.LabelFor(x => x.Supplier)</strong>
                                                @Html.DropDownListFor(x => x.SupplierId,
                                        new SelectList((IEnumerable<SelectListItem>)ViewBag.Supplier, "Value", "Text"), "Select Supplier",
                                        htmlAttributes: new { @class = "form-control", id = "SupplierId" })
                     
                                                @Html.ValidationMessageFor(x => x.SupplierId, "", new { @class = "text-danger" })
                                            </div>
                                            <h3 id="SupplierPrevDue" class="float-left text-danger">
                                            </h3>
                                        </div>
                                    }

                                    <div class="col-md-2 col-12">
                                        <div type="button" class="btn btn-primary btn-block  mb-2" id="addplus" onclick="getReferance()" style="margin-top: 10px;">Load</div>
                                    </div>
                                    <div class="col-md-3 col-12 mt-3 d-none" id="InBdt">
                                        <span style="font-weight: bold;">Amount(BDT):</span><span id="amount-in-bd"></span>
                                    </div>




                                </div>


                                <div class="row">


                                    <div class="col-md-3 col-12" id="divdebitaccountid">
                                        <div class="mb-2">
                                            @* <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.DebitAccountId, "Received By")
                                                </span>
                                            </div> *@
                                            <strong>@Html.LabelFor(model => model.DebitAccountId, "Received By")</strong>
                                            @Html.DropDownListFor(x => x.DebitAccountId,
                                        new SelectList((IEnumerable<SelectListItem>)ViewBag.DebitAccountId, "Value", "Text"), "Select Receiving Head",
                                        htmlAttributes: new { @class = "form-control", id = "DebitAccountId" })
                                            @*@Html.DropDownList("AssetLiabilityHead", null, htmlAttributes: new { id = "DebitAccountId", @class = "form-control" })*@
                                            @*<select asp-for="DebitAccountId" disabled class="form-control"></select>*@
                                            @Html.ValidationMessageFor(model => model.DebitAccountId, "", new { @class = "text-danger" })
                                            <h3 id="DebitAccountIdBalance" class="float-right text-danger"></h3>
                                        </div>
                                         
                                    </div>


                                    <div class="col-md-5 col-12" id="divcreditaccountid">
                                        <div class="input-group mb-2">
                                            @* <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.CreditAccountId, "Paid By")
                                                </span>
                                            </div> *@
                                            <strong>@Html.LabelFor(model => model.CreditAccountId, "Paid By")</strong>
                                            @Html.DropDownListFor(x => x.CreditAccountId,
                                        new SelectList((IEnumerable<SelectListItem>)ViewBag.CreditAccountId, "Value", "Text"), "Select Payment Head",
                                        htmlAttributes: new { @class = "form-control", id = "CreditAccountId" })

                                            @*<select asp-for="AccountId" class="form-control"></select>*@
                                            @Html.ValidationMessageFor(model => model.CreditAccountId, "", new { @class = "text-danger" })
                                               <h3 id="CreditAccountIdBalance" class="float-right text-danger"></h3>
                                        </div>
                                    </div>

                                    <div class="col-md-3 col-12">
                                        <div class="mb-2">
                                            @* <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.TransactionAmount, "Amount")
                                                </span>
                                            </div> *@
                                            <strong>@Html.LabelFor(model => model.TransactionAmount, "Amount")</strong>
                                            <input type="text" asp-for="TransactionAmount" class="form-control TransactionAmount" />
                                            @Html.ValidationMessageFor(model => model.TransactionAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

    @*                                <div class="col-md-3 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.TransactionAmount, "ABCAmount")
                                                </span>
                                            </div>
                                            <input type="text" asp-for="TransactionAmount" class="form-control" />
                                            @Html.ValidationMessageFor(model => model.TransactionAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>*@


                                    <div id="divdiscountamount" class="col-md-4 col-12  my-2 d-none">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(x => x.DiscountAmount)
                                                </span>
                                            </div>
                                            @Html.TextBoxFor(x => x.DiscountAmount, null, new { @class = "form-control"})
                                            @Html.ValidationMessageFor(x => x.DiscountAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>



                                    <div class="col-md-3 col-12  d-none">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.VATAmount, "VATAmount")
                                                </span>
                                            </div>
                                            <input type="text" asp-for="VATAmount" class="form-control" />
                                            @Html.ValidationMessageFor(model => model.VATAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>



                                    <div class="col-md-3 col-12  d-none">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.AITAmount, "AITAmount")
                                                </span>
                                            </div>
                                            <input type="text" asp-for="AITAmount" class="form-control" />
                                            @Html.ValidationMessageFor(model => model.AITAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>




                                     <div id="divCheckInformation" class="col-md-8 col-12 my-2">
                                        <div class="row">

                                            <div class="col-md-6 col-12">
                                                <div class="form-floating mb-3">
                                                    <input type="text" asp-for="CheckNo" class="form-control" placeholder=" ">
                                                    <label asp-for="CheckNo"></label>
                                                    <span asp-validation-for="CheckNo" class="text-danger"></span>
                                                </div>
                                            </div>


                                            <div class="col-md-6 col-12">
                                                <div class="form-floating mb-3">
                                                    <input type="text" asp-for="CheckRemarks" class="form-control" placeholder=" ">
                                                    <label asp-for="CheckRemarks"></label>
                                                    <span asp-validation-for="CheckRemarks" class="text-danger"></span>
                                                </div>
                                            </div>


                                            <div class="col-md-4 col-12">
                                                <div class="form-floating mb-3">
                                                    <input asp-for="dtFromChk" class="form-control tg" value="@Model.dtFromChk.GetValueOrDefault().ToString("yyyy-MM-dd")" type="date" />
                                                    <label asp-for="dtFromChk"></label>
                                                     <span asp-validation-for="dtFromChk" class="text-danger"></span>
                                                </div>
                                            </div>


                                            <div class="col-md-4 col-12">
                                                <div class="form-floating mb-3">
                                                    <input asp-for="dtToChk" class="form-control tg" value="@Model.dtToChk.GetValueOrDefault().ToString("yyyy-MM-dd")" type="date" />
                                                    <label asp-for="dtToChk"></label>
                                                    <span asp-validation-for="dtToChk" class="text-danger"></span>
                                                </div>
                                            </div>


                                            <div class="col-md-4 col-12">
                                                <div class="form-floating mb-3">
                                                    <input asp-for="dtClearChk" class="form-control tg" value="@Model.dtClearChk.GetValueOrDefault().ToString("yyyy-MM-dd")" type="date" />
                                                    <label asp-for="dtClearChk"></label>
                                                    <span asp-validation-for="dtClearChk" class="text-danger"></span>
                                                </div>
                                            </div>




                                        </div>
                                    </div>


                                    <div class="col-md-3 col-3">
                                        <label class="form-label fw-semibold">
                                            @Html.LabelFor(x => x.TransactionTags)
                                        </label>
                                        <div class="mb-2">
                                            @*<label class="form-label fw-semibold">Tags</label>

                                        *@


                                            <input id="MultiTags" type="text" value="" data-role="tagsinput" />
                                            @*@Html.ValidationMessageFor(x => x.TransactionTags, "", new { @class = "text-danger" })*@

                                        </div>


                                    </div>

                                    <div class="col-md-8 col-12">
                                        <div class="mb-2">
                                            @* <div class="input-group-prepend">
                                                 <span class="input-group-text px-2 py-0">
                                                    @Html.LabelFor(model => model.Description, "Description")
                                                </span>
                                            </div> *@
                                            <strong>@Html.LabelFor(model => model.Description, "Description")</strong>
                                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-5 col-12">
                                        <h5>
                                            Current Due :
                                        </h5>
                                         <h5 class="text-danger ttlloadamountreferancedue">0.00</h5>
                                    </div>
                                    <div class="col-md-5 col-12">
                                        <h5>
                                            Rcv. Amt. :
                                        </h5>
                                         <h5 class="text-success ttlloadamountreferance">0.00</h5>
                                    </div>
                                </div>

                                <hr />

                                <div class="table-responsive mb-2">
                                    <button type="button" class="btn btn-primary btn-sm mb-2" data-bs-toggle="modal" data-bs-target="#exampleModal" id="viewmod"><i class="bi bi-plus-lg" style=" margin-right: 0px;"></i></button>

                                    <table id="tbltransactionlist" class="tbltransactionlist text-nowrap display table table-striped table-hover table-bordered text-center" width="100%">
                                        <thead>
                                            <tr>

                                                <th>TransactionId</th>
                                                <th>Id</th>
                                                <th>Doc. Type</th>
                                                <th>Ref. Code</th>
                                                <th>Date</th>
                                                <th>Ref. Id</th>
                                                <th>Ref. Name</th>
                                                <th>Amount</th>

                                                <th>Discount</th>
                                                <th>VAT</th>
                                                <th>AIT</th>
                                                <th>Net Amount</th>
                                                <th>Rem. Due</th>
                                                <th>Action</th>



                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Model != null)
                                            {
                                                if (Model.TransactionDetails != null)
                                                {
                                                    foreach (var item in Model.TransactionDetails)
                                                    {
                                                        <tr class="txtMultmasterlcdetails">

                                                            <td>
                                                                @item.TransactionId
                                                            </td>
                                                            <td>
                                                                @item.Id
                                                            </td>
                                                            @if (@ViewBag.Type == "Sales" || @ViewBag.Type == "Customer")
                                                            {
                                                                if (@item.Sales != null)
                                                                {
                                                                    <td>Sales</td>
                                                                    <td>@item.Sales.SaleCode</td>
                                                                    <td> @item.Sales.SalesDate.ToString("dd-MMM-yy")  </td>
                                                                    <td> @item.SalesId   </td>
                                                                    <td> @item.Sales.CustomerModel.Name</td>
                                                                    <td> @item.Sales.NetAmount </td>
                                                                }
                                                                else
                                                                {
                                                                    <td> Sales</td>
                                                                    <td> Prev. Due</td>
                                                                    <td> </td>
                                                                    <td> </td>
                                                                    <td> @Model.Customer.Name</td>
                                                                    <td> 0</td>
                                                                }

                                                            }
                                                            else if (@ViewBag.Type == "Purchase" || @ViewBag.Type == "Supplier")
                                                            {
                                                                if (@item.Purchase != null)
                                                                {
                                                                    <td>Purchase</td>
                                                                    <td>@item.Purchase.PurchaseCode</td>
                                                                    <td> @item.Purchase.PurchaseDate.ToString("dd-MMM-yy")   </td>
                                                                    <td> @item.PurchaseId   </td>
                                                                    <td> @item.Purchase.SupplierModel.SupplierName</td>
                                                                    <td> @item.Purchase.NetAmount </td>
                                                                }
                                                                else
                                                                {
                                                                    <td> Purchase</td>
                                                                    <td> Prev. Due</td>
                                                                    <td> </td>
                                                                    <td> </td>
                                                                    <td> @Model.Supplier.SupplierName</td>
                                                                    <td> 0</td>
                                                                }

                                                            }
                                                            <td>
                                                                @item.Discount
                                                            </td>
                                                            <td>
                                                                @item.VAT
                                                            </td>
                                                            <td>
                                                                @item.AIT
                                                            </td>
                                                            <td>
                                                                @item.NetAmount
                                                            </td>
                                                            <td>
                                                                @item.NetAmount
                                                            </td>
                                                            <td>
                                                                @*<a data-itemid="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash fa-2x"></i></a>*@
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                            }

                                        </tbody>

                                        <tfoot>
                                            <tr class="font-weight-bolder">
                                                <td colspan="4">
                                                    @*<button type="button" class="btn-purple btn-sm" data-toggle="modal" data-target="#productinfoModal"><i class="fa fa-plus"></i></button>*@

                                                </td>

                                                <td class="text-right h6" colspan="3">
                                                    <h6>Total Amount :</h6>
                                                </td>
                                                <td class="ttlamount h5">
                                                </td>
                                                <td class="ttldiscount h5">
                                                </td>
                                                <td class="ttlvat h5">
                                                </td>
                                                <td class="ttlait h5">
                                                </td>
                                                <td class="ttlnetamount h5">
                                                </td>
                                                <td class="ttlremdue h5">
                                                </td>



                                            </tr>
                                        </tfoot>
                                    </table>

                                </div>

                                @*</div>*@

                                <div class="modal" id="confirmModal" tabindex="-1">
                                    <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content modal-size">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Confirmation</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <p></p>
                                            </div>
                                            <div class="modal-footer justify-content-between">
                                                <button type="button" class="btn btn-light button" data-bs-dismiss="modal">No</button>
                                                <button type="button" class="btn btn-success button" id="confirmYesBtn">Yes</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row col-md-8 col-12 m-0 p-0">

                                    <div class="col-md-3 col-12 mr-0 mb-1">
                                        @if (ViewBag.ActionType == "Create")
                                        {
                                            @*<input type="submit" value="Save Changes" class="btn  btn-outline-primary " /> *@

                                            @* <button id="AddTransactionDetails" class="btn  btn-success " onclick="ConfirmDialog('Do you want to save ?')" type="button">Save</button> *@
                                            <button id="AddTransactionDetails" class="btn btn-success" onclick="ConfirmationDialog()" type="button">Save</button>

                                        }
                                        else if (ViewBag.ActionType == "Edit")
                                        {
                                            @* <button id="AddTransactionDetails" class="btn btn-outline-warning btn-block text-danger " onclick="ConfirmDialog('Do you want to update ?')" type="button">Update Changes</button> *@
                                            <button id="AddTransactionDetails" class="btn btn-success " onclick="ConfirmationDialog()" type="button">Update </button>
                                        }
                                        @*                                    else if (ViewBag.ActionType == "Delete")
                                    {
                                    <button class="btn btn-outline-danger btn-block " type="button" onclick="Bank_delete()">Delete</button>
                                    }*@
                                    </div>
                                    <div class="col-md-2 col-6 mb-1">
                                        @Html.ActionLink("Reset", "AddTransactionDetails", "Admin", new { Type = @ViewBag.Type }, new { @class = "btn btn-warning btn-block " })
                                    </div>

                                    <div class="col-md-3 col-6 mb-1">
                                        @Html.ActionLink("Back To List", "TransactionList", "Admin", null, new { @class = "btn btn-info btn-block " })
                                    </div>


                                    <div class="col-md-4 col-12">
                                        <!-- Example single danger button -->
                                        <div class="dropdown">
                                            <a class="btn btn-primary btn-block  dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                Add New Entry
                                            </a>

                                            <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">

                                                @Html.ActionLink("Transaction", "AddTransaction", null, null, new { @class = "dropdown-item", @id = "btnBack" })
                                                <hr data-content="Received" class="hr-text">
                                                @Html.ActionLink("By Income", "AddTransaction", new { Type = "Income" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("From Customer", "AddTransaction", new { Type = "Customer" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("By Invoice", "AddTransaction", new { Type = "Sales" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("From Customer - Multiple Invoice", "AddTransactionDetails", new { Type = "Customer" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("From Supplier", "AddTransaction", new { Type = "ReceivedFromSupplier" }, new { @class = "dropdown-item", @id = "btnFromSupplier" })
                                                @*<div class="dropdown-divider"></div>*@
                                                <hr data-content="Paid" class="hr-text">
                                                @Html.ActionLink("For Expense", "AddTransaction", new { Type = "Expense" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("To Supplier", "AddTransaction", new { Type = "Supplier" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("By Purchase Order", "AddTransaction", new { Type = "Purchase" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("To Supplier - Multiple Invoice", "AddTransactionDetails", new { Type = "Supplier" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("To Customer", "AddTransaction", new { Type = "PaidToCustomer" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("To Employee", "AddTransaction", new { Type = "PaidToEmployee" }, new { @class = "dropdown-item", @id = "btnBack" })


                                                <hr data-content="Accounts" class="hr-text">
                                                @Html.ActionLink("Cash Received From Bank", "AddTransaction", new { Type = "CashContra" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("Cash Deposit To Bank", "AddTransaction", new { Type = "BankContra" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("Contra", "AddTransaction", new { Type = "Contra" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                <hr data-content="Discount" class="hr-text">
                                                @Html.ActionLink("Discount To Customer", "AddTransaction", new { Type = "CustomerDiscount" }, new { @class = "dropdown-item", @id = "btnBack" })
                                                @Html.ActionLink("Discount From Supplier", "AddTransaction", new { Type = "SupplierDiscount" }, new { @class = "dropdown-item", @id = "btnBack" })

                                            </div>
                                        </div>
                                    </div>



                                </div>


                            </form>
                        </div>

                    </div>

                    <div class="modal" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-xl" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <div class="col-12">



                                        <div class="row">

                                            <h5 class="modal-title" id="exampleModalLabel">Add Invoice</h5>

                                            <div class=" float-right mt-1 ml-3 mr-2" style=" width: 450px!important; ">
                                                <label class="pr-2"><input type="radio" name="RptType" value="Discount" /> Discount  </label>
                                                <label class="pr-2"><input type="radio" name="RptType" value="VAT" /> VAT  </label>
                                                <label class="pr-2"><input type="radio" name="RptType" value="AIT" /> AIT </label>
                                                <label class="pr-2"><input type="radio" name="RptType" value="NetAmount" checked="checked" /> Net Amount  </label>

                                            </div>

                                            <div class="col-md-2 col-6">
                                                <h4>Collection : </h4>
                                            </div>

                                            <div class="col-md-2 col-6">
                                                <input type="text" id="TotalCollection" class="form-control form-control-sm" />
                                            </div>

@*                                            <div class="col-md-1 col-6">
                                                <div type="button" class="btn btn-primary btn-sm" id="btnautoselect" onclick="AutoSelectInvoice()">Check</div>
                                            </div>*@
                                            
                                            <div class="" style=" width: 50px!important; ">
                                                <div type="button" class="btn btn-primary btn-sm" id="btnautoadd" onclick="AutoAddToRow()">Ok</div>
                                            </div>

                                            <div class="" style=" width: 150px!important; ">
                                                <div type="button" class="btn btn-primary btn-sm" id="btnPayment">Adv. Payment</div>
                                            </div>

                                            <div class="col-md-1 col-6">
                                            <button id="btnclose" type="button" class="btn btn-light btn-sm" data-bs-dismiss="modal" aria-label="Close">
                                                 <i class="bi bi-x-lg"></i>
                                            </button>
                                            </div>

                                        </div>
                                    </div>

                                    @* <button id="btnclose" type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                   </button> *@
                                </div>

                                <div class="modal-body">
                                    <div id="SubSectionList" class="">
                                        @*<div class="col-md-12 order-md-1">*@
                                        <div class="table-responsive">
                                            @*<table id="tblreferance" class="table-sm table-responsive table-striped table-hover text-center;" style="text-align: center; width:100%">*@
                                            <table id="tblreferance" class="table-striped table table-sm table-hover text-center" width="100%">
                                                <thead class="text-nowrap">
                                                    <tr>
                                                        <th>TransactionId</th>
                                                        <th>Id</th>
                                                        <th>Doc. Type</th>
                                                        <th>Ref. Code</th>
                                                        <th>Date</th>
                                                        <th>Ref. Id</th>
                                                        <th>Ref. Name</th>
                                                        <th>Amount</th>
                                                        <th>Discount</th>
                                                        <th>VAT</th>
                                                        <th>AIT</th>
                                                        <th>Net Amount</th>
                                                        <th>Rem. Due</th>
                                                        <th>Action</th>
                                                        <th>Collected</th>
                                                        <th>Action</th>

                                                    </tr>
                                                </thead>
                                                @*<tbody>
                                            @if (ViewBag.RefDocList != null)
                                            {
                                            foreach (var item in ViewBag.RefDocList)
                                            {
                                            <tr class="txtMultmasterlcdetails">

                                            <td>
                                            @item.TransactionId
                                            </td>
                                            <td>
                                            @item.Id
                                            </td>
                                            <td>
                                            @item.DocType
                                            </td>
                                            <td>
                                            @item.RefCode
                                            </td>
                                            <td>
                                            @item.RefId
                                            </td>
                                            <td>
                                            @item.RefName
                                            </td>
                                            <td>
                                            @item.Amount
                                            </td>
                                            <td>
                                            @item.Discount
                                            </td>
                                            <td>
                                            @item.NetAmouont
                                            </td>
                                            <td>
                                            <a data-itemid="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash fa-2x"></i></a>
                                            </td>
                                            </tr>
                                            }
                                            }

                                            </tbody>*@
                                                <tfoot>
                                                    <tr>
                                                        <td colspan="2">

                                                        </td>
                                                        <td class="text-right" colspan="1">
                                                            <h6>Current Due :</h6>
                                                        </td>
                                                        <td colspan="1">
                                                             <h6 class="text-danger ttlloadamountreferancedue">0.00</h6>
                                                        </td>
                                                        <td class="text-right" colspan="2">
                                                            <h6>Receiving Amt :</h6>
                                                        </td>
                                                        <td colspan="1">
                                                            <h6 class="ttlloadamountreferance">0.00</h6>
                                                        </td>
                                                        <td colspan="1"></td>
                                                        <td colspan="1"></td>
                                                        <td colspan="2"></td>

                                                    </tr>
                                                </tfoot>
                                            </table>

                                        </div>

                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <div class="col-md-12">


                                        <div class="row">
                                            <div class="col-md-2 col-12">
                                                <button type="button" class="btn btn-block btn-danger " data-dismiss="modal">Close</button>
                                                @*<button type="button" id="btnCloseProductModal" class="btn btn-secondary" data-dismiss="modal">Close</button>*@

                                            </div>

                                            <div class="col-md-3 col-12">
                                            </div>




                                            <div class="col-md-5 col-12">
                                                <h4>Total Selected Amount : </h4>
                                            </div>

                                            <div class="col-md-2 col-12">
                                                <input type="text" id="TotalAmountReferance" class="form-control disabled" />
                                            </div>

                                        </div>

                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>


                }
            </div>


            @section scripts{


                        <script>
                    $(document).ready(function () {
                        // Bind a click event to the "Adv. Payment" button
                        $('#btnPayment').click(function () {
                            // Get the DataTable instance
                            var table = $('#tbltransactionlist').DataTable();

                            var currentDate = getCurrentDateFormatted();

                            // Create an array for the row data
                            var rowData = [
                                null, // TransactionId
                                '0', // Id
                                'Purchase', // DocType
                                'Advance', // RefCode
                                currentDate, // RefDate
                                '', // RefId
                                'Supplier', // RefName
                                0,  // Amount (use 0 instead of empty string)
                                0,  // Discount (use 0 instead of empty string)
                                0,  // VAT (use 0 instead of empty string)
                                0,  // AIT (use 0 instead of empty string)
                                0,  // NetAmount (use 0 instead of empty string)
                                0,  // Rem. Due
                                '',  // Action
                                2
                            ];

                            // Add the row data to the table
                            table.row.add(rowData).draw(false);
                        });
                    });



                    function getCurrentDateFormatted() {
                        var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                        var today = new Date();
                        var day = today.getDate();
                        var month = today.getMonth();
                        var year = today.getFullYear().toString().substr(-2); // Get last two digits of the year
                        return day + "-" + months[month] + "-" + year;
                    }


                    function customerinvoice() {
                        //alert($("#Customer").val());
                        //tblaccountList.rows().remove().draw(false);
                        var MyAppUrlSettings = {
                            MyUsefulUrl: '@Url.Action("GetCustomerInvoice", "Sales")'
                        }
                        //alert(WW'test');
                        $.ajax({
                            type: 'POST',
                            url: MyAppUrlSettings.MyUsefulUrl,
                            dataType: 'json',
                            data: { CustomerId: $("#CustomerId").val(), TransactionId: $("#Id").val() }, //, saleid: $("#Id").val()
                            success: function (result) {
                                //console.log(result.CustomerInvoiceList);
                                //var s = '<option value=>Please Select Sales Invoice</option>';
                                //for (var i = 0; i < result.CustomerInvoiceList.length; i++) {
                                //    s += '<option value="' + result.CustomerInvoiceList[i].Value + '">' + result.CustomerInvoiceList[i].Text + '</option>';
                                //}
                                //$("#SalesId").html(s);



                                $("#CustomerPrevDue").text("Previous Due :  " + result.CustomerInfo.PrevDue.toLocaleString());
                            },
                            error: function (ex) {
                                alert('Failed.' + ex);
                            }
                        });
                        return false;
                    };

                    function supplierinvoice() {

                        //alert($("#Customer").val());
                        // tblaccountList.rows().remove().draw(false);
                        var MyAppUrlSettings = {
                            MyUsefulUrl: '@Url.Action("GetSupplierInvoice", "Purchase")'
                        }
                        //alert('test');
                        $.ajax({
                            type: 'POST',
                            url: MyAppUrlSettings.MyUsefulUrl,
                            dataType: 'json',
                            data: { SupplierId: $("#SupplierId").val(), TransactionId: $("#Id").val() }, //, saleid: $("#Id").val()
                            success: function (result) {

                                //var s = '<option value=>Please Select Purchase Invoice</option>';
                                //for (var i = 0; i < result.SupplierInvoiceList.length; i++) {
                                //    s += '<option value="' + result.SupplierInvoiceList[i].Value + '">' + result.SupplierInvoiceList[i].Text + '</option>';
                                //}
                                //$("#PurchaseId").html(s);

                                $("#SupplierPrevDue").text("Previous Due :  " + result.SupplierInfo.PrevDue.toLocaleString());
                            },
                            error: function (ex) {
                                alert('Failed.' + ex);
                            }
                        });
                        return false;

                    };



                     $('#CustomerId').select2({})
                        .on("select2:select", function(e) {
                                customerinvoice();

                        });



                        $('#SupplierId').select2({})
                        .on("select2:select", function(e) {
                            supplierinvoice();
                        });


                    $("#CustomerId").select2();
                    $("#SupplierId").select2();
                    $("#CreditAccountId").select2();
                    $("#DebitAccountId").select2();




                    $("#divCheckInformation").hide();
                        function LedgerBalance(Type,AccountId) {
                             $("#divCheckInformation").hide();
                            //alert(AccountId);
                            //alert($("#Customer").val());
                            //tblaccountList.rows().remove().draw(false);
                            var MyAppUrlSettings = {
                                MyUsefulUrl: '@Url.Action("GetLedgerBalanceWithCategory", "Values")'
                            }


                            if (AccountId > 0)
                            {
                            //alert('test');
                                    $.ajax({
                                        type: 'Get',
                                        url: MyAppUrlSettings.MyUsefulUrl,
                                        dataType: 'json',
                                        data: { AccountId: AccountId, TransactionId: $("#Id").val() }, //, saleid: $("#Id").val()
                                        success: function (result) {

                                            console.log(result);
                                            if (Type == 'DebitAccountId') {
                                                $("#DebitAccountIdBalance").text("Balance :  " + result.AccountBalance.toLocaleString());
                                            }
                                            else if(Type == 'CreditAccountId')
                                            {
                                                $("#CreditAccountIdBalance").text("Balance :  " + result.AccountBalance.toLocaleString());
                                            }
                                            //console.log(result.AccountCategory);
                                            //alert('Wait');
                                                if (result.AccountCategory.indexOf("Bank") !== -1) {
                                                    $("#divCheckInformation").show();
                                                } else {
                                                    $("#divCheckInformation").hide();
                                                }

                                            //else if (Type == 'AssetLiabilityAccountId') {
                                            //    $("#AssetLiabilityAccountIdBalance").text("Balance :  " + result.toLocaleString());
                                            //    //$("#CustomerPrevDue").text("Previous Due :  " + result.CustomerInfo.PrevDue.toLocaleString());
                                            //}

                                        },
                                        error: function (ex) {
                                            alert('Failed.' + ex);
                                        }
                                    });

                            }
                            return false;
                        };

                        LedgerBalance('CreditAccountId', $('#CreditAccountId').val());
                        LedgerBalance('DebitAccountId', $('#DebitAccountId').val());




                        $('#CreditAccountId').select2({})
                        .on("select2:select", function (e) {
                            //alert('hit');
                            LedgerBalance('CreditAccountId',$('#CreditAccountId').val());
                        });

                        $('#DebitAccountId').select2({})
                        .on("select2:select", function (e) {
                            //alert('hit');
                            LedgerBalance('DebitAccountId', $('#DebitAccountId').val());
                        });



                    var isMultiCurrency = '@HttpContextAccessor.HttpContext.Session.GetInt32("isMultiCurrency").ToString()';
                    if (isMultiCurrency == "0") {
                        $("#divcurrencyid").hide();
                        $("#divcurrencyrate").hide();
                    }

                    var Typeabc = '@ViewBag.Type';

                    if (Typeabc.toLowerCase() == "Customer".toLowerCase()) {

                        $("#divdebitaccountid").show();
                        $("#divcreditaccountid").hide();
                    }
                    else if (Typeabc.toLowerCase() == "Supplier".toLowerCase())
                    {

                        $("#divdebitaccountid").hide();
                        $("#divcreditaccountid").show();
                    }


                    function ConfirmationDialog() {

                        var debitAccountId = $('#DebitAccountId').val(); // Assuming your DebitAccountId input has the id 'DebitAccountId'
                        var creditAccountId = $('#CreditAccountId').val(); // Assuming your DebitAccountId input has the id 'CreditAccountId'
                        var HitAmount  = $("#TransactionAmount").val();


                            //if (HitAmount == 0 || HitAmount == '')
                            //{
                            //     alert('Need Transaction Amount.');
                            //    return;

                            //}


                            if (Typeabc.toLowerCase() == "Customer".toLowerCase()) {

                                    if (HitAmount == 0 || HitAmount == '')
                                    {
                                            alert('Need Receiving Amount.');
                                        return;

                                    }


                                    if (debitAccountId === null || debitAccountId === '') {
                                        // Display an error message
                                        alert('Receiving Account is required.');
                                        return;
                                    }
                            }
                            else if (Typeabc.toLowerCase() == "Supplier".toLowerCase())
                            {
                                    if (HitAmount == 0 || HitAmount == '')
                                    {
                                            alert('Need Payment Amount.');
                                        return;

                                    }

                                    if (creditAccountId === null || creditAccountId === '') {
                                        // Display an error message
                                        alert('Payment Account is required.');
                                        return;
                                    }
                            }


                        ConfirmDialog('Do you want to save ?', function () {
                            SaveTransactionModel();
                        });




                        // $('<div></div>').appendTo('body')
                        //     .html('<div><h6>' + message + '?</h6></div>')
                        //     .dialog({
                        //         modal: true,
                        //         title: 'Save / Update message',
                        //         zIndex: 10000,
                        //         autoOpen: true,
                        //         width: 'auto',
                        //         resizable: false,
                        //         buttons: {
                        //             Yes: function() {

                        //                 $(this).dialog("close");
                        //                 $("#AddTransactionDetails").prop("disabled", false);
                        //                 SaveTransactionModel();
                        //             },
                        //             No: function() {

                        //                 $(this).dialog("close");

                        //             }
                        //         },
                        //         close: function(event, ui) {
                        //             $(this).remove();
                        //         }
                        //     });
                    };


                    function ConfirmDialog(message, callback) {
                        // Set the message in the modal
                        $('#confirmModal .modal-body p').text(message);

                        // Open the Bootstrap modal
                        $('#confirmModal').modal('show');

                        // Handle Yes button click
                        $('#confirmYesBtn').on('click', function () {
                            // Close the Bootstrap modal
                            $('#confirmModal').modal('hide');

                            // Execute the callback function if it's a function
                            if (typeof callback === 'function') {
                                callback();
                            }
                        });

                        // Handle modal close event
                        $('#confirmModal').on('hidden.bs.modal', function () {
                            // Clean up event handlers
                            $('#confirmYesBtn').off('click');
                            $('#confirmModal').off('hidden.bs.modal');


                        });
                    }

                    $('#exampleModal').on('shown.bs.modal', function(e) {
                        $.fn.dataTable.tables({ visible: true, api: true }).columns.adjust();
                    });


                    var antiForgeryToken;
                    antiForgeryToken = $("input[name='Dominate_ANTIFORZERY']").val();


                    $('#TransactionAmount').attr("disabled", true);
                    $('#TotalAmountReferance').attr("disabled", true);


                    function TransactionModel_delete() {

                        var Id = $("#Id").val();


                        $.ajax({

                            url: '@Url.Action("Delete", "Admin")',
                            //url: '@Url.Action("Delete")',
                            data: JSON.stringify({ id: Id }), //use id here
                            //data: JSON.stringify(salesmain),
                            type: 'POST',
                            async: 'false',
                            //headers: { "X-CSRF-TOKEN-Dominate_ANTIFORZERY": antiForgeryToken },
                            contentType: 'application/json;',
                            dataType: 'json',
                            success: function(result) {
                                if (result.Success == "1") {
                                    customFile('3', result.ex);
                                    window.setTimeout(function() {
                                        // Move to a new location or you can do something else
                                        window.location.href = '@Url.Action("TransactionList", "Admin")';
                                    }, 500);
                                }
                                else {
                                    toastr.error(result.ex);
                                }
                            }
                        });
                    }


                    var tblRefList;
                    var tbltransactionlist;


                    //$("#DebitAccountId").select2();
                    //$("select").select2({
                    //    theme: "bootstrap4",
                    //});





                    function getReferance() {


                        var CustomerId = $("#CustomerId option:selected").val();
                        var SupplierId = $("#SupplierId option:selected").val();
                        //console.log(CustomerId);
                        //console.log(SupplierId);


                        if (CustomerId == "") {
                            toastr.error("Please Select Customer First.");
                            return true;
                        }

                        if (SupplierId == "") {
                            toastr.error("Please Select Supplier First.");
                            return true;

                        }



                        $.ajax({
                            type: 'GET',
                            url: '@Url.Action("GetRefDetails", "Admin")',
                            //dataType: 'json',
                            contentType: 'application/json;',
                            dataType: 'json',
                            //async: 'false',
                            // headers: { "X-CSRF-TOKEN-Dominate_ANTIFORZERY": antiForgeryToken },
                            data: { CustomerId: CustomerId, SupplierId: SupplierId },
                            success: function(result) {

                                if (result.success == "1") {
                                    if ($.fn.DataTable.isDataTable('#tblreferance')) {
                                        tblRefList.clear().draw();
                                    }

                                    var d = result.data;
                                    //console.log(d);
                                    for (var i = 0; i < d.length; i++) {
                                        //console.log(d[i]);
                                        $('#tblreferance').dataTable().fnAddData([
                                            d[i].TransactionId,
                                            d[i].Id,
                                            d[i].DocType,
                                            d[i].RefCode,
                                            d[i].RefDate,
                                            d[i].RefId,
                                            d[i].RefName,
                                            d[i].Amount,

                                            d[i].Discount,
                                            d[i].VAT,
                                            d[i].AIT,
                                            d[i].NetAmount,
                                            0,
                                            "",
                                            d[i].Amount
                                        ]);
                                    }
                                    //if (CustomerId > 0) {
                                    //    $('#tblreferance').dataTable().fnAddData([
                                    //        0,
                                    //        0,
                                    //        "Sales",
                                    //        "Prev. Due",
                                    //        "",
                                    //        null,
                                    //        $("#CustomerId option:selected").text(),
                                    //        0,
                                    //        0,
                                    //        0,
                                    //        0,
                                    //        ""
                                    //    ]);
                                    //}

                                    //    if (SupplierId > 0) {
                                    //    $('#tblreferance').dataTable().fnAddData([
                                    //        0,
                                    //        0,
                                    //        "Purchase",
                                    //        "Prev. Due",
                                    //        "",
                                    //        null,
                                    //         $("#SupplierId option:selected").text(),
                                    //        0,
                                    //        0,
                                    //        0,
                                    //        0,
                                    //        ""
                                    //    ]);
                                    //}


                                    $("#CustomerId").select2({ disabled: 'readonly' });

                                    $("#viewmod").click();


                                    //toastr.success('Data loaded in memory');
                                    toastr.success('Data loaded in memory').css({
                                        'background-color': 'green',
                                        'color': 'white'
                                    });

                                    TotalLoadAmountReferance();
                                    //TotalLoadAmountReferance();
                                    //TotalLoadAmount();

                                    //$("#mod").trigger('click');
                                }
                                else {
                                    alert(result.ex);
                                }
                            }
                        });

                    };


                    function ClearData() {
                        $("#Id").val('');
                        $("#TransactionCode").val('');
                        $("#Description").val('');
                    }

                    function SaveTransactionModel() {

                        //var d = parseFloat($("#TransactionAmount").val());
                        //if (d > 15) {
                        //    $("#TransactionAmount").removeClass(" yellow");
                        //    $("#TransactionAmount").addClass("important red");
                        //    $("#TransactionAmount").css({ 'color': 'yellow', 'font-size': '150%' });
                        //    toastr.error('Load qty must not be greter than 15 metric ton');
                        //    return true;
                        //}
                        //else {
                        //    $("#TransactionAmount").removeClass("important red");
                        //    $("#TransactionAmount").addClass(" yellow");
                        //    $("#TransactionAmount").css({ 'color': 'green', 'font-size': '100%' });
                        //}


                        $('select').removeAttr('disabled');


                        if (!$("#myform")) {
                            toastr.error('Please Fill Up All Necessary Information Correctly.');
                            $("html, body").animate({ scrollTop: 0 }, 500);
                            $("#AddTransactionDetails").prop("disabled", false);
                            return true;
                        }
                        var multipleTag = $("#MultiTags").tagsinput('items');

                        var TransactionSubData = {
                            "Id": 0,
                            "TransactionId": "",
                            "SalesId": "",
                            "PurchaseId": "",
                            "Amount": 0.00,
                            "Discount": 0.00,
                            "VAT": 0.00,
                            "AIT": 0.00,
                            "NetAmount": 0.00,
                            "ComId": "",
                            "LuserId": ""
                        };

                        var TransactionModel = {
                            Id: "",
                            TransactionCode: "",
                            TransactionType: "",
                            TransactionCategory: "",
                            TransactionTags: multipleTag,

                            CheckNo: "",
                            dtFromChk: "",
                            dtToChk: "",
                            dtClearChk: "",
                            CheckRemarks: "",




                            InputDate: "",
                            AccountId: "",
                            DebitAccountId: "",

                            Description: "",
                            CurrencyId: "",
                            WarehouseId: "",
                            CurrencyRate: 0.00,


                            TransactionAmount: 0.00,
                            DiscountAmount: 0.00,
                            VATAmount: 0.00,
                            AITAmount: 0.00,


                            //isPost:false,
                            CreditAccountId: null,
                            CustomerId: null,
                            SupplierId: null,
                            PurchaseId: null,
                            SalesId: null,


                            TransactionDetails: []

                        };


                        TransactionModel.Id = $("#Id").val();
                        TransactionModel.TransactionCode = $("#TransactionCode").val();
                        TransactionModel.TransactionType = $("#TransactionType").val();
                        TransactionModel.TransactionCategory = $("#TransactionCategory").val();

                        TransactionModel.InputDate = $("#InputDate").val();
                        //TransactionModel.AccountId = $("#AccountId option:selected").val();
                        TransactionModel.DebitAccountId = $("#DebitAccountId option:selected").val();
                        TransactionModel.CreditAccountId = $("#CreditAccountId option:selected").val();
                        TransactionModel.CustomerId = $("#CustomerId option:selected").val();
                        TransactionModel.SupplierId = $("#SupplierId option:selected").val();




                        TransactionModel.CheckNo = $("#CheckNo").val();
                        TransactionModel.dtFromChk = $("#dtFromChk").val();
                        TransactionModel.dtToChk = $("#dtToChk").val();
                        TransactionModel.dtClearChk = $("#dtClearChk").val();
                        TransactionModel.CheckRemarks = $("#CheckRemarks").val();




                        //TransactionModel.LuserId = $("#LuserId").val();//'@HttpContextAccessor.HttpContext.Session.GetString("LuserId")';
                        //TransactionModel.ComId = $("#ComId").val();//'@HttpContextAccessor.HttpContext.Session.GetString("ComId")';
                        TransactionModel.CreateDate = $("#CreateDate").val();

                        TransactionModel.CurrencyId = $("#CurrencyId").val();
                        TransactionModel.WarehouseId = $("#WarehouseId").val();


                        TransactionModel.CurrencyRate = $("#CurrencyRate").val();
                        TransactionModel.Description = $("#Description").val();
                        TransactionModel.TransactionAmount = $("#TransactionAmount").val();
                        TransactionModel.DiscountAmount = $("#DiscountAmount").val();
                        TransactionModel.VATAmount = $("#VATAmount").val();
                        TransactionModel.AITAmount = $("#AITAmount").val();




                        var oTablesubdatacheck = $('#tbltransactionlist').dataTable().fnGetData();

                        if (oTablesubdatacheck.length == 0) {
                            alert("Please Fill Necessary Data.");
                            return;
                        }

                        if ($.fn.DataTable.isDataTable('#tbltransactionlist')) {
                            var rows = $("#tbltransactionlist").dataTable().fnGetNodes();
                            //var oTablevouchrSub = $('#tbltransactionlist').dataTable().fnGetData();

                            //var data_AccId = tblVouchersub.column('AccId:name').data();

                            //console.log(rows);

                            var DeliveryReferanceIds = tbltransactionlist.column('TransactionId:name').data();
                            ////console.log(DeliveryReferanceIds);
                            ////alert(DeliveryReferanceIds.length)
                            var TransactionModelSubIds = tbltransactionlist.column('Id:name').data();
                            var TransactionModelSubRefIds = tbltransactionlist.column('ReferanceId:name').data();

                            //console.log(TransactionModelSubRefIds);

                            //var Truckloadnetamounts = tbltransactionlist.column('Truckloadnetamount:name').data();
                            ////var Truckloadnetamounts = rows[i].cells[8].children[0].value | 0;

                            for (var i = 0; i < DeliveryReferanceIds.length; i++) {

                                TransactionSubData.TransactionId = $("#Id").val();
                                TransactionSubData.Id = TransactionModelSubIds[i];

                                //console.log($.trim(rows[i].cells[0].innerHTML.replace(/[\$,]/g, '')));
                                if ($.trim(rows[i].cells[0].innerHTML.replace(/[\$,]/g, '')) == "Sales") {
                                    TransactionSubData.SalesId = TransactionModelSubRefIds[i];
                                }
                                if ($.trim(rows[i].cells[0].innerHTML.replace(/[\$,]/g, '')) == "Purchase") {
                                    TransactionSubData.PurchaseId = TransactionModelSubRefIds[i];
                                }

                                //TransactionSubData.Amount = rows[i].cells[6].children[0].value.replace(/[\$,]/g, '');
                                TransactionSubData.Discount = rows[i].cells[5].children[0].value.replace(/[\$,]/g, '');
                                TransactionSubData.VAT = rows[i].cells[6].children[0].value.replace(/[\$,]/g, '');
                                TransactionSubData.AIT = rows[i].cells[7].children[0].value.replace(/[\$,]/g, '');

                                TransactionSubData.NetAmount = rows[i].cells[8].children[0].value.replace(/[\$,]/g, '');

                                TransactionSubData.ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId")';
                                TransactionSubData.LuserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId")';

                                TransactionModel.TransactionDetails.push(TransactionSubData);



                                TransactionSubData = {
                                    "Id": 0,
                                    "TransactionId": "",
                                    "SalesId": "",
                                    "PurchaseId": "",
                                    "Amount": 0.00,
                                    "Discount": 0.00,
                                    "VAT": 0.00,
                                    "AIT": 0.00,
                                    "NetAmount": 0.00,
                                    "ComId": "",
                                    "LuserId": ""
                                };

                            }
                            //console.log(TransactionModel);
                            //alert('Wait');
                        }


                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("AddTransaction", "Admin")',
                            dataType: 'json',
                            async: 'false',
                            headers: { "X-CSRF-TOKEN-Dominate_ANTIFORZERY": antiForgeryToken },
                            data: { model: TransactionModel },
                            success: function(result) {
                                if (result.Success == "1") {

                                    toastr.success('Data Save Successfully');
                                    tblRefList.clear();
                                    ClearData();
                                    tbltransactionlist.clear();
                                    tbltransactionlist.draw();
                                    //alert('found');

                                    //console.log(result.Id);



                                    var transactionidprint = result.Id;


                                    window.setTimeout(function() {
                                        // Move to a new location or you can do something else

                                        //alert(transactionidprint);

                                        //var url = '@Url.Action("Print", "Admin")';
                                        //window.open(url, '_blank')


                                        var urllink = '@Url.Action("TransactionVoucherViewReport", "Admin", new { TransactionId = "xxxx"})'.replace("xxxx", transactionidprint);

                                        //alert(urllink);

                                        //var url = '@Url.Action("Print", "Admin")?id=' + transactionidprint;
                                        //alert(urllink);

                                        window.open(urllink, '_blank');
                                    }, 500);


                                    //alert($("#TransactionId").val());
                                    //if ($('#edit').length > 0) {
                                    if ($("#TransactionId").val() > 0) {

                                        window.location.href = '@Url.Action("TransactionList", "Admin")';
                                    }
                                    else {
                                        var viewbagdata = '@ViewBag.Type';
                                        var urllink = '@Url.Action("AddTransactionDetails", "Admin",new { Type = "xxxx"})'.replace("xxxx", viewbagdata);
                                        window.open(urllink, '_self');
                                    }



                                    getReferance();

                                    TotalLoadAmountReferance();
                                    TotalLoadAmount();

                                    $("#AddTransactionDetails").prop("disabled", false);



                                    $("#TransactionAmount").val(0);//---fahad
                                    $(".ttlloadamountreferance").text(0);//---fahad
                                    $(".ttlloadamountreferancedue").text(0);//---fahad




                                    //alert(result.TransactionCode);
                                    $("#TransactionCode").val(result.TransactionCode);
                                    $("#Description").val(result.Description);


                                }
                                else {
                                    alert(result.ex);
                                }
                            },
                            error: function(ex) {
                                alert('error');
                            }
                        });

                        $('#TransactionAmount').attr("disabled", true);


                    };

                    $('#tbltransactionlist').on('keyup', '.NetAmount , .VAT , .AIT , .Discount', function() {
                        TotalLoadAmount();
                    });


                    //$('#tbltransactionlist').on('keyup', ".NetAmount , .Discount , .VAT  , .AIT ", TotalLoadAmount()); //tbltransactionlist

                    $('#TotalCollection').on('keyup', function() {
                        AutoSelectInvoice(0);
                    });



                    function AutoAddToRow() {
                        let tblRefListabc = $("#tblreferance").DataTable();

                        // Externally trigger the "Deselect All" button click event
                        tblRefListabc.button(2).trigger();
                       // $('#btnclose').trigger();

                        $("#exampleModal").modal("hide");


                    }


                    function AutoSelectInvoice(BalanceAmount) {


                        var BalanceAmount = parseFloat($('#TotalCollection').val());
                        var tblcollectiontable = $('#tblreferance').DataTable();

                        tblcollectiontable.rows().every(function(rowIdx, tableLoop, rowLoop) {
                            //this.select ();
                            //console.log(this.data()[3]);
                            if (parseFloat(this.data()[7]) <= BalanceAmount) {
                                BalanceAmount = BalanceAmount - parseFloat(this.data()[7]);
                                console.log(BalanceAmount);
                                this.cell(rowIdx, 14).data(this.data()[7]);
                                this.select();
                            }
                            else if ((parseFloat(this.data()[7]) > BalanceAmount) && (BalanceAmount > 0)) {
                                this.cell(rowIdx, 14).data(BalanceAmount);
                                BalanceAmount = BalanceAmount - parseFloat(this.data()[7]);
                                console.log(BalanceAmount);


                                this.select();
                            }

                            //else
                            //{
                            //    //this.select();
                            //    //return false;
                            //}
                            //else
                            //{

                            //}
                        });

                    }



                    function TotalLoadAmount() {


                        //var abcdef = $('#tblreferance').DataTable();

                        //var $loadnetamount;

                        //var totalloadnetamount = 0;

                        //var oTable = $("#tbltransactionlist").dataTable().fnGetData();
                        var rows = $("#tbltransactionlist").dataTable().fnGetNodes();
                        //console.log(rows);

                        let $loadamount = 0.00;
                        let $loaddiscountamount = 0.00;
                        let $loadvatamount = 0.00;
                        let $loadaitamount = 0.00;

                        let $loadnetamount = 0.00;
                        let $loadremdueamount = 0.00;

                        let $totalloadamount = 0.00;
                        let $totalloaddiscountamount = 0.00;
                        let $totalloadvatamount = 0.00;
                        let $totalloadaitamount = 0.00;

                        let $totalloadnetamount = 0.00;
                        let $totalloadremdueamount = 0.00;


                        for (var i = 0; i < rows.length; i++) {



                            $loadamount = rows[i].cells[4].innerHTML.replace(/[\$,]/g, '');
                            //alert($loadamount);


                            $loaddiscountamount = rows[i].cells[5].children[0].value.replace(/[\$,]/g, '');
                            $loadvatamount = rows[i].cells[6].children[0].value.replace(/[\$,]/g, '');
                            $loadaitamount = rows[i].cells[7].children[0].value.replace(/[\$,]/g, '');

                            $loadnetamount = rows[i].cells[8].children[0].value.replace(/[\$,]/g, '');
                            rows[i].cells[9].children[0].value = $loadamount - $loadnetamount - $loaddiscountamount - $loadvatamount - $loadaitamount;
                            $loadremdueamount = rows[i].cells[9].children[0].value.replace(/[\$,]/g, '');



                            //alert($loaddiscountamount);
                            // alert($loadnetamount);
                            //alert($loadremdueamount);


                            //var k=loadnetamount.toFixed(2);


                            $totalloaddiscountamount += parseFloat($loaddiscountamount);
                            $totalloadvatamount += parseFloat($loadvatamount);
                            $totalloadaitamount += parseFloat($loadaitamount);

                            $totalloadamount += parseFloat($loadamount);
                            $totalloadnetamount += parseFloat($loadnetamount);
                            $totalloadremdueamount += parseFloat($loadremdueamount);


                            //alert($totalloaddiscountamount);
                            //alert($totalloadamount);
                            //alert($totalloadnetamount);
                            //alert($totalloadremdueamount);



                        }




                        $(".ttlamount").val($totalloadamount.toLocaleString());
                        $(".ttlamount").text($totalloadamount.toLocaleString());

                        $(".ttldiscount").val($totalloaddiscountamount.toLocaleString());
                        $(".ttldiscount").text($totalloaddiscountamount.toLocaleString());

                        $(".ttlvat").val($totalloadvatamount.toLocaleString());
                        $(".ttlvat").text($totalloadvatamount.toLocaleString());

                        $(".ttlait").val($totalloadaitamount.toLocaleString());
                        $(".ttlait").text($totalloadaitamount.toLocaleString());

                        $(".ttlnetamount").val($totalloadnetamount.toLocaleString());
                        $(".ttlnetamount").text($totalloadnetamount.toLocaleString());

                        $(".ttlremdue").val($totalloadremdueamount.toLocaleString());
                        $(".ttlremdue").text($totalloadremdueamount.toLocaleString());



                        //$(".ttlloadnetamount").val(totalloadnetamount.toLocaleString());
                        //$(".ttlloadnetamount").text(totalloadnetamount.toLocaleString());

                        $("#TransactionAmount").val($totalloadnetamount.toLocaleString());//---fahad
                        $("#TransactionAmount").text($totalloadnetamount.toLocaleString());//---fahad

                        var currencyRate = $("#CurrencyRate").val();
                        $("#amount-in-bd").text(($totalloadnetamount*currencyRate).toLocaleString());


                        $("#DiscountAmount").val($totalloaddiscountamount);//---fahad
                        $("#DiscountAmount").text($totalloaddiscountamount);//---fahad

                        $("#VATAmount").val($totalloadvatamount);//---fahad
                        $("#VATAmount").text($totalloadvatamount);//---fahad


                        $("#AITAmount").val($totalloadaitamount);//---fahad
                        $("#AITAmount").text($totalloadaitamount);//---fahad

                        //var d =parseFloat( totalloadnetamount.toLocaleString());
                        //if (d > 15) {
                        //    $("#TransactionAmount").removeClass(" yellow");
                        //    $("#TransactionAmount").addClass("important red");
                        //    $("#TransactionAmount").css({ 'color': 'yellow', 'font-size': '150%' });
                        //    toastr.error('Load qty must not be greter than 15 metric ton');
                        //}
                        //else {
                        //    $("#TransactionAmount").removeClass("important red");
                        //    $("#TransactionAmount").addClass(" yellow");
                        //    $("#TransactionAmount").css({ 'color': 'green', 'font-size': '100%' });
                        //}


                    };

                    function TotalLoadAmountReferance() {


                        var totalloadamountreferance = 0.00;
                        var totalloadamountreferancedue = 0.00;


                        //var oTable = $("#tbltransactionlist").dataTable().fnGetData();
                        var rows = $("#tblreferance").dataTable().fnGetNodes();
                        //console.log(rows);

                        var abcdef = $('#tblreferance').DataTable();

                        var $loadnetamount;
                        var $loadnetamountdue;

                        var xyz = $('#TransactionAmount').val();

                        for (var i = 0; i < rows.length; i++) {
                            //alert('for loop');
                            //var $loadnetamount = rows[i].cells[6].children[0].valueAsNumber || 0.00;
                             let y = document.getElementById("tblreferance").rows[i + 1].cells[4].innerText;
                             let x = 0.00;
                            if ($(rows[i]).hasClass('selected')) {
                                // aReturn.push(aTrs[i]);

                                //console.log(rows[i]);
                                x = document.getElementById("tblreferance").rows[i + 1].cells[5].innerText;
                                //console.log(x);
                                $loadnetamount = x;//rows[i].val();// .cells[6].children[0].value.replace(/[\$,]/g, '');
                                totalloadamountreferance += parseFloat($loadnetamount);
                            }

                            $loadnetamountdue = parseFloat(y || 0) - parseFloat(x || 0);
                            console.log($loadnetamountdue);
                            totalloadamountreferancedue += parseFloat($loadnetamountdue);
                            x = 0.00;

                        }
                        totalloadamountreferance = totalloadamountreferance + parseFloat(xyz);


                        $(".ttlloadamountreferance").val(totalloadamountreferance.toLocaleString());
                        $(".ttlloadamountreferance").text(totalloadamountreferance.toLocaleString());

                        $("#TotalAmountReferance").val(totalloadamountreferance.toLocaleString());//---fahad
                        $("#TotalAmountReferance").text(totalloadamountreferance.toLocaleString());//---fahad


                        //for (var i = 0; i < rows.length; i++) {
                        //    //alert('for loop');
                        //    //var $loadnetamount = rows[i].cells[6].children[0].valueAsNumber || 0.00;

                        //        // aReturn.push(aTrs[i]);

                        //        //console.log(rows[i]);

                        //        let x = document.getElementById("tblreferance").rows[i + 1].cells[5].innerText;

                        //        console.log(parseFloat(x),parseFloat(y));
                        //        $loadnetamountdue = parseFloat(y || 0) - parseFloat(x || 0);//rows[i].val();// .cells[6].children[0].value.replace(/[\$,]/g, '');
                        //        totalloadamountreferancedue += parseFloat($loadnetamountdue);

                        //}
                        ////totalloadamountreferancedue = totalloadamountreferancedue;
                        $(".ttlloadamountreferancedue").val(totalloadamountreferancedue.toLocaleString());
                        $(".ttlloadamountreferancedue").text(totalloadamountreferancedue.toLocaleString());

                        //var d = parseFloat(totalloadamountreferance.toLocaleString());
                        //if (d > 15) {
                        //    $("#TotalAmountReferance").removeClass(" yellow");
                        //    $("#TotalAmountReferance").addClass("important red");
                        //    $("#TotalAmountReferance").css({ 'color': 'yellow', 'font-size': '150%' });
                        //    toastr.error('Load qty must not be greter than 15 metric ton');
                        //}
                        //else {
                        //    $("#TotalAmountReferance").removeClass("important red");
                        //    $("#TotalAmountReferance").addClass(" yellow");
                        //    $("#TotalAmountReferance").css({ 'color': 'green', 'font-size': '100%' });
                        //}

                        //tblreferance.draw();

                    };

                    var transactionTags = @Html.Raw(Json.Serialize(Model.TransactionTagsList));
                    $(document).ready(function() {

                        var $tagInput = $("#MultiTags");

                        var values = transactionTags;
                        $.each(values, function (i, value) {
                            console.log(value, i);
                            setTimeout(function () {
                                $tagInput.tagsinput('add', values[i].tag);
                            }, 100);
                        });

                    $('[data-toggle="tooltip"]').tooltip();






                        tblRefList = $("#tblreferance").DataTable({

                            "aoColumns": [

                                { name: "TransactionId", "sClass": "TransactionId", "visible": false },
                                { name: "Id", "sClass": "Id", "visible": false },
                                { name: "DocType", "sClass": "DocType", "visible": true },
                                { name: "ReferanceCode", "sClass": "ReferanceCode", "visible": true },
                                { name: "ReferanceDate", "sClass": "ReferanceDate", "visible": true },
                                { name: "ReferanceId", "sClass": "ReferanceId", "visible": false },
                                { name: "ReferanceName", "sClass": "ReferanceName", "visible": true },
                                { name: "RefAmount", "sClass": "RefAmount text-right", "visible": true },
                                { name: "Discounta", "sClass": "Discounta text-center", "visible": false },
                                { name: "VATa", "sClass": "VATa text-center", "visible": false },
                                { name: "AITa", "sClass": "AITa text-center", "visible": false },
                                { name: "NetAmount", "sClass": "NetAmount text-center", "visible": false },
                                { name: "RemDueAmount", "sClass": "RemDueAmount text-center", "visible": false },
                                { name: "IsDelete", "sClass": "Action", "visible": false },
                                { name: "CollectedAmount", "sClass": "CollectedAmount text-right", "visible": true },
                                {
                                    "data": null,
                                    //"defaultContent": "<button class='btn btn-primary'>Get Data</button>"
                                   "defaultContent": "<button class='btn btn-sm btn-success' title='If Already payment done, then you can clear it from the list.'>Clear</button>"
                                   //"defaultContent": "<button class='btn btn-sm btn-success' title='If Already payment done, then you can clear it from the list.' onclick='confirmClear(event)'>Clear</button>"
                                }
                                //{
                                //    "data": null,
                                //    "defaultContent": "<button>Click me!</button>",
                                //    "render": function ( data, type, row ) {
                                //        let ReferanceId = row[5];
                                //        let Type = row[6];

                                //        //console.log(data[5]);

                                //     return `<button data-id="${ReferanceId} data-type="${Type}">Click me!</button>`;
                                //    }

                                //}
                            ],



                            //rowCallback: function (row) {
                            //    $(row).addClass('txtMultmasterlcdetails');
                            //},
                            select: {
                                style: 'multi',
                                selector: 'td:nth-child(2),td:nth-child(3),td:nth-child(4),td:nth-child(5),td:nth-child(6)'
                            },

                            buttons: [
                                {
                                    extend: "selectAll",
                                    className: "btn-sm btn-info bi bi-check-lg",
                                    text: '',
                                    title: 'Select All',
                                    attr: {
                                        'data-toggle': 'tooltip',
                                    },
                                },
                                {
                                    extend: "selectNone",
                                    className: "btn-sm btn-warning bi bi-clock",
                                    text: '',
                                    title: 'Deselect All'

                                },
                                {
                                    extend: "selectRows",
                                    className: "btn-sm btn-success bi bi-plus-lg",
                                    text: '',
                                    title: 'Add to Collection Details',

                                    action: function(e, sourceTable, button, config) {
                                        var total_attached_value = 0;//$("#TransactionAmount").val();
                                        //var total_readyto_attached_value = $("#TotalAmountReferance").val();

                                        //var abc = parseFloat(parseFloat(total_attached_value) + parseFloat(total_readyto_attached_value));
                                        //alert(abc);


                                        //if (abc <= 15) {

                                        var selectedRows = sourceTable.rows(".selected");
                                        var mData = selectedRows.data();

                                        selectedRows.remove().draw();
                                        targetTable = $("#tbltransactionlist").DataTable();


                                        var rowCount = targetTable
                                            .column(0)
                                            .data()
                                            .length;

                                        $.each(mData, function(idx, item) {

                                            console.log(idx);
                                            console.log(item);
                                            item[13] = idx + 1 + rowCount;
                                            item[11] = item[14];


                                            var reporttype = $("input[name=RptType]:checked").val();


                                            if (reporttype == 'Discount') {
                                                item[8] = item[9];
                                                item[9] = 0;
                                            }


                                            //alert(item[24]);
                                            targetTable.row.add(JSON.parse(JSON.stringify(

                                                item
                                            )));

                                            //alert('data added');

                                        })

                                        targetTable.draw();
                                        TotalLoadAmount();
                                        ////multInputsProduct();
                                        //}
                                    }
                                }],
                            initComplete: function() {

                                $("#tblreferance button").on("click", function(evt) {

                                    var t1 = $("#tblreferance").DataTable();
                                    var t2 = $("#tbltransactionlist").DataTable();
                                    var tr = $(this).closest("tr");
                                    var row = t1.row(tr);
                                    //console.log(row);
                                    var data = JSON.parse(JSON.stringify(row.data()));
                                    //alert(data[0]);
                                    row.remove().draw();
                                    t2.row.add(data).draw();

                                    //multInputsProduct();
                                });
                            },
                            //"bFilter": true,
                            "paging": false,
                            //"order": false,
                            "orderable": false,
                            //"retrieve": true,
                            "iDisplayLength": 10,
                            "lengthMenu": [[5, 10, 20, 50, -1], [5, 10, 20, 50, "All"]],
                            "scrollX": true,
                            "scrollY": 400,
                            scrollCollapse: true,
                            //"order": [2, 'asc'],
                            //"oLanguage": { "sZeroRecords": "", "sEmptyTable": "" },
                            //dom: 'tBlip' //fahad
                            dom: '<"top"fiB>rt',
                            "language": {
                                sLengthMenu: " _MENU_",
                                search: "",
                                searchPlaceholder: "Search..."
                            }
                        });



                        //function confirmClear(event) {
                        //    if (confirm("Are you sure you want to clear this item?")) {
                        //        // Perform the clear action
                        //    }
                        //    else {
                        //        event.preventDefault();
                        //    }
                        //}


                      $('#tblreferance tbody').on('click', 'button', function () {
                        var myUrlstatusupdate = '@Url.Action("UpdatePaymentDueCollection", "Admin")';
                        var data = tblRefList.row($(this).parents('tr')).data();
                        //console.log(data);

                        var id = data[5];
                        var type = data[2];
                        var row = $(this).closest('tr');

                        // Display a confirmation dialog
                        if (confirm("Are you sure you want to Clear this item from your payment list ?")) {
                            $.ajax({
                                url: myUrlstatusupdate,
                                data: { ReferanceId: id, Type: type },
                                success: function(response) {
                                    console.log('Success!', response);
                                    // Hide the row
                                    tblRefList.row(row).remove().draw();
                                },
                                error: function(jqXHR, textStatus, errorThrown) {
                                    console.log('Error!', errorThrown);
                                }
                            });
                        }
                    });



                        //$('#tblreferance').on('click', '.rendered button', function() {
                        //    alert('hit');
                        //var myUrlstatusupdate = '@Url.Action("UpdatePaymentDueCollection", "Admin")';
                        //    var row = $(this).closest('tr');
                        //  var id = $(this).data('ReferanceId');
                        //  var type = $(this).data('Type');

                        //  console.log("Clicked button with ID:", id);
                        //  // Make an AJAX request with the ID here
                        //  // Hide the row after the AJAX request is complete
                        //  $.ajax({
                        //    url: myUrlstatusupdate,
                        //    //type: 'POST',
                        //        data: { ReferanceId: id, Type: type },
                        //    success: function(response) {
                        //      console.log('Success!', response);
                        //      // Hide the row
                        //      var table = $('#tblreferance').DataTable();
                        //      table.row(row).remove().draw();
                        //    },
                        //    error: function(jqXHR, textStatus, errorThrown) {
                        //      console.log('Error!', errorThrown);
                        //    }
                        //  });
                        //});

                        //tblRefList.MakeCellsEditable({
                        //    "onUpdate": myCallbackFunction,
                        //    "inputCss": 'my-input-class',
                        //    "columns": [8],

                        //    "inputTypes": [
                        //        {
                        //            "column": 8,
                        //            "type": "text",
                        //            "options": null
                        //        }

                        //    ]
                        //});


                        tblRefList
                            .on('select', function(e, dt, type, indexes) {
                                TotalLoadAmountReferance();
                                TotalLoadAmount();
                            })
                            .on('deselect', function(e, dt, type, indexes) {
                                TotalLoadAmountReferance();
                                TotalLoadAmount();
                            });


                        //function myCallbackFunction(updatedCell, updatedRow, oldValue) {
                        //    var total = 0;


                        //    multInputslcdetails();
                        //    console.log(total);

                        //    console.log("The new value for the cell is: " + updatedCell.data());
                        //    console.log("The old value for that cell was: " + oldValue);
                        //    console.log("The values for each cell in that row are: " + updatedRow.data());
                        //    console.log(updatedRow.index());


                        //    var cell_balanceqty = tblRefList.cell(updatedRow.index(), 12);
                        //    //alert(cell_balanceqty.data());


                        //    if (updatedCell.data() > cell_balanceqty.data()) {
                        //        alert('Wrong Input');
                        //        console.log($(this).index());

                        //        var cell = tblRefList.cell(updatedRow.index(), 8);
                        //        cell.data(cell_balanceqty.data());


                        //    }

                        //    TotalLoadAmountReferance();
                        //    TotalLoadAmount();

                        //}






                        tbltransactionlist = $('#tbltransactionlist').DataTable({
                            columns: [

                                { name: "TransactionId", "sClass": "TransactionId", "visible": false },
                                { name: "Id", "sClass": "Id", "visible": false },
                                { name: "DocType", "sClass": "DocType", "visible": true },
                                { name: "ReferanceCode", "sClass": "ReferanceCode", "visible": true },
                                { name: "ReferanceDate", "sClass": "ReferanceDate", "visible": true },
                                { name: "ReferanceId", "sClass": "ReferanceId", "visible": false },
                                { name: "ReferanceName", "sClass": "ReferanceName", "visible": true },
                                { name: "RefAmount", "sClass": "RefAmount text-right", "visible": true },
                                { name: "Discount", "sClass": "Discount text-center", "visible": true },
                                { name: "VAT", "sClass": "VAT text-center", "visible": true },
                                { name: "AIT", "sClass": "AIT text-center", "visible": true },

                                { name: "NetAmount", "sClass": "NetAmount text-center", "visible": true },
                                { name: "RemDueAmount", "sClass": "RemDueAmount text-center", "visible": true },
                                { name: "IsDelete", "sClass": "Action", "visible": false }],
                            //"tableTools": {
                            //    "sRowSelector": "td:not(:first-child)"
                            //},
                            //dom: 'litpfB',
                            dom: 'tBlip',//fahad
                            //select: "multi",

                            select: {
                                style: 'multi',
                                selector: 'td:nth-child(1),td:nth-child(2),td:nth-child(3),td:nth-child(4)'
                            },

                            columnDefs: [

                                {

                                    render: function(data) {
                                        return "<input type='number' data-val='true'  data-val-required='Please Fill Discount.' class='form-control form-control-sm discount text-center' value='" + data + "'/>"
                                    },
                                    "targets": 8
                                },

                                {

                                    render: function(data) {
                                        return "<input type='number' data-val='true'  data-val-required='Please Fill VAT.' class='form-control form-control-sm vat text-center' value='" + data + "'/>"
                                    },
                                    "targets": 9
                                },

                                {

                                    render: function(data) {
                                        return "<input type='number' data-val='true'  data-val-required='Please Fill AIT.' class='form-control form-control-sm ait text-center' value='" + data + "'/>"
                                    },
                                    "targets": 10
                                },

                                {

                                    render: function(data) {
                                        return "<input type='number' data-val='true'  data-val-required='Please Fill Amount.' class='form-control form-control-sm amount text-center'  value='" + data + "'/>"
                                    },
                                    "targets": 11
                                },

                                {

                                    render: function(data) {
                                        return "<input type='number' data-val='true'  data-val-required='Please Fill Amount.' class='form-control form-control-sm remamount text-center'  value='" + data + "' readonly=readonly/>"
                                    },
                                    "targets": 12
                                }

                            ],
                            //AddTransactionDetailsdRow: function (row) {
                            //    $(".datecell", row).datepicker(
                            //        { dateFormat: 'dd-M-yy' }
                            //        //$('#datepicker').datepicker({ dateFormat: 'dd-mm-yy' }).val();

                            //    ).val();
                            //},
                            buttons: [{
                                extend: "selectRows",
                                text: 'Detach From Transaction',
                                className: " btn-danger mb-1 mt-2",

                                action: function(e, sourceTable, button, config) {

                                    var selectedRows = sourceTable.rows(".selected");
                                    var mData = selectedRows.data();
                                    selectedRows.remove().draw();
                                    targetTable = $("#tblreferance").DataTable();
                                    $.each(mData, function(idx, item) {
                                        targetTable.row.add(JSON.parse(JSON.stringify(item)));
                                    })
                                    targetTable.draw();
                                    TotalLoadAmount();
                                    //multInputsProduct();
                                }

                            }],

                            initComplete: function() {
                                $("#tbltransactionlist button").on("click", function(evt) {

                                    var t1 = $("#tbltransactionlist").DataTable();
                                    var t2 = $("#tblreferance").DataTable();
                                    var tr = $(this).closest("tr");
                                    var row = t1.row(tr);

                                    if (row.data().length > 0 || row.data() != "undefined") {
                                        //console.log(row);
                                        var data = JSON.parse(JSON.stringify(row.data()));
                                        //alert(data[0]);
                                        row.remove().draw();
                                        t2.row.add(data).draw();
                                    }


                                    //multInputsProduct();
                                });



                            },

                            "bFilter": false,
                            //"bSort": true,
                            ordering: false,
                            "bInfo": false,
                            "async": false,
                            "paging": false,
                            "retrieve": true,
                            //"iDisplayLength": 10,
                            //"lengthMenu": [[5, 10, 20, 50, -1], [5, 10, 20, 50, "All"]],
                            "scrollX": false,
                            "scrollCollapse": true
                            //rowCallback: function (row) {
                            //    $(row).addClass('txtMultInventorySub');
                            //}
                            //,select: "multi"
                        });

                        TotalLoadAmount();


                    });
    $("#CurrencyId").on("change", function () {
    var selectedOption = $(this).find("option:selected");
    var currencyId = selectedOption.val();
    console.log('Selected Currency ID:', currencyId);
    $.ajax({
               url: '@Url.Action("GetCurrencyRateForExpense", "Admin")' + '?CurrencyId=' + currencyId,
               success: function (data) {
                   if(data[0].CurrencyShortName=="BDT"){
                       $("#yourRateParent").addClass("d-none");
                       $("#InBdt").addClass("d-none");
                   }
                   else {
                       $("#yourRateParent").removeClass("d-none");
                                    var flag = '<i class="flag-icon ' + data[0].FlagClass + '"></i>';
                                    $(".flag").html(flag);
                                    $(".rate").text(data[0].CurrencyShortName);
                        //$(".rate").text(data[0].CurrencyShortName);
                        $("#CurrencyRate").val(data[0].CurrencyRate);
                        $("#MultiiCurrencyId").val(data[0].CurrencyId);
                        var currency = $("#CurrencyRate").val();
                        var transactionAmn = $("#TransactionAmount").val();
                        $("#amount-in-bd").text(currency * transactionAmn);

                        $("#InBdt").removeClass("d-none");
                   }
                   console.log("see currency",data);

               }
           });
    $.ajax({
        url: '@Url.Action("GetRefDetailsNewForQb", "Admin")' + '?CurrencyId=' + currencyId,
        success: function (data) {
            console.log("see currency", data);
            tableItems.setData(data.data);
        }
    });
});
                        </script>
            }
            </div>

        </div>
    </div>




