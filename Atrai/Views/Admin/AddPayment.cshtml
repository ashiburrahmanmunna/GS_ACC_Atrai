@using Microsoft.AspNetCore.Http
@*@using Microsoft.AspNetCore.Antiforgery
    @inject IAntiforgery AntiForgery*@
@inject IHttpContextAccessor HttpContextAccessor
@*@model IEnumerable<Atrai.Model.Core.Entity.Acc_PurchaseMainModel>
    @{
        List<Atrai.Model.Core.Entity.Acc_PurchaseCodePrefixModel> PurchaseTypes = ViewBag.Acc_PurchaseCodePrefix;
    }*@
@model int
@{
    ViewData["Title"] = "Purchase Entry";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var DocTypeValue = ViewBag.DocTypeValue;

    //var PurchaseTypeId = ViewBag.PurchaseTypeId;
    //var PurchaseTypeName = ViewBag.PurchaseTypeName;
    var PurchaseId = ViewBag.PurchaseId;
    var SupplierId = ViewBag.SupplierId;
    var MakePayment = ViewBag.MakePayment;
    //var purchaItemsId = ViewBag.purchaItemsId;
    //var purchaItemsCategoryId = ViewBag.purchaItemsCategoryId;

    //var DocTypeId = ViewBag.DocTypeId;
    //var DocTypeName = ViewBag.DocTypeName;

}

<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />

<style>
    /* CSS for the arrow icon */
    span.arrow-icon {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        font-weight: bold;
    }

    .red-text {
        color: white;
        background-color: red;
        padding: 5px;
        border-radius: 8px;
        font-weight: bold;
        font-style: italic;
    }

    .footerButton {
        margin-top: 40px;
    }

    .green-text {
        color: white;
        background-color: green;
        border-radius: 8px;
        padding: 5px;
        font-weight: bold;
        font-style: italic;
    }

    .italic-text {
        font-style: italic;
    }
    .customize-btnew {
        background: transparent;
        border: 1px solid black;
        border-radius: 20px;
    }

        .customize-btnew:hover {
            background: #ffffff;
            border: 1px solid black;
            color: black;
            border-radius: 20px;
        }

/*    .tabulator .tabulator-header .tabulator-col {
        display: inline-flex;
        position: relative;
        box-sizing: border-box;
        flex-direction: column;
        justify-content: flex-start;
        border-right: 1px solid #aaa;
        border-bottom: 1px solid #aaa;
        background: #ffffff !important;
        text-align: left;
        vertical-align: bottom;
        overflow: hidden;
    }*/

/*    .tabulator-row .tabulator-cell {
        display: inline-block;
        position: relative;
        box-sizing: border-box;
        padding: 8px;
        border-right: 1px dotted #aaa;
        vertical-align: middle;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-weight:100;
    }*/

/*    .tabulator .tabulator-footer .tabulator-calcs-holder {
        box-sizing: border-box;
        width: 100%;
        text-align: left;
        background: #f3f3f3 !important;
        border-bottom: 1px;
        border-top: 1px;
        overflow: hidden;
    }*/

/*    .tabulator {
        position: relative;
        border: 1px #999;
        background-color: #ffffff;
        font-size: 14px;
        text-align: left;
        overflow: hidden;
        -webkit-transform: translateZ(0);
        -moz-transform: translateZ(0);
        -ms-transform: translateZ(0);
        -o-transform: translateZ(0);
        transform: translateZ(0);
    }*/

    .loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        /*background: url('~/assets/loading-load.gif') 50% 50% no-repeat rgb(249, 249, 249);*/
        opacity: .6;
    }
    /* Customize the Select2 container */
    .select2-container {
        font-size: 16px;
    }

    .select2-container--default .select2-selection--single {
        border: 1px solid #aaaaaa94;
    }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 23px;
        }
    /* Customize the Select2 selection box */
    .select2-selection {
        background-color: #f2f2f2;
        border-radius: 5px;
        height: 30px;
        padding-bottom: 37px;
        border: 1px solid #ced4da
    }

    .select2-selection__rendered, .select2-selection__arrow {
        margin-top: 8px;
    }



/*    .tabulator-row .tabulator-cell.tabulator-editing input {
        margin-top: 6px;
    }

    .tabulator-row .tabulator-cell.tabulator-editing {
        padding-bottom: 10px;
    }*/

    .bootstrap-tagsinput {
        height: 45px;
        /* width: 485px; */
    }

    .move-right {
        margin-left: 160px;
    }

    .hidden {
        display: none;
    }

    .customize-btn {
        background: #e9ecef6b;
        border: 1px solid black;
        border-radius: 20px;
    }

    .customize-btn-another {
        background: #2CA01C;
        border: 1px solid black;
        border-radius: 20px;
        color: #FFFFFF;
        border: 1px solid #2CA01C;
    }

        .customize-btn-another:hover {
            background: #2CA01C;
            border: 1px solid black;
            border-radius: 20px;
            color: #FFFFFF;
            border: 1px solid #2CA01C;
        }

    .customize-btn:hover {
        background: #ffffff;
        border: 1px solid black;
        color: black;
        border-radius: 20px;
    }

    input[type="checkbox"] {
        width: 20px; /* Set the width */
        height: 20px; /* Set the height */
    }

    .collapse-icon {
        cursor: pointer;
    }

    input::placeholder {
        font-style: italic;
        font-size: 15px;
    }

 

    .content {
        /* Add some content to create space for the bottom bar */
        height: 1500px;
    }

    .bottom-bar {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 99%;
        background-color: #333;
        color: #fff;
        padding: 10px 20px;
        display: flex;
        justify-content: space-between;
        margin-left: 39px;
    }

    /* .bottom-bar button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            margin: 0 5px;
            cursor: pointer;
        }

            .bottom-bar button:hover {
                background-color: #0056b3;
            }*/

    .tabulator .tabulator-tableholder {
        overflow-x: hidden!important;
    }

</style>


<div class="page-wrapper">

    <div class="container-fluid">
        @*<div class="col-md-12 row mt-5" >*@

        <div class="hiddenSector">
            <div class="row">
                <input type="hidden" id="CountryIdLocal" name="CountryIdLocal" value="" />
                <input type="hidden" id="Id" name="Id" value="" />
                <input type="hidden" id="PurchaseSerialId" name="PurchaseSerialId" value="" />
                <input type="hidden" id="LuserId" name="LuserId" value="" />
                <input type="hidden" id="ComId" name="ComId" value="" />
                <input type="hidden" id="LuserIdUpdate" name="LuserIdUpdate" value="" />
                <input type="hidden" id="CreateDate" name="CreateDate" value="" />
                <input type="hidden" id="UpdateDate" name="UpdateDate" value="" />
                <input type="hidden" id="isPosted" name="isPosted" value="" />
                <input type="hidden" id="IsCash" name="IsCash" value="" />
                <input type="hidden" id="LuserIdApprove" name="LuserIdApprove" value="" />
                <input type="hidden" id="LuserIdCheck" name="LuserIdCheck" value="" />
                <input type="hidden" id="vAmountInWords" name="vAmountInWords" value="" />
                <input type="hidden" id="PurchaseFilePath" name="PurchaseFilePath" value="" />



            </div>

        </div>

        <div>
            <div class="upperSection">
                <div class="row">
                    <div class="col-md col-12">
                        <button type="button" id="modal-btn-id" class="btn text-center border" data-bs-toggle="modal" data-bs-target="#historyModal">
                            <i class="bi bi-clock-history fw-bold"></i>
                        </button>
                        <!---Modal start-->
                        <div class="modal fade modal-lg" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="historyModalLabel">Purchase History</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">

                                        <div class="card rounded-10">
                                            <div id="jsClockHistory"></div>

                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        @*<button type="button" class="btn btn-primary">Save changes</button>*@
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!---Modal ends-->
                        <span class="ms-2 fs-5 fw-bold">Bill Payment No.<span id="bill-payment-cocde"></span></span>
                    </div>


                </div>

                <div class="col-lg" style="padding: 5px; position: fixed; right: 0px; top: 7%; border-top-right-radius: 0; border-bottom-right-radius: 0; ">
                    <button class="btn btn-primary float-end" id="showoffcanvas"><i class="bi bi-chevron-double-right"></i></button>
                </div>
                <div class="offcanvas-class">
                    <div class="col-12 col-md-12">
                        <div class="row account_offcanvas">

                            <div class="offcanvas offcanvas-end overflow-scroll" style="width: 400px" tabindex="-1" id="offcanvasRightRate" aria-labelledby="offcanvasRightLabelRate">
                                <div class="offcanvas-header">
                                    <h5 class="offcanvas-title" id="offcanvasRightLabelRate">To Link Invoice</h5>
                                    <button @*onclick="clearModalData()"*@ type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                                </div>
                                <div class="offcanvas-body">
                                    <div id="invoice-table"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-2 mt-3" id="divLocation">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">
                            Payee<span class="text-danger"> *</span>
                        </label>
                        <select id="Supplier" class="form-control">
                            <option value="">Select Payee</option>
                        </select>
                        <span class="text-danger" id="supplier-id-validation"></span>
                    </div>
                </div>
                <div class="col-lg-2 mt-4">
                    @*<label class="form-label d-flex justify-content-between">Email <span id="cc-bcc-id" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span></label>*@
                    <div class="dropdown d-flex justify-content-between">
                        Email
                        <span class="dropdown-toggle" data-bs-toggle="dropdown" id="dropdownMenuButton1" aria-expanded="false" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span>
                        <div class="dropdown-menu dropdown-of" aria-labelledby="filter-btn" id="filter-dropdown-id" style="width:350px;">
                            <div class="ms-3">
                                <div class="row">
                                    <div class="mb-3 col-lg-5">
                                        <label for="typeDropdown" class="form-label fw-bold">Cc</label>
                                        <input id="cc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="mb-3 col-lg-5">
                                        <label for="typeDropdown" class="form-label fw-bold">Bcc</label>
                                        <input id="bcc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between mt-2">
                                    <button type="reset" class="btn customize-btn radius-30 fw-bold px-4" onclick="resetForm(event)">Cancel</button>
                                    <button type="reset" class="btn customize-btn radius-30 fw-bold px-4">Done</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <input class="form-control" id="purchase-mail-address" />
                </div>



                <div class="col-lg-2 col-12 col-md-12 mt-3">
                    <div class="mb-2">
                        <label class="form-label">
                            Bank/Credit account<span class="text-danger"> *</span>
                        </label>
                        <select id="bank-credit-account" class="form-control">
                            <option value="">Cash and cash equivalents</option>
                        </select>
                        @*<label class="form-label">
                            Debit account<span class="text-danger"> *</span>
                        </label>
                        <select id="bank-debit-account" class="form-control">
                            <option value="">Cash and cash equivalents</option>
                        </select>*@
                        <span class="text-danger" id="bank-credit-account-validation"></span>
                    </div>
                </div>


                <div class="col-lg">
                    <span class="float-lg-end">AMOUNT PAID</span> <br />
                    <span class="float-lg-end fs-1 fw-bold">$<span id="balance-due">0.00</span></span>
                </div>
            </div>
            <div class="row">
                <div class="mb-2 d-none">
                    <label class="form-label fw-semibold">
                        Terms
                    </label>
                    <div id="termsContainer">
                        <select class="form-select select2me" id="terms" aria-label="Floating label select example">
                            <option value="0">Select an option</option>
                            <option id="addNewOption" value="add-new" data-icon="bi bi-plus-lg">Add New</option>
                        </select>
                    </div>
                </div>
                <div class="col-lg-2 col-12 col-md-12">
                    <div class="mb-2">

                        <label class="form-label d-flex justify-content-between">Mailing address </label>
                        <textarea class="form-control" id="mail-address"></textarea>
                    </div>
                </div>
                <div class="col-lg-2 col-12 col-md-12">
                    <div class="mb-2">
                        <label class="form-label">Payment date</label><span class="text-danger"> *</span>

                        <input class="form-control" id="payment-date" />
                        <span class="text-danger" id="payment-date-validation"></span>
                    </div>
                </div>
                <div class="col-lg-2 col-12 col-md-12">
                    <div class="mb-2">
                        <label class="form-label">Ref No.</label>
                        <input id="ref-no" value="@ViewBag.DefaultInvoice"  type="text" class="form-control" oninput="updateAmount(this.value)" />
                    </div>
                </div>
                <div class="col-lg-2 col-12 col-md-12">
                    <div class="mb-2">
                        <label class="form-label">Location</label><span class="text-danger"> *</span>
                        @Html.DropDownList("WarehouseIdMain", ViewBag.WarehouseIdMain as List<SelectListItem>, "Select a location", new { id = "WarehouseIdMain", @class = "form-select form-select-sm" })
                        <span class="text-danger" id="warehouse-validation"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class="float-lg-end">
            <label class="form-label" style="font-size: 12px;">
                Amount
            </label> <br />
            <input style="border: 1px solid #808080a6; height: 34px;border-radius: 4px;" id="amount-received" type="text" class="wide-dropdown" />
        </div>
        <div class="row mt-5">
            <div class="col-12 col-md-12">
                <h4 id="PaymentsDetails">
                    Outstanding Transactions
                </h4>
            </div>
        </div>
        <div class="d-flex">
            <div class="mb-3">
                <input style="border: 1px solid #808080a6; height: 34px;border-radius: 4px;" id="find-invoice" class="py-1" type="text" placeholder="Find bill no." />
            </div>
            <div class="dropdown filter-dropdown" style="display:inline-block;">
                @*<button id="filter-btn" type="button" class="btn customize-btnew fw-bold ms-2 dropdown-toggle mt-3 px-4" data-bs-toggle="dropdown" aria-expanded="false">Filter</button>*@
                <button class="btn dropdown-toggle ms-2" type="button" id="filter-btn" data-bs-toggle="dropdown" aria-expanded="false" style="height: 35px; border: 1px solid #8080805e ">
                    Filter
                </button>
                <div class="dropdown-menu dropdown-of filter-drop" aria-labelledby="filter-btn" id="filter-dropdown-id">
                    <form class="p-3" style="width: 400px;">
                        <div class="row" id="fromToDateParent">
                            <div class="mb-3 col-lg">
                                <label for="fromInput" class="form-label fw-bold">Bills from</label>
                                <input class="form-control" id="start-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                            </div>
                            <div class="mb-3 col-lg">
                                <label for="toInput" class="form-label fw-bold">To</label>
                                <input class="form-control" id="end-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                            </div>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                            <label class="form-check-label" for="flexCheckDefault">
                                Overdue bills only
                            </label>
                        </div>
                        <div class="d-flex justify-content-between mt-4">
                            <button type="reset" class="btn customize-btn radius-30 fw-bold" onclick="resetForm(event)">Reset</button>
                            <button type="button" class="btn  customize-btn-another fw-bold" onclick="reloadTableData()">Apply</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div id="payment-list-content">
            <div id="tabulatorPaymentGrid"></div>
            <span class="text-danger" id="payment-table-validation"></span>
        </div>

        <div class="row mt-5">
            <div class="col-12 col-md-12">
                <h4 id="PaymentsDetails">
                    Supplier Credit
                </h4>
            </div>
        </div>
        <div class="d-flex">
            <div class="mb-3">
                <input style="border: 1px solid #808080a6; height: 34px;border-radius: 4px;" id="find-invoice" class="py-1" type="text" placeholder="Find Credit" />
            </div>
            <div class="dropdown filter-dropdown" style="display:inline-block;">
                
                <button class="btn dropdown-toggle ms-2" type="button" id="filter-btn" data-bs-toggle="dropdown" aria-expanded="false" style="height: 35px; border: 1px solid #8080805e ">
                    Filter
                </button>
                <div class="dropdown-menu dropdown-of filter-drop" aria-labelledby="filter-btn" id="filter-dropdown-id">
                    <form class="p-3" style="width: 400px;">
                        <div class="row" id="fromToDateParent">
                            <div class="mb-3 col-lg">
                                <label for="fromInput" class="form-label fw-bold">Bills from</label>
                                <input class="form-control" id="start-date" style="border-radius:0;" onclick="keepDropdownOpened1(event)" />
                            </div>
                            <div class="mb-3 col-lg">
                                <label for="toInput" class="form-label fw-bold">To</label>
                                <input class="form-control" id="end-date" style="border-radius:0;" onclick="keepDropdownOpened1(event)" />
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between mt-4">
                            <button type="reset" class="btn customize-btn radius-30 fw-bold" onclick="resetForm(event)">Reset</button>
                            <button type="button" class="btn  customize-btn-another fw-bold" onclick="reloadTableDataForCredit()">Apply</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div id="credit-list-content">
            <div id="tabulatorCreditGrid"></div>
        </div>
        @*<div style="margin-top: 50px;margin-bottom:30px;" id="add-clear-row-main">
            @if (ViewBag.IsCopy != 2)
            {
                <button id="add-row" class="btn" style="border: 1px solid;margin-right: 30px;">Add Row</button>
                <button id="clear" class="btn" style="border: 1px solid;margin-right: 30px;">Clear All Rows</button>
            }
            else
            {
                <button id="add-row" class="btn d-none" style="border: 1px solid;margin-right: 30px;">Add Row</button>
                <button id="clear" class="btn d-none" style="border: 1px solid;margin-right: 30px;">Clear All Rows</button>
            }
        </div>*@
    </div>


</div>
<div class="d-flex float-lg-end mt-5 me-3">
    <div class="me-4">
        <div class="fw-bold">Amount to Apply</div>
        <div class="fw-bold">Amount to Credit</div>
    </div>
    <br />
    <div>
        <div id="amount-to-apply"class="fw-bold"></div>
        <div id="amount-to-credit"class="fw-bold"></div>
    </div>
    <br />
</div>



<div style="margin-top: 140px;">
    <button id="clear-payment-btn" type="button" class="btn customize-btnew fw-bold px-4 float-lg-end" onclick="Clearpayment()">Clear Payment</button>
    <div class="row">
        <div class="col-md-4 col-12">
            <div class="mb-2">
                <label class="form-label fw-bold">
                    Memo
                </label>

                <textarea class="form-control text-box multi-line" id="memo" name="PurchaseDesc" rows="4"></textarea>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 col-12 mt-4 pt-1">
            @*<input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf" multiple>*@
            <div class="mb-3">
                <label class="form-label">
                    <i class="fas fa-link"></i> <span>Attachments Maximum size: 20MB</span>
                </label>
                <div id="file-drop-area">
                    <p>Drag and drop files here or click to select files.</p>
                    <ul id="selected-files-list"></ul>
                </div>
                @* <input id="message-statement" type="text" class="wide-dropdown2" placeholder="If you send statements to customers, this will show up as the description for this invoice" /> *@
                <input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf" multiple>
            </div>
        </div>
        <div class="footerButton">
            <button class="btn btn-outline-dark fw-bolder btn-sm mt-4 d-none" id="view-image-or-pdf">Full view <i class="bi bi-eye-fill"></i></button>
            <button class="btn btn-outline-dark fw-bolder btn-sm mt-4 bg-danger text-white d-none" id="remove-image-or-pdf">X</button>
        </div>
        <div class="col-lg-12">
            <iframe id="pdf-iframe" class="d-none" style="width: 66%; height: 500px;"></iframe>
        </div>
        @if (ViewBag.ActionType == "Edit")
        {
            <div class="bottom-bar">
                <div>
                    <button class="btn-close-white radius-30 px-4 fw-bold py-1 ms-3" style="border: 1px solid #808080b5; background: transparent;" onclick="gotoBillList()">Cancel</button>
                </div>
                <div>
                    <button class="text-white border-0 py-1" style=" background: transparent;">Print</button>
                </div>
                <div class="dropdown">
                    <button id="BtnSave" class="btn-close-white radius-30 px-4 fw-bold py-1" style="border: 1px solid #808080b5; background: transparent;" data-purchase-Id="@Model">Update</button>

                    <button class="btn-success dropdown-toggle fw-bold radius-30 py-1 me-3" type="button" data-bs-toggle="dropdown" onclick="saveAndClose()">
                        Update and close
                    </button>
                    <ul class="dropdown-menu" id="ul-id-for-expenses">
                        <li class="dropdown-item">
                            <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Time activity</a>
                        </li>
                    </ul>
                </div>
            </div>
        }
        else if (ViewBag.ActionType == "Create")
        {
            <div class="bottom-bar">
                <div>
                    <button class="btn-close-white radius-30 px-4 fw-bold py-1 ms-3" style="border: 1px solid #808080b5; background: transparent;" onclick="gotoBillList()">Cancel</button>
                </div>
                <div>
                    <button class="text-white border-0 py-1" style=" background: transparent;">Print</button>
                </div>
                <div class="dropdown">
                    <button id="BtnSave" class="btn-close-white radius-30 px-4 fw-bold py-1" style="border: 1px solid #808080b5; background: transparent;" data-purchase-Id="@Model">Save</button>

                    <button id="BtnSaveAndClose" class="btn-success fw-bold radius-30 py-1 me-3" type="button" data-bs-toggle="">
                        Save and close
                    </button>
                    <ul class="dropdown-menu" id="ul-id-for-expenses">
                        <li class="dropdown-item">
                            <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Time activity</a>
                        </li>
                    </ul>
                </div>
            </div>
        }
        else
        {
            <div class="bottom-bar">
                <div>
                    <button class="btn-close-white radius-30 px-4 fw-bold py-1 ms-3" style="border: 1px solid #808080b5; background: transparent;" onclick="gotoBillList()">Cancel</button>
                </div>
                <div>
                    <button class="text-white border-0 py-1" style=" background: transparent;">Print</button>
                </div>
                <div class="dropdown">
                    <button id="BtnSave" class="btn-close-white radius-30 px-4 fw-bold py-1" style="border: 1px solid #808080b5; background: transparent;" data-purchase-Id="@Model">Save</button>

                    <button id="BtnSaveAndClose" class="btn-success fw-bold radius-30 py-1 me-3" type="button" data-bs-toggle="">
                        Save and close
                    </button>
                    <ul class="dropdown-menu" id="ul-id-for-expenses">
                        <li class="dropdown-item">
                            <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Time activity</a>
                        </li>
                    </ul>
                </div>
            </div>
        }
        <input type="button" id="unknown" class="btn  btn-md" value="" />
        <div class="dropdown" id="unknown1" style="display: inline-block;">
        </div>
    </div>
</div>



@section Scripts{

    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsPurchaseReport.js" asp-append-version="true"></script>
    <script type="text/javascript">
                   const today = new Date();
        //console.log("today:", today);

        // Get the input element
        const OpeningDateAbc = document.getElementById('payment-date');

        // Get day, month, and year from today's date
        const day = String(today.getDate()).padStart(2, '0');
        const month = today.toLocaleString('default', { month: 'short' });
        const year = today.getFullYear();

        // Format the date as desired (e.g., 24-Dec-2023)
        const formattedDateAbc = `${day}-${month}-${year}`;

        // Set the default value of the input field to the formatted date
        OpeningDateAbc.value = formattedDateAbc;



  var selectedSupplierId = '@ViewBag.SupplierId';

//console.log('Selected SupplierId:', selectedSupplierId);

$(document).ready(function () {
    $('#Supplier option').each(function () {
        //console.log('Option Value:', $(this).val());
        if ($(this).val() == selectedSupplierId) { // Use == for loose comparison
            //console.log('Setting selected for SupplierId:', selectedSupplierId);
            $(this).prop('selected', true);
        }
    });

    
});



        //Number($('#Supplier').val('@ViewBag.SupplierId').change());

        var PaymentTable;
        //==============amount wise bill select starts==============
        var amountReceivedInput = document.getElementById("amount-received");
        amountReceivedInput.addEventListener("blur", function (event) {

        var checkboxes = document.querySelectorAll('.custom-checkbox');
        checkboxes.forEach(function (checkbox) {
            checkbox.checked = false;
        });
    var inputValue = event.target.value;

    // Log the input value to the console
    //console.log(inputValue);

    var totalAmountReceived = parseFloat(document.getElementById("amount-received").value);

        var allRows = PaymentTable.getRows();

        //console.log("allRows", allRows);

    // Calculate the total "Open_Balance" of selected rows
        var totalOpenBalance = allRows.reduce(function (acc, row) {
        return acc + parseFloat(row.getCell("Amount").getValue());
    }, 0);

    // Distribute the amount to selected rows until their "Open_Balance" is satisfied
        allRows.forEach(function (row) {
        //var openBalance = parseFloat(row.getCell("NetAmount").getValue());
            var openBalance = parseFloat(row.getCell("Amount").getValue());
        //var salesid = parseFloat(row.getCell("PurchaseId").getValue());

        if (totalAmountReceived > 0 && openBalance > 0) {
            // Calculate the amount to distribute to this row
            var amountToDistribute = Math.min(openBalance, totalAmountReceived);

            // Update the payment for this row
            //row.getCell("Amount").setValue(amountToDistribute.toFixed(2));
            row.getCell("NetAmount").setValue(amountToDistribute.toFixed(2));
            var checkbox = row.getElement().querySelector('.custom-checkbox');
            if (checkbox) {
                checkbox.checked = true;
            }
            // Deduct the distributed amount from the total
            totalAmountReceived -= amountToDistribute;

        } else {
            // If there's no more amount to distribute or open balance is zero, set payment to 0
            row.getCell("NetAmount").setValue(0);
        }
    });

    // Distribute any remaining amount to unchecked rows
    if (totalAmountReceived > 0) {
        allRows.forEach(function (row) {
            //var salesid = parseFloat(row.getCell("PurchaseId").getValue());
            //var openBalance = parseFloat(row.getCell("NetAmount").getValue());
            var openBalance = parseFloat(row.getCell("Amount").getValue());

            if (openBalance > 0 && totalAmountReceived > 0) {
                // Calculate the amount to distribute to this row
                var amountToDistribute = Math.min(openBalance, totalAmountReceived);

                // Update the payment for this row
                row.getCell("NetAmount").setValue(amountToDistribute.toFixed(2));

                // Deduct the distributed amount from the total
                totalAmountReceived -= amountToDistribute;

            }
        });
    }
});
        //==============amount wise bill select ends================


                  var nullSupplierHandleFlag = false;
            if (@ViewBag.SupplierId == 0) {
                nullSupplierHandleFlag = true;
            }

            // if (nullSupplierHandleFlag) {
            //     alert("No supplier found");
            // }

        function reloadTableData(FromDate, ToDate, SupplierId) {
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetRefDetailsQB", "Admin")'
                };

                // Prepare the data object based on provided parameters
                var requestData = {
                    FromDate: FromDate || $('#start-date').val(),
                    ToDate: ToDate || $('#end-date').val(),
                    SupplierId: SupplierId || $("#Supplier").val() //
            };
            $.ajax({
                url: MyAppUrlSettings.MyUsefulUrl,
                data: requestData,
                dataType: "json",
                success: function (response) {
                    //console.log("console.dekhi::", response);
                    // Check for success before accessing the data
                    if (response.success === "1") {
                        const data = response.data;

                        // Log the data to the console for inspection
                        //console.log("Received data:", data);

                        // Assuming 'expenseTable' is your Tabulator instance
                        PaymentTable.setData(data);
                    } else {
                        // Handle the case where the response indicates an error
                        console.error("Error in response:", response);
                    }
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });


            }

        function keepDropdownOpened(event) {
            event.preventDefault();
            event.stopPropagation();
        }

        function gotoBillList() {
                    var editUrl = '@Url.Action("BillListQB", "Accounts")?Type=Payments';
            window.location.href = editUrl;
        }

        function resetForm(event) {
            event.preventDefault();
            event.stopPropagation();
            document.getElementById('start-date').value = ''; // Clear the input value
            document.getElementById('end-date').value = '';
            return false;
        }
        $('.dropdown-menu').on('click', function (e) {
            e.stopPropagation();
        })
        //function to handle input change of ref no and set it to in Bill Payment No. starts
        function updateAmount(amount) {
            var amounts = parseFloat(amount);
            const parsedAmount = parseInt(amount);
            const amountDisplay = document.getElementById("bill-payment-cocde");

            if (isNaN(parsedAmount)) {
                amountDisplay.textContent = "";
            } else {
                amountDisplay.textContent = "" + parsedAmount;
            }

            //if (amounts > 0) {
            //    $("#amountValidationMessage").hide();
            //}
        }
        //function to handle input change of ref no and set it to in Bill Payment No. ends
            //payment table data get functionalities starts
                 $.ajax({
                        type: 'GET',
                        url: '@Url.Action("GetRefDetailsQB", "Admin")',
                        //dataType: 'json',
                        contentType: 'application/json;',
                        dataType: 'json',
                        //async: 'false',
                       // headers: { "X-CSRF-TOKEN-Dominate_ANTIFORZERY": antiForgeryToken },
                     //data: { SupplierId: 927 },
                    data: { SupplierId:@ViewBag.SupplierId},
                        success: function (result) {
                            ////console.log("getref", result);
                            if (result.success == "1") {
                                }
                                else {
                                    //alert(result.ex);
                                }
                            }
                        });

            //payment table data get functionalities ends

           //resert cc.bcc email input
            //function resetForm(event) {
            //    event.preventDefault();
            //    event.stopPropagation();
            //    document.getElementById('cc-id').value = ''; // Clear the input value
            //    document.getElementById('bcc-id').value = '';
            //    return false;
            //}
       //====function to get all saved purchases starts=====

       //======set start date and end datecurrent date strats======
        // Get the current date
        var currentDate = new Date();

        // Define an array of month names
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        // Create the formatted date string
        var formattedDate = currentDate.getDate() + "-" + monthNames[currentDate.getMonth()] + "-" + currentDate.getFullYear();

        // Set the formatted date as the value of the input field
        $("#start-date").val(formattedDate);
        $("#end-date").val(formattedDate);
       //======set start date and end datecurrent date ends======

        //get supplier starts
        $.ajax({
            type: "GET",
            url:  '@Url.Action("GetSuppliers", "Purchase")', //"../Purchase/GetSuppliers",
            datatype: "Json",
            success: function (data) {

                    //console.log(data);
                $.each(data, function (index, value) {
                    $('#Supplier').append('<option value="' + value.Id + '">' + value.SupplierName + '</option>');
                });
            }
        });
        //get Account heads starts
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetBanksAccountHeads", "Admin")', //"../Admin/GetBanksAccountHeads",
            datatype: "Json",
            success: function (data) {
                //console.log("account heads,", data)
                $.each(data, function (index, value) {
                    $('#bank-credit-account').append('<option value="' + value.Id + '">' + value.AccName + '</option>');
                });
                $.each(data, function (index, value) {
                    $('#bank-debit-account').append('<option value="' + value.Id + '">' + value.AccName + '</option>');
                });
            }
        });
@*var debitAccountId = '@ViewBag.DebitAccountId'.trim();
//console.log("debitAccountId, debitAccountId", debitAccountId);

// Find the option with the matching value and set it as selected
$('#bank-debit-account').val(debitAccountId);*@

        $(document).ready(function () {



            $(function () {
                $("#start-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy",
                    showOn: "focus" // Show the datepicker calendar when the input is focused
                });
                $("#payment-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy",
                    showOn: "focus" // Show the datepicker calendar when the input is focused
                });

                $("#end-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy",
                    showOn: "focus" // Show the datepicker calendar when the input is focused
                });
                $("#payment-date").attr("autocomplete", "off");
                // Prevent clicking on the datepicker calendar from closing the dropdown
                $(".ui-datepicker").on("click", function (event) {
                    event.stopPropagation();
                });

                // Add a click event handler on the document body to close the dropdown when clicking outside of it
                $("#filter-btn").on("click", function (event) {
                    if (!$(event.target).closest(".filter-drop").length && !$(event.target).is("#start-date, #end-date")) {
                        $(".filter-drop").addClass("show"); // Remove the "show" class to close the dropdown
                    }
                });
            });


            var editingModeTrigger = 1;
            var currencyrate;
            var AccountCategory = '';
            var currencyId;
            var isMultiCurrency = '@HttpContextAccessor.HttpContext.Session.GetInt32("isMultiCurrency")';
            var DefaultCurrencyId = '@HttpContextAccessor.HttpContext.Session.GetInt32("defaultcurrencyid").ToString()';

            var isMultiDebitCredit = '@HttpContextAccessor.HttpContext.Session.GetString("isMultiDebitCredit").ToLower()' == 'true';
            if ((isMultiDebitCredit == false) && ($('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 3)) {
                var amountInputs = `
                <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;font-weight:bold; padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="VAmount-debit" readonly>
                `
                $("#total-amount-id").append(amountInputs);

            }
            else if ((isMultiDebitCredit == false) && ($('#PurchaseTypeId').val() == 2 || $('#PurchaseTypeId').val() == 4)) {
                var amountInputs = `
                <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;ont-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="VAmount-credit" readonly>
                `
                $("#total-amount-id").append(amountInputs);

            }
            else if ((isMultiDebitCredit == false) && ($('#PurchaseTypeId').val() == 5 || $('#PurchaseTypeId').val() == 6)) {
                var amountInputs = `
                <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="VAmount-debit" readonly>

                <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="VAmount-credit" readonly>

                            <label style="font-weight:bold;color: red;" for="total" class="ms-5">Diffrenece &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;font-weight:bold;color: red;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="difference" readonly>
                            <input type="hidden" class="d-none" id="VAmount" readonly>
                `
                $("#total-amount-id").append(amountInputs);
            }
            else {
                var amountInputs = `
                                    <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                                    <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                            border-radius: 8px;" id="VAmount-debit" readonly>

                                    <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                                    <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                            border-radius: 8px;" id="VAmount-credit" readonly>

                                    <label style="font-weight:bold;color: red;" for="total" class="ms-5">Diffrenece &nbsp;: &nbsp;</label>
                                    <input type="text" style="text-align:right;font-weight:bold; color: red; padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                            border-radius: 8px;" id="difference" readonly>
                                    <input type="hidden" class="d-none" id="VAmount" readonly>
                `
                $("#total-amount-id").append(amountInputs);

            }

            if (isMultiDebitCredit == true) {
                let balance = `
                                                  <div class="mb-2">
                                                    <p class="fw-bold" id="balance">Balance</p>
                                                </div>
                                                    `
                $("#divBalanceMultiDrCr").append(balance);

                $("#total-rate-label-main").addClass("d-none");
            }
            ////////////////////////////// *********** upper section field *********///////////////////////////////////

            document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                document.getElementById("pdf-iframe").classList.add("d-none");
                document.getElementById("view-image-or-pdf").classList.add("d-none");
                document.getElementById("remove-image-or-pdf").classList.add("d-none");
                document.getElementById("PurchaseFilePath").value = "";
            });
            var fileInput = $('input[type=file]')[0];
            $('#PurchaseDate').datepicker({
                dateFormat: 'dd-M-y',
                todayHighlight: true,
                autoclose: true
            });

            var PurchaseDate;
            var PurchaseCode;
            var PurchaseList = [];

            @*$.ajax({
                method: "get",
                async: false,
              url: '@Url.Action("LastPurchase", "Accounts")',//url: "https://www.pqstec.com/InvoiceApps/values/GetSupplierDropdown",
                data: { DocTypeId: @ViewBag.DocTypeId, purchasetypesearch: " " },

                success: function (data) {
                    //console.log("modal data::", data);
                    PurchaseDate = data.LastPurchaseDate;
                    PurchaseCode = data.LastPurchaseCode;
                    PurchaseList = data.PrevVoucherList;
                }
            });*@

            $('#PurchaseDate').val(PurchaseDate);
            $('#PurchaseCode').val(PurchaseCode);

            $('#jsClockHistory').jsGrid({
                width: '100%',
                data: PurchaseList,
                fields: [
                    { name: "Id", title: 'Id', type: "label", visible: false },
                    { name: "DocNo", title: 'DOC NO.', type: "label" },
                    { name: "PurchaseType", title: 'Type', type: "label", visible: false },
                    { name: "DocType", title: 'PREVIOUS TRANSACTION', type: "label" },
                    { name: "Supplier", title: 'SUPPLIER', type: "label" },
                    { name: "Amount", title: 'AMOUNT', type: "label" }
                ]


            });

            $('#CountryId').select2({})
                .on("select2:select", function (e) {
                    GetCultureInfo($("#VAmount").val());
                });

            function LedgerBalance(AccountId) {
                //alert(AccountId);
                //alert($("#Customer").val());
                //tblaccountList.rows().remove().draw(false);
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetLedgerBalance", "Values")'
                }
                //alert('test');
                $.ajax({
                    type: 'Get',
                    // data: { PurchaseType: "Cash Payment" },
                    url: MyAppUrlSettings.MyUsefulUrl,
                    dataType: 'json',
                    data: { AccountId: AccountId, TransactionId: 0 }, //, $("#Id").val()
                    success: function (result) {

                        $("#balance").text(result.toLocaleString());
                        $("#balance").val(result.toLocaleString());
                    },
                    error: function (ex) {
                        //alert('Failed.' + ex);
                    }
                });
                return false;
            };

            $('#AccountMainId').select2({})
                .on("select2:select", function (e) {
                    LedgerBalance($('#AccountMainId').val());
                });


            function GetCultureInfo() {
                let VamountVis = $('#VAmount').val();
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetCultureInfo", "Admin")'
                }
                //alert('test');
                $.ajax({
                    type: 'Get',
                    // data: { PurchaseType: "Cash Payment" },
                    url: MyAppUrlSettings.MyUsefulUrl,
                    dataType: 'json',
                    data: { CurrencyId: $('#CountryId').val() }, //, $("#Id").val()
                    success: function (result) {

                        ////console.log(result);
                        let CultureInfo = result.CultureInfo;
                        let CurrencySymbol = result.CurrencySymbol;
                        let currencyshortname = result.CurrencyShortName;

                        if (VamountVis > 0) {

                            //ar ---> OMR, AED
                            //en---> USD,EUR
                            // bn--> BDT

                            //alert(CultureInfo.substr(3,2));
                            $('#VAmountvisible').val(Number(VamountVis).toLocaleString(CultureInfo.substr(0, 2), { style: 'currency', currency: currencyshortname }));
                        }



                    },
                    error: function (ex) {
                        //alert('Failed.' + ex);
                    }
                });
            }




            /////////***** condition based div hide and show **** ///////

            $('#cpSection').hide();
            $('#crSection').hide();
            if ($('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 3) {
                $('#cpSection').show();
            }

            else if ($('#PurchaseTypeId').val() == 2 || $('#PurchaseTypeId').val() == 4) {
                $('#cpSection').show();


                ///customer
                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("GetCustomersDropDown", "Admin")',
                    //data: { PurchaseType: "Cash Receipt" },
                    success: function (data) {
                        //console.log("customer::",data);
                        const select = document.querySelector('#Supplierr');
                        for (var i = 0; i < data.length; i++) {
                            const option = document.createElement('option');
                            option.value = data[i].Value;
                            option.text = data[i].Text;
                            select.appendChild(option);
                        }

                    }
                });



            }

            else if ($('#PurchaseTypeId').val() == 5 || $('#PurchaseTypeId').val() == 6) {


                $('#cpSection').show();

                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                    data: { PurchaseType: "Cash Receipt" },

                    success: function (data) {



                        const select = document.querySelector('#AccountMainId');
                        for (var i = 0; i < data.length; i++) {
                            const option = document.createElement('option');
                            option.value = data[i].Value;
                            option.text = data[i].Text;
                            select.appendChild(option);
                        }

                    }
                });

            }
            else {

                $('#cpSection').show();

            }

            if ($('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 2) {



                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                    data: { PurchaseType: "Cash" },

                    success: function (data) {



                        const select = document.querySelector('#AccountMainId');
                        for (var i = 0; i < data.length; i++) {
                            const option = document.createElement('option');
                            option.value = data[i].Value;
                            option.text = data[i].Text;
                            select.appendChild(option);
                        }
                    }
                });


            }
            else if ($('#PurchaseTypeId').val() == 3 || $('#PurchaseTypeId').val() == 4) {
                ///main account
                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                    data: { PurchaseType: "Bank" },

                    success: function (data) {



                        const select = document.querySelector('#AccountMainId');
                        for (var i = 0; i < data.length; i++) {
                            const option = document.createElement('option');
                            option.value = data[i].Value;
                            option.text = data[i].Text;
                            select.appendChild(option);
                        }
                    }
                });

            }

            var flag = 0;
                GetCredit();
                function GetCredit() {

                    function fetchDataFromServer() {
                        var MyAppUrlSettings = {
                            MyUsefulUrl: '@Url.Action("GetSupplierCredit", "Admin")'
                        };
                        return $.ajax({
                            url: MyAppUrlSettings.MyUsefulUrl,
                            data: { SupplierId: $("#Supplier").val() },
                            dataType: "json",
                        });
                    }

                    fetchDataFromServer().done(function (response) {

                        console.log("normal response:", response);
                        var dataTableFilter = response.data;
                        console.log("dataTableFilter:: dekhito", dataTableFilter);

                        // Number($('#Supplier').val(dataTableFilter[0].SupplierId).change());

                        // Function to format the month to three-letter abbreviation
                        function formatMonth(monthNumber) {
                            const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                            return months[parseInt(monthNumber, 10) - 1] || '';
                        }




                        var currentPurchaseId = @ViewBag.PurchaseId;

                        function customCheckBoxFormatter1(cell, formatterParams, onRendered) {
                            var rowData = cell.getRow().getData();
                            if (rowData.PurchaseId == currentPurchaseId) {
                                
                                return '<input type="checkbox" class="custom-checkbox" data-id="' + rowData.id + '" checked>';
                            }
                            else {
                                return '<input type="checkbox" class="custom-checkbox" data-id="' + rowData.id + '">';
                            }
                        }


                        //==================payment list tabulator functionalties starts=============
                        var purchaseId = @Html.Raw(ViewBag.PurchaseId);
                        var apiUrl = '@Url.Action("GetSupplierCredit", "Admin")';
                        if ($('#Id').val() == 0) {
                            CreditTable = new Tabulator("#tabulatorCreditGrid", {
                                data: dataTableFilter,
                                dataTree: true,
                                dataTreeStartExpanded: true,
                                dataTreeChildField: "children",
                                layout: "fitDataStretch",
                                paginationMode: "remote",
                                paginationSize: 5,
                                paginationInitialPage: 1,
                                paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                paginationCounter: "rows",
                                ajaxURL: apiUrl,
                                ajaxConfig: "get",
                                ajaxContentType: "json",

                                ajaxResponse: function (url, params, response) {
                                    CreditTable.setMaxPage(response.last_page);

                                    dataLoadExpense = response.data;

                                    return {

                                        data: dataLoadExpense,
                                        last_page: response.last_page,

                                    };
                                },

                                columns: [
                                    {
                                        headerSort: false,
                                        field: "drag",
                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-bars drag-icon'></i>";
                                        },
                                        width: 30,
                                        headerSort: false,
                                        rowHandle: true,


                                    },
                                    { title: "", field: "CheckBox", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", visible: true, formatter: customCheckBoxFormatter1 }, 
                                    {
                                        title: "DESCRIPTION",
                                        field: "PurchaseDate",
                                        editable: true,
                                        headerSort: false,
                                        width: '30px',
                                        formatter: function (cell, formatterParams, onRendered) {
                                            var purchaseDate = cell.getRow().getData().RefDate;
                                            var purchaseCode = cell.getRow().getData().RefCode;
                                            var purchaseId = cell.getRow().getData().PurchaseId;

                                            var container = document.createElement('div');

                                            var link = document.createElement('a');
                                            link.href = `@Url.Action("AddBillByType", "Accounts")?Type=Bill&PurchaseId=${purchaseId}`;
                                            link.textContent = "Bill";
                                            link.target = "_blank";
                                            var text = document.createElement('span');
                                            text.textContent = `(${purchaseDate}) - Bill No: ${purchaseCode}`; 
                                            container.appendChild(link);
                                            container.appendChild(text);

                                            return container;
                                        },
                                        editorParams: {
                                            listOnEmpty: true,
                                            autocomplete: true,
                                        }
                                    },
                                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false, editor: false, default: "RefId" },
                                    { title: "PurchaseId", field: "RefId", movable: false, headerSort: false, visible: true, editor: false, },
                                    {
                                        title: "DUE DATE",
                                        field: "DueDate",
                                        editable: false,
                                        hozAlign: "left",
                                        width: '10px',
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        formatter: function (cell, formatterParams, onRendered) {
                                            var date = new Date(cell.getData().DueDate);
                                            var day = date.getDate();
                                            var monthNames = [
                                                "Jan", "Feb", "Mar",
                                                "Apr", "May", "Jun",
                                                "Jul", "Aug", "Sep",
                                                "Oct", "Nov", "Dec"
                                            ];
                                            var monthIndex = date.getMonth();
                                            var year = date.getFullYear().toString().substr(-2); 

                                            var formattedDate = day + '-' + monthNames[monthIndex] + '-' + year;

                                            cell.getData().DueDate = formattedDate ;

                                            return cell.getData().DueDate;
                                        }
                                    },
                                    {
                                        title: "ORIGINAL AMOUNT",
                                        field: "Amount",
                                        editable: false,
                                        hozAlign: "right",
                                        width: '13px',
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        formatter: "money", // Use a custom money formatter
                                        formatterParams: {
                                            precision: 2, // Number of decimal places
                                            symbol: "",   // Currency symbol (change as needed)
                                            thousand: ",", // Thousands separator
                                            decimal: ".",  // Decimal point
                                        },
                                        bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                        bottomCalcFormatterParams: {
                                            precision: 2, // Number of decimal places
                                            symbol: "",   // Currency symbol (change as needed)
                                            thousand: ",", // Thousands separator
                                            decimal: ".",  // Decimal point
                                        },
                                    },
                                    {
                                        title: "OPEN BALANCE",
                                        field: "Amount",
                                        editable: false,
                                        hozAlign: "right",
                                        width: '17px',
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        formatter: "money", // Use a custom money formatter
                                        formatterParams: {
                                            precision: 2, // Number of decimal places
                                            symbol: "",   // Currency symbol (change as needed)
                                            thousand: ",", // Thousands separator
                                            decimal: ".",  // Decimal point
                                        },
                                        bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                        bottomCalcFormatterParams: {
                                            precision: 2, // Number of decimal places
                                            symbol: "",   // Currency symbol (change as needed)
                                            thousand: ",", // Thousands separator
                                            decimal: ".",  // Decimal point
                                        },
                                    },
                                    {
                                        title: "PAYMENT",
                                        field: "NetAmount",
                                        editable: true,
                                        hozAlign: "right",
                                        width: '10px',
                                        headerSort: false,
                                        bottomCalc: "sum",
                                        movable: false,
                                        editor: "input",
                                        formatter: "money", // Use a custom money formatter
                                        formatterParams: {
                                            precision: 2, // Number of decimal places
                                            symbol: "",   // Currency symbol (change as needed)
                                            thousand: ",", // Thousands separator
                                            decimal: ".",  // Decimal point
                                        },
                                        bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                        bottomCalcFormatterParams: {
                                            precision: 2, // Number of decimal places
                                            symbol: "",   // Currency symbol (change as needed)
                                            thousand: ",", // Thousands separator
                                            decimal: ".",  // Decimal point
                                        },
                                        cellEdited: function (cell) {
                                            var editedValue = cell.getValue();

                                            var tableData = CreditTable.getData();
                                            var totalAmount = 0;
                                            tableData.forEach(function (row) {
                                                if (!isNaN(row.NetAmount)) {
                                                    totalAmount += parseFloat(row.NetAmount);
                                                }
                                            });

                                            const amountSubTotal = document.getElementById("amount-to-credit");
                                            amountSubTotal.textContent = isNaN(totalAmount) ? "" : "$" + totalAmount.toLocaleString('en-US', {
                                                minimumFractionDigits: 2,
                                                maximumFractionDigits: 2
                                            });
                                        },
                                    },
                                ],
                                dataBound: function () {
                                    var rows = table.getRows();
                                    if (rows.length > 0) {
                                        var cells = rows[0].getCells();
                                        cells.forEach(cell => {
                                            cell.freeze();
                                        });
                                    }
                                },
                            });
                            var customerDropdown = $("#Supplier");
                            customerDropdown.on("change", function () {
                                var selectedValue = $(this).val();
                                CreditTable.clearData();
                                handleAddClickCredit(selectedValue);
                            });


                            function handleAddClickCredit(SupplierId) {
                                var itemTableData = CreditTable.getData();

                                $.ajax({
                                    type: "GET",
                                    url: '@Url.Action("GetSupplierCredit", "Admin")',
                                    data: {
                                        SupplierId: SupplierId
                                    },
                                    dataType: "json",
                                    success: function (response) {
                                        loadDataIntoTabulatorCredit(response.data);
                                    },
                                    error: function (error) {
                                        console.error("Error fetching data: " + error);
                                    }
                                });
                            }

                            function loadDataIntoTabulatorCredit(data) {
                                CreditTable.addData(data);
                            }
                        }
                        
                    });
                };

                

                     GetPayment();
            function GetPayment() {

                function fetchDataFromServer() {
                 var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetRefDetailsNewForQb", "Admin")'
                };
                return $.ajax({
                    url: MyAppUrlSettings.MyUsefulUrl,
                    data: { SupplierId: $("#Supplier").val()},
                    dataType: "json",
                });
            }

            fetchDataFromServer().done(function (response) {

                console.log("normal response:", response);
                var dataTableFilter = response.data;
                console.log("dataTableFilter:: dekhito", dataTableFilter);

                Number($('#Supplier').val(dataTableFilter[0].SupplierId).change());

                // Function to format the month to three-letter abbreviation
                function formatMonth(monthNumber) {
                    const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                    return months[parseInt(monthNumber, 10) - 1] || '';
                }




               var currentPurchaseId = @ViewBag.PurchaseId;

                function customCheckBoxFormatter(cell, formatterParams, onRendered) {
                    var rowData = cell.getRow().getData();
                    if (rowData.PurchaseId == currentPurchaseId) {
                        return '<input type="checkbox" class="custom-checkbox" data-id="' + rowData.id + '" checked>';
                    }
                    else {
                        return '<input type="checkbox" class="custom-checkbox" data-id="' + rowData.id + '">';
                    }
                }


          //==================payment list tabulator functionalties starts=============
                var purchaseId = @Html.Raw(ViewBag.PurchaseId);
                var apiUrl = '@Url.Action("GetRefDetailsNewForQb", "Admin")';
                if ($('#Id').val() == 0) {
                    //alert("asas");
                    PaymentTable = new Tabulator("#tabulatorPaymentGrid", {
                    data: dataTableFilter,
                    dataTree: true,
                    dataTreeStartExpanded: true ,
                    dataTreeChildField: "children",
                                layout: "fitDataStretch",
                    //frozenRows: 1,
                    //pagination: true,
                    paginationMode: "remote",
                    paginationSize: 5,
                    paginationInitialPage: 1,
                    paginationSizeSelector: [5, 10, 25, 50, 100, true],
                    paginationCounter: "rows",
                    ajaxURL: apiUrl,
                    ajaxConfig: "get",
                    ajaxContentType: "json",

                    ajaxResponse: function (url, params, response) {
                            //console.log("response ta dekhi", response);
                        PaymentTable.setMaxPage(response.last_page);
                        //console.log("response.last_page", response.last_page);

                        dataLoadExpense = response.data;
                       /* //console.log("dataLoadExpense:", dataLoadExpense);*/

                        return {

                            data: dataLoadExpense,
                            last_page: response.last_page,

                        };
                    },

                    columns: [
                        {
                    headerSort: false,
                    field: "drag",
                    //frozen: true,
                    formatter: function (cell, formatterParams) {
                        return "<i class='fas fa-bars drag-icon'></i>";
                    },
                    width: 30,
                    headerSort: false,
                    rowHandle: true,


                        },
                        { title: "", field: "CheckBox", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", visible: true, formatter: customCheckBoxFormatter }, //
                        {
                            title: "DESCRIPTION",
                            field: "PurchaseDate",
                            //frozen: true,
                            editable: true,
                            headerSort: false,
                            width: '30px',
                            formatter: function(cell, formatterParams, onRendered) {
                            var purchaseDate = cell.getRow().getData().RefDate;
                            var purchaseCode = cell.getRow().getData().RefCode;
                            var purchaseId = cell.getRow().getData().PurchaseId;

                            var container = document.createElement('div');

                            var link = document.createElement('a');
                            link.href = `@Url.Action("AddBillByType", "Accounts")?Type=Bill&PurchaseId=${purchaseId}`;
                            link.textContent = "Bill";
                                link.target = "_blank";
                            var text = document.createElement('span');
                            text.textContent = `(${purchaseDate}) - Bill No: ${purchaseCode}`; // Display PurchaseDate-PurchaseCode as plain text

                            container.appendChild(link);
                            container.appendChild(text);

                            return container;
                        },
                            editorParams: {
                                listOnEmpty: true,
                                autocomplete: true,
                            }
                        },
                        { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                        /*{ title: "TransactionId", field: "TransactionId", movable: false, headerSort: false, visible: true, editor: false, default: "RefId" },*/
                        { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false, editor: false, default: "RefId" },
                        { title: "PurchaseId", field: "RefId", movable: false, headerSort: false, visible: true, editor: false, },
                {
                    title: "DUE DATE",
                    field: "DueDate",
                    width: "10px",
                    editable: false,
                    hozAlign: "left",
                    headerSort: false,
                    movable: false,
                    editor: "input",
                                        formatter: function (cell, formatterParams, onRendered) {
                                            var date = new Date(cell.getData().DueDate);
                                            var day = date.getDate();
                                            var monthNames = [
                                                "Jan", "Feb", "Mar",
                                                "Apr", "May", "Jun",
                                                "Jul", "Aug", "Sep",
                                                "Oct", "Nov", "Dec"
                                            ];
                                            var monthIndex = date.getMonth();
                                            var year = date.getFullYear().toString().substr(-2);

                                            var formattedDate = day + '-' + monthNames[monthIndex] + '-' + year;

                                            cell.getData().DueDate = formattedDate;

                                            return cell.getData().DueDate;
                                        }
                },
                {
                    title: "ORIGINAL AMOUNT",
                    field: "Amount",
                    editable: false,
                    hozAlign: "right",
                    width: "13px",
                    headerSort: false,
                    movable: false,
                    editor: "input",
                    formatter: "money", // Use a custom money formatter
                    formatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                    bottomCalcFormatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                },
                {
                    title: "OPEN BALANCE",
                    field: "Amount",
                    editable: false,
                    hozAlign: "right",
                    width: '17px',
                    headerSort: false,
                    movable: false,
                    editor: "input",
                    formatter: "money", // Use a custom money formatter
                    formatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                    bottomCalcFormatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                },
                {
                    title: "PAYMENT",
                    field: "NetAmount",
                    editable: true,
                    hozAlign: "right",
                    width: '10px',
                    headerSort: false,
                    bottomCalc: "sum",
                    movable: false,
                    editor: "input",
                    formatter: "money", // Use a custom money formatter
                    formatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                    bottomCalcFormatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    cellEdited: function (cell) {
                        // Log the edited value to the console
                        var editedValue = cell.getValue();

                        // Calculate the sum of "Amount" column values
                        var tableData = PaymentTable.getData(); // Replace 'yourTable' with your table instance
                        var totalAmount = 0;
                        tableData.forEach(function (row) {
                            if (!isNaN(row.NetAmount)) {
                                totalAmount += parseFloat(row.NetAmount);
                            }
                        });

                        // Update the "balance-due" HTML element with the summed value
                        const amountDisplay = document.getElementById("balance-due");
                        //amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toFixed(2); // Format as needed
                        amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toLocaleString('en-US', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        });
                        const amountSubTotal = document.getElementById("amount-to-apply");
                        //amountSubTotal.textContent = "$ " + (isNaN(totalAmount) ? "" : totalAmount.toFixed(2));
                        amountSubTotal.textContent = isNaN(totalAmount) ? "" : "$"+totalAmount.toLocaleString('en-US', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        });
                        //const amountTotal = document.getElementById("total");
                        //amountTotal.textContent = "$ " + (isNaN(totalAmount) ? "" : totalAmount.toFixed(2));
                    },
                },
                    ],
                    dataBound: function () {
                        // Freeze the top 1 row (index 0) after the table is created
                        var rows = table.getRows();
                        if (rows.length > 0) {
                            var cells = rows[0].getCells();
                            cells.forEach(cell => {
                                cell.freeze();
                            });
                        }
                    },
                });
                    



                    var customerDropdown = $("#Supplier");
                    customerDropdown.on("change", function () {
                        // Get the selected value
                        var selectedValue = $(this).val();
                        PaymentTable.clearData();
                        handleAddClick(selectedValue);
                    });

                    //== data populate in form tabulator from offcanvas starts==

            function handleAddClick(SupplierId) {
                var itemTableData = PaymentTable.getData();
                //console.log("SupplierId in handleclick", SupplierId);

                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetRefDetailsNewForQb", "Admin")',
                    data: {
                        SupplierId: SupplierId
                    },
                    dataType: "json",
                    success: function (response) {
                        //console.log("eta hocche proc data", response.data);
                        loadDataIntoTabulator(response.data);
                    },
                    error: function (error) {
                        console.error("Error fetching data: " + error);
                    }
                });
            }

            // Function to load data into the Tabulator table
            function loadDataIntoTabulator(data) {
                //console.log("ekhane data dekhi", data);
                PaymentTable.addData(data);
            }


                }





                //==================payment list tabulator functionalties ends=============
               //======gear icon functionaloties for payment list review starts=====
          //check global fields
        var globalFields =
            [
                { title: "Check Box", field: "CheckBox", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", visible: true },
                        { title: "VENDOR",headerHozAlign: "left", field: "SupplierName", width: "14px", hozAlign: "left", },
                        {
                            title: "DUE DATE", headerHozAlign: "left", field: "DueDate", width: "15px", hozAlign: "left", formatter: function (cell, formatterParams, onRendered) {
                                // Get the original date value from the cell
                                const originalDate = cell.getValue();

                                // Check if the originalDate is a valid date
                                if (originalDate instanceof Date && !isNaN(originalDate)) {
                                    // Format the date as "YYYY-MM-DD"
                                    const formattedDate = originalDate.toISOString().split('T')[0];
                                    return formattedDate;
                                } else {
                                    // Return the original value if it's not a valid date
                                    return originalDate;
                                }
                            } },
                        { title: "BILL AMOUNT", headerHozAlign: "right", field: "BillAmount", width: "15px", hozAlign: "right", },
                {
                    title: "OPEN BALANCE", headerHozAlign: "right", field: "NetAmount", width: "15px", hozAlign: "right", formatter: "money", // Use a custom money formatter
                    formatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                    bottomCalcFormatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    }, },
                        { title: "STATUS", headerHozAlign: "left", field: "Status", width: "11px", hozAlign: "left",},
                                        {
                    title: "ACTIONS", field: "button", headerHozAlign: "right", headerSort: false, hozAlign: "right", resizable: false, width: "19px", formatter: function (cell, formatterParams, onRendered) {
                                                var data = cell.getData();
                                                ////console.log("see data::", data);
                                                //var myUrlGet = `editAccountHead(${data.Id})`;
                                                var myUrlGet = `@Url.Action("AddBillByType", "Accounts")?Type=${data.DocType}&PurchaseId=${data.Id}`;
                                                var inActive = `setInactiveUrl(${data.Id}) `
                                                var active = `setActiveUrl(${data.Id}) `


                        var editHtml = `
                                       <a href='${myUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                       </a>
                                               <div class='dropdown-divider m-0'></div>
                                   `;

                        var viewHtml = `
                                               <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                               <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                              </a>

                                   `;

                                                var deleteHtml;
                                                if (data.IsDelete == 0) {
                                                    deleteHtml = `
                        <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                            <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                        </a>
                    `;
                                                }
                                                else if (data.IsDelete == 1) {
                                                    deleteHtml = `
                        <a onclick='${active}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                            <i class="bi bi-recycle"></i><span class='ms-1 mt-2'>Restore</span><br />
                        </a>
                    `;
                                                }


                        //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                        var statusDependentHtml = data.isPosted ? viewHtml : editHtml + deleteHtml;

                        var html = `
                                      <div class='dropdown ms-1'>
                                          <a target='_blank' class='fw-bolder mt-2'>Mark as paid</a>
                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                         <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                              ${statusDependentHtml}

                                          </ul>
                                      </div>
                                  `;

                        return html;
                     },
                     visible: true,cellClick: function(e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                  },
                },
                    ]
            ////console.log("globalFields::", globalFields);




        // Iterate through globalFields and create checkboxes for each column name
                var columnList = $("#columnList");

                $.each(globalFields, function (index, field) {
            ////console.log("GLOBAL 1::",field);
            var title = field.title;
            var name = field.field;
            var visible = true;
            if (field.visible == false) {
                visible = false;
            }
            titles = `<li>
                                <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkbox" >
                                <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
                                        <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                                </div>
                                </a>
                                </li>`;
            columnList.append(titles);

            //document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //    var checkbox = event.target;
            //    var isChecked = checkbox.checked;

            //    if (isChecked) {
            //        tableReview.showColumn(name);
            //        tableUnpaid.showColumn(name);
            //    } else {
            //        tableReview.hideColumn(name);
            //        tableUnpaid.hideColumn(name);
            //    }
            //});


            $(`${'#' + name}`).prop('checked', visible);


            $('.custom-control-label').on('click', function (e) {
                e.stopPropagation();
            });
            $('#dropdown-titles').on('click', function (e) {
                e.stopPropagation();
            });

                });
                //Add event listener to the rows select input
                $("#rows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        // Convert the selected value to an integer
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            // Set the page size for the parentTable
                            tableReview.setPageSize(pageSize);
                            tableUnpaid.setPageSize(pageSize);

                            //// You may also want to update the parent table height
                            //updateParentTableHeight();
                        }
                    }
                });
        //======gear icon functionaloties for payment list review ends=====




            });
        };




            ///////////////////////*********** GRID SECTION **********////////////
            $("#flexSwitchCheckChecked").click(function () {
                // $('select').select2();
                $('#jsFilterGrid').toggle();


            });

            $('#jsFilterGrid').hide();
            var filterSearchUrl = '@Url.Action("GetCOAList", "Admin")';

            var filterSearchDb = {
                loadData: function (filter) {

                    var d = $.Deferred();
                    $.ajax({
                        type: "GET",
                        url: filterSearchUrl,

                        data: { AccType: "L", searchquery: JSON.stringify(filter) },
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    })
                        .done(function (result) {

                            d.resolve(result);


                        });
                    return d.promise().then(function (q) {

                        ////console.log(q);
                        return {

                            data: q.AccountHeadList,
                            itemsCount: parseInt(q.PageInfo.TotalRecordCount)
                        }
                    });

                }

            }

            var customNativeSelect = function (cell, onRendered, success, cancel) {
                var cellRealValue = cell.getElement().dataset.loginName;
                cellRealValue = (typeof cellRealValue === "undefined") ? "none" : cellRealValue;

                // Create and append select list
                var selectList = document.createElement("select");

                selectList.style.width = "100%";
                selectList.style.boxSizing = "border-box";

                // Populate select options
                for (var i = 0; i < userData.length; i++) {
                    var option = document.createElement("option");
                    option.value = userData[i].LoginName.toString();
                    option.text = userData[i].FullName;
                    if (userData[i].LoginName === parseInt(cellRealValue)) {
                        option.selected = "selected";
                    }
                    selectList.appendChild(option);
                }

                // Attach event listeners
                onRendered(function () {
                    selectList.focus();
                    selectList.style.height = "100%";
                });

                selectList.addEventListener("blur", function () {
                    onChange();
                });

                selectList.addEventListener("keydown", function (e) {
                    if (e.keyCode === 13) {
                        onChange();
                    }
                    if (e.keyCode === 27) {
                        cancel();
                    }
                });

                function onChange() {
                    if (selectList.selectedOptions[0].value !== cellRealValue) {
                        success(selectList.selectedOptions[0].value);
                        alert("Here is what the actual looks like: " + JSON.stringify(cell.getTable().getData()));
                    } else {
                        cancel();
                    }
                }

                return selectList;
            };


            var userData = [
                {
                    "FullName": "",
                    "LoginName": "none"
                }, {
                    "FullName": "AED",
                    "LoginName": "229"
                }, {
                    "FullName": "BDT",
                    "LoginName": "18"
                }, {
                    "FullName": "OMR",
                    "LoginName": "165"
                }, {
                    "FullName": "USD",
                    "LoginName": "231"
                }];


            //setTimeout(function () {
            //    PaymentTable.redraw();
            //}, 10);



            var controlSignal = 0;
            var serial = 0;
            $("#jsFilterGrid").jsGrid({

                width: "100%",
                height: 'auto',
                filtering: true,
                autoload: true,
                pageSize: 5,
                pageLoading: true,
                pageIndex: 1,
                paging: true,
                controller: filterSearchDb,
                fields: [

                    { name: "AccType", title: 'Type', type: "text", width: 220, visible: false },
                    { name: "AccountCategory", title: 'Category', type: "text" },
                    { name: "AccCode", title: 'Code', type: "text" },
                    { name: "AccName", title: 'Account Head', type: "text" },
                    { name: "ParentName", title: 'Group Head', type: "text" },
                    { name: "AccountBalance", title: 'Balance', type: "text" }
                    // { name: "Currency", title: 'Currency', type: "text" },



                ],
                rowDoubleClick: function (args) {

                    var args = args.item;
                    //console.log('args.....?/////');
                    //console.log(args);
                    var parentValue = $('#jsGridItems').jsGrid('option', 'data');
                    serial = parentValue.length + 1;

                    // //console.log(renumberRows());
                    controlSignal = 1;
                    Entry(args, serial);

                }
            })
            function Entry(args, serial) {



                if ($('#PurchaseTypeId').val() == 5 || $('#PurchaseTypeId').val() == 6) {

                    var newData = {

                        "CurrencyId": '18',
                        "CurrencyForeignId": '18',
                        "AccId": args.Id,
                        //"DisplayName": "<b>" + Name + "</b>" + "-" + productCode + "<br>" + "<i><p style='font-size:11px; margin-bottom:0px'>" + CategoryName + Color + Size + Brand + "</p></i>",
                        "AccName": args.AccName,//args.item.Description,
                        "EmpId": 1,
                        "Note1": " ",
                        "Note2": " ",
                        // "account":'1',
                        "CustomerId": 1,
                        "SupplierId": 1,
                        "TKDebit": 0.00,
                        "TKCredit": 0.00,
                    }
                }
                else {

                    var newData = {

                        "CurrencyId": '18',
                        "CurrencyForeignId": '18',
                        "AccId": args.Id,
                        //"DisplayName": "<b>" + Name + "</b>" + "-" + productCode + "<br>" + "<i><p style='font-size:11px; margin-bottom:0px'>" + CategoryName + Color + Size + Brand + "</p></i>",
                        "AccName": args.AccName,//args.item.Description,
                        "EmpId": 1,
                        "Note1": " ",
                        "Note2": " ",
                        // "account":'1',
                        "CustomerId": 1,
                        "SupplierId": 1,
                        "TKDebit": 1.00,
                        "TKCredit": 1.00,
                    }
                }

                //$("#jsGridItems").jsGrid("insertItem", newData).done(function () {

                //    //  $(".jsgrid-update-button").trigger( "click" );
                //    // toastr.success('Items Added..');
                //    $("#jsGridItems").jsGrid("editItem", newData);

                //});

                table.addRow(newData);
                renumberRows();
                //console.log(table);

            }
            ////////////////// ****** editing mode ********//////////////
            var parent = [];
            var tabulatorData = [];
            var secondTabulatorData = [];
            function getPurchase(id) {
                return $.ajax({
                    type: 'GET',
                    datatype: "Json",
                    url: "@Url.Action("GetTransactionQB", "Admin")",
                    data: { "TransactionId": @ViewBag.TransactionId,"SupplierId":@ViewBag.SupplierId}
                });
            }

            var PurchaseIddata = $("#BtnSave").attr("data-purchase-Id");
            if (PurchaseIddata > 0) {
                var button = document.getElementById("unknown");
                var button1 = document.getElementById("unknown1");
                button1.style.display = "inline-block";
                button.style.display = "none";
                button.value = "New";
                button.classList.remove("btn-warning"); // Remove the orange color class
                button.classList.add("btn-danger"); // Add the red color class
                button.onclick = function () {
                    var link = $(this).attr("href");

                };


                $.when(getPurchase(PurchaseIddata)).then(function (response) {
                    //console.log("edit response", response);

                    if (response.Success == 0) {
                        //alert(res.ex);
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-red",
                        });

                        setTimeout(function () {
                            window.location.href = '@Url.Action("GetTransactionQB", "Admin")';
                        }, 1000);
                        return true;
                    }

                    //alert("aa");
                    ////console.log("sss",res);
                    ////console.log("response", response);
                    parent = response.purchase;
                    res = response.purchase;
                    //console.log("see res", res);
                    function formatDateToCustom(dateString) {
                        const date = new Date(dateString);
                        const year = date.getFullYear();
                        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                        const monthIndex = date.getMonth();
                        const monthName = monthNames[monthIndex];
                        const day = date.getDate();
                        return `${day}-${monthName}-${year}`;
                    }
                    var currentPurchaseId = @ViewBag.PurchaseId;

                function customCheckBoxFormatter(cell, formatterParams, onRendered) {
                    var rowData = cell.getRow().getData();
                    ////console.log("rowData::", rowData.PurchaseId);
                    ////console.log("currentPurchaseId:", currentPurchaseId);
                    // Add a data-id attribute to the checkbox with the row's unique identifier
                    return '<input type="checkbox" class="custom-checkbox" data-id="' + rowData.id + '" checked>';
                    }
                    //PaymentTable.setData(response.transaction.TransactionDetails);


                    var responses = response.transaction.Id;
                    function netAmountCustome(cell) {
                        var originalAmount = cell.getRow().getCell("OriginalAmount");
                        var amount = cell.getRow().getCell("Amount");
                        var netAmount = originalAmount - amount;
                        return netAmount;
                    }
                    //console.log("SupplierId",@ViewBag.SupplierId);
                    if (@ViewBag.SupplierId== null) {
                        alert("sss");
                    }
                    $("#Id").val(response.transaction.Id);
                    //Number($('#Supplier').val(res.SupplierId).change());
                    $('#purchase-mail-address').val(response.transaction.Email);
                    $('#bank-credit-account').val(response.transaction.CreditAccountId).change();
                    $('#WarehouseIdMain').val(response.transaction.WarehouseId).change();
                    $('#mail-address').val(response.transaction.PrimaryAddress);
                    const newPaymentDate = new Date(response.transaction.PaymentDate);
                    const formattedDueDate = formatDateToCustom(newPaymentDate);
                    $('#payment-date').val(formattedDueDate);
                    $('#ref-no').val(response.transaction.RefNo);
                    $('#memo').val(response.transaction.Description);
                    $('#bill-payment-cocde').html(response.transaction.RefNo);
                    //$('#balance-due').html(response.transaction.TransactionDetails[0].Amount);
                    $("#balance-due").text(response.transaction.TransactionDetailsAmountSum.toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }));
                    //$('#amount-to-apply').html(response.transaction.TransactionDetails[0].Amount);
                    $("#amount-to-apply").text("$" + response.transaction.TransactionDetailsAmountSum.toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }));
                    $("#amount-to-credit").text("$" + response.transaction.TransactionDetailsCreditSum.toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }));

                   var apiUrl = '@Url.Action("GetRefDetailsQB", "Admin")';
                   PaymentTable = new Tabulator("#tabulatorPaymentGrid", {
                    data: response.transaction.TransactionDetails,
                    dataTree: true,
                    dataTreeStartExpanded: true ,
                    dataTreeChildField: "children",
                    layout: "fitDataStretch",
                    //frozenRows: 1,
                    //pagination: true,
                    //paginationMode: "remote",
                    //paginationSize: 5,
                    //paginationInitialPage: 1,
                    //paginationSizeSelector: [5, 10, 25, 50, 100, true],
                    //paginationCounter: "rows",
                    ajaxURL: apiUrl,
                    ajaxConfig: "get",
                    ajaxContentType: "json",

                    ajaxResponse: function (url, params, response) {
                        PaymentTable.setMaxPage(response.last_page);
                        //console.log("response after paginatiokne", response);
                        //console.log("response.last_page", response.last_page);

                        dataLoadExpense = response.transaction.TransactionDetails;
                       onsole.log("dataLoadExpense:", dataLoadExpense);

                        return {

                            data: dataLoadExpense,
                            last_page: response.last_page,

                        };
                    },

                    columns: [
                        {
                    headerSort: false,
                    field: "drag",
                    //frozen: true,
                    formatter: function (cell, formatterParams) {
                        return "<i class='fas fa-bars drag-icon'></i>";
                    },
                    width: 30,
                    headerSort: false,
                    rowHandle: true,


                        },
                        { title: "", field: "CheckBox", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", visible: true, formatter: customCheckBoxFormatter }, //
                        {
                            title: "DESCRIPTION",
                            field: "PurchaseDate",
                            //frozen: true,
                            editable: true,
                            headerSort: false,
                            width: '20px',
                            formatter: function(cell, formatterParams, onRendered) {
                            var purchaseDate = cell.getRow().getData().PurchaseDate;
                            var purchaseCode = cell.getRow().getData().PurchaseCode;
                            var purchaseId = cell.getRow().getData().PurchaseId;

                            var container = document.createElement('div');

                            var link = document.createElement('a');
                            link.href = `@Url.Action("AddBillByType", "Accounts")?Type=Bill&PurchaseId=${purchaseId}`;
                            link.textContent = "Bill";
                                link.target = "_blank";
                            var text = document.createElement('span');
                            text.textContent = `(${purchaseDate}) - Bill#${purchaseCode}`; // Display PurchaseDate-PurchaseCode as plain text

                            container.appendChild(link);
                            container.appendChild(text);

                            return container;
                        },
                            editorParams: {
                                listOnEmpty: true,
                                autocomplete: true,
                            }
                        },
                        { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                        { title: "TransactionId", field: "TransactionId", movable: false, headerSort: false, visible: false, editor: false,},
                        { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false, editor: false, default: "RefId" },
                        { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false, editor: false, },
                {
                    title: "DUE DATE",
                    field: "DueDate",
                    editable: false,
                    hozAlign: "left",
                    width: '10px',
                    headerSort: false,
                    movable: false,
                    editor: "input",
                    formatter: function(cell, formatterParams, onRendered) {                                                              
                        const date = new Date(cell.getValue());
                        // Array of month abbreviations
                        const monthNames = [
                            "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                        ];                                                                
                        const day = date.getDate();
                        const monthIndex = date.getMonth();
                        const monthAbbrev = monthNames[monthIndex];
                        const year = date.getFullYear().toString().substr(-2);                                                                      
                        const formattedDate = `${day}-${monthAbbrev}-${year}`;

                        return formattedDate;
                    }
                },
                {
                    title: "ORIGINAL AMOUNT",
                    field: "Amount",
                    editable: false,
                    hozAlign: "right",
                    width: '20px',
                    headerSort: false,
                    movable: false,
                    editor: "input",
                    formatter: "money", // Use a custom money formatter
                    formatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                    bottomCalcFormatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                },
                {
                    title: "OPEN BALANCE",
                    //field: "NetAmount",
                    editable: false,
                    hozAlign: "right",
                    width: '20px',
                    headerSort: false,
                    movable: false,
                    editor: "input",
                    formatter: "money", // Use a custom money formatter
                    formatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                    bottomCalcFormatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    formatter: function (cell) {
                        // Retrieve the "OriginalAmount" and "Amount" values from the row
                        var originalAmount = cell.getRow().getData().NetAmount;
                        var amount = cell.getRow().getData().Amount;

                        // Calculate the open balance
                        var openBalance = amount - originalAmount;
                        //console.log("openBalance", openBalance);
                        // Return the calculated open balance as a string
                        return openBalance.toLocaleString('en-US', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        }).toString();
                    },
                },
                {
                    title: "PAYMENT",
                    field: "NetAmount",
                    editable: true,
                    hozAlign: "right",
                    width: '10px',
                    headerSort: false,
                    bottomCalc: "sum",
                    movable: false,
                    editor: "input",
                    formatter: "money", // Use a custom money formatter
                    formatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                    bottomCalcFormatterParams: {
                        precision: 2, // Number of decimal places
                        symbol: "",   // Currency symbol (change as needed)
                        thousand: ",", // Thousands separator
                        decimal: ".",  // Decimal point
                    },
                    cellEdited: function (cell) {
                        // Log the edited value to the console
                        var editedValue = cell.getValue();

                        // Calculate the sum of "Amount" column values
                        var tableData = PaymentTable.getData(); // Replace 'yourTable' with your table instance
                        var totalAmount = 0;
                        tableData.forEach(function (row) {
                            if (!isNaN(row.NetAmount)) {
                                totalAmount += parseFloat(row.NetAmount);
                            }
                        });

                        // Update the "balance-due" HTML element with the summed value
                        const amountDisplay = document.getElementById("balance-due");
                        amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toLocaleString('en-US', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        });
                        const amountSubTotal = document.getElementById("amount-to-apply");
                        //amountSubTotal.textContent = "$ " + (isNaN(totalAmount) ? "" : totalAmount.toFixed(2));
                        amountSubTotal.textContent = isNaN(totalAmount) ? "" : "$" + totalAmount.toLocaleString('en-US', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        });

                        //const amountTotal = document.getElementById("total");
                        //amountTotal.textContent = "$ " + (isNaN(totalAmount) ? "" : totalAmount.toFixed(2));
                    },
                },
                    ],
                    dataBound: function () {
                        // Freeze the top 1 row (index 0) after the table is created
                        var rows = table.getRows();
                        if (rows.length > 0) {
                            var cells = rows[0].getCells();
                            cells.forEach(cell => {
                                cell.freeze();
                            });
                        }
                    },
                });

                        CreditTable = new Tabulator("#tabulatorCreditGrid", {
                            data: response.transaction.CreditDetails,
                            dataTree: true,
                            dataTreeStartExpanded: true,
                            dataTreeChildField: "children",
                            layout: "fitDataStretch",
                            //frozenRows: 1,
                            //pagination: true,
                            //paginationMode: "remote",
                            //paginationSize: 5,
                            //paginationInitialPage: 1,
                            //paginationSizeSelector: [5, 10, 25, 50, 100, true],
                            //paginationCounter: "rows",
                            ajaxURL: apiUrl,
                            ajaxConfig: "get",
                            ajaxContentType: "json",

                            ajaxResponse: function (url, params, response) {
                                PaymentTable.setMaxPage(response.last_page);
                                //console.log("response after paginatiokne", response);
                                //console.log("response.last_page", response.last_page);

                                dataLoadExpense = response.transaction.TransactionDetails;
                                onsole.log("dataLoadExpense:", dataLoadExpense);

                                return {

                                    data: dataLoadExpense,
                                    last_page: response.last_page,

                                };
                            },

                            columns: [
                                {
                                    headerSort: false,
                                    field: "drag",
                                    //frozen: true,
                                    formatter: function (cell, formatterParams) {
                                        return "<i class='fas fa-bars drag-icon'></i>";
                                    },
                                    width: 30,
                                    headerSort: false,
                                    rowHandle: true,


                                },
                                { title: "", field: "CheckBox", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", visible: true, formatter: customCheckBoxFormatter }, //
                                {
                                    title: "DESCRIPTION",
                                    field: "PurchaseDate",
                                    //frozen: true,
                                    editable: true,
                                    headerSort: false,
                                    width: '20px',
                                    formatter: function (cell, formatterParams, onRendered) {
                                        var purchaseDate = cell.getRow().getData().PurchaseDate;
                                        var purchaseCode = cell.getRow().getData().PurchaseCode;
                                        var purchaseId = cell.getRow().getData().PurchaseId;

                                        var container = document.createElement('div');

                                        var link = document.createElement('a');
                                        link.href = `@Url.Action("AddBillByType", "Accounts")?Type=Bill&PurchaseId=${purchaseId}`;
                                        link.textContent = "Bill";
                                        link.target = "_blank";
                                        var text = document.createElement('span');
                                        text.textContent = `(${purchaseDate}) - Bill#${purchaseCode}`; // Display PurchaseDate-PurchaseCode as plain text

                                        container.appendChild(link);
                                        container.appendChild(text);

                                        return container;
                                    },
                                    editorParams: {
                                        listOnEmpty: true,
                                        autocomplete: true,
                                    }
                                },
                                { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                                { title: "TransactionId", field: "TransactionId", movable: false, headerSort: false, visible: false, editor: false, },
                                { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false, editor: false, default: "RefId" },
                                { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false, editor: false, },
                                {
                                    title: "DUE DATE",
                                    field: "DueDate",
                                    editable: false,
                                    hozAlign: "left",
                                    width: '10px',
                                    headerSort: false,
                                    movable: false,
                                    editor: "input",
                                    formatter: function (cell, formatterParams, onRendered) {
                                        const date = new Date(cell.getValue());
                                        // Array of month abbreviations
                                        const monthNames = [
                                            "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                                            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                                        ];
                                        const day = date.getDate();
                                        const monthIndex = date.getMonth();
                                        const monthAbbrev = monthNames[monthIndex];
                                        const year = date.getFullYear().toString().substr(-2);
                                        const formattedDate = `${day}-${monthAbbrev}-${year}`;

                                        return formattedDate;
                                    }
                                },
                                {
                                    title: "ORIGINAL AMOUNT",
                                    field: "Amount",
                                    editable: false,
                                    hozAlign: "right",
                                    width: '20px',
                                    headerSort: false,
                                    movable: false,
                                    editor: "input",
                                    formatter: "money", // Use a custom money formatter
                                    formatterParams: {
                                        precision: 2, // Number of decimal places
                                        symbol: "",   // Currency symbol (change as needed)
                                        thousand: ",", // Thousands separator
                                        decimal: ".",  // Decimal point
                                    },
                                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                    bottomCalcFormatterParams: {
                                        precision: 2, // Number of decimal places
                                        symbol: "",   // Currency symbol (change as needed)
                                        thousand: ",", // Thousands separator
                                        decimal: ".",  // Decimal point
                                    },
                                },
                                {
                                    title: "OPEN BALANCE",
                                    //field: "NetAmount",
                                    editable: false,
                                    hozAlign: "right",
                                    width: '20px',
                                    headerSort: false,
                                    movable: false,
                                    editor: "input",
                                    formatter: "money", // Use a custom money formatter
                                    formatterParams: {
                                        precision: 2, // Number of decimal places
                                        symbol: "",   // Currency symbol (change as needed)
                                        thousand: ",", // Thousands separator
                                        decimal: ".",  // Decimal point
                                    },
                                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                    bottomCalcFormatterParams: {
                                        precision: 2, // Number of decimal places
                                        symbol: "",   // Currency symbol (change as needed)
                                        thousand: ",", // Thousands separator
                                        decimal: ".",  // Decimal point
                                    },
                                    formatter: function (cell) {
                                        // Retrieve the "OriginalAmount" and "Amount" values from the row
                                        var originalAmount = cell.getRow().getData().NetAmount;
                                        var amount = cell.getRow().getData().Amount;

                                        // Calculate the open balance
                                        var openBalance = amount - originalAmount;
                                        //console.log("openBalance", openBalance);
                                        // Return the calculated open balance as a string
                                        return openBalance.toLocaleString('en-US', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        }).toString();
                                    },
                                },
                                {
                                    title: "PAYMENT",
                                    field: "NetAmount",
                                    editable: true,
                                    hozAlign: "right",
                                    width: '10px',
                                    headerSort: false,
                                    bottomCalc: "sum",
                                    movable: false,
                                    editor: "input",
                                    formatter: "money", // Use a custom money formatter
                                    formatterParams: {
                                        precision: 2, // Number of decimal places
                                        symbol: "",   // Currency symbol (change as needed)
                                        thousand: ",", // Thousands separator
                                        decimal: ".",  // Decimal point
                                    },
                                    bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                    bottomCalcFormatterParams: {
                                        precision: 2, // Number of decimal places
                                        symbol: "",   // Currency symbol (change as needed)
                                        thousand: ",", // Thousands separator
                                        decimal: ".",  // Decimal point
                                    },
                                    cellEdited: function (cell) { 
                                        var editedValue = cell.getValue();

                                        var tableData = CreditTable.getData(); 
                                        var totalAmount = 0;
                                        tableData.forEach(function (row) {
                                            if (!isNaN(row.Amount)) {
                                                totalAmount += parseFloat(row.NetAmount);
                                            }
                                        });

                                        const amountSubTotal = document.getElementById("amount-to-credit");
                                        amountSubTotal.textContent = isNaN(totalAmount) ? "" : "$" + totalAmount.toLocaleString('en-US', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        });

                                    },
                                },
                            ],
                            dataBound: function () {
                                // Freeze the top 1 row (index 0) after the table is created
                                var rows = table.getRows();
                                if (rows.length > 0) {
                                    var cells = rows[0].getCells();
                                    cells.forEach(cell => {
                                        cell.freeze();
                                    });
                                }
                            },
                        });

                }).fail(function (err) {
                    //console.log(err);
                });
            }
            //}


            ///////////////////////// **** editing mode end **** /////////////

            var autocompleteId = 0;
            var autoCompleteField = function (config) {
                jsGrid.Field.call(this, config);
            };

            autoCompleteField.prototype = new jsGrid.Field({


                itemTemplate: function (value) {


                    return value;
                },

                _createSelect: function (selected, callback) {

                    var $input = $("<input>").attr("type", "text").attr("name", this.name).attr('autocomplete', 'off').autocomplete({

                        source: function (request, response) {
                            //console.log(request.term);
                            $.ajax({
                                url: "@Url.Action("GetCOAList", "Admin")",
                                dataType: "json",
                                data: {
                                    dropdownSearch: request.term,
                                    type: "public",
                                    pageSize: 5,
                                    minimumInputLength: 0
                                },
                                success: function (data) {
                                    var results = [];
                                    var categoryNames = $.unique($.map(data.AccountHeadList, function (item) {
                                        return item.AccName;
                                    }));

                                    $.each(categoryNames, function (index, categoryName) {
                                        var group = {
                                            label: categoryName,
                                            children: []
                                        };

                                        group.children = $.grep(data.AccountHeadList, function (item) {
                                            return item.AccName == group.label;
                                        });

                                        group.children = $.map(group.children, function (item) {
                                            //console.log(item);
                                            return {
                                                label: item.AccName + ' - ' + item.AccCode,
                                                value: item.Id,

                                            };
                                        });

                                        results.push(group);
                                    });

                                    response(results);
                                }
                            });
                        },
                        select: function (event, ui) {
                            // var selectedId = ui;
                            // //console.log(ui);
                            if (ui.item.children) {
                                autocompleteId = ui.item.children[0].value;
                                //countryIDfunc(countryId);
                                ////console.log(ui.item.children);
                                return true;
                            } else {
                                // handle selection of item here
                            }
                        },
                        focus: function (event, ui) {
                            if (ui.item.children) {
                                return true;
                            } else {
                                // handle focus on item here
                            }
                        },

                        minLength: 0,
                        autoFocus: true,
                        allowCustomValue: false,
                        delay: 0,
                        //cacheLength: 0,
                        open: function () {
                            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        },
                        close: function () {
                            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                        },
                        change: function (event, ui) {
                            if (ui.item === null) {
                                $(this).val('');
                                autocompleteId = 0;
                                //  $('#field_id').val('');
                            }
                        },
                        create: function () {
                            $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                                if (item.children) {

                                    return $("<li><table style='font-size:11px;' class='table table-sm table-bordered'><thead><tr><th style='width:30%;' scope='col'> " + item.label + " </th></tr></thead></table></li>")
                                        .data("ui-autocomplete-item", item)
                                        .appendTo(ul);
                                } else {
                                    return $("<li><table style='font-size:10px;' class='table table-sm table-bordered'><tbody><tr><td style='width:30%;'><i class='p-0 m-0'> &nbsp;" + item.label + "</i></td></tr><tbody></table></li>")
                                        .data("ui-autocomplete-item", item)
                                        .appendTo(ul);
                                }
                            };
                        }


                    }).focus(function () {
                        $(this).autocomplete("search", $(this).val());
                        $(this).select();


                    });

                    // Set the value of the input element to the current field value
                    $input.val(selected);
                    //$input.click(function () {
                    //    if ($input.val().length === 0) {
                    //        $input.autocomplete("search", "");
                    //    }
                    //});   ///// fahad

                    return $input;
                },

                insertTemplate: function () {
                    var insertControl = this._insertControl = this._createSelect(null, function (id) {

                        insertControl.val(id);
                    });

                    return insertControl;
                },

                editTemplate: function (value) {
                    var editControl = this._editControl = this._createSelect(value, function (id) {
                        editControl.val(id);
                    });

                    return editControl;
                },

                insertValue: function () {
                    return this._insertControl.val();
                },

                editValue: function () {
                    return this._editControl.val();
                }

            });

            jsGrid.fields.autocomplete = jsGrid.autoCompleteField = autoCompleteField;
            $('select').select2();

            let currentActiveInput = null;

            // categoryeditor function for category table starts
            function categoryEditor(cell, onRendered, success, cancel, editorParams) {

                var selected = cell.getValue();
                if (typeof selected === "undefined") {
                    selected = null;
                }

                // Handle the null value and set an empty string
                if (selected === null) {
                    selected = "";
                }
                var arrowIcon = document.createElement("span");
                arrowIcon.innerHTML = '<i class="fas fa-chevron-down"></i>';
                arrowIcon.className = "arrow-icon";
                //arrowIcon.style.position = "absolute";
                //arrowIcon.style.right = "5px";
                //arrowIcon.style.top = "70%";
                //arrowIcon.style.transform = "translateY(-50%)";
                arrowIcon.style.cursor = "pointer";
                arrowIcon.style.fontWeight = "bold";

                // Update the CSS to vertically align the text and the arrow icon
                var inputContainer = document.createElement("div");
                //inputContainer.style.position = "relative";
                inputContainer.style.display = "flex";
                inputContainer.style.alignItems = "center";

                var input = document.createElement("input");
                input.type = "text";
                input.setAttribute("name", cell.getField());
                input.setAttribute("autocomplete", "off");
                input.style.flex = "1"; // Take up the remaining space in the container

                inputContainer.appendChild(input);
                inputContainer.appendChild(arrowIcon);

                arrowIcon.addEventListener("click", function () {
                    $(input).autocomplete("search", $(input).val());
                    $(input).select();
                });

                input.addEventListener("focus", function () {
                    currentActiveInput = this;
                    // Add keydown event listener to the input field to prevent default behavior of arrow keys
                    this.addEventListener("keydown", function (e) {
                        if (e.keyCode === 40 || e.keyCode === 38) {
                            e.preventDefault();
                        }
                    });
                });

                $(input).autocomplete({

                    source: function (request, response) {

                        setTimeout(function () {
                            //console.log(request.term);
                            $.ajax({
                                url: "@Url.Action("GetCOAList", "Admin")",
                                dataType: "json",
                                data: {
                                    dropdownSearch: request.term,
                                    type: "public",
                                    pageSize: 5,
                                    minimumInputLength: 0
                                },
                                success: function (data) {
                                    //console.log("auto:", data);
                                    var results = [];
                                    var categoryNames = $.unique($.map(data.AccountHeadList, function (item) {
                                        return item.AccName;
                                    }));

                                    $.each(categoryNames, function (index, categoryName) {

                                        var group = {
                                            label: categoryName,
                                            children: []
                                        };

                                        group.children = $.grep(data.AccountHeadList, function (item) {
                                            return item.AccName == group.label;
                                        });

                                        group.children = $.map(group.children, function (item) {

                                            //currencyrate='';

                                            //currencyId=item.CurrencyShortName;
                                            return {
                                                label: item,
                                                // label: item.AccName + ' - ' + item.AccCode + '  -----  ' + item.AccountCategory+ ',' + item.AccountBalance,
                                                value: item.Id,

                                            };
                                        });

                                        results.push(group);
                                    });

                                    response(results);
                                }
                            });

                        }, 200);

                    },
                    select: function (event, ui) {
                        // var selectedId = ui;
                        // //console.log(ui);
                        if (ui.item.children) {

                            autocompleteId = ui.item.children[0].value;
                            //console.log(ui.item.children);
                            currencyId = ui.item.children[0].label.CurrencyId.toString();
                            currencyrate = ui.item.children[0].label.CurrencyRate;
                            AccountCategory = ui.item.children[0].label.AccountCategory;

                            // currencyrate=item.CurrencyRate; ui.item.children[0].value

                            // currencyId=item.CurrencyId.toString();
                            var currencyRateField = "CurrencyRate"; // Replace with the actual field name
                            var currencyRateValue = currencyrate;
                            var CurrencyForeignId = "CurrencyForeignId"; // Replace with the actual field name

                            var CurrencyIdvalue = currencyId;
                            var Amount = 0;

                            var accIdField = "AccId";
                            var accIdValue = autocompleteId; /* Get the corresponding AccId based on the selected AccName */
                            var row = cell.getRow();
                            row.update({ [accIdField]: accIdValue, [currencyRateField]: currencyRateValue, [CurrencyForeignId]: CurrencyIdvalue, AccountCategory: AccountCategory, Amount: Amount });
                            //console.log(row);
                            success(ui.item.value);
                        } else {
                            // handle selection of item here
                        }
                    },
                    focus: function (event, ui) {
                        if (ui.item.children) {
                            return true;
                        } else {
                            // handle focus on item here
                        }
                    },

                    minLength: 0,
                    autoFocus: true,
                    allowCustomValue: false,
                    delay: 0,
                    //cacheLength: 0,
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    },
                    change: function (event, ui) {
                        if (ui.item === null) {
                            $(this).val('');
                            autocompleteId = 0;
                            //  $('#field_id').val('');
                        }
                    },
                    create: function () {
                        $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                            var trs = '';

                            if (item) {
                                trs = '<p class="text-sm-left" style="font-size:12px"> Category : '; // Remove the font-italic class from here
                                $.each($(item), function (key, value) {


                                    // Determine the balance value
                                    const balance = value.children[0].label.AccountBalance;

                                    // Add class based on balance value
                                    const balanceClass = balance <= 0 ? 'red-text' : 'green-text';

                                    // Append the entire category text with the corresponding class (including the italic style)
                                    trs += '<span class="italic-text">[ ' + value.children[0].label.AccName + ' - ' + value.children[0].label.AccountCategory + ' ]</span>   - <span class="' + balanceClass + '">Balance :' + balance + '</span>  ';
                                })
                                trs += '</p>';
                            }




                            return $("<li>")
                                .append("<div class=m-0>" + item.label + trs + "</div>")
                                .appendTo(ul);
                        };
                    },
                    focus: function () {
                        return false; // Prevent default focus behavior
                    }



                }).focus(function () {
                    $(this).autocomplete("search", $(this).val());
                    $(this).select();


                });

                input.addEventListener("keydown", function (e) {
                    // Prevent default behavior of arrow keys (40 for down, 38 for up)
                    if (e.keyCode === 40 || e.keyCode === 38) {
                        e.preventDefault();
                    }
                });



                if (currentActiveInput !== null) {
                    currentActiveInput.focus();
                }

                // Set the value of the input element to the current field value
                input.value = selected;


                return inputContainer;



            }
                        // categoryeditor function for category table ends

            //producteditor function for product table starts
                        function productEditor(cell, onRendered, success, cancel, editorParams) {

                            var selected = cell.getValue();
                            ////console.log("product table cell values:",selected);
                if (typeof selected === "undefined") {
                    selected = null;
                }

                // Handle the null value and set an empty string
                if (selected === null) {
                    selected = "";
                }
                var arrowIcon = document.createElement("span");
                arrowIcon.innerHTML = '<i class="fas fa-chevron-down"></i>';
                arrowIcon.className = "arrow-icon";
                //arrowIcon.style.position = "absolute";
                //arrowIcon.style.right = "5px";
                //arrowIcon.style.top = "70%";
                //arrowIcon.style.transform = "translateY(-50%)";
                arrowIcon.style.cursor = "pointer";
                arrowIcon.style.fontWeight = "bold";

                // Update the CSS to vertically align the text and the arrow icon
                var inputContainer = document.createElement("div");
                //inputContainer.style.position = "relative";
                inputContainer.style.display = "flex";
                inputContainer.style.alignItems = "center";

                var input = document.createElement("input");
                input.type = "text";
                input.setAttribute("name", cell.getField());
                input.setAttribute("autocomplete", "off");
                input.style.flex = "1"; // Take up the remaining space in the container

                inputContainer.appendChild(input);
                inputContainer.appendChild(arrowIcon);

                arrowIcon.addEventListener("click", function () {
                    $(input).autocomplete("search", $(input).val());
                    $(input).select();
                });

                input.addEventListener("focus", function () {
                    currentActiveInput = this;
                    // Add keydown event listener to the input field to prevent default behavior of arrow keys
                    this.addEventListener("keydown", function (e) {
                        if (e.keyCode === 40 || e.keyCode === 38) {
                            e.preventDefault();
                        }
                    });
                });

                $(input).autocomplete({

                    source: function (request, response) {

                        setTimeout(function () {
                            //console.log(request.term);
                            $.ajax({
                                url: "@Url.Action("GetProductSearchList", "Admin")",
                                dataType: "json",
                                data: {
                                    dropdownSearch: request.term,
                                    type: "public",
                                    pageSize: 5,
                                    minimumInputLength: 0
                                },
                                success: function (data) {
                                    ////console.log("Console for Product List:", data.ProductList);
                                    var results = [];
                                    var categoryNames = $.unique($.map(data.ProductList, function (item) {
                                        return item.ProductName;
                                    }));

                                    $.each(categoryNames, function (index, categoryName) {

                                        var group = {
                                            label: categoryName,
                                            children: []
                                        };

                                        group.children = $.grep(data.ProductList, function (item) {
                                            return item.ProductName == group.label;
                                        });

                                        group.children = $.map(group.children, function (item) {

                                            //currencyrate='';

                                            //currencyId=item.CurrencyShortName;
                                            return {
                                                label: item,
                                                // label: item.AccName + ' - ' + item.AccCode + '  -----  ' + item.AccountCategory+ ',' + item.AccountBalance,
                                                value: item.Id,

                                            };
                                        });

                                        results.push(group);
                                    });

                                    response(results);
                                }
                            });

                        }, 200);

                    },
                    select: function (event, ui) {
                        // var selectedId = ui;
                        // //console.log(ui);
                        if (ui.item.children) {

                            autocompleteId = ui.item.children[0].value;
                            //console.log(ui.item.children);
                            ////currencyId = ui.item.children[0].label.CurrencyId.toString();
                            //currencyrate = ui.item.children[0].label.CurrencyRate;
                            //AccountCategory = ui.item.children[0].label.AccountCategory;

                            //// currencyrate=item.CurrencyRate; ui.item.children[0].value

                            //// currencyId=item.CurrencyId.toString();
                            //var currencyRateField = "CurrencyRate"; // Replace with the actual field name
                            //var currencyRateValue = currencyrate;
                            //var CurrencyForeignId = "CurrencyForeignId"; // Replace with the actual field name

                            //var CurrencyIdvalue = currencyId;
                            var selectedProduct = ui.item.children[0].label;
                            var costPrice = selectedProduct.CostPrice;
                            var PurchaseAmount = selectedProduct.CostPrice;
                            var Amount = selectedProduct.CostPrice;

                            var QTY = 1;

                            var accIdField = "ProductId";
                            var accIdValue = autocompleteId; /* Get the corresponding AccId based on the selected AccName */
                            var row = cell.getRow();
                            row.update({ [accIdField]: accIdValue, Rate: costPrice, PurchaseAmount: PurchaseAmount, Amount: Amount, QTY: QTY });
                            //console.log(row);
                            success(ui.item.value);
                        } else {
                            // handle selection of item here
                        }
                    },
                    //select: function (event, ui) {
                    //    if (ui.item.children) {
                    //        // Get the selected product's CostPrice and set it in the "Rate" column
                    //        var selectedProduct = ui.item.children[0].label;
                    //        var costPrice = selectedProduct.CostPrice; // Adjust this line to match your data structure
                    //        var accIdField = "ProductId";
                    //        var accIdValue = autocompleteId; /* Get the corresponding AccId based on the selected AccName */
                    //        // Update the "Rate" column in the same row
                    //        var row = cell.getRow();
                    //        //row.update({ Rate: costPrice });
                    //        row.update({ [accIdField]: accIdValue, Rate: costPrice });
                    //        success(ui.item.value);
                    //    } else {
                    //        // handle selection of item here
                    //    }
                    //},

                    focus: function (event, ui) {
                        if (ui.item.children) {
                            return true;
                        } else {
                            // handle focus on item here
                        }
                    },

                    minLength: 0,
                    autoFocus: true,
                    allowCustomValue: false,
                    delay: 0,
                    //cacheLength: 0,
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    },
                    change: function (event, ui) {
                        if (ui.item === null) {
                            $(this).val('');
                            autocompleteId = 0;
                            //  $('#field_id').val('');
                        }
                    },
                    create: function () {
                        $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                            var trs = '';

                            if (item) {
                                trs = '<p class="text-sm-left" style="font-size:12px">Category Name:'; // Remove the font-italic class from here
                                $.each($(item), function (key, value) {


                                    // Determine the balance value
                                    ////console.log("value.children[0].label::", value.children[0].label);
                                    //const balance = value.children[0].label.AccountBalance;
                                    const CategoryName = value.children[0].label.CategoryName;

                                    // Add class based on balance value
                                    //const balanceClass = balance <= 0 ? 'red-text' : 'green-text';

                                    // Append the entire category text with the corresponding class (including the italic style)
                                    trs += '<span class="italic-text">' + ' ' + CategoryName + '</span>';
                                  /*  trs += '<span class="italic-text">[ ' + value.children[0].label.AccName + ' - ' + value.children[0].label.AccountCategory + ' ]</span>   - <span class="' + balanceClass + '">Balance :' + balance + '</span>  ';*/
                                })
                                trs += '</p>';
                            }




                            return $("<li>")
                                .append("<div class=m-0>" + item.label + trs + "</div>")
                                .appendTo(ul);
                        };
                    },
                    focus: function () {
                        return false; // Prevent default focus behavior
                    }



                }).focus(function () {
                    $(this).autocomplete("search", $(this).val());
                    $(this).select();


                });

                input.addEventListener("keydown", function (e) {
                    // Prevent default behavior of arrow keys (40 for down, 38 for up)
                    if (e.keyCode === 40 || e.keyCode === 38) {
                        e.preventDefault();
                    }
                });



                if (currentActiveInput !== null) {
                    currentActiveInput.focus();
                }

                // Set the value of the input element to the current field value
                input.value = selected;


                return inputContainer;



            }
            //producteditor function for product table ends




                        //customer function for product table starts
                        function customerEditor(cell, onRendered, success, cancel, editorParams) {

                var selected = cell.getValue();
                if (typeof selected === "undefined") {
                    selected = null;
                }

                // Handle the null value and set an empty string
                if (selected === null) {
                    selected = "";
                }
                var arrowIcon = document.createElement("span");
                arrowIcon.innerHTML = '<i class="fas fa-chevron-down"></i>';
                arrowIcon.className = "arrow-icon";
                //arrowIcon.style.position = "absolute";
                //arrowIcon.style.right = "5px";
                //arrowIcon.style.top = "70%";
                //arrowIcon.style.transform = "translateY(-50%)";
                arrowIcon.style.cursor = "pointer";
                arrowIcon.style.fontWeight = "bold";

                // Update the CSS to vertically align the text and the arrow icon
                var inputContainer = document.createElement("div");
                //inputContainer.style.position = "relative";
                inputContainer.style.display = "flex";
                inputContainer.style.alignItems = "center";

                var input = document.createElement("input");
                input.type = "text";
                input.setAttribute("name", cell.getField());
                input.setAttribute("autocomplete", "off");
                input.style.flex = "1"; // Take up the remaining space in the container

                inputContainer.appendChild(input);
                inputContainer.appendChild(arrowIcon);

                arrowIcon.addEventListener("click", function () {
                    $(input).autocomplete("search", $(input).val());
                    $(input).select();
                });

                input.addEventListener("focus", function () {
                    currentActiveInput = this;
                    // Add keydown event listener to the input field to prevent default behavior of arrow keys
                    this.addEventListener("keydown", function (e) {
                        if (e.keyCode === 40 || e.keyCode === 38) {
                            e.preventDefault();
                        }
                    });
                });

                $(input).autocomplete({

                    source: function (request, response) {

                        setTimeout(function () {
                            //console.log(request.term);
                            $.ajax({
                                url: "@Url.Action("GetCustomer", "Admin")",
                                dataType: "json",
                                data: {
                                    dropdownSearch: request.term,
                                    type: "public",
                                    pageSize: 5,
                                    minimumInputLength: 0
                                },
                                success: function (data) {
                                    ////console.log("Console for customer List:", data);
                                    ////console.log("data item Name::", data);
                                    var results = [];
                                    var categoryNames = $.unique($.map(data, function (item) {
                                        ////console.log("customer item Name::", item);
                                        return item;
                                    }));

                                    $.each(categoryNames, function (index, categoryName) {
                                        ////console.log("categoryName::", categoryName);
                                        var group = {
                                            label: categoryName.Name,
                                            children: []
                                        };

                                        group.children = $.grep(data, function (item) {
                                            ////console.log("item::", item);
                                            return item.Name == group.label;
                                        });

                                        group.children = $.map(group.children, function (item) {

                                            //currencyrate='';

                                            //currencyId=item.CurrencyShortName;
                                            return {
                                               // label: item.Name,
                                                label: item.ClBalance,//item.Name + ' - ' /*+ item.AccCode + '  -----  ' + item.AccountCategory+ ','*/ + item.ClBalance,
                                                value: item.Id,

                                            };
                                        });

                                        results.push(group);
                                    });

                                    response(results);
                                }
                            });

                        }, 200);

                    },
                    select: function (event, ui) {
                        // var selectedId = ui;
                        // //console.log(ui);
                        if (ui.item.children) {

                            autocompleteId = ui.item.children[0].value;
                            //console.log(ui.item.children);
                            ////currencyId = ui.item.children[0].label.CurrencyId.toString();
                            //currencyrate = ui.item.children[0].label.CurrencyRate;
                            //AccountCategory = ui.item.children[0].label.AccountCategory;

                            //// currencyrate=item.CurrencyRate; ui.item.children[0].value

                            //// currencyId=item.CurrencyId.toString();
                            //var currencyRateField = "CurrencyRate"; // Replace with the actual field name
                            //var currencyRateValue = currencyrate;
                            //var CurrencyForeignId = "CurrencyForeignId"; // Replace with the actual field name

                            //var CurrencyIdvalue = currencyId;

                            var accIdField = "CustomerId";
                            var accIdValue = autocompleteId; /* Get the corresponding AccId based on the selected AccName */
                            var row = cell.getRow();
                            row.update({ [accIdField]: accIdValue});
                            //console.log(row);
                            success(ui.item.value);
                        } else {
                            // handle selection of item here
                        }
                    },
                    focus: function (event, ui) {
                        if (ui.item.children) {
                            return true;
                        } else {
                            // handle focus on item here
                        }
                    },

                    minLength: 0,
                    autoFocus: true,
                    allowCustomValue: false,
                    delay: 0,
                    //cacheLength: 0,
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    },
                    change: function (event, ui) {
                        if (ui.item === null) {
                            $(this).val('');
                            autocompleteId = 0;
                            //  $('#field_id').val('');
                        }
                    },
                    create: function () {
                        $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                            var trs = '';

                            if (item) {
                                trs = '<p class="text-sm-left" style="font-size:12px">  '; // Remove the font-italic class from here   category :
                                $.each($(item), function (key, value) {

                                    ////console.log(value);
                                    // Determine the balance value
                                    const balance = value.children[0].label;

                                    // Add class based on balance value
                                    //const balanceClass = balance <= 0 ? 'red-text' : 'green-text';

                                    // Append the entire category text with the corresponding class (including the italic style)
                                    trs += '<span class="italic-text"> ' + /*value.children[0].label.AccName + ' - ' +*/ /*value.children[0].label.AccountCategory +*/ ' </span>   - <span class="">Balance :' + balance + '</span>  ';
                                })
                                trs += '</p>';
                            }




                            return $("<li>")
                                .append("<div class=m-0>" + item.label + trs + "</div>")
                                .appendTo(ul);
                        };
                    },
                    focus: function () {
                        return false; // Prevent default focus behavior
                    }



                }).focus(function () {
                    $(this).autocomplete("search", $(this).val());
                    $(this).select();


                });

                input.addEventListener("keydown", function (e) {
                    // Prevent default behavior of arrow keys (40 for down, 38 for up)
                    if (e.keyCode === 40 || e.keyCode === 38) {
                        e.preventDefault();
                    }
                });



                if (currentActiveInput !== null) {
                    currentActiveInput.focus();
                }

                // Set the value of the input element to the current field value
                input.value = selected;


                return inputContainer;



            }
            //customer function for product table ends

            //document.getElementById("add-row").addEventListener("click", function () {
            //    editingModeTrigger = 1;
            //    PaymentTable.addRow();
            //    renumberRows();
            //    // calculation();
            //});



            function calculation() {
                var DefaultCurrencyId = '@HttpContextAccessor.HttpContext.Session.GetInt32("defaultcurrencyid").ToString()';
                var SelectedCurrencyId = $('#CountryId').val();

                let TotalDebit = 0.00;
                let TotalCredit = 0.00;
                // let difference = 0.00;
                let TotalAmount = 0.00;
                // const items = ($("#jsGridItems").jsGrid('option', 'data'));
                const items = PaymentTable.getData();

                if (isMultiCurrency == 1 && $('#CountryId').val() != DefaultCurrencyId) {
                    items.forEach(function (item) {

                        // TotalDebit += parseFloat(item.TKDebit);
                        TotalDebit += parseFloat(item.TKDebitLocal);
                        /*//console.log('jishaansmrity');*/
                        ////console.log(TotalDebit);
                        TotalCredit += parseFloat(item.TKCreditLocal);
                        /* //console.log('jishaansmrityMiqdaad');*/
                        ////console.log(TotalCredit);

                    });

                }
                else if ((isMultiCurrency == 0) || (isMultiCurrency == 1 && $('#CountryId').val() == DefaultCurrencyId)) {
                    items.forEach(function (item) {

                        // TotalDebit += parseFloat(item.TKDebit);
                        TotalDebit += parseFloat(item.TKDebit);
                        /*//console.log('jishaansmrity');*/
                        ////console.log(TotalDebit);
                        TotalCredit += parseFloat(item.TKCredit);
                        /* //console.log('jishaansmrityMiqdaad');*/
                        ////console.log(TotalCredit);

                    });

                }

                //if (isMultiDebitCredit == true && difference > 0) {
                //    alert("debit credit amount is not same");
                //}
                /*alert(TotalDebit, TotalCredit)*/
                TotalAmount = TotalDebit + TotalCredit;
                //  difference = TotalDebit - TotalCredit;
                ////console.log(TotalAmount);
                //if (isMultiDebitCredit == true & $('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 3) {
                //    $('#VAmount-debit').val(TotalDebit);

                //}

                $('#VAmount').val(TotalAmount);

                $('#VAmount-debit').val(TotalDebit);
                $('#VAmount-debit').text(TotalDebit);

                $('#VAmount-credit').val(TotalCredit);
                $('#VAmount-credit').text(TotalCredit);

                if (DefaultCurrencyId == SelectedCurrencyId) {

                    const value = 1; // Replace this with your calculation

                    // Update the text content of the p element with the label and the calculated value
                    const convertRateLabel = document.getElementById('convert-rate-label');
                    //convertRateLabel.textContent = 'Convert Rate: ' + value;

                    const totalRateLabel = document.getElementById('total-rate-label');
                    //totalRateLabel.textContent = 'Amount: ' + value * TotalAmount;



                }
                else {
                    const value = 0; // Replace this with your calculation

                    // Update the text content of the p element with the label and the calculated value
                    const convertRateLabel = document.getElementById('convert-rate-label');
                //    convertRateLabel.textContent = 'Convert Rate: ' + value;
                }

            }



            if (isMultiDebitCredit == true) {
                //$("#divAccountMainId").addClass("d-none");
                //$("#divBalance").addClass("d-none");
                $("#AccountMainIdDropdown").addClass("d-none");
            }
            else {
                //$("#divAccountMainId").toggleClass("d-none");
                //$("#divBalance").toggleClass("d-none");
                $("#AccountMainIdDropdown").toggleClass("d-none");

            }

            var childDetails;
            var checkedRows
            // json data generate
            $('#BtnSave').click(function () {
                var loaderinAajx = `<div class="loader"></div>`;


                var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                $("#ComId").val(ComId);
                $("#LuserId").val(UserId);

                checkedRows = [];
                var rows = PaymentTable.getRows();
                var rows1 = CreditTable.getRows();

                rows.forEach(function (row) {
                    var checkbox = row.getCell("CheckBox").getElement().querySelector(".custom-checkbox");
                    if (checkbox.checked) {
                        var rowData = row.getData();
                        rowData.PurchaseId = rowData.RefId;
                        checkedRows.push(rowData);
                    }
                });
                    rows1.forEach(function (row) {
                        var amount = row.getData().NetAmount;
                        if (amount > 0) {
                            var rowData = row.getData();
                            rowData.PurchaseId = rowData.RefId;
                            checkedRows.push(rowData);
                        }
                    });

                //console.log("Checked Rows:", checkedRows);
                ChildDetails = PaymentTable.getData();
                ////console.log("ChildDetails::", ChildDetails);

                let TransactionDetails = checkedRows;
                let TransactionDetailsForUpdate = ChildDetails;
                var TransactionId = $('#Id').val() || 0;
                var SupplierId = Number($('#Supplier option:selected').val());
                var CreditAccountId = Number($('#bank-credit-account option:selected').val());
                var WarehouseId = Number($('#WarehouseIdMain option:selected').val());
                var SupplierName = $('#Supplier option:selected').text();
                var PrimaryAddress = $('#mail-address').val();
                var Email = $('#purchase-mail-address').val();
                var InputDate = $('#payment-date').val();
                var TransactionCode = $('#ref-no').val();
                var FilePath = $('#PurchaseFilePath').val();
                var Description = $('#memo').val();
                //var TransactionAmount = $("#balance-due").text();
                    var balanceDue = $("#balance-due").text();
                    var amountToCredit = $("#amount-to-credit").text();

                    var balanceDueInt = parseInt(balanceDue.replace(/[, $]/g, '')) || 0;
                    var amountToCreditInt = parseInt(amountToCredit.replace(/[, $]/g, '')) || 0;

                    var TransactionAmount = balanceDueInt + amountToCreditInt;

                var DebitAccount = @ViewBag.DebitAccountId ;

                //====validation handle starts======
                if (!InputDate) {
                    $("#payment-date-validation").html("Please enter Payment date");
                    $("html, body").animate({
                        scrollTop: $("#modal-btn-id").offset().top
                    }, 100);
                }
                if (!CreditAccountId) {
                    $("#bank-credit-account-validation").html("Please select a Bank/Credit account");
                    $("html, body").animate({
                        scrollTop: $("#modal-btn-id").offset().top
                    }, 100);
                }
                if (!WarehouseId) {
                    $("#warehouse-validation").html("Please select a location");
                    $("html, body").animate({
                        scrollTop: $("#modal-btn-id").offset().top
                    }, 100);
                }
                //====validation handle ends======


                var vouchermodel =
                {
                    TransactionCategory:"",
                    Id: TransactionId,
                    SupplierId: SupplierId,
                    SupplierName: SupplierName,
                    PrimaryAddress: PrimaryAddress,
                    Email: Email,
                    Description: Description,
                    CreditAccountId: CreditAccountId,
                    InputDate: InputDate,
                    TransactionCode: TransactionCode,
                        WarehouseId: WarehouseId,
                    DebitAccountId: @ViewBag.DebitAccountId,
                    TransactionAmount: TransactionAmount,
                    FilePath: FilePath,
                    TransactionDetails: TransactionDetails,
                    TransactionCategory: "Paid",
                };

                //console.log("model",vouchermodel)
                var TransactionIdAbc = 0;


                if (TransactionDetails.length === 0) {
                     var myUrlInactive = '@Url.Action("DeleteTransaction", "Admin")';
                $.ajax({
                    type: "get",
                    data: { TransactionId: @ViewBag.TransactionId },
                    url: myUrlInactive,
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                              setTimeout(function () {
                            window.location.href = '@Url.Action("AddPayment", "Accounts")';
                        }, 1000);
                        }
                        else if (response.success == "0") {
                            //alert()
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-red",
                            });
                            getPayment();
                            getCredit();
                        }
                    }
                });
                } else {

                  $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("AddTransactionQB", "Admin")",
                    data: JSON.stringify(vouchermodel), //{ model: vouchermodel, CopyBill: 1 }, //
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        //console.log("after save console::", response);
                        TransactionIdAbc = response.Id;
                        ////console.log(response);
                        //console.log("response.message::", response.message);
                            if (response.message =="Data Save Successfully.") {
                    @*setTimeout(function () {
                            window.location.href = '@Url.Action("AddPayment", "Accounts")';
                    }, 3000)*@
                        };
                        if (response.message =="Purchase updated successfully") {
                            $("#bill-no").on("focus", function () {
                                $("#bill-no-validation").html(""); // Clear the validation message
                            });
                        }
                        setTimeout(function () {
                            toastr.success(response.message, "", {
                                "toastClass": "toast-green"
                            });
                        }, 1500);
                        //alert(" Data Saved");

                    },
                    error: function (response) {
                        /*$("supplier-id-validation").innerHTML(response.message);*/
                    }
                });

                }




             if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                    var formData = new FormData();
                    formData.append("file", fileInput.files[0]);
                 formData.append("TransactionIdAbc", TransactionIdAbc);

                    $.ajax({
                        async: false,
                        type: "POST",
                        url: "@Url.Action("UploadImage", "Purchase")",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            // Handle the response
                        }
                    });
                } else {
                    // Handle the case where no file was selected
                }

                if (TransactionIdAbc > 0) {
                    setTimeout(function () {
                         window.location.href = '@Url.Action("AddBill", "Accounts")';
                    },3000)
                }


            });
            $('#BtnSaveAndClose').click(function () {
                var loaderinAajx = `<div class="loader"></div>`;


                var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                $("#ComId").val(ComId);
                $("#LuserId").val(UserId);

                checkedRows = [];

                    var rows = PaymentTable.getRows();
                    var rows1 = CreditTable.getRows();

                    rows.forEach(function (row) {
                        var checkbox = row.getCell("CheckBox").getElement().querySelector(".custom-checkbox");
                        if (checkbox.checked) {
                            var rowData = row.getData();
                            rowData.PurchaseId = rowData.RefId;
                            checkedRows.push(rowData);
                        }
                    });
                    rows1.forEach(function (row) {
                        var amount = row.getData().NetAmount;
                        if (amount > 0) {
                            var rowData = row.getData();
                            rowData.PurchaseId = rowData.RefId;
                            checkedRows.push(rowData);
                        }
                    });

                //console.log("Checked Rows:", checkedRows);
                ChildDetails = PaymentTable.getData();
                ////console.log("ChildDetails::", ChildDetails);

                let TransactionDetails = checkedRows;
                let TransactionDetailsForUpdate = ChildDetails;
                var TransactionId = $('#Id').val() || 0;
                var SupplierId = Number($('#Supplier option:selected').val());
                var CreditAccountId = Number($('#bank-credit-account option:selected').val());
                var SupplierName = $('#Supplier option:selected').text();
                var PrimaryAddress = $('#mail-address').val();
                var Email = $('#purchase-mail-address').val();
                var InputDate = $('#payment-date').val();
                var TransactionCode = $('#ref-no').val();
                var FilePath = $('#PurchaseFilePath').val();
                var Description = $('#memo').val();
                var TransactionAmount = $("#balance-due").text();
                    var WarehouseId = Number($('#WarehouseIdMain option:selected').val());


                //====validation handle starts======
                if (!InputDate) {
                    $("#payment-date-validation").html("Please enter Payment date");
                    $("html, body").animate({
                        scrollTop: $("#modal-btn-id").offset().top
                    }, 100);
                }
                if (!CreditAccountId) {
                    $("#bank-credit-account-validation").html("Please select a Bank/Credit account");
                    $("html, body").animate({
                        scrollTop: $("#modal-btn-id").offset().top
                    }, 100);
                }
                    if (!WarehouseId) {
                        $("#warehouse-validation").html("Please select a location");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }
                //====validation handle ends======


                var vouchermodel =
                {
                    Id: TransactionId,
                    SupplierId: SupplierId,
                    SupplierName: SupplierName,
                    PrimaryAddress: PrimaryAddress,
                    Email: Email,
                    Description: Description,
                    CreditAccountId: CreditAccountId,
                    InputDate: InputDate,
                    TransactionCode: TransactionCode,
                    DebitAccountId: @ViewBag.DebitAccountId,
                    TransactionAmount: TransactionAmount,
                    FilePath: FilePath,
                    TransactionDetails: TransactionDetails,
                    TransactionCategory: "Paid",
                    WarehouseId : WarehouseId,
                    //TransactionDetails: TransactionId > 0 ? TransactionDetailsForUpdate: TransactionDetails,



                    //Id: PurchaseId,
                    //CustomerId: newCustomerId,
                    //CustomerName: CustomerName,
                    //ShipVia: ShipVia,
                    //PurchaseCode: PurchaseCode,
                    //PermitNo: PermitNo,
                    //PaymentTermsId: newPaymentTermsId,
                    //TermName: newTermName,
                    //DocTypeId: DocTypeId,
                   /* Remarks: Remarks,*/
                    //NetAmount: totalAmount,
                    //Cc: Cc,
                    //Bcc: Bcc,
                };

                //console.log(vouchermodel)
                var TransactionIdAbc = 0;


                if (TransactionDetails.length === 0) {
                     var myUrlInactive = '@Url.Action("DeleteTransaction", "Admin")';
                $.ajax({
                    type: "get",
                    data: { TransactionId: @ViewBag.TransactionId },
                    url: myUrlInactive,
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                              setTimeout(function () {
                            window.location.href = '@Url.Action("BillListQB", "Accounts")?Type=Payments';
                        }, 1000);
                        }
                        else if (response.success == "0") {
                            //alert()
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-red",
                            });
                            getPayment();
                            getCredit();
                        }
                    }
                });
                } else {

                  $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("AddTransactionQB", "Admin")",
                    data: JSON.stringify(vouchermodel), //{ model: vouchermodel, CopyBill: 1 }, //
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        //console.log("after save console::", response);
                        TransactionIdAbc = response.Id;
                        ////console.log(response);
                        //console.log("response.message::", response.message);
                            if (response.message =="Data Save Successfully.") {
                    setTimeout(function () {
                            window.location.href = '@Url.Action("BillListQB", "Accounts")?Type=Payments';
                    }, 3000)
                        };
                        if (response.message =="Purchase updated successfully") {
                            $("#bill-no").on("focus", function () {
                                $("#bill-no-validation").html(""); // Clear the validation message
                            });
                        }
                        setTimeout(function () {
                            toastr.success(response.message, "", {
                                "toastClass": "toast-green"
                            });
                        }, 1500);
                        //alert(" Data Saved");

                    },
                    error: function (response) {
                        /*$("supplier-id-validation").innerHTML(response.message);*/
                    }
                });

                }




             if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                    var formData = new FormData();
                    formData.append("file", fileInput.files[0]);
                 formData.append("TransactionIdAbc", TransactionIdAbc);

                    $.ajax({
                        async: false,
                        type: "POST",
                        url: "@Url.Action("UploadImage", "Purchase")",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            // Handle the response
                        }
                    });
                } else {
                    // Handle the case where no file was selected
                }

                if (TransactionIdAbc > 0) {
                    setTimeout(function () {
                         window.location.href = '@Url.Action("BillListQB", "Accounts")?Type=Payments';
                    },3000)
                }

            });
        });


        function Clearpayment() {
            //alert("asas");
            //childDetails = PaymentTable.getData();
            //childDetails = [];
            checkedRows = PaymentTable.getData();
            checkedRows = [];
            PaymentTable.setData(checkedRows);
        }
        // Get all elements with the "tabulator-field" attribute equal to "AccName"
        var elements = document.querySelectorAll('[tabulator-field="AccName"]');

        // Add a click event listener to each element
        elements.forEach(function (element) {
            element.addEventListener('click', function () {
                alert('Element with tabulator-field="AccName" clicked!');
            });
        });




       //===========Bill list data show in offcanvas starts=============================
            var showoffcanvas = document.getElementById('showoffcanvas');
            showoffcanvas.addEventListener('click', function () {
                var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
                offcanvas.show();
            });

            //==offcanvas data population starts==
            var columns2 = [
                { title: "Id", field: "PurchaseId", visible: false },
                { title: "Invoices", field: "Description", formatter: "html" }
            ];

            var table2 = new Tabulator("#invoice-table", {
                layout: "fitColumns",
                addRowPos: "bottom",
                columns: columns2
            });

            //var customerDropdown = $("#Supplier");
            //customerDropdown.on("change", function () {
            //    // Get the selected value
            //    var selectedValue = $(this).val();
            //    //PaymentTable.clearData();
            //    LoadCustomerWiseData(selectedValue);
            //});

            function LoadCustomerWiseData(selectedValue) {
                var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
                offcanvas.show();

                $.ajax({
                    url: '@Url.Action("SupplierWiseBillData", "Accounts")',
                    data: { SupplierId: selectedValue },
                    type: 'GET',
                    async: true,
                    dataType: 'json',
                    success: function (result) {
                        if (result.Success == "1") {
                            toastr.success(result.ex, "", {
                                "toastClass": "toast-green",
                            });

                            var baseUrl = window.location.origin;
                            var tableData = [];

                            result.Data.forEach(function (item) {
                                var salesDate = new Date(item.PurchaseDate);
                                var formattedSalesDate = salesDate.getDate() + '-' +
                                    salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                    salesDate.getFullYear();

                                var description = '<div class="border border-dark rounded" style="padding: 5px;">' + 'Total:  ' + 'TK' + item.NetAmount + '<br/>' +
                                    'Balanace:  ' + 'TK' + item.NetAmount + '<br/>' +
                                    formattedSalesDate + '<br>' +
                                    '<div style="display: flex; justify-content: space-between;">' +
                                    '<a href="#" onclick="handleAddClick(' + item.Id + ', ' + item.SupplierId + ')"><p style="font-weight: bold">Add</p></a>' +
                                    '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                    '</div>';

                                tableData.push({
                                    PurchaseId: item.Id,
                                    Description: description
                                });
                            });
                            table2.setData(tableData);
                        }
                    },
                    error: function () {
                        toastr.error('Unable to Save');
                    }
                });
            }

            //==offcanvas data population ends====

            //== data populate in form tabulator from offcanvas starts==

            function handleAddClick(PurchaseId, SupplierId) {
                var itemTableData = PaymentTable.getData();

                //console.log("itemTableData in handleclick", itemTableData);
                //console.log("PurchaseId in handleclick", PurchaseId);
                //console.log("SupplierId in handleclick", SupplierId);
                var rows = table2.getRows();
                rows.forEach(function (row, index) {
                    if (row.getData().PurchaseId === PurchaseId) {
                        row.delete();
                    }
                });

                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetRefDetailsForTabulator", "Admin")',
                    data: {
                        SupplierId: SupplierId
                    },
                    dataType: "json",
                    success: function (response) {
                        //console.log("sassasaa", response);
                        loadDataIntoTabulator(response.data);
                    },
                    error: function (error) {
                        console.error("Error fetching data: " + error);
                    }
                });
            }

            // Function to load data into the Tabulator table
            function loadDataIntoTabulator(data) {
                //console.log("ekhane data dekhi", data);
                PaymentTable.addData(data);
            }

//===========Bill list data show in offcanvas ends===============================




    </script>
}


