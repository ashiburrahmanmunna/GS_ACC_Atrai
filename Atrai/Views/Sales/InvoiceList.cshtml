@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@using Atrai.Model.Core.Entity;
@using Atrai.Model.Core.Common;
@{
    ViewData["Title"] = "Invoice List";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var ListType = ViewBag.ListType as string;
    var IsStoreKeeper = ViewBag.isStoreKeeper;
    var IsSerialSales = @HttpContextAccessor.HttpContext.Session.GetInt32("IsSerialSales");
    var BusinessTypeName = @HttpContextAccessor.HttpContext.Session.GetString("BusinessType").ToString().ToLower();
    var formname = "Sales";
    if (BusinessTypeName.ToLower() == "GARMENTS INVENTORY".ToLower())
    {

        formname = "Issue";
    }
}
<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<style>
.tabulator {
        border: none;
    }

    .tabulator-col .tabulator-col-title {
        text-align: center;
    }

    .tabulator-tableholder {
        background-color: white;
    }

    .tabulator[tabulator-layout=fitDataTable] {
        display: inherit;
    }

    .tabulator .tabulator-header .tabulator-col, .tabulator .tabulator-header {
        background-color: white;
        border-right: 1px solid #dee2e6;
    }
    /*    .tabulator-row .tabulator-cell, .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
            border-right: none;
            border-left: none;
        }*/
    .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
        border-right: 2px solid #aaaaaa38;
    }

    .tabulator-row .tabulator-cell {
        border-right: 1px solid #aaaaaa38;
        border-left: 1px solid #aaaaaa38;
    }

    .tabulator-cell {
        padding-top: 10px;
        padding-bottom: 10px;
    }

    .tabulator .tabulator-row .active-cell {
        overflow: visible;
        /* Add any other styles you need for the active cell */
    }

   /*  .tabulator-table .tabulator-row {
        background-color: white;
    } */
    .tabulator-row:nth-child(even) {
    background-color: white;
   }

    .tabulator-row {
        border: none;
    }

    
    .dropdown-button-style {
        border: 1px solid #ced4da;
        background: white;
    }

        .dropdown-button-style:hover {
            border: 1px solid #ced4da;
            background: white;
        }

    .item-menu.show {
        width: 200px;
    }

    ul#ul-id-for-expenses li.dropdown-item:hover {
        background-color: forestgreen; /* Change this to the desired hover background color */
        color: white;
    }

    ul#ul-id-for-Sales li.dropdown-item:hover {
        background-color: forestgreen; /* Change this to the desired hover background color */
        color: white;
    }

    ul#ul-id-for-payments li.dropdown-item:hover {
        background-color: forestgreen; /* Change this to the desired hover background color */
        color: white;
    }

    #ul-id-for-payments li {
        cursor: pointer;
    }
    .rating {
        display: flex;
        flex-direction: row-reverse;
        justify-content: center;
        align-items: center;
    }

        .rating input {
            display: none;
        }

        .rating label {
            cursor: pointer;
            padding: 5px;
            font-size: 24px;
        }

            .rating label:before {
                content: '\2605'; /* Unicode star character */
            }

        .rating input:checked ~ label:before {
            color: gold; /* Change color of selected stars */
        }

   
    #modal-content2 {
        background-color: #fefefe;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
    } 
    #modal-content3 {
        background-color: #fefefe;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
    }

    #offcanvasForProduct{
        width: 45%;
    }
    #offcanvasRight
    {
        width: 48%;
    }
    

    #file-drop-area {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
    }

    #image-uploadify {
        display: none;
    }

    .fs-1 {
        font-size: 3.5rem !important;
        background-color: #0077c5;
        color: white;
        border-radius: 50%;
        padding: 10px;
    }

  
    .vertical-scroll {
        overflow-x: hidden; /* Disable horizontal scrolling */
    }

    #amount-estimate:hover > div:last-child {
        background-color: #055393;
    }

    #amount-estimate > div:last-child {
        background-color: none;
    }

    #amount-unbilled:hover > div:last-child {
        background-color: #055393;
    }

    #amount-unbilled > div:last-child {
        background-color: none;
    }

    #amount-overdue:hover > div:last-child {
        background-color: #f95700;
    }

    #amount-overdue > div:last-child {
        background-color: none;
    }

    #amount-invoices-credits:hover > div:last-child {
        background-color: #6b6c72;
    }

    #amount-invoices-credits> div:last-child {
        background-color: none;
    }

    #amount-recentlypaid:hover > div:last-child {
        background-color: #108000;
    }

    #amount-recentlypaid > div:last-child {
        background-color: none;
    }

    #amount-estimate1:hover > div:last-child {
        background-color: #055393;
    }

    #amount-estimate1 > div:last-child {
        background-color: none;
    }

    #amount-unbilled1:hover > div:last-child {
        background-color: #055393;
    }

    #amount-unbilled1 > div:last-child {
        background-color: none;
    }

    #amount-overdue1:hover > div:last-child {
        background-color: #f95700;
    }

    #amount-overdue1 > div:last-child {
        background-color: none;
    }

    #amount-invoices-credits1:hover > div:last-child {
        background-color: #6b6c72;
    }

    #amount-invoices-credits1 > div:last-child {
        background-color: none;
    }

    #amount-recentlypaid1:hover > div:last-child {
        background-color: #108000;
    }

    #amount-recentlypaid1 > div:last-child {
        background-color: none;
    }

    .select2-container {
        width: 93% !important;
    }

    .select2-container .select2-selection--single {          
            height: 31px;       
    }

    #ul-id-for-expenses li {
        cursor: pointer;
    }

    #ul-id-for-Sales li {
        cursor: pointer;
    }

    .tabulator .tabulator-footer .tabulator-paginator .tabulator-page:hover {
        background-color: deepskyblue;
    }

    .tabulator .tabulator-footer {
        background-color: #fff;
        color: black;
    }

    .offcanvas {
        /* Add position relative to its parent */       
        display: flex;
        flex-direction: column;
        height: 100vh; /* Ensure offcanvas takes full viewport height */
    }

    .offcanvas-footer {
        margin-top: auto; /* Push footer to the bottom */
        width: 100%; /* Occupy full width */
    }

    .modal-footer {
        width: 100%; /* Ensure buttons occupy full width */
        padding: 10px; /* Add padding for better appearance */
    }

   /*  button, input, optgroup, select, textarea {
    margin-left: 12px;
    
    } */

    .custom-checkbox {
        transform: scale(1.3); 
         margin-top: 10px;
    }

    .select2-container--default .select2-search--dropdown .select2-search__field {    
        margin-left: 0px;
    }

    .tabulator .tabulator-tableholder {
        overflow-x: hidden!important;
    }

    .marginLeft
    {
        margin-left: 0!important;
    }

      .separator {
        display: flex;
        align-items: center;
        text-align: center;
        color: #999;
        font-size: 12px;
    }

        .separator::before,
        .separator::after {
            content: '';
            flex: 1;
            border-bottom: 1px solid #999;
        }

        .separator:not(:empty)::before {
            margin-right: .25em;
        }

        .separator:not(:empty)::after {
            margin-left: .25em;
        }

        .BtnSave {
            width: 95%;
        }

        .tabulator-row.tabulator-selected {
            background-color: #9abcea!important;
        }

        .child-table-hidden {
           display: none;
        }

        .CustomDate {
           display: none;
        }

        .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {  
            background: #fff!important;
        }

        .tabulator .tabulator-footer {
           border-top: 1px solid #fff;
        }

        .custom-grid {
            display: grid;
            grid-template-columns: repeat(2, 180px);
            background-color: white;
            
        }

        .custom-grids {
            display: grid;
            grid-template-columns: repeat(3, 180px);
            background-color: white;
            
        }     

        .select2-container--bootstrap-5 .select2-dropdown .select2-search .select2-search__field {
                margin-left: 0px;
        }

            #offcanvasForReceivePayment
        {
            width: 500px;
        }

        .gear-dropdown1.show {
            width: 672px;
        }

        .gear-dropdown2.show {
            width: 672px;
        }

        .gear-dropdown3.show {
            width: 672px;
        }

        .gear-dropdown4.show {
            width: 672px;
        }

</style>
<div class="col-lg-2">
    <p class="fs-4 fw-bold">Sales</p>
</div>
<ul class="nav nav-tabs mt-5">

    <li class="nav-item">
        @{
            var AllChildMenu = HttpContextAccessor.HttpContext.Session.GetObject<List<UserMenuPermissionViewModel>>("UserChildMenu");

            var filterparentmenu = AllChildMenu.Where(x => x.ControllerName == "Sales" && (x.MenuName == "All Sales" || x.MenuName == "Customers" ||  x.MenuName == "Products & services" || x.MenuName == "Receive Payment") && x.IsView == true).ToList();
            var i = 0;
            foreach (var childitem in filterparentmenu)
            {

                if (childitem.FirstParameter != null)
                {
                    if(@childitem.FirstValue == "Customers")
                    {
                        childitem.FirstValue = "navCustomers";
                    }
                    if (i == 0)
                    {
                            <li class="nav-item">
                                <a class="nav-link  fw-semibold active" href="#" id=@childitem.FirstValue>@childitem.MenuName</a>
                            </li>

                    }
                    else
                    {
                            <li class="nav-item">
                                <a class="nav-link  fw-semibold" href="#" id=@childitem.FirstValue>@childitem.MenuName</a>
                            </li>

                    }


                }

                i++;
            }
        }

    </li>

    @* <li class="nav-item">
        <a class="nav-link active fw-semibold" aria-current="page" href="#" id="sales-id">All Sales</a>
    </li>
    <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="payments-id">Payments</a>
    </li>
    <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="customers-id">Customers</a>
    </li>
    <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="products-id">Products & services</a>
    </li> *@
</ul>
  @Html.Hidden("FromDate", null, new { @class = "form-control text-center FromDate", @placeholder = "From Date", @autocomplete = "off", name = "FromDate" })
                    @Html.Hidden("ToDate", null, new { @class = "form-control text-center ToDate", @placeholder = "To Date", @autocomplete = "off", name = "ToDate" })
<div class="row" id="change-checkbox">
    <div class="col-12 col-md-12">
        <div class="row account_offcanvas">
            <div class="offcanvas offcanvas-end " tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasRightLabel" style="width: 300px;">Customer</h5>
                    
                    <button  type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close" id="customeroffcanvasClose"></button>
                </div>
                <div class="offcanvas-body">
                    <div id="accountSave">
                        <input type="hidden" id="CustomerId" value="0" />
                        <input type="hidden" id="LuserId" name="LuserId" value="" />
                        <input type="hidden" id="ComId" name="ComId" value="" />

                        <div class="row mb-2">
                            <div class="col-md-6 col-6">
                                @if (ViewBag.isMultiCurrency)
                                {
                                <label id="currency_label">Currency <sup style="color:red;">*</sup></label>
                                <select id="currency" class="form-control mb-3" style=" margin-left: 0px;">
                                    <option value="">Select Currency</option>
                                </select>
                                }
                                else
                                {
                                <select id="currency" class="form-control mb-3 d-none" style=" margin-left: 0px;">
                                    <option value="">Select Currency</option>
                                </select>
                                }
                            </div>
                            <div class="col-md-6 col-6">
                                    <label>Customer Code </label>
                                    <input id="customer_code" type="text" class="form-control marginLeft" />
                                    <span class="text-danger" id="CustomerCodeValidation"></span>
                                </div>
                        </div>
                           
                        <div class="mb-2" id="nameDiv" style="box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.3); padding: 18px;">
                            <p><i class="bi bi-person-lines-fill"></i><span style="margin-left: 5px;">Name and contact</span></p>
                            <div class="row">
                                <div class="col-md-2 col-2" >
                                    <label>Title</label>
                                    <input id="title" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-3 col-3">
                                    <label>First name</label>
                                    <input id="first_name" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-2 col-2">
                                    <label>Mid name</label>
                                    <input id="middle_name" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-3 col-3">
                                    <label>Last name</label>
                                    <input id="last_name" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-2 col-2">
                                    <label>Suffix</label>
                                    <input id="suffix" type="text" class="form-control marginLeft" />
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-md-6 col-6">
                                    <label>Customer display name <sup style="color:red;">*</sup></label>
                                    <input id="display_name" type="text" class="form-control marginLeft" oninput="hideValidationMessage()" />
                                      <div id="validationMessage" style="color: red; display: none;">Customer Name must be filled</div>
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Company name </label>
                                    <input id="company_name" type="text" class="form-control marginLeft" />
                                </div>
                                
                                <div class="col-md-6 col-6">
                                    <label>Email </label>
                                    <input id="email" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Phone number </label>
                                    <input id="phone_number" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Mobile number </label>
                                    <input id="mobile_number" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Fax</label>
                                    <input id="fax" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Other</label>
                                    <input id="other" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Website</label>
                                    <input id="website" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <div class="form-check mt-2">
                                        <input class="form-check-input " type="checkbox" value="" id="isSubCustomer">
                                        <label class="form-check-label">
                                            Is a sub-customer
                                        </label>
                                    </div>
                                    <div class="d-none" id="parent_customer">
                                        <div class="col-md-11 col-12">
                                            <div class="mb-3">
                                                <label class="form-label ">
                                                    Parent Customer<span style="color: red;">*</span>
                                                </label>
                                                @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, new { id = "CustomerSelect", @class = "select2 wide-dropdown form-select form-select-sm" })
                                                <span class="text-danger" id="Customer-validation-offcanvas"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="addressDiv" style="box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.3); padding: 18px; margin-top: 20px;">
                            <p><i class="bi bi-geo-alt"></i><span style="margin-left: 5px;">Address</span></p>
                            <p>Billing address</p>
                            <div class="row mt-2">
                                <div class="col-md-12 col-12">
                                    <label>Street Address</label>
                                    <textarea id="billing_street_address" type="text" class="form-control marginLeft"></textarea>
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>City</label>
                                    <input id="billing_city" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Province</label>
                                    <input id="billing_province" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Postal code</label>
                                    <input id="billing_postal_code" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-6">
                                    <label>Country</label>
                                    <input id="billing_country" type="text" class="form-control marginLeft" />
                                </div>
                            </div>
                            <p class=" mt-2">Shipping address</p>
                            <div class="col-md-6 col-6">
                                <div class="form-check">
                                    <input class="form-check-input " type="checkbox" value="" id="IsSameAsBillingAddress">
                                    <label class="form-check-label">
                                        Same as billing address
                                    </label>
                                </div>
                            </div>
                            <div class="d-none" id="shipping_address">
                                <div class="row mt-2">
                                    <div class="col-md-12 col-12">
                                        <label>Street Address</label>
                                        <input id="shipping_street_address" type="text" class="form-control marginLeft" />
                                    </div>
                                    <div class="col-md-6 col-6">
                                        <label>City</label>
                                        <input id="shipping_city" type="text" class="form-control marginLeft" />
                                    </div>
                                    <div class="col-md-6 col-6">
                                        <label>Province</label>
                                        <input id="shipping_province" type="text" class="form-control marginLeft" />
                                    </div>
                                    <div class="col-md-6 col-6">
                                        <label>Postal code</label>
                                        <input id="shipping_postal_code" type="text" class="form-control marginLeft" />
                                    </div>
                                    <div class="col-md-6 col-6">
                                        <label>Country</label>
                                        <input id="shipping_country" type="text" class="form-control marginLeft" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="noteandattachmentDiv" style="box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.3); padding: 18px; margin-top: 20px;">
                            <p><i class="bi bi-pencil-square"></i><span style="margin-left: 5px;">Notes and attachments</span></p>
                            <div class="row mt-2">
                                <div class="col-md-12 col-12">
                                    <label>Notes</label>
                                    <textarea id="notes" type="text" class="form-control marginLeft" style="height: 70px;"></textarea>
                                </div>
                                <div class="col-md-12 col-12">
                                    <div class="mb-3">
                                        <label class="form-label">
                                            <i class="fas fa-link"></i> <span>Attachments Maximum size: 20MB</span>
                                        </label>
                                        <div id="file-drop-area">
                                            <p>Drag and drop files here or click to select files.</p>
                                            <ul id="selected-files-list"></ul> <!-- List to display selected file names -->
                                        </div>
                                        @* <input id="message-statement" type="text" class="wide-dropdown2" placeholder="If you send statements to customers, this will show up as the description for this invoice" /> *@
                                        <input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf" multiple>
                                    </div>
                                </div>
                            </div>
                            
                        </div>

                        <div id="paymentsDiv" style="box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.3); padding: 18px; margin-top: 20px;">
                            <p><i class="bi bi-credit-card"></i><span style="margin-left: 5px;">Payments</span></p>
                            <div class="row mt-2">
                                <div class="col-md-6 col-6">
                                    <div class="mb-3">
                                        <label class="form-label ">
                                            Primary payment method
                                        </label>
                                        @Html.DropDownList("PaymentMethod", ViewBag.PaymentMethod as List<SelectListItem>,"Select a method", new { id = "paymentMethodId", @class = "select2 wide-dropdown form-select form-select-sm marginLeft" })
                                        
                                    </div>
                                </div>
                                <div class="col-md-6 col-6">
                                    <div class="mb-3">
                                        <label class="form-label ">Terms </label>
                                        <select class="form-select form-select form-select-sm marginLeft" id="terms" aria-label="Floating label select example">
                                            <option value="">Select an option</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6 col-6">
                                    <div class="mb-3">
                                        <label class="form-label ">Sales form delivery options </label>
                                        @Html.DropDownList("DeliveryOptions", ViewBag.DeliveryOptions as List<SelectListItem>,"Select a option", new { id = "DeliveryOptions", @class = "select2 wide-dropdown form-select form-select-sm marginLeft" })

                                    </div>
                                </div>
                                <div class="col-md-6 col-6">
                                    <div class="mb-3">
                                        <label class="form-label ">Language to use sending invoices </label>
                                        @Html.DropDownList("Language", ViewBag.Language as List<SelectListItem>,"Select a language", new { id = "Language", @class = "select2 wide-dropdown form-select form-select-sm marginLeft" })

                                    </div>
                                </div>
                            </div>

                        </div>

                        <div id="additionalInfoDiv" style="box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.3); padding: 18px; margin-top: 20px;">
                            <p><i class="bi bi-file-earmark-bar-graph"></i><span style="margin-left: 5px;">Additional info</span></p>
                            <p style="font-weight: bold">Taxes</p>
                            <div class="row mt-2">
                                <div class="col-md-6 col-12">
                                    <label>Taxes</label>
                                    <input id="taxes" type="text" class="form-control marginLeft" />
                                </div>
                                <div class="col-md-6 col-12">
                                      <label>Buyer Group</label>
                                      <select id="BuyerGroupId" class="form-control select2">
                                           <option value="">Select Buyer Group</option>
                                      </select>
                                </div>
                                <p style="font-weight: bold">Opening balance</p>
                                <div class="col-md-6 col-12 opBalanceParentDiv">
                                    <label>Opening balance</label>
                                    <input id="opening_balance" type="text" class="form-control marginLeft" value="0"/>
                                </div>
                                <div class="col-md-6 col-12 opBalanceParentDiv">
                                    <label>As of  <sup style="color:red;">*</sup></label>
                                    <input id="opening_date" type="text" class="form-control marginLeft" />
                                </div>
                            </div>

                        </div>
                        <!-- <input type="submit" value="Submit"> -->
                        
                    </div>
                </div>
              <div class="offcanvas-footer">
                <div class="modal-footer my-2">
                        <button type="button" class="btn cancel-btn cancel-text" data-bs-dismiss="offcanvas" id="customeroffcanvasClose1">Cancel</button>
                    <button id="customerSaveBtn" type="button" class="btn btn-success" style="margin-left: 10px;">Save</button>
                    @*<button id="accountSaveBtn" type="button" class="btn next-btn text-white mx-2">Save</button>*@
                </div>
              </div>
            </div>


            <div class="offcanvas offcanvas-end overflow-y-scroll"  tabindex="-1" id="offcanvasForProduct" aria-labelledby="offcanvasRightLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasRightLabel" >Product/Service Information</h5>

                    <button onclick="clearModalDataForProduct()" type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body vertical-scroll">
                    <div id="accountSave">
                        <input type="hidden" id="ProductId" value="0" />
                        <input type="hidden" id="FormType" value="default"/>

                        <div id="product_category" style="border-top: 2px solid black;" class="cursor-pointer">
                            
                        </div>

                        <div id="inventoryProductCreate" class="d-none cursor-pointer">
                            <div class="row" style="padding: 10px; border-bottom: 1px solid #d1cdcd;">
                                <div class="col-md-1 col-3">
                                    <i class="bi bi-bag fs-2" style="background-color: #0077c5; color: white; border-radius: 50%; padding: 2px"></i>
                                </div>
                                <div class="col-md-9 col-9">
                                    <p id="formTypeParagraph" style=" color: black; margin-top: 24px;">Inventory&nbsp;<span><a href="#" onclick="showProductCategory()">Change Type</a></span></p>

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-7 col-2">
                                    <div class="mt-2">
                                        <label>Name<sup style="color:red">*</sup></label>
                                        <input id="name" type="text" class="form-control" />
                                        <span class="text-danger" id="inventory-name-validation"></span>                                        
                                    </div>
                                    <div class="d-flex">
                                        <div class="mt-2">
                                            <label>SKU</label>
                                            <input id="sku" type="text" class="form-control" />
                                        </div>
                                        <div class="mt-2 ms-1">
                                            <label>Code</label>
                                            <input id="productCode" type="text" class="form-control" />
                                        </div>
                                    </div>
                                    
                                </div>
                                <div class="col-md-5 col-5">
                                    <img src="..@ViewBag.ImagePath" alt="img" id="UploadFile" class="img-thumbnail" style="height: 150px;width:150px" onerror="this.onerror=null;this.src='../Content/ProductImages/0.png'" /> <br />
                                    <input type="file" name="logoPostedFileBase" accept="image/x-png, image/gif, image/jpeg" id="FileUpload" " />
                                </div>
                                
                            </div>
                            <div class="row" style="border-bottom: 1px solid #d1cdcd;">
                                <div class="col-md-11 col-12">
                                    <div class="my-2">
                                        <label class="form-label ">
                                            Category<sup style="color:red">*</sup>
                                        </label>
                                        @* @Html.DropDownList("CategoryId", ViewBag.CategoryId as List<SelectListItem>,"Select a Category", new { id = "CategoryIdForInventory", @class = "wide-dropdown form-select form-select-sm" })
                                        <span class="text-danger" id="inventory-category-validation"></span> *@
                                      <div class="input-group">
                                      @Html.DropDownList("CategoryIdForInventory", new SelectList((IEnumerable<SelectListItem>)ViewBag.CategoryId, "Value", "Text"), "Select a Category", htmlAttributes: new { @class = "form-control select2", id = "CategoryIdForInventory" })
                                        <div class="input-group-append">
                                            <button id="addCategoryBtn" class="btn btn-primary btn-sm">+</button>
                                        </div>
                                        <span class="text-danger" id="inventory-category-validation"></span>
                                      </div>
                                      @* <div id="validationMessage2" style="color: red; display: none;">Please choose a Category</div> *@
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row my-4 mx-4" >
                                <div class="col-md-12 col-12">
                                    <div class="row"> 
                                        <div class="col-md-6 col-6 mt-1">
                                            <p style="color:black"> Initial quantity on hand</p>
                                            <div class="d-none" id="adjustment">
                                                <p>Adjust: <span><a href="#" onclick="Adjustment('Stock Adjustment')">Quantity</a></span><span>|</span><span><a href="#" onclick="Adjustment('Opening Stock')">Starting value</a></span></p>
                                                <input id="PurchaseId" class="d-none"></input>
                                            </div>
                                            
                                        </div>
                                        <div class="col-md-6 col-6">
                                            <input id="quantity-on-hand" type="text" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="row"> 
                                        <div class="col-md-6 col-6 mt-1">
                                            <p style="color:black"> As of date<sup style="color:red">*</sup></p>
                                            
                                        </div>
                                        <div class="col-md-6 col-6">
                                            <input class="form-control" id="as-of-date" autocomplete="off" />
                                            <span class="text-danger" id="inventory-asofdate-validation"></span>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 col-6 mt-1">
                                            <p style="color:black"> Reorder point</p>
                                        </div>
                                        <div class="col-md-6 col-6">
                                            <input id="reorder-point" type="text" class="form-control" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="border-bottom: 1px solid #d1cdcd;"></div>

                            <div class="form-check mt-2" style="margin-bottom: 5px;" id="sellToCustomer">
                                <input class="form-check-input " type="checkbox" value="" id="isSellToCustomer" style="margin-left: 1px; margin-right: 4px;">
                                <label class="form-check-label">
                                    I sell this product/service to my customers.
                                </label>
                            </div>
                            <div class="row" style="border-bottom: 1px solid #d1cdcd;" id="description-statement">
                                <div class="mt-2">
                                    <label>Description</label>
                                    <input id="description" type="text" class="form-control" style="height: 80px;"/>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-md-6 col-6" style="margin-right: 10px;">
                                        <label>Sales price/rate<sup style="color:red">*</sup></label>
                                        <input id="sales-rate" type="text" class="form-control" />
                                        <span class="text-danger" id="inventory-salesRate-validation"></span>
                                    </div>
                                    <div class="col-md-5 col-5">
                                        <label class="form-label ">
                                            Income Statement<sup style="color:red">*</sup>
                                        </label>
                                    @Html.DropDownList("IncomeAccount", ViewBag.IncomeAccount as List<SelectListItem>, "Select an account", new { id = "IncomeAccount", @class = "wide-dropdown form-select form-select-sm select2" })

                                    </div>
                                    
                                </div>
                                <div class="form-check mt-2" style="margin-bottom: 5px;">
                                    <input class="form-check-input " type="checkbox" value="" id="isTaxInclusive" style="margin-left: 1px; margin-right: 4px;">
                                    <label class="form-check-label">
                                        Inclusive of tax
                                    </label>
                                </div>
                                <div class="row">
                                    <div class="my-2 col-md-6">
                                        <label class="form-label" style="width: 40px; ">
                                            Tax
                                        </label>
                                        @Html.DropDownList("SalesTaxList", ViewBag.SalesTaxList as List<SelectListItem>, "Select a Tax", new { id = "TaxId", @class = "wide-dropdown form-select form-select-sm select2" })
                                    </div>
                                    <div class="col-md-6 col-6 my-2">
                                    <label class="form-label ">
                                        Preferred Inventory<sup style="color:red">*</sup>
                                    </label>
                                    @* @Html.DropDownList("Inventory", ViewBag.Inventory as List<SelectListItem>, "Select Inventory", new { id = "AccIdInventory", @class = "wide-dropdown form-select form-select-sm select2" }) *@
                                    <select id="AccIdInventory" class="form-control select2">
                                        </select>
                                </div>
                                </div>
                                
                                
                            </div>
                            <div class="form-check mt-2" style="margin-bottom: 5px;" id="purchaseFromSupplier">
                                <input class="form-check-input " type="checkbox" value="" id="isPurchaseFromSupplier" style="margin-left: 1px; margin-right: 4px;">
                                <label class="form-check-label">
                                    I purchase this product/service from a supplier.
                                </label>
                            </div>
                            <div class="row mb-2" id="supplier-statement">
                                <div class="mt-2">
                                    <label>Purchasing information</label>
                                    <input id="purchase-information" type="text" class="form-control" style="height: 80px;" />
                                </div>
                                <div class="row">
                                    <div class="col-md-5 col-5 mt-2">
                                        <label>Cost<sup style="color:red">*</sup></label>
                                        <input id="cost" type="text" class="form-control"/>
                                    </div>
                                    <div class="col-md-6 col-6">
                                        <label class="form-label ">
                                            Expense account<sup style="color:red">*</sup>
                                        </label>
                                        @* @Html.DropDownList("Consumption", ViewBag.Consumption as List<SelectListItem>,"Select an account", new { id = "Consumption", @class = "wide-dropdown form-select form-select-sm select2" }) *@
                                        <select id="Consumption" class="form-control select2">
                                            <option value="">Select an account</option>
                                        </select>

                                    </div>
                                </div>
                                <div class="form-check mt-2" style="margin-bottom: 5px;">
                                    <input class="form-check-input " type="checkbox" value="" id="ispurchaseTaxInclusive" style="margin-left: 1px; margin-right: 4px;">
                                    <label class="form-check-label">
                                        Inclusive of purchase tax
                                    </label>
                                </div>
                                <div class="col-md-12 col-12">
                                    <label class="form-label ">
                                        Purchase tax
                                    </label>
                                    @Html.DropDownList("PurchaseTaxList", ViewBag.PurchaseTaxList as List<SelectListItem>,"Select a tax", new { id = "PurchaseTaxId", @class = "wide-dropdown form-select form-select-sm select2" })

                                </div>
                                <div class="col-md-6 col-6 mt-2">
                                    <label class="form-label ">
                                        Preferred Supplier
                                    </label>
                                    @Html.DropDownList("Supplier", ViewBag.Supplier as List<SelectListItem>,"Select a supplier", new { id = "SupplierId", @class = "wide-dropdown form-select form-select-sm select2" })

                                </div>
                                
                               <div class="col-md-7 col-7 mt-4">
                                   <div class="input-group">
                                       <div id="warehouse-table" class="mb-2"></div>
                                        <div class="input-group-append">
                                            <button id="addLocationBtn" class="btn btn-primary" style="height: 30px; width: 30px; padding: 0; text-align: center; line-height: 30px;">+</button>
                                        </div>
                                   </div>
                                    
                                    <div class="btn-group justify-content-end">
                                        <button type="button" class="btn btn-success btn-sm" id="add-row">+</button>
                                        <button type="button" class="btn btn-info btn-sm" id="del-row">X</button>
                                    </div>
                               </div>
                            </div>
                            @* <div class="row">
                                <div class="col-md-6 col-6 mt-2">
                                    <label class="form-label ">
                                        Unit<sup style="color:red">*</sup>
                                    </label>
                                    <div class="input-group d-flex">
                                        @Html.DropDownList("Unit", new SelectList((IEnumerable<SelectListItem>)ViewBag.Unit, "Value", "Text"), "Select a Unit", htmlAttributes: new { @class = "form-control select2", id = "Unit" })
                                        <div class="input-group-append">
                                            <button id="addUnitBtn" class="btn btn-primary">+</button>
                                        </div>                                        
                                    </div>
                                    <span class="text-danger" id="inventory-unit-validation"></span>
                                </div>
                            </div> *@

                            <div class="row">
                                <div class="col-md-6 col-6 mt-2">
                                    <label class="form-label">
                                        Unit<sup style="color:red">*</sup>
                                    </label>
                                    <div class=" d-flex">
                                        <div style="display: contents;">
                                         @Html.DropDownList("Unit", new SelectList((IEnumerable<SelectListItem>)ViewBag.Unit, "Value", "Text"), "Select a Unit", htmlAttributes: new { @class = "form-control select2", id = "Unit" })
                                       </div>
                                        <div class="input-group-append">
                                            <button id="addUnitBtn" class="btn btn-primary" type="button" style="height: 30px; width: 30px; padding: 0; text-align: center; line-height: 30px;">+</button>
                                        </div>
                                    </div>
                                    <span class="text-danger" id="inventory-unit-validation"></span>
                                </div>
                            </div>


                             <div class="row">
                               <div class="col-md-5 col-5 mt-2">
                                    <label>Color</label>
                                    <input id="productColor" type="text" class="form-control" />
                                </div>

                                <div class="col-md-5 col-5 mt-2">
                                    <label>Size</label>
                                    <input id="productSize" type="text" class="form-control" />
                                </div>                             
                             </div>
                              <div class="col-md-5 col-5 mt-2">
                                    <label>Model</label>
                                    <input id="productModel" type="text" class="form-control" />
                                <span class="text-danger" id="productModelValidation"></span>
                              </div>

                            <div class="modal-footer my-2">
                                <button type="button" class="btn cancel-btn cancel-text" data-bs-dismiss="offcanvas" onclick="clearModalData()">Cancel</button>
                                <button id="InventoryProductSaveBtn" type="button" class="btn btn-success" style="margin-left: 10px;">Save</button>
                            </div>
                        </div>

                        
                    </div>
                </div>
            </div>

            <div class="offcanvas offcanvas-end overflow-y-scroll"  tabindex="-1" id="offcanvasForInvoice" aria-labelledby="offcanvasRightLabel">
                <div class="offcanvas-header">
                    <h6 class="offcanvas-title" id="offcanvasRightLabel" ><span id="SalesCodeForInvoice"></span></h6>

                    <button  type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>  @* onclick="clearModalData()" *@
                </div>
                <div class="offcanvas-body vertical-scroll">

                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FirstDiv" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black; " id="SecondDiv" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black; " id="ThirdDiv" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FourthDiv" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FifthDiv" class="py-2">
                        
                    </div>
                    <div style="color:black;" id="SixthDiv" class="py-2">
                        
                    </div>

                    <br />
                <button type="button" id="showJournal" class="btn btn-primary" style=" width: 100px; margin-left: 15px; ">Journal</button>
                 <br />
                  <input type="hidden" id="SalesIdForJournal" name="SalesIdForJournal" value="" />
                <div id="journal-table"></div>
                <br />

                </div>
            </div>
        </div>
    </div>

</div>



<div class="modal" id="categoryModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-info">
                <h5 class="modal-title">Add New Category</h5>
                                
            </div>
            <div class="modal-body">
                <label for="newCategoryInput">Category Name:</label>
                <input type="text" class="form-control" id="newCategoryInput">
            </div>
            <div class="modal-footer">
                                    
                <button type="button" class="btn btn-danger" id="closeCategoryBtn">Close</button>
                <button type="button" class="btn btn-primary" id="saveCategoryBtn">Save</button>
            </div>
        </div>
    </div>
</div>


<div class="modal" id="unitModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Add New Unit</h5>
                                 
            </div>
            <div class="modal-body">
                <label for="newUnitNameInput">Unit Name:</label>
                <input type="text" class="form-control" id="newUnitInput">

                <label for="newUnitShortNameInput">Unit Short Name:</label>
                <input type="text" class="form-control" id="newUnitShortInput">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="closeUnitBtn">Close</button>

                                   
                <button type="button" class="btn btn-primary" id="saveUnitBtn">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="locationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Add New Location</h5>
                                 
            </div>
            <div class="modal-body">
                <label >Location Name:</label>
                <input type="text" class="form-control" id="LocationName">

                <label >Location Short Name:</label>
                <input type="text" class="form-control" id="LocationShortName">

                <label class="form-label fw-semibold"> Location Type </label>
                @Html.DropDownList("WhType", new List<SelectListItem>
                {
                new SelectListItem() {Text = "Ledger", Value="L"},
                new SelectListItem() {Text = "Group", Value="G"},

                }, "Select Warehouse Type", new { @class = "form-control" })
                @Html.ValidationMessage("WhType", "", new { @class = "text-danger" })

                <label class="form-label fw-semibold"> Parent Id </label>
                <select id="ParentId" class="form-control">
                    <option value="">Select Parent</option>
                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="closeLocationBtn">Close</button>
                <button type="button" class="btn btn-primary" id="saveLocationBtn">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="col-md-4  col-4">
    <div id="pendingListModal" class="modal">
        <div class="modal-content" id="modal-content3">
            <div class="row">
                <div class="col-md-11 col-11">
                    <p><strong>Pending Sales Transaction</strong></p>
                </div>
                <div class="col-md-1 col-1">
                    <i class="bi bi-x-square-fill" style="color: red; font-size: 20px;" onclick="closeModal()"></i>
                </div>
            </div>

            <div id="pendingTransaction"></div>
        </div>
    </div>
</div>

<div id="sales-view-id" class="d-none">

    <div class="filter-option" >
        @* <h6 style="margin: 20px;">Sales Transaction</h6> *@
        <div class="col-md-3 col-12 pt-3 ms-auto d-none">
            <label class="ps-1"><input type="radio" name="RptType1" value="PDF" checked="checked" /> PDF  </label>
            <label class="ps-1"><input type="radio" name="RptType1" value="EXCEL" /> EXCEL  </label>
            <label class="ps-1"><input type="radio" name="RptType1" value="WORD" /> WORD  </label>
        </div>

        <div style="display: flex; align-items: center; margin: 20px;">
            <h6 style="margin-right: 10px;">Sales Transaction</h6>
            <a href="#" id="feedbackLink" data-bs-toggle="modal" data-bs-target="#feedbackModal">
                <i class="bi bi-chat-left-quote me-2"></i><span class="me-3 fw-bold">Give feedback</span>
            </a>
           <input type="text" class="textbox search_box ms-2" id="searchInput1" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d; padding: 7px;border-radius: 30px;" /> 
        </div>
        <div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered large-modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="feedbackModalLabel">Provide Feedback</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="rating">Rate your experience:</label>
                                <div class="rating">
                                    <input type="radio" id="happy" name="rating" value="Happy"><label for="happy">😄</label>
                                    <input type="radio" id="good" name="rating" value="Good"><label for="good">😊</label>
                                    <input type="radio" id="satisfactory" name="rating" value="Satisfactory"><label for="satisfactory">😐</label>
                                    <input type="radio" id="sad" name="rating" value="Sad"><label for="sad">😞</label>
                                    <input type="radio" id="angry" name="rating" value="Angry"><label for="angry">😡</label>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="feedback">Feedback:</label>
                                <textarea id="feedback" class="form-control" rows="3"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" id="submitFeedback">Submit Feedback</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row" style="padding: 20px;cursor: pointer;">
            <div id="amount-estimate" style="width: 20%; padding: 0!important" >     @* onclick="initTabulatorOverview('Estimate')" *@
                <h6 id="heading-amount-estimate" style="font-weight: bold; font-color: black">Estimate</h6>
                <label id="label-amount-estimate"></label>
                <div style="height: 20px; background-color: #21ABF6"></div>
                <div style="height: 5px; "></div>
            </div>
            <div id="amount-unbilled" style="width: 20%; padding: 0!important" >     @* onclick="initTabulatorOverview('Sales receipt')" *@
                <h6 id="heading-amount-unbilled" style="font-weight: bold; font-color: black">Unbilled</h6>
                <label id="label-amount-unbilled">Unbilled</label>
                <div style="height: 20px; background-color: #0077C5"></div>
                <div style="height: 5px; "></div>
            </div>
            <div id="amount-overdue" style="width: 20%; padding: 0!important" >   @* onclick="initTabulatorOverview('Overdue')" *@
                <h6 id="heading-amount-overdue" style="font-weight: bold; font-color: black">Overdue</h6>
                <label id="label-amount-overdue">Overdue</label>
                <div style="height: 20px; background-color: #ff8000"></div>
                <div style="height: 5px; "></div>
            </div>
            <div id="amount-invoices-credits" style="width: 20%; padding: 0!important" >  @* onclick="initTabulatorOverview('Invoices')" *@
                <h6 id="heading-amount-invoices-credits" style="font-weight: bold; font-color: black">Invoices</h6>
                <label id="label-amount-invoices-credits">Invoices</label>
                <div style="height: 20px; background-color: #BABEC5"></div>
                <div style="height: 5px; "></div>
            </div>
            <div id="amount-recentlypaid" style="width: 20%; padding: 0!important" >    @* onclick="initTabulatorOverview('RecentlyPaid')" *@
                <h6 id="heading-amount-recentlypaid" style="font-weight: bold; font-color: black">Recently paid</h6>
                <label id="label-amount-recentlypaid">Recently paid</label>
                <div style="height: 20px; background-color: #2ca01c"></div>
                <div style="height: 5px; "></div>
            </div>
        </div>

        <div class="row" style="margin-left: 10px;"> 
            <div class="col-lg-2 col-12">
                <div class="mb-3">
                    <label class="form-label ">
                        Type
                    </label>
                    @Html.DropDownList("Status", ViewBag.Status as List<SelectListItem>, new { id = "Status", @class = "form-control wide-dropdown form-select form-select-sm" })
                </div>
            </div>
            <div class="col-lg-2 col-12">
                <div class="mb-3">
                    <label class="form-label ">
                        Duration
                    </label>
                    @Html.DropDownList("Duration", ViewBag.Duration as List<SelectListItem>, new { id = "Duration", @class = "form-control wide-dropdown form-select form-select-sm" })
                </div>
            </div>
            <div class="col-lg-2 col-12">
                <div class="mb-3">
                    <label class="form-label ">
                        Customer
                    </label>
                    @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, new { id = "Customers", @class = "form-control wide-dropdown form-select form-select-sm" })
                </div>
            </div>
             <div class="col-lg-3 col-12 " style=" padding-top: 22px; ">
                <div class="input-group  mb-2 ">
                    <input type="text" class="form-control CustomDate" name="date" id="daterange-btn2">                 
                    <button id='btnDec2' type="button" class="btn btn-danger btn-sm rounded-0 CustomDate" title='Decrement month'><i class="bi bi-calendar-minus" aria-hidden="true"></i></button>
                    <button id='btnInc2' type="button" class="btn btn-primary btn-sm CustomDate" title='Increment month'><i class="bi bi-calendar-plus" aria-hidden="true"></i></button>                   
                </div>                             
              </div>
            
            <div class="col-lg-3 col-12">
                <div class="mb-3 d-flex justify-content-end" style="margin-right: 17px;">
                    <button type="button" class="btn btn-warning" onclick="openpendingListModal()">Pending</button>
                    <div class="dropdown">
                        <button class="btn btn-success dropdown-toggle fw-bold ms-3 h-100 radius-30" type="button" data-bs-toggle="dropdown" >
                            New transaction
                        </button>
                        <ul class="dropdown-menu item-menu" id="ul-id-for-expenses">
                            
                        </ul>
                    </div>
                </div>
            </div>

        </div>
        <div class="d-flex justify-content-end">
            <button title="Print" class="btn btn-white border-0" type="button" id="salesPrint-pdf" style="padding: 0px;padding-bottom: 10px;" 
                    aria-expanded="false">
                <i class="bi bi-printer fs-5" style=" margin-right: 0px; "></i>
            </button>
            <button title="Export to excel" class="btn btn-white border-0" type="button" id="salesPrint-excel" style="padding: 0px;padding-bottom: 10px;padding-left: 10px;" 
                    aria-expanded="false">
                <i class="bi bi-file-earmark-excel fs-5" style=" margin-right: 0px; "></i>
            </button>
            <div title="Settings" class="dropdown1  custom-grid" style="display:inline-block;margin-left: 10px;">
                                    @*<button class="btn btn-white border-0" type="button">
                <i class="bi bi-gear fs-5"></i>
                </button>*@
                <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown1" aria-labelledby="dropdownMenuButton-sales">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="salesColumnList" class="custom-grids">
                                    </div>
                                </li>
                            </ul>

                        </div>
                        
                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="sales-rows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                        <div class="col-md-3  p-4">
                             <button id="saveSales" class="btn btn-success">Save Filter</button>
                        </div>

                         <div style=" padding-top: 24px; ">
                              <button class="btn btn-danger btn-sm" onclick="DeleteFilter1('Sales')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>
        <div style="margin-left: 20px; margin-right: 20px;">
            <div id="example-table"></div>
        </div>



    </div>
</div>

<div id="customers-view-id" class="d-none">
    <div class="filter-option">
        @* <h6 style="margin: 20px;">Sales Transaction</h6>afds *@
         <div class="col-md-3 col-12 pt-3 ms-auto d-none">
            <label class="ps-1"><input type="radio" name="RptType3" value="PDF" checked="checked" /> PDF  </label>
            <label class="ps-1"><input type="radio" name="RptType3" value="EXCEL" /> EXCEL  </label>
            <label class="ps-1"><input type="radio" name="RptType3" value="WORD" /> WORD  </label>
        </div>

        <div class="d-flex justify-content-between align-items-center" style=" margin: 20px;">
            <div>
            <h6 style="margin-right: 10px;">Customers</h6>
            </div>
             
            <div class="d-flex align-items-center">
                <div class="input-group " style=" width: 290px; ">
                    <input type="text" class="form-control" name="date" id="daterange-btn1">
                    <button id='btnDec1' type="button" class="btn btn-danger btn-sm rounded-0" title='Decrement month'><i class="bi bi-calendar-minus" aria-hidden="true"></i></button>
                    <button id='btnInc1' type="button" class="btn btn-primary btn-sm" title='Increment month'><i class="bi bi-calendar-plus" aria-hidden="true"></i></button>
                </div>
                              
                                  
                <div class="dropdown" style=" margin-left: 10px; ">
                    <button class="btn btn-primary dropdown-toggle radius-30" type="button" data-bs-toggle="dropdown">
                        <i class="fa fa-floppy-o "></i><span>Reports</span>
                    </button>                                  
                    <div class="dropdown-menu" id="button-container">
                        <div class="separator">Individual Report</div>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('CustomerNotPosted')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">View Report [ Return Merged ]</span>
                        </a>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('PrintLedger')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">Ledger [ Posted ]</span>
                        </a>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('Customer')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">View [ Posted ]</span>
                        </a>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('CustomerIsNotPosted')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">View [ Not-Posted ]</span>
                        </a>

                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('CustomerRewardPointNotPosted')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">Reward Point Details</span>
                        </a>
                        <div class="separator">Group Report</div>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('AllCustomerBalance')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">All Customer Balance</span>
                        </a>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('AllCustomerAgingBalance')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">All Customer Aging Balance</span>
                        </a>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('RewardPointSummary')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">Reward Point Summary</span>
                        </a>

                        
                                    @if (BusinessTypeName == "Aluminum Manufacturer".ToLower())
                                    {
                            <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('AllCustomerBalance_AllSales')">
                                <i class="icon-pencil icon-white"></i><span class="mx-2">All Customer Details</span>
                            </a>
                            <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintCustomer('AllCustomerBalance_AllSalesQty')">
                                <i class="icon-pencil icon-white"></i><span class="mx-2">Customer Qty Ledger</span>
                            </a>
                                    }
                    </div>
                </div>
                         
            <div>
                <button type="button" class="btn btn-success radius-30" style=" margin-left: 10px; " data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="" onclick="clearCustomerModalData()">Add Customer</button>
            </div>
           </div>
             
        </div>

        <div class="row" style="padding: 20px;cursor: pointer;">
            <div id="amount-estimate1" style="width: 20%; padding: 0!important">
                <h6 id="heading-amount-estimate1" style="font-weight: bold; font-color: black">Estimate</h6>
                <label id="label-amount-estimate1"></label>
                <div style="height: 20px; background-color: #21ABF6"></div>
                <div style="height: 5px; "></div>
            </div>
            <div id="amount-unbilled1" style="width: 20%; padding: 0!important">
                <h6 id="heading-amount-unbilled1" style="font-weight: bold; font-color: black">Unbilled</h6>
                <label id="label-amount-unbilled1">Unbilled</label>
                <div style="height: 20px; background-color: #0077C5"></div>
                <div style="height: 5px; "></div>
            </div>
            <div id="amount-overdue1" style="width: 20%; padding: 0!important">
                <h6 id="heading-amount-overdue1" style="font-weight: bold; font-color: black">Overdue</h6>
                <label id="label-amount-overdue1">Overdue</label>
                <div style="height: 20px; background-color: #ff8000"></div>
                <div style="height: 5px; "></div>
            </div>
            <div id="amount-invoices-credits1" style="width: 20%; padding: 0!important">
                <h6 id="heading-amount-invoices-credits1" style="font-weight: bold; font-color: black">Invoices</h6>
                <label id="label-amount-invoices-credits1">Invoices</label>
                <div style="height: 20px; background-color: #BABEC5"></div>
                <div style="height: 5px; "></div>
            </div>
            <div id="amount-recentlypaid1" style="width: 20%; padding: 0!important">
                <h6 id="heading-amount-recentlypaid1" style="font-weight: bold; font-color: black">Recently paid</h6>
                <label id="label-amount-recentlypaid1">Recently paid</label>
                <div style="height: 20px; background-color: #2ca01c"></div>
                <div style="height: 5px; "></div>
            </div>
        </div>

        
        <div style="display: flex; justify-content: space-between; margin: 10px;">
         <input type="text" class="textbox search_box ms-2" id="searchInput" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px;height: 40px; border: 1px solid #8080807d; padding: 7px;border-radius: 30px;" />
        <div class="d-flex justify-content-end">
            <button title="Print" class="btn btn-white border-0" type="button" id="customerPrint-pdf" style=" padding: 0px; "
                    aria-expanded="false">
                <i class="bi bi-printer fs-5" style=" margin-right: 0px; "></i>
            </button>
            <button title="Export to excel" class="btn btn-white border-0" type="button" id="customerPrint-excel" style=" padding: 0px;margin-left: 10px; "
                    aria-expanded="false">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </button>
               <div title="Settings" class="dropdown1  custom-grid" style="display:inline-block;margin-top: 2px;margin-left: 6px;">
                           @*<button class="btn btn-white border-0" type="button">
       <i class="bi bi-gear fs-5"></i>
       </button>*@
       <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
          aria-expanded="false">
           <i class="bi bi-gear fs-5"></i>
       </a>
       <div class="dropdown-menu gear-dropdown3" aria-labelledby="dropdownMenuButton-customer">
           <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
               <div class="col">
                   <span class="fw-bold ms-3">Columns</span>
                   <hr class="m-0 w-75 ms-3 w-sm-50 " />
                   <ul class="list-unstyled">
                       <li>
                           <div id="customerColumnList" class="custom-grids">
                           </div>
                       </li>
                   </ul>

               </div>

               <div class="d-flex">
               <div class="ms-3">
                   <label>Rows</label> <br />
                   <select name="rows" id="customer-rows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                       <option value="0" disabled selected>Rows</option>
                       <option value="5" selected>5</option>
                       <option value="10">10</option>
                       <option value="20">20</option>
                       <option value="50">50</option>
                       <option value="100">100</option>
                       <option value="1000">1000</option>
                   </select>
               </div>
                <div class="col-md-3  p-4">
                    <button id="saveColumnSettings" class="btn btn-success">Save Filter</button>
                </div>  
                    
                 <div style=" padding-top: 24px; ">
                      <button class="btn btn-danger btn-sm" onclick="DeleteFilter3('Customer')">Remove Filter</button>
                 </div> 
                </div>

           </div>
                        
       </div>


   </div>

        </div>
        </div>

        <div style="margin-left: 20px; margin-right: 20px;">
            <div id="customer-table"></div>
        </div>



    </div>
</div>

<div id="products-view-id" class="d-none">
    <div class="row mt-2">
       
        <div style="display: flex; justify-content: space-between; align-items: center; margin: 20px;">
            <h6 style="margin-right: 10px;">Products and Services</h6>

            <div class="col-md-3 col-12 ms-auto ">
                <label class="ps-1"><input type="radio" name="RptType" value="PDF" checked="checked" /> PDF  </label>
                <label class="ps-1"><input type="radio" name="RptType" value="EXCEL" /> EXCEL  </label>
                <label class="ps-1"><input type="radio" name="RptType" value="WORD" /> WORD  </label>
            </div>

            <div style="display: flex;">
             <div class="col-md-3 col-6 divHiddenItems">
                <div class="input-group  mb-2" style=" width: 290px; ">
                    <input type="text" class="form-control" name="date" id="daterange-btn">
                    <button id='btnDec' type="button" class="btn btn-danger btn-sm rounded-0" title='Decrement month'><i class="bi bi-calendar-minus" aria-hidden="true"></i></button>
                    <button id='btnInc' type="button" class="btn btn-primary btn-sm" title='Increment month'><i class="bi bi-calendar-plus" aria-hidden="true"></i></button>
                </div>
                              
              </div>

               <div class="col-md-2 col-6 divHiddenItems" style=" margin-left: 100px; ">
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle radius-30" type="button" data-bs-toggle="dropdown">
                        <i class="fa fa-floppy-o "></i><span>Reports</span>
                    </button>                                  
                    <div class="dropdown-menu" id="button-container">
                        <div class="separator" style=" margin-left: 15px;margin-right: 15px;">Product Wise</div>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('PrintLedgerNotPosted')"><i class="icon-pencil icon-white"></i><span class="mx-2">Ledger</span></button>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('PrintLedger')"><i class="icon-pencil icon-white"></i><span class="mx-2">Ledger [Posted]</span></button>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('rptPrdAvgRateCalculation')"><i class="icon-pencil icon-white"></i><span class="mx-2">Qty & Rate Calculation</span></button>
                        <div class="separator" style=" margin-left: 15px;margin-right: 15px;">Group Wise</div>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('prdregistervalue')"><i class="icon-pencil icon-white"></i><span class="mx-2">Register With Value</span></button>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('prdregistervaluesummary')"><i class="icon-pencil icon-white"></i><span class="mx-2">Register Summary</span></button>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('prdregistervaluecategorysummary')"><i class="icon-pencil icon-white"></i><span class="mx-2">Stock Summary By Category</span></button>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('PrintProductList')"><i class="icon-pencil icon-white"></i><span class="mx-2">Item List</span></button>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('PrintProductListWithoutZero')"><i class="icon-pencil icon-white"></i><span class="mx-2">Stock Item List</span></button>
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('ShareProductList')"><i class="icon-pencil icon-white"></i><span class="mx-2">Share Product List</span></button>
                        @* <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('CategoryWiseTopSales')"><i class="icon-pencil icon-white"></i><span class="mx-2">Top @formname By Category</span></button> *@
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('ProductWiseTopSales')"><i class="icon-pencil icon-white"></i><span class="mx-2">Top @formname By Product</span></button>
                        @* <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('ProductWiseStockCalculation')"><i class="icon-pencil icon-white"></i><span class="mx-2">Total Stock Check</span></button> *@
                        <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('ProductWiseStockCalculationTabulator')"><i class="icon-pencil icon-white"></i><span class="mx-2">Stock Check [New]</span></button>                                      
                        @if (BusinessTypeName.ToLower() == "GARMENTS INVENTORY".ToLower())
                        {
                            <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('BDPOWiseSummary')"><i class="icon-pencil icon-white"></i><span class="mx-2">PO Wise Balance</span></button>

                        }
                        @if (IsSerialSales == 1)
                        {
                            <button class="dropdown-item BtnSave" type="button" onclick="ReportPrintProduct('PrintMismatchProductList')"><i class="icon-pencil icon-white"></i><span class="mx-2">Stock Mismatch with IMEI</span></button>

                        }
                    </div>
                </div>
                            </div>

            
                <div class="col-md-2 col-6 divHiddenItems " >
                <div class="dropdown">
                        <button class="btn btn-light dropdown-toggle radius-30" type="button" data-bs-toggle="dropdown">
                        <i class="fa fa-floppy-o "></i><span>More</span>
                    </button>
                    <div class="dropdown-menu" id="button-container">
                        <a class="dropdown-item" target="_blank" href="@Url.Action("CategoryList", "Admin")"><i class="icon-pencil icon-white"></i><span class="mx-2">Manage Categories</span></a>
                        <a class="dropdown-item" target="_blank" href="@Url.Action("UnitList", "Admin")"><i class="icon-pencil icon-white"></i><span class="mx-2">Manage Units</span></a> 
                         <a class="dropdown-item" target="_blank" href="@Url.Action("BrandList", "Admin")"><i class="icon-pencil icon-white"></i><span class="mx-2">Manage Brand</span></a>
                            <a class="dropdown-item" target="_blank" href="@Url.Action("WarehouseList", "Admin")"><i class="icon-pencil icon-white"></i><span class="mx-2">Manage Location</span></a>
                        </div>
                </div>
            </div>
            <span>
                <button type="button" class="btn btn-success radius-30" style="margin-left: 0px;" data-bs-toggle="offcanvas" onclick="showProductCategory()" data-bs-target="#offcanvasForProduct" aria-controls="">Add Product</button>
            </span>
               <button type="button" class="btn btn-light radius-30" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Refresh" onclick="sendProductToServer()"> <i class="bi bi-arrow-clockwise" style="padding-left: 2px;font-size: larger;"></i></button>
            </div>
        </div>

        <div class="col-md-12 ">  @* offset-md-3 *@
            <div class="row">
                 <div class="col-md-3">
                    <div class="row cursor-pointer" id="product-all-stock">
                        <div class="col-md-6">
                            <img src="~/images/all_stock.jpg" alt="Low Stock Image" height="130" width="130" class="d-none"/>
                            <img src="~/images/all_stock.jpg" alt="Low Stock Image" height="130" width="130"/>
                        </div>
                        <div class="col-md-6 m-auto" style="border-right: 1px solid black;">
                            <p style="color: blue; font-size: 50px">@ViewBag.allStock</p>
                            <p style="font-size: 17px">ALL ITEMS</p>
                        </div>
                    </div>
                </div>
                 <div class="col-md-3">
                    <div class="row cursor-pointer" id="product-available">
                        <div class="col-md-6">
                            <img src="~/images/available_stock.jpg" alt="Low Stock Image" height="130" width="130" class="d-none"/>
                            <img src="~/images/available_stock.jpg" alt="Low Stock Image" height="130" width="130"/>
                        </div>
                        <div class="col-md-6 m-auto" style="border-right: 1px solid black;">
                            <p style="color: forestgreen; font-size: 50px">@ViewBag.availableStock</p>
                            <p style="font-size: 17px">AVAILABLE</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="row cursor-pointer" id="product-low-stock">
                        <div class="col-md-6">
                            <img src="~/images/low_stock.jpg" alt="Low Stock Image" height="130" width="130" class="d-none"/>
                            <img src="~/images/low_stock.jpg" alt="Low Stock Image" height="130" width="130"/>
                        </div>
                        <div class="col-md-6 m-auto" style="border-right: 1px solid black;">
                            <p style="color: #f5b642; font-size: 50px">@ViewBag.LowStock</p>
                            <p style="font-size: 17px">LOW STOCK</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="row cursor-pointer" id="product-out-stock">
                        <div class="col-md-6">
                            <img src="~/images/stock_out.jpg" alt="OUT OF Stock Image" height="130" width="130" />
                        </div>
                        <div class="col-md-6 m-auto" >
                            <p style="color: #c42525; font-size: 50px">@ViewBag.OutOfStock</p>
                            <p style="font-size: 17px">OUT OF STOCK</p>
                        </div>
                    </div>
                </div>
            </div>
            
        </div>

        
    </div>
    @* <div style="display: flex; justify-content: space-between; align-items: center; margin: 20px;">
        <h6 style="margin-right: 10px;">Products and Services</h6>
        <div class="col-md-2 col-6 divHiddenItems">
            <div class="dropdown">
                <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    <i class="fa fa-floppy-o "></i><span>More</span>
                </button>
                <div class="dropdown-menu" id="button-container">
                   
                    <a class="dropdown-item" target="_blank" href="@Url.Action("CategoryList", "Admin")"><i class="icon-pencil icon-white"></i><span class="mx-2">Manage Categories</span></a>
                    <a class="dropdown-item" target="_blank" href="@Url.Action("UnitList", "Admin")"><i class="icon-pencil icon-white"></i><span class="mx-2">Manage Units</span></a>                        
                </div>
            </div>
        </div>
        <span>
            <button type="button" class="btn btn-success radius-30" data-bs-toggle="offcanvas" onclick="showProductCategory()" data-bs-target="#offcanvasForProduct" aria-controls="">Add Product</button>
        </span>
    </div> *@
    <br />
    <div class="row mt-3">

        <div class="col-md col-6">
            <div class="input-group  mb-1" style="margin-left: 5px;">
                
                @Html.DropDownList("CategoryId", null, "Category", htmlAttributes: new { @id = "CategoryId", @class = "form-control" })
            </div>
        </div>

        <div class="col-md col-6">
            <div class="input-group  mb-1">
                
                @Html.DropDownList("BrandId", null, "Brand", htmlAttributes: new { @id = "BrandId", @class = "form-control" })
            </div>
        </div>

        <div class="col-md col-6">
            <div class="input-group  mb-1">
                
                @Html.DropDownList("ModelId", null, "Model", htmlAttributes: new { @id = "ModelId", @class = "form-control" })
            </div>
        </div>
        <div class="col-md col-6">
            <div class="input-group  mb-1">
                
                @Html.DropDownList("WarehouseId", null, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>


        
        <div class="col-md col-4 d-none" style="margin-right: 30px;">
            @Html.DropDownList("ROL", new List<SelectListItem>
            {
            new SelectListItem() {Text = "-Select Criteria-", Value="All"},
            new SelectListItem() {Text = "Corss First Reorder Level", Value="ROL1"},
            new SelectListItem() {Text = "Corss Secound Reorder Level", Value="ROL2"},
            new SelectListItem() {Text = "Corss Third Reorder Level", Value="ROL3"},
            new SelectListItem() {Text = "Only Corss First ROL", Value="OnlyROL1"},
            new SelectListItem() {Text = "Only Corss Secound ROL", Value="OnlyROL2"},
            new SelectListItem() {Text = "Only Corss Third ROL", Value="OnlyROL3"},

            }, new { @class = "form-control" })
        </div>

    </div>

    <div style="display: flex;">
         <div>
         @* <input type="text" class="textbox search_box ms-2" id="searchInput2" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d;height: 40px; border-radius: 25px;padding-left: 15px;margin-top: 20px;" /> *@
         </div>
         <div class="ms-auto">
         <a href="#" id="print-table" class="text-decoration-none text-black">
             <i class="bi bi-printer fs-5"></i>
         </a>
         <a href="#" id="download-xlsx" class="text-decoration-none text-black">
             <i class="bi bi-file-earmark-excel fs-5"></i>
         </a>
                         @*<button title="Export to excel" class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
         aria-expanded="false">
         <i class="bi bi-file-earmark-excel fs-5"></i>
         </button>*@
         <div title="Settings" class="dropdown1 mt-3 custom-grids" style="display:inline-block;">
                             @*<button class="btn btn-white border-0" type="button">
             <i class="bi bi-gear fs-5"></i>
             </button>*@
             <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                aria-expanded="false">
                 <i class="bi bi-gear fs-5"></i>
             </a>
             <div class="dropdown-menu gear-dropdown4" aria-labelledby="dropdownMenuButton-product">
                 <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                     <div class="col">
                         <span class="fw-bold ms-3">Columns</span>
                         <hr class="m-0 w-75 ms-3 w-sm-50 " />
                         <ul class="list-unstyled">
                             <li>
                                 <div id="productColumnList" class="custom-grids">
                                 </div>
                             </li>
                         </ul>

                     </div>

                     <div class="d-flex">
                     <div class="ms-3">
                         <label>Rows</label> <br />
                         <select name="rows" id="product-rows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                             <option value="0" disabled selected>Rows</option>
                             <option value="5" selected>5</option>
                             <option value="10">10</option>
                             <option value="20">20</option>
                             <option value="50">50</option>
                             <option value="100">100</option>
                             <option value="1000">1000</option>
                         </select>
                     </div>

                     <div class="col-md-3  p-4">
                         <button id="saveProduct" class="btn btn-success">Save Filter</button>
                     </div> 

                      <div style=" padding-top: 24px; ">
                           <button class="btn btn-danger btn-sm" onclick="DeleteFilter4('Product')">Remove Filter</button>
                      </div> 
                    </div>

                 </div>
             </div>


         </div>

     </div>
 </div>

    <div style="margin-top: 20px;">
        <div id="product-table"></div>
    </div>
</div>

<div id="payments-view-id" class="d-none">
    <div class="filter-option">
         <div class="col-md-3 col-12 pt-3 ms-auto d-none">
            <label class="ps-1"><input type="radio" name="RptType2" value="PDF" checked="checked" /> PDF  </label>
            <label class="ps-1"><input type="radio" name="RptType2" value="EXCEL" /> EXCEL  </label>
            <label class="ps-1"><input type="radio" name="RptType2" value="WORD" /> WORD  </label>
        </div>

        <h6 style="margin: 20px;">Payment List</h6> 
        

        <div class="row" style="margin-left: 10px;">
            <div class="col-lg-2 col-12">
                <div class="mb-3">
                    <label class="form-label ">
                        Duration
                    </label>
                    @Html.DropDownList("Duration", ViewBag.Duration as List<SelectListItem>, new { id = "PaymentDuration", @class = "form-control wide-dropdown form-select form-select-sm" })
                </div>
            </div>
            <div class="col-lg-2 col-12">
                <div class="mb-3">
                    <label class="form-label ">
                        Customer
                    </label>
                    @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, new { id = "PaymentCustomers", @class = "form-control wide-dropdown form-select form-select-sm" })
                </div>
            </div>
            <div class="col-lg-5 col-12">
                <input type="text" class="textbox search_box ms-2 mt-4" id="searchInput3" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d; padding: 7px;border-radius: 30px;" /> 
            </div>
            <div class="col-lg-3 col-12">
                <div class="mb-3 d-flex justify-content-end" style="margin-right: 17px;">
                    @* <button type="button" class="btn btn-success" onclick="gotocreateInvoice()">Create Invoice</button> *@
                    <div class="dropdown">
                        <button class="btn btn-success dropdown-toggle fw-bold ms-3 h-100 radius-30" type="button" data-bs-toggle="dropdown">
                            New transaction
                        </button>
                        <ul class="dropdown-menu item-menu" id="ul-id-for-payments">
                        </ul>
                    </div>
                </div>
            </div>

        </div>
        <div class="d-flex justify-content-end">
            <button title="Print" class="btn btn-white border-0" type="button" id="paymentPrint-pdf" style=" padding: 0px; "
                    aria-expanded="false">
                <i class="bi bi-printer fs-5" style=" margin-right: 0px; "></i>
            </button>
            <button title="Export to excel" class="btn btn-white border-0" type="button" id="paymentPrint-excel" style=" padding: 0px;margin-left: 10px; "
                    aria-expanded="false">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </button>

             <div title="Settings" class="dropdown1  custom-grids" style="display:inline-block;margin-left: 5px;">
                         @*<button class="btn btn-white border-0" type="button">
         <i class="bi bi-gear fs-5"></i>
         </button>*@
         <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
            aria-expanded="false">
             <i class="bi bi-gear fs-5"></i>
         </a>
         <div class="dropdown-menu gear-dropdown2" aria-labelledby="dropdownMenuButton-payment">
             <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                 <div class="col">
                     <span class="fw-bold ms-3">Columns</span>
                     <hr class="m-0 w-75 ms-3 w-sm-50 " />
                     <ul class="list-unstyled">
                         <li>
                             <div id="paymentColumnList" class="custom-grids">
                             </div>
                         </li>
                     </ul>

                 </div>

                <div class="d-flex">
                 <div class="ms-3">
                     <label>Rows</label> <br />
                     <select name="rows" id="payment-rows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                         <option value="0" disabled selected>Rows</option>
                         <option value="5" selected>5</option>
                         <option value="10">10</option>
                         <option value="20">20</option>
                         <option value="50">50</option>
                         <option value="100">100</option>
                         <option value="1000">1000</option>
                     </select>
                 </div>

                   <div class="col-md-3  p-4">
                      <button id="savePayment" class="btn btn-success">Save Filter</button>
                   </div> 

                    <div style=" padding-top: 24px; ">
                          <button class="btn btn-danger btn-sm" onclick="DeleteFilter2('Receive_Payment')">Remove Filter</button>
                     </div> 
                    </div>

             </div>
         </div>

     </div>

        </div>
        <div style="margin-left: 20px; margin-right: 20px;">
            <div id="payment-table"></div>
        </div>


        @*offcanvas for Journal starts*@
           <div class="offcanvas offcanvas-end overflow-y-scroll"  tabindex="-1" id="offcanvasForReceivePayment" aria-labelledby="offcanvasRightLabel">
                <div class="offcanvas-header">
                    <h6 class="offcanvas-title" id="offcanvasRightLabel" ><span id="CodeForReceivePayments"></span></h6>

                    <button  type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>  @* onclick="clearModalData()" *@
                </div>
                <div class="offcanvas-body vertical-scroll">

                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FirstDiv1" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black; " id="SecondDiv1" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black; " id="ThirdDiv1" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FourthDiv1" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FifthDiv1" class="py-2">
                        
                    </div>
                    <div style="color:black;" id="SixthDiv1" class="py-2">
                        
                    </div>

                    <br />
                <button type="button" id="paymentJournal" class="btn btn-primary" style=" width: 100px; margin-left: 15px; ">Journal</button>
                 <br />
                  <input type="hidden" id="PaymentIdForJournal" name="PaymentIdForJournal" value="" />
                <div id="payment-table1"></div>
                <br />
                </div>
                
            </div>

@*offcanvas for Journal ends*@

    </div>
</div>


<div class="col-md-2  col-2">
    <div id="customModal" class="modal">
        <div class="modal-content" id="modal-content2">
            <p>Are you sure you want to delete?</p>
            <div class="row">
                <div class="col-md-6 col-6">
                    <button id="confirmBtn" class="btn btn-success" style="width: 100px">OK</button>
                </div>
                <div class="col-md-6 col-6 d-flex justify-content-end">
                    <button id="cancelBtn" class="btn btn-danger" style="width: 100px">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

@*Customer-Details and buttons starts*@
<div Id="Customer-Details-view"  class="d-none">
     <div class="row">
          <div class="col">
      <br />   
        <h6 class="cursor-pointer" id="divcustomer" style="color:blue"> << Customers</h6>
    </div>

        <div class="col d-flex justify-content-end">

           <div class="btn-group">
            <button class="btn btn-outline-info fw-bold vi-supplier-editbtn" style="height: fit-content;">Edit</button>
            <button type="button" class="btn btn-outline-info dropdown-toggle dropdown-toggle-split" style="height: fit-content;" data-bs-toggle="dropdown"  aria-expanded="false">
                <span class="visually-hidden">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu">                              
                <li class="dropdown-item">
                <a href="#" class="dropdown-link" style="color: black;">Make Inactive</a>
                </li> 
                <li class="dropdown-item">
                    <a href="#" class="dropdown-link" style="color: black;">marge contact</a>
                </li>                                                             
            </ul>
    </div>

     <div class="col-lg-3 col-12" style="margin-right:50px;">
                <div class="mb-3 " style="margin-top:10px;">
                  
                    <div class="dropdown">
                        <button class="btn btn-success dropdown-toggle fw-bold ms-3 h-100 radius-30" type="button" data-bs-toggle="dropdown" >
                            New transaction
                        </button>
                        <ul class="dropdown-menu item-menu" id="ul-id-for-Sales">
                            
                        </ul>
                    </div>
                </div>
            </div>

    </div>
     </div>
<div class="row">
    <div class="col-md-2 col-4" >
        
            <input type="text" class="textbox search_box" id="customerInput" name="keywords" autocomplete="off" placeholder="Search" style="width: 200px; border: 1px solid #8080807d; padding: 7px;border-radius: 30px;margin-left: 0px;" />
        <br />        
            @* <input type="text" id="searchBox" class="form-control" oninput="GetSupplierAllForSideBarSearch()">
        <ul class="list-group" id="Splist">

  <!-- Add more items as needed -->
</ul> *@
    <div id="Customer-details-CustomerName"></div>
    </div>
     <div class="col-md-10 col-8">
    <div class="row py-3" style="background: #e9ecef6b;">
        <div class="d-flex">
             <div>
             <div class="card"  style="width: 800px; margin-right: 30px;">
              <div class="card-body">
        <div class="d-flex" style="padding-bottom: 50px;"> 

            <div class="col-4" style="margin-right: 90px;">
            <p class="fs-4 fw-bold" id="vi-sup-Name"> </p>
             <p><span id="vi-sup-comname"> </span> | <br />
                 <span id="vi-sup-address"> </span></p>       

        </div>
         <div class="col-2">

           <a  class="fs-4 fw-bold" id="vi-sup-mail"><i class="bi bi-envelope"></i> </a> 
           <a   class="fs-4 fw-bold" id="vi-sup-mob"><i class="bi bi-telephone"></i> </a>

        </div>

        </div>
        

         </div>
          </div>

        </div>

       
        <div class="col-6 ">
            <div class="text-right" >

                 @* <div class="btn-group">
                            <button class="btn btn-outline-info fw-bold ms-3 h-100 vi-supplier-editbtn">Edit</button>
                            <button type="button" class="btn btn-outline-info btn border-start-0 dropdown-toggle dropdown-toggle-split"  data-bs-toggle="dropdown"  aria-expanded="false">
                                <span class="visually-hidden">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu">                              
                               <li class="dropdown-item">
                              <a href="#" class="dropdown-link" style="color: black;">Make Inactive</a>
                              </li> 
                              <li class="dropdown-item">
                                    <a href="#" class="dropdown-link" style="color: black;">marge contact</a>
                               </li>                                                             
                            </ul>
                   </div> *@
             
            <div class="card" style="width: 300px;">
                        <div class="card-body">
                            <h6>SUMMARY</h6>
            <h4 id="vi-sup-openBanlance"> </h4>
        <h6>Open balance</h6>
        <h4 id="vi-sup-overdue"> </h4>
        <h6>Overdue payment</h6>
        </div>
        </div>
            </div>
        
        </div>

        </div>
       
    </div>

            @*Supplier-Details tag and buttons ends*@
            @*gear icon and other two buttons ends*@
    <ul class="nav nav-tabs" id="sd-myTab" role="tablist">

    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Transaction List</button>

    </li>
    <li  class="nav-item" role="presentation">
         <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile-tab-pane" type="button" role="tab" aria-controls="profile-tab-pane" aria-selected="false">Customer Details</button>

    </li>
    
   </ul>
   <br />
   <div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0"> @*gear icon and other two buttons starts*@
        <div class="row">
        <div class="dropdown filter-dropdown">
            <button id="filter-btn" type="button" class="btn customize-btnew fw-bold ms-2 dropdown-toggle mt-3 px-4" data-bs-toggle="dropdown" aria-expanded="false">Filter</button>
            <div class="dropdown-menu dropdown-of filter-drop filter-dropdown-class" aria-labelledby="filter-btn" id="filter-dropdown-id">
                <form class="p-3">
                    <div class="row">
                        <div class="mb-3 col-lg-5">
                            <label for="typeDropdown" class="form-label fw-bold">Type</label>
                            <select class="form-select" id="typeDropdown" style="border-radius:0;">
                                <option value="option1">All transactions</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="mb-3 col-lg-4" id="statusDropdownParent">
                            <label for="statusDropdown" class="form-label fw-bold">Status</label>
                            <select class="form-select" id="statusDropdown" style="border-radius:0;">
                                <option value="option1">All statuses</option>
                            </select>
                        </div>
                        <div class="mb-3 col-lg-4" id="deliveryMethodDropdownParent">
                            <label for="deliveryMethodDropdown" class="form-label fw-bold">Delivery Method</label>
                            <select class="form-select" id="deliveryMethodDropdown" style="border-radius:0;">
                                <option value="option1">Any</option>
                                <option value="option2">Print later</option>
                            </select>
                        </div>
                    </div>
                    <div class="row" id="fromToDateParent">
                        <div class="mb-3 col-lg-4">
                            <label for="dateDropdown" class="form-label fw-bold">Date</label>
                            <select onclick="setDateRange()" id="select2" class="form-select">
                                                @*<option selected="selected" disabled="disabled">Select an Option</option>*@
                                <option value="0" selected>Select Date</option>
                                <option value="1">Since 365 days ago</option>
                                <option value="2">Custom</option>
                                <option value="3">Today</option>
                                <option value="13">Yesterday</option>
                                <option value="4">This Week</option>
                                <option value="5">This Week-to-date</option>
                                <option value="6">This Month</option>
                                <option value="8">This Quarter</option>
                                <option value="10">This Year</option>
                                <option value="15">Last Week</option>
                                <option value="17">Last Month</option>
                                <option value="19">Last Quarter</option>
                                <option value="21">Last Year</option>
                                <option value="27">Next Week</option>
                                <option value="29">Next Month</option>
                                <option value="30">Next Quarter</option>
                                <option value="30">Next Year</option>
                            </select>
                        </div>
                        <div class="mb-3 col-lg-4">
                            <label for="fromInput" class="form-label fw-bold">From</label>
                            <input class="form-control" id="start-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                        </div>
                        <div class="mb-3 col-lg-4">
                            <label for="toInput" class="form-label fw-bold">To</label>
                            <input class="form-control" id="end-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                        </div>
                    </div>
                    <div class="mb-3 col-lg-6" id="payeeDropdownParent">
                        <label for="payeeDropdown" class="form-label fw-bold">Payee</label>
                        <select class="form-select" id="payeeDropdown" style="border-radius:0;" onclick="event.stopPropagation()">
                            <option value="option1">All</option>
                        </select>
                    </div>
                    <div class="d-flex justify-content-between mt-5">
                        <button type="reset" class="btn customize-btn radius-30 fw-bold" onclick="resetForm(event)">Reset</button>
                        <button type="button" class="btn  customize-btn-another fw-bold" onclick="reloadTableData()">Apply</button>
                    </div>
                </form>
            </div>
        </div>

    </div>
    <div class="d-flex justify-content-between">
        <div class="dropdown batch-dropdown mt-3">
            <span><i class="bi bi-arrow-90deg-down mt-3 ms-3"></i></span> <button id="batch-btn" type="button" class="btn customize-btnew fw-bold ms-1 dropdown-toggle px-4" data-bs-toggle="dropdown" aria-expanded="false">Batch Actions</button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li><a class="dropdown-item disabled" href="#">Print transactions</a></li>
                <li><a class="dropdown-item disabled" href="#">Categories selected</a></li>
                <li><a class="dropdown-item disabled" href="#">Void transactions</a></li>
                <li><a id="batch-delete" class="dropdown-item" href="#">Delete transactions</a></li>
            </ul>
        </div>

        <div>
                            @*<div class="d-flex mt-3">
            <i class="bi bi-arrow-90deg-down mt-3 ms-3"></i>
            <button id="run-report-btn" type="button" class="btn customize-btnew fw-bold ms-1 dropdown-toggle" onclick="CopyBill()">Batch Actions</button>
            </div>*@
        </div>
        <div>
            <a href="#" id="customerPrint-table" class="text-decoration-none text-black">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="customerDownload-xlsx" class="text-decoration-none text-black">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
                            @*<button title="Export to excel" class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
            aria-expanded="false">
            <i class="bi bi-file-earmark-excel fs-5"></i>
            </button>*@
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                                @*<button class="btn btn-white border-0" type="button">
                <i class="bi bi-gear fs-5"></i>
                </button>*@
                <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown" aria-labelledby="dropdownMenuButton-customer1">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="customerColumnList1" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="customer-rows1" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>
                    </div>
                </div>


            </div>

        </div>
    </div>


                    @*Supplier-Details tabulators starts*@
    <div id="tableContainer" class="mt-4">
        <div id="transaction-details-table-review"></div>
    </div></div>
  <div class="tab-pane fade" id="profile-tab-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">

      <div class="row">
          <div class="col-md-6">

              <p><span class="fw-bold">Customer :</span> <span id="di-Name">Mahin Bhai</span></p><hr/>
              <p><span class="fw-bold">Email :</span> <span id="di-Email">Mahin Bhai</span></p><hr/>
              <p><span class="fw-bold">Phone :</span> <span id="di-Phone">Mahin Bhai</span></p><hr/>
              <p><span class="fw-bold">Mobile :</span> <span id="di-Mobile">Mahin Bhai</span></p><hr/>
              <p><span class="fw-bold">Fax :</span> <span id="di-Fax">Mahin Bhai</span></p><hr/>
              <p><span class="fw-bold">Other :</span> <span id="di-Other">Mahin Bhai</span></p><hr/>
              <p><span class="fw-bold">Website :</span> <span id="di-Website">Mahin Bhai</span></p>
              <hr/>

          </div>
          <div class="col-md-6">
                            <p><button class="btn btn-outline-info fw-bold  radius-30 vi-supplier-editbtn">Edit</button></p>
              <p><span class="fw-bold">Billing address :</span> <span id="di-Billing">Mahin Bhai</span></p><hr/>
          <p><span class="fw-bold">Terms :</span> <span id="di-Terms">Mahin Bhai</span></p><hr/>
          <p><span class="fw-bold">Company :</span> <span id="di-Company">Mahin Bhai</span></p><hr/>
          <p><span class="fw-bold">Notes :</span> <span id="di-Notes">Mahin Bhai</span></p><hr/>

      </div>
      </div>
  </div>

</div>

    </div>
    </div>
</div>
@*Supplier-Details all html tags ends*@
@section Scripts
{
   
    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsVoucherReport.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/luxon/2.3.0/luxon.min.js"></script>

    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>
    @* <script src="path-to-star-rating.js"></script> *@

    <script>
        
        var pageSize = 5;
        $(document).ready(function () {
            salesGear();
            PaymentGear();
            CustomerGear();
            ProductGear();      
        });

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetExpenseAccount", "Sales")',
            datatype: "Json",
            success: function (data) {
                $('#Consumption').empty();

                $('#Consumption').append('<option value="" selected>Select an account</option>');
                $.each(data, function (index, value) {
                    $('#Consumption').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                });
            }
        });
        

         function customCheckBoxFormatter(cell, formatterParams, onRendered) {
            return '<input type="checkbox" class="custom-checkbox">';
        }

         function customDetailsButtonFormatter(cell, formatterParams, onRendered) {
               var icon = '<i class="fas fa-plus btn-details-icon"></i>';
               return icon;
         }

        var PaymentGlobalFields = [
                { title: "", field: "CheckBox1", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true, width: 50 },
                { title: "No.", field: "TransactionCode",vertAlign: "middle", visible: true,
                    formatter: function(cell, formatterParams, onRendered) {
                        return "<strong>" + cell.getValue() + "</strong>";
                    },
                    // cellClick: function (e, cell) {
                    // RedirectToViewTransaction(cell.getRow().getData());
                    // } 
                        cellClick: function (e, cell) {
                        openOffcanvas1(cell.getRow().getData());
                    } 
                },
                { title: "Name", field: "CustomerName1",vertAlign: "middle", visible: true,
                    // cellClick: function (e, cell) {
                    // RedirectToViewTransaction(cell.getRow().getData());
                    // }   
                        cellClick: function (e, cell) {
                            openOffcanvas1(cell.getRow().getData());
                        } 
                },
                { title: "Description", field: "Description1",vertAlign: "middle",hozAlign: "left",visible: true, 
                    // cellClick: function (e, cell) {
                    // RedirectToViewTransaction(cell.getRow().getData());
                    // } 
                        cellClick: function (e, cell) {
                        openOffcanvas1(cell.getRow().getData());
                    } 
                },
                {
                    title: "Date",
                    field: "InputDate",
                    vertAlign: "middle",
                    hozAlign: "center", 
                    visible: true,
                    width: "10%", cssClass: "text-center",
                    formatter: function (cell, formatterParams, onRendered) {
                        var date = new Date(cell.getValue());
                        var day = date.getDate();
                        var monthNames = [
                            "Jan", "Feb", "Mar",
                            "Apr", "May", "Jun",
                            "Jul", "Aug", "Sep",
                            "Oct", "Nov", "Dec"
                        ];
                        var monthIndex = date.getMonth();
                        var year = date.getFullYear().toString().substr(-2); // Extract last 2 digits of year

                        return day + '-' + monthNames[monthIndex] + '-' + year;
                    }, 
                    // cellClick: function (e, cell) {
                    // RedirectToViewTransaction(cell.getRow().getData());
                    // } 
                        cellClick: function (e, cell) {
                            openOffcanvas1(cell.getRow().getData());
                        } 
                },
                { title: "Amount", field: "TransactionAmount",vertAlign: "middle",hozAlign: "right", visible: true,
                    formatter: function(cell, formatterParams, onRendered) {
                        var formattedNumber = cell.getValue().toLocaleString();

                        return "<div style='text-align:right'>" + formattedNumber + "</div>";
                    },
                    // cellClick: function (e, cell) {
                    // RedirectToViewTransaction(cell.getRow().getData());
                    // } 
                        cellClick: function (e, cell) {
                            openOffcanvas1(cell.getRow().getData());
                        } 
                },
                { title: "Payment", field: "DebitAccountName",vertAlign: "middle",hozAlign: "left", visible: true,
                    // cellClick: function (e, cell) {
                    // RedirectToViewTransaction(cell.getRow().getData());
                    // } 
                        cellClick: function (e, cell) {
                            openOffcanvas1(cell.getRow().getData());
                        } 
                },
                { title: "Status", field: "isPost",vertAlign: "middle",hozAlign: "center", visible: true,
                    cellClick: function (e, cell) {
                    RedirectToViewTransaction(cell.getRow().getData());
                    },
                        formatter: function(cell, formatterParams, onRendered) {
                        var value = cell.getValue();
                        if (!value) {                                     
                            return '<span style="color: red;">Not Posted</span>';
                        } else {                                     
                            return '<span style="color: #06d906;">Posted</span>';
                        }
                        }
                },
                { title: "App. Stage",field: "ApprovalStage", headerHozAlign: "left", width:130,vertAlign:"middle",visible: true, hozAlign: "left" },
                {
                    title: "Actions", field: "button1", headerHozAlign: "center",vertAlign: "middle", headerSort: false,visible: true, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                        var data = cell.getData();
                        console.log("see data::", data);
                        //var myUrlGet = `editAccountHead(${data.Id})`;
                        var myUrlGet = `@Url.Action("EditReceivePaymentQB", "Sales")?id=${data.Id}`;
                        var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                        var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;
                        var transactionViewUrl = '@Url.Action("ViewReceivePaymentQB", "Sales")?id=' + data.Id;
                        var transactionReportViewUrl = '@Url.Action("TransactionVoucherViewReport", "Admin")?TransactionId=' + data.Id;
                        //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                        var inActive = `setInactiveUrl(${data.Id}) `
                        var active = `setActiveUrl(${data.Id}) `

                        var printHtml = `
                                                    <a href='${transactionReportViewUrl}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                <i class='bi bi-pencil-square pe-1'></i> <span>Print</span>  <br />
                                            </a>
                                                    <div class='dropdown-divider m-0'></div>
                                        `;

                        var ReportViewHtml = `
                                            <a href='${viewUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                                <i class='bi bi-pencil-square pe-1'></i> <span>View</span>  <br />
                                            </a>
                                                    <div class='dropdown-divider m-0'></div>
                                        `;
                        var editHtml = `
                                            <a href='${myUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                                <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                            </a>
                                                    <div class='dropdown-divider m-0'></div>
                                        `;

                        var viewHtml = `
                                                    <a href='${transactionViewUrl}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                    </a>
                                                              
                                        `;

                        var deleteHtml;
                        if (data.IsDelete == 0) {
                            deleteHtml = `
                                    <a onclick="setDeleteUrlForPayment(${data.Id});" class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                            </a>
                        `;
                        }

                        var statusDependentHtml = data.isPost ? viewHtml : printHtml + editHtml + deleteHtml;

                        var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")?id=${data.Id}`;
                        var html = `
                                            <div class='dropdown ms-1'>

                                                                        <a href='${transactionViewUrl}' class='text-decoration-none  ms-3 mt-1'>
                                                        View Payment
                                                    </a>
                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                    ${statusDependentHtml}

                                                </ul>
                                            </div>
                                        `;

                        return html;
                    },
                    visible: true, cellClick: function (e, cell) {
                        // Add a custom class to the cell when it's clicked
                        cell.getElement().classList.add('active-cell');
                    },
                },

            ]

            var CustomerglobalFields = [
                        { title: "", field: "CheckBoxs", headerHozAlign: "left",  headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true, width: 50},
                        { title: "Name", field: "CustomerNames", vertAlign: "middle",visible: true, cssClass: "text-center" ,
                            formatter: function(cell, formatterParams, onRendered) {
                            return "<strong>" + cell.getValue() + "</strong>";
                        },
                        cellClick: function (e, cell) {
                                console.log(cell.getData())
                                GetCustomerDetails(cell.getData().Id);
                            } },
                {
                    title: "Code", field: "CustomerCode", vertAlign: "middle", cssClass: "text-center", visible: true, hozAlign: "center",

                    cellClick: function (e, cell) {
                        console.log(cell.getData())
                        GetCustomerDetails(cell.getData().Id);
                    }
                },
                        { title: "Company", field: "CompanyName", vertAlign: "middle",visible: true, hozAlign: "left",cellClick: function (e, cell) {
                                    console.log(cell.getData());
                                GetCustomerDetails(cell.getData().Id);
                            } },
                        { title: "Phone", field: "Phone", vertAlign: "middle",  hozAlign: "right",visible: true, cssClass: "text-center" },
                        { title: "Open Balance", field: "ClBalance", vertAlign: "middle",visible: true,  hozAlign:"right",
                            formatter: function(cell, formatterParams, onRendered) {
                                var formattedNumber = cell.getValue().toLocaleString();

                                return "<div style='text-align:right'>" + formattedNumber + "</div>";
                            }, 
                        },
                        { title: "Currency", field: "Currency", vertAlign: "middle",  hozAlign: "center",visible: true, cssClass: "text-center" },
                        {
                            title: "Actions", field: "buttons", headerSort: false, hozAlign: "right",visible: true, resizable: false, formatter: function (cell, formatterParams, onRendered) {
                                var data = cell.getData();
                                var openBalance = parseFloat(data.OpBalance);  // Remove non-numeric characters and convert to float

                                // Check if open balance is greater than 0
                                var showReceivePayment = openBalance > 0;
                                console.log("see data::", data);
                                //var myUrlGet = `editAccountHead(${data.Id})`;
                                var myUrlGet = `@Url.Action("EditCustomer", "Sales")?CustomerId=${data.Id}`;
                                    var Edit = `editCustomer(${data.Id})`;
                                var Delete = `setDeleteUrl(${data.Id})`;
                                var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                                var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;
                                var myUrldelete = '@Url.Action("DeleteCustomer", "Sales")?customerId=' + data.Id;

                                //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                                var inActive = `setInactiveUrl(${data.Id}) `
                                var active = `setActiveUrl(${data.Id}) `

                                var printHtml = `
                                            <a href='${myUrlprint}' class='text-decoration-none text-black ms-3 mt-1'>
                                                <i class='bi bi-pencil-square pe-1'></i> <span>Print</span>  <br />
                                            </a>
                                                    <div class='dropdown-divider m-0'></div>
                                        `;

                                var editHtml = `
                                                            <a onclick='${Edit}'  href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                            </a>
                                                                    <div class='dropdown-divider m-0'></div>
                                                        `;
                                var deleteHtml = `
                                                            <a onclick='${Delete}' href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                <i class='bi bi-trash3'></i> <span>Delete</span>  <br />
                                                            </a>

                                                        `;

                                var viewHtml = `
                                                                    <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                                    <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                                    </a>

                                                        `;

                                var deleteHtmlAbc;
                                if (data.IsDelete == 0) {
                                    deleteHtml = `
                                                                            <a class='text-decoration-none text-black ms-3 mt-1' href='${myUrldelete}' id='InActive'>
                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                            </a>
                                        `;
                                }

                            //var statusDependentHtml = data.isPosted ? viewHtml : printHtml + editHtml + deleteHtml;
                                var statusDependentHtml =  editHtml + deleteHtml;
                            var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")`;
                            var createInvoice = `@Url.Action("AddInvoiceQB", "Sales")`;
                            if (showReceivePayment)
                            {
                                var html = `
                                            <div class='dropdown ms-1'>

                                                                <a href='${paymentGet}' class='text-decoration-none  ms-3 mt-1'>
                                                        Receive Payment
                                                    </a>
                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                    ${statusDependentHtml}

                                                </ul>
                                            </div>
                                        `;

                                return html;
                            }
                            else
                            {
                                var html = `
                                            <div class='dropdown ms-1'>

                                                                        <a href='${createInvoice}' class='text-decoration-none  ms-3 mt-1'>
                                                        Create Invoice
                                                    </a>
                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                    ${statusDependentHtml}

                                                </ul>
                                            </div>
                                        `;

                                                return html;
                                            }

                                },
                            visible: true, cellClick: function (e, cell) {
                                // Add a custom class to the cell when it's clicked
                                cell.getElement().classList.add('active-cell');
                            },
                        },

            ]


          var globalFields1 = [
                        { title: "", field: "CheckBox", headerHozAlign: "left", headerSort: false, formatter: customCheckBoxFormatter, visible: true, width: 50 },
                         {
                             title: "Details", field: "ButtonDetails1", width: 70, headerHozAlign: "center", hozAlign: "center",vertAlign: "middle", formatter: customDetailsButtonFormatter, headerSort: false, visible: true
                         },                        
                         {
                             title: "Due Date",
                             field: "DueDate",
                             visible: false,
                             vertAlign: "middle",
                             width: "10%", cssClass: "text-center",
                             formatter: function (cell, formatterParams, onRendered) {
                                 var date = new Date(cell.getValue());
                                 var day = date.getDate();
                                 var monthNames = [
                                     "Jan", "Feb", "Mar",
                                     "Apr", "May", "Jun",
                                     "Jul", "Aug", "Sep",
                                     "Oct", "Nov", "Dec"
                                 ];
                                 var monthIndex = date.getMonth();
                                 var year = date.getFullYear().toString().substr(-2); // Extract last 2 digits of year

                                 return day + '-' + monthNames[monthIndex] + '-' + year;
                             },
                              cellClick: function (e, cell) {
                                 openOffcanvas(cell.getRow().getData());
                             }
                         },                        
                        { title: "NO.", field: "SaleCode", hozAlign: "left",visible: true,  vertAlign: "middle",
                           formatter: function(cell, formatterParams, onRendered) {
                                return "<strong>" + cell.getValue() + "</strong>";
                            },
                            cellClick: function (e, cell) {
                                    openOffcanvas(cell.getRow().getData());
                                }
                        },
                        {
                            title: "Date",
                            field: "SalesDate",
                            vertAlign: "middle",
                            visible: true,
                            width: "10%", cssClass: "text-center",
                            formatter: function (cell, formatterParams, onRendered) {
                                var date = new Date(cell.getValue());
                                var day = date.getDate();
                                var monthNames = [
                                    "Jan", "Feb", "Mar",
                                    "Apr", "May", "Jun",
                                    "Jul", "Aug", "Sep",
                                    "Oct", "Nov", "Dec"
                                ];
                                var monthIndex = date.getMonth();
                                var year = date.getFullYear().toString().substr(-2); // Extract last 2 digits of year

                                return day + '-' + monthNames[monthIndex] + '-' + year;
                            },
                             cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            }
                        },
                        {
                            title: "Type", field: "DocType", hozAlign: "left",visible: true, vertAlign: "middle",
                            cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            } 
                        },
                        { title: "Customer", field: "CustomerName",  hozAlign: "left",visible: true,vertAlign: "middle",
                            cellClick: function (e, cell) {
                                    openOffcanvas(cell.getRow().getData());
                                }
                        },
                        { title: "Amount", field: "Total", hozAlign: "right",vertAlign: "middle",visible: true,width:130,
                            formatter: function(cell, formatterParams, onRendered) {
                                var formattedNumber = cell.getValue().toLocaleString();

                                return "<div style='text-align:right'>" + formattedNumber + "</div>";
                            },
                            cellClick: function (e, cell) {
                                    openOffcanvas(cell.getRow().getData());
                                }
                        },
                        { title: "Paid Amount", field: "PaidAmount", hozAlign: "right",vertAlign: "middle",width:130, visible: false,
                            formatter: function(cell, formatterParams, onRendered) {
                                var formattedNumber = cell.getValue().toLocaleString();

                                return "<div style='text-align:right'>" + formattedNumber + "</div>";
                            },
                            cellClick: function (e, cell) {
                                    openOffcanvas(cell.getRow().getData());
                                }
                        },
                        { title: "Status", field: "StatusRemarks", cssClass: "text-center",visible: true,  vertAlign: "middle",
                            cellClick: function (e, cell) {
                                    openOffcanvas(cell.getRow().getData());
                                },
                            formatter: function(cell, formatterParams, onRendered) {
                                var status = cell.getValue();
                                var rowData = cell.getRow().getData(); 
                                var content = status;

                                if (status === "Paid" || status ==="Applied") {
                                    //content += '<span class="checkmark"><i class="bi bi-check-circle-fill" style="color: #2ca01c; margin-left: 4px;"></span>';
                                    content = '<span class="checkmark"><i class="bi bi-check-circle-fill" style="color: #2ca01c; margin-right: 4px;"></i></span>' + content;
                                }

                            if (status && status.indexOf("Overdue") !== -1) {
                                    //content += '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #ffbf00; margin-left: 4px;"></span>';
                                    content = '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #ffbf00; margin-right: 4px;"></i></span>' + content;

                                }
                                if (status === "Rejected") {
                                    content = '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #b80000; margin-right: 4px;"></i></span>' + content;

                                }

                                return content;
                            },
                        },
                        { title: "App. Stage",field: "ApprovalStage1", headerHozAlign: "left", width:130,visible: true,vertAlign:"middle", hozAlign: "left" },
                        {
                            title: "Actions", field: "button", headerHozAlign: "center",vertAlign: "middle", headerSort: false, hozAlign: "right",visible: true, resizable: false, formatter: function (cell, formatterParams, onRendered) {
                                var data = cell.getData();
                                console.log("see data::", data);
                                var docType = data.DocType || '';
                                var myUrlGetforInvoice = `@Url.Action("EditInvoice", "Sales")?id=${data.Id}&type=${docType}`;
                                var myUrlGetforCreditNote = myUrlGetforInvoice;
                                //var myUrlGetforMakePayment = `@Url.Action("EditReceivePaymentQB", "Sales")?id=${data.Id}`;
                                var myUrlGetforEstimate = myUrlGetforInvoice;
                                var myUrlGetforSalesOrder = `@Url.Action("EditSalesOrder", "Sales")?id=${data.Id}`;
                                var myUrlGetforSalesReceipt = myUrlGetforInvoice;
                                var myUrlGetforDelayedCharge = myUrlGetforInvoice;
                                var myUrlGetforStockCount = `@Url.Action("EditStockCount", "Sales")?id=${data.Id}`;
                                var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                                var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;

                                var myUrlPdf = '@Url.Action("CustomFormStylePreview", "Admin")?type=RunningSalesReport&id=' + data.Id;

                                //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                                var inActive = `setInactiveUrl(${data.Id}) `
                                var active = `setActiveUrl(${data.Id}) `

                                var previewPdf = `
                                               <a href='${myUrlPdf}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                   <i class='bi bi-eye pe-1'></i> <span>Preview PDF</span>  <br />
                                               </a>
                                                       <div class='dropdown-divider m-0'></div>
                                           `;
                                var printHtml = `
                                               <a href='${myUrlprint}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                   <i class='bi bi-printer pe-1'></i> <span>Print</span>  <br />
                                               </a>
                                                       <div class='dropdown-divider m-0'></div>
                                           `;

                                var ReportViewHtml = `
                                                       <a href='${viewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                   <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                               </a>
                                                       <div class='dropdown-divider m-0'></div>
                                           `;

                                var editHtml;

                                if (data.DocType == 'Invoice' || data.DocType == 'Sales') {
                                    editHtml = `
                                                               <a href='${myUrlGetforInvoice}' class='text-decoration-none text-black ms-3 mt-1'>
                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                       </a>
                                                               <div class='dropdown-divider m-0'></div>
                                                   `;
                                }
                                if (data.DocType == 'Credit Note') {
                                    editHtml = `
                                                                               <a href='${myUrlGetforCreditNote}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                               </a>
                                                                       <div class='dropdown-divider m-0'></div>
                                                           `;
                                }
                                if (data.DocType == 'Estimate') {
                                    editHtml = `
                                                                                               <a href='${myUrlGetforEstimate}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                                }
                                if (data.DocType == 'Issue') {
                                    editHtml = `
                                                                                               <a href='${myUrlGetforEstimate}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                                }
                                if (data.DocType == 'Stock Count') {
                                    editHtml = `
                                                                                                       <a href='${myUrlGetforStockCount}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                                }
                                if (data.DocType == 'Sales order') {
                                    editHtml = `
                                                                                                       <a href='${myUrlGetforSalesOrder}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                                }
                                if (data.DocType == 'Sales receipt') {
                                    editHtml = `
                                                                                                               <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                               </a>
                                                                                       <div class='dropdown-divider m-0'></div>
                                                                           `;
                                }
                                if (data.DocType == 'Delayed Charge') {
                                    editHtml = `
                                                                                                                <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                                       </a>
                                                                                               <div class='dropdown-divider m-0'></div>
                                                                                   `;
                                }

                                var viewHtml = `
                                                       <a href='${viewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                       <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                      </a>

                                           `;

                                var deleteHtml;
                                if (data.IsDelete == 0) {
                                    deleteHtml = `
                                <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                    <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                </a>
                            `;
                                }

                                var statusDependentHtml = data.isPosted ? previewPdf + printHtml + viewHtml : previewPdf + printHtml + ReportViewHtml + editHtml + deleteHtml;
                                var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")?id=${data.Id}`;
                                if (data.DocType == 'Invoice' || data.DocType == 'Sales') {
                                    var html = `
                                                      <div class='dropdown ms-1'>

                                                                          <a href='${paymentGet}' class='text-decoration-none  ms-3 mt-1'>
                                                                   Receive Payment
                                                               </a>
                                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                         <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                              ${statusDependentHtml}

                                                          </ul>
                                                      </div>
                                                  `;

                                    return html;
                                }
                                else
                                {
                                    if (data.DocType == 'Credit Note') {
                                        var html = `
                                                              <div class='dropdown ms-1'>

                                                                                              <a href='${myUrlGetforCreditNote}' class='text-decoration-none  ms-3 mt-1'>
                                                                           Edit
                                                                       </a>
                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                      ${statusDependentHtml}

                                                                  </ul>
                                                              </div>
                                                          `;

                                        return html;
                                    }
                                    else {
                                        if (data.DocType == 'Estimate') {
                                            var html = `
                                                                      <div class='dropdown ms-1'>

                                                                                                      <a href='${myUrlGetforEstimate}' class='text-decoration-none  ms-3 mt-1'>
                                                                                   Edit
                                                                               </a>
                                                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                         <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                              ${statusDependentHtml}

                                                                          </ul>
                                                                      </div>
                                                                  `;

                                            return html;
                                        }
                                        if (data.DocType == 'Stock Count') {
                                            var html = `
                                                                      <div class='dropdown ms-1'>

                                                                                                              <a href='${myUrlGetforStockCount}' class='text-decoration-none  ms-3 mt-1'>
                                                                                   Edit
                                                                               </a>
                                                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                         <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                              ${statusDependentHtml}

                                                                          </ul>
                                                                      </div>
                                                                  `;

                                            return html;
                                        }
                                        if (data.DocType == 'Sales order') {
                                            var html = `
                                                                              <div class='dropdown ms-1'>

                                                                                                                      <a href='${myUrlGetforSalesOrder}' class='text-decoration-none  ms-3 mt-1'>
                                                                                           Edit
                                                                                       </a>
                                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                      ${statusDependentHtml}

                                                                                  </ul>
                                                                              </div>
                                                                          `;

                                            return html;
                                        }
                                        if (data.DocType == 'Sales receipt') {
                                            var html = `
                                                                                      <div class='dropdown ms-1'>

                                                                                                                              <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none  ms-3 mt-1'>
                                                                                                   Edit
                                                                                               </a>
                                                                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                         <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                              ${statusDependentHtml}

                                                                                          </ul>
                                                                                      </div>
                                                                                  `;

                                            return html;
                                        }
                                        if (data.DocType == 'Delayed Charge') {
                                            var html = `
                                                                                              <div class='dropdown ms-1'>

                                                                                                                                              <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none  ms-3 mt-1'>
                                                                                                           Edit
                                                                                                       </a>
                                                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                                      ${statusDependentHtml}

                                                                                                  </ul>
                                                                                              </div>
                                                                                          `;

                                            return html;
                                        }
                                        if (data.DocType == 'Issue') {
                                            var html = `
                                                                                              <div class='dropdown ms-1'>

                                                                                                                                              <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none  ms-3 mt-1'>
                                                                                                           Edit
                                                                                                       </a>
                                                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                                      ${statusDependentHtml}

                                                                                                  </ul>
                                                                                              </div>
                                                                                          `;

                                            return html;
                                        }

                                    }

                                }
                            },
                            visible: true, cellClick: function (e, cell) {
                                // Add a custom class to the cell when it's clicked
                                cell.getElement().classList.add('active-cell');
                            },
                        },

          ]


           var globalFields = [        
            { title: "SLNo", field: "Id",vertAlign:"middle", visible: false },
            { title: "ProductId", field: "Id", visible: false },
            { title: "Name", field: "Name",vertAlign:"middle", headerFilter: "input",visible: true, headerFilterLiveFilter: false,
               formatter: function(cell, formatterParams, onRendered) {
                    return "<strong>" + cell.getValue() + "</strong>";
               }
            },            
            {
                title: "", field: "ButtonDetails2", width: 70, headerHozAlign: "center", hozAlign: "center",vertAlign: "middle", formatter: customDetailsButtonFormatter, headerSort: false, visible: false
            },
            { title: "Local Name", field: "LocalName", visible: false, searchable: true },
            { title: "Code", field: "Code", hozAlign: "left",vertAlign:"middle",visible: true,headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Model", field: "ModelName", visible: false, searchable: true },

            { title: "Color", field: "ColorName", searchable: true, visible: true, headerFilter: "input", headerFilterLiveFilter: false }, //, "visible":IsColorName
            { title: "Size", field: "SizeName", visible: true, searchable: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Category", field: "CategoryName",vertAlign:"middle",visible: true,headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Descp", field: "Description", vertAlign: "middle", searchable: true, visible: false, headerFilter: "input", headerFilterLiveFilter: false },

            { title: "Unit", field: "UnitName", visible: false, searchable: true },
            { title: "Brand", field: "BrandName", searchable: true,visible: false },   //  headerFilter: "input"       
            {
                title: "Avg. Cost", field: "AvgCost", visible: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    if (data != null) {
                        var output = "";
                        var totalstock = 0;
                        var totalcostingvalue = 0;
                        var totalsalesvalue = 0;

                        for (var i = 0; i < data.length; i++) {
                            totalstock += data[i].CurrentStock;
                            totalcostingvalue += data[i].CostingValue;
                            totalsalesvalue += data[i].SalesValue;
                        }

                        if (totalstock > 0) {
                            output = (totalcostingvalue / totalstock).toFixed(2);
                        }

                        return output;
                    }
                    return null;
                }
            },
            { title: "Supplier", field: "SupplierName", visible: false, searchable: true },
            {
                title: "Cost", field: "CostPrice", hozAlign: "right", searchable: true,visible: true, vertAlign: "middle", headerFilter: "input", headerFilterLiveFilter: false, visible: @IsStoreKeeper !== 1,
                formatter: function(cell, formatterParams, onRendered) {
                    var formattedNumber = cell.getValue().toLocaleString();
                    return "<div style='text-align:right'>" + formattedNumber + "</div>";
                },
            },
            {
                title: "Unit Price", field: "Price", hozAlign: "right", searchable: true, visible: false, vertAlign: "middle", headerFilter: "input", headerFilterLiveFilter: false,
                formatter: function(cell, formatterParams, onRendered) {
                    var formattedNumber = cell.getValue().toLocaleString();
                    return "<div style='text-align:right'>" + formattedNumber + "</div>";
                },
            },
            { title: "Quantity", field: "RunTimeLiveStock", searchable: true,hozAlign: "right",vertAlign:"middle", visible: true,headerFilter: "input", headerFilterLiveFilter: false },
            {
                title: "Stock", field: "WarehouseList", hozAlign: "right", visible: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    if (data != null) {
                        var totalstock = 0;

                        for (var i = 0; i < data.length; i++) {
                            totalstock += data[i].CurrentStock;
                        }

                        return totalstock;
                    }
                    return null;
                }
            },
            {
                title: "CostingValue", field: "CostingValue", visible: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    if (data != null) {
                        var totalcostingvalue = 0;

                        for (var i = 0; i < data.length; i++) {
                            totalcostingvalue += data[i].CostingValue;
                        }

                        return totalcostingvalue;
                    }
                    return null;
                }
            },
            {
                title: "SalesValue", field: "SalesValue", visible: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    if (data != null) {
                        var totalsalesvalue = 0;

                        for (var i = 0; i < data.length; i++) {
                            totalsalesvalue += data[i].SalesValue;
                        }

                        return totalsalesvalue;
                    }
                    return null;
                }
            },
            {
                title: "Curr. Stock Value", field: "CurrentStock", visible: false, formatter: function (cell, formatterParams, onRendered) {   //Curr. Stock With Cost & Sales Value
                    var data = cell.getData();
                    if (data != null) {
                        var output = "";
                        var totalstock = 0;
                        var totalcostingvalue = 0;
                        var totalsalesvalue = 0;

                        for (var i = 0; i < data.length; i++) {
                            output += data[i].WhShortName + ' : ' + data[i].CurrentStock + ' : ' + data[i].CostingValue.toFixed(2) + ' : ' + data[i].SalesValue;
                            totalstock += parseFloat(data[i].CurrentStock.toFixed(2));
                            totalcostingvalue += parseFloat(data[i].CostingValue.toFixed(2));
                            totalsalesvalue += parseFloat(data[i].SalesValue.toFixed(2));

                            if (i < data.length - 1) {
                                output += "  ";
                            }
                        }

                        if (totalstock > 0) {
                            if (data.length > 1) {
                                output += '<hr class="solid"> <p style="font-weight: bold;"> TOTAL : ' + totalstock + '  : ' + totalcostingvalue + '  : ' + totalsalesvalue + ' </p>';
                            }
                        }

                        return output;
                    }
                    return null;
                }
            },
            {
                title: "ROL 1 / 2 / 3", field: "ROL123", visible: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    if (data != null) {
                        var output = "";
                        var totalstock = 0.00;

                        for (var i = 0; i < data.length; i++) {
                            totalstock += parseFloat(data[i].CurrentStock.toFixed(2));
                        }

                        if (data.ROL > 0) {
                            if (totalstock < data.ROL) {
                                output += '<p style="font-weight: bold; color:red"> Crossed ROL : ' + data.ROL + '</p>';
                            } else {
                                output += '<p style="font-weight: bold; color:green">Not Crossed ROL : ' + data.ROL + '</p>';
                            }
                        }

                        if (data.ROLTwo > 0) {
                            if (totalstock < data.ROLTwo) {
                                output += '<hr class="solid"> <p style="font-weight: bold; color:#ff5400"> Crossed ROL 2 : ' + data.ROLTwo + '</p>';
                            } else {
                                output += '<hr class="solid"> <p style="font-weight: bold; color:green">Not Crossed ROL 2: ' + data.ROLTwo + '</p>';
                            }
                        }

                        if (data.ROLThree > 0) {
                            if (totalstock < data.ROLThree) {
                                output += '<hr class="solid"> <p style="font-weight: bold;"> Crossed ROL 3 : ' + data.ROLThree + '</p>';
                            } else {
                                output += '<hr class="solid"> <p style="font-weight: bold; color:green"> Not Crossed ROL 3: ' + data.ROLThree + '</p>';
                            }

                        }
                        return output;
                    }
                    return null;
                }
            },
            // {
            //     title: "Pur. / Rcvd. Qty", visible: false, formatter: function (cell, formatterParams, onRendered) {   //Total Pur. / Rcvd. Qty
            //         var data = cell.getData();
            //         var buttons = "";
            //         if (data.TotalPurchase > 0) {
            //             buttons += 'Qty : ' + (data.TotalPurchase - data.TotalPurchaseReturn) + ' ' + data.UnitName + '<br>';
            //             buttons += data.LastPurchaseDate + '<br>';
            //             buttons += data.LastPurchaseSupplier;
            //         }
            //         return buttons;
            //     }
            // },
            // {
            //     title: "Sales / Issue Qty", visible: false, formatter: function (cell, formatterParams, onRendered) {  //Total Sales / Issue Qty
            //         var data = cell.getData();
            //         var buttons = "";
            //         if (data.TotalSales > 0 || data.TotalIssue > 0) {
            //             buttons += 'Qty : ' + (data.TotalSales + data.TotalIssue + data.TotalDamage - data.TotalSalesReturn) + ' ' + data.UnitName + '<br>';
            //             buttons += data.LastSalesDate + ' ' + data.LastIssueDate + '<br>';
            //             buttons += data.LastSalesCustomer;
            //         }
            //         return buttons;
            //     }
            // },
            {
                title: "Image", field: "ImagePath", visible: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    return '<img src="..' + data + '" class="img-thumbnail" width="80px" onerror=this.onerror=null;this.src="../Content/MemberImages/0.png">';
                }
            },
            {
                title: "Action", field: "ProAction", visible: true,
                formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    var myUrledit = '@Url.Action("EditProduct", "Admin")?productId=' + data.Id;
                    var myUrlcopy = '@Url.Action("CopyProduct", "Admin")?productId=' + data.Id;
                    // var myUrldelete = '@Url.Action("DeleteProduct", "Sales")?productId=' + data.Id;
                    var myUrldelete = `setDeleteProductUrl(${data.Id}) `;
                    var message = `return confirm('Are you sure you want to Remove the Product Information ?')`;

                    var editButton = document.createElement('button');
                    editButton.className = 'btn btn-sm dropdown-toggle dropdown-toggle-split shadow-none';
                    editButton.dataset.bsToggle = 'dropdown';
                    editButton.style.marginLeft = "0px";
                    //editButton.innerHTML = 'View Product';
                    var spaceSpan = document.createElement('span');
                    spaceSpan.style.marginRight = '7px';
                    var textSpan = document.createElement('span');
                    textSpan.style.color = 'blue'; 
                    textSpan.appendChild(document.createTextNode('View Product'));
                    editButton.appendChild(textSpan);
                    editButton.appendChild(spaceSpan);

                    var dropdown = document.createElement('ul');
                    dropdown.className = 'dropdown-menu item-menu';
                    var editItem = document.createElement('li');
                    editItem.classList.add("hoverable");
                    editItem.style.paddingLeft = "20px";
                    editItem.innerHTML = `<i class="bi bi-pencil-square"></i> Edit`;
                    editItem.addEventListener('click', function () {
                        // Call your function with the data.Id parameter
                            populateProductData(data.Id);
                    });

                    var dividerItem = document.createElement('li');
                    dividerItem.className = 'dropdown-divider';

                    var deleteItem = document.createElement('li');
                    deleteItem.innerHTML = `<a  onclick="${myUrldelete}" class="dropdown-item" target="_blank"><i class="bi bi-x"></i> Delete</a>`;

                    dropdown.appendChild(editItem);
                    dropdown.appendChild(dividerItem); 
                    dropdown.appendChild(deleteItem);

                    var buttonGroup = document.createElement('div');
                    buttonGroup.className = 'btn-group';
                    buttonGroup.appendChild(editButton);
                    buttonGroup.appendChild(dropdown);

                    return buttonGroup;
                },

                visible: true, cellClick: function (e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                },
            }
        ]


        $(document).ready(function() {

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetParentWarehouse", "Admin")',
                datatype: "Json",
                success: function (data) {

                    $.each(data, function (index, value) {
                        $('#ParentId').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                    });
                }
            });

            $('#opening_date').datepicker({
                dateFormat: 'dd-M-yy',
                todayHighlight: true,
                autoclose: true
            });
            // $('select').select2();
            $('#offcanvasRight').on('shown.bs.offcanvas', function() {
                if ($('#opening_date').val() === '') {
                    $('#opening_date').datepicker("setDate", new Date());
                }
            });
            $("#offcanvasRight .select2").select2({
                dropdownParent: $("#offcanvasRight")
            });
            $("#offcanvasForProduct .select2").select2({
                dropdownParent: $("#offcanvasForProduct")
            });
        });

       $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-invoices-credits").on("click", function () {
                // Set the selected value of the dropdown to "Invoice"
                 $("#Status option:contains('Invoice')").prop('selected', true);
                 $("#Duration option:contains('All')").prop('selected', true);

                   var statusValue = $("#Status").val();
                   var durationValue = $("#Duration").val();
                   var customerId = $("#Customers").val();                  
                   var url = '@Url.Action("GetInvoiceList", "Sales")' + '?status=' + statusValue + '&duration=' + durationValue + '&customerId=' + customerId;
                   salesTable.setData(url);              

            });
       });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-invoices-credits1").on("click", function () {
                window.location.href = '@Url.Action("InvoiceList", "Sales", new { Type = "Sales" })';
            });
       });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-estimate1").on("click", function () {
                window.location.href = '@Url.Action("InvoiceList", "Sales", new { Type = "Sales" })';
            });
       });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-unbilled1").on("click", function () {
                window.location.href = '@Url.Action("InvoiceList", "Sales", new { Type = "Sales" })';
            });
       });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-overdue1").on("click", function () {
                window.location.href = '@Url.Action("InvoiceList", "Sales", new { Type = "Sales" })';
            });
       });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-recentlypaid1").on("click", function () {
                window.location.href = '@Url.Action("InvoiceList", "Sales", new { Type = "Sales" })';
            });
       });

       $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-overdue").on("click", function () {
                // Set the selected value of the dropdown to "Invoice"
                 $("#Status option:contains('Overdue')").prop('selected', true);
                 $("#Duration option:contains('All')").prop('selected', true);

                   var statusValue = $("#Status").val();
                   var durationValue = $("#Duration").val();
                   var customerId = $("#Customers").val();                  
                   var url = '@Url.Action("GetInvoiceList", "Sales")' + '?status=' + statusValue + '&duration=' + durationValue + '&customerId=' + customerId;
                   salesTable.setData(url);              

            });
       });
         document.getElementById('quantity-on-hand').addEventListener('blur', function() {
              var input = this;
              var value = parseFloat(input.value);

              if (isNaN(value) || value < 0) {
                  input.value = 0;
              }
          });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-unbilled").on("click", function () {
                // Set the selected value of the dropdown to "Invoice"
                 $("#Status option:contains('Sales receipt')").prop('selected', true);
                 $("#Duration option:contains('All')").prop('selected', true);

                   var statusValue = $("#Status").val();
                   var durationValue = $("#Duration").val();
                   var customerId = $("#Customers").val();                  
                   var url = '@Url.Action("GetInvoiceList", "Sales")' + '?status=' + statusValue + '&duration=' + durationValue + '&customerId=' + customerId;
                   salesTable.setData(url);              

            });
       });

       $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-estimate").on("click", function () {
                // Set the selected value of the dropdown to "Invoice"
                 $("#Status option:contains('Estimate')").prop('selected', true);
                 $("#Duration option:contains('All')").prop('selected', true);

                   var statusValue = $("#Status").val();
                   var durationValue = $("#Duration").val();
                   var customerId = $("#Customers").val();                  
                   var url = '@Url.Action("GetInvoiceList", "Sales")' + '?status=' + statusValue + '&duration=' + durationValue + '&customerId=' + customerId;
                   salesTable.setData(url);              

            });
       });

       $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#amount-recentlypaid").on("click", function () {
                // Set the selected value of the dropdown to "Invoice"
                 $("#Status option:contains('Recently Paid')").prop('selected', true);
                 $("#Duration option:contains('All')").prop('selected', true);

                   var statusValue = $("#Status").val();
                   var durationValue = $("#Duration").val();
                   var customerId = $("#Customers").val();                  
                   var url = '@Url.Action("GetInvoiceList", "Sales")' + '?status=' + statusValue + '&duration=' + durationValue + '&customerId=' + customerId;
                   salesTable.setData(url);              

            });
       });      

       // For Product Stock
        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#product-all-stock").on("click", function () {
                
                var stockCount = 1;             

                var url = '@Url.Action("GetProductList", "Admin")' + '?stockCount=' + stockCount;
                parentTable.setData(url);              

            });
       });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#product-available").on("click", function () {
                
                var stockCount = 2;               

                var url = '@Url.Action("GetProductList", "Admin")' + '?stockCount=' + stockCount;
                parentTable.setData(url);              

            });
       });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#product-low-stock").on("click", function () {
                
                var stockCount = 3;             

                var url = '@Url.Action("GetProductList", "Admin")' + '?stockCount=' + stockCount;
                parentTable.setData(url);              

            });
       });

        $(document).ready(function () {
            // Attach a click event handler to the amount-invoices-credits div
            $("#product-out-stock").on("click", function () {
                
                var stockCount = 4;               

                var url = '@Url.Action("GetProductList", "Admin")' + '?stockCount=' + stockCount;
                parentTable.setData(url);              

            });
       });
      // For Product Stock
      
       $(document).ready(function () {


            function formatDateToDDMMMYYYY(date) {
                var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    
                var day = date.getDate();
                var month = months[date.getMonth()];
                var year = date.getFullYear();

                // Pad day with leading zero if needed
                day = (day < 10) ? "0" + day : day;

                return day + "-" + month + "-" + year;
            }


             // Attach a change event listener to the dropdown
             $("#Status").change(function () {                                 
                  myFunction.call(this);
             });

             $("#Customers").change(function () {                                 
                  myFunction.call(this);
             });

             $("#Duration").change(function () {
                // Check if "Custom" is selected
                if ($(this).val() === "Custom") {
                    // Show the #CustomDate div
                    $(".CustomDate").show();
                      myFunction.call(this);
                } else {
                    // Hide the #CustomDate div
                    $(".CustomDate").hide();
                }
            });

              var inputElement = document.getElementById('daterange-btn2');
              var btnDec2Element = document.getElementById('btnDec2');
              var btnInc2Element = document.getElementById('btnInc2');

              // Add change event listener to the input
              inputElement.addEventListener('blur', function() {
                myFunction.call(this);
              });

              // Add click event listener to the buttons
              btnDec2Element.addEventListener('click', function() {
                myFunction.call(this);
              });

              btnInc2Element.addEventListener('click', function() {
                myFunction.call(this);
              });

            $('#daterange-btn2').on('apply.daterangepicker', function (ev, picker) {
                myFunction.call(this);
            });

          function myFunction() {
                // Get the selected value
                var durationValue = $("#Duration").val();
                var customerId = $("#Customers").val();
                var currentDateabc = new Date();

                // To extract only the date part (without the time component)
                var OnlyDate = formatDateToDDMMMYYYY(currentDateabc);               

                 let FromDateabc = OnlyDate;
                 let ToDateabc = OnlyDate;                

                 var selectedValue = $(this).val();   
                 if (durationValue == 'Custom')
                 {                  
                    FromDateabc = $(".FromDate").val();
                    ToDateabc = $(".ToDate").val();
                 }


                if (selectedValue === "9999") {
                    $("#Duration option:contains('All')").prop('selected', true);
                } 
                // else {                    
                //     $("#Duration option:contains('All')").prop('selected', false);
                // }

                var url = '@Url.Action("GetInvoiceList", "Sales")' + '?status=' + selectedValue + '&duration=' + durationValue + '&customerId=' + customerId + '&startDate=' + FromDateabc + '&endDate=' + ToDateabc;
                   salesTable.setData(url);   
         
            }

         });
                
           

        $('#feedbackModal .btn-close').on('click', function () {
            $('#feedbackModal').modal('hide');
        });
        document.addEventListener('DOMContentLoaded', function () {
            const feedbackForm = document.querySelector('#feedbackModal form');
            const submitButton = document.querySelector('#submitFeedback');

            feedbackForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const rating = document.querySelector('input[name="rating"]:checked').value;
                const feedback = document.querySelector('#feedback').value;

                console.log('Rating: ' + rating);
                console.log('Feedback: ' + feedback);

                // Close the modal (assuming you're using Bootstrap)
                const feedbackModal = new bootstrap.Modal(document.getElementById('feedbackModal'));
                feedbackModal.hide();
            });

            // Add an event listener for the "Submit Feedback" button click
            submitButton.addEventListener('click', function () {
                // Trigger the form submission
                feedbackForm.submit();
            });
        });

        function clearCustomerModalData() {
             $("#currency").val('');
             $("#paymentMethodId").val('');            
             $("#DeliveryOptions").val('');
             $("#Language").val('');
            $("#currency").removeClass("d-none");
            $("#currency_label").removeClass("d-none");

            var offcanvas = document.getElementById('offcanvasRight');
        
            var inputs = offcanvas.querySelectorAll('input');

            inputs.forEach(function (input) {
                input.value = '';
            });
            $("#customerSaveBtn").text('Save').addClass("w-20");
            $("#CustomerId").val(0);
            $("#opening_balance").val(0);
            var BtnSave = document.querySelector('#customerSaveBtn');
            $("#CustomerCodeValidation").html("");
            BtnSave.disabled = false;

            // const today = new Date();
            // const OpeningDate = document.getElementById('opening_date');

            // const formattedDate = today.toISOString().slice(0, 10);

            // OpeningDate.value = formattedDate;
        }

        $(document).ready(function () {
            // Handle "plus" button click
            $("#addCategoryBtn").on("click", function () {
                // Show the modal dialog to enter the new category name
                // You can use Bootstrap's modal or any other library you prefer

                // Example using Bootstrap modal:
                $("#categoryModal").modal("show");
                $("#newCategoryInput").focus();
            });

            // Handle the "Save" button click in the modal
            $("#saveCategoryBtn").on("click", function () {
                var newCategory = $("#newCategoryInput").val();

                if (newCategory.length > 1) {
                    // Send the new category data to the server using AJAX
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("AddCategory", "values")',
                        //url: "/values/AddCategory", // Replace "YourController" with the appropriate controller name
                        data: { categoryName: newCategory },
                        success: function (data) {
                            console.log("data:", data);
                            // Update the dropdown list with the new category
                            $("#CategoryIdForInventory").append('<option value="' + data.id + '">' + data.name + '</option>');
                            $("#CategoryIdForInventory").val(data.id); // Select the newly added category

                            // Close the modal dialog
                            $("#categoryModal").modal("hide");
                            toastr.success("Category Added Successfully");
                            $(".toast-success").css("background-color", "green");
                            $(".toast-success").css("color", "white");
                        },
                        error: function (error) {
                            console.log(error);
                            // Handle any errors that occur during the AJAX request
                        }
                    });
                }
                else {
                    toastr.error("Please Fill Up Category Information.");
                     $(".toast-error").css("background-color", "red");
                     $(".toast-error").css("color", "white");
                }
            });

            // Handle the "Close" button click in the modal
            document.getElementById("closeCategoryBtn").onclick = function () {               
                // Close the modal dialog
                $("#categoryModal").modal("hide");
            };

        });


        $(document).ready(function () {
            // Handle "plus" button click
            $("#addUnitBtn").on("click", function () {
                // Show the modal dialog to enter the new Unit name
                // You can use Bootstrap's modal or any other library you prefer

                // Example using Bootstrap modal:
                $("#unitModal").modal("show");
                $("#newUnitInput").focus();
            });

            $("#addLocationBtn").on("click", function () {
                
                $("#locationModal").modal("show");
                $("#LocationName").focus();
            });

            // Handle the "Save" button click in the modal
            $("#saveUnitBtn").on("click", function () {
                var newUnit = $("#newUnitInput").val();
                var newUnitShort = $("#newUnitShortInput").val();

                if (newUnit.length > 1) {
                    // Send the new Unit data to the server using AJAX
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("AddUnit", "values")',
                        //url: "/values/AddUnit", // Replace "YourController" with the appropriate controller name
                        data: { unitName: newUnit, unitShortName: newUnitShort },
                        success: function (data) {
                            // Update the dropdown list with the new Unit
                            $("#Unit").append('<option value="' + data.id + '">' + data.name + '</option>');
                            $("#Unit").val(data.id); // Select the newly added Unit

                            // Close the modal dialog
                            $("#unitModal").modal("hide");
                            toastr.success("Unit Added Successfully");
                            $(".toast-success").css("background-color", "green");
                            $(".toast-success").css("color", "white");
                        },
                        error: function (error) {
                            console.log(error);
                            // Handle any errors that occur during the AJAX request
                        }
                    });
                }
                else {
                    toastr.error("Please fill up Unit Information.")
                    $(".toast-error").css("background-color", "red");
                    $(".toast-error").css("color", "white");
                }


            });

            

            // Handle the "Close" button click in the modal
            document.getElementById("closeUnitBtn").onclick = function () {
                // Close the modal dialog
                $("#unitModal").modal("hide");
            };
            
            document.getElementById("closeLocationBtn").onclick = function () {
                // Close the modal dialog
                $("#locationModal").modal("hide");
            };
        });


        $("#submitFeedback").click(function () {
            var selectedRating = $("input[name='rating']:checked").val();
            var feedback = $("#feedback").val();

            if (selectedRating) {
                // A rating is selected, you can now use the 'selectedRating' variable
                console.log("Selected Rating:", selectedRating);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("InsertFeedback", "Sales")', 
                    type: 'POST', // or 'GET' depending on your controller method
                    data: {
                        rating: selectedRating,
                        feedback: feedback
                    },
                    success: function (response) {
                        // Handle the response from the server
                        console.log("Response from server:", response);
                        toastr.success(response.message, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle any errors that occur during the AJAX request
                        console.error("AJAX Error:", error);
                    }
                });
            } else {
                // No rating is selected
                console.log("No rating selected");
            }

            // You can also use the 'feedback' variable to send the feedback along with the rating.
            console.log("Feedback:", feedback);
        });
    </script>
    <script>
        $(document).ready(function () {
             //$("#CustomerSelect").select2();
            // $("#CategoryIdForInventory").select2();
            // $("#TaxId").select2();
            // $("#IncomeAccount").select2();
            // $("#Consumption").select2();
            // $("#PurchaseTaxId").select2();
            // $("#SupplierId").select2();
            // $("#AccIdInventory").select2();
             $("#CategoryId").select2();
            $("#BrandId").select2();
            $("#ModelId").select2();
            $("#WarehouseId").select2();
            $("#ROL").select2();
            $("#offcanvasForProduct .select2").select2({
                dropdownParent: $("#offcanvasForProduct")
            });
            //$("#BuyerGroupId").select2();
            ExecuteRecurrTransaction();
            // initTabulator();
            GetOverViewData();
            // Function to make the AJAX request
            function makeAjaxRequest() {
                var statusValue = $("#Status").val();
                var durationValue = $("#Duration").val();
                var customerId = $("#Customers").val();
                $.ajax({
                    url: '@Url.Action("GetInvoiceList", "Sales")', 
                    type: 'GET',
                    data: {
                        status: statusValue,
                        duration: durationValue,
                        customerId: customerId
                    },
                    success: function (response) {
                        if (response.Success === 1) {
                            console.log(response.data);
                            initTabulator();
                        } else {
                            console.error(response.ex);
                        }
                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            }

            function ExecuteRecurrTransaction() {
                $.ajax({
                    url: '@Url.Action("ExecuteRecurrTransaction", "Sales")', 
                    type: 'GET',
                    success: function (response) {
                        if (response.Success === 1) {
                            
                        } else {
                            console.error(response.ex);
                        }
                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            }
            
            function formatNumberWithCommas(number) {
            const parts = number.toFixed(2).split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            return parts.join(".");
          }

            function GetOverViewData() {
                $.ajax({
                    url: '@Url.Action("GetOverviewData", "Sales")',
                    type: 'GET',
                    success: function (response) {
                        if (response.Success === 1) {
                            var data = response.data[0];

                            $('#heading-amount-estimate').text('TK' + formatNumberWithCommas(data.EstimateAmount));
                            $('#label-amount-estimate').text(data.TotalEstimate + ' estimate').css({ 'font-size': '12px', 'font-weight': 'bold' });
                            let myDiv1 = document.getElementById('amount-estimate');
                            myDiv1.style.width = 10 + response.ratio[0]/2 + '%';

                            $('#heading-amount-unbilled').text('TK' + formatNumberWithCommas(data.UnbilledAmount));
                            $('#label-amount-unbilled').text(data.TotalUnbilled + ' Unbill income').css({ 'font-size': '12px', 'font-weight': 'bold' });
                            let myDiv2 = document.getElementById('amount-unbilled');
                            myDiv2.style.width = 10 + response.ratio[1]/2 + '%';

                            $('#heading-amount-overdue').text('TK' + formatNumberWithCommas(data.OverdueAmount));
                            $('#label-amount-overdue').text(data.TotalOverdue + ' overdue ').css({ 'font-size': '12px', 'font-weight': 'bold' });
                            let myDiv3 = document.getElementById('amount-overdue');
                            myDiv3.style.width = 10 + response.ratio[2]/2 + '%';

                            $('#heading-amount-invoices-credits').text('TK' + formatNumberWithCommas(data.InvoiceCreditsAmount));
                            $('#label-amount-invoices-credits').text(data.TotalInvoiceCredits + ' invoice, credits').css({ 'font-size': '12px', 'font-weight': 'bold', 'width': '150px' });
                            let myDiv4 = document.getElementById('amount-invoices-credits');
                            myDiv4.style.width = 9 +  response.ratio[3]/2 + '%';

                            $('#heading-amount-recentlypaid').text('TK' + formatNumberWithCommas(data.recentlyPaid));
                            $('#label-amount-recentlypaid').text(data.TotalrecentlyPaid + ' recently paid').css({ 'font-size': '12px', 'font-weight': 'bold', 'padding-left': '10px' });
                            let myDiv5 = document.getElementById('amount-recentlypaid');
                            myDiv5.style.width = 10 + response.ratio[4]/2 + '%';

                            initTabulator();
                        } else {
                            console.error(response.ex);
                        }
                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            }

            
            // Attach a change event handler to both select elements
            $("#Status, #Duration, #Customers").change(function () {
                //makeAjaxRequest();
                initTabulator();
            });
            $("#PaymentDuration, #PaymentCustomers").change(function () {
                loadPaymentDetails();
            });

            populateProductCategoryDiv();

            $(function () {
                $("#as-of-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy",
                      onSelect: function(dateText) {
                      $("#inventory-asofdate-validation").html(""); 
                   }
                });
                
            });

            if ('@ListType' === "Sales") {
                $("#Sales").addClass("active");
                $("#navCustomers").removeClass("active");
                $("#products-id").removeClass("active");
                $("#Payments").removeClass("active");

                $("#sales-view-id").removeClass("d-none");
                $("#customers-view-id").addClass("d-none");
                $("#products-view-id").addClass("d-none");
                $("#payments-view-id").addClass("d-none");
                $("#Customer-Details-view").addClass("d-none");
                makeAjaxRequest();
                GetOverViewData();
            }
            if ('@ListType' === "Customers") {
                $("#Sales").removeClass("active");
                $("#navCustomers").addClass("active");
                $("#products-id").removeClass("active");
                $("#Payments").removeClass("active");

                $("#sales-view-id").addClass("d-none");
                $("#customers-view-id").removeClass("d-none");
                $("#products-view-id").addClass("d-none");
                $("#payments-view-id").addClass("d-none");
                $("#Customer-Details-view").addClass("d-none");
                //loadCustomerDetails();
                CustomerGear();
                GetOverViewDataForCustomer();
            }
            if ('@ListType' === "Products") {
                $("#Sales").removeClass("active");
                $("#navCustomers").removeClass("active");
                $("#Products").addClass("active");
                $("#Payments").removeClass("active");

                $("#sales-view-id").addClass("d-none");
                $("#customers-view-id").addClass("d-none");
                $("#products-view-id").removeClass("d-none");
                $("#payments-view-id").addClass("d-none");
                $("#Customer-Details-view").addClass("d-none");
                //initTabulatorForProduct();
                ProductGear();
            }
            if ('@ListType' === "Payments") {
                $("#Sales").removeClass("active");
                $("#navCustomers").removeClass("active");
                $("#Products").removeClass("active");
                $("#Payments").addClass("active");
                //loadPaymentDetails();
                PaymentGear();                

                $("#sales-view-id").addClass("d-none");
                $("#customers-view-id").addClass("d-none");
                $("#products-view-id").addClass("d-none");
                $("#payments-view-id").removeClass("d-none");
                $("#Customer-Details-view").addClass("d-none");
            }
            $("#Sales").on("click", function () {
                $("#Sales").addClass("active");
                $("#navCustomers").removeClass("active");
                $("#Products").removeClass("active");
                $("#Payments").removeClass("active");

                $("#sales-view-id").removeClass("d-none");
                $("#customers-view-id").addClass("d-none");
                $("#products-view-id").addClass("d-none");
                $("#payments-view-id").addClass("d-none");
                $("#Customer-Details-view").addClass("d-none");
                makeAjaxRequest();
                GetOverViewData();
            })
            $("#navCustomers").on("click", function () {
                $("#Sales").removeClass("active");
                $("#navCustomers").addClass("active");
                $("#Products").removeClass("active");
                $("#Payments").removeClass("active");

                $("#sales-view-id").addClass("d-none");
                $("#customers-view-id").removeClass("d-none");
                $("#products-view-id").addClass("d-none");
                $("#payments-view-id").addClass("d-none");
                 $("#Customer-Details-view").addClass("d-none");
                loadCustomerDetails();
                GetOverViewDataForCustomer();
            })
                $("#divcustomer").on("click", function () {
                $("#Sales").removeClass("active");
                $("#navCustomers").addClass("active");
                $("#Products").removeClass("active");
                $("#Payments").removeClass("active");

                $("#sales-view-id").addClass("d-none");
                $("#customers-view-id").removeClass("d-none");
                $("#products-view-id").addClass("d-none");
                $("#payments-view-id").addClass("d-none");
                 $("#Customer-Details-view").addClass("d-none");
                loadCustomerDetails();
                GetOverViewDataForCustomer();
            })

            $("#Products").on("click", function () {
                $("#Sales").removeClass("active");
                $("#navCustomers").removeClass("active");
                $("#Products").addClass("active");
                $("#Payments").removeClass("active");

                $("#sales-view-id").addClass("d-none");
                $("#customers-view-id").addClass("d-none");
                $("#products-view-id").removeClass("d-none");
                $("#payments-view-id").addClass("d-none");
                $("#Customer-Details-view").addClass("d-none");
                initTabulatorForProduct();
                
            })
            $("#Payments").on("click", function () {
                $("#Sales").removeClass("active");
                $("#navCustomers").removeClass("active");
                $("#Products").removeClass("active");
                $("#Payments").addClass("active");
                loadPaymentDetails();

                $("#sales-view-id").addClass("d-none");
                $("#customers-view-id").addClass("d-none");
                $("#products-view-id").addClass("d-none");
                $("#payments-view-id").removeClass("d-none");
                 $("#Customer-Details-view").addClass("d-none");
            })

        });

        function formatNumberWithCommas(number) {
            const parts = number.toFixed(2).split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            return parts.join(".");
        }

        function openpendingListModal() {
            document.getElementById('pendingListModal').style.display = 'block';
            getModalData();
        }

        // Function to close the modal
        function closeModal() {
            document.getElementById('pendingListModal').style.display = 'none';
        }

        function GetOverViewDataForCustomer() {
            $.ajax({
                url: '@Url.Action("GetOverviewData", "Sales")', 
                type: 'GET',
                success: function (response) {
                    if (response.Success === 1) {
                        var data = response.data[0];

                        $('#heading-amount-estimate1').text('TK' + formatNumberWithCommas(data.EstimateAmount));
                        $('#label-amount-estimate1').text(data.TotalEstimate + ' estimate').css({ 'font-size': '12px', 'font-weight': 'bold' });
                        let myDiv1 = document.getElementById('amount-estimate1');
                        myDiv1.style.width = 10 + response.ratio[0] / 2 + '%';

                        $('#heading-amount-unbilled1').text('TK' + formatNumberWithCommas(data.UnbilledAmount));
                        $('#label-amount-unbilled1').text(data.TotalUnbilled + ' Unbill income').css({ 'font-size': '12px', 'font-weight': 'bold' });
                        let myDiv2 = document.getElementById('amount-unbilled1');
                        myDiv2.style.width = 10 + response.ratio[1] / 2 + '%';

                        $('#heading-amount-overdue1').text('TK' + formatNumberWithCommas(data.OverdueAmount));
                        $('#label-amount-overdue1').text(data.TotalOverdue + ' overdue ').css({ 'font-size': '12px', 'font-weight': 'bold' });
                        let myDiv3 = document.getElementById('amount-overdue1');
                        myDiv3.style.width = 10 + response.ratio[2] / 2 + '%';

                        $('#heading-amount-invoices-credits1').text('TK' + formatNumberWithCommas(data.InvoiceCreditsAmount));
                        $('#label-amount-invoices-credits1').text(data.TotalInvoiceCredits + ' invoice, credit').css({ 'font-size': '12px', 'font-weight': 'bold' });
                        let myDiv4 = document.getElementById('amount-invoices-credits1');
                        myDiv4.style.width = 9 + response.ratio[3] / 2 + '%';

                        $('#heading-amount-recentlypaid1').text('TK' + formatNumberWithCommas(data.recentlyPaid));
                        $('#label-amount-recentlypaid1').text(data.TotalrecentlyPaid + ' recently paid').css({ 'font-size': '12px', 'font-weight': 'bold' });
                        let myDiv5 = document.getElementById('amount-recentlypaid1');
                        myDiv5.style.width = 10 + response.ratio[4] / 2 + '%';

                        initTabulator();
                    } else {
                        console.error(response.ex);
                    }
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        

        getTermsDropdown();
        function getTermsDropdown() {
            $.ajax({
                url: '@Url.Action("GetDoctypeList", "Sales")',
                data: { criteria: 'All' },
                success: function (data) {
                    const ulForExpenses = document.querySelector('#ul-id-for-expenses');
                    for (var i = 0; i < data.length; i++) {
                        const li = document.createElement('li');
                        li.className = 'dropdown-item';
                        //const Type = data[i].DocTypeValue;
                        const Type = data[i].DocType;

                        //const linkUrl = '@Url.Action("YourActionName", "Sales")'.replace('YourActionName', Type);
                        let linkUrl = '@Url.Action("AddInvoiceQB", "Sales")' + '?Type=' + encodeURIComponent(Type);

                        if (Type == "Receive payment") {
                            linkUrl = '@Url.Action("AddReceivePaymentQB", "Sales")';
                        }


                        // Create a clickable link
                        const a = document.createElement('a');
                        a.className = 'dropdown-link';
                        a.style.color = 'black';
                        a.setAttribute('data-id', data[i].Id);
                        a.textContent = data[i].DocType;

                        li.addEventListener('mouseover', function () {
                            a.style.color = 'white';
                        });

                        // Change text color back to black when not hovered
                        li.addEventListener('mouseout', function () {
                            a.style.color = 'black';
                        });
                        // Add an event listener to the link to redirect to the URL
                        li.addEventListener('click', function () {
                            window.location.href = linkUrl;
                        });

                        li.appendChild(a);
                        ulForExpenses.appendChild(li);
                    }
                }
            });

     };

        function gotocreateInvoice() {
            var editUrl = '@Url.Action("AddInvoiceQB", "Sales")';
            window.location.href = editUrl;
        }
        function setInactiveUrl(data) {
            var myUrlInactive = '@Url.Action("InactiveInvoice", "Sales")';

            // Display the custom modal
            var modal = document.getElementById("customModal");
            modal.style.display = "block";

            // Handle confirm button click
            document.getElementById("confirmBtn").onclick = function () {
                $.ajax({
                    type: "get",
                    data: { InvoiceId: data },
                    url: myUrlInactive,
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                            initTabulator();
                        }
                        else if (response.success == "0") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-red",
                            });
                            GetReport();
                        }
                    }
                });
                modal.style.display = "none";
            };

            // Handle cancel button click
            document.getElementById("cancelBtn").onclick = function () {
                modal.style.display = "none";
            };
        }
        $('#file-drop-area').on('click', function (e) {
            e.preventDefault();
            $('#image-uploadify').click();
        });

        
        $("#offcanvasRightRate").on("hidden.bs.offcanvas", function () {
            closeOffcanvas();
        });

        

        $('#image-uploadify').on('change', function () {
            var files = $(this)[0].files;

            updateSelectedFilesList(files);

            for (var i = 0; i < files.length; i++) {
                var file = files[i];

                if (file.size > 20 * 1024 * 1024) {
                    alert('File "' + file.name + '" exceeds the maximum allowed size of 20MB.');
                    $(this).val('');
                    updateSelectedFilesList([]);
                    return;
                }

            }
        });

        $('#file-drop-area').on('dragover', function (e) {
            e.preventDefault();
            $(this).addClass('dragover');
        });

        $('#file-drop-area').on('dragleave drop', function (e) {
            e.preventDefault();
            $(this).removeClass('dragover');
        });

        $('#file-drop-area').on('drop', function (e) {
            e.preventDefault();
            $(this).removeClass('dragover');
            var files = e.originalEvent.dataTransfer.files;
            $('#image-uploadify')[0].files = files;
            updateSelectedFilesList(files);
        });

        function getTermsList() {
            $.ajax({
                url: '@Url.Action("TermsList", "Sales")',//url: "https://www.pqstec.com/InvoiceApps/values/GetCustomerDropdown",
                success: function (data) {

                    console.log(data);
                    const select = document.querySelector('#terms');

                    while (select.options.length > 2) {
                        select.options[2].remove();
                    }

                    for (var i = 0; i < data.length; i++) {
                        const option = document.createElement('option');
                        option.value = data[i].Id;
                        option.text = data[i].TermName;
                        option.setAttribute('DueInFixedDays', data[i].DueInFixedDays);
                        select.appendChild(option);
                    }
                }
            });
        }

        var selectElement = document.getElementById("terms");
        selectElement.addEventListener("click", getTermsList);
        

    </script>

    <script>
     
        
      $( '#Customers' ).select2( {
            theme: 'bootstrap-5',          
                
      } );
        
        function customCheckBoxFormatter(cell, formatterParams, onRendered) {
            return '<input type="checkbox" class="custom-checkbox">';
        }
        
              
        function openOffcanvas(rowData) {
            var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasForInvoice'));
            
            var id = rowData.Id;
            var salesDate = formatDateToCustomDate(rowData.SalesDate) || '';
            var dueDate = formatDateToCustomDate(rowData.DueDate) || '';
            var customerName = rowData.CustomerName || '';
            var totalAmount = rowData.Total || '';
             var formattedTotalAmount = formatCurrency(totalAmount);
            var statusRemarks = rowData.StatusRemarks || '';
            var billingAddress = rowData.PrimaryAddress || '';
            var phoneNo = rowData.PhoneNo || 'NA';
            var items = rowData.Items || [];
            var docType = rowData.DocType || '';
            $("#SalesCodeForInvoice").text(rowData.SaleCode);

            var myUrlGetforInvoice = `@Url.Action("EditInvoice", "Sales")?id=${id}&type=${docType}`;
            var myUrlGetforCreditNote = myUrlGetforInvoice;
            var myUrlGetforEstimate = myUrlGetforInvoice;
            var myUrlGetforSalesOrder = `@Url.Action("EditSalesOrder", "Sales")?id=${id}`;
            var myUrlGetforSalesReceipt = myUrlGetforInvoice;
            var myUrlGetforDelayedCharge = myUrlGetforInvoice;
            var myUrlGetforStockCount = `@Url.Action("EditStockCount", "Sales")?id=${id}`;

            // Populate the div elements
            document.getElementById('FirstDiv').innerHTML = 'Total:</br><h4>' + formattedTotalAmount + '</h4>Input Date:</br>' + salesDate + '</br>Due Date:</br>' + dueDate;
            document.getElementById('SecondDiv').innerHTML = '<strong>' + customerName + '</strong>'+ '</br>Billling address:</br>' + billingAddress ;  //+ '</br>' + rowData.EmailId + '</br>Phone:' + phoneNo
            document.getElementById('ThirdDiv').innerHTML = '<strong>Status:</strong> ' + statusRemarks
            document.getElementById('FourthDiv').innerHTML = '<strong>Product and services</strong></br>'  ;
             items.forEach(function(item, index) {
                var itemName = item.Name || '';
                var itemAmount = item.Amount || '';

                // Create a new row for each item
                var row = '<div style="display: flex; justify-content: space-between;">';
                row += '<span>' + itemName + '</span>';
                row += '<span>' + formatCurrency(itemAmount) + '</span>';
                row += '</div>';

                document.getElementById('FourthDiv').innerHTML += row;
            });
            document.getElementById('FifthDiv').innerHTML = '<strong>More info</strong></br>' ;  // + 'Memo:' + rowData.MessageInvoice


            document.getElementById('SalesIdForJournal').value = `${id}`;

            var button = document.createElement("button");
            if (docType == 'Sales') {
                button.textContent = "Edit Invoice";
            }
            else
            {
                button.textContent = "Edit " + docType;
            }
            
            button.className = "btn btn-success";
            button.addEventListener("click", function() {
                if (docType == 'Invoice' || docType == 'Sales') {
                    window.location.href = myUrlGetforInvoice;
                }
                if (docType == 'Credit Note') {
                    window.location.href = myUrlGetforCreditNote;
                }
                if (docType == 'Estimate') {
                    window.location.href = myUrlGetforEstimate;
                }
                if (docType == 'Sales order') {
                    window.location.href = myUrlGetforSalesOrder;
                }
                if (docType == 'Sales receipt') {
                    window.location.href = myUrlGetforSalesReceipt;
                }
                if (docType == 'Delayed Charge') {
                    window.location.href = myUrlGetforDelayedCharge;
                }
                if (docType == 'Stock Count') {
                    window.location.href = myUrlGetforStockCount;
                }
                
            });

            // Create a div for the button
            var buttonContainer = document.createElement("div");
            buttonContainer.className = "text-end"; // Align the button to the right

            buttonContainer.appendChild(button);

            // Append the buttonContainer to the SixthDiv
            document.getElementById('SixthDiv').innerHTML = '';
            document.getElementById('SixthDiv').appendChild(buttonContainer);
            offcanvas.show();

            journalTable.clearData();
            journalTable.setColumns([]);

        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
        }

        function buildTree(dataArray) {
            const tree = [];
            const dateMap = {};

            dataArray.forEach(item => {
                // Trim whitespace from AccName if it exists
                if (item.AccName !== null && item.AccName !== undefined) {
                    item.AccName = item.AccName.trim();
                }


                // Check if the VoucherId already exists in the dateMap
                if (!dateMap[item.VoucherId]) {
                    dateMap[item.VoucherId] = {
                        VoucherDate: item.VoucherDate,
                        children: []
                    };
                    tree.push(dateMap[item.VoucherId]);
                }

                const childItem = { ...item, VoucherDate: '' };
                // Add current item to the children array of the corresponding VoucherId
                dateMap[item.VoucherId].children.push(childItem);
            });

            return tree;
        }


         var journalTable;       
         document.getElementById('showJournal').addEventListener('click', function() {
            // Call the initTabulator function when the button is clicked
            initTabulatorJournal();
          });
         var journalFields = [
                  
                                { title: "Account Head",  field: "AccName" },
                                { title: "Group Head",  field: "GroupHead",visible: false },
                                { title: "Debit", field: "TKDebit",headerHozAlign: "right",hozAlign: "right", bottomCalc: "sum", visible: false,
                                  bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                { title: "Credit", field: "TKCredit",headerHozAlign: "right",hozAlign: "right", bottomCalc: "sum",visible: false,
                                    bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                {
                                    title: "Debit", field: "TKDebitLocal", headerHozAlign: "right", hozAlign: "right", bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                {
                                    title: "Credit", field: "TKCreditLocal", headerHozAlign: "right", hozAlign: "right", bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                
          ]


        function initTabulatorJournal() {         
     
             var SourceId = $("#SalesIdForJournal").val() ;
             var Source = "Sales";     
     
             $.ajax({
                        method: "get",
                        async: false,
                        url: '@Url.Action("JournalforSalesExpenses", "Purchase")',
                        data: { SourceId: SourceId, Source: Source },   

                 success: function (result) {

                     dataabc = buildTree(result.data);

                     if (result.data.length === 0) {
                         // Show message if dataabc is 0
                         alert("This document is not Posted! That's why Journal is not showing. For Journal posted this document.");
                     }
                     else {

                        var columnsToHide = ["GroupHead", "TKDebit", "TKCredit", "VoucherId", "children"];

                        var journalFields = Object.keys(dataabc[0].children[0]).map(key => {
                            return {
                                title: key,
                                field: key,
                                visible: !columnsToHide.includes(key),
                                formatter:  undefined,
                                formatterParams:  undefined
                            };
                        });

                         // Add tree structure configuration based on VoucherId
                         journalTable = new Tabulator("#journal-table", {
                             layout: "fitColumns",
                             data: dataabc,
                             columns: journalFields,
                            dataTree: true,
                            dataTreeStartExpanded: true,
                            dataTreeChildField: "children",
                            layout: "datafit", // Assumes 'VoucherId' will be the tree element
                         });

                         // journalTable = new Tabulator("#journal-table", {
                         //         layout: "fitColumns",
                         //         data: dataabc,
                         //         columns: journalFields
                         //    }); 

                         // }

                     }
                 }
                  });
    
        }







        var salesApiUrl;
        var salesTable;
        var childTable;

        $('#searchInput1').on('input', function() {
          var inputValue = $(this).val();
          var url = '@Url.Action("GetInvoiceList", "Sales")' + '?searchquery=' + inputValue;
          salesTable.setData(url);

        });

        var checkbox1 = [
             { title: "", field: "CheckBox", headerHozAlign: "left", headerSort: false, formatter: customCheckBoxFormatter, visible: true, width: 50 }
        ]

        var Actions1 = [
            {
                title: "Actions", field: "button", headerHozAlign: "center",vertAlign: "middle", headerSort: false, hozAlign: "right",visible: true, resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    var docType = data.DocType || '';
                    var myUrlGetforInvoice = `@Url.Action("EditInvoice", "Sales")?id=${data.Id}&type=${docType}`;
                    var myUrlGetforCreditNote = myUrlGetforInvoice;
                    //var myUrlGetforMakePayment = `@Url.Action("EditReceivePaymentQB", "Sales")?id=${data.Id}`;
                    var myUrlGetforEstimate = myUrlGetforInvoice;
                    var myUrlGetforSalesOrder = `@Url.Action("EditSalesOrder", "Sales")?id=${data.Id}`;
                    var myUrlGetforSalesReceipt = myUrlGetforInvoice;
                    var myUrlGetforDelayedCharge = myUrlGetforInvoice;
                    var myUrlGetforStockCount = `@Url.Action("EditStockCount", "Sales")?id=${data.Id}`;
                    var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                    var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;

                    var myUrlPdf = '@Url.Action("CustomFormStylePreview", "Admin")?type=RunningSalesReport&id=' + data.Id;

                    //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                    var inActive = `setInactiveUrl(${data.Id}) `
                    var active = `setActiveUrl(${data.Id}) `

                    var previewPdf = `
                                   <a href='${myUrlPdf}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                       <i class='bi bi-eye pe-1'></i> <span>Preview PDF</span>  <br />
                                   </a>
                                           <div class='dropdown-divider m-0'></div>
                               `;
                    var printHtml = `
                                   <a href='${myUrlprint}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                       <i class='bi bi-printer pe-1'></i> <span>Print</span>  <br />
                                   </a>
                                           <div class='dropdown-divider m-0'></div>
                               `;

                    var ReportViewHtml = `
                                           <a href='${viewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                       <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                   </a>
                                           <div class='dropdown-divider m-0'></div>
                               `;

                    var editHtml;

                    if (data.DocType == 'Invoice' || data.DocType == 'Sales') {
                        editHtml = `
                                                   <a href='${myUrlGetforInvoice}' class='text-decoration-none text-black ms-3 mt-1'>
                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                           </a>
                                                   <div class='dropdown-divider m-0'></div>
                                       `;
                    }
                    if (data.DocType == 'Credit Note') {
                        editHtml = `
                                                                   <a href='${myUrlGetforCreditNote}' class='text-decoration-none text-black ms-3 mt-1'>
                                                       <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                   </a>
                                                           <div class='dropdown-divider m-0'></div>
                                               `;
                    }
                    if (data.DocType == 'Estimate') {
                        editHtml = `
                                                                                   <a href='${myUrlGetforEstimate}' class='text-decoration-none text-black ms-3 mt-1'>
                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                           </a>
                                                                   <div class='dropdown-divider m-0'></div>
                                                       `;
                    }
                    if (data.DocType == 'Issue') {
                        editHtml = `
                                                                                   <a href='${myUrlGetforEstimate}' class='text-decoration-none text-black ms-3 mt-1'>
                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                           </a>
                                                                   <div class='dropdown-divider m-0'></div>
                                                       `;
                    }
                    if (data.DocType == 'Stock Count') {
                        editHtml = `
                                                                                           <a href='${myUrlGetforStockCount}' class='text-decoration-none text-black ms-3 mt-1'>
                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                           </a>
                                                                   <div class='dropdown-divider m-0'></div>
                                                       `;
                    }
                    if (data.DocType == 'Sales order') {
                        editHtml = `
                                                                                           <a href='${myUrlGetforSalesOrder}' class='text-decoration-none text-black ms-3 mt-1'>
                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                           </a>
                                                                   <div class='dropdown-divider m-0'></div>
                                                       `;
                    }
                    if (data.DocType == 'Sales receipt') {
                        editHtml = `
                                                                                                   <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                       <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                   </a>
                                                                           <div class='dropdown-divider m-0'></div>
                                                               `;
                    }
                    if (data.DocType == 'Delayed Charge') {
                        editHtml = `
                                                                                                    <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;
                    }

                    var viewHtml = `
                                           <a href='${viewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                           <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                          </a>

                               `;

                    var deleteHtml;
                    if (data.IsDelete == 0) {
                        deleteHtml = `
                    <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                        <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                    </a>
                `;
                    }

                    var statusDependentHtml = data.isPosted ? previewPdf + printHtml + viewHtml : previewPdf + printHtml + ReportViewHtml + editHtml + deleteHtml;
                    var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")?id=${data.Id}`;
                    if (data.DocType == 'Invoice' || data.DocType == 'Sales') {
                        var html = `
                                          <div class='dropdown ms-1'>

                                                              <a href='${paymentGet}' class='text-decoration-none  ms-3 mt-1'>
                                                       Receive Payment
                                                   </a>
                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                             <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                  ${statusDependentHtml}

                                              </ul>
                                          </div>
                                      `;

                        return html;
                    }
                    else
                    {
                        if (data.DocType == 'Credit Note') {
                            var html = `
                                                  <div class='dropdown ms-1'>

                                                                                  <a href='${myUrlGetforCreditNote}' class='text-decoration-none  ms-3 mt-1'>
                                                               Edit
                                                           </a>
                                                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                     <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                          ${statusDependentHtml}

                                                      </ul>
                                                  </div>
                                              `;

                            return html;
                        }
                        else {
                            if (data.DocType == 'Estimate') {
                                var html = `
                                                          <div class='dropdown ms-1'>

                                                                                          <a href='${myUrlGetforEstimate}' class='text-decoration-none  ms-3 mt-1'>
                                                                       Edit
                                                                   </a>
                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                             <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                  ${statusDependentHtml}

                                                              </ul>
                                                          </div>
                                                      `;

                                return html;
                            }
                            if (data.DocType == 'Stock Count') {
                                var html = `
                                                          <div class='dropdown ms-1'>

                                                                                                  <a href='${myUrlGetforStockCount}' class='text-decoration-none  ms-3 mt-1'>
                                                                       Edit
                                                                   </a>
                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                             <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                  ${statusDependentHtml}

                                                              </ul>
                                                          </div>
                                                      `;

                                return html;
                            }
                            if (data.DocType == 'Sales order') {
                                var html = `
                                                                  <div class='dropdown ms-1'>

                                                                                                          <a href='${myUrlGetforSalesOrder}' class='text-decoration-none  ms-3 mt-1'>
                                                                               Edit
                                                                           </a>
                                                                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                     <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                          ${statusDependentHtml}

                                                                      </ul>
                                                                  </div>
                                                              `;

                                return html;
                            }
                            if (data.DocType == 'Sales receipt') {
                                var html = `
                                                                          <div class='dropdown ms-1'>

                                                                                                                  <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none  ms-3 mt-1'>
                                                                                       Edit
                                                                                   </a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                return html;
                            }
                            if (data.DocType == 'Delayed Charge') {
                                var html = `
                                                                                  <div class='dropdown ms-1'>

                                                                                                                                  <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none  ms-3 mt-1'>
                                                                                               Edit
                                                                                           </a>
                                                                                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                     <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                          ${statusDependentHtml}

                                                                                      </ul>
                                                                                  </div>
                                                                              `;

                                return html;
                            }
                            if (data.DocType == 'Issue') {
                                var html = `
                                                                                  <div class='dropdown ms-1'>

                                                                                                                                  <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none  ms-3 mt-1'>
                                                                                               Edit
                                                                                           </a>
                                                                                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                     <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                          ${statusDependentHtml}

                                                                                      </ul>
                                                                                  </div>
                                                                              `;

                                return html;
                            }

                        }

                    }
                },
                visible: true, cellClick: function (e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                },
            },
        ]

        function salesGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Sales' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             globalFields1 = JSON.parse(response.data.KeyValue);
                             pageSize = Number(globalFields1.pageSize);
                             $('#sales-rows').val(pageSize);
                             globalFields1 = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "CheckBox" && column.field !== "button";
                            });

                            // Prepend the checkBox array at the start of exportcolumn
                            globalFields1 = checkbox1.concat(globalFields1);
                            
                            // Append the Actions array at the end of exportcolumn
                            globalFields1 = globalFields1.concat(Actions1);

                       }
                    }
                         
                        populateCheckbox1();
                        initTabulator();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideSales(colName) {
       
            salesTable.toggleColumn(colName);           
    
        }


          function populateCheckbox1(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = globalFields1.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideSales('${x.field}')" class="custom-control-input title-input sales-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListSales = document.getElementById('salesColumnList');
                columnListSales.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#sales-rows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            salesTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }


        function initTabulator() {
            var statusValue = $("#Status").val();
            var durationValue = $("#Duration").val();
            var customerId = $("#Customers").val();

            function fetchDataFromServer() {
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetInvoiceList", "Sales")'
                };
                return $.ajax({
                    url: MyAppUrlSettings.MyUsefulUrl,
                    data: {
                        status: statusValue,
                        duration: durationValue,
                        customerId: customerId
                    },
                    dataType: "json",
                });
            }

            fetchDataFromServer().done(function (response) {

                console.log("notrmal response:", response.data);
                var dataTable = response.data;
                console.log("data table:", dataTable);// Define columns to be excluded
                var columnsToExclude = ["MonthCaption", "FontSignal"]; // Define columns to be excluded


               salesApiUrl = '@Url.Action("GetInvoiceList", "Sales")' + '?duration=' + durationValue + '&customerId=' + customerId + '&status=' + statusValue,
                salesTable = new Tabulator("#example-table", {
                    //data: dataTable,

                    layout: "fitColumns",
                    minHeight: 400,           
                    pagination: true,
                    movableColumns: true,
                    ajaxURL: salesApiUrl,
                    paginationMode: "remote",
                    paginationSize: pageSize,
                    paginationInitialPage: 1,
                    paginationSizeSelector: [10, 25, 50, 100, 1000],
                    paginationCounter: "rows",
                    dataTree: true,
                    dataTreeStartExpanded: false,
                      ajaxConfig: "get",
                      ajaxContentType: "json",

                      ajaxResponse: function (url, params, response) {
                      salesTable.setMaxPage(response.last_page);
                      console.log("response.last_page", response.last_page);

                      dataLoadExpense = response.data;
                    /* console.log("dataLoadExpense:", dataLoadExpense);*/

                         return {

                          data: dataLoadExpense,
                          last_page: response.last_page,

                         };
                      },


                    columns: globalFields1,

                     rowFormatter: function (row) {
                        // Create and style holder elements for nested table
                        var holderEl = document.createElement("div");
                        var tableEl = document.createElement("div");

                        holderEl.style.boxSizing = "border-box";

                        holderEl.appendChild(tableEl);

                        row.getElement().appendChild(holderEl);

                        var childData = row.getData().SalesItems; // Get the child data array for the current row

                        childTable = new Tabulator(tableEl, {
                            
                            data: childData, // Pass the child data array to the child table
                            columns: [
                                { title: "Category", field: "CategoryName",headerHozAlign: "left",hozAlign: "left",width:200, resizable: false },
                                { title: "Name", field: "ProductName",headerHozAlign: "left",hozAlign: "left",width:200, resizable: false },
                                { title: "Code",field: "ProductCode",headerHozAlign: "left",hozAlign: "left",width:200, resizable: false },                               
                                { title: "Quantity", field: "Quantity",headerHozAlign: "right",hozAlign: "right",width:100,bottomCalc: "sum", resizable: false },
                                { title: "Unit Price", field: "Price",headerHozAlign: "right",hozAlign: "right",width:200,bottomCalc: "sum", resizable: false,
                                   bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                { title: "CostPrice", field: "CostPrice",headerHozAlign: "right",hozAlign: "right",width:200,bottomCalc: "sum", resizable: false,
                                    bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                { title: "Avg. CostPrice", field: "AvgCostPrice",headerHozAlign: "right",hozAlign: "right",width:200,bottomCalc: "sum", resizable: false,
                                    bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                
                            ],
                        });

                         var detailsIconEl = row.getElement().querySelector(".btn-details-icon");

                         detailsIconEl.addEventListener("click", function (event) {
                          event.stopPropagation();

                           if (childTable.getRows().length === 0) {
                           childTable.setData(childData);
                           }

                           holderEl.classList.toggle("child-table-hidden");
                           holderEl.classList.toggle("child-table-visible");

                     

                            if (holderEl.classList.contains("child-table-visible")) 
                            {
                                detailsIconEl.className = "fas fa-chevron-down btn-details-icon"; // Use collapse icon
                            } 
                            else 
                            {
                                detailsIconEl.className = "fas fa-plus btn-details-icon"; // Use expand icon
                            }
                         });

                        // Hide the child table initially
                        holderEl.classList.add("child-table-hidden");

                    },

                });
                
                
            });


        }
                        document.getElementById("salesPrint-pdf").addEventListener("click", function () {
                            salesTable.print(false, true);
                        });

                        document.getElementById("salesPrint-excel").addEventListener("click", function () {
                            salesTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
                        });


                     // Initialize columns page load
                    // console.log("globalFieldsForSalesList::", globalFields1);
                    // let columnListSales = $("#salesColumnList");
                    //   columnListSales.empty();
                    
                    
                    // $.ajax({
                    //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
                    //     type: 'GET',
                    //     contentType: 'application/json',
                    //     data: {type: 'Sales' },
                    //     success: function (response) {
                        
                    //         if(response.Success == 0)
                    //         {                                                                
                    //              $.each(globalFields1, function (index, field) {
                    //                  ////console.log("GLOBAL 2::",field);
                    //                  var title = field.title;
                    //                  var name = field.field;
                    //                  var visible = true;
                    //                  if (field.visible == false) {
                    //                      visible = false;
                    //                  }
                    //                  titles = `<li>
                    //                              <a class="dropdown-item" href="#">
                    //                              <div class="custom-control custom-checkboxs" >
                    //                              <input type="checkbox" class="custom-control-input title-input sales-column" id="${name}" value="${name}">
                    //                                      <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                    //                              </div>
                    //                              </a>
                    //                              </li>`;
                    //                  columnListSales.append(titles);

                    //                  document.querySelector(`#${name}`).addEventListener('click', function (event) {
                    //                      var checkbox = event.target;
                    //                      var isChecked = checkbox.checked;

                    //                      if (isChecked) {
                    //                          salesTable.showColumn(name);
                    //                      } else {
                    //                          salesTable.hideColumn(name);
                    //                      }
                    //                  });


                    //                  $(`${'#' + name}`).prop('checked', visible);


                    //                  $('.custom-control-label').on('click', function (e) {
                    //                      e.stopPropagation();
                    //                  });
                    //                  $('#dropdown-titles').on('click', function (e) {
                    //                      e.stopPropagation();
                    //                  });

                    //                  //Add event listener to the rows select input
                    //                  $("#sales-rows").on("change", function () {
                    //                      var selectedRows = $(this).val();
                    //                      if (selectedRows !== null) {
                    //                          // Convert the selected value to an integer
                    //                          var pageSize = parseInt(selectedRows);
                    //                          if (!isNaN(pageSize)) {
                    //                              // Set the page size for the parentTable
                    //                              salesTable.setPageSize(pageSize);

                    //                              //// You may also want to update the parent table height
                    //                              //updateParentTableHeight();
                    //                          }
                    //                      }
                    //                  });

                    //              });
                    //         }
                    //         else
                    //         {
                    //             var jsonData = response.data.KeyValue;
                    //             var columnData = JSON.parse(jsonData);

                               
                    //             $.each(globalFields1, function (index, globalField) {
                    //                 var matchedField = columnData.find(function (fieldData) {
                    //                     return fieldData.Field === globalField.field;
                    //                 });

                    //                 // If a match is found, update the visibility
                    //                 if (matchedField) {
                    //                     globalField.visible = matchedField.IsVisible;
                    //                 } else {
                    //                     globalField.visible = false; // Default to false if not found
                    //                 }

                    //                 if (matchedField.IsVisible == false) {
                    //                     setTimeout(function() {
                    //                     salesTable.hideColumn(matchedField.Field);
                    //                     }, 3000);
                    //                 }
                    //                 else
                    //                 {
                    //                     setTimeout(function() {
                    //                     salesTable.showColumn(matchedField.Field);
                    //                     }, 3000);
                    //                 }
                    //                 var title = globalField.title;
                    //                 var name = globalField.field;
                    //                 var visible = globalField.visible;

                    //                 var titles = `<li>
                    //                 <a class="dropdown-item" href="#">
                    //                     <div class="custom-control custom-checkboxs">
                    //                         <input type="checkbox" class="custom-control-input title-input sales-column" id="${name}" value="${name}">
                    //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                    //                     </div>
                    //                 </a>
                    //               </li>`;

                    //                 // Append the generated HTML to your column list
                    //                 columnListSales.append(titles);

                    //                 // Set the checkbox state based on visibility
                    //                 $(`#${name}`).prop('checked', visible);

                    //                 // Add event listener to the checkbox to show/hide columns
                    //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                    //                     var checkbox = event.target;
                    //                     var isChecked = checkbox.checked;

                    //                     if (isChecked) {
                    //                         salesTable.showColumn(name);
                    //                     } else {
                    //                         salesTable.hideColumn(name);
                    //                     }
                    //                 });
                    //             });

                    //             // Prevent the dropdown from closing when clicking on a checkbox or label
                    //             $('.custom-control-label').on('click', function (e) {
                    //                 e.stopPropagation();
                    //             });
                    //             $('#dropdown-titles').on('click', function (e) {
                    //                 e.stopPropagation();
                    //             });

                    //             // Handle change event for #customer-rows
                    //             $("#sales-rows").on("change", function () {
                    //                 var selectedRows = $(this).val();
                    //                 if (selectedRows !== null) {
                    //                     var pageSize = parseInt(selectedRows);
                    //                     if (!isNaN(pageSize)) {
                    //                         salesTable.setPageSize(pageSize);
                    //                     }
                    //                 }
                    //             });

                    //         }
                    //     },
                    //     error: function (error) {
                    //         // Handle error
                    //         console.error("Error saving settings:", error);
                    //     }
                    // });

                        

            $("#saveSales").on("click", function () {
                var columnData = [];

                var colDefs = salesTable.getColumnDefinitions();

                var selectElement = document.getElementById("sales-rows");
                var selectedValue = selectElement.value;

                $(".sales-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                     colDefs.forEach(function(colDef) {
                         if (colDef.field === field) {
                            colDef.visible = isVisible;  // Set visibility based on checkbox state                
                         }
                     });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'Sales' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

            function DeleteFilter1(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             initTabulator();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };

            // sales gear functionality list end


        function changeStatus(Id)
        {
            $.ajax({
                type: "GET",
                url: '@Url.Action("changeStatus", "Sales")',
                data: { Id: Id},
                datatype: "Json",
                success: function (data) {
                    initTabulator();
                }
            });
        }
        var modalColumns = [
            {
                title: "Date",
                field: "SalesDate",
                vertAlign: "middle",
                headerFilter: "input",
                width: "10%", cssClass: "text-center",
                formatter: function (cell, formatterParams, onRendered) {
                    var date = new Date(cell.getValue());
                    var day = date.getDate();
                    var monthNames = [
                        "Jan", "Feb", "Mar",
                        "Apr", "May", "Jun",
                        "Jul", "Aug", "Sep",
                        "Oct", "Nov", "Dec"
                    ];
                    var monthIndex = date.getMonth();
                    var year = date.getFullYear().toString().substr(-2); // Extract last 2 digits of year

                    return day + '-' + monthNames[monthIndex] + '-' + year;
                }
                
            },
            { title: "Id", field: "Id", movable: false, visible: false },
            {
                title: "Type", field: "DocType", hozAlign: "left", vertAlign: "middle", headerFilter: "input"
            },
            {
                title: "NO.", field: "SaleCode", hozAlign: "left", vertAlign: "middle",headerFilter: "input",
                formatter: function (cell, formatterParams, onRendered) {
                    return "<strong>" + cell.getValue() + "</strong>";
                }
            },
            {
                        title: "Customer", field: "CustomerName", hozAlign: "left", vertAlign: "middle",headerFilter: "input"
            },
            {
                title: "Amount", field: "Total", hozAlign: "right", vertAlign: "middle", width: 130,
                formatter: function (cell, formatterParams, onRendered) {
                    var formattedNumber = cell.getValue().toLocaleString();

                    return "<div style='text-align:right'>" + formattedNumber + "</div>";
                }
            },
            {
                title: "Accept",
                field: "Add",
                movable: false,
                hozAlign: "center",
                formatter: function (cell, formatterParams) {
                    return "<i class='bi bi-plus-square-fill' style='color: green; font-size: 20px;'></i>";
                },
                headerSort: false,
                cellClick: function (e, cell) {
                    var rowData = cell.getRow().getData();
                    var row = cell.getRow();

                    // Remove row from the modal table
                    changeStatus(rowData.Id);
                    modalTable.deleteRow(row);
                }
            }

        ]

        var modalTable;
        function getModalData() {

            function fetchDataFromServer() {
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetPendingTransactionList", "Sales")'
                };
                return $.ajax({
                    url: MyAppUrlSettings.MyUsefulUrl,
                    
                    dataType: "json",
                });
            }

            fetchDataFromServer().done(function (response) {

                console.log("notrmal response:", response.data);
                var dataTable = response.data;
                console.log("data table:", dataTable);// Define columns to be excluded
                var columnsToExclude = ["MonthCaption", "FontSignal"]; // Define columns to be excluded


                salesApiUrl = '@Url.Action("GetPendingTransactionList", "Sales")',
                modalTable = new Tabulator("#pendingTransaction", {
                    //data: dataTable,

                    layout: "fitColumns",
                    minHeight: 400,           
                    pagination: true,
                    movableColumns: true,
                    ajaxURL: salesApiUrl,
                    paginationMode: "remote",
                    paginationSize: 10,
                    paginationInitialPage: 1,
                    paginationSizeSelector: [10, 25, 50, 100, 1000],
                    paginationCounter: "rows",
                    dataTree: true,
                    dataTreeStartExpanded: false,
                      ajaxConfig: "get",
                      ajaxContentType: "json",

                      ajaxResponse: function (url, params, response) {
                      modalTable.setMaxPage(response.last_page);
                      console.log("response.last_page", response.last_page);

                      dataLoadExpense = response.data;
                    /* console.log("dataLoadExpense:", dataLoadExpense);*/

                         return {

                          data: dataLoadExpense,
                          last_page: response.last_page,

                         };
                      },


                        columns: modalColumns,

                });
                
                
                    });


                }

         function customDetailsButtonFormatter(cell, formatterParams, onRendered) {
               var icon = '<i class="fas fa-plus btn-details-icon"></i>';
               return icon;
           }

        

        

        
       

           

           


      $('input[name=RptType1]').click(function () {
          var reporttypeind = $("input[name=RptType1]:checked").val();
          //alert(reporttype);

          $.ajax({
              type: 'POST',
              url: '@Url.Action("SetSessionReportType", "Accounts")',
              dataType: 'json',
              async: true,
              data: { reporttype: reporttypeind },
              success: function (response) {
                  //  window.location.href = response.Url;

                  //window.open(response.Url, '_blank')
              },
              error: function (ex) {
                  alert('Failed.' + ex);
              }

          });

      });



        function initTabulatorOverview(type) {

            function fetchDataFromServer() {
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetInvoiceListOverview", "Sales")'
                };
                return $.ajax({
                    url: MyAppUrlSettings.MyUsefulUrl,
                    data: {
                        type: type
                    },
                    dataType: "json",
                });
            }

            fetchDataFromServer().done(function (response) {

                console.log("notrmal response:", response.data);
                var dataTable = response.data;
                console.log("data table:", dataTable);// Define columns to be excluded
                var columnsToExclude = ["MonthCaption", "FontSignal"]; // Define columns to be excluded



                var table = new Tabulator("#example-table", {
                    data: dataTable,
                    layout: "fitColumns",
                    minHeight: 400,
                    pagination: true,
                    movableColumns: true,
                    paginationSize: 10,
                    paginationSizeSelector: [10, 25, 50, 100],
                    paginationCounter: "rows",
                    columns: [
                        { title: "", field: "CheckBox", headerHozAlign: "left", headerSort: false, formatter: customCheckBoxFormatter, visible: true, width: 50 },
                        {
                            title: "Date",
                            field: "SalesDate",
                            vertAlign: "middle",
                            width: "10%", cssClass: "text-center",
                            formatter: function (cell, formatterParams, onRendered) {
                                var date = new Date(cell.getValue());
                                var day = date.getDate();
                                var monthNames = [
                                    "Jan", "Feb", "Mar",
                                    "Apr", "May", "Jun",
                                    "Jul", "Aug", "Sep",
                                    "Oct", "Nov", "Dec"
                                ];
                                var monthIndex = date.getMonth();
                                var year = date.getFullYear().toString().substr(-2); // Extract last 2 digits of year

                                return day + '-' + monthNames[monthIndex] + '-' + year;
                            },
                            cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            }
                        },
                        {
                            title: "Type", field: "DocType", hozAlign: "left", vertAlign: "middle",
                            cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            }
                        },
                        {
                            title: "NO.", field: "SaleCode", hozAlign: "left", vertAlign: "middle",
                            cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            }
                        },
                        {
                            title: "Customer", field: "CustomerName", hozAlign: "left", vertAlign: "middle",
                            cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            }
                        },
                        {
                            title: "Amount", field: "Total", hozAlign: "right", vertAlign: "middle",
                            formatter: function (cell, formatterParams, onRendered) {
                                var formattedNumber = cell.getValue().toLocaleString();

                                return "<div style='text-align:right'>" + formattedNumber + "</div>";
                            },
                            cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            }
                        },
                        {
                            title: "Status", field: "StatusRemarks", cssClass: "text-center", vertAlign: "middle",
                            cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            },
                            formatter: function (cell, formatterParams, onRendered) {
                                var status = cell.getValue();
                                var rowData = cell.getRow().getData();
                                var content = status;

                                if (status === "Paid" || status === "Applied") {
                                    //content += '<span class="checkmark"><i class="bi bi-check-circle-fill" style="color: #2ca01c; margin-left: 4px;"></span>';
                                    content = '<span class="checkmark"><i class="bi bi-check-circle-fill" style="color: #2ca01c; margin-right: 4px;"></i></span>' + content;
                                }

                                if (status.startsWith("Overdue")) {
                                    //content += '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #ffbf00; margin-left: 4px;"></span>';
                                    content = '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #ffbf00; margin-right: 4px;"></i></span>' + content;

                                }

                                if (status === "Rejected") {
                                    content = '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #b80000; margin-right: 4px;"></i></span>' + content;

                                }

                                return content;
                            },
                        },
                        {
                            title: "Actions", field: "button", headerHozAlign: "center", vertAlign: "middle", headerSort: false, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                                var data = cell.getData();
                                console.log("see data::", data);
                                var docType = data.DocType || '';
                                var myUrlGetforInvoice = `@Url.Action("EditInvoice", "Sales")?id=${data.Id}&type=${docType}`;
                                var myUrlGetforCreditNote = myUrlGetforInvoice;
                                //var myUrlGetforMakePayment = `@Url.Action("EditReceivePaymentQB", "Sales")?id=${data.Id}`;
                                var myUrlGetforEstimate = myUrlGetforInvoice;
                                var myUrlGetforSalesOrder = `@Url.Action("EditSalesOrder", "Sales")?id=${data.Id}`;
                                var myUrlGetforSalesReceipt = myUrlGetforInvoice;
                                var myUrlGetforDelayedCharge = myUrlGetforInvoice;
                                
                                var myUrlGetforStockCount = `@Url.Action("EditStockCount", "Sales")?id=${data.Id}`;
                                var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                                var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;

                                var myUrlPdf = '@Url.Action("CustomFormStylePreview", "Admin")?type=RunningSalesReport&id=' + data.Id;

                                //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                                var inActive = `setInactiveUrl(${data.Id}) `
                                var active = `setActiveUrl(${data.Id}) `

                                var previewPdf = `
                                                       <a href='${myUrlPdf}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Preview PDF</span>  <br />
                                                       </a>
                                                               <div class='dropdown-divider m-0'></div>
                                                   `;
                                var printHtml = `
                                                       <a href='${myUrlprint}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Print</span>  <br />
                                                       </a>
                                                               <div class='dropdown-divider m-0'></div>
                                                   `;

                                var ReportViewHtml = `
                                                               <a href='${viewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                           <i class='bi bi-pencil-square pe-1'></i> <span>View</span>  <br />
                                                       </a>
                                                               <div class='dropdown-divider m-0'></div>
                                                   `;

                                var editHtml;

                                if (data.DocType == 'Invoice' || data.DocType == 'Sales') {
                                    editHtml = `
                                                                       <a href='${myUrlGetforInvoice}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                               </a>
                                                                       <div class='dropdown-divider m-0'></div>
                                                           `;
                                }
                                if (data.DocType == 'Credit Note') {
                                    editHtml = `
                                                                                       <a href='${myUrlGetforCreditNote}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                                }
                                if (data.DocType == 'Estimate') {
                                    editHtml = `
                                                                                                       <a href='${myUrlGetforEstimate}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                               </a>
                                                                                       <div class='dropdown-divider m-0'></div>
                                                                           `;
                                }
                                if (data.DocType == 'Stock Count') {
                                    editHtml = `
                                                                                                               <a href='${myUrlGetforStockCount}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                               </a>
                                                                                       <div class='dropdown-divider m-0'></div>
                                                                           `;
                                }
                                if (data.DocType == 'Sales order') {
                                    editHtml = `
                                                                                                               <a href='${myUrlGetforSalesOrder}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                               </a>
                                                                                       <div class='dropdown-divider m-0'></div>
                                                                           `;
                                }
                                if (data.DocType == 'Sales receipt') {
                                    editHtml = `
                                                                                                                       <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                                       </a>
                                                                                               <div class='dropdown-divider m-0'></div>
                                                                                   `;
                                }
                                if (data.DocType == 'Delayed Charge') {
                                    editHtml = `
                                                                                                                        <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                                               </a>
                                                                                                       <div class='dropdown-divider m-0'></div>
                                                                                           `;
                                }

                                var viewHtml = `
                                                               <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                               <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                              </a>

                                                   `;

                                var deleteHtml;
                                if (data.IsDelete == 0) {
                                    deleteHtml = `
                                        <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                            <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                        </a>
                                    `;
                                }

                                var statusDependentHtml = data.isPosted ? viewHtml : previewPdf + printHtml + ReportViewHtml + editHtml + deleteHtml;
                                var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")?id=${data.Id}`;
                                if (data.DocType == 'Invoice' || data.DocType == 'Sales') {
                                    var html = `
                                                              <div class='dropdown ms-1'>

                                                                                  <a href='${paymentGet}' class='text-decoration-none  ms-3 mt-1'>
                                                                           Receive Payment
                                                                       </a>
                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                      ${statusDependentHtml}

                                                                  </ul>
                                                              </div>
                                                          `;

                                    return html;
                                }
                                else {
                                    if (data.DocType == 'Credit Note') {
                                        var html = `
                                                                      <div class='dropdown ms-1'>

                                                                                                      <a href='${myUrlGetforCreditNote}' class='text-decoration-none  ms-3 mt-1'>
                                                                                   Edit
                                                                               </a>
                                                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                         <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                              ${statusDependentHtml}

                                                                          </ul>
                                                                      </div>
                                                                  `;

                                        return html;
                                    }
                                    else {
                                        if (data.DocType == 'Estimate') {
                                            var html = `
                                                                              <div class='dropdown ms-1'>

                                                                                                              <a href='${myUrlGetforEstimate}' class='text-decoration-none  ms-3 mt-1'>
                                                                                           Edit
                                                                                       </a>
                                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                      ${statusDependentHtml}

                                                                                  </ul>
                                                                              </div>
                                                                          `;

                                            return html;
                                        }
                                        if (data.DocType == 'Stock Count') {
                                            var html = `
                                                                              <div class='dropdown ms-1'>

                                                                                                                      <a href='${myUrlGetforStockCount}' class='text-decoration-none  ms-3 mt-1'>
                                                                                           Edit
                                                                                       </a>
                                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                      ${statusDependentHtml}

                                                                                  </ul>
                                                                              </div>
                                                                          `;

                                            return html;
                                        }
                                        if (data.DocType == 'Sales order') {
                                            var html = `
                                                                                      <div class='dropdown ms-1'>

                                                                                                                              <a href='${myUrlGetforSalesOrder}' class='text-decoration-none  ms-3 mt-1'>
                                                                                                   Edit
                                                                                               </a>
                                                                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                         <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                              ${statusDependentHtml}

                                                                                          </ul>
                                                                                      </div>
                                                                                  `;

                                            return html;
                                        }
                                        if (data.DocType == 'Sales receipt') {
                                            var html = `
                                                                                              <div class='dropdown ms-1'>

                                                                                                                                      <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none  ms-3 mt-1'>
                                                                                                           Edit
                                                                                                       </a>
                                                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                                      ${statusDependentHtml}

                                                                                                  </ul>
                                                                                              </div>
                                                                                          `;

                                            return html;
                                        }
                                        if (data.DocType == 'Delayed Charge') {
                                            var html = `
                                                                                                      <div class='dropdown ms-1'>

                                                                                                                                                      <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none  ms-3 mt-1'>
                                                                                                                   Edit
                                                                                                               </a>
                                                                                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                                         <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                                              ${statusDependentHtml}

                                                                                                          </ul>
                                                                                                      </div>
                                                                                                  `;

                                            return html;
                                        }

                                    }

                                }
                            },
                            visible: true, cellClick: function (e, cell) {
                                // Add a custom class to the cell when it's clicked
                                cell.getElement().classList.add('active-cell');
                            },
                        },

                    ],

                });
                // document.getElementById("salesPrint-pdf").addEventListener("click", function () {
                //     table.print(false, true);
                // });
                // document.getElementById("salesPrint-pdf").addEventListener("click", function () {
                //                                 table.download("pdf", "data.pdf", {
                //                                     orientation: "portrait", //set page orientation to portrait
                //                                     title: "Example Report", //add title to report
                //                                 });
                //                             });
                // document.getElementById("salesPrint-excel").addEventListener("click", function () {
                //     table.download("xlsx", "table.xlsx", { sheetName: "Table Data" });
                // });
            });


        }

         var customerApiUrl;
         let customersTable = new Tabulator("#customer-table");
         //Server-Side search functionality
        $('#searchInput').on('input', function () {
            var inputValue = $(this).val();
            // var url = '@Url.Action("GetCustomersForInvoice", "Sales")' + '?searchquery=' + inputValue;
            // customersTable.setData(url);
             customersTable.setData(customerApiUrl, { searchquery: inputValue });
        });

        var checkbox3 = [
            { title: "", field: "CheckBoxs", headerHozAlign: "left",  headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true, width: 50},
        ]

        var Actions3 = [
            {
                title: "Actions", field: "buttons", headerSort: false, hozAlign: "right",visible: true, resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    var openBalance = parseFloat(data.OpBalance);  // Remove non-numeric characters and convert to float

                    // Check if open balance is greater than 0
                    var showReceivePayment = openBalance > 0;
                    console.log("see data::", data);
                    //var myUrlGet = `editAccountHead(${data.Id})`;
                    var myUrlGet = `@Url.Action("EditCustomer", "Sales")?CustomerId=${data.Id}`;
                        var Edit = `editCustomer(${data.Id})`;
                    var Delete = `setDeleteUrl(${data.Id})`;
                    var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                    var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;
                    var myUrldelete = '@Url.Action("DeleteCustomer", "Sales")?customerId=' + data.Id;

                    //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                    var inActive = `setInactiveUrl(${data.Id}) `
                    var active = `setActiveUrl(${data.Id}) `

                    var printHtml = `
                                <a href='${myUrlprint}' class='text-decoration-none text-black ms-3 mt-1'>
                                    <i class='bi bi-pencil-square pe-1'></i> <span>Print</span>  <br />
                                </a>
                                        <div class='dropdown-divider m-0'></div>
                            `;

                    var editHtml = `
                                                <a onclick='${Edit}'  href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                </a>
                                                        <div class='dropdown-divider m-0'></div>
                                            `;
                    var deleteHtml = `
                                                <a onclick='${Delete}' href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-trash3'></i> <span>Delete</span>  <br />
                                                </a>

                                            `;

                    var viewHtml = `
                                                        <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                        <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                        </a>

                                            `;

                    var deleteHtmlAbc;
                    if (data.IsDelete == 0) {
                        deleteHtml = `
                                                                <a class='text-decoration-none text-black ms-3 mt-1' href='${myUrldelete}' id='InActive'>
                                    <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                </a>
                            `;
                    }

                //var statusDependentHtml = data.isPosted ? viewHtml : printHtml + editHtml + deleteHtml;
                    var statusDependentHtml =  editHtml + deleteHtml;
                var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")`;
                var createInvoice = `@Url.Action("AddInvoiceQB", "Sales")`;
                if (showReceivePayment)
                {
                    var html = `
                                <div class='dropdown ms-1'>

                                                    <a href='${paymentGet}' class='text-decoration-none  ms-3 mt-1'>
                                            Receive Payment
                                        </a>
                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                    <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                        ${statusDependentHtml}

                                    </ul>
                                </div>
                            `;

                    return html;
                }
                else
                {
                    var html = `
                                <div class='dropdown ms-1'>

                                                            <a href='${createInvoice}' class='text-decoration-none  ms-3 mt-1'>
                                            Create Invoice
                                        </a>
                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                    <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                        ${statusDependentHtml}

                                    </ul>
                                </div>
                            `;

                                    return html;
                                }

                    },
                visible: true, cellClick: function (e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                },
            },
        ]

        function CustomerGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Customer' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             CustomerglobalFields = JSON.parse(response.data.KeyValue);
                             pageSize = Number(CustomerglobalFields.pageSize);
                             $('#customer-rows').val(pageSize);
                             CustomerglobalFields = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "CheckBoxs" && column.field !== "buttons";
                            });

                            // Prepend the checkBox array at the start of exportcolumn
                            CustomerglobalFields = checkbox3.concat(CustomerglobalFields);
                            
                            // Append the Actions array at the end of exportcolumn
                            CustomerglobalFields = CustomerglobalFields.concat(Actions3);

                       }
                    }
                         
                        populateCheckbox3();
                        loadCustomerDetails();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideCustomer(colName) {
       
            customersTable.toggleColumn(colName);           
    
        }


          function populateCheckbox3(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = CustomerglobalFields.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideCustomer('${x.field}')" class="custom-control-input title-input" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListCustomer = document.getElementById('customerColumnList');
                columnListCustomer.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#customer-rows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            customersTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }


        function loadCustomerDetails()
        {
                    customerApiUrl = '@Url.Action("GetCustomersForInvoice", "Sales")',
                    customersTable = new Tabulator("#customer-table", {
                        // data: response.data,
                            movableColumns: true,
                            layout: "fitColumns",
                            rowHeight:40,
                            selectable: 1,
                            ajaxURL: customerApiUrl,
                            pagination: true,
                            height: "400px",
                            paginationMode: "remote",
                            paginationSize: pageSize,
                            paginationInitialPage: 1,
                            paginationSizeSelector: [5, 10, 25, 50, 100, 1000],
                            paginationCounter: "rows",
                            ajaxConfig: "get",
                            ajaxContentType: "json",

                            ajaxParams: function(url, params) {
                            params = params || {}; // Ensure params object exists

                            if (params.hasOwnProperty('searchquery')) {
                                return { searchquery: params.searchquery };
                            }

                            return {}; // Return empty object if searchquery is not present
                            },

                            ajaxResponse: function (url, params, response) {
                            customersTable.setMaxPage(response.last_page);
                            console.log("response.last_page", response.last_page);

                            dataLoadExpense = response.data;
                          /* console.log("dataLoadExpense:", dataLoadExpense);*/

                               return {

                                data: dataLoadExpense,
                                last_page: response.last_page,

                               };
                          },

                            columns: CustomerglobalFields,

                        });
                    document.getElementById("customerPrint-pdf").addEventListener("click", function () {
                        customersTable.print(false, true);
                    });
                    document.getElementById("customerPrint-excel").addEventListener("click", function () {
                        customersTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
                    });


                    
                   
                    // console.log("globalFieldsForCustomerList::", CustomerglobalFields);
                    //  let columnListCustomer = $("#customerColumnList");
                    //     columnListCustomer.empty();

                    // $.ajax({
                    //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
                    //     type: 'GET',
                    //     contentType: 'application/json',
                    //     data: {type: 'Customer' },
                    //     success: function (response) {
                        
                    //         if(response.Success == 0)
                    //         {
                    //             $.each(CustomerglobalFields, function (inde, field) {
                    //                 ////console.log("GLOBAL 2::",field);
                    //                 var title = field.title;
                    //                 var name = field.field;
                    //                 var visible = true;
                    //                 if (field.visible == false) {
                    //                     visible = false;
                    //                 }
                    //                 titles = `<li>

                    //                                 <a class="dropdown-item" href="#">
                    //                                 <div class="custom-control custom-checkboxs" >
                    //                                 <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
                    //                                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                    //                                 </div>
                    //                                 </a>
                    //                                 </li>`;
                    //                 columnListCustomer.append(titles);



                    //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                    //                     var checkbox = event.target;
                    //                     var isChecked = checkbox.checked;

                    //                     if (isChecked) {
                    //                         customersTable.showColumn(name);
                    //                     } else {
                    //                         customersTable.hideColumn(name);
                    //                     }
                    //                 });


                    //                 $(`${'#' + name}`).prop('checked', visible);


                    //                 $('.custom-control-label').on('click', function (e) {
                    //                     e.stopPropagation();
                    //                 });
                    //                 $('#dropdown-titles').on('click', function (e) {
                    //                     e.stopPropagation();
                    //                 });

                    //                 //Add event listener to the rows select input
                    //                 $("#customer-rows").on("change", function () {
                    //                     var selectedRows = $(this).val();
                    //                     if (selectedRows !== null) {
                    //                         // Convert the selected value to an integer
                    //                         var pageSize = parseInt(selectedRows);
                    //                         if (!isNaN(pageSize)) {
                    //                             // Set the page size for the parentTable
                    //                             customersTable.setPageSize(pageSize);

                    //                             //// You may also want to update the parent table height
                    //                             //updateParentTableHeight();
                    //                         }
                    //                     }
                    //                 });

                    //             });
                    //         }
                    //         else
                    //         {
                    //             var jsonData = response.data.KeyValue;
                    //             var columnData = JSON.parse(jsonData);

                               
                    //             $.each(CustomerglobalFields, function (index, globalField) {
                    //                 var matchedField = columnData.find(function (fieldData) {
                    //                     return fieldData.Field === globalField.field;
                    //                 });

                    //                 // If a match is found, update the visibility
                    //                 if (matchedField) {
                    //                     globalField.visible = matchedField.IsVisible;
                    //                 } else {
                    //                     globalField.visible = false; // Default to false if not found
                    //                 }

                    //                 if (matchedField.IsVisible == false) {
                    //                     customersTable.hideColumn(matchedField.Field);
                    //                 }
                    //                 else
                    //                 {
                    //                     customersTable.showColumn(matchedField.Field);
                    //                 }
                    //                 var title = globalField.title;
                    //                 var name = globalField.field;
                    //                 var visible = globalField.visible;

                    //                 var titles = `<li>
                    //                 <a class="dropdown-item" href="#">
                    //                     <div class="custom-control custom-checkboxs">
                    //                         <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
                    //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                    //                     </div>
                    //                 </a>
                    //               </li>`;

                    //                 // Append the generated HTML to your column list
                    //                 columnListCustomer.append(titles);

                    //                 // Set the checkbox state based on visibility
                    //                 $(`#${name}`).prop('checked', visible);

                    //                 // Add event listener to the checkbox to show/hide columns
                    //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                    //                     var checkbox = event.target;
                    //                     var isChecked = checkbox.checked;

                    //                     if (isChecked) {
                    //                         customersTable.showColumn(name);
                    //                     } else {
                    //                         customersTable.hideColumn(name);
                    //                     }
                    //                 });
                    //             });

                    //             // Prevent the dropdown from closing when clicking on a checkbox or label
                    //             $('.custom-control-label').on('click', function (e) {
                    //                 e.stopPropagation();
                    //             });
                    //             $('#dropdown-titles').on('click', function (e) {
                    //                 e.stopPropagation();
                    //             });

                    //             // Handle change event for #customer-rows
                    //             $("#customer-rows").on("change", function () {
                    //                 var selectedRows = $(this).val();
                    //                 if (selectedRows !== null) {
                    //                     var pageSize = parseInt(selectedRows);
                    //                     if (!isNaN(pageSize)) {
                    //                         customersTable.setPageSize(pageSize);
                    //                     }
                    //                 }
                    //             });

                    //         }
                    //     },
                    //     error: function (error) {
                    //         // Handle error
                    //         console.error("Error saving settings:", error);
                    //     }
                    // });

                        

            $("#saveColumnSettings").on("click", function () {
                var columnData = [];

                var colDefs = customersTable.getColumnDefinitions();

                var selectElement = document.getElementById("customer-rows");
                var selectedValue = selectElement.value;

                $(".title-input").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                    colDefs.forEach(function(colDef) {
                        if (colDef.field === field) {
                           colDef.visible = isVisible;  // Set visibility based on checkbox state                
                        }
                    });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'Customer' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

            function DeleteFilter3(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             loadCustomerDetails();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };

            // customer gear functionality end


            getTermsDropdownForCustomers();

            // $.ajax({
            //     url: '@Url.Action("GetCustomersForInvoice", "Sales")',
            //     type: 'GET', // or 'GET' depending on your controller method

            //     success: function (response) {
            //         // toastr.success(response.message, "", {
            //         //     "toastClass": "toast-green",
            //         // });


            //     },
            //     error: function (error) {
            //         // Handle any errors that occur during the AJAX request
            //         console.error("AJAX Error:", error);
            //     }
            // });

        }


      $('input[name=RptType3]').click(function () {
          var reporttypeind = $("input[name=RptType3]:checked").val();
          //alert(reporttype);

          $.ajax({
              type: 'POST',
              url: '@Url.Action("SetSessionReportType", "Accounts")',
              dataType: 'json',
              async: true,
              data: { reporttype: reporttypeind },
              success: function (response) {
                  //  window.location.href = response.Url;

                  //window.open(response.Url, '_blank')
              },
              error: function (ex) {
                  alert('Failed.' + ex);
              }

          });

      });


        function getTermsDropdownForPayments() {
                $.ajax({
                    url: '@Url.Action("GetDoctypeList", "Sales")',
                    data: { criteria: 'Receive payment' },
                    success: function (data) {
                        const ulForpayments = document.querySelector('#ul-id-for-payments');
                    ulForpayments.innerHTML = '';
                        for (var i = 0; i < data.length; i++) {
                            const li = document.createElement('li');
                            li.className = 'dropdown-item';
                            const Type = data[i].DocTypeValue;
                            //const linkUrl = '/Sales/' + Type;
                            const linkUrl = '@Url.Action("YourActionName", "Sales")'.replace('YourActionName', Type);


                            // Create a clickable link
                            const a = document.createElement('a');
                            a.className = 'dropdown-link';
                            a.style.color = 'black';
                            a.setAttribute('data-id', data[i].Id);
                            a.textContent = data[i].DocType;

                            li.addEventListener('mouseover', function () {
                                a.style.color = 'white';
                            });

                            // Change text color back to black when not hovered
                            li.addEventListener('mouseout', function () {
                                a.style.color = 'black';
                            });
                            // Add an event listener to the link to redirect to the URL
                            li.addEventListener('click', function () {
                                window.location.href = linkUrl;
                            });

                            li.appendChild(a);
                            ulForpayments.appendChild(li);
                        }
                    }
                });

         };

        function getTermsDropdownForCustomers() {
            $.ajax({
                url: '@Url.Action("GetDoctypeList", "Sales")',
                data: { criteria: 'All' },
                success: function (data) {
                    const ulForpayments = document.querySelector('#ul-id-for-Sales');
                    ulForpayments.innerHTML = '';
                    for (var i = 0; i < data.length; i++) {
                        const li = document.createElement('li');
                        li.className = 'dropdown-item';
                        const Type = data[i].DocTypeValue;
                        //const linkUrl = '/Sales/' + Type;
                        const linkUrl = '@Url.Action("YourActionName", "Sales")'.replace('YourActionName', Type);


                        // Create a clickable link
                        const a = document.createElement('a');
                        a.className = 'dropdown-link';
                        a.style.color = 'black';
                        a.setAttribute('data-id', data[i].Id);
                        a.textContent = data[i].DocType;

                        li.addEventListener('mouseover', function () {
                            a.style.color = 'white';
                        });

                        // Change text color back to black when not hovered
                        li.addEventListener('mouseout', function () {
                            a.style.color = 'black';
                        });
                        // Add an event listener to the link to redirect to the URL
                        li.addEventListener('click', function () {
                            window.location.href = linkUrl;
                        });

                        li.appendChild(a);
                        ulForpayments.appendChild(li);
                    }
                }
            });

        };
       
         function RedirectToViewTransaction(rowData) {

             var url = '@Url.Action("ViewReceivePaymentQB", "Sales")?id=' + rowData.Id;

             window.open(url, '_blank');
        }
        var paymentTable;

          $('#searchInput3').on('input', function() {
            var inputValue = $(this).val();
            var url = '@Url.Action("GetReceivePaymentList", "Sales")' + '?searchquery=' + inputValue;
            paymentTable.setData(url);

          });

          var checkbox2 = [
                { title: "", field: "CheckBox1", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true, width: 50 },
          ]

          var Actions2 = [
           {
                title: "Actions", field: "button1", headerHozAlign: "center",vertAlign: "middle", headerSort: false,visible: true, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    //var myUrlGet = `editAccountHead(${data.Id})`;
                    var myUrlGet = `@Url.Action("EditReceivePaymentQB", "Sales")?id=${data.Id}`;
                    var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                    var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;
                    var transactionViewUrl = '@Url.Action("ViewReceivePaymentQB", "Sales")?id=' + data.Id;
                    var transactionReportViewUrl = '@Url.Action("TransactionVoucherViewReport", "Admin")?TransactionId=' + data.Id;
                    //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                    var inActive = `setInactiveUrl(${data.Id}) `
                    var active = `setActiveUrl(${data.Id}) `

                    var printHtml = `
                                                <a href='${transactionReportViewUrl}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Print</span>  <br />
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;

                    var ReportViewHtml = `
                                        <a href='${viewUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>View</span>  <br />
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;
                    var editHtml = `
                                        <a href='${myUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;

                    var viewHtml = `
                                                <a href='${transactionViewUrl}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                </a>
                                              
                                    `;

                    var deleteHtml;
                    if (data.IsDelete == 0) {
                        deleteHtml = `
                                <a onclick="setDeleteUrlForPayment(${data.Id});" class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                            <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                        </a>
                    `;
                    }

                    var statusDependentHtml = data.isPost ? viewHtml : printHtml + editHtml + deleteHtml;

                    var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")?id=${data.Id}`;
                    var html = `
                                        <div class='dropdown ms-1'>

                                                                    <a href='${transactionViewUrl}' class='text-decoration-none  ms-3 mt-1'>
                                                    View Payment
                                                </a>
                                            <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                            <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                ${statusDependentHtml}

                                            </ul>
                                        </div>
                                    `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                },
            },
          ]

          function PaymentGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Receive_Payment' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             PaymentGlobalFields = JSON.parse(response.data.KeyValue);
                             pageSize = Number(PaymentGlobalFields.pageSize);
                             $('#payment-rows').val(pageSize);
                             PaymentGlobalFields = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "CheckBox1" && column.field !== "button1";
                            });

                            // Prepend the checkBox array at the start of exportcolumn
                            PaymentGlobalFields = checkbox2.concat(PaymentGlobalFields);
                            
                            // Append the Actions array at the end of exportcolumn
                            PaymentGlobalFields = PaymentGlobalFields.concat(Actions2);

                       }
                    }
                         
                        populateCheckbox2();
                        loadPaymentDetails();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHidePayment(colName) {
       
            paymentTable.toggleColumn(colName);           
    
        }


          function populateCheckbox2(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = PaymentGlobalFields.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHidePayment('${x.field}')" class="custom-control-input title-input payment-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListPayment = document.getElementById('paymentColumnList');
                columnListPayment.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#payment-rows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            paymentTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }


        function loadPaymentDetails() {
            var durationValue = $("#PaymentDuration").val();
            var customerId = $("#PaymentCustomers").val();

            paymentApiUrl = '@Url.Action("GetReceivePaymentList", "Sales")' + '?duration=' + durationValue + '&customerId=' + customerId,

               paymentTable = new Tabulator("#payment-table", {
                        
                        height: "400px",
                        movableColumns: true,
                        layout: "fitColumns",
                        ajaxURL: paymentApiUrl,
                        pagination: true,
                        scrollHorizontal: true,
                        paginationMode: "remote",
                        paginationSize: pageSize,
                        paginationInitialPage: 1,
                        paginationSizeSelector: [5, 10, 25, 50, 100, 1000],
                        paginationCounter: "rows",
                        ajaxConfig: "get",
                        ajaxContentType: "json",

                        ajaxResponse: function (url, params, response) {
                        paymentTable.setMaxPage(response.last_page);
                        console.log("response.last_page", response.last_page);

                        dataLoadExpense = response.data;
                      /* console.log("dataLoadExpense:", dataLoadExpense);*/

                           return {

                            data: dataLoadExpense,
                            last_page: response.last_page,

                           };
                        },

                        columns: PaymentGlobalFields,

                    });
                    // document.getElementById("paymentPrint-pdf").addEventListener("click", function () {
                    //     paymentTable.print(false, true);
                    // });
                   
            getTermsDropdownForPayments();
        }
         document.getElementById("paymentPrint-pdf").addEventListener("click", function () {
                        paymentTable.download("pdf", "data.pdf", {
                            orientation: "portrait", //set page orientation to portrait
                            title: "Example Report", //add title to report
                        });
                    });
                    document.getElementById("paymentPrint-excel").addEventListener("click", function () {
                        paymentTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
                    });


             
             //column hide/show gear settings
        // console.log("globalFieldsForSalesList::", PaymentGlobalFields);
        // let columnListPayment = $("#paymentColumnList");
        // columnListPayment.empty();

        // // Initialize columns page load
        // $.ajax({
        //     url: '@Url.Action("GetFilteredColumn", "Sales")',
        //     type: 'GET',
        //     contentType: 'application/json',
        //     data: { type: 'Receive Payment' },
        //     success: function (response) {

        //         if (response.Success == 0) {                                      
                    
        //                 $.each(PaymentGlobalFields, function (index, field) {
        //                 ////console.log("GLOBAL 2::",field);
        //                 var title = field.title;
        //                 var name = field.field;
        //                 var visible = true;
        //                 if (field.visible == false) {
        //                     visible = false;
        //                 }
        //              titles = `<li>
        //                     <a class="dropdown-item" href="#">
        //                     <div class="custom-control custom-checkboxs" >
        //                     <input type="checkbox" class="custom-control-input title-input payment-column" id="${name}" value="${name}">
        //                     <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
        //                     </div>
        //                     </a>
        //                     </li>`;
        //             columnListPayment.append(titles);

        //             document.querySelector(`#${name}`).addEventListener('click', function (event) {
        //                 var checkbox = event.target;
        //                 var isChecked = checkbox.checked;

        //                 if (isChecked) {
        //                     paymentTable.showColumn(name);
        //                 } else {
        //                     paymentTable.hideColumn(name);
        //                 }
        //             });


        //             $(`${'#' + name}`).prop('checked', visible);


        //             $('.custom-control-label').on('click', function (e) {
        //                 e.stopPropagation();
        //             });
        //             $('#dropdown-titles').on('click', function (e) {
        //                 e.stopPropagation();
        //             });

        //             //Add event listener to the rows select input
        //             $("#payment-rows").on("change", function () {
        //                 var selectedRows = $(this).val();
        //                 if (selectedRows !== null) {
        //                     // Convert the selected value to an integer
        //                     var pageSize = parseInt(selectedRows);
        //                     if (!isNaN(pageSize)) {
        //                         // Set the page size for the parentTable
        //                         paymentTable.setPageSize(pageSize);

        //                         //// You may also want to update the parent table height
        //                         //updateParentTableHeight();
        //                     }
        //                 }
        //             });

        //         });
        //         }
        //         else {
        //             var jsonData = response.data.KeyValue;
        //             var columnData = JSON.parse(jsonData);


        //             $.each(PaymentGlobalFields, function (index, globalField) {
        //                 var matchedField = columnData.find(function (fieldData) {
        //                     return fieldData.Field === globalField.field;
        //                 });

        //                 // If a match is found, update the visibility
        //                 if (matchedField) {
        //                     globalField.visible = matchedField.IsVisible;
        //                 } else {
        //                     globalField.visible = false; // Default to false if not found
        //                 }

        //                 if (matchedField.IsVisible == false) {
        //                     setTimeout(function () {
        //                         paymentTable.hideColumn(matchedField.Field);
        //                     }, 3000);
        //                 }
        //                 else {
        //                     setTimeout(function () {
        //                         paymentTable.showColumn(matchedField.Field);
        //                     }, 3000);
        //                 }
        //                 var title = globalField.title;
        //                 var name = globalField.field;
        //                 var visible = globalField.visible;

        //                 var titles = `<li>
        //                                     <a class="dropdown-item" href="#">
        //                                     <div class="custom-control custom-checkboxs">
        //                                         <input type="checkbox" class="custom-control-input title-input payment-column" id="${name}" value="${name}">
        //                                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
        //                                     </div>
        //                                     </a>
        //                                   </li>`;

        //                 // Append the generated HTML to your column list
        //                 columnListPayment.append(titles);

        //                 // Set the checkbox state based on visibility
        //                 $(`#${name}`).prop('checked', visible);

        //                 // Add event listener to the checkbox to show/hide columns
        //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
        //                     var checkbox = event.target;
        //                     var isChecked = checkbox.checked;

        //                     if (isChecked) {
        //                         paymentTable.showColumn(name);
        //                     } else {
        //                         paymentTable.hideColumn(name);
        //                     }
        //                 });
        //             });

        //             // Prevent the dropdown from closing when clicking on a checkbox or label
        //             $('.custom-control-label').on('click', function (e) {
        //                 e.stopPropagation();
        //             });
        //             $('#dropdown-titles').on('click', function (e) {
        //                 e.stopPropagation();
        //             });

        //             // Handle change event for #customer-rows
        //             $("#payment-rows").on("change", function () {
        //                 var selectedRows = $(this).val();
        //                 if (selectedRows !== null) {
        //                     var pageSize = parseInt(selectedRows);
        //                     if (!isNaN(pageSize)) {
        //                         paymentTable.setPageSize(pageSize);
        //                     }
        //                 }
        //             });

        //         }
        //     },
        //     error: function (error) {
        //         // Handle error
        //         console.error("Error saving settings:", error);
        //     }
        // });



        $("#savePayment").on("click", function () {
            var columnData = [];

            var colDefs = paymentTable.getColumnDefinitions();

            var selectElement = document.getElementById("payment-rows");
            var selectedValue = selectElement.value;

            $(".payment-column").each(function () {
                var field = $(this).val();
                var title = $(`label[for='${field}']`).text();
                var isVisible = $(this).is(":checked");

                colDefs.forEach(function(colDef) {
                    if (colDef.field === field) {
                       colDef.visible = isVisible;  // Set visibility based on checkbox state                
                    }
                });

                // columnData.push({
                //     Title: title,
                //     Field: field,
                //     IsVisible: isVisible
                // });
            });

            var finaldata = {
                colDefs:colDefs,
                pageSize: selectedValue 
            };

            var jsonData = JSON.stringify(finaldata);

            // Send data via AJAX
            $.ajax({
                url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ keyValue: jsonData, type: 'Receive_Payment' }),
                success: function (response) {
                    toastr.success(response.ex, "", {
                        "toastClass": "toast-green",
                    });
                },
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });
        });

           function DeleteFilter2(data) {
 
                $.ajax({
                    url: '@Url.Action("DeleteColumnFilter", "Sales")',
                    type: "get",
                    data: { type: data },               
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                            loadPaymentDetails();
                        }
         
                    },
                    error: function (xhr, status, error) {
                        console.error(xhr.responseText);
                        toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                    }
                });
    
 
        };

            // payment gear functionality end


         function openOffcanvas1(rowData) {
            var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasForReceivePayment'));
            
            var id = rowData.Id;
            var purchaseDate = formatDateToCustomDate(rowData.InputDate) || '';
            
            var supplierName = rowData.CustomerName1 || '';
            var totalAmount = rowData.TransactionAmount || '';
             var formattedTotalAmount = formatCurrency(totalAmount);
            var statusRemarks = rowData.Remarks || '';
            var billingAddress = rowData.PrimaryAddress || '';
            var phoneNo = rowData.PhoneNo || 'NA';
            var items = rowData.Items || [];
            var docType = 'Receive Payment';
            $("#CodeForReceivePayments").text(rowData.TransactionCode);

            var myUrlGetforInvoice = `@Url.Action("AddBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            var myUrlGetforCreditNote = `@Url.Action("AddBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            var myUrlGetforReceivePayment = `@Url.Action("EditReceivePaymentQB", "Sales")?id=${id}`;
            var myUrlGetforSalesOrder = myUrlGetforInvoice;
            var myUrlGetforSalesReceipt = myUrlGetforInvoice;
            var myUrlGetforDelayedCharge = `@Url.Action("AddBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            

            // Populate the div elements
            document.getElementById('FirstDiv1').innerHTML = 'Total:</br><h4>' + formattedTotalAmount + '</h4>Input Date:</br>' + purchaseDate ;
            document.getElementById('SecondDiv1').innerHTML = '<strong>' + supplierName + '</strong>'+ '</br>Billling address:</br>' + billingAddress + '</br>' + rowData.EmailId + '</br>Phone:' + phoneNo;
            document.getElementById('ThirdDiv1').innerHTML = '<strong>Status:</strong> ' + statusRemarks
            document.getElementById('FourthDiv1').innerHTML = '<strong>Product and services:</strong></br>'  ;
             items.forEach(function(item, index) {
                var itemName = item.Name || '';
                var itemAmount = item.Amount || '';

                // Create a new row for each item
                var row = '<div style="display: flex; justify-content: space-between;">';
                row += '<span>' + itemName + '</span>';
                row += '<span>' + formatCurrency(itemAmount) + '</span>';
                row += '</div>';

                document.getElementById('FourthDiv1').innerHTML += row;
            });
            document.getElementById('FifthDiv1').innerHTML = '<strong>More info</strong></br>' + 'Memo:' + rowData.MessageInvoice;

            document.getElementById('PaymentIdForJournal').value = `${id}`;
            

            var button = document.createElement("button");
            if (docType == 'Receive Payment') {
                button.textContent = "Edit Payment";
            }
            else
            {
                button.textContent = "Edit " + docType;
            }
            
            button.className = "btn btn-success";
            button.addEventListener("click", function() {
                if (docType == 'Invoice') {
                    window.location.href = myUrlGetforInvoice;
                }
                if (docType == 'Credit Note') {
                    window.location.href = myUrlGetforCreditNote;
                }
                if (docType == 'Receive Payment') {
                    window.location.href = myUrlGetforReceivePayment;
                }
                if (docType == 'Estimate') {
                    window.location.href = myUrlGetforSalesOrder;
                }
                if (docType == 'Sales receipt') {
                    window.location.href = myUrlGetforSalesReceipt;
                }
                if (docType == 'Delayed Charge') {
                    window.location.href = myUrlGetforDelayedCharge;
                }
                if (docType == 'Stock Count') {
                    window.location.href = myUrlGetforDelayedCharge;
                }
                
            });

            // Create a div for the button
            var buttonContainer = document.createElement("div");
            buttonContainer.className = "text-end"; // Align the button to the right

            buttonContainer.appendChild(button);

            // Append the buttonContainer to the SixthDiv
            document.getElementById('SixthDiv1').innerHTML = '';
            document.getElementById('SixthDiv1').appendChild(buttonContainer);
            offcanvas.show();

        }

       
                
        var billPaymentTable; 
         document.getElementById('paymentJournal').addEventListener('click', function() {
            // Call the initTabulator function when the button is clicked
            initTabulatorPayment();
          });
           var journalFields1 = [
                  
                                { title: "Account Head",  field: "AccName" },
                                { title: "Group Head",  field: "GroupHead",visible: false },
                                { title: "Debit", field: "TKDebit",headerHozAlign: "right",hozAlign: "right", bottomCalc: "sum", visible: false,
                                  bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                { title: "Credit", field: "TKCredit",headerHozAlign: "right",hozAlign: "right", bottomCalc: "sum",visible: false,
                                    bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                {
                                    title: "Debit", field: "TKDebitLocal", headerHozAlign: "right", hozAlign: "right", bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                {
                                    title: "Credit", field: "TKCreditLocal", headerHozAlign: "right", hozAlign: "right", bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                
          ]


      function initTabulatorPayment() {         
     
     var SourceId = $("#PaymentIdForJournal").val() ;
     var Source = "Receive Payment";     
     
     $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("JournalforSalesExpenses", "Purchase")',
                data: { SourceId: SourceId, Source: Source },   

                success: function(result) {   
                    
                    dataabc = result.data;                   

               if (result.data.length === 0) {
                // Show message if dataabc is 0
                alert("This document is not Posted");
            } else {

            billPaymentTable = new Tabulator("#payment-table1", {
                    layout: "fitColumns",
                    data: dataabc,
                    columns: journalFields1
               }); 

            }

              }
          });
    
}



        
            


        $('input[name=RptType2]').click(function () {
          var reporttypeind = $("input[name=RptType2]:checked").val();
          //alert(reporttype);

          $.ajax({
              type: 'POST',
              url: '@Url.Action("SetSessionReportType", "Accounts")',
              dataType: 'json',
              async: true,
              data: { reporttype: reporttypeind },
              success: function (response) {
                  //  window.location.href = response.Url;

                  //window.open(response.Url, '_blank')
              },
              error: function (ex) {
                  alert('Failed.' + ex);
              }

          });

      });

        function setDeleteUrlForPayment(data) {
            var transactionDeleteUrl = '@Url.Action("DeleteTransaction", "Admin")';

            alert('Are you sure want to delete?');
            $.ajax({
                type: "GET",
                data: { TransactionId: data },
                url: transactionDeleteUrl,
                success: function (response) {
                    if (response.success == "1") {
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-green",
                        });
                        //alert('deleted');
                        loadPaymentDetails();
                        //initjsGrid();
                    }
                    else if (response.success == "0") {
                        //alert()
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-red",
                        });
                        //initjsGrid();
                    }
                }
            });
        };
    </script>
    <script>
        var pageSize = 5;

        $("#CategoryId,#WarehouseId,#BrandId,#ModelId,#ROL").on("change", function () {
            // Call initTabulator() with the updated CategoryId
            initTabulatorForProduct();
        });

        var parentTable;

        //Server-Side search functionality
        // $('#searchInput2').on('input', function() {
        //        var inputValue = $(this).val();
        //        var url = '@Url.Action("GetProductList", "Admin")' + '?searchquery=' + inputValue;
        //        parentTable.setData(url);

        // });

        var Actions4 = [
             {
                title: "Action", field: "ProAction", visible: true,
                formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    var myUrledit = '@Url.Action("EditProduct", "Admin")?productId=' + data.Id;
                    var myUrlcopy = '@Url.Action("CopyProduct", "Admin")?productId=' + data.Id;
                    // var myUrldelete = '@Url.Action("DeleteProduct", "Sales")?productId=' + data.Id;
                    var myUrldelete = `setDeleteProductUrl(${data.Id}) `;
                    var message = `return confirm('Are you sure you want to Remove the Product Information ?')`;

                    var editButton = document.createElement('button');
                    editButton.className = 'btn btn-sm dropdown-toggle dropdown-toggle-split shadow-none';
                    editButton.dataset.bsToggle = 'dropdown';
                    editButton.style.marginLeft = "0px";
                    //editButton.innerHTML = 'View Product';
                    var spaceSpan = document.createElement('span');
                    spaceSpan.style.marginRight = '7px';
                    var textSpan = document.createElement('span');
                    textSpan.style.color = 'blue'; 
                    textSpan.appendChild(document.createTextNode('View Product'));
                    editButton.appendChild(textSpan);
                    editButton.appendChild(spaceSpan);

                    var dropdown = document.createElement('ul');
                    dropdown.className = 'dropdown-menu item-menu';
                    var editItem = document.createElement('li');
                    editItem.classList.add("hoverable");
                    editItem.style.paddingLeft = "20px";
                    editItem.innerHTML = `<i class="bi bi-pencil-square"></i> Edit`;
                    editItem.addEventListener('click', function () {
                        // Call your function with the data.Id parameter
                            populateProductData(data.Id);
                    });

                    var dividerItem = document.createElement('li');
                    dividerItem.className = 'dropdown-divider';

                    var deleteItem = document.createElement('li');
                    deleteItem.innerHTML = `<a  onclick="${myUrldelete}" class="dropdown-item" target="_blank"><i class="bi bi-x"></i> Delete</a>`;

                    dropdown.appendChild(editItem);
                    dropdown.appendChild(dividerItem); 
                    dropdown.appendChild(deleteItem);

                    var buttonGroup = document.createElement('div');
                    buttonGroup.className = 'btn-group';
                    buttonGroup.appendChild(editButton);
                    buttonGroup.appendChild(dropdown);

                    return buttonGroup;
                },

                visible: true, cellClick: function (e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                },
            }
        ]

        function ProductGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Product' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             globalFields = JSON.parse(response.data.KeyValue);
                             pageSize = Number(globalFields.pageSize);
                             $('#product-rows').val(pageSize);
                             globalFields = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "ProAction";
                            });                            
                            
                            // Append the Actions array at the end of exportcolumn
                            globalFields = globalFields.concat(Actions4);

                       }
                    }
                         
                        populateCheckbox4();
                        initTabulatorForProduct();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideProduct(colName) {
       
            parentTable.toggleColumn(colName);           
    
        }


          function populateCheckbox4(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = globalFields.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideProduct('${x.field}')" class="custom-control-input title-input product-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListProduct = document.getElementById('productColumnList');
                columnListProduct.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#product-rows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            parentTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }

        function initTabulatorForProduct() {

            var CategoryId = $("#CategoryId").val();
            var ROL = $("#ROL").val();
            var WarehouseId = $('#WarehouseId').val();
            var BrandId = $('#BrandId').val();
            var ModelId = $("#ModelId option:selected").text() || "";

            // Define the Tabulator table instance
            parentTable = new Tabulator("#product-table", {

                layout: "fitColumns",
                height: "fitDataFill",
                selectable: 1,
                height: "450px",
                movableColumns: true,
                pagination: true,
                scrollHorizontal: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000, 5000],
                paginationCounter: "rows",
                //paginationCounter: "pages",

                columnDefaults: {
                    resizable: true,
                },

                ajaxURL: '@Url.Action("GetProductList1", "Admin")' + '?CategoryId=' + CategoryId + '&ROL=' + ROL + '&WarehouseId=' + WarehouseId + '&BrandId=' + BrandId + '&ModelId=' + ModelId,
                ajaxConfig: "get",
                ajaxContentType: "json",

                ajaxResponse: function (url, params, response) {
                    parentTable.setMaxPage(response.last_page);
                    console.log("response.last_page", response.last_page);

                    dataLoad = response.data;
                    console.log("load:", dataLoad);
                    console.log("total:", response.total);
                    totalValue = response.total;
                    return {

                        data: response.data,
                        last_page: response.last_page,
                        total: response.total
                    };
                },
                columns: globalFields,
                ajaxURLGenerator: function (url, config, params) {                   
                    //return request url
                    return url + "&searchquery=" + JSON.stringify(params); //encode parameters as a json object
                },

                 rowFormatter: function (row) {
                        // Create and style holder elements for nested table
                        var holderEl = document.createElement("div");
                        var tableEl = document.createElement("div");

                        holderEl.style.boxSizing = "border-box";

                        holderEl.appendChild(tableEl);

                        row.getElement().appendChild(holderEl);

                        var childData = row.getData().BatchSerial; // Get the child data array for the current row

                        var childTable = new Tabulator(tableEl, {
                            
                            data: childData, // Pass the child data array to the child table
                            columns: [
                                { title: "Date", field: "PurchaseDate",headerHozAlign: "left",hozAlign: "left",width:200, resizable: false },
                                { title: "Batch Serial", field: "BatchSerialNo",headerHozAlign: "left",hozAlign: "left",width:250, resizable: false },
                                { title: "Purchase Code", field: "PurchaseCode",headerHozAlign: "left",hozAlign: "left",width:250, resizable: false },
                                { title: "Quantity",field: "BatchQty",headerHozAlign: "right",hozAlign: "right",width:200,bottomCalc: "sum", resizable: false },                               
                                { title: "Amount", field: "Amount",headerHozAlign: "right",hozAlign: "right",width:100,bottomCalc: "sum", resizable: false },
                                { title: "SupplierName", field: "SupplierName",headerHozAlign: "right",hozAlign: "right",width:200, resizable: false },
                                                              
                            ],
                        });

                     var detailsIconEl = row.getElement().querySelector(".btn-details-icon");

                     detailsIconEl.addEventListener("click", function (event) {
                      event.stopPropagation();

                       if (childTable.getRows().length === 0) {
                       childTable.setData(childData);
                       }

                       holderEl.classList.toggle("child-table-hidden");
                       holderEl.classList.toggle("child-table-visible");

                     

                        if (holderEl.classList.contains("child-table-visible")) {
                         detailsIconEl.className = "fas fa-chevron-down btn-details-icon"; // Use collapse icon
                         } else {
                         detailsIconEl.className = "fas fa-plus btn-details-icon"; // Use expand icon
                         }
                     });

                        // Hide the child table initially
                        holderEl.classList.add("child-table-hidden");

                    },
            });
              // document.getElementById("print-table").addEventListener("click", function () {
              //       parentTable.print(false, true);
              //   });
              document.getElementById("print-table").addEventListener("click", function () {
                        parentTable.download("pdf", "data.pdf", {
                               orientation: "portrait", //set page orientation to portrait
                               title: "Example Report", //add title to report
                        });
                });
                document.getElementById("download-xlsx").addEventListener("click", function () {
                    parentTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
                });
            parentTable.on("rowClick", function (e, row) {
                console.log("Row clicked: ", row.getData());
            });
        }


        //column hide/show gear settings
        // console.log("globalFieldsForSalesList::", globalFields);
        // let columnListProduct = $("#productColumnList");
        // columnListProduct.empty();

        // // Initialize columns page load
        // $.ajax({
        //     url: '@Url.Action("GetFilteredColumn", "Sales")',
        //     type: 'GET',
        //     contentType: 'application/json',
        //     data: { type: 'Product' },
        //     success: function (response) {

        //         if (response.Success == 0) {                                      
        //             $.each(globalFields, function (index, field) {
        //             ////console.log("GLOBAL 2::",field);
        //             var title = field.title;
        //             var name = field.field;
        //             var visible = true;
        //             if (field.visible == false) {
        //                 visible = false;
        //             }

        //             var isDisabled = name === 'CostPrice' && @IsStoreKeeper === 1;

        //             titles = `<li>
        //                     <a class="dropdown-item" href="#">
        //                     <div class="custom-control custom-checkboxs" >
        //                     <input type="checkbox" class="custom-control-input title-input product-column" id="${name}" value="${name}" ${isDisabled ? 'disabled' : ''} >
        //                     <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
        //                     </div>
        //                     </a>
        //                     </li>`;
        //             columnListProduct.append(titles);

        //             document.querySelector(`#${name}`).addEventListener('click', function (event) {
        //                 var checkbox = event.target;
        //                 var isChecked = checkbox.checked;

        //                 if (isChecked) {
        //                     parentTable.showColumn(name);
        //                 } else {
        //                     parentTable.hideColumn(name);
        //                 }
        //             });


        //                 $(`${'#' + name}`).prop('checked', visible);


        //                 $('.custom-control-label').on('click', function (e) {
        //                     e.stopPropagation();
        //                 });
        //                 $('#dropdown-titles').on('click', function (e) {
        //                     e.stopPropagation();
        //                 });

        //                 //Add event listener to the rows select input
        //                 $("#product-rows").on("change", function () {
        //                     var selectedRows = $(this).val();
        //                     if (selectedRows !== null) {
        //                         // Convert the selected value to an integer
        //                         var pageSize = parseInt(selectedRows);
        //                         if (!isNaN(pageSize)) {
        //                             // Set the page size for the parentTable
        //                             parentTable.setPageSize(pageSize);

        //                             //// You may also want to update the parent table height
        //                             //updateParentTableHeight();
        //                         }
        //                     }
        //                 });

        //             });
        //         }
        //         else {
        //             var jsonData = response.data.KeyValue;
        //             var columnData = JSON.parse(jsonData);


        //             $.each(globalFields, function (index, globalField) {
        //                 var matchedField = columnData.find(function (fieldData) {
        //                     return fieldData.Field === globalField.field;
        //                 });

        //                 // If a match is found, update the visibility
        //                 if (matchedField) {
        //                     globalField.visible = matchedField.IsVisible;
        //                 } else {
        //                     globalField.visible = false; // Default to false if not found
        //                 }

        //                 if (matchedField.IsVisible == false) {
        //                     setTimeout(function () {
        //                         parentTable.hideColumn(matchedField.Field);
        //                     }, 3000);
        //                 }
        //                 else {
        //                     setTimeout(function () {
        //                         parentTable.showColumn(matchedField.Field);
        //                     }, 3000);
        //                 }
        //                 var title = globalField.title;
        //                 var name = globalField.field;
        //                 var visible = globalField.visible;

        //                 var titles = `<li>
        //                                     <a class="dropdown-item" href="#">
        //                                     <div class="custom-control custom-checkboxs">
        //                                         <input type="checkbox" class="custom-control-input title-input product-column" id="${name}" value="${name}">
        //                                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
        //                                     </div>
        //                                     </a>
        //                                   </li>`;

        //                 // Append the generated HTML to your column list
        //                 columnListProduct.append(titles);

        //                 // Set the checkbox state based on visibility
        //                 $(`#${name}`).prop('checked', visible);

        //                 // Add event listener to the checkbox to show/hide columns
        //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
        //                     var checkbox = event.target;
        //                     var isChecked = checkbox.checked;

        //                     if (isChecked) {
        //                         parentTable.showColumn(name);
        //                     } else {
        //                         parentTable.hideColumn(name);
        //                     }
        //                 });
        //             });

        //             // Prevent the dropdown from closing when clicking on a checkbox or label
        //             $('.custom-control-label').on('click', function (e) {
        //                 e.stopPropagation();
        //             });
        //             $('#dropdown-titles').on('click', function (e) {
        //                 e.stopPropagation();
        //             });

        //             // Handle change event for #customer-rows
        //             $("#product-rows").on("change", function () {
        //                 var selectedRows = $(this).val();
        //                 if (selectedRows !== null) {
        //                     var pageSize = parseInt(selectedRows);
        //                     if (!isNaN(pageSize)) {
        //                         parentTable.setPageSize(pageSize);
        //                     }
        //                 }
        //             });

        //         }
        //     },
        //     error: function (error) {
        //         // Handle error
        //         console.error("Error saving settings:", error);
        //     }
        // });



        $("#saveProduct").on("click", function () {
            var columnData = [];

            var colDefs = parentTable.getColumnDefinitions();

            var selectElement = document.getElementById("product-rows");
            var selectedValue = selectElement.value;

            $(".product-column").each(function () {
                var field = $(this).val();
                var title = $(`label[for='${field}']`).text();
                var isVisible = $(this).is(":checked");

                colDefs.forEach(function(colDef) {
                    if (colDef.field === field) {
                       colDef.visible = isVisible;  // Set visibility based on checkbox state                
                    }
                });

                // columnData.push({
                //     Title: title,
                //     Field: field,
                //     IsVisible: isVisible
                // });
            });

            var finaldata = {
                colDefs:colDefs,
                pageSize: selectedValue 
            };

            var jsonData = JSON.stringify(finaldata);

            // Send data via AJAX
            $.ajax({
                url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ keyValue: jsonData, type: 'Product' }),
                success: function (response) {
                    toastr.success(response.ex, "", {
                        "toastClass": "toast-green",
                    });
                },
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });
        });

        function DeleteFilter4(data) {
 
             $.ajax({
                 url: '@Url.Action("DeleteColumnFilter", "Sales")',
                 type: "get",
                 data: { type: data },               
                 success: function (response) {
                     if (response.success == "1") {
                         toastr.success(response.msg, "", {
                             "toastClass": "toast-green",
                         });
                         initTabulatorForProduct();
                     }
         
                 },
                 error: function (xhr, status, error) {
                     console.error(xhr.responseText);
                     toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                 }
             });
    
 
        };
         // Product gear functionality end

          function customDetailsButtonFormatter(cell, formatterParams, onRendered) {
              const batchSerials = cell.getRow().getData().BatchSerial;

            // Check if BatchSerial array exists and has elements
            if (batchSerials && batchSerials.length > 0) {
                // Returning the HTML content for the button
                return '<i class="fas fa-plus btn-details-icon"></i>';
            } else {
                // If BatchSerial is not present or has no elements, you might want to return something else or an empty string
                return '<i class="fas fa-plus btn-details-icon d-none"></i>'; 
            }
               
          }

    </script>

    <script> // For add customer
        const isSubCustomerCheckbox = document.getElementById("isSubCustomer");
        const parentCustomerDiv = document.getElementById("parent_customer");

        isSubCustomerCheckbox.addEventListener("change", function () {
            if (isSubCustomerCheckbox.checked) {
                parentCustomerDiv.classList.remove("d-none");
            } else {
                parentCustomerDiv.classList.add("d-none");
            }
        });

        const isSameAsBillingAddressCheckbox = document.getElementById("IsSameAsBillingAddress");
        const shippingAddressDiv = document.getElementById("shipping_address");


        // Check the checkbox
        isSameAsBillingAddressCheckbox.checked = true;

        isSameAsBillingAddressCheckbox.addEventListener("change", function () {
            if (isSameAsBillingAddressCheckbox.checked) {
                shippingAddressDiv.classList.add("d-none");

                var billingStreetAddress = $("#billing_street_address").val();
                var billingCity = $("#billing_city").val();
                var billingProvince = $("#billing_province").val();
                var billingPostalCode = $("#billing_postal_code").val();
                var billingCountry = $("#billing_country").val();

                // Set the values of the shipping address fields
                $("#shipping_street_address").val(billingStreetAddress);
                $("#shipping_city").val(billingCity);
                $("#shipping_province").val(billingProvince);
                $("#shipping_postal_code").val(billingPostalCode);
                $("#shipping_country").val(billingCountry);

            } else {
                
                shippingAddressDiv.classList.remove("d-none");
            }
        });

        function gatherData() {

             var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
             var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';

            var customerData = {

                ComId: ComId,
                LuserId: UserId,

                Id: $("#CustomerId").val(),
                CustomerCurrencyId: $("#currency").val(),
                Title: $("#title").val(),
                FirstName: $("#first_name").val(),
                MiddelName: $("#middle_name").val(),
                LastName: $("#last_name").val(),
                Suffix: $("#suffix").val(),
                DisplayName: $("#display_name").val(),
                Name: $("#display_name").val(),
                CompanyName: $("#company_name").val(),
                CustomerCode: $("#customer_code").val(),
                Email: $("#email").val(),
                Phone: $("#phone_number").val(),
                MobileNumber: $("#mobile_number").val(),
                Fax: $("#fax").val(),
                Other: $("#other").val(),
                Website: $("#website").val(),
                CustParentId: isSubCustomerCheckbox.checked ? $("#CustomerSelect").val() : null,
                BillingStreetAddress: $("#billing_street_address").val(),
                BillingCity: $("#billing_city").val(),
                BillingProvince: $("#billing_province").val(),
                BillingPostalCode: $("#billing_postal_code").val(),
                BillingCountry: $("#billing_country").val(),
                ShippingStreetAddress: $("#shipping_street_address").val(),
                ShippingCity: $("#shipping_city").val(),
                ShippingProvince: $("#shipping_province").val(),
                ShippingPostalCode: $("#shipping_postal_code").val(),
                ShippingCountry: $("#shipping_country").val(),
                Notes: $("#notes").val(),
                PaymentTypeId: $("#paymentMethodId").val(),
                PaymentTermsId: $("#terms option:selected").val() || null ,
                DeliveryOptions: $("#DeliveryOptions").val(),
                BuyerGroupId: $("#BuyerGroupId").val(),
                Language: $("#Language").val(),
                Taxes: $("#taxes").val(),
                OpBalance: $("#opening_balance").val() || 0,
                OpeningDate: $("#opening_date").val() ,
            };
          

            return customerData;


        }

         function hideValidationMessage() {
           var validationMessage = document.getElementById('validationMessage');
           validationMessage.style.display = 'none';
         }

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetBuyerGroup", "BuyerOrder")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    $('#BuyerGroupId').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                });
            }
        });
        var CustomerId = 0;
        function sendDataToServer() {
            $("#currency").removeClass("d-none");
            $("#currency_label").removeClass("d-none");

             var displayName = $("#display_name").val();
            
            // Check if display name is empty or contains only whitespace
            if (displayName.trim() === '') {
                $("#validationMessage").css("display", "block");
                return; // Stop execution if the field is empty
            }
          
            var customerData = gatherData();
             
            var data = JSON.stringify(customerData);
            console.log(data);
            var fileInput = $('input[type=file]')[0];


            $.ajax({

                url: '@Url.Action("AddUpdateCustomer", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    CustomerId = response.Id;
                    console.log("Done"); 
                    if (response.success == "1") {
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                     } else {
                            toastr.success(response.message, "", {
                                "toastClass": "toast-red",
                            });
                                                                        
                        }

                     $("#currency").addClass("d-none");
                     $("#currency_label").addClass("d-none");
                    setTimeout(function () {
                               window.location.href = '@Url.Action("InvoiceList", "Sales", new { Type = "Customers" })';
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });

            if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                var formData = new FormData();
                formData.append("file", fileInput.files[0]);
                formData.append("CustomerId", CustomerId);

                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("UploadImageForCustomer", "Sales")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        // Handle the response
                    }
                });
            } else {
                // Handle the case where no file was selected
            }
        }

        var customersaveButton = document.getElementById('customerSaveBtn');
        customersaveButton.addEventListener('click', function () {
            sendDataToServer();
        });

        var customercloseButton = document.getElementById('customeroffcanvasClose');
        customercloseButton.addEventListener('click', function () {
            var BtnSave = document.querySelector('#customerSaveBtn');
            $("#CustomerCodeValidation").html("");
                        BtnSave.disabled = false;
        });

        var customercloseButton1 = document.getElementById('customeroffcanvasClose1');
        customercloseButton1.addEventListener('click', function () {
            var BtnSave = document.querySelector('#customerSaveBtn');
            $("#CustomerCodeValidation").html("");
            BtnSave.disabled = false;
        });



        document.addEventListener("DOMContentLoaded", function () {
            var POLNameHandle = document.getElementById("customer_code");
            var BtnSave = document.querySelector('#customerSaveBtn');
            var customerId = $("#CustomerId").val();

            function getAllCodes(callback) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetCustomerCodes", "Sales")',
                    dataType: "json",
                    success: function (data) {
                        var CustCodeGetArray = [];
                        data.forEach(function (item) {
                            var CustomerCode = item.Text;
                            var CustomerId = item.Value;
                            var SizeData = {
                                CustomerCode: CustomerCode,
                                Id: CustomerId
                            };
                            CustCodeGetArray.push(SizeData);
                        });
                        if (typeof callback === "function") {
                            callback(CustCodeGetArray);
                        }
                    },
                    error: function (error) {
                        console.error("Error:", error);
                    }
                });
            }

            function checkCustomerCodeExists(code) {
                getAllCodes(function (data) {
                    var lowercasedSizeName = code.toLowerCase();
                    var sizeExists = data.some(function (item) {
                        if (customerId && customerId === item.Id) {
                            return false;
                        }
                        return item.CustomerCode.trim().toLowerCase() === lowercasedSizeName;
                    });

                    console.log("Size exists:", sizeExists);
                    if (sizeExists) {
                        $("#CustomerCodeValidation").html("Already Exist.!");
                        BtnSave.disabled = true;
                        console.log("Button disabled");
                    } else {
                        $("#CustomerCodeValidation").html("");
                        BtnSave.disabled = false;
                        console.log("Button enabled");
                    }
                });
            }

            POLNameHandle.addEventListener("input", function () {
                console.log("Input value:", POLNameHandle.value);
                var enteredSizeName = POLNameHandle.value;
                checkCustomerCodeExists(enteredSizeName);
            });
        });

        
    </script>
    

    <script> //Add product

        var selectedLocation = @Html.Raw(Json.Serialize(ViewBag.WarehouseId));

        $("#saveLocationBtn").on("click", function () {
            var newLocation = $("#LocationName").val();
            var newshortLocation = $("#LocationShortName").val();

            var locationData = {
                Id: 0,
                WhName: $("#LocationName").val(),
                WhShortName: $("#LocationShortName").val(),
                WhType: $("#WhType").val(),
                ParentId: $("#ParentId").val()
            }

            if (newLocation.length > 1) {

                var locationdata = JSON.stringify(locationData);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AddWarehouse2", "Admin")',
                    data: locationData,
                    success: function (data) {
                        selectedLocation.push({ Text: data.Id, Value: newshortLocation });
                        $("#locationModal").modal("hide");
                        toastr.success("Location Added Successfully");
                        $(".toast-success").css("background-color", "green");
                        $(".toast-success").css("color", "white");
                    },
                    error: function (error) {
                        console.log(error);

                    }
                });
            }
            else {
                toastr.error("Please fill up Unit Information.")
                $(".toast-error").css("background-color", "red");
                $(".toast-error").css("color", "white");
            }


        });
        function warehouseEditor(cell, onRendered, success, cancel, editorParams) {
            var editor = document.createElement("select");
            editor.setAttribute("class", "select2");
            editor.style.width = "100%";
            $("#offcanvasForProduct .select2").select2({
                dropdownParent: $("#offcanvasForProduct")
            });
            onRendered(function () {
                $(editor).select2({
                    closeOnSelect: false,
                    ajax: {
                        url: '@Url.Action("GetWarehouse", "Admin")',
                        dataType: 'json',
                        data: function (params) {
                            return {
                                dropdownSearch: params.term,
                                pageNo: params.page || 1
                            };
                        },
                        processResults: function (data) {
                            var options = data.map(function (item) {
                                return {
                                    id: item.Value,
                                    text: item.Text,
                                };
                            });
                            return { results: options };
                        },
                        cache: false
                    }
                });
                editor.style.css = "100%";
                $(editor).select2('open');
            });

            function successFunc(e) {
                var data = e.params.data;
                cell.getRow().update({
                    "WarehouseId": data.id,
                    "Warehouse": data.text,
                });
                success(data.text);
                $(editor).select2('close');
            }

            function DestroyFunc() {
                cancel();
                cell.navigateRight();
            }

            $(editor).on("select2:select", successFunc);
            $(editor).on("select2:close", DestroyFunc);

            return editor;
        }
        var warehousetablecolumns = [
            { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
            {
                title: "Warehouse",
                field: "Warehouse",
                //width: 130,
                headerHozAlign: "center",
                hozAlign: "center",
                sorter: "number",
                editor: warehouseEditor,
                // editorParams: {
                //     values: selectedLocation.map(option => option.Text),
                // },
                // cellEdited: async function (cell) {
                     
                //     var selectedText = cell.getValue();
                //     var selectedValue = selectedLocation.find(option => option.Text === selectedText);
                //     if (selectedValue) {
                //         cell.getRow().update({ WarehouseId: selectedValue.Value });
                //     }
                // },
            },
            {
                title: "Hidden Tax",
                field: "WarehouseId",
                visible: false,
                editor: "input",
            }
        ];

        var deleteColumn = {
            title: "",
            field: "Delete",
            movable: false,
            formatter: function (cell, formatterParams) {
                return "<i class='fas fa-trash-alt delete-icon'></i>";
            },
            width: 30,
            headerSort: false,
            cellClick: function (e, cell) {
                var rowData = cell.getRow().getData();
                var row = cell.getRow();
                deleteRow(row);
            }
        };

        warehousetablecolumns.push(deleteColumn);

        var warehousetable = new Tabulator("#warehouse-table", {
            //layout: "fitColumns",
            addRowPos: "bottom",
            columns: warehousetablecolumns,
            // data: initData,
        });

        document.getElementById("add-row").addEventListener("click", function () {
            warehousetable.addRow({});
        });

        document.getElementById("del-row").addEventListener("click", function () {
            warehousetable.clearData();
        });

        function deleteRow(row) {
            
            if (confirm("Are you sure you want to delete this row?")) {
                warehousetable.deleteRow(row);
            }

        }

     $('input[name=RptType]').click(function () {
            var reporttypeind = $("input[name=RptType]:checked").val();
            //alert(reporttype);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionReportType", "Accounts")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttypeind },
                success: function (response) {
                    //  window.location.href = response.Url;

                    //window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        });

        function GetExpenseAccount(type) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetInventoryAccount", "Sales")',
                data: {type : type},
                datatype: "Json",
                success: function (data) {
                    $('#AccIdInventory').empty();

                    $('#AccIdInventory').append('<option value="" selected>Select an account</option>');
                    $.each(data, function (index, value) {
                        $('#AccIdInventory').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                    });
                }
            });
        }

        function showProductCategory() {
            $("#product_category").removeClass("d-none");
            $("#inventoryProductCreate").addClass("d-none");
            document.getElementById("FormType").value = "Default";
        }

        function showCreateInventoryForm()
        {
            GetExpenseAccount("Inventory");
            $("#product_category").addClass("d-none");
            $("#inventoryProductCreate").removeClass("d-none");
            
            document.getElementById("FormType").value = "Inventory";
            $("#sellToCustomer").addClass("d-none");
            $("#purchaseFromSupplier").addClass("d-none");

            var paragraph = document.getElementById("formTypeParagraph");
            paragraph.innerHTML = "Inventory&nbsp;<span><a href='#' onclick='showProductCategory()'>Change Type</a></span>";

            $("#supplier-statement").removeClass("d-none");
            $("#description-statement").removeClass("d-none");
        }

        function showCreateInventoryFormWithClear()
        {
            clearModalDataForProduct();
            showCreateInventoryForm();
        }
        function showCreateNonInventoryForm() {
            GetExpenseAccount("NonInventory");
            $("#product_category").addClass("d-none");
            $("#inventoryProductCreate").removeClass("d-none");

            document.getElementById("FormType").value = "NonInventory";
            $("#sellToCustomer").removeClass("d-none");
            $("#purchaseFromSupplier").removeClass("d-none");

            var paragraph = document.getElementById("formTypeParagraph");
            paragraph.innerHTML = "NonInventory&nbsp;<span><a href='#' onclick='showProductCategory()'>Change Type</a></span>";

            document.getElementById("isSellToCustomer").checked = true;
            $("#supplier-statement").addClass("d-none");

        }
        function showCreateNonInventoryFormWithClear()
        {
            clearModalDataForProduct();
            showCreateNonInventoryForm();
        }
        function showCreateServiceForm() {
            GetExpenseAccount("Service");
            $("#product_category").addClass("d-none");
            $("#inventoryProductCreate").removeClass("d-none");

            document.getElementById("FormType").value = "Service";
            $("#sellToCustomer").removeClass("d-none");
            $("#purchaseFromSupplier").removeClass("d-none");

            var paragraph = document.getElementById("formTypeParagraph");
            paragraph.innerHTML = "Service&nbsp;<span><a href='#' onclick='showProductCategory()'>Change Type</a></span>";

            document.getElementById("isSellToCustomer").checked = true;
            $("#supplier-statement").addClass("d-none");

        }

        function showCreateServiceFormWithClear()
        {
            clearModalDataForProduct();
            showCreateServiceForm();
        }


        const sellcheckbox = document.getElementById("isSellToCustomer");
        sellcheckbox.addEventListener("change", function () {
            if (sellcheckbox.checked) {
                document.getElementById("isPurchaseFromSupplier").checked = false;
                $("#supplier-statement").addClass("d-none");
                $("#description-statement").removeClass("d-none");
            } else {
                $("#supplier-statement").removeClass("d-none");
                $("#description-statement").addClass("d-none");
                document.getElementById("isPurchaseFromSupplier").checked = true;
            }
        });

        const purchasecheckbox = document.getElementById("isPurchaseFromSupplier");

        purchasecheckbox.addEventListener("change", function () {
            if(purchasecheckbox.checked){
                $("#supplier-statement").removeClass("d-none");
                $("#description-statement").addClass("d-none");
                document.getElementById("isSellToCustomer").checked = false;
            }
            else
            {
                document.getElementById("isSellToCustomer").checked = true;
                $("#supplier-statement").addClass("d-none");
                $("#description-statement").removeClass("d-none");
            }
            
        });

         $("#as-of-date").on("input", function () {
             $("#inventory-asofdate-validation").html("");
         });

         $("#name").on("input", function () {
             $("#inventory-name-validation").html("");
         });

        function gatherDataforInventory() {
            var flag = 0;
            var formType = $("#FormType").val();
            var dataList = [];
            var rows = warehousetable.getData();
            var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
            var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';

            rows.forEach(function (row) {
                //var taxValue = row.TAX === null ? false : row.TAX;

                var rowData = {
                    "Id": row["Id"],
                    "WarehouseId": row["WarehouseId"],
                    "ComId": ComId,
                    "LuserId": UserId,
                };

                // Check if rowData already exists in dataList
                var isDuplicate = false;
                for (var i = 0; i < dataList.length; i++) {
                    if (dataList[i].WarehouseId == rowData.WarehouseId) {
                        isDuplicate = true;
                        break;
                    }
                }

                // If rowData is not a duplicate, push it to dataList
                if (!isDuplicate) {
                    dataList.push(rowData);
                }

                //dataList.push(rowData);
            });
            var formName = $("#formTypeParagraph").text();
            var isNonInventory = true;
            if (formName.toLowerCase().startsWith("Inventory")) {
                isNonInventory = false;
            } 
            
            
            var productData = {
                Id: $("#ProductId").val(),
                Name: $("#name").val(),
                EANCode: $("#sku").val(),
                Code: $("#productCode").val(),
                CategoryId: $("#CategoryIdForInventory").val(),
                RunTimeLiveStock: $("#quantity-on-hand").val() || 0,
                OpeningDate: $("#as-of-date").val(),
                ROL: $("#reorder-point").val() || 0,
                Description: $("#description").val(),
                Price: $("#sales-rate").val() || 0,
                AccIdSales: $("#IncomeAccount").val(),
                AccIdConsumption: $("#Consumption").val(),
                IsTaxInclusive: $("#isTaxInclusive").val() || 0,
                SalesTaxId: $("#TaxId").val(),
                Remarks: $("#purchase-information").val(),
                ColorName: $("#productColor").val(),
                SizeName: $("#productSize").val(),
                ModelName: $("#productModel").val(),
                CostPrice: $("#cost").val() || 0,
                PurchaseTaxId: $("#PurchaseTaxId").val(),
                IsPurchaseTaxInclusive: $("#ispurchaseTaxInclusive").val() || 0,
                SupplierId: $("#SupplierId").val(),
                AccIdInventory: $("#AccIdInventory").val(),
                ProductTypeFlag: formType,
                UnitId : $("#Unit").val(),
                IsNonInventory: isNonInventory,
                ProductWarehouseList: dataList
            };


            return productData;


        }

        var ProductId = 0;
        function sendInventoryProductToServer() {
            var productData = gatherDataforInventory();

            var data = JSON.stringify(productData);
            console.log(data);
            var fileInput = $('input[type=file]')[1];

            $.ajax({

                url: '@Url.Action("AddUpdateProduct", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    ProductId = response.Id;
                    console.log("Done");
                    if (response.success == "1") {
                        toastr.success(response.message, "", {
                            "toastClass": "toast-green",
                        });
                     } else {
                         toastr.success(response.message, "", {
                             "toastClass": "toast-red",
                         });    
                     }

                    setTimeout(function () {
                        window.location.href = "@Url.Action("InvoiceList", "Sales", new { Type = "Products" })";
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });

            if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                var formData = new FormData();
                formData.append("file", fileInput.files[0]);
                formData.append("ProductId", ProductId);

                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("UploadImageForProduct", "Sales")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        toastr.success(response.status, "", {
                            "toastClass": "toast-green",
                        });
                    }
                });
            } else {
                // Handle the case where no file was selected
            }
        }
       
        var inventorysaveButton = document.getElementById('InventoryProductSaveBtn');
        inventorysaveButton.addEventListener('click', function () {
            
            // var displayName = $("#Unit").val();
            // // Check if display name is empty or contains only whitespace
            // if (displayName.trim() === '') {
            //     $("#validationMessage1").css("display", "block");

            // }

            // var displayName = $("#CategoryIdForInventory").val();
            // // Check if display name is empty or contains only whitespace
            // if (displayName.trim() === '') {
            //     $("#validationMessage2").css("display", "block");

            // }

             $("#CategoryIdForInventory").on("change", function() {
                if ($(this).val() == "") {
                    $("#inventory-category-validation").html("Please choose a category");
                } else {
                    $("#inventory-category-validation").html(""); // Clear validation message
                }
            });

             $("#Unit").on("change", function() {
                if ($(this).val() == "") {
                    $("#inventory-unit-validation").html("Please choose a unit");
                } else {
                    $("#inventory-unit-validation").html(""); // Clear validation message
                }
            });


            if ($("#name").val() == "") {
                $("#inventory-name-validation").html("Product Name must be filled");

                $('#offcanvasForProduct').animate({ scrollTop: 0 }, 'slow');
            }
            else
            {
                $("#inventory-name-validation").html("");
            }
            if ($("#CategoryIdForInventory").val() == "") {
                $("#inventory-category-validation").html("Please choose a category");
            }
            else
            {
                $("#inventory-category-validation").html("");
            }
            if ($("#as-of-date").val() == "") {
                $("#inventory-asofdate-validation").html("Please choose a date");
            }
            if ($("#Unit").val() == "") {
                $("#inventory-unit-validation").html("Please choose a unit");
            }
            else {
                sendInventoryProductToServer();
            }
            
        });

        var currentPOLId = $("#ProductId").val();
        var BtnSave = document.querySelector('#InventoryProductSaveBtn');

        function getProducts(callback) {

            var productCode = $("#productCode").val();
            var color = $("#productColor").val();
            var size = $("#productSize").val();
            var model = $("#productModel").val();

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetProductListForDuplicate", "Admin")' + '?productCode=' + productCode + '&ColorName=' + color + '&SizeName=' + size + '&ModelName=' + model,
                dataType: "json",
                success: function (data) {
                    // console.log("data::", data.data);
                    var SizeCodeGetArray = [];

                    data.data.forEach(function (item) {
                        var productCode = item.Code;
                        var Id = item.Id;
                        var SizeName = item.SizeName;
                        var ColorName = item.ColorName;
                        var ModelName = item.ModelName;
                        var SizeData = {
                            SizeName: SizeName,
                            Id: Id,
                            productCode: productCode,
                            ColorName: ColorName,
                            ModelName: ModelName
                        };
                        SizeCodeGetArray.push(SizeData);
                    });

                    if (typeof callback === "function") {
                        callback(SizeCodeGetArray);
                    }
                },
                error: function (error) {
                    console.error("Error:", error);
                }
            });
        }

        function checkPOLExists(sizeName) {

            var productCode = $("#productCode").val();
            var color = $("#productColor").val();
            var size = $("#productSize").val();
            var model = $("#productModel").val();

            if (productCode !== '' && color !== '' && size !== '' && model !== '') {
                getProducts(function (data) {

                    var sizeExists = data.some(function (item) {

                        if (currentPOLId == item.Id) {
                            return false;
                        }

                        return item.productCode == productCode && item.SizeName == size && item.ColorName == color && item.ModelName == model
                    });

                    console.log("sizeExists", sizeExists);

                    if (sizeExists) {
                        $("#productModelValidation").html("Already has the product!");
                        BtnSave.disabled = true;
                    } else {
                        $("#productModelValidation").html("");
                        BtnSave.disabled = false;

                    }
                });
            }

            
        }

        var POLNameHandle = document.getElementById("productCode");
        POLNameHandle.addEventListener("input", function () {
            var enteredSizeName = POLNameHandle.value;
            checkPOLExists(enteredSizeName);
        });

        var POLNameHandle1 = document.getElementById("productColor");
        POLNameHandle1.addEventListener("input", function () {
            var enteredSizeName = POLNameHandle1.value;
            checkPOLExists(enteredSizeName);
        });

        var POLNameHandle2 = document.getElementById("productSize");
        POLNameHandle2.addEventListener("input", function () {
            var enteredSizeName = POLNameHandle2.value;
            checkPOLExists(enteredSizeName);
        });

        var POLNameHandle3 = document.getElementById("productModel");
        POLNameHandle3.addEventListener("input", function () {
            var enteredSizeName = POLNameHandle3.value;
            checkPOLExists(enteredSizeName);
        });



        function PreviewImage() {
            var oFReader = new FileReader();
            oFReader.readAsDataURL(document.getElementById("FileUpload").files[0]);

            oFReader.onload = function (oFREvent) {
                document.getElementById("UploadFile").src = oFREvent.target.result;
            };
        };

        $('#FileUpload').on('change', function () {
            var files = $(this)[0].files;

            //updateSelectedFilesList(files);

            for (var i = 0; i < files.length; i++) {
                var file = files[i];

                if (file.size > 1 * 1024 * 1024) {
                    alert('File "' + file.name + '" exceeds the maximum allowed size of 20MB.');
                    $(this).val('');
                    //updateSelectedFilesList([]);
                    return;
                }
                else
                {
                    PreviewImage();
                }

            }
        });

         function autocompleteColorName() {
                var MyAppUrlset = {
                    MyUsefulUrl: '@Url.Action("ColorReferance", "Admin")'
                }
                //Referance//ReferanceTwo//ReferanceThree
                $("#productColor").autocomplete({
                    source: function(request, response) {
                        $.ajax({
                            url: MyAppUrlset.MyUsefulUrl,
                            dataType: "json",
                            data: { query: $("#productColor").val() },
                            success: function(data) {
                                console.log(data);

                                response($.map(data, function(item) {
                                    return { label: item.Text };
                                }));
                            },
                            error: function(xhr, status, error) {
                                alert("Error");
                            },
                        });
                    },
                    autoFocus: true,
                    minLength: 2
                });
          }

            function autocompleteSizeName() {
                var MyAppUrlset = {
                    MyUsefulUrl: '@Url.Action("SizeReferance", "Admin")'
                }
                //Referance//ReferanceTwo//ReferanceThree
                $("#productSize").autocomplete({
                    source: function(request, response) {
                        $.ajax({
                            url: MyAppUrlset.MyUsefulUrl,
                            dataType: "json",
                            data: { query: $("#productSize").val() },
                            success: function(data) {
                                console.log(data);

                                response($.map(data, function(item) {
                                    return { label: item.Text };
                                }));
                            },
                            error: function(xhr, status, error) {
                                alert("Error");
                            },
                        });
                    },
                    autoFocus: true,
                    minLength: 2
                });
            }

             function autocompleteModelName() {
                var MyAppUrlset = {
                    MyUsefulUrl: '@Url.Action("ModelReferance", "Admin")'
                }
                //Referance//ReferanceTwo//ReferanceThree
                $("#productModel").autocomplete({
                    source: function(request, response) {
                        $.ajax({
                            url: MyAppUrlset.MyUsefulUrl,
                            dataType: "json",
                            data: { query: $("#productModel").val() },
                            success: function(data) {
                                console.log(data);

                                response($.map(data, function(item) {
                                    return { label: item.Text };
                                }));
                            },
                            error: function(xhr, status, error) {
                                alert("Error");
                            },
                        });
                    },
                    autoFocus: true,
                    minLength: 2
                });
            }

        function sendProductToServer() {
            $.ajax({
                url: "@Url.Action("InvoiceList", "Sales", new { Type = "Products" })",
                type: 'GET',                            
                success: function (response) {
                    ProductId = response.Id;
                    console.log("Done");                   
                    setTimeout(function () {
                        window.location.href = "@Url.Action("InvoiceList", "Sales", new { Type = "Products" })";
                    }, 500);
                },
                error: function (error) {
                    console.log("Error");
                }
            });

        }


        function populateProductCategoryDiv()
        {
            var paymentTypes = @Json.Serialize(ViewBag.PaymentType);

            // Get the product_category div
            var productCategoryDiv = document.getElementById("product_category");

            // Loop through the paymentTypes array and create div elements dynamically
            paymentTypes.forEach(function (paymentType) {
                var div = document.createElement("div");
                var divId = paymentType.TypeName + "Div"; // Create a unique id
                div.id = divId;
                div.className = "row";
                div.style.padding = "10px";
                div.style.borderBottom = "2px solid black";

                div.onmouseover = function () {
                    div.style.backgroundColor = "#e9e9e9";
                };
                div.onmouseout = function () {
                    div.style.backgroundColor = ""; // Reset to default background color
                };
                if (paymentType.TypeName === "Inventory") {
                    div.onclick = showCreateInventoryFormWithClear; 
                }
                else
                {
                    if (paymentType.TypeName === "NonInventory") {
                        div.onclick = showCreateNonInventoryFormWithClear;
                    }
                    else{
                        if (paymentType.TypeName === "Service")
                        {
                            div.onclick = showCreateServiceFormWithClear;
                        }
                    }
                }
                
                // Create the first column for the icon
                var iconDiv = document.createElement("div");
                iconDiv.className = "col-md-2 col-3";
                var icon = document.createElement("i");
                icon.className = paymentType.IconClass;
                icon.classList.add("fs-1");
                iconDiv.appendChild(icon);

                // Create the second column for the description
                var descriptionDiv = document.createElement("div");
                descriptionDiv.className = "col-md-9 col-9";
                var p = document.createElement("p");
                p.style.fontWeight = "bold";
                p.style.color = "black";
                p.style.marginTop = "24px";
                p.innerHTML = paymentType.TypeName + "<br /><span style='font-weight:normal'>" + paymentType.Description + "</span>";
                descriptionDiv.appendChild(p);

                // Append the columns to the row
                div.appendChild(iconDiv);
                div.appendChild(descriptionDiv);

                // Append the row to the product_category div
                productCategoryDiv.appendChild(div);
            });
        }

        function populateProductData(Id)
        {
            console.log(Id);
            

            $.ajax({
                url: '@Url.Action("GetProductInfoEdit", "Sales")',
                data: { id: Id },
                type: 'POST',
                async: true,
                dataType: 'json',
                success: function (result) {
                    var dataTable = result.data;
                    console.log(dataTable);

                    if (result.Success == "1") {
                    $("#offcanvasForProduct").offcanvas('show');
                    populateCanvasData(dataTable);
                    warehousetable.setData(dataTable.ProductWarehouseList);                   
                    $("#PurchaseId").val(result.PurchaseId);
                     
                        if(result.PurchaseId > 0 )
                        {
                            var quantityInput = document.getElementById('quantity-on-hand');
                            quantityInput.disabled = true;
                            $("#adjustment").removeClass("d-none");
                        }
                        else 
                        {
                            var quantityInput = document.getElementById('quantity-on-hand');
                            quantityInput.disabled = false;
                            $("#adjustment").addClass("d-none");
                        }

                    }
                    else {

                        toastr.success(result.message, "", {
                            "toastClass": "toast-red",
                        });
                    }

                    
                    
                    //reinittable(dataTable);
                },
                error: function () {
                    //toastr.error('Unable to Save');
                    //alert('Unable to Save');
                }
            });
        }

        function populateCanvasData(x)
        {
            var startdate = formatDateToCustomDate(x.OpeningDate);

            $("#ProductId").val(x.Id);
            $("#name").val(x.Name);
            $("#sku").val(x.EANCode);
            $("#productCode").val(x.Code);
            $("#CategoryIdForInventory").val(x.CategoryId).trigger('change');
            $("#quantity-on-hand").val(x.RunTimeLiveStock);
            $("#as-of-date").val(startdate);
            $("#reorder-point").val(x.ROL);
            $("#description").val(x.Description);
            $("#sales-rate").val(x.Price);
            $("#IncomeAccount").val(x.AccIdSales).trigger('change');
            $("#isTaxInclusive").val(x.IsTaxInclusive);
            $("#TaxId").val(x.SalesTaxId).trigger('change');
            $("#purchase-information").val(x.Remarks);
            $("#productColor").val(x.ColorName);
            $("#productSize").val(x.SizeName);
            $("#productModel").val(x.ModelName);
            $("#cost").val(x.CostPrice);
            $("#PurchaseTaxId").val(x.PurchaseTaxId).trigger('change');
            $("#ispurchaseTaxInclusive").val(x.IsPurchaseTaxInclusive);
            $("#SupplierId").val(x.SupplierId).trigger('change');
            $("#FormType").val(x.ProductType);
            $("#Unit").val(x.UnitId).trigger('change');
            $('#UploadFile').attr('src', x.ImagePath);

            if(x.ProductType === "Inventory")
            {
                showCreateInventoryForm();
            }
            else
            {
                if(x.ProductType === "NonInventory")
                {
                    showCreateNonInventoryForm();
                }
                else
                {
                    if(x.ProductType === "Service")
                    {
                        showCreateServiceForm();
                    }
                }
            }
            setTimeout(function () {
                $("#Consumption").val(x.AccIdConsumption).trigger('change');
                $("#AccIdInventory").val(x.AccIdInventory).trigger('change');
            }, 600);
            
        }

        function formatDateToCustomDate(originalDate) {
            const months = [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ];

            const dateObj = new Date(originalDate);
            const day = dateObj.getDate();
            const month = months[dateObj.getMonth()];
            const year = dateObj.getFullYear();

            return `${day}-${month}-${year}`;
        }

        function setDeleteProductUrl(data) {
            var myUrlInactive = '@Url.Action("DeleteProduct", "Sales")';

            // Display the custom modal
            var modal = document.getElementById("customModal");
            modal.style.display = "block";

            // Handle confirm button click
            document.getElementById("confirmBtn").onclick = function () {
                $.ajax({
                    type: "POST",
                    data: { productId: data },
                    url: myUrlInactive,
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                            setTimeout(function () {
                                //window.location.href = "@Url.Action("InvoiceList", "Sales", new { Type = "Products" })";
                                initTabulatorForProduct();
                            }, 1000);
                        }
                        else if (response.success == "0") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-red",
                            });
                            
                        }
                        else {

                            toastr.success(response.message, "", {
                                "toastClass": "toast-red",
                            });
                        }
                    }
                });
                modal.style.display = "none";
            };

            // Handle cancel button click
            document.getElementById("cancelBtn").onclick = function () {
                modal.style.display = "none";
            };
        }

        function clearModalDataForProduct() {
            // Clear the input values by setting them to empty strings or default values
            document.getElementById('ProductId').value = '0';
            document.getElementById('FormType').value = 'default';
            document.getElementById('name').value = '';
            document.getElementById('sku').value = '';
            document.getElementById('productCode').value = '';
            document.getElementById('CategoryIdForInventory').value = ''; // Set the desired default value
            document.getElementById('quantity-on-hand').value = '';
            document.getElementById('as-of-date').value = '';
            document.getElementById('reorder-point').value = '';
            document.getElementById('isSellToCustomer').checked = false;
            document.getElementById('description').value = '';
            document.getElementById('sales-rate').value = '';
            document.getElementById('IncomeAccount').value = ''; // Set the desired default value
            document.getElementById('isTaxInclusive').checked = false;
            document.getElementById('TaxId').value = ''; // Set the desired default value
            document.getElementById('isPurchaseFromSupplier').checked = false;
            document.getElementById('purchase-information').value = '';
            document.getElementById('cost').value = '';
            document.getElementById('productColor').value = '';
            document.getElementById('productSize').value = '';
            document.getElementById('productModel').value = '';
            document.getElementById('Consumption').value = ''; // Set the desired default value
            document.getElementById('ispurchaseTaxInclusive').checked = false;
            document.getElementById('PurchaseTaxId').value = ''; // Set the desired default value
            document.getElementById('SupplierId').value = ''; // Set the desired default value
            document.getElementById('AccIdInventory').value = ''; // Set the desired default value
            document.getElementById('Unit').value = ''; // Set the desired default value                     

            // Reset any error messages or styles as needed
            document.getElementById('inventory-name-validation').textContent = '';
            //document.getElementById('inventory-category-validation').textContent = '';
            document.getElementById('inventory-asofdate-validation').textContent = '';
            document.getElementById('inventory-salesRate-validation').textContent = '';
            //document.getElementById('inventory-unit-validation').textContent = '';
        }

        function Adjustment(data)
        {
            var ProductId = $("#ProductId").val();
            console.log(ProductId);
            var url = '@Url.Action("AddBillByType", "Accounts")' + '?Type=' + encodeURIComponent(data) + '&ProductId=' + encodeURIComponent(ProductId);

                   window.open(url, '_blank');
        }


    //---Customer details information dropdown----//
           getCustomerDropdown();
        function getCustomerDropdown() {
            $.ajax({
                url: '@Url.Action("GetDoctypeList", "Sales")',
                success: function (data) {
                    const ulForExpenses = document.querySelector('#ul-id-for-Sales');
                    for (var i = 0; i < data.length; i++) {
                        const li = document.createElement('li');
                        li.className = 'dropdown-item';
                        const Type = data[i].DocTypeValue;
                        //const linkUrl = '/Sales/' + Type;
                        const linkUrl = '@Url.Action("YourActionName", "Sales")'.replace('YourActionName', Type);


                        // Create a clickable link
                        const a = document.createElement('a');
                        a.className = 'dropdown-link';
                        a.style.color = 'black';
                        a.setAttribute('data-id', data[i].Id);
                        a.textContent = data[i].DocType;

                        li.addEventListener('mouseover', function () {
                            a.style.color = 'white';
                        });

                        // Change text color back to black when not hovered
                        li.addEventListener('mouseout', function () {
                            a.style.color = 'black';
                        });
                        // Add an event listener to the link to redirect to the URL
                        li.addEventListener('click', function () {
                            window.location.href = linkUrl;
                        });

                        li.appendChild(a);
                        ulForExpenses.appendChild(li);
                    }
                }
            });

     };


        function editCustomer(data) {

                    var myUrlGet = '@Url.Action("GetCustomerForEdit", "Sales")?CustomerId=' + data;
                    $.ajax({
                        type: "GET",
                        url: myUrlGet,
                        success: function (result) {
                            console.log("check",result);
                            $("#currency").addClass("d-none");
                                    $("#currency_label").addClass("d-none");

                                    /* console.log(result.data.AccountCategoryId);*/
                            if (result.success == "1") {
                                $("#offcanvasRight").offcanvas("show");
                                $("#customerSaveBtn").text('Update').addClass("w-25");
                                $("#CustomerId").val(result.data.Id);
                                $("#title").val(result.data.Title);
                                $("#first_name").val(result.data.FirstName);
                                $("#middle_name").val(result.data.MiddelName);
                                $("#last_name").val(result.data.LastName);
                                $("#suffix").val(result.data.Suffix);
                                $("#display_name").val(result.data.Name);
                                $("#company_name").val(result.data.CompanyName);
                                $("#customer_code").val(result.data.CustomerCode);
                                $("#email").val(result.data.Email);
                                $("#phone_number").val(result.data.Phone);
                                $("#mobile_number").val(result.data.MobileNumber);
                                $("#fax").val(result.data.Fax);
                                $("#other").val(result.data.Other);
                                $("#website").val(result.data.Website);
                        $("#CustomerSelect").val(result.data.CustParentId).trigger('change');
                                $("#BuyerGroupId").val(result.data.BuyerGroupId).trigger('change');
                                $("#billing_street_address").val(result.data.BillingStreetAddress);
                                $("#billing_city").val(result.data.BillingCity);
                                $("#billing_province").val(result.data.BillingProvince);
                                $("#billing_postal_code").val(result.data.BillingPostalCode);
                                $("#billing_country").val(result.data.BillingCountry);
                                $("#shipping_street_address").val(result.data.ShippingStreetAddress);
                                $("#shipping_city").val(result.data.ShippingCity);
                                $("#shipping_province").val(result.data.ShippingProvince);
                                $("#shipping_postal_code").val(result.data.ShippingPostalCode);
                                $("#shipping_country").val(result.data.ShippingCountry);
                                $("#notes").val(result.data.Notes);
                                $("#paymentMethodId").val(result.data.PaymentTypeId).trigger('change');
                        $("#terms option:selected").val(result.data.PaymentTermsId).trigger('change');
                                $("#DeliveryOptions").val(result.data.DeliveryOptions);
                        $("#Language").val(result.data.Language).trigger('change');
                                $("#taxes").val(result.data.Taxes);
                                $('#opening_balance').val(result.data.OpBalance); 
                                $('#currency').val(result.data.CustomerCurrencyId); 
                                $('#opening_date').val(result.data.OpeningDate);
                            }
                            else {

                                    toastr.success(result.message, "", {
                                        "toastClass": "toast-red",
                                    });
                                }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert("Error: " + xhr.status);
                        }
                    });
                }
                 
            
                  function setDeleteUrl(data) {
                                Swal.fire({
                                    title: "Are you sure?",
                                    text: "You won't be able to revert this!",
                                    icon: "warning",
                                    showCancelButton: true,
                                    confirmButtonColor: "#3085d6",
                                    cancelButtonColor: "#d33",
                                    confirmButtonText: "Yes"
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        $.ajax({
                                            url: '@Url.Action("DeleteCustomerQB", "Sales")',
                                            type: "get",
                                            data: { CustomerId: data }, // Pass the array of ids
                                            traditional: true, // Ensures proper serialization of the array
                                            success: function (response) {
                                                if (response.success == "1") {
                                                    toastr.success(response.msg, "", {
                                                        "toastClass": "toast-green",
                                                    });
                                                    loadCustomerDetails();
                                                } else if (response.success == "0") {
                                                    toastr.error(response.msg, "", {
                                                        "toastClass": "toast-red",
                                                    });
                                                          loadCustomerDetails();
                                                }
                                                else {

                                                        toastr.success(response.message, "", {
                                                            "toastClass": "toast-red",
                                                        });
                                                    }
                                            },
                                            error: function (xhr, status, error) {
                                                console.error(xhr.responseText);
                                                toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                                            }
                                        });
                                    }
                                })
                            };





               function ReportPrintProduct(btnvalue) {

              var selectedData = parentTable.getSelectedData();
                   console.log(selectedData);
                   var Id = selectedData;

            var CategoryId = $('#CategoryId').val();
            var reporttype = $("input[name=RptType]:checked").val();
            var WarehouseId = $('#WarehouseId').val();
            var BrandId = $('#BrandId').val() || "";
            var ModelId = $("#ModelId option:selected").text() || "";

            var ColorName = "";//$("#ModelId option:selected").text() || "";
            var SizeName = $("#SizeId option:selected").text() || "" 



            var FromDate = $(".FromDate").val();
            var ToDate = $(".ToDate").val();

            //console.log(BrandId);

               
            var pid = 0;

            if (Id.length > 0) {
                pid = Id[0].Id;
            }

            //console.log(pid);
            //alert(WarehouseId);
            //alert(btnvalue);


            if (btnvalue == "PrintLedger") {

                if ((WarehouseId == null) || (WarehouseId == "")) {
                    toastr.error("Please Select Store First.");
                    return true;

                }
                else if ((pid == null) || (pid == "")) {
                    toastr.error("Please Select Product from the List.");
                    return true;
                }
                //alert('Wait');
            }
            else if ( btnvalue == "PrintLedgerNotPosted")
            {
                //if ((WarehouseId == null) || (WarehouseId == "")) {
                //    toastr.error("Please Select Store First.");
                //    return true;

                //}
                if ((pid == null) || (pid == "")) {
                    toastr.error("Please Select Product from the List.");
                    return true;
                }
            }
            else if (btnvalue == "rptPrdAvgRateCalculation") {

                if ((pid == null) || (pid == "")) {
                    toastr.error("Please Select Product from the List.");
                    return true;
                }
            }


            $.ajax({
                type: 'POST',
                url: '@Url.Action("ProductReport", "Admin")',
                dataType: 'json',
                async: true,
                data: { rptFormat: reporttype, action: btnvalue, CategoryId: CategoryId, ProductId: pid, FromDate: FromDate, ToDate: ToDate, WarehouseId: WarehouseId, BrandId: BrandId, ModelId: ModelId, ColorName: ColorName, SizeName: SizeName },
                success: function(response) {

                    //setTimeout(function () {
                    //    window.open(response.Url, '_blank')
                    //}, 3000);

                    window.open(response.Url, '_blank')

                },
                error: function(ex) {
                    alert('Failed.' + ex);
                }

            });


        }


        function ReportPrintCustomer(btnvalue) {
            
            var selectedData = customersTable.getSelectedData();           

            //console.log(selectedData);
            //var Id = selectedData[0].Id;
            var Id = selectedData;
            var IsPosted = 0;
            var reporttype = $("input[name=RptType]:checked").val();
            var FromDate = $(".FromDate").val();
            var ToDate = $(".ToDate").val();

            //alert(btnvalue);



            var productidlist = [];
            var pid = 0;
            var type = "Customer";


            //if (rows.length > 0) {
            //    pid = rows[0]["Id"];
            //    //type = rows[0]["AccountCategory"];

            //}

            if (Id.length > 0) {
                pid = Id[0].Id;
            }
            //console.log(pid);
            //alert(WarehouseId);
            //alert(btnvalue);

            var isViewPageReport = 1;

                if (btnvalue == "PrintLedger" || btnvalue == "CustomerNotPosted" || btnvalue == "CustomerIsNotPosted" || btnvalue == "CustomerRewardPointNotPosted" || btnvalue == "AllCustomerBalance_AllSalesQty") 
                {

                    if (btnvalue == "PrintLedger")
                    {
                        
                        isViewPageReport = 0;
                   
                
                    }
                    else
                    {   
                   
                        type = btnvalue;
                    }
                
                
                    if ((pid == null) || (pid == "")) {
                        toastr.error("Please Select Customer from the List.");
                        return true;
                    }
                    //alert('Wait');
            }
            else if (btnvalue == "AllCustomerBalance" || btnvalue == "AllCustomerBalance_AllSales" || btnvalue == "RewardPointSummary" || btnvalue == "AllCustomerAgingBalance") {
                type = btnvalue;
            }
            else
            {
                IsPosted = 1;
            }

            //else
            //{
            //    type = btnvalue;
            //}

            //alert('wait');
            //alert(IsPosted);
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SubsidiaryLedger", "Admin")',
                dataType: 'json',
                async: true,
                data: { rptFormat: reporttype, action: btnvalue, Id: pid, Type: type, FromDate: FromDate, ToDate: ToDate, isViewPageReport: isViewPageReport,IsPosted:IsPosted },
                success: function(response) {

                    //setTimeout(function () {
                    //    window.open(response.Url, '_blank')
                    //}, 3000);

                    window.open(response.Url, '_blank')

                },
                error: function(ex) {
                    alert('Failed.' + ex);
                }

            });

        }

                 CurrentDate();

        $(".FromDate").datepicker({

            dateFormat: "dd-M-y",
            changeMonth: true,
            changeYear: true

        });
        $(".ToDate").datepicker({

            dateFormat: "dd-M-y",
            changeMonth: true,
            changeYear: true

        });

        function CurrentDate() {
            var date = new Date();
            var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
                "Aug", "Sep", "Oct", "Nov", "Dec"];
            var val = date.getDate() + "-" + months[date.getMonth()] + "-" + date.getFullYear().toString().substr(-2);


            if ($(".FromDate").val() == '') {
                $(".FromDate").val(val);
            }
            if ($(".ToDate").val() == '') {
                $(".ToDate").val(val);
            }


        }
  


           //date range picker start for sales

         var TimeZoneJquery2 = '@HttpContextAccessor.HttpContext.Session.GetString("TimeZoneSettingsNameJquery").ToString()';
        //console.log('test');

        let timeZone2 = TimeZoneJquery2;
        if (timeZone2 == '')
        {
            timeZone2 = 'Asia/Dhaka';
        }
        //alert(TimeZoneJquery2);
        //console.log(timeZone);
        //let timeZone = 'Asia/Dubai';
        let date2 = new Date;
        var strTime2 = date2.toLocaleString("en-US", { timeZone2: `${timeZone2}` });
        //console.log('Asia/Dubai', strTime);
        console.log(strTime2)


                var datepicker_date_format = "mm/dd/YY";
        var moment_date_format = "MM/DD/YY";
        var moment_time_format = "HH:mm";



        var start = new Date(strTime2).toLocaleDateString('en-US');//.startOf('month');
        console.log(start);
        var end = new Date(strTime2).toLocaleDateString('en-US');//.endOf('month');
        var label = '';

     $('#daterange-btn2').daterangepicker({
            //locale: {
            //    format: 'DDMMMYY'
            //},
            "locale": {
                format: 'DD-MMM-YY',
                //separator: " ~ ",
                applyLabel: "Apply",
                cancelLabel: "Cancel",
                fromLabel: "From",
                toLabel: "To",
                //"customRangeLabel": "Custom",
                //"weekLabel": "W",
                //"daysOfWeek": [
                //    "Su",
                //    "Mo",
                //    "Tu",
                //    "We",
                //    "Th",
                //    "Fr",
                //    "Sa"
                //],
                //"monthNames": [
                //    "January",
                //    "February",
                //    "March",
                //    "April",
                //    "May",
                //    "June",
                //    "July",
                //    "August",
                //    "September",
                //    "October",
                //    "November",
                //    "December"
                //],
                "firstDay": 1
            },
            //stickyMonths: true,

            startOfWeek: 'saturday',
            //separator: ' ~ ',
            //autoClose: false,
            showDropdowns: true,
            autoUpdateInput: true,
            //startDate = moment().subtract(20, 'days');
            startDate: moment(start),
            endDate: moment(end),
            ranges: {
                //'Select':[moment('@ViewBag.FromDate'), moment('@ViewBag.ToDate')],
                'Today': [moment(start), moment(start)],
                'Yesterday': [moment(start).subtract(1, 'days'), moment(start).subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                'This Year': [moment().startOf('year'), moment().endOf('year')],
                'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year')],
                //'2 Year': [moment().subtract(2, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')],
                //'5 Year': [moment().subtract(5, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')],
                '10 Year': [moment().subtract(10, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')],
            }
     },
            function (start, end, label) {
                //alert('test');
                if (isDate(start)) {
                    // $('#daterange-btn span').html(start.format('DDMMMYY') + ' - ' + end.format('DDMMMYY'));

                    // $('#daterange-btn').attr('value', start.format('DDMMMYY') + ' - ' + end.format('DDMMMYY'))
                    $('#daterange-btn2').val(start.format('DD-MMM-YY') + ' - ' + end.format('DD-MMM-YY'))

                    //alert('hit');

                    $('#FromDate').val(start.format('DD-MMM-YY'));
                    $('#ToDate').val(end.format('DD-MMM-YY'));
                    //alert($('#FromDate').val());
                    //alert($('#ToDate').val());
                }
            });

        $('#daterange-btn2').change(function () {
             //alert('test');
             //consolelog('Fahad daterange btn');
            //moment(start);
           
            let start = moment();
            $('#daterange-btn2').val(start.format('DD-MMM-YY') + ' - ' + start.format('DD-MMM-YY'))
        
            $('#FromDate').val(start.format('DD-MMM-YY'));
            $('#ToDate').val(start.format('DD-MMM-YY'));

            //alert('Date range button changed');

        });

        $('#daterange-btn2').on('change', function(ev, picker) {
            $('#daterange-btn2').val( start.format('DDMMMYY') + ' - ' + end.format('DDMMMYY'))
        });


        $('#btnInc2').click(function (e) {
            IncDecMonth2('Inc')
        })

        $('#btnDec2').click(function (e) {
            IncDecMonth2('Dec')
        })

        function isDate2(val) {
            //var d = new Date(val);
            //return !isNaN(d.valueOf());
            var d = Date.parse(val);
            //console.log(d);
            return Date.parse(val);
        }

        function IncDecMonth2(Action) {
            if (!isDate2(start)) {
                start = moment().startOf('month');
                $('#daterange-btn2').val(start.format('DD-MMM-YY') + ' - ' + start.format('DD-MMM-YY'))
                $('#FromDate').val(start.format('DD-MMM-YY'));
                $('#ToDate').val(start.format('DD-MMM-YY'));
                console.log(start);
            }
            if (Action == 'Inc') {
                start = moment(start).add(1, 'month').startOf('month');
                end = moment(start).endOf('month');

                $('#FromDate').val(start.format('DD-MMM-YY'));
                $('#ToDate').val(end.format('DD-MMM-YY'));
                console.log(end);
            }
            else if (Action == 'Current') {

                var valfromdate = '@ViewBag.FromDate';
                var valtodate = '@ViewBag.ToDate';
                //console.log(valfromdate);
                //console.log(valtodate);

                $('#FromDate').val(valfromdate);
                $('#ToDate').val(valtodate);

                //var timeAndDate = moment(date + ' ' + time);
                //console. log(timeAndDate);

                start = moment(valfromdate);
                end = moment(valtodate);

            }
            else {
                start = moment(start).subtract(1, 'month').startOf('month');
                end = moment(start).endOf('month');

                $('#FromDate').val(start.format('DD-MMM-YY'));
                $('#ToDate').val(end.format('DD-MMM-YY'));
                console.log(end);
            }
            if (isDate2(start)) {
                //$('#daterange-btn span').html(start.format('DDMMMYY') + ' - ' + end.format('DDMMMYY'));
                $('#daterange-btn2').val(start.format('DD-MMM-YY') + ' - ' + end.format('DD-MMM-YY'))
                console.log('aabbcc');
                $('#FromDate').val(valfromdate);
                $('#ToDate').val(valtodate);


            }
            

        }

        IncDecMonth2('Current');

        //date range picker end for sales


          //date range picker start

         var TimeZoneJquery1 = '@HttpContextAccessor.HttpContext.Session.GetString("TimeZoneSettingsNameJquery").ToString()';
        //console.log('test');

        let timeZone1 = TimeZoneJquery1;
        if (timeZone1 == '')
        {
            timeZone1 = 'Asia/Dhaka';
        }
        //alert(TimeZoneJquery1);
        //console.log(timeZone);
        //let timeZone = 'Asia/Dubai';
        let date1 = new Date;
        var strTime1 = date1.toLocaleString("en-US", { timeZone1: `${timeZone1}` });
        //console.log('Asia/Dubai', strTime);
        console.log(strTime1)


                var datepicker_date_format = "mm/dd/YY";
        var moment_date_format = "MM/DD/YY";
        var moment_time_format = "HH:mm";



        var start = new Date(strTime1).toLocaleDateString('en-US');//.startOf('month');
        console.log(start);
        var end = new Date(strTime1).toLocaleDateString('en-US');//.endOf('month');
        var label = '';

     $('#daterange-btn1').daterangepicker({
            //locale: {
            //    format: 'DDMMMYY'
            //},
            "locale": {
                format: 'DD-MMM-YY',
                //separator: " ~ ",
                applyLabel: "Apply",
                cancelLabel: "Cancel",
                fromLabel: "From",
                toLabel: "To",
                //"customRangeLabel": "Custom",
                //"weekLabel": "W",
                //"daysOfWeek": [
                //    "Su",
                //    "Mo",
                //    "Tu",
                //    "We",
                //    "Th",
                //    "Fr",
                //    "Sa"
                //],
                //"monthNames": [
                //    "January",
                //    "February",
                //    "March",
                //    "April",
                //    "May",
                //    "June",
                //    "July",
                //    "August",
                //    "September",
                //    "October",
                //    "November",
                //    "December"
                //],
                "firstDay": 1
            },
            //stickyMonths: true,

            startOfWeek: 'saturday',
            //separator: ' ~ ',
            //autoClose: false,
            showDropdowns: true,
            autoUpdateInput: true,
            //startDate = moment().subtract(20, 'days');
            startDate: moment(start),
            endDate: moment(end),
            ranges: {
                //'Select':[moment('@ViewBag.FromDate'), moment('@ViewBag.ToDate')],
                'Today': [moment(start), moment(start)],
                'Yesterday': [moment(start).subtract(1, 'days'), moment(start).subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                'This Year': [moment().startOf('year'), moment().endOf('year')],
                'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year')],
                //'2 Year': [moment().subtract(2, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')],
                //'5 Year': [moment().subtract(5, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')],
                '10 Year': [moment().subtract(10, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')],
            }
     },
            function (start, end, label) {
                //alert('test');
                if (isDate(start)) {
                    // $('#daterange-btn span').html(start.format('DDMMMYY') + ' - ' + end.format('DDMMMYY'));

                    // $('#daterange-btn').attr('value', start.format('DDMMMYY') + ' - ' + end.format('DDMMMYY'))
                    $('#daterange-btn1').val(start.format('DD-MMM-YY') + ' - ' + end.format('DD-MMM-YY'))

                    //alert('hit');

                    $('#FromDate').val(start.format('DD-MMM-YY'));
                    $('#ToDate').val(end.format('DD-MMM-YY'));
                    //alert($('#FromDate').val());
                    //alert($('#ToDate').val());
                }
            });

        $('#daterange-btn1').change(function () {
             //alert('test');
             //consolelog('Fahad daterange btn');
            //moment(start);
           
            let start = moment();
            $('#daterange-btn1').val(start.format('DD-MMM-YY') + ' - ' + start.format('DD-MMM-YY'))
        
            $('#FromDate').val(start.format('DD-MMM-YY'));
            $('#ToDate').val(start.format('DD-MMM-YY'));

            //alert('Date range button changed');

        });

        $('#daterange-btn1').on('change', function(ev, picker) {
            $('#daterange-btn1').val( start.format('DDMMMYY') + ' - ' + end.format('DDMMMYY'))
        });


        $('#btnInc1').click(function (e) {
            IncDecMonth1('Inc')
        })

        $('#btnDec1').click(function (e) {
            IncDecMonth1('Dec')
        })

        function isDate1(val) {
            //var d = new Date(val);
            //return !isNaN(d.valueOf());
            var d = Date.parse(val);
            //console.log(d);
            return Date.parse(val);
        }

        function IncDecMonth1(Action) {
            if (!isDate1(start)) {
                start = moment().startOf('month');
                $('#daterange-btn1').val(start.format('DD-MMM-YY') + ' - ' + start.format('DD-MMM-YY'))
                $('#FromDate').val(start.format('DD-MMM-YY'));
                $('#ToDate').val(start.format('DD-MMM-YY'));
                console.log(start);
            }
            if (Action == 'Inc') {
                start = moment(start).add(1, 'month').startOf('month');
                end = moment(start).endOf('month');

                $('#FromDate').val(start.format('DD-MMM-YY'));
                $('#ToDate').val(end.format('DD-MMM-YY'));
                console.log(end);
            }
            else if (Action == 'Current') {

                var valfromdate = '@ViewBag.FromDate';
                var valtodate = '@ViewBag.ToDate';
                //console.log(valfromdate);
                //console.log(valtodate);

                $('#FromDate').val(valfromdate);
                $('#ToDate').val(valtodate);

                //var timeAndDate = moment(date + ' ' + time);
                //console. log(timeAndDate);

                start = moment(valfromdate);
                end = moment(valtodate);

            }
            else {
                start = moment(start).subtract(1, 'month').startOf('month');
                end = moment(start).endOf('month');

                $('#FromDate').val(start.format('DD-MMM-YY'));
                $('#ToDate').val(end.format('DD-MMM-YY'));
                console.log(end);
            }
            if (isDate1(start)) {
                //$('#daterange-btn span').html(start.format('DDMMMYY') + ' - ' + end.format('DDMMMYY'));
                $('#daterange-btn1').val(start.format('DD-MMM-YY') + ' - ' + end.format('DD-MMM-YY'))
                console.log('aabbcc');
                $('#FromDate').val(valfromdate);
                $('#ToDate').val(valtodate);


            }
            

        }

        IncDecMonth1('Current');


                   

         @*------------------------- Start Customer Details-------------------------- *@
                        var expenseTable;
                 var customerDetailTable;
        var customerDetailsUrl;
        var customerSearchTable;  

                            function GetCustomerDetails(Id){
                                   
                $("#sales-view-id").addClass("d-none");
                $("#customers-view-id").addClass("d-none");
                $("#products-view-id").addClass("d-none");
                $("#payments-view-id").addClass("d-none");
                                        $("#Customer-Details-view").removeClass("d-none");
                                        GetDetailsData(Id);
                                       
                                        GetCustomerDetailsList();
                            }                                                                                                 
                            
                            var expenseDetailsData;

              function GetDetailsData(Id){                               
                     GetEachCustomerDetails(Id);
                function fetchDataFromServer() {
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetInvoiceList1", "Sales")'
                };
                return $.ajax({
                    url: MyAppUrlSettings.MyUsefulUrl,
                    data: {                        
                        customerId: Id,                      
                    },                   
                    dataType: "json",
                });
            }

            fetchDataFromServer().done(function (response) {

                console.log("notrmal response:", response.data);
                var dataTable = response.data;
                console.log("data table:", dataTable);// Define columns to be excluded
                var columnsToExclude = ["MonthCaption", "FontSignal"]; // Define columns to be excluded


                customerDetailsUrl = `@Url.Action("GetInvoiceList1", "Sales")?CustomerId=${Id}`
                customerDetailTable = new Tabulator("#transaction-details-table-review", {
                 
                    layout: "fitColumns",
                    minHeight: 400,
                    pagination: true,
                    movableColumns: true,
                    ajaxURL: customerDetailsUrl,
                    paginationMode: "remote",
                    paginationSize: 10,
                    paginationInitialPage: 1,
                    paginationSizeSelector: [10, 25, 50, 100, 1000],
                    paginationCounter: "rows",
                    dataTree: true,
                    dataTreeStartExpanded: false,
                      ajaxConfig: "get",
                      ajaxContentType: "json",

                      ajaxResponse: function (url, params, response) {
                      customerDetailTable.setMaxPage(response.last_page);
                      console.log("response.last_page", response.last_page);

                      dataLoadExpense = response.data;
                    /* console.log("dataLoadExpense:", dataLoadExpense);*/

                         return {

                          data: dataLoadExpense,
                          last_page: response.last_page,

                         };
                      },
                    columns:  [
                        { title: "", field: "CheckBoxes", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true, width: 50 },
                        {
                            title: "Date",
                            field: "SalesDates",
                            width: "10%", cssClass: "text-center",
                            formatter: function (cell, formatterParams, onRendered) {
                                var date = new Date(cell.getValue());
                                var day = date.getDate();
                                var monthNames = [
                                    "Jan", "Feb", "Mar",
                                    "Apr", "May", "Jun",
                                    "Jul", "Aug", "Sep",
                                    "Oct", "Nov", "Dec"
                                ];
                                var monthIndex = date.getMonth();
                                var year = date.getFullYear().toString().substr(-2); // Extract last 2 digits of year

                                return day + '-' + monthNames[monthIndex] + '-' + year;
                            }
                        },

                        { title: "Type", field: "DocTypes", cssClass: "text-center", width: "10%" },
                        { title: "NO.", field: "SaleCodes", cssClass: "text-center", width: "20%" },
                        { title: "Customer", field: "CustomerNames", cssClass: "text-center", width: "16%", visible: false },
                        { title: "Amount", field: "Totals", cssClass: "text-center", width: "10%" },
                        // { title: "Status", field: "StatusRemarks", cssClass: "text-center", width: "20%" },
                        {
                            title: "Status", field: "StatusRemarkss", width: "15%", cssClass: "text-center", vertAlign: "middle",
                            
                            formatter: function (cell, formatterParams, onRendered) {
                                var status = cell.getValue();
                                var rowData = cell.getRow().getData();
                                var content = status;

                                if (status === "Paid" || status === "Applied") {
                                    //content += '<span class="checkmark"><i class="bi bi-check-circle-fill" style="color: #2ca01c; margin-left: 4px;"></span>';
                                    content = '<span class="checkmark"><i class="bi bi-check-circle-fill" style="color: #2ca01c; margin-right: 4px;"></i></span>' + content;
                                }

                                if (status.startsWith("Overdue")) {
                                    //content += '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #ffbf00; margin-left: 4px;"></span>';
                                    content = '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #ffbf00; margin-right: 4px;"></i></span>' + content;

                                }
                                if (status === "Rejected") {
                                    content = '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #b80000; margin-right: 4px;"></i></span>' + content;

                                }
                                return content;
                            },
                        },
                        {
                            title: "Actions", field: "button1", headerHozAlign: "center", headerSort: false, hozAlign: "center", resizable: false, width: "18px", formatter: function (cell, formatterParams, onRendered) {
                                var data = cell.getData();
                                console.log("see data::", data);
                                var docType = data.DocTypes || '';
                                var myUrlGetforInvoice = `@Url.Action("EditInvoice", "Sales")?id=${data.Id}&type=${docType}`;
                                var myUrlGetforCreditNote = myUrlGetforInvoice;
                                //var myUrlGetforMakePayment = `@Url.Action("EditReceivePaymentQB", "Sales")?id=${data.Id}`;
                                //var myUrlGetforEstimate = `@Url.Action("EditEstimate", "Sales")?id=${data.Id}`;
                                var myUrlGetforEstimate = myUrlGetforInvoice;
                                var myUrlGetforSalesOrder = `@Url.Action("EditSalesOrder", "Sales")?id=${data.Id}`;
                                var myUrlGetforSalesReceipt = myUrlGetforInvoice;
                                var myUrlGetforDelayedCharge = myUrlGetforInvoice;
                                var myUrlGetforStockCount = `@Url.Action("EditStockCount", "Sales")?id=${data.Id}`;
                                var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                                var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;

                                //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                                var inActive = `setInactiveUrl(${data.Id}) `
                                var active = `setActiveUrl(${data.Id}) `

                                var printHtml = `
                                               <a href='${myUrlprint}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Print</span>  <br />
                                               </a>
                                                       <div class='dropdown-divider m-0'></div>
                                           `;

                                var ReportViewHtml = `
                                                       <a href='${viewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                   <i class='bi bi-pencil-square pe-1'></i> <span>View</span>  <br />
                                               </a>
                                                       <div class='dropdown-divider m-0'></div>
                                           `;

                                var editHtml;

                                if (data.DocTypes == 'Invoice') {
                                    editHtml = `
                                                               <a href='${myUrlGetforInvoice}' class='text-decoration-none text-black ms-3 mt-1'>
                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                       </a>
                                                               <div class='dropdown-divider m-0'></div>
                                                   `;
                                }
                                if (data.DocTypes == 'Credit Note') {
                                    editHtml = `
                                                                               <a href='${myUrlGetforCreditNote}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                               </a>
                                                                       <div class='dropdown-divider m-0'></div>
                                                           `;
                                }
                                if (data.DocTypes == 'Estimate') {
                                    editHtml = `
                                                                                               <a href='${myUrlGetforEstimate}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                                }
                                if (data.DocTypes == 'Stock Count') {
                                    editHtml = `
                                                                                                       <a href='${myUrlGetforStockCount}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                                }
                                if (data.DocTypes == 'Sales order') {
                                    editHtml = `
                                                                                                       <a href='${myUrlGetforSalesOrder}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                                }
                                if (data.DocTypes == 'Sales receipt') {
                                    editHtml = `
                                                                                                               <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                               </a>
                                                                                       <div class='dropdown-divider m-0'></div>
                                                                           `;
                                }
                                if (data.DocTypes == 'Delayed Charge') {
                                    editHtml = `
                                                                                                                <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                                       </a>
                                                                                               <div class='dropdown-divider m-0'></div>
                                                                                   `;
                                }

                                var viewHtml = `
                                                       <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                       <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                      </a>

                                           `;

                                var deleteHtml;
                                if (data.IsDelete == 0) {
                                    deleteHtml = `
                                <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                    <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                </a>
                            `;
                                }
                                
                                var statusDependentHtml = data.isPosted ? viewHtml : printHtml + ReportViewHtml + editHtml + deleteHtml;
                                var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")?id=${data.Id}`;
                                if (data.DocTypes == 'Invoice') {
                                    var html = `
                                            <div class='dropdown ms-1'>

                                                                <a href='${paymentGet}' class='text-decoration-none  ms-3 mt-1'>
                                                        Receive Payment
                                                    </a>
                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                    ${statusDependentHtml}

                                                </ul>
                                            </div>
                                        `;

                        return html;
                    }
                    else
                    {
                        if (data.DocTypes == 'Credit Note') {
                            var html = `
                                                    <div class='dropdown ms-1'>

                                                                                    <a href='${myUrlGetforCreditNote}' class='text-decoration-none  ms-3 mt-1'>
                                                                Edit
                                                            </a>
                                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                        <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                            ${statusDependentHtml}

                                                        </ul>
                                                    </div>
                                                `;

                            return html;
                        }
                        else {
                            if (data.DocTypes == 'Estimate') {
                                var html = `
                                                            <div class='dropdown ms-1'>

                                                                                            <a href='${myUrlGetforEstimate}' class='text-decoration-none  ms-3 mt-1'>
                                                                        Edit
                                                                    </a>
                                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                    ${statusDependentHtml}

                                                                </ul>
                                                            </div>
                                                        `;

                                return html;
                            }
                            if (data.DocTypes == 'Stock Count') {
                                var html = `
                                                            <div class='dropdown ms-1'>

                                                                                                    <a href='${myUrlGetforStockCount}' class='text-decoration-none  ms-3 mt-1'>
                                                                        Edit
                                                                    </a>
                                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                    ${statusDependentHtml}

                                                                </ul>
                                                            </div>
                                                        `;

                                return html;
                            }
                            if (data.DocTypes == 'Sales order') {
                                var html = `
                                                                    <div class='dropdown ms-1'>

                                                                                                            <a href='${myUrlGetforSalesOrder}' class='text-decoration-none  ms-3 mt-1'>
                                                                                Edit
                                                                            </a>
                                                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                        <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                            ${statusDependentHtml}

                                                                        </ul>
                                                                    </div>
                                                                `;

                                return html;
                            }
                            if (data.DocTypes == 'Sales receipt') {
                                var html = `
                                                <div class='dropdown ms-1'>

                                                                                        <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none  ms-3 mt-1'>
                                                            Edit
                                                        </a>
                                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                    <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                        ${statusDependentHtml}

                                                    </ul>
                                                </div>
                                            `;

                                return html;
                            }
                            if (data.DocTypes == 'Delayed Charge') {
                                var html = `
                                                <div class='dropdown ms-1'>

                                                                                                <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none  ms-3 mt-1'>
                                                            Edit
                                                        </a>
                                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                    <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                        ${statusDependentHtml}

                                                    </ul>
                                                </div>
                                            `;

                                            return html;
                                        }
                                        
                                    }
                                    
                                }
                            },
                            visible: true, cellClick: function (e, cell) {
                                // Add a custom class to the cell when it's clicked
                                cell.getElement().classList.add('active-cell');
                            },
                        },
                        
                    ],
                    
                });
                document.getElementById("customerPrint-table").addEventListener("click", function () {
                    customerDetailTable.print(false, true);
                });
                document.getElementById("customerDownload-xlsx").addEventListener("click", function () {
                    customerDetailTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
                });
            });

         }

        
        var globalFields3 = [
            { title: "Check Box", field: "CheckBoxes", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true, width: 50 },
            {
                title: "Date",
                field: "SalesDates",
                width: "10%", cssClass: "text-center",
                formatter: function (cell, formatterParams, onRendered) {
                    var date = new Date(cell.getValue());
                    var day = date.getDate();
                    var monthNames = [
                        "Jan", "Feb", "Mar",
                        "Apr", "May", "Jun",
                        "Jul", "Aug", "Sep",
                        "Oct", "Nov", "Dec"
                    ];
                    var monthIndex = date.getMonth();
                    var year = date.getFullYear().toString().substr(-2); // Extract last 2 digits of year

                    return day + '-' + monthNames[monthIndex] + '-' + year;
                }
            },

            { title: "Type", field: "DocTypes", cssClass: "text-center", width: "10%" },
            { title: "NO.", field: "SaleCodes", cssClass: "text-center", width: "12%" },
            { title: "Customer", field: "CustomerNames", cssClass: "text-center", width: "16%" },
            { title: "Amount", field: "Totals", cssClass: "text-center", width: "10%" },
            // { title: "Status", field: "StatusRemarks", cssClass: "text-center", width: "20%" },
            {
                title: "Status", field: "StatusRemarkss", width: "15%", cssClass: "text-center", vertAlign: "middle",

                formatter: function (cell, formatterParams, onRendered) {
                    var status = cell.getValue();
                    var rowData = cell.getRow().getData();
                    var content = status;

                    if (status === "Paid" || status === "Applied") {
                        //content += '<span class="checkmark"><i class="bi bi-check-circle-fill" style="color: #2ca01c; margin-left: 4px;"></span>';
                        content = '<span class="checkmark"><i class="bi bi-check-circle-fill" style="color: #2ca01c; margin-right: 4px;"></i></span>' + content;
                    }

                    if (status.startsWith("Overdue")) {
                        //content += '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #ffbf00; margin-left: 4px;"></span>';
                        content = '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #ffbf00; margin-right: 4px;"></i></span>' + content;

                    }
                    if (status === "Rejected") {
                        content = '<span class="checkmark"><i class="bi bi-exclamation-circle-fill" style="color: #b80000; margin-right: 4px;"></i></span>' + content;

                    }
                    return content;
                },
            },
            {
                title: "Actions", field: "button1", headerHozAlign: "center", headerSort: false, hozAlign: "center", resizable: false, width: "18px", formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    var docType = data.DocTypes || '';
                    var myUrlGetforInvoice = `@Url.Action("EditInvoice", "Sales")?id=${data.Id}&type=${docType}`;
                    var myUrlGetforCreditNote = myUrlGetforInvoice;
                    //var myUrlGetforMakePayment = `@Url.Action("EditReceivePaymentQB", "Sales")?id=${data.Id}`;
                    //var myUrlGetforEstimate = `@Url.Action("EditEstimate", "Sales")?id=${data.Id}`;
                    var myUrlGetforEstimate = myUrlGetforInvoice;
                    var myUrlGetforSalesOrder = `@Url.Action("EditSalesOrder", "Sales")?id=${data.Id}`;
                    var myUrlGetforSalesReceipt = myUrlGetforInvoice;
                    var myUrlGetforDelayedCharge = myUrlGetforInvoice;
                    var myUrlGetforStockCount = `@Url.Action("EditStockCount", "Sales")?id=${data.Id}`;
                    var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}&ReportType=SALES%20INVOICE`;
                    var myUrlprint = '@Url.Action("SaleReport", "Sales")?SaleId=' + data.Id;

                    //var viewUrlGet = `@Url.Action("InvoiceViewReport", "Sales")?SaleId=${data.Id}`;
                    var inActive = `setInactiveUrl(${data.Id}) `
                    var active = `setActiveUrl(${data.Id}) `

                    var printHtml = `
                                                       <a href='${myUrlprint}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Print</span>  <br />
                                                       </a>
                                                               <div class='dropdown-divider m-0'></div>
                                                   `;

                    var ReportViewHtml = `
                                                               <a href='${viewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                           <i class='bi bi-pencil-square pe-1'></i> <span>View</span>  <br />
                                                       </a>
                                                               <div class='dropdown-divider m-0'></div>
                                                   `;

                    var editHtml;

                    if (data.DocTypes == 'Invoice') {
                        editHtml = `
                                                                       <a href='${myUrlGetforInvoice}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                               </a>
                                                                       <div class='dropdown-divider m-0'></div>
                                                           `;
                    }
                    if (data.DocTypes == 'Credit Note') {
                        editHtml = `
                                                                                       <a href='${myUrlGetforCreditNote}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                       </a>
                                                                               <div class='dropdown-divider m-0'></div>
                                                                   `;
                    }
                    if (data.DocTypes == 'Estimate') {
                        editHtml = `
                                                                                                       <a href='${myUrlGetforEstimate}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                               </a>
                                                                                       <div class='dropdown-divider m-0'></div>
                                                                           `;
                    }
                    if (data.DocTypes == 'Stock Count') {
                        editHtml = `
                                                                                                               <a href='${myUrlGetforStockCount}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                               </a>
                                                                                       <div class='dropdown-divider m-0'></div>
                                                                           `;
                    }
                    if (data.DocTypes == 'Sales order') {
                        editHtml = `
                                                                                                               <a href='${myUrlGetforSalesOrder}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                               </a>
                                                                                       <div class='dropdown-divider m-0'></div>
                                                                           `;
                    }
                    if (data.DocTypes == 'Sales receipt') {
                        editHtml = `
                                                                                                                       <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                                       </a>
                                                                                               <div class='dropdown-divider m-0'></div>
                                                                                   `;
                    }
                    if (data.DocTypes == 'Delayed Charge') {
                        editHtml = `
                                                                                                                        <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                                   <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                                               </a>
                                                                                                       <div class='dropdown-divider m-0'></div>
                                                                                           `;
                    }

                    var viewHtml = `
                                                               <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                               <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                              </a>

                                                   `;

                    var deleteHtml;
                    if (data.IsDelete == 0) {
                        deleteHtml = `
                                        <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                            <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                        </a>
                                    `;
                    }

                    var statusDependentHtml = data.isPosted ? viewHtml : printHtml + ReportViewHtml + editHtml + deleteHtml;
                    var paymentGet = `@Url.Action("AddReceivePaymentQB", "Sales")?id=${data.Id}`;
                    if (data.DocTypes == 'Invoice') {
                        var html = `
                                                    <div class='dropdown ms-1'>

                                                                        <a href='${paymentGet}' class='text-decoration-none  ms-3 mt-1'>
                                                                Receive Payment
                                                            </a>
                                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                        <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                            ${statusDependentHtml}

                                                        </ul>
                                                    </div>
                                                `;

                        return html;
                    }
                    else {
                        if (data.DocTypes == 'Credit Note') {
                            var html = `
                                                            <div class='dropdown ms-1'>

                                                                                            <a href='${myUrlGetforCreditNote}' class='text-decoration-none  ms-3 mt-1'>
                                                                        Edit
                                                                    </a>
                                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                    ${statusDependentHtml}

                                                                </ul>
                                                            </div>
                                                        `;

                            return html;
                        }
                        else {
                            if (data.DocTypes == 'Estimate') {
                                var html = `
                                                                    <div class='dropdown ms-1'>

                                                                                                    <a href='${myUrlGetforEstimate}' class='text-decoration-none  ms-3 mt-1'>
                                                                                Edit
                                                                            </a>
                                                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                        <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                            ${statusDependentHtml}

                                                                        </ul>
                                                                    </div>
                                                                `;

                                return html;
                            }
                            if (data.DocTypes == 'Stock Count') {
                                var html = `
                                                                    <div class='dropdown ms-1'>

                                                                                                            <a href='${myUrlGetforStockCount}' class='text-decoration-none  ms-3 mt-1'>
                                                                                Edit
                                                                            </a>
                                                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                        <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                            ${statusDependentHtml}

                                                                        </ul>
                                                                    </div>
                                                                `;

                                return html;
                            }
                            if (data.DocTypes == 'Sales order') {
                                var html = `
                                                                            <div class='dropdown ms-1'>

                                                                                                                    <a href='${myUrlGetforSalesOrder}' class='text-decoration-none  ms-3 mt-1'>
                                                                                        Edit
                                                                                    </a>
                                                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                    ${statusDependentHtml}

                                                                                </ul>
                                                                            </div>
                                                                        `;

                                return html;
                            }
                            if (data.DocTypes == 'Sales receipt') {
                                var html = `
                                                                                    <div class='dropdown ms-1'>

                                                                                                                            <a href='${myUrlGetforSalesReceipt}' class='text-decoration-none  ms-3 mt-1'>
                                                                                                Edit
                                                                                            </a>
                                                                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                        <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                            ${statusDependentHtml}

                                                                                        </ul>
                                                                                    </div>
                                                                                `;

                                return html;
                            }
                            if (data.DocTypes == 'Delayed Charge') {
                                var html = `
                                                                                            <div class='dropdown ms-1'>

                                                                                                                                            <a href='${myUrlGetforDelayedCharge}' class='text-decoration-none  ms-3 mt-1'>
                                                                                                        Edit
                                                                                                    </a>
                                                                                                <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                                <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                                    ${statusDependentHtml}

                                                                                                </ul>
                                                                                            </div>
                                                                                        `;

                                return html;
                            }

                        }

                    }
                },
                visible: true, cellClick: function (e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                },
            },

        ]

                     console.log("globalFieldsForSalesList::", globalFields3);
                       var columnListCustomers = $("#customerColumnList1");
                  $.each(globalFields3, function (index, field) {
                    ////console.log("GLOBAL 2::",field);
                    var title = field.title;
                    var name = field.field;
                    var visible = true;
                    if (field.visible == false) {
                        visible = false;
                    }
                    titles = `<li>
                                <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs" >
                                <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
                                        <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                                </div>
                                </a>
                                </li>`;
                    columnListCustomers.append(titles);

                    document.querySelector(`#${name}`).addEventListener('click', function (event) {
                        var checkbox = event.target;
                        var isChecked = checkbox.checked;

                        if (isChecked) {
                            customerDetailTable.showColumn(name);
                        } else {
                            customerDetailTable.hideColumn(name);
                        }
                    });


                    $(`${'#' + name}`).prop('checked', visible);


                    $('.custom-control-label').on('click', function (e) {
                        e.stopPropagation();
                    });
                    $('#dropdown-titles').on('click', function (e) {
                        e.stopPropagation();
                    });

                    //Add event listener to the rows select input
                    $("#customer-rows1").on("change", function () {
                        var selectedRows = $(this).val();
                        if (selectedRows !== null) {
                            // Convert the selected value to an integer
                            var pageSize = parseInt(selectedRows);
                            if (!isNaN(pageSize)) {
                                // Set the page size for the parentTable
                                customerDetailTable.setPageSize(pageSize);

                                //// You may also want to update the parent table height
                                //updateParentTableHeight();
                            }
                        }
                    });

                });

                             function GetSupplierAllForSideBar() {

                                  $.get(`@Url.Action("GetCustomersForInvoice", "Sales")`, function (res) {
                            console.log("sourav",res.data);
                            var ditem = [];
                            var lditem =res.data.map(m => {
                                return `<li class="list-group-item">
                                <a href="javascript:void(0)" onclick="GetDetailsData(${m.Id})">${m.CustomerName}</a>
                                        <p>${m.OpBalance}</p>
                                </li>`
                            });
                                   ditem= ditem.concat(lditem);
                            $("#Splist").html(ditem);

                        }).fail(function (xhr, status, error) {
                            console.error("Error:", error);
                        });

                                        }

                                        function GetSupplierAllForSideBarSearch() {
                                var searchtext= $('#searchBox').val();
                                if(searchtext.length<2){
                                    return false;
                                }
                                  $.get(`@Url.Action("GetCustomersForInvoice", "Sales")?searchquery=${searchtext}`, function (res) {
                            console.log("sourav",res.data);
                            var ditem = [];
                            var lditem =res.data.map(m => {
                                return `<li class="list-group-item">
                                <a href="javascript:void(0)" onclick="GetDetailsData(${m.Id})">${m.CustomerName}</a>
                                        <p>${m.OpBalance}</p>
                                </li>`
                            });
                                   ditem= ditem.concat(lditem);
                            $("#Splist").html(ditem);

                        }).fail(function (xhr, status, error) {
                            console.error("Error:", error);
                        });

                                        }

                                    function addCommasToNumber(number) {
    if (typeof number !== 'undefined' && number !== null) {
        return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
    return '0'; // Return empty string if the number is undefined or null
}

                        function GetEachCustomerDetails(Id){
                           // alert("check");
                             $.get(`@Url.Action("GetCustomerDetails", "Sales")?id=${Id}`, function (res) {
                                res=res.data;
                           let visupName= $('#vi-sup-Name');
                           let hometab= $('#home-tab');
                           hometab.click();
                           let vicomname= $('#vi-sup-comname');
                           let viaddress= $('#vi-sup-address');
                           let edtbtn= $('.vi-supplier-editbtn');
                           let visupopenBanlance= $('#vi-sup-openBanlance');
                           let visupmail= $('#vi-sup-mail');
                           let visupmob= $('#vi-sup-mob');
                           let visupoverdue= $('#vi-sup-overdue');

                           visupName.html(res.Name ? res.Name : 'No Name available');
                           viaddress.html(res.BillingStreetAddress ? res.BillingStreetAddress : 'No PrimaryAddress available');
                           vicomname.html(res.CompanyName ? res.CompanyName : 'No Company Name available');
                                  
                                    visupopenBanlance.html(addCommasToNumber(res.ClBalance));
                                    visupoverdue.html(addCommasToNumber(res.OverDueBalance));

                        edtbtn.attr('onclick', `editCustomer(${res.Id})`);
                        visupmail.attr('href', `mailto:${res.Email}`);
                        visupmob.attr('href', `tel:${res.Phone}`);

                        // Selectors for elements using jQuery
                        var diName = $('#di-Name');
                        var diEmail = $('#di-Email');
                        var diPhone = $('#di-Phone');
                        var diMobile = $('#di-Mobile');
                        var diFax = $('#di-Fax');
                        var diOther = $('#di-Other');
                        var diWebsite = $('#di-Website');
                        var diBilling = $('#di-Billing');
                        var diTerms = $('#di-Terms');
                        var diCompany = $('#di-Company');
                        var diNotes = $('#di-Notes');

                        diName.html(res.Name ? res.Name : 'No Name available');
                        diEmail.html(res.Email ? res.Email : 'No Email available');
                        diPhone.html(res.Phone ? res.Phone : 'No Phone available');
                        diMobile.html(res.Phone ? res.Phone : 'No Phone available');
                        diFax.html('xxxxx');
                        diOther.html('Other Information');
                        diWebsite.html('www.example.com');
                        diBilling.html(res.BillingStreetAddress ? res.BillingStreetAddress : 'No PrimaryAddress available');
                        diTerms.html('Terms Information' );
                        diCompany.html(res.CompanyName ? res.CompanyName : 'No CompanyName available');
                        diNotes.html(res.Notes ? res.Notes : 'No notes available');

                                 console.log("single Supplier",res);


                        }).fail(function (xhr, status, error) {
                            console.error("Error:", error);
                        });
                        }

                        
                         $('#customerInput').on('input', function() {
                            var inputValue = $(this).val();
                            var url = '@Url.Action("GetCustomersForInvoice", "Sales")' + '?searchquery=' + inputValue;
                            customerSearchTable.setData(url);

                        });

                        function GetCustomerDetailsList() {
                                        function fetchDataFromServerAll() {
                                            var MyAppUrlSettings = {
                                                MyUsefulUrl: '@Url.Action("GetCustomersForInvoice", "Sales")'
                                            };
                                            return $.ajax({
                                                url: MyAppUrlSettings.MyUsefulUrl,
                                                dataType: "json",
                                            });
                                        }

                                        fetchDataFromServerAll().done(function (response) {

                                            console.log("normal response:", response);
                                            var dataTableFilter = response.data;

                                            console.log("dataTableFilter::", dataTableFilter);
                                    

                                      //==================suppliers tabulator functionalties starts=============
                                        var supplierApiUrl = '@Url.Action("GetCustomersForInvoice", "Sales")';

                                         customerSearchTable = new Tabulator("#Customer-details-CustomerName", {
                                                data: dataTableFilter,                                                
                                                layout: "fitColumns",                                                                                              
                                                selectable:1,
                                                height:"450px",
                                                pagination: true,
                                                paginationMode: "remote",
                                                 paginationSize: 10,
                                                // paginationInitialPage: 1,
                                                 paginationSizeSelector: [5, 10, 25, 50, 100, 1000],                                                
                                                ajaxURL: supplierApiUrl,
                                                ajaxConfig: "get",
                                                ajaxContentType: "json",

                                                    ajaxResponse: function (url, params, response) {
                                                        customerSearchTable.setMaxPage(response.last_page);
                                                    console.log("response.last_page", response.last_page);

                                                    dataLoadExpense = response.data;
                                                   /* console.log("dataLoadExpense:", dataLoadExpense);*/

                                                    return {

                                                        data: dataLoadExpense,
                                                        last_page: response.last_page,

                                                    };
                                                },

                                                columns: [

                                                    {
                                                        title: "Name",  
                                                        headerHozAlign: "center",
                                                        field: "CustomerNames",                                                     
                                                        hozAlign: "left",
                                                       //headerFilter:true,
                                                        formatter: function (cell, formatterParams, onRendered) {

                                                            var rowData = cell.getRow().getData();                                               
                                                            var container = document.createElement("div");
                                                            container.style.display = "flex";
                                                            container.style.alignItems = "center";
                                                            var contentSpan = document.createElement("span");
                                                            contentSpan.textContent = rowData.CustomerNames;
                                                            contentSpan.style.marginRight = "5px"; 
                                                            var link = document.createElement("a");
                                                            link.href = "javascript:void(0)";
                                                            link.setAttribute("onclick", `GetDetailsData(${rowData.Id})`);
                                                            link.appendChild(contentSpan);
                                                            container.appendChild(link);
                                                            return container;
                                                        },
                                                    },
                                                    { title: "OPEN BALANCE", field: "OpBalance", movable: false, headerSort: false, visible: false }
                                                ],
                                                dataBound: function () {                                       
                                                    var rows = table.getRows();
                                                    if (rows.length > 0) {
                                                        var cells = rows[0].getCells();
                                                        cells.forEach(cell => {
                                                            cell.freeze();
                                                        });
                                                    }
                                                },
                                            });
                                       });
                                       }   


                                       //currency dropdown populate in customer entry 
                                        getCurrencyDropdown();
           function getCurrencyDropdown() {
           $.ajax({
               url: '@Url.Action("GetCurrencyDropdowForCurrencyCenter", "Admin")',
               success: function (data) {
                   console.log("see currency",data);
                   const select = document.querySelector('#currency');
                   for (var i = 0; i < data.length; i++) {
                       const option = document.createElement('option');
                       option.value = data[i].Value;
                       option.text = data[i].Text;
                       select.appendChild(option);
                   }
               }
           });
     };
        $("#currency").on("change", function () {
            var selectedText = $(this).find("option:selected").text();
            if (selectedText != "BDT") {
                $(".opBalanceParentDiv").addClass("d-none");
            }
            else {
                $(".opBalanceParentDiv").removeClass("d-none");
            }
            //    alert(selectedText);
        });
    </script>

}