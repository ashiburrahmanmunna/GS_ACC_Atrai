@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@* @model IEnumerable<Atrai.Model.Core.Entity.SalesModel> *@
@using Microsoft.AspNetCore.Mvc.ViewFeatures

@{
    ViewData["Title"] = "Invoice Entry";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var id = ViewBag.Id as string;
    var actionType = ViewBag.ActionType as string;
    var transactionType = ViewBag.TransactionType as string;
    List<SelectListItem> recurringTypeList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Scheduled", Value = "Scheduled" },
        new SelectListItem { Text = "Reminder", Value = "Reminder" },
        new SelectListItem { Text = "Unscheduled", Value = "Unscheduled" },
    };
    List<SelectListItem> IntervalList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Daily", Value = "Daily" },
        new SelectListItem { Text = "Weekly", Value = "Weekly" },
        new SelectListItem { Text = "Monthly", Value = "Monthly" },
        new SelectListItem { Text = "Yearly", Value = "Yearly" },
    };
    List<SelectListItem> weekList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Monday", Value = "Monday" },
        new SelectListItem { Text = "Tuesday", Value = "Tuesday" },
        new SelectListItem { Text = "Wednesday", Value = "Wednesday" },
        new SelectListItem { Text = "Thursday", Value = "Thursday" },
        new SelectListItem { Text = "Friday", Value = "Friday" },
        new SelectListItem { Text = "Saturday", Value = "Saturday" },
        new SelectListItem { Text = "Sunday", Value = "Sunday" },
    };
    List<SelectListItem> countList = new List<SelectListItem>
    {
        new SelectListItem { Text = "day", Value = "day" },
        new SelectListItem { Text = "first", Value = "first" },
        new SelectListItem { Text = "second", Value = "second" },
        new SelectListItem { Text = "third", Value = "third" },
        new SelectListItem { Text = "fourth", Value = "fourth" },
        new SelectListItem { Text = "last", Value = "last" },
    };
    List<SelectListItem> intergerList = new List<SelectListItem>
    {
        new SelectListItem { Text = "1st", Value = "1st" },
        new SelectListItem { Text = "2nd", Value = "2nd" },
        new SelectListItem { Text = "3rd", Value = "3rd" },
    };
    for (int i = 4; i <= 28; i++)
    {
        intergerList.Add(new SelectListItem { Text = $"{i}th", Value = $"{i}th" });
    }
    intergerList.Add(new SelectListItem { Text = "Last", Value = "Last" });

    List<SelectListItem> monthList = new List<SelectListItem>
    {
        new SelectListItem { Text = "January", Value = "January" },
        new SelectListItem { Text = "February", Value = "February" },
        new SelectListItem { Text = "March", Value = "March" },
        new SelectListItem { Text = "April", Value = "April" },
        new SelectListItem { Text = "May", Value = "May" },
        new SelectListItem { Text = "June", Value = "June" },
        new SelectListItem { Text = "July", Value = "July" },
        new SelectListItem { Text = "August", Value = "August" },
        new SelectListItem { Text = "September", Value = "September" },
        new SelectListItem { Text = "October", Value = "October" },
        new SelectListItem { Text = "November", Value = "November" },
        new SelectListItem { Text = "December", Value = "December" }
    };
    List<SelectListItem> EndList = new List<SelectListItem>
    {
        new SelectListItem { Text = "None", Value = "None" },
        new SelectListItem { Text = "By", Value = "By" },
        new SelectListItem { Text = "After", Value = "After" },
    };
}
@model int
<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<style>
    

    .wide-dropdown {
        width: 240px; /* Set the desired width here */
    }

    .wide-dropdown2 {
        width: 350px;
        height: 60px;
    }

    .custom-height {
        height: 30px;
    }

    .custom-xy {
        height: 30px;
        width: 150px;
    }

    .footerButton{
        position: fixed;
        bottom: 0;
        width: 100%;
    }

    .form-label {
        margin-bottom: 0 !important;
    }

    .mb-2 {
        margin-bottom: 0 !important;
    }

    .mb-3 {
        margin-bottom: 0 !important;
    }

    .page-content {
        /*background: #EEEEEE;*/
        padding: inherit;
    }

    #offcanvasRight {
        width: 30%;
    }

    .custom-background {
        /* background: #EEEEEE; */
        background: #F9F9F9;
    }

    #message-invoice::placeholder {
        text-align: left;
        vertical-align: top;
    }

    #shipping-amount {
        padding: 0 !important;
    }

    #shipping-tax {
        padding: 0 !important;
    }

    .left-button {
        margin-right: auto; /* Push the button to the left by using auto margin */
    }

    .tabulator {
        position: relative;
        border: 1px #999;
        background-color: #ffffff;
        font-size: 14px;
        text-align: left;
        overflow: hidden;
        -webkit-transform: translateZ(0);
        -moz-transform: translateZ(0);
        -ms-transform: translateZ(0);
        -o-transform: translateZ(0);
        transform: translateZ(0);
    }

        .tabulator .tabulator-header .tabulator-col {
            display: inline-flex;
            position: relative;
            box-sizing: border-box;
            flex-direction: column;
            justify-content: flex-start;
            /*border-right: 1px solid #aaa;*/
            background: #ffffff !important;
            text-align: left;
            vertical-align: bottom;
            overflow: hidden;
        }

    .tabulator-table .tabulator-row {
        background-color: white;
    }

    #example-table {
        height: auto !important;
        border-bottom: 3px solid #ccc;
        margin-bottom: 10px
    }

    #file-drop-area {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
    }

    #image-uploadify {
        display: none;
    }

    .tabulator-row:nth-child(odd) .tabulator-cell {
        border-right-color: transparent;
    }

    .tabulator-row:nth-child(even) .tabulator-cell {
        border-right-color: transparent;
    }

    .tabulator .tabulator-header .tabulator-col {
        border-right-color: transparent;
    }

    .offcanvas-backdrop {
        background-color: #00000017;
    }

    .select2-container .select2-selection--multiple {
        height: 67px;
        border: solid #00000040 1px;
    }

    .select2-container--default.select2-container--focus .select2-selection--multiple {
        border: solid #00000040 1px;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__display {
        padding-left: 20px;
    }

    .tabulator .tabulator-tableholder {
        overflow-x: hidden !important;
    }

    .back-to-top {
        bottom: 60px !important;
    }

    .save-button {
        height: 30px;
        width: 150px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .back-button {
        height: 30px;
        width: 150px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #RecurringType {
        width: 130px;
    }

    #Interval {
        width: 100px;
    }

    #Week {
        width: 100px;
    }

    #Count {
        width: 100px;
    }

    #Integer {
        width: 80px;
    }

    #Month {
        width: 120px;
    }

    #End {
        width: 80px;
    }
</style>

<section class="mb-2 custom-background">
    @* style="padding-bottom:20px" *@

    <div class="container-fluid ">
        <div class="row" id="top-row">
            <div class="col-lg-9">
                @if (ViewBag.TransactionType == "Stock Count")
                {
                    <h4><p>@ViewBag.ActionType Stock Count#</p></h4>
                }
                
            </div>
            
        </div>
        <div class="col-lg-3 col-12 d-none">
            <div class="mb-3">
                <label class="form-label ">
                    Customer<span style="color: red;">*</span>
                </label>
                @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, new { id = "Customer", @class = "wide-dropdown form-select form-select-sm" })
            </div>
        </div>

        

    </div>


</section>

<section>
    <div style="padding: 20px">
        <input id="sales-id" type="text" value="0" hidden />

        <div id="example-table"></div>
        <div>
            <div class="row">
                <div class="col-lg-1 col-12">
                    <div class="mb-3" style="display: flex; justify-content: center; align-items: center;">
                        <button id="add-row" class="btn btn-outline-dark" style="height: 32px; padding: 5px;">
                            Add Row
                        </button>
                    </div>
                </div>
                <div class="col-lg-2 col-12">
                    <div class="mb-3">
                        <button id="del-row" class="btn btn-outline-dark" style="height: 32px; padding: 5px;">Clear Table </button>
                    </div>
                </div>

                <div class="col-lg-6 col-12">
                    <div class="mb-3">
                    </div>
                </div>
                <div class="col-lg-1 col-12">
                    <div class="mb-3">
                        <p style="font-weight: bold; font-size: 16px; text-align: right;">Subtotal</p>
                    </div>
                </div>
                <div class="col-lg-2 col-12">
                    <div class="mb-3">
                        <p id="subtotal" style="font-size: 14px;">$ 0.00</p>
                    </div>
                </div>
            </div>

        </div>
        

    </div>

</section>

<div class="row footerButton" style="padding: 5px; background: #393a3d; height: 39px;">
    @*<button class="btn btn-info btn-md" id="save-bill">Save Bill</button>*@
    <div class="col-md-1 col-1">
        <button class="btn-outline-secondary btn-md mx-2 fw-bold radius-30 py-1 me-3 bottom-bar-css-s-n-c back-button" id="BtnBack" onclick="gotoInvoiceList()"><span style="color: white">Cancel</span></button>
    </div>
   <div class="col-md-9 col-9">

   </div>
    <div class="col-md-1 col-1" style="margin-left: 30px;">
        @if (ViewBag.TransactionType == "Stock Count")
        {
            @if (ViewBag.ActionType == "Edit")
            {
                <button class="btn-success  fw-bold radius-30 py-1 me-3 bottom-bar-css-s-n-c save-button" id="BtnSave">Update</button>
            }
            else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
            {
                <button class="btn-success  fw-bold radius-30 py-1 me-3 bottom-bar-css-s-n-c save-button" id="BtnSave">Save</button>
            }
        }
       
    </div>


</div>


@section Scripts{
    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsVoucherReport.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function () {
            if ('@transactionType' === "Stock Count") {

                if ('@actionType' === "Create") {

                }
                if ('@actionType' === "Edit") {
                    $("#invoice-no").prop("disabled", false)
                    var id = @ViewBag.Id;
                    console.log(id);

                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetInvoiceDetails", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#Customer").val(model.CustomerId).trigger('change');
                           
                            initializeTabulator(model.Items);
                           
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }

            }
            function initializeTabulator(data) {
                if (table) {
                    data.forEach(function (row, index) {
                        var dateObj = new Date(row.ServiceDate);

                        row.ServiceDate = dateObj.getDate() + '-' +
                            new Intl.DateTimeFormat('en-us', { month: 'short' }).format(dateObj) + '-' +
                            dateObj.getFullYear();

                        row.SLNo = index + 1;
                    });
                    table.setData(data);
                } else {
                    table = new Tabulator("#example-table", {
                        height: "311px",
                        layout: "fitColumns",
                        addRowPos: "bottom",
                        columns: columns,
                        data: data,
                    });
                }
            }
        });

        var selectOptions = @Html.Raw(Json.Serialize(ViewBag.ProductList));
        var selectedTax = @Html.Raw(Json.Serialize(ViewBag.TaxList));
        var selectedLocation = @Html.Raw(Json.Serialize(ViewBag.WarehouseIdMain));


        //Build Tabulator
        var initialData = [
            {
                "SLNo": "1",
                "Id": "0",
                "SERVICE DATE": "",
                "PRODUCT": "",
                "HiddenValue": "",
                "DESCRIPTION": "",
                "QTY": ""
            }
        ];
        var columns = [
            // { title: "SERVICE DATE", field: "SERVICE DATE", width: 200, editor: "input" },
            {
                headerSort: false,
                field: "drag",
                frozen: true,
                formatter: function (cell, formatterParams) {
                    return "<i class='fas fa-bars drag-icon'></i>";
                },
                width: 30,
                headerSort: false,
                rowHandle: true,


            },
            { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
            { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '5px', bottomCalc: "count", hozAlign: "right" },

            {
                title: "SERVICE DATE",
                field: "ServiceDate",
                editor: "input",
                editorParams: {
                    dateFormat: "d-M-Y", // Set the desired date format (10-Aug-2023)
                },
                cellEdited: function (cell) {
                    // Update the data with the selected date when the cell is edited
                    cell.getRow().update({ "ServiceDate": cell.getValue() });
                },
                editor: function (cell, onRendered, success, cancel, editorParams) {
                    // Create an input field for the date picker
                    var input = document.createElement("input");
                    input.type = "text";
                    input.style.width = "100%";
                    input.value = cell.getValue() || ""; // Set the initial value to an empty string

                    // Initialize Flatpickr
                    var flatpickrInstance = flatpickr(input, editorParams);

                    // When a date is selected, trigger the cellEdited event
                    flatpickrInstance.config.onClose.push(function (selectedDates, dateStr) {
                        cell.setValue(dateStr);
                        success(dateStr);
                    });

                    // Append the input to the cell
                    onRendered(function () {
                        input.focus();
                    });

                    return input;
                },
            },


            {
                title: "PRODUCT/SERVICE",
                field: "Name",
                hozAlign: "center",
                sorter: "number",
                editor: "select",
                editorParams: {
                    values: selectOptions.map(option => option.Text),
                },
                cellEdited: function (cell) {
                    // Update the hidden column ("HiddenValue") with the selected value
                    var rowData = cell.getRow().getData();
                    if (rowData.ServiceDate === undefined) {
                        rowData.ServiceDate = moment().format('DD-MMM-YYYY');
                        cell.getRow().update({ ServiceDate: rowData.ServiceDate });
                    }
                    var selectedText = cell.getValue();
                    var selectedValue = selectOptions.find(option => option.Text === selectedText);
                    if (selectedValue) {
                        cell.getRow().update({ ProductId: selectedValue.Value, Quantity: 1 });
                        
                    }
                },
            },
            {
                title: "Hidden Value",
                field: "ProductId",
                visible: false,
                editor: "input",
            },


            { title: "DESCRIPTION", field: "Description", width: 180, editor: "input" },
            {
                title: "Location<span style=\"color: red; \">*</span>",
                titleFormatter: "html",
                field: "WHName",
                hozAlign: "center",
                sorter: "number",
                editor: "select",
                editorParams: {
                    values: selectedLocation.map(option => option.Text),
                },
                cellEdited: function (cell) {
                    var selectedText = cell.getValue();
                    var selectedValue = selectedLocation.find(option => option.Text === selectedText);
                    if (selectedValue) {
                        cell.getRow().update({ WarehouseId: selectedValue.Value });
                    }
                },
                visible: '@transactionType' !== "Estimate"
            },
            {
                title: "Hidden Value",
                field: "WarehouseId",
                visible: false,
                editor: "input",
            },
            {
                title: "QTY", field: "Quantity", hozAlign: "center", headerHozAlign: "center", editor: "input"
            },
           
            
            
        ];


        var deleteColumn = {
            title: "",
            field: "Delete",
            movable: false,
            formatter: function (cell, formatterParams) {
                return "<i class='fas fa-trash-alt delete-icon'></i>";
            },
            width: 70,
            headerSort: false,
            cellClick: function (e, cell) {
                var rowData = cell.getRow().getData();
                var row = cell.getRow();
                deleteRow(row);
            }
        };

        columns.push(deleteColumn);

        var table = new Tabulator("#example-table", {
            height: "311px",
            layout: "fitColumns",
            addRowPos: "bottom",
            columns: columns,
            data: initialData,
        });

        function renumberRows() {
            var rows = table.getRows();
            rows.forEach(function (row, index) {
                row.update({ SLNo: index + 1 });
            });
        }

        function deleteRow(row) {
           
            if (confirm("Are you sure you want to delete this row?")) {
                table.deleteRow(row);
                console.log("Row deleted successfully.");
                renumberRows();
            }

        }
        document.getElementById("add-row").addEventListener("click", function () {
            table.addRow({});
            renumberRows();
        });

        document.getElementById("del-row").addEventListener("click", function () {
            table.clearData();
            renumberRows();
        });

        function gatherData() {

            var dataList = [];

            var rows = table.getData();

            rows.forEach(function (row) {
                var rowData = {
                    "Id": row["Id"],
                    "ServiceDate": row["ServiceDate"],
                    "ProductId": row.ProductId,
                    "Description": row.Description,
                    "Quantity": row.Quantity,
                    "WarehouseId": row.WarehouseId,
                    "WHName": row.WHName,
                };

                dataList.push(rowData);
            });

            var salesData = {
                Id: $("#sales-id").val(),
                CustomerId: $("#Customer").val(),
                StockCountItem: dataList

            };

            return salesData;

        }

        function sendDataToServer() {
            var salesData = gatherData();

            var data = JSON.stringify(salesData);
           
            $.ajax({

                url: '@Url.Action("StockCountCreation", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    InvoiceId = response.Id;
                    console.log("Done");
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                    setTimeout(function () {
                        var myDiv = document.getElementById("top-row");

                        if (myDiv.classList.contains("d-none")) {
                            window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                        }
                        else {
                            window.location.href = '@Url.Action("InvoiceList", "Sales")';
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });
        }
        var saveButton = document.getElementById('BtnSave');
        saveButton.addEventListener('click', function () {
            sendDataToServer();
        });
    </script>
}