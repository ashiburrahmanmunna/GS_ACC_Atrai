@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@* @model IEnumerable<Atrai.Model.Core.Entity.SalesModel> *@
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@{
    ViewData["Title"] = "Invoice Entry";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var id = ViewBag.Id as string;
    var actionType = ViewBag.ActionType as string;
    var transactionType = ViewBag.TransactionType as string;
    List<SelectListItem> recurringTypeList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Scheduled", Value = "Scheduled" },
        new SelectListItem { Text = "Reminder", Value = "Reminder" },
        new SelectListItem { Text = "Unscheduled", Value = "Unscheduled" },
    };
    List<SelectListItem> IntervalList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Daily", Value = "Daily" },
        new SelectListItem { Text = "Weekly", Value = "Weekly" },
        new SelectListItem { Text = "Monthly", Value = "Monthly" },
        new SelectListItem { Text = "Yearly", Value = "Yearly" },
    };
    List<SelectListItem> weekList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Monday", Value = "Monday" },
        new SelectListItem { Text = "Tuesday", Value = "Tuesday" },
        new SelectListItem { Text = "Wednesday", Value = "Wednesday" },
        new SelectListItem { Text = "Thursday", Value = "Thursday" },
        new SelectListItem { Text = "Friday", Value = "Friday" },
        new SelectListItem { Text = "Saturday", Value = "Saturday" },
        new SelectListItem { Text = "Sunday", Value = "Sunday" },
    };
    List<SelectListItem> countList = new List<SelectListItem>
    {
        new SelectListItem { Text = "day", Value = "day" },
        new SelectListItem { Text = "first", Value = "first" },
        new SelectListItem { Text = "second", Value = "second" },
        new SelectListItem { Text = "third", Value = "third" },
        new SelectListItem { Text = "fourth", Value = "fourth" },
        new SelectListItem { Text = "last", Value = "last" },
    };
    List<SelectListItem> intergerList = new List<SelectListItem>
    {
        new SelectListItem { Text = "1st", Value = "1st" },
        new SelectListItem { Text = "2nd", Value = "2nd" },
        new SelectListItem { Text = "3rd", Value = "3rd" },
    };
    for (int i = 4; i <= 28; i++)
    {
        intergerList.Add(new SelectListItem { Text = $"{i}th", Value = $"{i}th" });
    }
    intergerList.Add(new SelectListItem { Text = "Last", Value = "Last" });

    List<SelectListItem> monthList = new List<SelectListItem>
    {
        new SelectListItem { Text = "January", Value = "January" },
        new SelectListItem { Text = "February", Value = "February" },
        new SelectListItem { Text = "March", Value = "March" },
        new SelectListItem { Text = "April", Value = "April" },
        new SelectListItem { Text = "May", Value = "May" },
        new SelectListItem { Text = "June", Value = "June" },
        new SelectListItem { Text = "July", Value = "July" },
        new SelectListItem { Text = "August", Value = "August" },
        new SelectListItem { Text = "September", Value = "September" },
        new SelectListItem { Text = "October", Value = "October" },
        new SelectListItem { Text = "November", Value = "November" },
        new SelectListItem { Text = "December", Value = "December" }
    };
    List<SelectListItem> EndList = new List<SelectListItem>
    {
        new SelectListItem { Text = "None", Value = "None" },
        new SelectListItem { Text = "By", Value = "By" },
        new SelectListItem { Text = "After", Value = "After" },
    };
}
@model int
<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<link href="~/css/custom_QBStyle.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<style>
    #customer-email::placeholder {
        font-size: 13px;
    }

    .wide-dropdown {
        width: 240px; /* Set the desired width here */
    }

    .wide-dropdown2 {
        width: 350px;
        height: 60px;
    }

    .custom-height {
        height: 30px;
    }

    .custom-xy {
        height: 30px;
        width: 150px;
    }

    .page-content {
        /*background: #EEEEEE;*/
        padding: inherit;
    }

    #offcanvasRight {
        width: 30%;
    }

    .custom-background {
        /* background: #EEEEEE; */
        background: #F9F9F9;
    }

    #message-invoice::placeholder {
        text-align: left;
        vertical-align: top;
    }

    #shipping-amount {
        padding: 0 !important;
    }

    #shipping-tax {
        padding: 0 !important;
    }

    .left-button {
        margin-right: auto; /* Push the button to the left by using auto margin */
    }

    .tabulator {
        position: relative;
        border: 1px #999;
        background-color: #ffffff;
        font-size: 14px;
        text-align: left;
        overflow: hidden;
        -webkit-transform: translateZ(0);
        -moz-transform: translateZ(0);
        -ms-transform: translateZ(0);
        -o-transform: translateZ(0);
        transform: translateZ(0);
    }

        .tabulator .tabulator-header .tabulator-col {
            display: inline-flex;
            position: relative;
            box-sizing: border-box;
            flex-direction: column;
            justify-content: flex-start;
            /*border-right: 1px solid #aaa;*/
            background: #ffffff !important;
            text-align: left;
            vertical-align: bottom;
            overflow: hidden;
        }

    .tabulator-table .tabulator-row {
        background-color: white;
    }

    #example-table {
        height: auto !important;
        border-bottom: 3px solid #ccc;
        margin-bottom: 10px
    }

    #file-drop-area {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
    }

    #image-uploadify {
        display: none;
    }

    .tabulator-row:nth-child(odd) .tabulator-cell {
        border-right-color: transparent;
    }

    .tabulator-row:nth-child(even) .tabulator-cell {
        border-right-color: transparent;
    }

    .tabulator .tabulator-header .tabulator-col {
        border-right-color: transparent;
    }

    .offcanvas-backdrop {
        background-color: #00000017;
    }

    .tabulator-row .tabulator-cell {
        /*  border-right: 1px solid #aaaaaa42;
                border-left: 1px solid #aaaaaa42; */
        border: 0.3px solid #d4d4d4;
    }

    .select2-container .select2-selection--multiple {
        height: 67px;
        border: solid #00000040 1px;
    }

    .select2-container--default.select2-container--focus .select2-selection--multiple {
        border: solid #00000040 1px;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__display {
        padding-left: 20px;
    }

    .tabulator .tabulator-tableholder {
        overflow-x: hidden !important;
    }

    .back-to-top {
        bottom: 60px !important;
    }



    .back-button {
        height: 30px;
        width: 150px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #RecurringType {
        width: 130px;
    }

    #Interval {
        width: 100px;
    }

    #Week {
        width: 100px;
    }

    #Count {
        width: 100px;
    }

    #Integer {
        width: 80px;
    }

    #Month {
        width: 120px;
    }

    #End {
        width: 90px;
    }

    .yc {
        color: #ff6a00;
    }

    .gc {
        color: #108000;
    }

    .greyc {
        color: #6b6c72;
    }

    .rc {
        color: #b80000;
    }

    .file-wrapper {
        position: relative;
        margin-bottom: 20px;
    }

    .remove-button {
        position: absolute;
        top: 5px;
        right: 5px;
        z-index: 10;
    }

    .file-iframe {
        width: 50%;
        height: auto;
        border: 1px solid #ccc;
        overflow: hidden;
    }

</style>

<div class="mb-5">
    <section class="mb-2 custom-background">
        @* style="padding-bottom:20px" *@

        <div class="container-fluid ">
            <div class="row" id="top-row">
                <div class="col-lg-9">
                    @if (ViewBag.TransactionType == "Invoice")
                    {
                        <h4><p>@ViewBag.ActionType Invoice#</p></h4>
                    }
                    @if (ViewBag.TransactionType == "Credit-note")
                    {
                        <h4><p>@ViewBag.ActionType Credit note#</p> </h4>
                    }
                    @if (ViewBag.TransactionType == "Estimate")
                    {
                        <h4><p>@ViewBag.ActionType Estimate#</p> </h4>
                    }
                    @if (ViewBag.TransactionType == "Sales_Order")
                    {
                        <h4><p>@ViewBag.ActionType Sales order#</p> </h4>
                    }
                    @if (ViewBag.TransactionType == "Sales_Receipt")
                    {
                        <h4><p>@ViewBag.ActionType Sales receipt#</p> </h4>
                    }
                    @if (ViewBag.TransactionType == "Delayed_Charge")
                    {
                        <h4><p>@ViewBag.ActionType Delayed Charge#</p> </h4>
                    }
                    @if (ViewBag.TransactionType == "Issue")
                    {
                        <h4><p>@ViewBag.ActionType Issue#</p> </h4>
                    }
                </div>
                <div class="col-md-3" style="padding:5px">
                    <button class="btn btn-primary float-end" id="showoffcanvas" style="display: none"><i class="bi bi-chevron-double-right"></i></button>
                </div>
            </div>

            <input type="hidden" id="LuserId" name="LuserId" value="" />
            <input type="hidden" id="ComId" name="ComId" value="" />

            <div style="padding: 18px;" id="First-row-Recurring" class="d-none">
                <input id="recurr-id" type="text" value="0" hidden />
                @if (ViewBag.TransactionType == "Invoice")
                {
                    <h5><p>Recurring Invoice</p></h5>
                }
                @if (ViewBag.TransactionType == "Credit-note")
                {
                    <h5><p>Recurring Credit note</p> </h5>
                }
                @if (ViewBag.TransactionType == "Estimate")
                {
                    <h5><p>Recurring Estimate</p> </h5>
                }
                @if (ViewBag.TransactionType == "Sales_Order")
                {
                    <h5><p>Recurring Sales order</p> </h5>
                }
                @if (ViewBag.TransactionType == "Sales_Receipt")
                {
                    <h5><p>Recurring Sales receipt</p> </h5>
                }
                @if (ViewBag.TransactionType == "Delayed_Charge")
                {
                    <h5><p>Recurring Delayed Charge</p> </h5>
                }
                <div class="d-flex justify-content-start" style="border-bottom: 1px solid #e0e0d1">
                    <div class="mb-3">
                        <label class="form-label f-label">Template name</label>
                        <input class="form-control custom-xy" id="temp-name" autocomplete="off" />
                    </div>
                    <div class="mb-3" style="margin-left: 40px;">
                        <label class="form-label f-label">
                            Type
                        </label>
                        @Html.DropDownList("RecurringType", recurringTypeList as List<SelectListItem>, new { id = "RecurringType", @class = "wide-dropdown form-select form-select-sm", onchange = "recurringTypeCriteria()" })
                    </div>
                    <div id="date-duration" class="d-flex">
                        <div style="margin-top: 36px;margin-left: 10px;margin-right: 10px;">
                            <p id="before-create-days">Create</p>
                        </div>
                        <div style="margin-top: 32px;">
                            <input class="form-control" id="create-days" autocomplete="off" style="width: 50px; height: 30px;" />
                        </div>
                        <div style="margin-top: 36px;margin-left: 10px;">
                            <p id="after-create-days">days in advance</p>
                        </div>
                    </div>


                </div>
            </div>

            <input id="sales-id" type="text" value="0" hidden />
            <div class="first-row">
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-12 col-12">
                            <div class="row">
                                @if (ViewBag.TransactionType == "Invoice")
                                {
                                    <div class="col-md-3 col-12">
                                        <div class="mb-3">
                                            <label class="form-label f-label">
                                                Customer  <span class="text-danger">*</span> <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i>
                                            </label>
                                            @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, "Select a customer", new { id = "Customer", @class = "wide-dropdown form-select form-select-sm" })
                                            <span class="text-danger" id="Customer-validation"></span>
                                        </div>
                                    </div>
                                }
                                @if (ViewBag.TransactionType == "Issue")
                                {
                                    <div class="col-md-3 col-12">
                                        <div class="mb-3">
                                            <label class="form-label f-label">
                                                Customer  <span class="text-danger">*</span> <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i>
                                            </label>
                                            @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, "Select a customer", new { id = "CustomerIssue", @class = "wide-dropdown form-select form-select-sm" })
                                            <span class="text-danger" id="Customer-validation"></span>
                                        </div>
                                    </div>
                                }
                                @if (ViewBag.TransactionType == "Credit-note")
                                {
                                    <div class="col-md-3 col-12">
                                        <div class="mb-3">
                                            <label class="form-label f-label">
                                                Customer <span class="text-danger">*</span>  <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i>
                                            </label>
                                            @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, "Select a customer", new { id = "Customer_CreditNote", @class = "wide-dropdown form-select form-select-sm" })
                                            <span class="text-danger" id="Customer-validation"></span>
                                        </div>
                                    </div>
                                }
                                @if (ViewBag.TransactionType == "Estimate")
                                {
                                    <div class="col-md-3 col-12">
                                        <div class="mb-3">
                                            <label class="form-label f-label">
                                                Customer <span class="text-danger">*</span>  <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i>
                                            </label>
                                            @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, "Select a customer", new { id = "Customer_Estimate", @class = "wide-dropdown form-select form-select-sm" })
                                            <span class="text-danger" id="Customer-validation"></span>
                                        </div>

                                        <div title="Settings" class="dropdown1  custom-grid" style="display:inline-block;">
                                            <div id="status-container" class="d-flex" data-bs-toggle="dropdown"
                                                 aria-expanded="false">
                                                <div id="pending"><i class="bi bi-clock-fill yc"></i></div>
                                                <div id="accepted" class="d-none"><i class="bi bi-check-circle-fill gc"></i></div>
                                                <div id="closed" class="d-none"><i class="bi bi-check-circle-fill greyc"></i></div>
                                                <div id="rejected" class="d-none"><i class="bi bi-exclamation-circle-fill rc"></i></div>

                                                @if (ViewBag.ActionType == "Create")
                                                {
                                                    <span id="estimate-status">Pending</span>
                                                    <i class="bi bi-chevron-down"></i>
                                                }
                                                else
                                                {
                                                    <span id="estimate-status"></span>
                                                    <i class="bi bi-chevron-down"></i>
                                                }
                                            </div>

                                            <div class="dropdown-menu gear-dropdown" aria-labelledby="dropdownMenuButton-sales" style="width: 500px;">
                                                <div class="row">
                                                    <div class="col-md-1 col-1 px-1"></div>
                                                    <div class="col-md-3 col-3 px-1">
                                                        <label>Status</label>
                                                        @Html.DropDownList("EstimateStatus", ViewBag.EstimateStatus as List<SelectListItem>, new { id = "EstimateStatus", @class = "form-select form-select-sm", onchange = "changeEstimateStatus(this.value)" })
                                                    </div>
                                                    <div class="col-md-4 col-4 px-1">
                                                        <label>By</label>
                                                        <input id="status-by" class="form-control custom-height" autocomplete="off" />
                                                    </div>
                                                    <div class="col-md-3 col-3 px-1">
                                                        <label>Date</label>
                                                        <input class="form-control custom-height" id="status-date" autocomplete="off" />
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                }
                                @if (ViewBag.TransactionType == "Sales_Order")
                                {
                                    <div class="col-md-3 col-12">
                                        <div class="mb-3">
                                            <label class="form-label f-label">
                                                Customer <span class="text-danger">*</span>  <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i>
                                            </label>
                                            @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, "Select a customer", new { id = "Customer_SalesOrder", @class = "wide-dropdown form-select form-select-sm" })
                                            <span class="text-danger" id="Customer-validation"></span>
                                        </div>
                                    </div>
                                }
                                @if (ViewBag.TransactionType == "Sales_Receipt")
                                {
                                    <div class="col-md-3 col-12">
                                        <div class="mb-3">
                                            <label class="form-label f-label">
                                                Customer <span class="text-danger">*</span>  <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i>
                                            </label>
                                            @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, "Select a customer", new { id = "Customer_SalesReceipt", @class = "wide-dropdown form-select form-select-sm" })
                                            <span class="text-danger" id="Customer-validation"></span>
                                        </div>
                                    </div>
                                }
                                @if (ViewBag.TransactionType == "Delayed_Charge")
                                {
                                    <div class="col-md-3 col-12">
                                        <div class="mb-3">
                                            <label class="form-label f-label">
                                                Customer <i class="bi bi-question-circle"></i> <span class="text-danger">*</span>  <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i>
                                            </label>
                                            @Html.DropDownList("Customers", ViewBag.Customers as List<SelectListItem>, "Select a customer", new { id = "Customer_Delayed_Charge", @class = "wide-dropdown form-select form-select-sm" })
                                            <span class="text-danger" id="Customer-validation"></span>
                                        </div>
                                    </div>
                                }
                                <div class="col-md-3 col-12" id="EmailDiv">
                                    <div class="mb-3">
                                        <label class="form-label f-label">Customer Email  <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i></label>
                                        <input id="customer-email" class="form-control custom-height" placeholder="Separate email with a comma" autocomplete="off" />

                                    </div>
                                    <div class="mb-2">
                                        <input id="send-later" type="checkbox" />
                                        <label class="form-label f-label">Send later  <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i></label>
                                    </div>
                                </div>
                                @if (ViewBag.TransactionType == "Invoice")
                                {
                                    <div class="col-md-2 col-12">
                                        <div class="mb-2">
                                            <label class="form-label f-label">Online payments</label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="checkbox" id="card" value="option1">
                                            <label class="form-check-label" for="card">
                                                Card
                                                <i class="fab fa-cc-mastercard text-danger"></i> <!-- MasterCard icon -->
                                                <i class="fab fa-cc-visa"></i> <!-- Visa icon -->
                                                <i class="fab fa-cc-amex text-primary"></i>
                                            </label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="checkbox" id="bank" value="option2">
                                            <label class="form-check-label" for="bank">Bank</label>
                                        </div>
                                    </div>
                                }
                                <div class="col-md-2 col-12">
                                    <div class="d-none" id="FiscalMonthDiv">
                                        <label class="form-label fw-semibold">Fiscal month</label>
                                        <select class="wide-dropdown form-select form-select-sm" id="FiscalMonthId"
                                                aria-label="Floating label select example">
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (ViewBag.TransactionType == "Credit-note")
                        {
                            <div class="col-md-2 col-2">
                                <div class="mt-3 ">
                                    <p style="font-size: 12px;">Amount to Refund</p>
                                    <h4>Tk<span id="tk-amount-refund">0.00</span></h4>
                                </div>

                            </div>
                        }


                    </div>

                    <div class="row">
                        <div class="d-flex mt-3" id="yourRateParent" style="width: 300px; display: none !important">
                            <label style="margin-top: 0.5rem">1 <span class="rate"></span><span class="flag"></span> = </label>
                            <input type="text" class="form-control h-100 ms-2 me-2 text-end" id="CurrencyRate" style="border-radius:0px; width: 40%;">
                            <input type="text" class="form-control w-50 h-100 ms-2 me-2" id="MultiiCurrencyId" style="border-radius:0px;" hidden>
                            <label style="margin-top: 0.5rem">BDT</label>  <i class="flag-icon flag-icon-bd"></i>
                        </div>
                    </div>
                    <div class="row" id="IntervalDiv">
                        <div class="d-flex justify-content-start" style=" border-bottom: 1px solid #e0e0d1; border-top: 1px solid #e0e0d1;">
                            <div style="margin-bottom: 10px;">
                                <div class="mb-3">
                                    <label >
                                        Interval
                                    </label>
                                    @Html.DropDownList("Interval", IntervalList as List<SelectListItem>, new { id = "Interval", @class = "wide-dropdown form-select form-select-sm", onchange = "intervalCriteria()" })
                                </div>
                            </div>
                            <div id="date-duration" class="d-flex">
                                <div style="margin-top: 26px;margin-left: 10px;margin-right: 10px;">
                                    <p id="before-every">every</p>
                                </div>
                                <div style="margin-top: 21px; ">
                                    <div class="mb-3">
                                        <input class="form-control" id="every" autocomplete="off" style="width: 50px; height: 30px;" />
                                    </div>
                                </div>
                                <div style="margin-top: 26px;margin-left: 10px;">
                                    <p id="after-interval">day(s) on</p>
                                </div>
                                <div class="d-flex" style="margin-top: 21px; margin-bottom: 26px; ">
                                    @Html.DropDownList("Count", countList as List<SelectListItem>, new { id = "Count", @class = "wide-dropdown form-select form-select-sm d-none", onchange = "changeListForMonth()" })
                                    @Html.DropDownList("Week", weekList as List<SelectListItem>, new { id = "Week", @class = "wide-dropdown form-select form-select-sm d-none" })
                                    @Html.DropDownList("Integer", intergerList as List<SelectListItem>, new { id = "Integer", @class = "wide-dropdown form-select form-select-sm d-none" })
                                    @Html.DropDownList("Month", monthList as List<SelectListItem>, new { id = "Month", @class = "wide-dropdown form-select form-select-sm d-none" })
                                </div>
                            </div>
                            <div class="d-flex">
                                <div style="width: 120px; margin-left: 10px;">
                                    <label>Start date</label>
                                    <input class="form-control custom-height" id="recurring-start-date" autocomplete="off" />
                                </div>
                                <div class="ms-1">
                                    <label >End</label>
                                    @Html.DropDownList("End", EndList as List<SelectListItem>, new { id = "End", @class = "wide-dropdown form-select form-select-sm", onchange = "limitCriteria()" })
                                </div>
                                <div style="width: 120px; margin-left: 10px;" id="recurringEndDiv" class="d-none">
                                    <label>End date</label>
                                    <input class="form-control custom-height" id="recurring-end-date" autocomplete="off" />
                                </div>
                                <div style="margin-top: 21px; margin-left: 10px;" class="d-none" id="occurencesDiv">
                                    <div class="mb-3">
                                        <input class="form-control" id="occurences" autocomplete="off" style="width: 50px; height: 30px;" />
                                    </div>
                                </div>
                                <div style="margin-top: 26px;margin-left: 10px;" id="occurencesSpan" class="d-none">
                                    occurences
                                </div>

                            </div>

                        </div>
                    </div>


                    @*//////////////////////////////////////////////////////////////////*@
                    @if(ViewBag.TransactionType == "Issue")
                    {
                        <div class="row">
                            <div class="mb-3 col-md-2 col-2">
                                <label class="form-label f-label">
                                    Location<span class="text-danger">*</span>
                                </label>
                                @Html.DropDownList("WarehouseIdMain", ViewBag.WarehouseIdMain as List<SelectListItem>, "Please Select", new { id = "WarehouseIdMain", @class = "form-select form-select-sm" })
                                <span class="text-danger" id="location-validation"></span>
                            </div>
                        </div>
                        
                    }
                    <div class="d-none" id="GRRDiv">
                        <div class="form-check form-switch">
                             <input class="form-check-input" type="checkbox" id="showGRRItem">
                        </div>
                        
                        <div id="GRR-table" class=d"-none"></div>
                    </div>
                    @if (ViewBag.TransactionType == "Invoice" || ViewBag.TransactionType == "Estimate" || ViewBag.TransactionType == "Sales_Order" || ViewBag.TransactionType == "Sales_Receipt" || ViewBag.TransactionType == "Delayed_Charge")
                    {
                        <div class="row" style="margin-top: 15px">
                            @if (ViewBag.TransactionType != "Delayed_Charge")
                            {
                                <div class="col-md-2 col-12">
                                    <div class="mb-3">
                                        <label class="form-label f-label">
                                            Billing Address
                                        </label>
                                        <textarea id="billing-address" type="text" class="form-control" autocomplete="off" rows="3" style="font-size: 14px;"></textarea>
                                    </div>
                                </div>
                            }

                            @if (ViewBag.TransactionType == "Invoice")
                            {
                                <div class="col-md-2 col-12">
                                    <div class="mb-3">
                                        <label class="form-label f-label">Terms<span class="text-danger">*</span>  <i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="Select a customer to make sure the right person pays you on time."></i> </label>
                                        <select class="form-select form-select-sm" id="terms" aria-label="Floating label select example">
                                            <option value="0">Select an option</option>
                                            <option id="addNewOption" value="add-new" data-icon="bi bi-file-plus">Add New</option>
                                        </select>
                                        <span class="text-danger" id="terms-validation"></span>
                                    </div>
                                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel1" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content mx-auto">
                                                <div>
                                                    <button onclick="modalClear()" type="button" class="btn-close float-lg-end me-2 mt-2" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div>
                                                    <h5 class="modal-title ms-5 fw-bold text-dark" id="exampleModalLabel">New Term</h5>
                                                </div>
                                                <div class="modal-body px-5">
                                                    <!-- Inside the modal-body -->
                                                    <form id="termForm">
                                                        <input type="hidden" id="Id" value="0" />

                                                        <div class="mb-3">
                                                            <label for="termName" class="form-label fw-bold"><span class="text-danger">*</span>Name</label>
                                                            <input type="text" class="form-control w-50" id="termName" name="TermName" style="border-radius:0px;">
                                                            <div id="termNameValidation" class="text-danger"></div>
                                                        </div>
                                                        <div class="mb-3">
                                                            <input checked id="dueInDaysRadio" type="radio" />
                                                            <label for="dueInDaysRadio" class="form-label fw-bold">Due in fixed number of days</label>
                                                        </div>
                                                        <div class="mb-3 d-flex ms-3">
                                                            <input type="text" class="form-control" id="dueInDays" name="DueInFixedDays" style="width: 45px; border-radius: 0px;">
                                                            <label for="dueInDays" class="form-label ms-1 my-auto">days</label>
                                                        </div>
                                                        <div class="mb-3">
                                                            <input id="dueByDaysRadio" type="radio" />
                                                            <label for="dueByDaysRadio" class="form-label fw-bold">Due by certain day of the month</label>
                                                        </div>
                                                        <div class="mb-3 d-flex ms-3">
                                                            <input type="text" class="form-control" id="dueByDay" name="DueByDayOfMonth" style="width: 45px; border-radius: 0px;" disabled>
                                                            <label for="dueByDay" class="form-label ms-1 my-auto">day of month</label>
                                                        </div>
                                                        <div class="mb-3 ms-3">
                                                            <label class="form-label fw-bold">Due the next month if issued within</label>
                                                        </div>
                                                        <div class="mb-3 d-flex ms-3">
                                                            <input type="text" class="form-control" id="dueNextMonthDays" name="DueNextMonthWithinDays" style="width: 45px; border-radius: 0px;" disabled>
                                                            <label for="dueNextMonthDays" class="form-label ms-1 my-auto">days of due date</label>
                                                        </div>
                                                    </form>

                                                </div>
                                                <!-- At the bottom of the modal content, before the closing </div> -->
                                                <hr class="w-75 mx-auto" />
                                                <div class="d-flex justify-content-around mb-4">
                                                    <button onclick="modalClear()" type="button" class="btn customize-btn fw-bold" data-bs-dismiss="modal">Cancel</button>
                                                    <button type="button" class="btn customize-btn-another fw-bold" id="saveTermButton">Save</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="my-3">
                                        <label class="form-label f-label">Ship Via</label>
                                        <input class="form-control custom-height" id="ship-via" autocomplete="off" />
                                    </div>
                                </div>
                            }

                            <div class="col-md-2 col-12">
                                <div class="mb-2">
                                    @if (ViewBag.TransactionType == "Invoice")
                                    {
                                        <label class="form-label f-label">Invoice Date<span class="text-danger">*</span></label>
                                    }
                                    @if (ViewBag.TransactionType == "Estimate")
                                    {
                                        <label class="form-label f-label">Estimate Date<span class="text-danger">*</span></label>
                                    }
                                    @if (ViewBag.TransactionType == "Sales_Order")
                                    {
                                        <label class="form-label f-label">Order Date<span class="text-danger">*</span></label>
                                    }
                                    @if (ViewBag.TransactionType == "Sales_Receipt")
                                    {
                                        <label class="form-label f-label">Sales receipt date<span class="text-danger">*</span></label>
                                    }
                                    @if (ViewBag.TransactionType == "Delayed_Charge")
                                    {
                                        <label class="form-label f-label">Delayed charge date<span class="text-danger">*</span></label>
                                    }
                                    <input class="form-control custom-height" id="start-date" />
                                    <span class="text-danger" id="start-date-validation"></span>
                                </div>
                                @if (ViewBag.TransactionType != "Delayed_Charge")
                                {
                                    <div class="my-2">
                                        <label class="form-label f-label">Shipping Date<span class="text-danger">*</span></label>
                                        <input class="form-control custom-height" id="ship-date" autocomplete="off" />
                                        <span class="text-danger" id="ship-date-validation"></span>
                                    </div>
                                }

                            </div>

                            <div class="col-md-2 col-12">
                                <div class="mb-2">
                                    @if (ViewBag.TransactionType == "Invoice" || ViewBag.TransactionType == "Estimate" || ViewBag.TransactionType == "Sales_Order")
                                    {
                                        @if (ViewBag.TransactionType == "Invoice")
                                        {
                                            <label class="form-label f-label">Due Date<span class="text-danger">*</span></label>

                                        }
                                        @if (ViewBag.TransactionType == "Estimate" || ViewBag.TransactionType == "Sales_Order")
                                        {
                                            <label class="form-label f-label">Expiration Date<span class="text-danger">*</span></label>
                                        }
                                        <input class="form-control custom-height" id="end-date" autocomplete="off" />
                                        <span class="text-danger" id="end-date-validation"></span>
                                    }
                                    else
                                    {
                                        @if (ViewBag.TransactionType == "Delayed_Charge")
                                        {
                                            <div class="mb-3">
                                                <label class="form-label f-label">
                                                    Location<span class="text-danger">*</span>
                                                </label>
                                                @Html.DropDownList("WarehouseIdMain", ViewBag.WarehouseIdMain as List<SelectListItem>, "Please Select", new { id = "WarehouseIdMain", @class = "form-select form-select-sm" })
                                                <span class="text-danger" id="location-validation"></span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="mb-3" style="height: 52px;"></div>
                                        }
                                    }

                                </div>
                                @if (ViewBag.TransactionType != "Delayed_Charge")
                                {
                                    <div class="my-2">
                                        <label class="form-label f-label">Tracking No</label>
                                        <input class="form-control custom-height" id="tracking-no" autocomplete="off" />
                                    </div>
                                }



                            </div>
                            @if (ViewBag.TransactionType == "Estimate" || ViewBag.TransactionType == "Sales_Order" || ViewBag.TransactionType == "Sales_Receipt")
                            {
                                <div class="col-md-2 col-12">
                                    <div class="mb-2" style="margin-top: 68px">
                                        <div class="my-3">
                                            <label class="form-label f-label">Ship Via</label>
                                            <input class="form-control custom-height" id="ship-via" autocomplete="off" />
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-md-2 col-12">
                                </div>
                            }
                            @if (ViewBag.TransactionType != "Invoice")
                            {
                                <div class="col-md-2 col-12">
                                </div>
                            }
                            @if (ViewBag.TransactionType == "Delayed_Charge")
                            {
                                <div class="col-md-2 col-12">
                                </div>
                            }
                            <div class="col-md-2 col-12">
                                <div class="mb-2">
                                    @if (ViewBag.TransactionType == "Invoice")
                                    {
                                        <label class="form-label f-label">Invoice No</label>
                                    }
                                    @if (ViewBag.TransactionType == "Estimate")
                                    {
                                        <label class="form-label f-label">Estimate No</label>
                                    }
                                    @if (ViewBag.TransactionType == "Sales_Order")
                                    {
                                        <label class="form-label f-label">Sales Order No</label>
                                    }
                                    @if (ViewBag.TransactionType == "Sales_Receipt")
                                    {
                                        <label class="form-label f-label">Sales Receipt No</label>
                                    }
                                    @if (ViewBag.TransactionType == "Delayed_Charge")
                                    {
                                        <label class="form-label f-label">Delayed Charge</label>
                                    }
                                    <input class="form-control custom-height" id="invoice-no" />
                                </div>
                                @if (ViewBag.TransactionType != "Delayed_Charge")
                                {
                                    <div class="my-3">
                                        <label class="form-label f-label">Shipping From</label>
                                        <input class="form-control custom-height" id="shipping-from" autocomplete="off" />
                                    </div>
                                }
                            </div>


                        </div>
                        @if (ViewBag.TransactionType != "Delayed_Charge")
                        {
                            <div class="row">
                                <div class="col-md-2 col-2">
                                    <div class="mb-3">
                                        <label class="form-label f-label">
                                            Shipping To
                                        </label>
                                        <textarea id="shipping-to" type="text" class="form-control" autocomplete="off" rows="3" style="font-size: 14px;"></textarea>
                                    </div>
                                </div>
                                <div class="col-lg-8 col-8"></div>
                                <div class="col-md-2 col-2">
                                    <div class="my-2">
                                        <label class="form-label f-label">
                                            Location<span class="text-danger">*</span>
                                        </label>
                                        @Html.DropDownList("WarehouseIdMain", ViewBag.WarehouseIdMain as List<SelectListItem>, "Please Select", new { id = "WarehouseIdMain", @class = "form-select form-select-sm" })
                                        <span class="text-danger" id="location-validation"></span>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (ViewBag.TransactionType == "Estimate" || ViewBag.TransactionType == "Sales_Order" || ViewBag.TransactionType == "Sales_Receipt" || ViewBag.TransactionType == "Delayed_Charge" || ViewBag.TransactionType == "Invoice")
                        {
                            

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="">
                                        <label class="d-flex justify-content-between align-items-center">
                                            <span>Tags</span>
                                            <span><button type="button" class="btn btn-link" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="">Manage tags</button></span>
                                        </label>
                                        <select id="tagDropdown" class="js-example-tags" multiple="multiple"></select>
                                        <div class="d-none" id="selectedTags"></div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    <input id="adv-trxn-id" type="text" value="0" hidden />
                    
                    <div class="row mt-2">
                        @if (ViewBag.TransactionType != "Issue")
                        {
                            <p>Transaction Method</p>
                        }
                        
                        <div class="col-md-6 col-6">
                            <div class="mb-3">
                                @if (ViewBag.TransactionType == "Sales_Receipt")
                                {
                                    <div id="transaction-method"></div>
                                    <span class="text-danger" id="SalesReceiptAmount-validation"></span>
                                    <div class="row my-2">
                                        <div class="col-md-2 col-12">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-success btn-sm" id="add-obj">Add</button>
                                                 <button type="button" class="btn btn-danger btn-sm" id="del-obj">Clear</button>
                                            </div>
                                        </div>
                                        <div class="col-md-7 col-7"></div>
                                        <div class="col-md-3 col-3">
                                            <input id="isRecognition" type="checkbox" />
                                            <label class="form-label f-label">Is Recognition<i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="If you are receiving for a fixed number of months in advance then checked the checkbox."></i></label>
                                        </div>

                                    </div>
                                }
                            </div>
                        </div>
                        
                    </div>
                    <div class="row">
                        <div class="col-md-12 col-12">
                            <div class="mb-3">
                                @if (ViewBag.TransactionType == "Sales_Receipt")
                                {
                                    <div class="row" id="adv-trxn-div">
                                        <div class="col-md-12 col-12" >
                                            <div id="adv_details" class="d-none d-flex justify-content-start" style=" border-bottom: 1px solid #e0e0d1; border-top: 1px solid #e0e0d1;">
                                                <div style="margin-bottom: 10px;">
                                                    <div style="margin-top: 26px;margin-left: 10px;">
                                                        <p>Every</p>
                                                    </div>
                                                </div>
                                                <div id="date-duration" class="d-flex">

                                                    <div style="margin-top: 21px; ">
                                                        <div class="mb-3 ms-2">
                                                            <input class="form-control" id="every_adv" autocomplete="off" style="width: 50px; height: 30px;" />
                                                        </div>
                                                    </div>
                                                    <div style="margin-top: 26px;">
                                                        <p class="ms-2">month's on day</p>
                                                    </div>
                                                    <div class="d-flex" style="margin-top: 21px; margin-bottom: 26px; ">
                                                        @Html.DropDownList("Integer", intergerList as List<SelectListItem>, new { id = "adv_Integer", @class = "form-select form-select-sm ms-2"})
                                                    </div>
                                                </div>
                                                <div class="d-flex">
                                                    <div style="width: 150px; margin-left: 10px;">
                                                        <label>Start date</label>
                                                        <input class="form-control custom-height" id="adv-start-date" autocomplete="off" />
                                                    </div>
                                                    <div style="margin-top: 26px;margin-left: 10px;">
                                                        after
                                                    </div>
                                                    <div style="margin-top: 21px; margin-left: 10px;">
                                                        <div class="mb-3">
                                                            <input class="form-control" id="adv_occurences" autocomplete="off" style="width: 50px; height: 30px;" value="1" />
                                                        </div>
                                                    </div>
                                                    <div style="margin-top: 26px;margin-left: 10px;">
                                                        occurences
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        
                                    </div>

                                }
                            </div>
                        </div>
                    </div>
                    @if (ViewBag.TransactionType == "Credit-note")
                    {
                        <div class="row mt-2">
                            <div class="col-md-2 col-12">
                                <div class="col-md-10">
                                    <div class="mb-3">
                                        <label class="form-label f-label">
                                            Billing Address
                                        </label>
                                        <textarea id="billing-address-credit" type="text" class="form-control" autocomplete="off" style="font-size: 14px;"></textarea>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-2 col-12">
                                <div class="mb-3">
                                    <label class="form-label f-label">Credit Note Date<span class="text-danger">*</span></label>

                                    <input class="form-control custom-height" id="start-date" autocomplete="off" />
                                    <span class="text-danger" id="creditNote-date-validation"></span>
                                </div>
                            </div>
                            <div class="col-md-2 col-2">
                                <div class="mb-3">
                                    <label class="form-label f-label">
                                        Location
                                    </label>
                                    @Html.DropDownList("WarehouseIdMain", ViewBag.WarehouseIdMain as List<SelectListItem>, "Please Select", new { id = "WarehouseIdMain", @class = "form-select form-select-sm" })
                                        <span class="text-danger" id="location-validation"></span>
                                </div>
                            </div>
                        </div>
                        @*<div class="row" style="margin-top: 30px">
                    <div class="col-md-6 col-12">
                    <div class="col-md-10">
                    <div class="mb-3">
                    <p>Tags</p>
                    <input id="tags" type="text" style="width: 600px" class="form-control" autocomplete="off" />
                    </div>
                    </div>
                    </div>
                    </div>*@
                        <div class="row">
                            <div class="col-md-6">
                                <div class="">
                                    <label class="d-flex justify-content-between align-items-center">
                                        <span>Tags</span>
                                        <span><button type="button" class="btn btn-link" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="">Manage tags</button></span>
                                    </label>
                                    <select id="tagDropdown" class="js-example-tags" multiple="multiple"></select>
                                    <div class="d-none" id="selectedTags"></div>
                                </div>
                            </div>
                        </div>

                    }

                </div>
            </div>

        </div>


    </section>
    <section>
        <div class="col-12 col-md-12">
            <div class="row account_offcanvas">

                <div class="offcanvas offcanvas-end overflow-scroll" style="width: 400px" tabindex="-1" id="offcanvasRightRate" aria-labelledby="offcanvasRightLabelRate">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="offcanvasRightLabelRate">To Link Invoice</h5>
                        <button onclick="clearModalData()" type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <div id="invoice-table"></div>
                    </div>
                </div>
            </div>
        </div>
        <div style="padding: 20px">
            <div class="row" style="margin-bottom: 10px;" id="AmountsAreDiv">
                <div class="col-lg-12 col-12">
                    <div class="d-flex justify-content-end">
                        <label class="form-label f-label" style="margin-top: 4px; margin-right: 3px;">
                            Amounts are
                        </label>
                        @Html.DropDownList("AmountsAre", ViewBag.AmountsAre as List<SelectListItem>, new { id = "AmountsAre", @class = "wide-dropdown form-select form-select-sm", onchange = "taxDropdownChange(this.value)" })
                    </div>
                </div>
            </div>

            <div id="example-table"></div>
            <div>
                <div class="row">
                    @if (ViewBag.TransactionType == "Invoice" || ViewBag.TransactionType == "Sales_Order" || ViewBag.TransactionType == "Estimate" || ViewBag.TransactionType == "Sales_Receipt" || ViewBag.TransactionType == "Delayed_Charge" || ViewBag.TransactionType == "Issue")
                    {
                        <div class="col-md-3 col-12">
                            <div class="btn-group">
                                <button type="button" class="btn btn-success btn-sm" id="add-row">Add Row</button>
                                <button type="button" class="btn btn-danger btn-sm" id="del-row">Clear Table</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-3 col-12">
                        </div>
                    }

                    <div class="col-md-6 col-12">
                        <div class="mb-3">
                        </div>
                    </div>
                    <div class="col-md-1 col-12" id="CalculationDiv2">
                        <div class="mb-3">
                            <p style="font-weight: bold; font-size: 16px; text-align: right;">Subtotal</p>
                        </div>
                    </div>
                    <div class="col-md-2 col-12" id="CalculationDiv3">
                        <div class="mb-3">
                            <p id="subtotal" style="font-size: 14px;">$ 0.00</p>
                        </div>
                    </div>
                </div>

            </div>
            <div class="row">

                <div class="col-6 col-md-6">
                    <div class="col-lg-7 col-12">
                        <div class="col-lg-12">
                            <div class="mb-3">
                                @if (ViewBag.TransactionType == "Invoice")
                                {
                                    <label class="form-label f-label">
                                        Message on Invoice
                                    </label>
                                    <input id="message-invoice" type="text" class="form-control wide-dropdown2" placeholder="This will show up in the Invoice" autocomplete="off" />
                                }
                                @if (ViewBag.TransactionType == "Credit-note")
                                {
                                    <label class="form-label f-label">
                                        Message on Credit Note
                                    </label>
                                    <input id="message-invoice" type="text" class="form-control wide-dropdown2" placeholder="This will show up in the Credit Note" autocomplete="off" />
                                }
                                @if (ViewBag.TransactionType == "Estimate")
                                {
                                    <label class="form-label f-label">
                                        Message on Estimate
                                    </label>
                                    <input id="message-invoice" type="text" class="form-control wide-dropdown2" placeholder="This will show up in the Estimate" autocomplete="off" />
                                }
                                @if (ViewBag.TransactionType == "Sales_Order")
                                {
                                    <label class="form-label f-label">
                                        Message on Sales Order
                                    </label>
                                    <input id="message-invoice" type="text" class="form-control wide-dropdown2" placeholder="This will show up in the Sales Order" autocomplete="off" />
                                }
                                @if (ViewBag.TransactionType == "Sales_Receipt")
                                {
                                    <label class="form-label f-label">
                                        Message on Sales Receipt
                                    </label>
                                    <input id="message-invoice" type="text" class="form-control wide-dropdown2" placeholder="This will show up in the Sales Receipt" autocomplete="off" />
                                }

                            </div>
                        </div>
                    </div>
                    <div class="col-lg-7 col-12" style="margin-top:20px;">
                        <div class="col-lg-12">
                            <div class="mb-3">
                                <label class="form-label f-label">
                                    Message on Statement
                                </label>
                                <input id="message-statement" type="text" class="form-control wide-dropdown2" placeholder="Message on Statement for Customer" autocomplete="off" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-7 col-12" style="margin-top:20px;">
                        <div class="col-lg-12">
                            <div class="mb-3">
                                <label class="form-label f-label">
                                    <i class="fas fa-link"></i> <span>Attachments Maximum size: 20MB</span>
                                </label>
                                <div id="file-drop-area">
                                    <p>Drag and drop files here or click to select files.</p>
                                    <ul id="selected-files-list"></ul> <!-- List to display selected file names -->
                                </div>
                                @* <input id="message-statement" type="text" class="wide-dropdown2" placeholder="If you send statements to customers, this will show up as the description for this invoice" /> *@
                                <input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf" multiple>
                            </div>
                        </div>
                        
                    </div>

                    <div class="col-lg-12">
                        <div class="mb-3">
                            <div class="footerButton">
                                <button class="btn btn-outline-dark fw-bolder btn-sm mt-4 d-none" id="view-image-or-pdf">Full view <i class="bi bi-eye-fill"></i></button>
                                <button class="btn btn-outline-dark fw-bolder btn-sm mt-4 bg-danger text-white d-none" id="remove-image-or-pdf">X</button>
                            </div>
                            <div class="col-lg-12">
                                <iframe id="pdf-iframe" class="d-none" style="width: 66%; height: auto;"></iframe>
                            </div>
                            <div class="col-lg-12 row" id="file-container">
                                <!-- Placeholder for dynamically added iframes and buttons -->
                            </div>


                        </div>
                    </div>
                </div>

                

                <div class="col-6 col-md-6" id="CalculationDiv">
                    <div class="row">
                        <div class="col-lg-8 col-12">
                            <div class="mb-3">
                                <p style="text-align: right; "><span style="font-weight: bold;">Taxable Subtotal</span> </p>

                            </div>
                        </div>
                        <div class="col-lg-4 col-12">
                            <div class="mb-3">
                                <p style="margin-right: 23px;"><span style="font-weight: bold;"></span> <span id="taxable-subtotal">$0.00</span></p>

                            </div>
                        </div>
                    </div>

                    <div class="row" style="margin-bottom: 10px;">
                        <div class="col-md-6 col-6"></div>
                        <div class="col-md-6 col-6">
                            <div class="mb-3">
                                @* <label class="form-label "></label> *@
                                <h6>Tax Amount</h6>
                                <div id="seperate-tax">
                                </div>

                            </div>
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-lg-8 col-8">
                            <p style="text-align: right; font-weight: bold;">Total Tax</p>
                            <p style="text-align: right;">Shipping</p>
                            <p style="text-align: right;" class="mt-1">Tax on shipping</p>
                            <p style="font-weight: bold; font-size: 16px; text-align: right;">Total(<span class="rate">BDT</span>)</p>
                            <p style="font-weight: bold; font-size: 16px; text-align: right; display: none !important;" class="totalspan">Total<span>(BDT)</span></p>
                        </div>
                        <div class="col-lg-4 col-4">
                            <div style="margin-left:25px; margin-right: 26px;" class="row">
                                <div class="col-lg-12 col-12">
                                    <p id="total-tax" style="font-weight: bold; font-size: 16px; float: right;">0.00</p>
                                </div>
                                <div class="col-lg-12 col-12" style="margin-bottom: 5px; float: right;">
                                    <input id="shipping-amount" class="form-control" type="text" value="0" style="text-align: right;" />
                                </div>
                                <div class="col-lg-12 col-12" style="float: right;">
                                    <input id="shipping-tax" class="form-control" type="text" value="0" style="text-align: right;" />
                                </div>
                                <div class="col-lg-12 col-12" style="margin-top: 0.7rem!important">
                                    <p class="mt-3" id="total" style="float: right;">0.00</p>
                                </div>
                                <div class="col-lg-12 col-12">
                                    <p class="totalspan" id="totalInBDT" style="display: none !important; float: right;">0.00</p>
                                </div>

                            </div>

                        </div>
                    </div>

                </div>

            </div>

        </div>


    </section>

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="offcanvasRightLabel" style="margin-top: 20px;">Manage your tags</h5>
            <button type="button" id="backToTaglist" class="btn btn-link d-none" style="border-radius: 10px;">Back</button>
            <button onclick="clearModalData()" type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body mx-2">
            <div id="tagList">
                <div class="row">
                    <div class="col-md-6 d-flex align-items-center justify-content-center">
                        <button type="button" id="createTagBtn" class="btn btn-outline-secondary custom-btn">Create tag</button>
                    </div>
                    <div class="col-md-6 d-flex align-items-center justify-content-center">
                        <button type="button" id="crateGroupBtn" class="btn btn-outline-secondary custom-btn">Create group</button>
                    </div>
                </div>
                <div id="tagListTable"></div>
            </div>
            <div id="createTag" class="d-none">
                <input type="hidden" id="TagId" value="0" />
                <h5 style="margin-top: 10px;">Create new tag</h5>
                <div class="mt-3">
                    <label class="account-head-name">Tag name</label>
                    <input class="form-control" id="new-tag-name" />
                </div>

                <div class="mt-3">
                    <label class="account-head-name">Group</label>
                    @* @Html.DropDownList("GroupList", ViewBag.GroupList as SelectList, "Select group", new { @id = "GroupList", @class = "form-control" }) *@
                    <select id="GroupList" class="form-control"></select>
                </div>
                <div class="my-2 d-flex justify-content-end">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas" id="cancelTag">Cancel</button>
                    <button id="tagSaveBtn" type="button" class="btn btn-success" style="margin-left: 10px;">Save</button>
                </div>

            </div>
            <div id="createGroup" class="d-none">
                <input type="hidden" id="GroupId" value="0" />
                <h5 style="margin-top: 10px;">Create new group</h5>
                <div class="mt-3">
                    <label class="account-head-name">Group name</label>
                    <input class="form-control" id="new-group-name" />
                </div>

                <div class="my-2 d-flex justify-content-end">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas" id="cancelTag">Cancel</button>
                    <button id="groupSaveBtn" type="button" class="btn btn-success" style="margin-left: 10px;">Save</button>
                </div>

            </div>
        </div>
    </div>
    <div class="bottom-bar">
        <div class="container-fluid">
            <div class="row px-4">
                <div class="col-md-3">
                    <button type="button" class="btn btn-outline-secondary text-white btn-sm rounded-pill " id="BtnBack" onclick="gotoInvoiceList()">Cancel</button>
                </div>
                <div class="col-md-6 d-flex justify-content-center">
                    @if (ViewBag.ActionType == "Edit" && ViewBag.DocTypeValue != "Opening Stock")
                    {
                        <ul class="list-group list-group-horizontal">
                            <li class="list-group-item" id="printButton">Print</li>
                        </ul>
                    }

                    else if (ViewBag.ActionType == "Create" )
                    {
                        <ul class="list-group list-group-horizontal">
                            <li class="list-group-item" id="printButton" disabled>Print</li>
                            <li class="list-group-item" id="makeRecurringDiv"> <a href="#" class="text-white" onclick="makeRecurring();"><span>Make recurring</span></a></li>

                        </ul>
                    }


                </div>

                @* For Reference*@
                <div class="col-md-3 d-flex justify-content-end">
                    @if (ViewBag.TransactionType == "Invoice")
                    {
                        <button class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" id="BtnSave">
                            @if (ViewBag.ActionType == "Edit")
                            {
                                <span>Update</span>
                            }
                            else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                            {
                                <span>Save </span>
                            }

                        </button>
                    }
                    else if (ViewBag.TransactionType == "Credit-note")
                    {
                        <button class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" id="BtnSave-Credit">
                            @if (ViewBag.ActionType == "Edit")
                            {
                                <span>Update</span>
                            }
                            else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                            {
                                <span>Save</span>
                            }
                        </button>
                    }
                    else if (ViewBag.TransactionType == "Estimate")
                    {
                        <button class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" id="BtnSave_Estimate">
                            @if (ViewBag.ActionType == "Edit")
                            {
                                <span>Update</span>
                            }
                            else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                            {
                                <span>Save</span>

                            }
                        </button>
                    }
                    else if (ViewBag.TransactionType == "Sales_Order")
                    {
                        <button class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" id="BtnSaveSales_Order">
                            @if (ViewBag.ActionType == "Edit")
                            {
                                <span>Update</span>
                            }
                            else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                            {
                                <span>Save</span>
                            }
                        </button>
                    }
                    else if (ViewBag.TransactionType == "Sales_Receipt")
                    {
                        <button class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" id="BtnSaveSales_Receipt">
                            @if (ViewBag.ActionType == "Edit")
                            {
                                <span>Update</span>
                            }
                            else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                            {
                                <span>Save</span>
                            }
                        </button>
                    }
                    else if (ViewBag.TransactionType == "Delayed_Charge")
                    {
                        <button class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" id="BtnSaveDelayed_Charge">
                            @if (ViewBag.ActionType == "Edit")
                            {
                                <span>Update</span>
                            }
                            else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                            {
                                <span>Save</span>
                            }
                        </button>
                    }
                    else if (ViewBag.TransactionType == "Issue")
                    {
                        <button class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" id="BtnSaveIssue">
                            @if (ViewBag.ActionType == "Edit")
                            {
                                <span>Update</span>
                            }
                            else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                            {
                                <span>Save</span>
                            }
                        </button>
                    }

                    <div class="btn-group">
                        @if (ViewBag.TransactionType == "Invoice")
                        {
                            <button class="btn btn-success btn-sm" id="BtnSaveClose">
                                @if (ViewBag.ActionType == "Edit")
                                {
                                    <span>Update and close</span>
                                }
                                else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                                {
                                    <span>Save and close</span>
                                }

                            </button>
                        }
                        else if (ViewBag.TransactionType == "Credit-note")
                        {
                            <button class="btn btn-success btn-sm " id="BtnSave-CreditClose">
                                @if (ViewBag.ActionType == "Edit")
                                {
                                    <span>Update and close</span>
                                }
                                else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                                {
                                    <span>Save and close</span>
                                }
                            </button>
                        }
                        else if (ViewBag.TransactionType == "Estimate")
                        {
                            <button class="btn btn-success btn-sm" id="BtnSave_EstimateClose">
                                @if (ViewBag.ActionType == "Edit")
                                {
                                    <span>Update and close</span>
                                }
                                else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                                {
                                    <span>Save and close</span>

                                }
                            </button>
                        }
                        else if (ViewBag.TransactionType == "Sales_Order")
                        {
                            <button class="btn btn-success btn-sm" id="BtnSaveSales_OrderClose">
                                @if (ViewBag.ActionType == "Edit")
                                {
                                    <span>Update and close</span>
                                }
                                else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                                {
                                    <span>Save and close</span>
                                }
                            </button>
                        }
                        else if (ViewBag.TransactionType == "Sales_Receipt")
                        {
                            <button class="btn btn-success btn-sm" id="BtnSaveSales_ReceiptClose">
                                @if (ViewBag.ActionType == "Edit")
                                {
                                    <span>Update and close</span>
                                }
                                else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                                {
                                    <span>Save and close</span>
                                }
                            </button>
                        }
                        else if (ViewBag.TransactionType == "Delayed_Charge")
                        {
                            <button class="btn btn-success btn-sm" id="BtnSaveDelayed_ChargeClose">
                                @if (ViewBag.ActionType == "Edit")
                                {
                                    <span>Update and close</span>
                                }
                                else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                                {
                                    <span>Save and close</span>
                                }
                            </button>
                        }
                        else if (ViewBag.TransactionType == "Issue")
                        {
                            <button class="btn btn-success btn-sm" id="BtnSaveIssue_Close">
                                @if (ViewBag.ActionType == "Edit")
                                {
                                    <span>Update and close</span>
                                }
                                else if (ViewBag.ActionType == "Create" || ViewBag.ActionType == "Copy")
                                {
                                    <span>Save and close</span>
                                }
                            </button>
                        }

                        <button type="button" class="btn btn-success btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="visually-hidden">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu" id="ul-id-for-expenses">
                            <li><a class="dropdown-item" href="/Accounts/ImportTransaction">Time activity</a></li>
                        </ul>
                    </div>


                </div>
            </div>
        </div>
        <input type="button" id="unknown" class="btn  btn-md" value="" />
        <div class="dropdown" id="unknown1" style="display: inline-block;">
        </div>
    </div>
</div>



<!-- Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this file?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsVoucherReport.js" asp-append-version="true"></script>
    <script>
        var columns2 = [
            { title: "Id", field: "SalesId", visible: false },
            { title: "Transactions", field: "Description", formatter: "html" }
        ];

        var table2 = new Tabulator("#invoice-table", {
            layout: "fitColumns",
            addRowPos: "bottom",
            columns: columns2
        });



        $(document).ready(function () {

            $("#top-row").removeClass("d-none");
            $("#makeRecurringDiv").removeClass("d-none");
            $("#First-row-Recurring").addClass("d-none");
            $("#IntervalDiv").addClass("d-none");

            $("#terms").select2({
                theme: 'bootstrap-5'
            });
            $("#WarehouseIdMain").select2({
                theme: 'bootstrap-5'
            });

            $("#FiscalMonthId").select2({
                theme: 'bootstrap-5'
            });
            $("#CustomerIssue").select2({
                theme: 'bootstrap-5'
            });

            
            function deleteFile(filename)
            {
                $.ajax({
                    url: '@Url.Action("DeleteFileName", "Sales")',
                    type: 'Post',
                    data: { fileName: filename },
                    success: function (result) {

                    },
                    error: function (error) {
                        console.log('Error fetching group list:', error);
                    }
                });
            }

            // Function to determine file type based on extension
                            function getFileType(fileName) {
                                var extension = fileName.split('.').pop().toLowerCase();
                                if (extension === 'pdf') {
                                    return 'pdf';
                                } else if (extension === 'xls' || extension === 'xlsx') {
                                    return 'excel';
                                } else if (extension === 'jpg' || extension === 'jpeg' || extension === 'png' || extension === 'gif') {
                                    return 'image';
                                } else {
                                    return 'unknown';
                                }
                            }

            function GetRecurringDetails(TrxnId) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetRecurringDetails", "Sales")',
                    data: { id: TrxnId },
                    dataType: "json",
                    success: function (response) {
                        console.log(response.data);
                        var model = response.data;
                        $("#recurr-id").val(model.Id);
                        $("#temp-name").val(model.TemplateName);
                        $("#RecurringType").val(model.TemplateType);
                        $("#create-days").val(model.CreateDays);
                        $("#Interval").val(model.Interval);
                        $("#Week").val(model.Week_);
                        $("#Month").val(model.Month_);
                        $("#Integer").val(model.Integer_);
                        $("#Count").val(model.Count_);
                        $("#every").val(model.Every_);
                        $("#End").val(model.End_);
                        $("#occurences").val(model.occurences);
                        $("#occurences").val(model.occurences);
                        $("#recurring-start-date").val(formatDateToCustomString(new Date(model.RecurringStartDate)));
                        $("#recurring-end-date").val(formatDateToCustomString(new Date(model.RecurringEndDate)));

                        if (model.TemplateType === "Scheduled") {
                            document.getElementById("before-create-days").innerText = "Create";
                            $("#create-days").removeClass("d-none");
                            $("#after-create-days").removeClass("d-none");
                            $("#IntervalDiv").removeClass("d-none");
                        }
                        if (model.TemplateType === "Reminder") {
                            document.getElementById("before-create-days").innerText = "Remind";
                            $("#create-days").removeClass("d-none");
                            $("#after-create-days").removeClass("d-none");
                            $("#IntervalDiv").removeClass("d-none");
                        }
                        if (model.TemplateType === "Unscheduled") {
                            document.getElementById("before-create-days").innerText = "Unscheduled transactions don’t have timetables.";

                            $("#create-days").addClass("d-none");
                            $("#after-create-days").addClass("d-none");
                            $("#IntervalDiv").addClass("d-none");
                        }
                        if (model.Interval === 'Daily') {
                            document.getElementById("before-every").innerText = "every";
                            document.getElementById("after-interval").innerText = "day(s)";
                            $("#every").removeClass("d-none");
                            $("#Week").addClass("d-none");
                            $("#Count").addClass("d-none");
                            $("#Integer").addClass("d-none");
                            $("#Month").addClass("d-none");
                        }
                        if (model.Interval === 'Weekly') {
                            document.getElementById("before-every").innerText = "every";
                            document.getElementById("after-interval").innerText = "week(s) on";
                            $("#every").removeClass("d-none");
                            $("#Week").removeClass("d-none");
                            $("#Count").addClass("d-none");
                            $("#Integer").addClass("d-none");
                            $("#Month").addClass("d-none");

                        }
                        if (model.Interval === 'Monthly') {
                            document.getElementById("before-every").innerText = "of every";
                            document.getElementById("after-interval").innerText = "month(s) on";
                            $("#every").removeClass("d-none");
                            $("#Week").addClass("d-none");
                            $("#Count").removeClass("d-none");
                            $("#Integer").removeClass("d-none");
                            $("#Month").addClass("d-none");
                        }
                        if (model.Interval === 'Yearly') {
                            document.getElementById("before-every").innerText = "every";
                            document.getElementById("after-interval").innerText = "";
                            $("#every").addClass("d-none");
                            $("#Week").addClass("d-none");
                            $("#Count").addClass("d-none");
                            $("#Integer").removeClass("d-none");
                            $("#Month").removeClass("d-none");
                        }
                        if (model.End_ === 'None') {
                            $("#recurringEndDiv").addClass("d-none");
                            $("#occurencesDiv").addClass("d-none");
                            $("#occurencesSpan").addClass("d-none");
                        }
                        if (model.End_ === 'By') {
                            $("#recurringEndDiv").removeClass("d-none");
                            $("#occurencesDiv").addClass("d-none");
                            $("#occurencesSpan").addClass("d-none");
                        }
                        if (model.End_ === 'After') {
                            $("#recurringEndDiv").addClass("d-none");
                            $("#occurencesDiv").removeClass("d-none");
                            $("#occurencesSpan").removeClass("d-none");
                        }
                        // if (model.Count_ === 'day') {
                        //     $("#Week").addClass("d-none");
                        //     $("#Count").removeClass("d-none");
                        //     $("#Integer").removeClass("d-none");
                        //     $("#Month").addClass("d-none");
                        // }
                        // else {
                        //     $("#Week").removeClass("d-none");
                        //     $("#Count").removeClass("d-none");
                        //     $("#Integer").addClass("d-none");
                        //     $("#Month").addClass("d-none");
                        // }
                        $("#top-row").addClass("d-none");
                        $("#makeRecurringDiv").addClass("d-none");
                        $("#First-row-Recurring").removeClass("d-none");
                        $("#IntervalDiv").removeClass("d-none");
                    },
                    error: function (error) {
                        console.error("Error fetching data: " + error);
                    }
                });
            }

            if ("1" === "1") {
                $('.js-example-tags').select2({
                    theme: 'bootstrap-5',
                    tags: true,
                    tokenSeparators: [',', ' ']
                });

                $('#tagDropdown').on('change', function () {
                    var selectedTags = $(this).val();

                    $('#selectedTags').html('');
                    if (selectedTags) {
                        selectedTags.forEach(function (tag) {
                            $('#selectedTags').append('<span class="badge badge-primary">' + tag + '</span> ');
                        });

                    }
                });
                function GetTagsList() {
                    $.ajax({
                        url: '@Url.Action("GetTagsList", "Accounts")',
                        type: 'GET',
                        success: function (result) {

                            $('#tagDropdown').empty();

                            var groupOptions = result.data.map(function (item) {
                                return '<option value="' + item.Id + '">' + item.TagName + '</option>';
                            });

                            $('#tagDropdown').append(groupOptions.join(''));

                        },
                        error: function (error) {
                            console.log('Error fetching group list:', error);
                        }
                    });
                }

                GetTagsList();
                $('#tagDropdown').on('change', function () {
                    var selectedTags = $(this).val();

                    console.log('Selected Tags:', selectedTags);

                });

                function EditTagsOrGroup(id) {
                    $.ajax({
                        url: '@Url.Action("GetTagsOrGroup", "Accounts")',
                        data: { Id: id },
                        success: function (response) {
                            if (response.success == "1") {
                                console.log(response.data);

                                var value = response.data;
                                if (value.TagsType === 'L') {
                                    $('#TagId').val(value.Id);
                                    $('#new-tag-name').val(value.TagName);
                                    $('#GroupList').val(value.ParentId);
                                    $('#GroupList').trigger('change');

                                    $('#createTag').removeClass('d-none');
                                    $('#tagList').addClass('d-none');
                                    $('#backToTaglist').removeClass('d-none');
                                    $('#offcanvasRightLabel').addClass('d-none');
                                    $('#createGroup').addClass('d-none');
                                }
                                else {
                                    $('#GroupId').val(value.Id);
                                    $('#new-group-name').val(value.TagName);

                                    $('#createTag').addClass('d-none');
                                    $('#tagList').addClass('d-none');
                                    $('#backToTaglist').removeClass('d-none');
                                    $('#offcanvasRightLabel').addClass('d-none');
                                    $('#createGroup').removeClass('d-none');
                                }
                            }

                        }
                    });
                }

                function GroupList() {
                    $.ajax({
                        url: '@Url.Action("GetGroupList", "Accounts")',
                        type: 'GET',
                        success: function (result) {

                            $('#GroupList').empty();

                            var groupOptions = result.data.map(function (item) {
                                return '<option value="' + item.Id + '">' + item.TagName + '</option>';
                            });

                            // Append the options to the dropdown
                            $('#GroupList').append(groupOptions.join(''));

                        },
                        error: function (error) {
                            console.log('Error fetching group list:', error);
                        }
                    });
                }

                function initTagTabulator() {
                    GroupList();
                    function buildTree(dataArray) {
                        const tree = [];
                        const parentMap = {};

                        // Check if dataArray is an array before iterating
                        if (Array.isArray(dataArray)) {
                            dataArray.forEach(item => {
                                item.TagName = item.TagName.trim();

                                if (item.ParentId === null) {
                                    tree.push(item);
                                } else {
                                    const parent = parentMap[item.ParentId];
                                    if (parent) {
                                        if (!parent.children) {
                                            parent.children = [];
                                        }
                                        parent.children.push(item);
                                    }
                                }

                                parentMap[item.Id] = item;
                            });
                        }

                        return tree;
                    }


                    // Function to fetch data from the server
                    function fetchDataFromServer() {
                        var MyAppUrlSettings = {
                            MyUsefulUrl: '@Url.Action("GetTags", "Accounts")'
                        };
                        return $.ajax({
                            url: MyAppUrlSettings.MyUsefulUrl,
                            dataType: "json",
                        });
                    }

                    // Fetch data and build the tree
                    fetchDataFromServer().done(function (response) {
                        var dataTable = buildTree(response.data);

                        // Create the Tabulator table
                        var table = new Tabulator("#tagListTable", {
                            data: dataTable,
                            dataTree: true,
                            dataTreeStartExpanded: true,
                            dataTreeChildField: "children",
                            layout: "fitColumns",
                            columns: [
                                { title: "Tags", field: "TagName", headerSort: false },
                                { title: "ID", field: "Id", visible: false },
                                {
                                    title: "",
                                    formatter: function (cell, formatterParams, onRendered) {
                                        return '<button class="btn btn-link text-right" style="width: 100%; text-align: right;">Edit</button>';
                                    },
                                    cellClick: function (e, cell) {
                                        var id = cell.getRow().getData().Id;
                                        EditTagsOrGroup(id);
                                    },
                                    headerSort: false,
                                },
                            ],
                        });
                    });
                }


                initTagTabulator();
                $('#backToTaglist').on('click', function () {
                    $('#createTag').addClass('d-none');
                    $('#tagList').removeClass('d-none');
                    $('#backToTaglist').addClass('d-none');
                    $('#createGroup').addClass('d-none');
                    $('#offcanvasRightLabel').removeClass('d-none');
                    initTagTabulator();
                });

                $('#tagSaveBtn').on('click', function () {
                    var tagName = $('#new-tag-name').val();
                    var group = $('#GroupList').val();
                    var id = $('#TagId').val();

                    var TagsModel =
                    {
                        Id: id,
                        TagName: tagName,
                        TagShortName: tagName,
                        ParentId: group,
                        TagsType: 'L'
                    }
                    console.log(TagsModel);
                    $.ajax({
                        url: '@Url.Action("TagsCreation", "Accounts")',
                        type: 'POST',
                        async: true,
                        dataType: 'json',
                        data: { model: TagsModel },
                        success: function (response) {
                            if (response.success == "1") {
                                $('#new-tag-name').val('');
                                $('#GroupList').val('');
                                $('#TagId').val('0');
                                $('#createTag').addClass('d-none');
                                $('#tagList').removeClass('d-none');
                                $('#backToTaglist').addClass('d-none');
                                $('#createGroup').addClass('d-none');
                                $('#offcanvasRightLabel').removeClass('d-none');
                                initTagTabulator();
                                GetTagsList();
                                toastr.success(response.message, "", {
                                    "toastClass": "toast-green",
                                });
                            }
                        },
                        error: function (error) {
                            console.error(error);
                        }
                    });
                });

                $('#groupSaveBtn').on('click', function () {
                    var tagName = $('#new-group-name').val();
                    var id = $('#GroupId').val();

                    var TagsModel =
                    {
                        Id: id,
                        TagName: tagName,
                        TagShortName: tagName,
                        TagsType: 'G'
                    }
                    console.log(TagsModel);
                    $.ajax({
                        url: '@Url.Action("TagsCreation", "Accounts")',
                        type: 'POST',
                        async: true,
                        dataType: 'json',
                        data: { model: TagsModel },
                        success: function (response) {
                            if (response.success == "1") {
                                $('#new-group-name').val('');
                                $('#GroupId').val('0');
                                $('#createTag').addClass('d-none');
                                $('#tagList').removeClass('d-none');
                                $('#backToTaglist').addClass('d-none');
                                $('#createGroup').addClass('d-none');
                                $('#offcanvasRightLabel').removeClass('d-none');
                                initTagTabulator();
                                GetTagsList();
                                toastr.success(response.message, "", {
                                    "toastClass": "toast-green",
                                });
                            }
                        },
                        error: function (error) {
                            console.error(error);
                        }
                    });
                });



                $('#createTagBtn').on('click', function () {
                    $('#createTag').removeClass('d-none');
                    $('#tagList').addClass('d-none');
                    $('#backToTaglist').removeClass('d-none');
                    $('#offcanvasRightLabel').addClass('d-none');
                    $('#createGroup').addClass('d-none');
                });

                $('#crateGroupBtn').on('click', function () {
                    $('#createTag').addClass('d-none');
                    $('#createGroup').removeClass('d-none');
                    $('#tagList').addClass('d-none');
                    $('#backToTaglist').removeClass('d-none');
                    $('#offcanvasRightLabel').addClass('d-none');
                });

            }


            if ('@transactionType' === "Issue") {
                $("#CalculationDiv").addClass('d-none');
                $("#CalculationDiv2").addClass('d-none');
                $("#CalculationDiv3").addClass('d-none');
                $("#AmountsAreDiv").addClass('d-none');
                $("#EmailDiv").addClass('d-none');
                $("#GRRDiv").removeClass('d-none');
            }
            else
            {
                $("#CalculationDiv").removeClass('d-none');
                $("#CalculationDiv2").removeClass('d-none');
                $("#CalculationDiv3").removeClass('d-none');
                $("#AmountsAreDiv").removeClass('d-none');
                $("#EmailDiv").removeClass('d-none');
                $("#GRRDiv").addClass('d-none');
            }

            if ('@transactionType' === "Invoice") {
                document.getElementById("showoffcanvas").style.display = "block";

                $('#Customer').select2({
                    theme: 'bootstrap-5'
                });

                $("#start-date").on("change", function () {
                    var startDateValue = $(this).val();
                    var id = $("#terms").val();

                    $.ajax({
                        url: '@Url.Action("GetDueDate", "Sales")',
                        method: "GET",
                        data: {
                            termsId: id
                        },
                        success: function (response) {
                            if (response.data !== null && response.success != "0") {
                                const billDate = new Date(startDateValue);

                                const dueDate = new Date(billDate.getTime() + (response.data * 24 * 60 * 60 * 1000));

                                const day = dueDate.getDate().toString().padStart(2, '0');
                                const month = dueDate.toLocaleString('default', { month: 'short' });
                                const year = dueDate.getFullYear();

                                const formattedDueDate = `${day}-${month}-${year}`;
                                $('#end-date').val(formattedDueDate);
                            }
                        },
                        error: function (error) {
                            // Handle the error
                            console.error(error);
                        }
                    });

                });

                $("#end-date").on("change", function () {
                    var endDateValue = $(this).val();

                    var startDateValue = $("#start-date").val();

                    var id = $("#terms").val();

                    if (new Date(endDateValue) < new Date(startDateValue)) {
                        $.ajax({
                            url: '@Url.Action("GetDueDate", "Sales")',
                            method: "GET",
                            data: {
                                termsId: id
                            },
                            success: function (response) {
                                if (response.data !== null) {
                                    const billDate = new Date(startDateValue);
                                    const dueDate = new Date(billDate.getTime() + (response.data * 24 * 60 * 60 * 1000));

                                    const day = dueDate.getDate().toString().padStart(2, '0');
                                    const month = dueDate.toLocaleString('default', { month: 'short' });
                                    const year = dueDate.getFullYear();

                                    const formattedDueDate = `${day}-${month}-${year}`;
                                    $('#end-date').val(formattedDueDate);
                                }
                            },
                            error: function (error) {
                                // Handle the error
                                console.error(error);
                            }
                        });
                    }

                });

                if ('@actionType' === "Create") {
                    $("#invoice-no").prop("disabled", true)

                    var customerDropdown = $("#Customer");

                    customerDropdown.on("change", function () {
                        // Get the selected value
                        var selectedValue = $(this).val();
                        table.clearData();
                        LoadCustomerDetails(selectedValue, 'billing-address');
                        LoadCustomerWiseData(selectedValue);
                    });
                }
                if ('@actionType' === "Edit") {
                    $("#invoice-no").prop("disabled", false)
                    var id = @ViewBag.Id;
                    console.log(id);

                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetInvoiceDetails", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#Customer").val(model.CustomerId).trigger('change');
                           
                            $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                            $("#customer-email").val(model.EmailId);
                            $("#billing-address").val(model.PrimaryAddress);
                            $("#ship-via").val(model.ShippingVia);
                            $("#tracking-no").val(model.TrackingNo);
                            $("#invoice-no").val(model.SaleCode);
                            $("#shipping-from").val(model.SecoundaryAddress);
                            $("#shipping-to").val(model.ShippingTo);
                            $("#message-invoice").val(model.MessageInvoice);
                            $("#message-statement").val(model.MessageStatement);
                            initializeFiscalMonthForEdit(model.SalesDate, model.FiscalMonthId);
                            $("#MultiiCurrencyId").val(model.CurrencyId);
                            $("#CurrencyRate").val(model.CurrencyRate);

                            $("#shipping-amount").val(model.Shipping);
                            $("#shipping-tax").val(model.ShippingTax);
                            $("#AmountsAre").val(model.AmountsAre);
                            var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                return salesTag.TagsId;
                            });
                            $('#tagDropdown').val(tagValues).trigger('change');
                            $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                            $("#end-date").val(formatDateToCustomString(new Date(model.DueDate)));
                            $("#ship-date").val(formatDateToCustomString(new Date(model.ShippingDate)));
                            $("#terms").val(model.salesRecievedtTermsId).trigger('change');
                            initializeTabulator(model.Items);
                            initializeTaxData(model.SalesProductTax);
                            calculateSubtotal();
                            calculateTaxableSubtotal();
                            updateTotalForSalesOrder(model.Total);
                            $("#total").val(model.Total);
                            // if (model.FileName !== null && model.FileName !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            // //console.log("res.FilePath::", "../" + res.FilePath);
                            // $('#pdf-iframe').attr('src', "../" + model.FileName);
                            // //$('#pdf-iframe').attr('src', res.FilePath);
                            // $('#pdf-iframe').on('load', function () {
                            //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            // });

                            if (model.IsRecurring == true) {
                                GetRecurringDetails(model.Id)
                            }
                            var fileNames = model.FileName ? model.FileName.split(';') : [];

                            var fileContainer = $('#file-container');

                            // Clear any existing elements
                            fileContainer.empty();

                            fileNames.forEach(function (fileName, index) {
                                if (fileName) {
                                    // Determine file type based on extension
                                    var fileType = getFileType(fileName);
                                    var fileName2 = fileName.split('/').pop();

                                    var actualFileName = fileName2.match(/[^_]+$/)[0];

                                    // Wrapper div
                                    var fileWrapper = $('<div>', {
                                        class: 'file-wrapper col-md-3',
                                        css: {
                                            position: 'relative',
                                            marginBottom: '20px' // space between files
                                        }
                                    });

                                    // Create iframe for PDF and Excel files
                                    var iframe;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        iframe = $('<iframe>', {
                                            id: 'pdf-iframe-' + index,
                                            class: 'file-iframe',
                                            css: {
                                                width: '100%',
                                                height: '0',
                                                border: '1px solid #ccc',
                                                overflow: 'hidden'
                                            },
                                            
                                        });

                                        // Display filename as text overlay
                                        var filenameOverlay = $('<div>', {
                                            class: 'filename-overlay',
                                            css: {
                                                position: 'absolute',
                                                top: '0',
                                                left: '0',
                                                width: '100%',
                                                background: 'rgba(0, 0, 0, 0.5)',
                                                color: '#fff',
                                                padding: '5px',
                                                boxSizing: 'border-box',
                                                zIndex: '5'
                                            },
                                            text: fileName.split('/').pop() // Extract filename from path
                                        });

                                        // Append filename overlay to iframe container
                                        iframe.append(filenameOverlay);
                                    } else if (fileType === 'image') {
                                        // Create img element for image files
                                        iframe = $('<img>', {
                                            class: 'file-img',
                                            css: {
                                                width: '100%',
                                                height: 'auto',
                                                border: '1px solid #ccc',
                                                objectFit: 'contain' // Adjust as needed for image display
                                            },
                                            src: "../" + fileName
                                        });
                                    } else {
                                        // Handle unknown file types (optional)
                                        console.log("Unknown file type for fileName: " + fileName);
                                        return; // Skip processing this file
                                    }

                                    // Create download button for PDF and Excel files
                                    var downloadButton;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        downloadButton = $('<a>', {
                                            class: 'btn btn-primary btn-sm download-button',
                                            text: actualFileName,
                                            href: "../" + fileName,
                                            //download: fileName.split('/').pop() 
                                        });
                                    }

                                    // Create remove button
                                    var removeButton = $('<button>', {
                                        class: 'btn btn-danger btn-sm remove-button',
                                        text: 'X',
                                        css: {
                                            position: 'absolute',
                                            top: '5px',
                                            right: '5px',
                                            zIndex: 10
                                        },
                                        click: function () {
                                            $('#confirmDeleteModal').modal('show');

                                            // Handle click on confirmation button
                                            $('#confirmDeleteBtn').on('click', function () {
                                                // Close modal
                                                $('#confirmDeleteModal').modal('hide');
                                                fileWrapper.remove();
                                                deleteFile(fileName);
                                            });
                                        }
                                    });

                                    // Append iframe (or img) and buttons to the wrapper
                                    fileWrapper.append(iframe);
                                    fileWrapper.append(removeButton);
                                    if (downloadButton) {
                                        fileWrapper.append(downloadButton);
                                    }

                                    // Append the wrapper to the container
                                    fileContainer.append(fileWrapper);

                                    // Show initial elements if necessary
                                    if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                        iframe.removeClass('d-none');
                                        removeButton.removeClass('d-none');
                                        if (downloadButton) {
                                            downloadButton.removeClass('d-none');
                                        }
                                    }
                                }
                            });


                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = model.FileName;
                            //     window.open(url, '_blank');
                            // });
                            // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                            //     document.getElementById("pdf-iframe").classList.add("d-none");
                            //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                            //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                            // });
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }

                if ('@actionType' === "Copy") {
                    $("#invoice-no").prop("disabled", false)
                    var id = @ViewBag.Id;
                    console.log(id);

                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetInvoiceDetails2Copy", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#Customer").val(model.CustomerId).trigger('change');
                            $("#terms").val(model.salesRecievedtTermsId).trigger('change');
                            $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                            $("#customer-email").val(model.EmailId);
                            $("#billing-address").val(model.PrimaryAddress);
                            $("#ship-via").val(model.ShippingVia);
                            $("#tracking-no").val(model.TrackingNo);
                            $("#invoice-no").val(model.SaleCode);
                            $("#shipping-from").val(model.SecoundaryAddress);
                            $("#shipping-to").val(model.ShippingTo);
                            $("#message-invoice").val(model.MessageInvoice);
                            $("#message-statement").val(model.MessageStatement);

                            $("#MultiiCurrencyId").val(model.CurrencyId);
                            $("#CurrencyRate").val(model.CurrencyRate);

                            // $("#total").val(model.Total);
                            $("#shipping-amount").val(model.Shipping);
                            $("#shipping-tax").val(model.ShippingTax);
                            $("#AmountsAre").val(model.AmountsAre);
                            var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                return salesTag.TagsId;
                            });
                            $('#tagDropdown').val(tagValues).trigger('change');
                            $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                            $("#end-date").val(formatDateToCustomString(new Date(model.DueDate)));
                            $("#ship-date").val(formatDateToCustomString(new Date(model.ShippingDate)));
                            initializeTabulator(model.Items);
                            initializeTaxData(model.SalesProductTax);
                            calculateSubtotal();
                            calculateTaxableSubtotal();
                            updateTotalForSalesOrder(model.Total);
                            // if (model.FileName !== null && model.FileName !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            // //console.log("res.FilePath::", "../" + res.FilePath);
                            // $('#pdf-iframe').attr('src', "../" + model.FileName);
                            // //$('#pdf-iframe').attr('src', res.FilePath);
                            // $('#pdf-iframe').on('load', function () {
                            //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            // });

                            if (model.IsRecurring == true) {
                                GetRecurringDetails(model.Id)
                            }
                            var fileNames = model.FileName ? model.FileName.split(';') : [];

                            var fileContainer = $('#file-container');

                            // Clear any existing elements
                            fileContainer.empty();

                            fileNames.forEach(function (fileName, index) {
                                if (fileName) {
                                    // Determine file type based on extension
                                    var fileType = getFileType(fileName);
                                    var fileName2 = fileName.split('/').pop();

                                    var actualFileName = fileName2.match(/[^_]+$/)[0];

                                    // Wrapper div
                                    var fileWrapper = $('<div>', {
                                        class: 'file-wrapper col-md-3',
                                        css: {
                                            position: 'relative',
                                            marginBottom: '20px' // space between files
                                        }
                                    });

                                    // Create iframe for PDF and Excel files
                                    var iframe;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        iframe = $('<iframe>', {
                                            id: 'pdf-iframe-' + index,
                                            class: 'file-iframe',
                                            css: {
                                                width: '100%',
                                                height: '0',
                                                border: '1px solid #ccc',
                                                overflow: 'hidden'
                                            },
                                            //src: "../" + fileName
                                        });

                                        // Display filename as text overlay
                                        var filenameOverlay = $('<div>', {
                                            class: 'filename-overlay',
                                            css: {
                                                position: 'absolute',
                                                top: '0',
                                                left: '0',
                                                width: '100%',
                                                background: 'rgba(0, 0, 0, 0.5)',
                                                color: '#fff',
                                                padding: '5px',
                                                boxSizing: 'border-box',
                                                zIndex: '5'
                                            },
                                            text: fileName.split('/').pop() // Extract filename from path
                                        });

                                        // Append filename overlay to iframe container
                                        iframe.append(filenameOverlay);
                                    } else if (fileType === 'image') {
                                        // Create img element for image files
                                        iframe = $('<img>', {
                                            class: 'file-img',
                                            css: {
                                                width: '100%',
                                                height: 'auto',
                                                border: '1px solid #ccc',
                                                objectFit: 'contain' // Adjust as needed for image display
                                            },
                                            src: "../" + fileName
                                        });
                                    } else {
                                        // Handle unknown file types (optional)
                                        console.log("Unknown file type for fileName: " + fileName);
                                        return; // Skip processing this file
                                    }

                                    // Create download button for PDF and Excel files
                                    var downloadButton;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        downloadButton = $('<a>', {
                                            class: 'btn btn-primary btn-sm download-button',
                                            text: actualFileName,
                                            href: "../" + fileName,
                                            download: fileName.split('/').pop() // Extract filename for download
                                        });
                                    }

                                    // Create remove button
                                    var removeButton = $('<button>', {
                                        class: 'btn btn-danger btn-sm remove-button',
                                        text: 'X',
                                        css: {
                                            position: 'absolute',
                                            top: '5px',
                                            right: '5px',
                                            zIndex: 10
                                        },
                                        click: function () {
                                            $('#confirmDeleteModal').modal('show');

                                            // Handle click on confirmation button
                                            $('#confirmDeleteBtn').on('click', function () {
                                                // Close modal
                                                $('#confirmDeleteModal').modal('hide');
                                                fileWrapper.remove();
                                                deleteFile(fileName);
                                            });
                                        }
                                    });

                                    // Append iframe (or img) and buttons to the wrapper
                                    fileWrapper.append(iframe);
                                    fileWrapper.append(removeButton);
                                    if (downloadButton) {
                                        fileWrapper.append(downloadButton);
                                    }

                                    // Append the wrapper to the container
                                    fileContainer.append(fileWrapper);

                                    // Show initial elements if necessary
                                    if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                        iframe.removeClass('d-none');
                                        removeButton.removeClass('d-none');
                                        if (downloadButton) {
                                            downloadButton.removeClass('d-none');
                                        }
                                    }
                                }
                            });
                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = model.FileName;
                            //     window.open(url, '_blank');
                            // });
                            // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                            //     document.getElementById("pdf-iframe").classList.add("d-none");
                            //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                            //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                            // });
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }

                function LoadCustomerWiseData(selectedValue) {
                    var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
                    offcanvas.show();


                    $.ajax({
                        url: '@Url.Action("CustomerWiseSalesOrderData", "Sales")',
                        data: { customerid: selectedValue },
                        type: 'GET',
                        async: true,
                        dataType: 'json',
                        success: function (result) {
                            if (result.Success == "1") {
                                toastr.success(result.ex, "", {
                                    "toastClass": "toast-green",
                                });
                                //populateTableWithData(result.Data);
                                console.log(result.Data);
                                var baseUrl = window.location.origin;
                                var tableData = [];

                                result.Data.forEach(function (item) {

                                    var salesDate = new Date(item.SalesDate);
                                    var formattedSalesDate = salesDate.getDate() + '-' +
                                        salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                        salesDate.getFullYear();


                                    var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                                        '<h5>' + 'TK' + item.Original_Amount + '</h5>' +
                                        '<h6>' + item.Description + '</h6>' +
                                        formattedSalesDate + '<br>' +
                                        '<div style="display: flex; justify-content: space-between;">' +
                                        '<a href="#" onclick="handleAddClick(' + item.Id + ')"><p style="font-weight: bold">Add</p></a>' +
                                        '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                        '</div>';

                                    tableData.push({
                                        SalesId: item.Id,
                                        Description: description
                                    });
                                });


                                table2.setData(tableData);
                            }
                        },
                        error: function () {
                            toastr.error('Unable to Save');
                            //alert('Unable to Save');
                        }
                    });
                }
            }

            if ('@transactionType' === "Issue") {


                var customerDropdown = $("#CustomerIssue");

                customerDropdown.on("change", function () {
                    var selectedValue = $(this).val();
                    grrTable.clearData();
                    $.ajax({
                        url: '@Url.Action("GetProductListByBDPOForIssue", "Sales")',
                        data: { CustomerId: selectedValue },
                        type: 'GET',
                        async: true,
                        dataType: 'json',
                        success: function (result) {
                            grrTable.setData(result.ProductList);
                        },
                        error: function () {
                            toastr.error('Unable to Save');
                            //alert('Unable to Save');
                        }
                    });
                });


                if ('@actionType' === "Edit") {
                    $("#invoice-no").prop("disabled", false)
                    var id = @ViewBag.Id;
                    console.log(id);

                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetInvoiceDetails", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#CustomerIssue").val(model.CustomerId).trigger('change');

                            $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                            $("#customer-email").val(model.EmailId);
                            
                            $("#invoice-no").val(model.SaleCode);
                            
                            $("#message-invoice").val(model.MessageInvoice);
                            $("#message-statement").val(model.MessageStatement);
                            initializeFiscalMonthForEdit(model.SalesDate, model.FiscalMonthId);
                            $("#MultiiCurrencyId").val(model.CurrencyId);
                            $("#CurrencyRate").val(model.CurrencyRate);

                            $("#shipping-amount").val(model.Shipping);
                            $("#shipping-tax").val(model.ShippingTax);
                            $("#AmountsAre").val(model.AmountsAre);
                            var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                return salesTag.TagsId;
                            });
                            
                            
                            initializeTabulator(model.Items);
                            
                            $("#total").val(model.Total);
                            // if (model.FileName !== null && model.FileName !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            // //console.log("res.FilePath::", "../" + res.FilePath);
                            // $('#pdf-iframe').attr('src', "../" + model.FileName);
                            // //$('#pdf-iframe').attr('src', res.FilePath);
                            // $('#pdf-iframe').on('load', function () {
                            //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            // });

                            if (model.IsRecurring == true) {
                                GetRecurringDetails(model.Id)
                            }
                            var fileNames = model.FileName ? model.FileName.split(';') : [];

                            var fileContainer = $('#file-container');

                            // Clear any existing elements
                            fileContainer.empty();

                            fileNames.forEach(function (fileName, index) {
                                if (fileName) {
                                    // Determine file type based on extension
                                    var fileType = getFileType(fileName);
                                    var fileName2 = fileName.split('/').pop();

                                    var actualFileName = fileName2.match(/[^_]+$/)[0];

                                    // Wrapper div
                                    var fileWrapper = $('<div>', {
                                        class: 'file-wrapper col-md-3',
                                        css: {
                                            position: 'relative',
                                            marginBottom: '20px' // space between files
                                        }
                                    });

                                    // Create iframe for PDF and Excel files
                                    var iframe;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        iframe = $('<iframe>', {
                                            id: 'pdf-iframe-' + index,
                                            class: 'file-iframe',
                                            css: {
                                                width: '100%',
                                                height: '0',
                                                border: '1px solid #ccc',
                                                overflow: 'hidden'
                                            },
                                            //src: "../" + fileName
                                        });

                                        // Display filename as text overlay
                                        var filenameOverlay = $('<div>', {
                                            class: 'filename-overlay',
                                            css: {
                                                position: 'absolute',
                                                top: '0',
                                                left: '0',
                                                width: '100%',
                                                background: 'rgba(0, 0, 0, 0.5)',
                                                color: '#fff',
                                                padding: '5px',
                                                boxSizing: 'border-box',
                                                zIndex: '5'
                                            },
                                            text: fileName.split('/').pop() // Extract filename from path
                                        });

                                        // Append filename overlay to iframe container
                                        iframe.append(filenameOverlay);
                                    } else if (fileType === 'image') {
                                        // Create img element for image files
                                        iframe = $('<img>', {
                                            class: 'file-img',
                                            css: {
                                                width: '100%',
                                                height: 'auto',
                                                border: '1px solid #ccc',
                                                objectFit: 'contain' // Adjust as needed for image display
                                            },
                                            src: "../" + fileName
                                        });
                                    } else {
                                        // Handle unknown file types (optional)
                                        console.log("Unknown file type for fileName: " + fileName);
                                        return; // Skip processing this file
                                    }

                                    // Create download button for PDF and Excel files
                                    var downloadButton;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        downloadButton = $('<a>', {
                                            class: 'btn btn-primary btn-sm download-button',
                                            text: actualFileName,
                                            href: "../" + fileName,
                                            download: fileName.split('/').pop() // Extract filename for download
                                        });
                                    }

                                    // Create remove button
                                    var removeButton = $('<button>', {
                                        class: 'btn btn-danger btn-sm remove-button',
                                        text: 'X',
                                        css: {
                                            position: 'absolute',
                                            top: '5px',
                                            right: '5px',
                                            zIndex: 10
                                        },
                                        click: function () {
                                            $('#confirmDeleteModal').modal('show');

                                            // Handle click on confirmation button
                                            $('#confirmDeleteBtn').on('click', function () {
                                                // Close modal
                                                $('#confirmDeleteModal').modal('hide');
                                                fileWrapper.remove();
                                                deleteFile(fileName);
                                            });
                                        }
                                    });

                                    // Append iframe (or img) and buttons to the wrapper
                                    fileWrapper.append(iframe);
                                    fileWrapper.append(removeButton);
                                    if (downloadButton) {
                                        fileWrapper.append(downloadButton);
                                    }

                                    // Append the wrapper to the container
                                    fileContainer.append(fileWrapper);

                                    // Show initial elements if necessary
                                    if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                        iframe.removeClass('d-none');
                                        removeButton.removeClass('d-none');
                                        if (downloadButton) {
                                            downloadButton.removeClass('d-none');
                                        }
                                    }
                                }
                            });
                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = model.FileName;
                            //     window.open(url, '_blank');
                            // });
                            // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                            //     document.getElementById("pdf-iframe").classList.add("d-none");
                            //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                            //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                            // });
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }

                

                
            }

            if ('@transactionType' === "Credit-note") {
                document.getElementById("showoffcanvas").style.display = "block";

                $("#Customer_CreditNote").select2({
                    theme: 'bootstrap-5'
                });

                if ('@actionType' === "Create") {
                    var customerDropdown = $("#Customer_CreditNote");

                    customerDropdown.on("change", function () {
                        // Get the selected value
                        var selectedValue = $(this).val();
                        table.clearData();
                        LoadCustomerDetails(selectedValue, 'billing-address-credit');
                        LoadCustomerWiseData(selectedValue);
                    });
                }


                if ('@actionType' === "Edit") {

                    CreditNoteDetails();

                    function CreditNoteDetails() {
                        var id = @ViewBag.Id;
                        $.ajax({
                            type: "GET",
                            url: '@Url.Action("GetCreditNoteDetails", "Sales")',
                            data: { id: id },
                            dataType: "json",
                            success: function (response) {
                                if (response.Success === 1) {
                                    console.log(response.data);
                                    var model = response.data;
                                    populateCreditNoteMasterData(response.data);
                                    //initializeTabulator(response.data.Items);
                                    table1.setData(response.data.SalesProductTax);
                                    updateTotalAmount();
                                    calculateSubtotal();
                                    calculateTaxableSubtotal();
                                    updateTotalForSalesOrder(model.Total);
                                    // if (model.FileName !== null && model.FileName !== "") {
                                    //     $('#pdf-iframe').toggleClass("d-none");
                                    //     $('#view-image-or-pdf').toggleClass("d-none");
                                    //     $('#remove-image-or-pdf').toggleClass("d-none");
                                    // }
                                    // //console.log("res.FilePath::", "../" + res.FilePath);
                                    // $('#pdf-iframe').attr('src', "../" + model.FileName);
                                    // //$('#pdf-iframe').attr('src', res.FilePath);
                                    // $('#pdf-iframe').on('load', function () {
                                    //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                                    //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                                    // });
                                    $("#MultiiCurrencyId").val(model.CurrencyId);
                                    $("#CurrencyRate").val(model.CurrencyRate);
                                    if (model.IsRecurring == true) {
                                        GetRecurringDetails(model.Id)
                                    }
                                    var fileNames = model.FileName ? model.FileName.split(';') : [];

                                    var fileContainer = $('#file-container');

                                    // Clear any existing elements
                                    fileContainer.empty();

                                    fileNames.forEach(function (fileName, index) {
                                        if (fileName) {
                                            // Determine file type based on extension
                                            var fileType = getFileType(fileName);
                                            var fileName2 = fileName.split('/').pop();

                                            var actualFileName = fileName2.match(/[^_]+$/)[0];

                                            // Wrapper div
                                            var fileWrapper = $('<div>', {
                                                class: 'file-wrapper col-md-3',
                                                css: {
                                                    position: 'relative',
                                                    marginBottom: '20px' // space between files
                                                }
                                            });

                                            // Create iframe for PDF and Excel files
                                            var iframe;
                                            if (fileType === 'pdf' || fileType === 'excel') {
                                                iframe = $('<iframe>', {
                                                    id: 'pdf-iframe-' + index,
                                                    class: 'file-iframe',
                                                    css: {
                                                        width: '100%',
                                                        height: '0',
                                                        border: '1px solid #ccc',
                                                        overflow: 'hidden'
                                                    },
                                                    //src: "../" + fileName
                                                });

                                                // Display filename as text overlay
                                                var filenameOverlay = $('<div>', {
                                                    class: 'filename-overlay',
                                                    css: {
                                                        position: 'absolute',
                                                        top: '0',
                                                        left: '0',
                                                        width: '100%',
                                                        background: 'rgba(0, 0, 0, 0.5)',
                                                        color: '#fff',
                                                        padding: '5px',
                                                        boxSizing: 'border-box',
                                                        zIndex: '5'
                                                    },
                                                    text: fileName.split('/').pop() // Extract filename from path
                                                });

                                                // Append filename overlay to iframe container
                                                iframe.append(filenameOverlay);
                                            } else if (fileType === 'image') {
                                                // Create img element for image files
                                                iframe = $('<img>', {
                                                    class: 'file-img',
                                                    css: {
                                                        width: '100%',
                                                        height: 'auto',
                                                        border: '1px solid #ccc',
                                                        objectFit: 'contain' // Adjust as needed for image display
                                                    },
                                                    src: "../" + fileName
                                                });
                                            } else {
                                                // Handle unknown file types (optional)
                                                console.log("Unknown file type for fileName: " + fileName);
                                                return; // Skip processing this file
                                            }

                                            // Create download button for PDF and Excel files
                                            var downloadButton;
                                            if (fileType === 'pdf' || fileType === 'excel') {
                                                downloadButton = $('<a>', {
                                                    class: 'btn btn-primary btn-sm download-button',
                                                    text: actualFileName,
                                                    href: "../" + fileName,
                                                    download: fileName.split('/').pop() // Extract filename for download
                                                });
                                            }

                                            // Create remove button
                                            var removeButton = $('<button>', {
                                                class: 'btn btn-danger btn-sm remove-button',
                                                text: 'X',
                                                css: {
                                                    position: 'absolute',
                                                    top: '5px',
                                                    right: '5px',
                                                    zIndex: 10
                                                },
                                                click: function () {
                                                    $('#confirmDeleteModal').modal('show');

                                                    // Handle click on confirmation button
                                                    $('#confirmDeleteBtn').on('click', function () {
                                                        // Close modal
                                                        $('#confirmDeleteModal').modal('hide');
                                                        fileWrapper.remove();
                                                        deleteFile(fileName);
                                                    });
                                                }
                                            });

                                            // Append iframe (or img) and buttons to the wrapper
                                            fileWrapper.append(iframe);
                                            fileWrapper.append(removeButton);
                                            if (downloadButton) {
                                                fileWrapper.append(downloadButton);
                                            }

                                            // Append the wrapper to the container
                                            fileContainer.append(fileWrapper);

                                            // Show initial elements if necessary
                                            if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                                iframe.removeClass('d-none');
                                                removeButton.removeClass('d-none');
                                                if (downloadButton) {
                                                    downloadButton.removeClass('d-none');
                                                }
                                            }
                                        }
                                    });
                                    // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                                    //     var url = model.FileName;
                                    //     window.open(url, '_blank');
                                    // });
                                    // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                                    //     document.getElementById("pdf-iframe").classList.add("d-none");
                                    //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                                    //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                                    // });
                                }
                            },
                            error: function (error) {
                                console.error("Error fetching data: " + error);
                            }
                        });
                    }

                }

                if ('@actionType' === "Copy") {

                    var id = @ViewBag.Id;
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetCreditNoteDetails2Copy", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            if (response.Success === 1) {
                                console.log(response.data);
                                var model = response.data;
                                populateCreditNoteMasterData(response.data);
                                //initializeTabulator(response.data.Items);
                                table1.setData(response.data.SalesProductTax);
                                updateTotalAmount();
                                calculateSubtotal();
                                calculateTaxableSubtotal();
                                updateTotalForSalesOrder(model.Total);
                                // if (model.FileName !== null && model.FileName !== "") {
                                //     $('#pdf-iframe').toggleClass("d-none");
                                //     $('#view-image-or-pdf').toggleClass("d-none");
                                //     $('#remove-image-or-pdf').toggleClass("d-none");
                                // }
                                // //console.log("res.FilePath::", "../" + res.FilePath);
                                // $('#pdf-iframe').attr('src', "../" + model.FileName);
                                // //$('#pdf-iframe').attr('src', res.FilePath);
                                // $('#pdf-iframe').on('load', function () {
                                //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                                //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                                // });
                                $("#MultiiCurrencyId").val(model.CurrencyId);
                                $("#CurrencyRate").val(model.CurrencyRate);
                                if (model.IsRecurring == true) {
                                    GetRecurringDetails(model.Id)
                                }
                                var fileNames = model.FileName ? model.FileName.split(';') : [];

                                var fileContainer = $('#file-container');

                                // Clear any existing elements
                                fileContainer.empty();

                                fileNames.forEach(function (fileName, index) {
                                    if (fileName) {
                                        // Determine file type based on extension
                                        var fileType = getFileType(fileName);
                                        var fileName2 = fileName.split('/').pop();

                                        var actualFileName = fileName2.match(/[^_]+$/)[0];

                                        // Wrapper div
                                        var fileWrapper = $('<div>', {
                                            class: 'file-wrapper col-md-3',
                                            css: {
                                                position: 'relative',
                                                marginBottom: '20px' // space between files
                                            }
                                        });

                                        // Create iframe for PDF and Excel files
                                        var iframe;
                                        if (fileType === 'pdf' || fileType === 'excel') {
                                            iframe = $('<iframe>', {
                                                id: 'pdf-iframe-' + index,
                                                class: 'file-iframe',
                                                css: {
                                                    width: '100%',
                                                    height: '0',
                                                    border: '1px solid #ccc',
                                                    overflow: 'hidden'
                                                },
                                                //src: "../" + fileName
                                            });

                                            // Display filename as text overlay
                                            var filenameOverlay = $('<div>', {
                                                class: 'filename-overlay',
                                                css: {
                                                    position: 'absolute',
                                                    top: '0',
                                                    left: '0',
                                                    width: '100%',
                                                    background: 'rgba(0, 0, 0, 0.5)',
                                                    color: '#fff',
                                                    padding: '5px',
                                                    boxSizing: 'border-box',
                                                    zIndex: '5'
                                                },
                                                text: fileName.split('/').pop() // Extract filename from path
                                            });

                                            // Append filename overlay to iframe container
                                            iframe.append(filenameOverlay);
                                        } else if (fileType === 'image') {
                                            // Create img element for image files
                                            iframe = $('<img>', {
                                                class: 'file-img',
                                                css: {
                                                    width: '100%',
                                                    height: 'auto',
                                                    border: '1px solid #ccc',
                                                    objectFit: 'contain' // Adjust as needed for image display
                                                },
                                                src: "../" + fileName
                                            });
                                        } else {
                                            // Handle unknown file types (optional)
                                            console.log("Unknown file type for fileName: " + fileName);
                                            return; // Skip processing this file
                                        }

                                        // Create download button for PDF and Excel files
                                        var downloadButton;
                                        if (fileType === 'pdf' || fileType === 'excel') {
                                            downloadButton = $('<a>', {
                                                class: 'btn btn-primary btn-sm download-button',
                                                text: actualFileName,
                                                href: "../" + fileName,
                                                download: fileName.split('/').pop() // Extract filename for download
                                            });
                                        }

                                        // Create remove button
                                        var removeButton = $('<button>', {
                                            class: 'btn btn-danger btn-sm remove-button',
                                            text: 'X',
                                            css: {
                                                position: 'absolute',
                                                top: '5px',
                                                right: '5px',
                                                zIndex: 10
                                            },
                                            click: function () {
                                                $('#confirmDeleteModal').modal('show');

                                                // Handle click on confirmation button
                                                $('#confirmDeleteBtn').on('click', function () {
                                                    // Close modal
                                                    $('#confirmDeleteModal').modal('hide');
                                                    fileWrapper.remove();
                                                    deleteFile(fileName);
                                                });
                                            }
                                        });

                                        // Append iframe (or img) and buttons to the wrapper
                                        fileWrapper.append(iframe);
                                        fileWrapper.append(removeButton);
                                        if (downloadButton) {
                                            fileWrapper.append(downloadButton);
                                        }

                                        // Append the wrapper to the container
                                        fileContainer.append(fileWrapper);

                                        // Show initial elements if necessary
                                        if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                            iframe.removeClass('d-none');
                                            removeButton.removeClass('d-none');
                                            if (downloadButton) {
                                                downloadButton.removeClass('d-none');
                                            }
                                        }
                                    }
                                });
                                // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                                //     var url = model.FileName;
                                //     window.open(url, '_blank');
                                // });
                                // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                                //     document.getElementById("pdf-iframe").classList.add("d-none");
                                //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                                //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                                // });
                            }
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });

                }

                function LoadCustomerWiseData(selectedValue) {
                    var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
                    offcanvas.show();


                    $.ajax({
                        url: '@Url.Action("CustomerWiseInvoiceData", "Sales")',
                        data: { customerid: selectedValue },
                        type: 'GET',
                        async: true,
                        dataType: 'json',
                        success: function (result) {
                            if (result.Success == "1") {
                                toastr.success(result.ex, "", {
                                    "toastClass": "toast-green",
                                });
                                //populateTableWithData(result.Data);
                                console.log(result.Data);
                                var baseUrl = window.location.origin;
                                var tableData = [];

                                result.Data.forEach(function (item) {

                                    var salesDate = new Date(item.SalesDate);
                                    var formattedSalesDate = salesDate.getDate() + '-' +
                                        salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                        salesDate.getFullYear();


                                    var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                                        '<h5>' + 'TK' + item.Original_Amount + '</h5>' +
                                        'TK' + item.Open_Balance + '  Paid' +
                                        '<h6>' + item.Description + '</h6>' +
                                        formattedSalesDate + '<br>' +
                                        '<div style="display: flex; justify-content: space-between;">' +
                                        '<a href="#" onclick="handleAddClick(' + item.Id + ')"><p style="font-weight: bold">Add</p></a>' +
                                        '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                        '</div>';

                                    tableData.push({
                                        SalesId: item.Id,
                                        Description: description
                                    });
                                });


                                table2.setData(tableData);
                            }
                        },
                        error: function () {
                            toastr.error('Unable to Save');
                            //alert('Unable to Save');
                        }
                    });
                }
            }

            if ('@transactionType' === "Estimate") {

                $('#Customer_Estimate').select2({
                    theme: 'bootstrap-5'
                });



                if ('@actionType' === "Create") {
                    $("#invoice-no").prop("disabled", true)
                    var customerDropdown = $("#Customer_Estimate");

                    customerDropdown.on("change", function () {
                        var selectedValue = $(this).val();
                        LoadCustomerDetails(selectedValue, 'billing-address');
                    });
                }
                if ('@actionType' === "Edit") {
                    $("#invoice-no").prop("disabled", false)
                    var id = @ViewBag.Id;
                    console.log(id);

                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetInvoiceDetails", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#Customer_Estimate").val(model.CustomerId).trigger('change');
                            $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                            $("#EstimateStatus").val(model.StatusRemarks).trigger('change');
                            $("#status-by").val(model.StatusBy);
                            $("#status-date").val(formatDateToCustomString(new Date(model.StatusDate)));
                            $("#customer-email").val(model.EmailId);
                            $("#billing-address").val(model.PrimaryAddress);
                            $("#ship-via").val(model.ShippingVia);
                            $("#tracking-no").val(model.TrackingNo);
                            $("#invoice-no").val(model.SaleCode);
                            initializeFiscalMonthForEdit(model.SalesDate, model.FiscalMonthId);
                            $("#MultiiCurrencyId").val(model.CurrencyId);
                            $("#CurrencyRate").val(model.CurrencyRate);
                            //$("#tags").val(model.Notes);
                            $("#shipping-from").val(model.SecoundaryAddress);
                            $("#shipping-to").val(model.ShippingTo);
                            $("#message-invoice").val(model.MessageInvoice);
                            $("#message-statement").val(model.MessageStatement);
                            $("#total").val(model.Total);
                            $("#shipping-amount").val(model.Shipping);
                            $("#shipping-tax").val(model.ShippingTax);
                            $("#AmountsAre").val(model.AmountsAre);
                            var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                return salesTag.TagsId;
                            });


                            $('#tagDropdown').val(tagValues).trigger('change');
                            $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                            $("#end-date").val(formatDateToCustomString(new Date(model.DueDate)));
                            $("#ship-date").val(formatDateToCustomString(new Date(model.ShippingDate)));
                            setTimeout(function () {
                                initializeTabulator(model.Items);
                                initializeTaxData(model.SalesProductTax);
                                calculateSubtotal();
                                calculateTaxableSubtotal();
                                updateTotal(model.Total);
                                //updateTotalForSalesOrder(model.Total);
                            }, 1000);
                            // initializeTabulator(model.Items);
                            // initializeTaxData(model.SalesProductTax);
                            // calculateSubtotal();
                            // calculateTaxableSubtotal();
                            // updateTotalForSalesOrder(model.Total);

                            // if (model.FileName !== null && model.FileName !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            // //console.log("res.FilePath::", "../" + res.FilePath);
                            // $('#pdf-iframe').attr('src', "../" + model.FileName);
                            // //$('#pdf-iframe').attr('src', res.FilePath);
                            // $('#pdf-iframe').on('load', function () {
                            //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            // });
                            // Assuming model.FileName is a string of file paths separated by semicolons
                            var fileNames = model.FileName ? model.FileName.split(';') : [];

                            var fileContainer = $('#file-container');

                            // Clear any existing elements
                            fileContainer.empty();

                            fileNames.forEach(function (fileName, index) {
                                if (fileName) {
                                    // Determine file type based on extension
                                    var fileType = getFileType(fileName);
                                    var fileName2 = fileName.split('/').pop();

                                    var actualFileName = fileName2.match(/[^_]+$/)[0];

                                    // Wrapper div
                                    var fileWrapper = $('<div>', {
                                        class: 'file-wrapper col-md-3',
                                        css: {
                                            position: 'relative',
                                            marginBottom: '20px' // space between files
                                        }
                                    });

                                    // Create iframe for PDF and Excel files
                                    var iframe;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        iframe = $('<iframe>', {
                                            id: 'pdf-iframe-' + index,
                                            class: 'file-iframe',
                                            css: {
                                                width: '100%',
                                                height: '0',
                                                border: '1px solid #ccc',
                                                overflow: 'hidden'
                                            },
                                            //src: "../" + fileName
                                        });

                                        // Display filename as text overlay
                                        var filenameOverlay = $('<div>', {
                                            class: 'filename-overlay',
                                            css: {
                                                position: 'absolute',
                                                top: '0',
                                                left: '0',
                                                width: '100%',
                                                background: 'rgba(0, 0, 0, 0.5)',
                                                color: '#fff',
                                                padding: '5px',
                                                boxSizing: 'border-box',
                                                zIndex: '5'
                                            },
                                            text: fileName.split('/').pop() // Extract filename from path
                                        });

                                        // Append filename overlay to iframe container
                                        iframe.append(filenameOverlay);
                                    } else if (fileType === 'image') {
                                        // Create img element for image files
                                        iframe = $('<img>', {
                                            class: 'file-img',
                                            css: {
                                                width: '100%',
                                                height: 'auto',
                                                border: '1px solid #ccc',
                                                objectFit: 'contain' // Adjust as needed for image display
                                            },
                                            src: "../" + fileName
                                        });
                                    } else {
                                        // Handle unknown file types (optional)
                                        console.log("Unknown file type for fileName: " + fileName);
                                        return; // Skip processing this file
                                    }

                                    // Create download button for PDF and Excel files
                                    var downloadButton;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        downloadButton = $('<a>', {
                                            class: 'btn btn-primary btn-sm download-button',
                                            text: actualFileName,
                                            href: "../" + fileName,
                                            download: fileName.split('/').pop() // Extract filename for download
                                        });
                                    }

                                    // Create remove button
                                    var removeButton = $('<button>', {
                                        class: 'btn btn-danger btn-sm remove-button',
                                        text: 'X',
                                        css: {
                                            position: 'absolute',
                                            top: '5px',
                                            right: '5px',
                                            zIndex: 10
                                        },
                                        click: function () {
                                            $('#confirmDeleteModal').modal('show');

                                            // Handle click on confirmation button
                                            $('#confirmDeleteBtn').on('click', function () {
                                                // Close modal
                                                $('#confirmDeleteModal').modal('hide');
                                                fileWrapper.remove();
                                                deleteFile(fileName);
                                            });
                                        }
                                    });

                                    // Append iframe (or img) and buttons to the wrapper
                                    fileWrapper.append(iframe);
                                    fileWrapper.append(removeButton);
                                    if (downloadButton) {
                                        fileWrapper.append(downloadButton);
                                    }

                                    // Append the wrapper to the container
                                    fileContainer.append(fileWrapper);

                                    // Show initial elements if necessary
                                    if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                        iframe.removeClass('d-none');
                                        removeButton.removeClass('d-none');
                                        if (downloadButton) {
                                            downloadButton.removeClass('d-none');
                                        }
                                    }
                                }
                            });

                            if (model.IsRecurring == true) {
                                GetRecurringDetails(model.Id)
                            }
                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = model.FileName;
                            //     window.open(url, '_blank');
                            // });
                            // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                            //     document.getElementById("pdf-iframe").classList.add("d-none");
                            //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                            //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                            // });
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }
                if ('@actionType' === "Copy") {
                    $("#invoice-no").prop("disabled", false)
                    var id = @ViewBag.Id;
                    console.log(id);

                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetInvoiceDetails2Copy", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#Customer_Estimate").val(model.CustomerId).trigger('change');
                            $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                            $("#customer-email").val(model.EmailId);
                            $("#billing-address").val(model.PrimaryAddress);
                            $("#ship-via").val(model.ShippingVia);
                            $("#tracking-no").val(model.TrackingNo);
                            $("#invoice-no").val(model.SaleCode);

                            $("#MultiiCurrencyId").val(model.CurrencyId);
                            $("#CurrencyRate").val(model.CurrencyRate);
                            //$("#tags").val(model.Notes);
                            $("#shipping-from").val(model.SecoundaryAddress);
                            $("#shipping-to").val(model.ShippingTo);
                            $("#message-invoice").val(model.MessageInvoice);
                            $("#message-statement").val(model.MessageStatement);
                            $("#total").val(model.Total);
                            $("#shipping-amount").val(model.Shipping);
                            $("#shipping-tax").val(model.ShippingTax);
                            $("#AmountsAre").val(model.AmountsAre);
                            var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                return salesTag.TagsId;
                            });


                            $('#tagDropdown').val(tagValues).trigger('change');
                            $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                            $("#end-date").val(formatDateToCustomString(new Date(model.DueDate)));
                            $("#ship-date").val(formatDateToCustomString(new Date(model.ShippingDate)));
                            setTimeout(function () {
                                initializeTabulator(model.Items);
                                initializeTaxData(model.SalesProductTax);
                                calculateSubtotal();
                                calculateTaxableSubtotal();
                                updateTotalForSalesOrder(model.Total);
                            }, 2000);
                            // initializeTabulator(model.Items);
                            // initializeTaxData(model.SalesProductTax);
                            // calculateSubtotal();
                            // calculateTaxableSubtotal();
                            // updateTotalForSalesOrder(model.Total);

                            // if (model.FileName !== null && model.FileName !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            // //console.log("res.FilePath::", "../" + res.FilePath);
                            // $('#pdf-iframe').attr('src', "../" + model.FileName);
                            // //$('#pdf-iframe').attr('src', res.FilePath);
                            // $('#pdf-iframe').on('load', function () {
                            //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            // });
                            if (model.IsRecurring == true) {
                                GetRecurringDetails(model.Id)
                            }
                            var fileNames = model.FileName ? model.FileName.split(';') : [];

                            var fileContainer = $('#file-container');

                            // Clear any existing elements
                            fileContainer.empty();

                            fileNames.forEach(function (fileName, index) {
                                if (fileName) {
                                    // Determine file type based on extension
                                    var fileType = getFileType(fileName);
                                    var fileName2 = fileName.split('/').pop();

                                    var actualFileName = fileName2.match(/[^_]+$/)[0];

                                    // Wrapper div
                                    var fileWrapper = $('<div>', {
                                        class: 'file-wrapper col-md-3',
                                        css: {
                                            position: 'relative',
                                            marginBottom: '20px' // space between files
                                        }
                                    });

                                    // Create iframe for PDF and Excel files
                                    var iframe;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        iframe = $('<iframe>', {
                                            id: 'pdf-iframe-' + index,
                                            class: 'file-iframe',
                                            css: {
                                                width: '100%',
                                                height: '0',
                                                border: '1px solid #ccc',
                                                overflow: 'hidden'
                                            },
                                            //src: "../" + fileName
                                        });

                                        // Display filename as text overlay
                                        var filenameOverlay = $('<div>', {
                                            class: 'filename-overlay',
                                            css: {
                                                position: 'absolute',
                                                top: '0',
                                                left: '0',
                                                width: '100%',
                                                background: 'rgba(0, 0, 0, 0.5)',
                                                color: '#fff',
                                                padding: '5px',
                                                boxSizing: 'border-box',
                                                zIndex: '5'
                                            },
                                            text: fileName.split('/').pop() // Extract filename from path
                                        });

                                        // Append filename overlay to iframe container
                                        iframe.append(filenameOverlay);
                                    } else if (fileType === 'image') {
                                        // Create img element for image files
                                        iframe = $('<img>', {
                                            class: 'file-img',
                                            css: {
                                                width: '100%',
                                                height: 'auto',
                                                border: '1px solid #ccc',
                                                objectFit: 'contain' // Adjust as needed for image display
                                            },
                                            src: "../" + fileName
                                        });
                                    } else {
                                        // Handle unknown file types (optional)
                                        console.log("Unknown file type for fileName: " + fileName);
                                        return; // Skip processing this file
                                    }

                                    // Create download button for PDF and Excel files
                                    var downloadButton;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        downloadButton = $('<a>', {
                                            class: 'btn btn-primary btn-sm download-button',
                                            text: actualFileName,
                                            href: "../" + fileName,
                                            download: fileName.split('/').pop() // Extract filename for download
                                        });
                                    }

                                    // Create remove button
                                    var removeButton = $('<button>', {
                                        class: 'btn btn-danger btn-sm remove-button',
                                        text: 'X',
                                        css: {
                                            position: 'absolute',
                                            top: '5px',
                                            right: '5px',
                                            zIndex: 10
                                        },
                                        click: function () {
                                            $('#confirmDeleteModal').modal('show');

                                            // Handle click on confirmation button
                                            $('#confirmDeleteBtn').on('click', function () {
                                                // Close modal
                                                $('#confirmDeleteModal').modal('hide');
                                                fileWrapper.remove();
                                                deleteFile(fileName);
                                            });
                                        }
                                    });

                                    // Append iframe (or img) and buttons to the wrapper
                                    fileWrapper.append(iframe);
                                    fileWrapper.append(removeButton);
                                    if (downloadButton) {
                                        fileWrapper.append(downloadButton);
                                    }

                                    // Append the wrapper to the container
                                    fileContainer.append(fileWrapper);

                                    // Show initial elements if necessary
                                    if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                        iframe.removeClass('d-none');
                                        removeButton.removeClass('d-none');
                                        if (downloadButton) {
                                            downloadButton.removeClass('d-none');
                                        }
                                    }
                                }
                            });
                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = model.FileName;
                            //     window.open(url, '_blank');
                            // });
                            // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                            //     document.getElementById("pdf-iframe").classList.add("d-none");
                            //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                            //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                            // });
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }
            }

            if ('@transactionType' === "Sales_Order") {

                document.getElementById("showoffcanvas").style.display = "block";

                $('#Customer_SalesOrder').select2({
                    theme: 'bootstrap-5'
                });
                if ('@actionType' === "Create") {
                    $("#invoice-no").prop("disabled", true)

                    var customerDropdown = $("#Customer_SalesOrder");

                    customerDropdown.on("change", function () {
                        // Get the selected value
                        var selectedValue = $(this).val();
                        table.clearData();
                        LoadCustomerDetails(selectedValue, 'billing-address');
                        LoadCustomerWiseData(selectedValue);
                    });
                }
                if ('@actionType' === "Edit") {

                    SalesOrderDetails();

                    function SalesOrderDetails() {
                        var id = @ViewBag.Id;
                        $.ajax({
                            type: "GET",
                            url: '@Url.Action("GetInvoiceDetails", "Sales")',
                            data: { id: id },
                            dataType: "json",
                            success: function (response) {
                                console.log(response.data);
                                var model = response.data;
                                $("#sales-id").val(model.Id);
                                $("#Customer_SalesOrder").val(model.CustomerId).trigger('change');
                                $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                                $("#customer-email").val(model.EmailId);
                                $("#billing-address").val(model.PrimaryAddress);
                                $("#ship-via").val(model.ShippingVia);
                                $("#tracking-no").val(model.TrackingNo);
                                $("#invoice-no").val(model.SaleCode);

                                $("#MultiiCurrencyId").val(model.CurrencyId);
                                $("#CurrencyRate").val(model.CurrencyRate);
                                //$("#tags").val(model.Notes);
                                $("#shipping-from").val(model.SecoundaryAddress);
                                $("#shipping-to").val(model.ShippingTo);
                                $("#message-invoice").val(model.MessageInvoice);
                                $("#message-statement").val(model.MessageStatement);
                                $("#total").val(model.Total);
                                $("#shipping-amount").val(model.Shipping);
                                $("#shipping-tax").val(model.ShippingTax);
                                //var tagValues = model.SalesTags.map(function (salesTag) {
                                //    return salesTag.TagsId;
                                //});
                                var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                    return salesTag.TagsId;
                                });

                                $('#tagDropdown').val(tagValues).trigger('change');
                                $("#AmountsAre").val(model.AmountsAre);
                                $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                                $("#end-date").val(formatDateToCustomString(new Date(model.DueDate)));
                                $("#ship-date").val(formatDateToCustomString(new Date(model.ShippingDate)));
                                initializeTabulator(model.Items);
                                initializeTaxData(model.SalesProductTax);
                                calculateSubtotal();
                                calculateTaxableSubtotal();
                                updateTotalForSalesOrder(model.Total);
                                // if (model.FileName != null && model.FileName !== "") {
                                //     $('#pdf-iframe').toggleClass("d-none");
                                //     $('#view-image-or-pdf').toggleClass("d-none");
                                //     $('#remove-image-or-pdf').toggleClass("d-none");
                                // }
                                // //console.log("res.FilePath::", "../" + res.FilePath);
                                // $('#pdf-iframe').attr('src', "../" + model.FileName);
                                // //$('#pdf-iframe').attr('src', res.FilePath);
                                // $('#pdf-iframe').on('load', function () {
                                //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                                //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                                // });

                                if (model.IsRecurring == true) {
                                    GetRecurringDetails(model.Id)
                                }

                                var fileNames = model.FileName ? model.FileName.split(';') : [];

                                var fileContainer = $('#file-container');

                                // Clear any existing elements
                                fileContainer.empty();

                                fileNames.forEach(function (fileName, index) {
                                    if (fileName) {
                                        // Determine file type based on extension
                                        var fileType = getFileType(fileName);
                                        var fileName2 = fileName.split('/').pop();

                                        var actualFileName = fileName2.match(/[^_]+$/)[0];

                                        // Wrapper div
                                        var fileWrapper = $('<div>', {
                                            class: 'file-wrapper col-md-3',
                                            css: {
                                                position: 'relative',
                                                marginBottom: '20px' // space between files
                                            }
                                        });

                                        // Create iframe for PDF and Excel files
                                        var iframe;
                                        if (fileType === 'pdf' || fileType === 'excel') {
                                            iframe = $('<iframe>', {
                                                id: 'pdf-iframe-' + index,
                                                class: 'file-iframe',
                                                css: {
                                                    width: '100%',
                                                    height: '0',
                                                    border: '1px solid #ccc',
                                                    overflow: 'hidden'
                                                },
                                                //src: "../" + fileName
                                            });

                                            // Display filename as text overlay
                                            var filenameOverlay = $('<div>', {
                                                class: 'filename-overlay',
                                                css: {
                                                    position: 'absolute',
                                                    top: '0',
                                                    left: '0',
                                                    width: '100%',
                                                    background: 'rgba(0, 0, 0, 0.5)',
                                                    color: '#fff',
                                                    padding: '5px',
                                                    boxSizing: 'border-box',
                                                    zIndex: '5'
                                                },
                                                text: fileName.split('/').pop() // Extract filename from path
                                            });

                                            // Append filename overlay to iframe container
                                            iframe.append(filenameOverlay);
                                        } else if (fileType === 'image') {
                                            // Create img element for image files
                                            iframe = $('<img>', {
                                                class: 'file-img',
                                                css: {
                                                    width: '100%',
                                                    height: 'auto',
                                                    border: '1px solid #ccc',
                                                    objectFit: 'contain' // Adjust as needed for image display
                                                },
                                                src: "../" + fileName
                                            });
                                        } else {
                                            // Handle unknown file types (optional)
                                            console.log("Unknown file type for fileName: " + fileName);
                                            return; // Skip processing this file
                                        }

                                        // Create download button for PDF and Excel files
                                        var downloadButton;
                                        if (fileType === 'pdf' || fileType === 'excel') {
                                            downloadButton = $('<a>', {
                                                class: 'btn btn-primary btn-sm download-button',
                                                text: actualFileName,
                                                href: "../" + fileName,
                                                download: fileName.split('/').pop() // Extract filename for download
                                            });
                                        }

                                        // Create remove button
                                        var removeButton = $('<button>', {
                                            class: 'btn btn-danger btn-sm remove-button',
                                            text: 'X',
                                            css: {
                                                position: 'absolute',
                                                top: '5px',
                                                right: '5px',
                                                zIndex: 10
                                            },
                                            click: function () {
                                                $('#confirmDeleteModal').modal('show');

                                                // Handle click on confirmation button
                                                $('#confirmDeleteBtn').on('click', function () {
                                                    // Close modal
                                                    $('#confirmDeleteModal').modal('hide');
                                                    fileWrapper.remove();
                                                    deleteFile(fileName);
                                                });
                                            }
                                        });

                                        // Append iframe (or img) and buttons to the wrapper
                                        fileWrapper.append(iframe);
                                        fileWrapper.append(removeButton);
                                        if (downloadButton) {
                                            fileWrapper.append(downloadButton);
                                        }

                                        // Append the wrapper to the container
                                        fileContainer.append(fileWrapper);

                                        // Show initial elements if necessary
                                        if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                            iframe.removeClass('d-none');
                                            removeButton.removeClass('d-none');
                                            if (downloadButton) {
                                                downloadButton.removeClass('d-none');
                                            }
                                        }
                                    }
                                });
                                // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                                //     var url = model.FileName;
                                //     window.open(url, '_blank');
                                // });
                                // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                                //     document.getElementById("pdf-iframe").classList.add("d-none");
                                //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                                //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                                // });
                            },
                            error: function (error) {
                                console.error("Error fetching data: " + error);
                            }
                        });
                    }

                }

                if ('@actionType' === "Copy") {

                    var id = @ViewBag.Id;
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetInvoiceDetails2Copy", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#Customer_SalesOrder").val(model.CustomerId).trigger('change');
                            $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                            $("#customer-email").val(model.EmailId);
                            $("#billing-address").val(model.PrimaryAddress);
                            $("#ship-via").val(model.ShippingVia);
                            $("#tracking-no").val(model.TrackingNo);
                            $("#invoice-no").val(model.SaleCode);

                            $("#MultiiCurrencyId").val(model.CurrencyId);
                            $("#CurrencyRate").val(model.CurrencyRate);
                            //$("#tags").val(model.Notes);
                            $("#shipping-from").val(model.SecoundaryAddress);
                            $("#shipping-to").val(model.ShippingTo);
                            $("#message-invoice").val(model.MessageInvoice);
                            $("#message-statement").val(model.MessageStatement);
                            $("#total").val(model.Total);
                            $("#shipping-amount").val(model.Shipping);
                            $("#shipping-tax").val(model.ShippingTax);
                            //var tagValues = model.SalesTags.map(function (salesTag) {
                            //    return salesTag.TagsId;
                            //});
                            var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                return salesTag.TagsId;
                            });

                            $('#tagDropdown').val(tagValues).trigger('change');
                            $("#AmountsAre").val(model.AmountsAre);
                            $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                            $("#end-date").val(formatDateToCustomString(new Date(model.DueDate)));
                            $("#ship-date").val(formatDateToCustomString(new Date(model.ShippingDate)));
                            initializeTabulator(model.Items);
                            initializeTaxData(model.SalesProductTax);
                            calculateSubtotal();
                            calculateTaxableSubtotal();
                            updateTotalForSalesOrder(model.Total);
                            // if (model.FileName != null && model.FileName !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            // //console.log("res.FilePath::", "../" + res.FilePath);
                            // $('#pdf-iframe').attr('src', "../" + model.FileName);
                            // //$('#pdf-iframe').attr('src', res.FilePath);
                            // $('#pdf-iframe').on('load', function () {
                            //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            // });

                            var fileNames = model.FileName ? model.FileName.split(';') : [];

                            var fileContainer = $('#file-container');

                            // Clear any existing elements
                            fileContainer.empty();

                            fileNames.forEach(function (fileName, index) {
                                if (fileName) {
                                    // Determine file type based on extension
                                    var fileType = getFileType(fileName);
                                    var fileName2 = fileName.split('/').pop();

                                    var actualFileName = fileName2.match(/[^_]+$/)[0];

                                    // Wrapper div
                                    var fileWrapper = $('<div>', {
                                        class: 'file-wrapper col-md-3',
                                        css: {
                                            position: 'relative',
                                            marginBottom: '20px' // space between files
                                        }
                                    });

                                    // Create iframe for PDF and Excel files
                                    var iframe;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        iframe = $('<iframe>', {
                                            id: 'pdf-iframe-' + index,
                                            class: 'file-iframe',
                                            css: {
                                                width: '100%',
                                                height: '0',
                                                border: '1px solid #ccc',
                                                overflow: 'hidden'
                                            },
                                            //src: "../" + fileName
                                        });

                                        // Display filename as text overlay
                                        var filenameOverlay = $('<div>', {
                                            class: 'filename-overlay',
                                            css: {
                                                position: 'absolute',
                                                top: '0',
                                                left: '0',
                                                width: '100%',
                                                background: 'rgba(0, 0, 0, 0.5)',
                                                color: '#fff',
                                                padding: '5px',
                                                boxSizing: 'border-box',
                                                zIndex: '5'
                                            },
                                            text: fileName.split('/').pop() // Extract filename from path
                                        });

                                        // Append filename overlay to iframe container
                                        iframe.append(filenameOverlay);
                                    } else if (fileType === 'image') {
                                        // Create img element for image files
                                        iframe = $('<img>', {
                                            class: 'file-img',
                                            css: {
                                                width: '100%',
                                                height: 'auto',
                                                border: '1px solid #ccc',
                                                objectFit: 'contain' // Adjust as needed for image display
                                            },
                                            src: "../" + fileName
                                        });
                                    } else {
                                        // Handle unknown file types (optional)
                                        console.log("Unknown file type for fileName: " + fileName);
                                        return; // Skip processing this file
                                    }

                                    // Create download button for PDF and Excel files
                                    var downloadButton;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        downloadButton = $('<a>', {
                                            class: 'btn btn-primary btn-sm download-button',
                                            text: actualFileName,
                                            href: "../" + fileName,
                                            download: fileName.split('/').pop() // Extract filename for download
                                        });
                                    }

                                    // Create remove button
                                    var removeButton = $('<button>', {
                                        class: 'btn btn-danger btn-sm remove-button',
                                        text: 'X',
                                        css: {
                                            position: 'absolute',
                                            top: '5px',
                                            right: '5px',
                                            zIndex: 10
                                        },
                                        click: function () {
                                            $('#confirmDeleteModal').modal('show');

                                            // Handle click on confirmation button
                                            $('#confirmDeleteBtn').on('click', function () {
                                                // Close modal
                                                $('#confirmDeleteModal').modal('hide');
                                                fileWrapper.remove();
                                                deleteFile(fileName);
                                            });
                                        }
                                    });

                                    // Append iframe (or img) and buttons to the wrapper
                                    fileWrapper.append(iframe);
                                    fileWrapper.append(removeButton);
                                    if (downloadButton) {
                                        fileWrapper.append(downloadButton);
                                    }

                                    // Append the wrapper to the container
                                    fileContainer.append(fileWrapper);

                                    // Show initial elements if necessary
                                    if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                        iframe.removeClass('d-none');
                                        removeButton.removeClass('d-none');
                                        if (downloadButton) {
                                            downloadButton.removeClass('d-none');
                                        }
                                    }
                                }
                            });

                            if (model.IsRecurring == true) {
                                GetRecurringDetails(model.Id)
                            }

                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = model.FileName;
                            //     window.open(url, '_blank');
                            // });
                            // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                            //     document.getElementById("pdf-iframe").classList.add("d-none");
                            //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                            //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                            // });
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });

                }


                function LoadCustomerWiseData(selectedValue) {
                    var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
                    offcanvas.show();


                    $.ajax({
                        url: '@Url.Action("CustomerWiseEstimateData", "Sales")',
                        data: { customerid: selectedValue },
                        type: 'GET',
                        async: true,
                        dataType: 'json',
                        success: function (result) {
                            if (result.Success == "1") {
                                toastr.success(result.ex, "", {
                                    "toastClass": "toast-green",
                                });
                                //populateTableWithData(result.Data);
                                console.log(result.Data);
                                var baseUrl = window.location.origin;
                                var tableData = [];

                                result.Data.forEach(function (item) {

                                    var salesDate = new Date(item.SalesDate);
                                    var formattedSalesDate = salesDate.getDate() + '-' +
                                        salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                        salesDate.getFullYear();


                                    var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                                        '<h5>' + 'TK' + item.Original_Amount + '</h5>' +
                                        '<h6>' + item.Description + '</h6>' +
                                        formattedSalesDate + '<br>' +
                                        '<div style="display: flex; justify-content: space-between;">' +
                                        '<a href="#" onclick="handleAddClick(' + item.Id + ')"><p style="font-weight: bold">Add</p></a>' +
                                        '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                        '</div>';

                                    tableData.push({
                                        SalesId: item.Id,
                                        Description: description
                                    });
                                });


                                table2.setData(tableData);
                            }
                        },
                        error: function () {
                            toastr.error('Unable to Save');
                            //alert('Unable to Save');
                        }
                    });
                }

            }

            if ('@transactionType' === "Sales_Receipt") {
                $('#Customer_SalesReceipt').select2({
                    theme: 'bootstrap-5'
                });

                const isRecognition = document.getElementById("isRecognition");

                isRecognition.addEventListener("change", () => {
                    if (isRecognition.checked) {
                        $("#adv_details").removeClass("d-none");
                    }
                    else
                    {
                        $("#adv_details").addClass("d-none");
                    }
                });

                if ('@actionType' === "Create") {
                    $("#invoice-no").prop("disabled", true)

                    var customerDropdown = $("#Customer_SalesReceipt");

                    customerDropdown.on("change", function () {
                        var selectedValue = $(this).val();
                        LoadCustomerDetails(selectedValue, 'billing-address');
                        table3.clearData();
                    });
                }
                if ('@actionType' === "Edit") {
                    SalesReceiptDetails();

                    function SalesReceiptDetails() {
                        var id = @ViewBag.Id;
                        $.ajax({
                            type: "GET",
                            url: '@Url.Action("GetSalesReceiptDetails", "Sales")',
                            data: { id: id },
                            dataType: "json",
                            success: function (response) {
                                console.log(response.data);
                                var model = response.data;
                                $("#sales-id").val(model.Id);
                                $("#Customer_SalesReceipt").val(model.CustomerId).trigger('change');
                                $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                                $("#customer-email").val(model.EmailId);
                                $("#billing-address").val(model.PrimaryAddress);
                                $("#ship-via").val(model.ShippingVia);
                                $("#tracking-no").val(model.TrackingNo);
                                $("#invoice-no").val(model.SaleCode);
                                initializeFiscalMonthForEdit(model.SalesDate, model.FiscalMonthId);
                                $("#MultiiCurrencyId").val(model.CurrencyId);
                                $("#CurrencyRate").val(model.CurrencyRate);
                                //$("#tags").val(model.Notes);
                                //var tagValues = model.SalesTags.map(function (salesTag) {
                                //    return salesTag.TagsId;
                                //});
                                var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                    return salesTag.TagsId;
                                });

                                $('#tagDropdown').val(tagValues).trigger('change');
                                $("#shipping-from").val(model.SecoundaryAddress);
                                $("#shipping-to").val(model.ShippingTo);
                                $("#message-invoice").val(model.MessageInvoice);
                                $("#message-statement").val(model.MessageStatement);

                                $("#shipping-amount").val(model.Shipping);
                                $("#shipping-tax").val(model.ShippingTax);
                                $("#AmountsAre").val(model.AmountsAre);
                                $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                                $("#ship-date").val(formatDateToCustomString(new Date(model.ShippingDate)));
                                initializeTabulator(model.Items);
                                initializeTaxData(model.SalesProductTax);
                                initializePaymentData(model.SalesPayments);
                                calculateSubtotal();
                                calculateTaxableSubtotal();
                                updateTotalForSalesOrder(model.Total);
                                $("#total").val(model.Total);
                                // if (model.FileName != null && model.FileName !== "") {
                                //     $('#pdf-iframe').toggleClass("d-none");
                                //     $('#view-image-or-pdf').toggleClass("d-none");
                                //     $('#remove-image-or-pdf').toggleClass("d-none");
                                // }
                                // //console.log("res.FilePath::", "../" + res.FilePath);
                                // $('#pdf-iframe').attr('src', "../" + model.FileName);
                                // //$('#pdf-iframe').attr('src', res.FilePath);
                                // $('#pdf-iframe').on('load', function () {
                                //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                                //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                                // });
                                if (model.IsRecurring == true) {
                                    GetRecurringDetails(model.Id)
                                }
                                var fileNames = model.FileName ? model.FileName.split(';') : [];

                                var fileContainer = $('#file-container');

                                // Clear any existing elements
                                fileContainer.empty();

                                fileNames.forEach(function (fileName, index) {
                                    if (fileName) {
                                        // Determine file type based on extension
                                        var fileType = getFileType(fileName);
                                        var fileName2 = fileName.split('/').pop();

                                        var actualFileName = fileName2.match(/[^_]+$/)[0];

                                        // Wrapper div
                                        var fileWrapper = $('<div>', {
                                            class: 'file-wrapper col-md-3',
                                            css: {
                                                position: 'relative',
                                                marginBottom: '20px' // space between files
                                            }
                                        });

                                        // Create iframe for PDF and Excel files
                                        var iframe;
                                        if (fileType === 'pdf' || fileType === 'excel') {
                                            iframe = $('<iframe>', {
                                                id: 'pdf-iframe-' + index,
                                                class: 'file-iframe',
                                                css: {
                                                    width: '100%',
                                                    height: '0',
                                                    border: '1px solid #ccc',
                                                    overflow: 'hidden'
                                                },
                                                //src: "../" + fileName
                                            });

                                            // Display filename as text overlay
                                            var filenameOverlay = $('<div>', {
                                                class: 'filename-overlay',
                                                css: {
                                                    position: 'absolute',
                                                    top: '0',
                                                    left: '0',
                                                    width: '100%',
                                                    background: 'rgba(0, 0, 0, 0.5)',
                                                    color: '#fff',
                                                    padding: '5px',
                                                    boxSizing: 'border-box',
                                                    zIndex: '5'
                                                },
                                                text: fileName.split('/').pop() // Extract filename from path
                                            });

                                            // Append filename overlay to iframe container
                                            iframe.append(filenameOverlay);
                                        } else if (fileType === 'image') {
                                            // Create img element for image files
                                            iframe = $('<img>', {
                                                class: 'file-img',
                                                css: {
                                                    width: '100%',
                                                    height: 'auto',
                                                    border: '1px solid #ccc',
                                                    objectFit: 'contain' // Adjust as needed for image display
                                                },
                                                src: "../" + fileName
                                            });
                                        } else {
                                            // Handle unknown file types (optional)
                                            console.log("Unknown file type for fileName: " + fileName);
                                            return; // Skip processing this file
                                        }

                                        // Create download button for PDF and Excel files
                                        var downloadButton;
                                        if (fileType === 'pdf' || fileType === 'excel') {
                                            downloadButton = $('<a>', {
                                                class: 'btn btn-primary btn-sm download-button',
                                                text: actualFileName,
                                                href: "../" + fileName,
                                                download: fileName.split('/').pop() // Extract filename for download
                                            });
                                        }

                                        // Create remove button
                                        var removeButton = $('<button>', {
                                            class: 'btn btn-danger btn-sm remove-button',
                                            text: 'X',
                                            css: {
                                                position: 'absolute',
                                                top: '5px',
                                                right: '5px',
                                                zIndex: 10
                                            },
                                            click: function () {
                                                $('#confirmDeleteModal').modal('show');

                                                // Handle click on confirmation button
                                                $('#confirmDeleteBtn').on('click', function () {
                                                    // Close modal
                                                    $('#confirmDeleteModal').modal('hide');
                                                    fileWrapper.remove();
                                                    deleteFile(fileName);
                                                });
                                            }
                                        });

                                        // Append iframe (or img) and buttons to the wrapper
                                        fileWrapper.append(iframe);
                                        fileWrapper.append(removeButton);
                                        if (downloadButton) {
                                            fileWrapper.append(downloadButton);
                                        }

                                        // Append the wrapper to the container
                                        fileContainer.append(fileWrapper);

                                        // Show initial elements if necessary
                                        if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                            iframe.removeClass('d-none');
                                            removeButton.removeClass('d-none');
                                            if (downloadButton) {
                                                downloadButton.removeClass('d-none');
                                            }
                                        }
                                    }
                                });
                                // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                                //     var url = model.FileName;
                                //     window.open(url, '_blank');
                                // });
                                // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                                //     document.getElementById("pdf-iframe").classList.add("d-none");
                                //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                                //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                                // });

                                if(model.IsRecognition === true)
                                {
                                    AdvSalesReceiptDetails();
                                }
                            },
                            error: function (error) {
                                console.error("Error fetching data: " + error);
                            }
                        });
                    }

                    function AdvSalesReceiptDetails() {
                        var id = @ViewBag.Id;
                        $.ajax({
                            type: "GET",
                            url: '@Url.Action("GetAdvanceTrxDetails", "Sales")',
                            data: { id: id },
                            dataType: "json",
                            success: function (response) {
                                console.log(response.data);
                                var model = response.data;
                                $("#adv_details").removeClass("d-none");
                                $("#adv-trxn-id").val(model.Id);
                                $("#every_adv").val(model.Duration);
                                $("#adv_occurences").val(model.Occurence);
                                $("#adv-start-date").val(formatDateToCustomString(new Date(model.StartDate)));
                                $("#adv_Integer").val(model.OccuringDate).trigger('change');
                                const IsRecogni = document.getElementById("isRecognition");
                                IsRecogni.checked = true;
                                
                            },
                            error: function (error) {
                                console.error("Error fetching data: " + error);
                            }
                        });
                    }
                }

                if ('@actionType' === "Copy") {
                    var id = @ViewBag.Id;
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetSalesReceiptDetails2Copy", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#Customer_SalesReceipt").val(model.CustomerId).trigger('change');
                            $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                            $("#customer-email").val(model.EmailId);
                            $("#billing-address").val(model.PrimaryAddress);
                            $("#ship-via").val(model.ShippingVia);
                            $("#tracking-no").val(model.TrackingNo);
                            $("#invoice-no").val(model.SaleCode);
                            $("#MultiiCurrencyId").val(model.CurrencyId);
                            $("#CurrencyRate").val(model.CurrencyRate);

                            var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                return salesTag.TagsId;
                            });

                            $('#tagDropdown').val(tagValues).trigger('change');
                            $("#shipping-from").val(model.SecoundaryAddress);
                            $("#shipping-to").val(model.ShippingTo);
                            $("#message-invoice").val(model.MessageInvoice);
                            $("#message-statement").val(model.MessageStatement);
                            $("#total").val(model.Total);
                            $("#shipping-amount").val(model.Shipping);
                            $("#shipping-tax").val(model.ShippingTax);
                            $("#AmountsAre").val(model.AmountsAre);
                            $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                            $("#ship-date").val(formatDateToCustomString(new Date(model.ShippingDate)));
                            initializeTabulator(model.Items);
                            initializeTaxData(model.SalesProductTax);
                            initializePaymentData(model.SalesPayments);
                            calculateSubtotal();
                            calculateTaxableSubtotal();
                            updateTotalForSalesOrder(model.Total);
                            // if (model.FileName != null && model.FileName !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            // //console.log("res.FilePath::", "../" + res.FilePath);
                            // $('#pdf-iframe').attr('src', "../" + model.FileName);
                            // //$('#pdf-iframe').attr('src', res.FilePath);
                            // $('#pdf-iframe').on('load', function () {
                            //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            // });
                            if (model.IsRecurring == true) {
                                GetRecurringDetails(model.Id)
                            }
                            var fileNames = model.FileName ? model.FileName.split(';') : [];

                            var fileContainer = $('#file-container');

                            // Clear any existing elements
                            fileContainer.empty();

                            fileNames.forEach(function (fileName, index) {
                                if (fileName) {
                                    // Determine file type based on extension
                                    var fileType = getFileType(fileName);
                                    var fileName2 = fileName.split('/').pop();

                                    var actualFileName = fileName2.match(/[^_]+$/)[0];

                                    // Wrapper div
                                    var fileWrapper = $('<div>', {
                                        class: 'file-wrapper col-md-3',
                                        css: {
                                            position: 'relative',
                                            marginBottom: '20px' // space between files
                                        }
                                    });

                                    // Create iframe for PDF and Excel files
                                    var iframe;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        iframe = $('<iframe>', {
                                            id: 'pdf-iframe-' + index,
                                            class: 'file-iframe',
                                            css: {
                                                width: '100%',
                                                height: '0',
                                                border: '1px solid #ccc',
                                                overflow: 'hidden'
                                            },
                                            //src: "../" + fileName
                                        });

                                        // Display filename as text overlay
                                        var filenameOverlay = $('<div>', {
                                            class: 'filename-overlay',
                                            css: {
                                                position: 'absolute',
                                                top: '0',
                                                left: '0',
                                                width: '100%',
                                                background: 'rgba(0, 0, 0, 0.5)',
                                                color: '#fff',
                                                padding: '5px',
                                                boxSizing: 'border-box',
                                                zIndex: '5'
                                            },
                                            text: fileName.split('/').pop() // Extract filename from path
                                        });

                                        // Append filename overlay to iframe container
                                        iframe.append(filenameOverlay);
                                    } else if (fileType === 'image') {
                                        // Create img element for image files
                                        iframe = $('<img>', {
                                            class: 'file-img',
                                            css: {
                                                width: '100%',
                                                height: 'auto',
                                                border: '1px solid #ccc',
                                                objectFit: 'contain' // Adjust as needed for image display
                                            },
                                            src: "../" + fileName
                                        });
                                    } else {
                                        // Handle unknown file types (optional)
                                        console.log("Unknown file type for fileName: " + fileName);
                                        return; // Skip processing this file
                                    }

                                    // Create download button for PDF and Excel files
                                    var downloadButton;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        downloadButton = $('<a>', {
                                            class: 'btn btn-primary btn-sm download-button',
                                            text: actualFileName,
                                            href: "../" + fileName,
                                            download: fileName.split('/').pop() // Extract filename for download
                                        });
                                    }

                                    // Create remove button
                                    var removeButton = $('<button>', {
                                        class: 'btn btn-danger btn-sm remove-button',
                                        text: 'X',
                                        css: {
                                            position: 'absolute',
                                            top: '5px',
                                            right: '5px',
                                            zIndex: 10
                                        },
                                        click: function () {
                                            $('#confirmDeleteModal').modal('show');

                                            // Handle click on confirmation button
                                            $('#confirmDeleteBtn').on('click', function () {
                                                // Close modal
                                                $('#confirmDeleteModal').modal('hide');
                                                fileWrapper.remove();
                                                deleteFile(fileName);
                                            });
                                        }
                                    });

                                    // Append iframe (or img) and buttons to the wrapper
                                    fileWrapper.append(iframe);
                                    fileWrapper.append(removeButton);
                                    if (downloadButton) {
                                        fileWrapper.append(downloadButton);
                                    }

                                    // Append the wrapper to the container
                                    fileContainer.append(fileWrapper);

                                    // Show initial elements if necessary
                                    if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                        iframe.removeClass('d-none');
                                        removeButton.removeClass('d-none');
                                        if (downloadButton) {
                                            downloadButton.removeClass('d-none');
                                        }
                                    }
                                }
                            });
                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = model.FileName;
                            //     window.open(url, '_blank');
                            // });
                            // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                            //     document.getElementById("pdf-iframe").classList.add("d-none");
                            //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                            //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                            // });
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }
            }

            if ('@transactionType' === "Delayed_Charge") {
                $('#Customer_Delayed_Charge').select2({
                    theme: 'bootstrap-5'
                });

                if ('@actionType' === "Create") {
                    $("#invoice-no").prop("disabled", true)

                    var customerDropdown = $("#Customer_Delayed_Charge");

                }
                if ('@actionType' === "Edit") {
                    SalesReceiptDetails();

                    function SalesReceiptDetails() {
                        var id = @ViewBag.Id;
                        $.ajax({
                            type: "GET",
                            url: '@Url.Action("GetSalesReceiptDetails", "Sales")',
                            data: { id: id },
                            dataType: "json",
                            success: function (response) {
                                console.log(response.data);
                                var model = response.data;
                                $("#sales-id").val(model.Id);
                                $("#Customer_Delayed_Charge").val(model.CustomerId).trigger('change');
                                $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                                $("#customer-email").val(model.EmailId);
                                $("#invoice-no").val(model.SaleCode);

                                $("#MultiiCurrencyId").val(model.CurrencyId);
                                $("#CurrencyRate").val(model.CurrencyRate);

                                //$("#tags").val(model.Notes);
                                //var tagValues = model.SalesTags.map(function (salesTag) {
                                //    return salesTag.TagsId;
                                //});
                                var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                    return salesTag.TagsId;
                                });
                                initializeFiscalMonthForEdit(model.SalesDate, model.FiscalMonthId);
                                $('#tagDropdown').val(tagValues).trigger('change');
                                $("#message-statement").val(model.MessageStatement);
                                $("#total").val(model.Total);
                                $("#shipping-amount").val(model.Shipping);
                                $("#shipping-tax").val(model.ShippingTax);
                                $("#AmountsAre").val(model.AmountsAre);
                                $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                                initializeTabulator(model.Items);
                                initializeTaxData(model.SalesProductTax);
                                calculateSubtotal();
                                calculateTaxableSubtotal();
                                updateTotalForSalesOrder(model.Total);
                                // if (model.FileName != null && model.FileName !== "") {
                                //     $('#pdf-iframe').toggleClass("d-none");
                                //     $('#view-image-or-pdf').toggleClass("d-none");
                                //     $('#remove-image-or-pdf').toggleClass("d-none");
                                // }
                                // //console.log("res.FilePath::", "../" + res.FilePath);
                                // $('#pdf-iframe').attr('src', "../" + model.FileName);
                                // //$('#pdf-iframe').attr('src', res.FilePath);
                                // $('#pdf-iframe').on('load', function () {
                                //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                                //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                                // });
                                if (model.IsRecurring == true) {
                                    GetRecurringDetails(model.Id)
                                }
                                var fileNames = model.FileName ? model.FileName.split(';') : [];

                                var fileContainer = $('#file-container');

                                // Clear any existing elements
                                fileContainer.empty();

                                fileNames.forEach(function (fileName, index) {
                                    if (fileName) {
                                        // Determine file type based on extension
                                        var fileType = getFileType(fileName);
                                        var fileName2 = fileName.split('/').pop();

                                        var actualFileName = fileName2.match(/[^_]+$/)[0];

                                        // Wrapper div
                                        var fileWrapper = $('<div>', {
                                            class: 'file-wrapper col-md-3',
                                            css: {
                                                position: 'relative',
                                                marginBottom: '20px' // space between files
                                            }
                                        });

                                        // Create iframe for PDF and Excel files
                                        var iframe;
                                        if (fileType === 'pdf' || fileType === 'excel') {
                                            iframe = $('<iframe>', {
                                                id: 'pdf-iframe-' + index,
                                                class: 'file-iframe',
                                                css: {
                                                    width: '100%',
                                                    height: '0',
                                                    border: '1px solid #ccc',
                                                    overflow: 'hidden'
                                                },
                                                //src: "../" + fileName
                                            });

                                            // Display filename as text overlay
                                            var filenameOverlay = $('<div>', {
                                                class: 'filename-overlay',
                                                css: {
                                                    position: 'absolute',
                                                    top: '0',
                                                    left: '0',
                                                    width: '100%',
                                                    background: 'rgba(0, 0, 0, 0.5)',
                                                    color: '#fff',
                                                    padding: '5px',
                                                    boxSizing: 'border-box',
                                                    zIndex: '5'
                                                },
                                                text: fileName.split('/').pop() // Extract filename from path
                                            });

                                            // Append filename overlay to iframe container
                                            iframe.append(filenameOverlay);
                                        } else if (fileType === 'image') {
                                            // Create img element for image files
                                            iframe = $('<img>', {
                                                class: 'file-img',
                                                css: {
                                                    width: '100%',
                                                    height: 'auto',
                                                    border: '1px solid #ccc',
                                                    objectFit: 'contain' // Adjust as needed for image display
                                                },
                                                src: "../" + fileName
                                            });
                                        } else {
                                            // Handle unknown file types (optional)
                                            console.log("Unknown file type for fileName: " + fileName);
                                            return; // Skip processing this file
                                        }

                                        // Create download button for PDF and Excel files
                                        var downloadButton;
                                        if (fileType === 'pdf' || fileType === 'excel') {
                                            downloadButton = $('<a>', {
                                                class: 'btn btn-primary btn-sm download-button',
                                                text: actualFileName,
                                                href: "../" + fileName,
                                                download: fileName.split('/').pop() // Extract filename for download
                                            });
                                        }

                                        // Create remove button
                                        var removeButton = $('<button>', {
                                            class: 'btn btn-danger btn-sm remove-button',
                                            text: 'X',
                                            css: {
                                                position: 'absolute',
                                                top: '5px',
                                                right: '5px',
                                                zIndex: 10
                                            },
                                            click: function () {
                                                $('#confirmDeleteModal').modal('show');

                                                // Handle click on confirmation button
                                                $('#confirmDeleteBtn').on('click', function () {
                                                    // Close modal
                                                    $('#confirmDeleteModal').modal('hide');
                                                    fileWrapper.remove();
                                                    deleteFile(fileName);
                                                });
                                            }
                                        });

                                        // Append iframe (or img) and buttons to the wrapper
                                        fileWrapper.append(iframe);
                                        fileWrapper.append(removeButton);
                                        if (downloadButton) {
                                            fileWrapper.append(downloadButton);
                                        }

                                        // Append the wrapper to the container
                                        fileContainer.append(fileWrapper);

                                        // Show initial elements if necessary
                                        if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                            iframe.removeClass('d-none');
                                            removeButton.removeClass('d-none');
                                            if (downloadButton) {
                                                downloadButton.removeClass('d-none');
                                            }
                                        }
                                    }
                                });
                                // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                                //     var url = model.FileName;
                                //     window.open(url, '_blank');
                                // });
                                // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                                //     document.getElementById("pdf-iframe").classList.add("d-none");
                                //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                                //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                                // });
                            },
                            error: function (error) {
                                console.error("Error fetching data: " + error);
                            }
                        });
                    }
                }

                if ('@actionType' === "Copy") {
                    var id = @ViewBag.Id;
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetSalesReceiptDetails2Copy", "Sales")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#sales-id").val(model.Id);
                            $("#Customer_Delayed_Charge").val(model.CustomerId).trigger('change');
                            $("#WarehouseIdMain").val(model.WarehouseIdMain).trigger('change');
                            $("#customer-email").val(model.EmailId);
                            $("#invoice-no").val(model.SaleCode);

                            $("#MultiiCurrencyId").val(model.CurrencyId);
                            $("#CurrencyRate").val(model.CurrencyRate);

                            //$("#tags").val(model.Notes);
                            //var tagValues = model.SalesTags.map(function (salesTag) {
                            //    return salesTag.TagsId;
                            //});
                            var tagValues = (model.SalesTags ?? []).map(function (salesTag) {
                                return salesTag.TagsId;
                            });

                            $('#tagDropdown').val(tagValues).trigger('change');
                            $("#message-statement").val(model.MessageStatement);
                            $("#total").val(model.Total);
                            $("#shipping-amount").val(model.Shipping);
                            $("#shipping-tax").val(model.ShippingTax);
                            $("#AmountsAre").val(model.AmountsAre);
                            $("#start-date").val(formatDateToCustomString(new Date(model.SalesDate)));
                            initializeTabulator(model.Items);
                            initializeTaxData(model.SalesProductTax);
                            calculateSubtotal();
                            calculateTaxableSubtotal();
                            updateTotalForSalesOrder(model.Total);
                            // if (model.FileName != null && model.FileName !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            // //console.log("res.FilePath::", "../" + res.FilePath);
                            // $('#pdf-iframe').attr('src', "../" + model.FileName);
                            // //$('#pdf-iframe').attr('src', res.FilePath);
                            // $('#pdf-iframe').on('load', function () {
                            //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            // });
                            if (model.IsRecurring == true) {
                                GetRecurringDetails(model.Id)
                            }
                            var fileNames = model.FileName ? model.FileName.split(';') : [];

                            var fileContainer = $('#file-container');

                            // Clear any existing elements
                            fileContainer.empty();

                            fileNames.forEach(function (fileName, index) {
                                if (fileName) {
                                    // Determine file type based on extension
                                    var fileType = getFileType(fileName);
                                    var fileName2 = fileName.split('/').pop();

                                    var actualFileName = fileName2.match(/[^_]+$/)[0];
                                    // Wrapper div
                                    var fileWrapper = $('<div>', {
                                        class: 'file-wrapper col-md-3',
                                        css: {
                                            position: 'relative',
                                            marginBottom: '20px' // space between files
                                        }
                                    });

                                    // Create iframe for PDF and Excel files
                                    var iframe;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        iframe = $('<iframe>', {
                                            id: 'pdf-iframe-' + index,
                                            class: 'file-iframe',
                                            css: {
                                                width: '100%',
                                                height: '0',
                                                border: '1px solid #ccc',
                                                overflow: 'hidden'
                                            },
                                            //src: "../" + fileName
                                        });

                                        // Display filename as text overlay
                                        var filenameOverlay = $('<div>', {
                                            class: 'filename-overlay',
                                            css: {
                                                position: 'absolute',
                                                top: '0',
                                                left: '0',
                                                width: '100%',
                                                background: 'rgba(0, 0, 0, 0.5)',
                                                color: '#fff',
                                                padding: '5px',
                                                boxSizing: 'border-box',
                                                zIndex: '5'
                                            },
                                            text: fileName.split('/').pop() // Extract filename from path
                                        });

                                        // Append filename overlay to iframe container
                                        iframe.append(filenameOverlay);
                                    } else if (fileType === 'image') {
                                        // Create img element for image files
                                        iframe = $('<img>', {
                                            class: 'file-img',
                                            css: {
                                                width: '100%',
                                                height: 'auto',
                                                border: '1px solid #ccc',
                                                objectFit: 'contain' // Adjust as needed for image display
                                            },
                                            src: "../" + fileName
                                        });
                                    } else {
                                        // Handle unknown file types (optional)
                                        console.log("Unknown file type for fileName: " + fileName);
                                        return; // Skip processing this file
                                    }

                                    // Create download button for PDF and Excel files
                                    var downloadButton;
                                    if (fileType === 'pdf' || fileType === 'excel') {
                                        downloadButton = $('<a>', {
                                            class: 'btn btn-primary btn-sm download-button',
                                            text: actualFileName,
                                            href: "../" + fileName,
                                            download: fileName.split('/').pop() // Extract filename for download
                                        });
                                    }

                                    // Create remove button
                                    var removeButton = $('<button>', {
                                        class: 'btn btn-danger btn-sm remove-button',
                                        text: 'X',
                                        css: {
                                            position: 'absolute',
                                            top: '5px',
                                            right: '5px',
                                            zIndex: 10
                                        },
                                        click: function () {
                                            $('#confirmDeleteModal').modal('show');

                                            // Handle click on confirmation button
                                            $('#confirmDeleteBtn').on('click', function () {
                                                // Close modal
                                                $('#confirmDeleteModal').modal('hide');
                                                fileWrapper.remove();
                                                deleteFile(fileName);
                                            });
                                        }
                                    });

                                    // Append iframe (or img) and buttons to the wrapper
                                    fileWrapper.append(iframe);
                                    fileWrapper.append(removeButton);
                                    if (downloadButton) {
                                        fileWrapper.append(downloadButton);
                                    }

                                    // Append the wrapper to the container
                                    fileContainer.append(fileWrapper);

                                    // Show initial elements if necessary
                                    if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                        iframe.removeClass('d-none');
                                        removeButton.removeClass('d-none');
                                        if (downloadButton) {
                                            downloadButton.removeClass('d-none');
                                        }
                                    }
                                }
                            });
                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = model.FileName;
                            //     window.open(url, '_blank');
                            // });
                            // document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                            //     document.getElementById("pdf-iframe").classList.add("d-none");
                            //     document.getElementById("view-image-or-pdf").classList.add("d-none");
                            //     document.getElementById("remove-image-or-pdf").classList.add("d-none");
                            // });
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }
            }

            
            function initializeFiscalMonthForEdit(date, FiscalMonthId) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetFiscalMonthDateWise", "Accounts")',
                    data: { fiscalDate: date },
                    datatype: "Json",
                    success: function (data) {

                        if (data.length > 1) {
                            $("#FiscalMonthDiv").removeClass('d-none');
                        }
                        else {
                            $("#FiscalMonthDiv").addClass('d-none');
                        }
                        $('#FiscalMonthId').empty();
                        $.each(data, function (index, value) {
                            $('#FiscalMonthId').append('<option value="' + value.Id + '" >' + value.MonthName + '</option>');
                        });
                        console.log($('#FiscalMonthId').val());
                        $("#FiscalMonthId").val(FiscalMonthId).trigger('change');
                    }
                });
            }

            function LoadCustomerDetails(id, Container) {
                var billing = $('#' + Container);
                $.ajax({
                    url: '@Url.Action("GetCustomerDetails", "Sales")',
                    type: 'GET',
                    data: { id: id },
                    dataType: 'json',
                    success: function (data) {
                        console.log(data);
                        $("#customer-email").val(data.Email);
                        billing.val(data.BillingAddress);
                    },
                    error: function (error) {
                        console.error('Error fetching data:', error);
                    }
                });
            }

            function updateTotalForSalesOrder(data) {
                var subtotalText = document.getElementById("subtotal").textContent;
                var totalTaxText = document.getElementById("total-tax").textContent;
                var totalTaxValue = parseFloat(totalTaxText.replace("$", ""));
                var CurrRate = $("#CurrencyRate").val();
                document.getElementById("totalInBDT").textContent = (data * CurrRate).toFixed(4);

                document.getElementById("total").textContent = (data).toFixed(4);


                var subtotalValue = parseFloat(subtotalText.replace("$", ""));
                var totalTaxValue = parseFloat(totalTaxText.replace("$", ""));

                var totalshipment = data - subtotalValue - totalTaxValue;
                //$("#shipping-amount").val(totalshipment);
            }

            function formatDateToCustomString(inputDate) {
                const months = [
                    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                ];

                if (inputDate instanceof Date && !isNaN(inputDate)) {
                    const day = inputDate.getDate();
                    const monthIndex = inputDate.getMonth();
                    const year = inputDate.getFullYear();
                    const formattedDay = day < 10 ? `0${day}` : day;

                    const formattedDate = `${formattedDay}-${months[monthIndex]}-${year}`;
                    return formattedDate;
                } else {
                    return inputDate;
                }
            }

            function populateCreditNoteMasterData(data) {
                $("#sales-id").val(data.Id);
                $("#Customer_CreditNote").val(data.CustomerId).trigger('change');
                $("#WarehouseIdMain").val(data.WarehouseIdMain).trigger('change');
                $("#customer-email").val(data.EmailId);
                $("#billing-address-credit").val(data.PrimaryAddress);
                var startdate = formatDateToCustomDate(data.SalesDate);
                console.log(startdate);
                $("#start-date").val(startdate);
                //$("#tags").val(data.TrackingNo);

                //var tagValues = data.SalesTags.map(function (salesTag) {
                //                return salesTag.TagsId;
                //            });

                var tagValues = (data.SalesTags ?? []).map(function (salesTag) {
                    return salesTag.TagsId;
                });


                $('#tagDropdown').val(tagValues).trigger('change');
                $("#invoice-no").val(data.SalesCode);
                $("#message-invoice").val(data.MessageInvoice);
                $("#message-statement").val(data.MessageStatement);
                $("#amount").val(data.Total);
                $("#shipping-amount").val(data.Shipping);
                $("#shipping-tax").val(data.ShippingTax);
                $("#AmountsAre").val(data.AmountsAre);
                initializeFiscalMonthForEdit(model.SalesDate, model.FiscalMonthId);
                document.getElementById("tk-amount-refund").textContent = data.Total.toFixed(4);

                initializeTabulator(data.Items);
            }

            function formatDateToCustomDate(originalDate) {
                const months = [
                    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                ];

                const dateObj = new Date(originalDate);
                const day = dateObj.getDate();
                const month = months[dateObj.getMonth()];
                const year = dateObj.getFullYear();
                const formattedDay = day < 10 ? `0${day}` : day;

                return `${formattedDay}-${month}-${year}`;
            }

            var today = new Date();
            var day = today.getDate();
            var month = today.toLocaleString('default', { month: 'short' });
            var year = today.getFullYear();

            var formattedDay = (day < 10 ? '0' : '') + day;

            var formattedDate = formattedDay + '-' + month + '-' + year;

            // Set the formatted date as the value of the input field
            document.getElementById('start-date').value = formattedDate;

            $(function () {
                $("#start-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy",
                    onSelect: function (dateText, inst) {
                        getverifyFiscalMonth(dateText);
                    }
                }).attr('readonly', 'readonly');
                $("#end-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy"
                });
                $("#recurring-start-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy"
                });
                $("#adv-start-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy"
                });
                $("#recurring-end-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy"
                });
                $("#ship-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy"
                });
                $("#status-date").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy"
                });
            });

            function initializeFiscalMonth(date)
            {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetFiscalMonthDateWise", "Accounts")',
                    data: { fiscalDate: date },
                    datatype: "Json",
                    success: function (data) {

                        if (data.length > 1) {
                            $("#FiscalMonthDiv").removeClass('d-none');
                        }
                        else
                        {
                            $("#FiscalMonthDiv").addClass('d-none');
                        }
                        $('#FiscalMonthId').empty();
                        $.each(data, function (index, value) {
                            $('#FiscalMonthId').append('<option value="' + value.Id + '" >' + value.MonthName + '</option>');
                        });
                        console.log($('#FiscalMonthId').val());
                    }
                });
            }

            function getverifyFiscalMonth(selectedDate) {

                $.ajax({
                    url: '@Url.Action("VerifyFiscalMonth", "Accounts")',
                    data: { fiscalDate: selectedDate },
                    type: 'GET',
                    success: function (result) {

                        if(result.IsLocked == true)
                        {
                            //$('#VoucherDate').val(result.data);
                            // var formattedDate = moment(result.data).format('DD-MMM-YYYY');
                            // $('#start-date').val(formattedDate);
                            // $('#start-date-validation').text('The fiscal month you choosed is closed');

                            if (result.data == null) {
                                $('#start-date-validation').text('Open a fiscal month.');
                                $('#start-date').val('');
                            }
                            else {
                                //$('#VoucherDate').val(result.data);
                                var formattedDate = moment(result.data).format('DD-MMM-YY');
                                $('#start-date').val(formattedDate);
                                $('#start-date-validation').text('The fiscal month you choosed is closed');
                                initializeFiscalMonth(result.data);
                            }
                        }
                        else
                        {
                            $('#start-date-validation').text('');
                            initializeFiscalMonth($('#start-date').val());
                        }
                    },
                    error: function (error) {
                        console.log('Error fetching group list:', error);
                    }
                });
            }

            $('#file-drop-area').on('click', function (e) {
                e.preventDefault();
                $('#image-uploadify').click();
            });

            if ('@transactionType' === "Invoice") {
                getTermsDropdown();
            }
            $("#offcanvasRightRate").on("hidden.bs.offcanvas", function () {
                closeOffcanvas();
            });
            function closeOffcanvas() {
                clearDynamicDivs();
            }
            var dynamicDivs = [];
            function clearDynamicDivs() {
                for (var i = 0; i < dynamicDivs.length; i++) {
                    dynamicDivs[i].remove(); // Remove each dynamically created div
                }
                dynamicDivs = []; // Clear the tracking array
            }
            $("#addMore").on("click", function () {
                //addNewDiv();
            });

            $('#image-uploadify').on('change', function () {
                var files = $(this)[0].files;

                updateSelectedFilesList(files);

                for (var i = 0; i < files.length; i++) {
                    var file = files[i];

                    if (file.size > 20 * 1024 * 1024) {
                        alert('File "' + file.name + '" exceeds the maximum allowed size of 20MB.');
                        $(this).val('');
                        updateSelectedFilesList([]);
                        return;
                    }

                }
            });

            $('#file-drop-area').on('dragover', function (e) {
                e.preventDefault();
                $(this).addClass('dragover');
            });

            $('#file-drop-area').on('dragleave drop', function (e) {
                e.preventDefault();
                $(this).removeClass('dragover');
            });

            $('#file-drop-area').on('drop', function (e) {
                e.preventDefault();
                $(this).removeClass('dragover');
                var files = e.originalEvent.dataTransfer.files;
                $('#image-uploadify')[0].files = files;
                updateSelectedFilesList(files);
            });

            function updateSelectedFilesList(files) {
                var filesList = $('#selected-files-list');
                filesList.empty();

                if (files.length > 0) {
                    for (var i = 0; i < files.length; i++) {
                        var listItem = $('<li>').text(files[i].name);
                        filesList.append(listItem);
                    }

                    $('#file-drop-area p').text(''); // Clear the original message
                } else {
                    $('#file-drop-area p').text('Drag and drop files here or click to select files.');
                }
            }

        });

        function changeEstimateStatus(value) {

            $("#estimate-status").text(value);

            if (value == 'Accepted') {
                $("#accepted").removeClass("d-none");
                $("#rejected").addClass("d-none");
                $("#pending").addClass("d-none");
                $("#closed").addClass("d-none");

            }
            else
                if (value == 'Pending') {
                    $("#accepted").addClass("d-none");
                    $("#rejected").addClass("d-none");
                    $("#pending").removeClass("d-none");
                    $("#closed").addClass("d-none");
                }
                else
                    if (value == 'Rejected') {
                        $("#accepted").addClass("d-none");
                        $("#rejected").removeClass("d-none");
                        $("#pending").addClass("d-none");
                        $("#closed").addClass("d-none");
                    }
                    else
                        if (value == 'Closed') {
                            $("#accepted").addClass("d-none");
                            $("#rejected").addClass("d-none");
                            $("#pending").addClass("d-none");
                            $("#closed").removeClass("d-none");
                        }
        }

        function taxDropdownChange(selectedValue) {
            const masterTaxIds = [];
            const masterAmounts = [];
            const masterProducts = [];
            const rows = table.getRows(); // Assuming you have a reference to the Tabulator table

            rows.forEach(function (row) {
                const masterTaxId = row.getData().MasterTaxId;
                const masterAmount = row.getData().Price;
                const masterProduct = row.getData().ProductId;
                if (masterTaxId != undefined) {
                    masterTaxIds.push(masterTaxId);
                    masterAmounts.push(masterAmount);
                    masterProducts.push(masterProduct);
                }
            });


            if (masterTaxIds.length > 0) {
                const taxString = masterTaxIds.join(',');
                const amountString = masterAmounts.join(',');
                const productString = masterProducts.join(',');
                var currentData = table.getData();

                if (selectedValue !== 'outscope') {
                    $.ajax({
                        url: '@Url.Action("ProductWiseChangeRate", "Sales")',
                        type: 'GET',
                        data: { taxes: taxString, amounts: amountString, products: productString, criteria: selectedValue },
                        success: function (response) {
                            if (response.Success === 1) {
                                var updatedData = currentData.map(function (row, index) {
                                    return {
                                        ...row,
                                        Price: response.Data[index],
                                        SecondaryPrice: response.Data[index]
                                    };
                                });

                                table.setData(updatedData);
                                table.redraw(true);
                                setTaxAmountForTaxFilter();
                                calculateSubtotal();
                                calculateTaxableSubtotal();
                                updateTotal();
                            } else {
                                console.error('Error updating rates:', response.Ex);
                            }
                        },
                        error: function (error) {
                            console.error(error);
                        }
                    });
                }
                else {
                    var updatedData = currentData.map(function (row, index) {
                        return {
                            ...row,
                            MasterTaxId: undefined,
                            MasterTaxName: undefined
                        };
                    });

                    table.setData(updatedData);
                    table.redraw(true);
                    setTaxAmountForTaxFilter();
                    calculateSubtotal();
                    table1.clearData();
                    calculateTaxableSubtotal();
                    updateTotalAmount();
                    updateTotal();

                }

            }


        }

        function handleAddClick(invoiceId) {
            var rows = table2.getRows();
            console.log('Total rows:', rows.length);

            rows.forEach(function (row, index) {
                console.log('Row SalesId:', row.getData().SalesId);
                if (row.getData().SalesId === invoiceId) {
                    console.log('Deleting row with SalesId:', invoiceId);
                    row.delete();
                }
            });
            // Handle the click event and use invoiceId
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetInvoiceDetailsForCredit", "Sales")',
                data: { id: invoiceId },
                dataType: "json",
                success: function (response) {
                    if (response.Success === 1) {
                        console.log(response.data);
                        mergeTabulator(response.data.Items);
                        //initializeTaxData(response.data.SalesProductTax);
                        setTaxAmount();
                        calculateSubtotal();
                        calculateTaxableSubtotal();
                        updateTotal();
                    }
                },
                error: function (error) {
                    console.error("Error fetching data: " + error);
                }
            });
        }

        function gotoInvoiceList() {
            var myDiv = document.getElementById("top-row");

            if (myDiv.classList.contains("d-none")) {
                window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
            }
            else {
                window.location.href = '@Url.Action("InvoiceList", "Sales")';
            }
            // var editUrl = '@Url.Action("InvoiceList", "Sales")';
            // window.location.href = editUrl;
        }
        function getTermsDropdown() {
            $.ajax({
                url: '@Url.Action("TermsList", "Sales")',//url: "https://www.pqstec.com/InvoiceApps/values/GetCustomerDropdown",
                success: function (data) {

                    console.log(data);
                    const select = document.querySelector('#terms');

                    while (select.options.length > 2) {
                        select.options[2].remove();
                    }

                    for (var i = 0; i < data.length; i++) {
                        const option = document.createElement('option');
                        option.value = data[i].Id;
                        option.text = data[i].TermName;
                        option.setAttribute('DueInFixedDays', data[i].DueInFixedDays);
                        select.appendChild(option);
                    }


                }
            });
        }
        // $('#terms').change(function () {
        //     if ($(this).val() !== "add-new") {
        //         // Get the selected option's value, text, and data attributes
        //         const selectedOption = $(this).find('option:selected');
        //         const selectedValue = selectedOption.val();
        //         const selectedText = selectedOption.text();
        //         // Retrieve the DueInFixedDays attribute value
        //         const dueInFixedDays = selectedOption.attr('DueInFixedDays');

        //         // You can now use these values as needed
        //         console.log('Selected Value:', selectedValue);
        //         console.log('Selected Text:', selectedText);
        //         console.log('DueInFixedDays Attribute:', dueInFixedDays);

        //         //alert('hi');
        //     }
        // });
        $('#terms').change(function () {
            var Itemdata = $(this).val();

            if ($(this).val() === "add-new") {
                $("#exampleModal").modal("show");
            }
            const selectedOption = $(this).find('option:selected');
            const dueInFixedDays = selectedOption.attr('DueInFixedDays');

            if ($('#start-date').val() === "") {
                alert("First select the Invoice Date.");
                return; 
            }

            if ($(this).find('option:selected').text() == 'Select an option') {
                const billDateValue = $('#start-date').val();
                $('#end-date').val(billDateValue);
            }


            if (dueInFixedDays !== undefined) {
                const billDateValue = $('#start-date').val(); // Get the "Bill Date" value
                if(billDateValue !== "")
                {
                    const billDate = new Date(billDateValue); // Convert it to a Date object

                    const dueDate = new Date(billDate.getTime() + (dueInFixedDays * 24 * 60 * 60 * 1000));

                    const day = dueDate.getDate().toString().padStart(2, '0');
                    const month = dueDate.toLocaleString('default', { month: 'short' });
                    const year = dueDate.getFullYear();

                    const formattedDueDate = `${day}-${month}-${year}`;
                    $('#end-date').val(formattedDueDate);
                }
            }
        });


        $("#tax-list").on("change", function () {
            // Check if the selected option is the "Add New" option
            if ($(this).val() === "111111") {
                $("#offcanvasRightRate").offcanvas("show");
            }
            else {
                if ($(this).val() != "0") {
                    fetchAndUpdateRate($(this).val());
                }
            }
        });

        function fetchAndUpdateRate(agentId) {
            var subtotalElement = document.getElementById("taxable-subtotal");
            var subtotalText = subtotalElement.textContent;
            var amount = parseFloat(subtotalText.replace("$", ""));


            $.ajax({
                type: "GET",
                url: '@Url.Action("RateCount", "Sales")',
                data: { id: agentId, amount: amount },
                dataType: "json",
                success: function (data) {
                    //$("#total-tax").text("$ " + data.toFixed(4));
                    updateTotal();
                },
                error: function (error) {
                    console.error("Error fetching data: " + error);
                }
            });
        }
        function formatCurrency(value) {

            if (value === undefined) {
                return '0.00';
            }
            return parseFloat(value).toFixed(4).replace(/\d(?=(\d{3})+\.)/g, '$&,');
        }
        // Function to calculate and update the total
        function updateTotal() {
            var subtotalText = document.getElementById("subtotal").textContent;
            var totalTaxText = document.getElementById("total-tax").textContent;
            var shippingAmount = parseFloat(document.getElementById("shipping-amount").value);
            var shippingTax = parseFloat(document.getElementById("shipping-tax").value);

            // Extract numeric values from the strings and calculate the total
            var subtotalValue = parseFloat(subtotalText.replace("$", ""));
            var totalTaxValue = parseFloat(totalTaxText.replace("$", ""));
            var total = subtotalValue + totalTaxValue + shippingAmount + shippingTax;
            var CurrRate = $("#CurrencyRate").val();

            // Update the "total" element with the calculated total value
            document.getElementById("total").textContent = formatCurrency(total);
            document.getElementById("totalInBDT").textContent = formatCurrency(total * CurrRate);
            if ('@transactionType' === "Credit-note") {
                document.getElementById("tk-amount-refund").textContent = formatCurrency(total);
            }
        }

        //if ('@transactionType' != "Delayed_Charge") {
        //    document.getElementById("shipping-amount").addEventListener("input", updateTotal);
        //    document.getElementById("shipping-tax").addEventListener("input", updateTotal);

        //    updateTotal();
        //}
        document.getElementById("shipping-amount").addEventListener("input", updateTotal);
        document.getElementById("shipping-tax").addEventListener("input", updateTotal);

        // Initial calculation


        $("#saveTermButton").click(function () {
            Saveproductinfo();
            modalClear();
            getTermsDropdown();
        });

        function Saveproductinfo() {
            var TermName = $("#termName").val();
            var DueInFixedDays = $("#dueInDays").val();
            var DueByDayOfMonth = $("#dueByDay").val();
            var DueNextMonthWithinDays = $("#dueNextMonthDays").val();


            var AccountHead = {
                TermName: TermName,
                DueInFixedDays: DueInFixedDays,
                DueByDayOfMonth: DueByDayOfMonth,
                DueNextMonthWithinDays: DueNextMonthWithinDays

            }
            console.log(AccountHead);
            $.ajax({
                url: '@Url.Action("AddTerms", "Sales")',
                data: { model: AccountHead }, //use id here
                //data: JSON.stringify(purchasesmain),
                type: 'POST',
                async: true,
                //contentType: 'application/json;',
                dataType: 'json',
                success: function (result) {
                    if (result.success == "1") {
                        alert("Saved");
                        $('#exampleModal').modal('hide');
                        getTermsDropdown();
                        //$('#terms').val("0");

                        var receivedId = result.Id;
                        $('#terms').val(receivedId).trigger('change');

                    }
                    if (result.success == "2") {
                        $('#termNameValidation').text("Name Must Be Unique");
                    }

                },
                error: function () {
                    alert("Failed");

                }
            });
        }

        function modalClear() {
            $("#termName").val('');
            $("#dueInDays").val('');
            $("#dueByDay").val('');
            $("#dueNextMonthDays").val('');
            $("#dueByDaysRadio").val('');
            $("#dueInDaysRadio").val('');
        }

        var selectElement = document.getElementById("terms");

        if ('@transactionType' === "Invoice") {
            selectElement.addEventListener("click", getTermsDropdown);

            const dueInDaysRadio = document.getElementById("dueInDaysRadio");
            const dueByDaysRadio = document.getElementById("dueByDaysRadio");

            dueInDaysRadio.addEventListener("change", () => {
                if (dueInDaysRadio.checked) {
                    $("#dueInDays").prop("disabled", false)
                    $("#dueByDay").prop("disabled", true)
                    $("#dueNextMonthDays").prop("disabled", true)
                    dueByDaysRadio.checked = false;
                }
            });

            dueByDaysRadio.addEventListener("change", () => {
                if (dueByDaysRadio.checked) {
                    $("#dueInDays").prop("disabled", true)
                    $("#dueByDay").prop("disabled", false)
                    $("#dueNextMonthDays").prop("disabled", false)
                    dueInDaysRadio.checked = false;
                }
            });
        }



        var selectOptions = @Html.Raw(Json.Serialize(ViewBag.ProductList));
        var selectedTax = @Html.Raw(Json.Serialize(ViewBag.TaxList));
        var selectedLocation = @Html.Raw(Json.Serialize(ViewBag.WarehouseIdMain));


        //Build Tabulator
        var initialData = [
            {
                "SLNo": "1",
                "Id": "0",
                "SERVICE DATE": "",
                "PRODUCT": "",
                "HiddenValue": "",
                "DESCRIPTION": "",
                "QTY": "",
                "RATE": "",
                "CostPrice": 0.00,
                "AMOUNT": "",
                "TAX": ""
            }
        ];

        async function getRateForTaxId(rowData, taxId) {
            try {
                var amountare = $("#AmountsAre").val();
                var apiUrl = '@Url.Action("ProductWiseChangeRate", "Sales")' + '?taxes=' + rowData.MasterTaxId + '&amounts=' + rowData.SecondaryPrice + '&products=' +
                    rowData.ProductId + '&criteria=' + amountare;

                var response = await fetch(apiUrl);

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                var data = await response.json();
                var currencyRate = $("#CurrencyRate").val();
                if (currencyRate != 1) {
                    data = data / currencyRate;
                }
                if((rowData.PrimaryUnitId !== rowData.SecondaryUnitId) && (rowData.SecondaryUnitId !== undefined))
                {
                    data.Data[0] = data.Data[0] / rowData.ConversionRate;
                }
                return data || 0;
            } catch (error) {
                console.error('Error fetching rate:', error);
                return 0;
            }
        }

        function unitEditor(cell, onRendered, success, cancel, editorParams) {
            var editor = document.createElement("select");
            editor.setAttribute("class", "select2");
            editor.style.width = "100%";

            var rowData = cell.getRow().getData();

            onRendered(function () {
                $(editor).select2({
                    closeOnSelect: false,
                    ajax: {
                        url: '@Url.Action("GetUnitConversion", "Sales")',
                        dataType: 'json',
                        data: function (params) {
                            return {
                                primaryUnitId: rowData.PrimaryUnitId,
                                productId: rowData.ProductId,
                                dropdownSearch: params.term,
                                pageNo: params.page || 1
                            };
                        },
                        processResults: function (data) {
                            var options = data.map(function (item) {
                                return {
                                    id: item.Value,
                                    text: item.Text,
                                    ConversionRate: item.ConversionRate
                                };
                            });
                            return { results: options };
                        },
                        cache: false
                    }
                });
                editor.style.css = "100%";
                $(editor).select2('open');
            });

            function successFunc(e) {
                var data = e.params.data;
                var currencyrate = $("#CurrencyRate").val();
                cell.getRow().update({
                    "SecondaryUnitId": data.id,
                    "Unit": data.text,
                    "ConversionRate": data.ConversionRate,
                    "Price": rowData.DefaultPrice / currencyrate,
                    "SecondaryPrice": (rowData.PrimaryUnitId !== data.id) ? (rowData.DefaultPrice / (data.ConversionRate * currencyrate)).toFixed(2) : rowData.DefaultPrice,
                    "Amount": (rowData.PrimaryUnitId !== data.id) ? (rowData.DefaultPrice / (data.ConversionRate * currencyrate)).toFixed(2) : rowData.DefaultPrice,
                    "Quantity": (rowData.PrimaryUnitId !== data.id) ? (1 / data.ConversionRate).toFixed(2) : 1,
                });
                success(data.text);
                $(editor).select2('close');
            }

            function DestroyFunc() {
                cancel();
                cell.navigateRight();
            }

            $(editor).on("select2:select", successFunc);
            $(editor).on("select2:close", DestroyFunc);

            return editor;
        }
        function productEditor(cell, onRendered, success, cancel, editorParams) {

            //create and style editor
            var editor = document.createElement("select");

            editor.setAttribute("class", "select2");
            //editor.setAttribute("name", "favcolor[]");
            //editor.setAttribute("onchange", "successFunc()");
            editor.setAttribute("id", "p-" + cell.getRow().getPosition());

            //create and style input
            editor.style.width = "100%";

            var warehouseId = $("#WarehouseIdMain").val();

            onRendered(function () {
                $(editor).select2({
                    closeOnSelect: false,
                    // data: colorsToAccessSelect,
                    ajax: {
                        delay: 500,
                        // url: '@Url.Action("ProductSearch", "Accounts")',
                        url: '@Url.Action("GetProductSearchList", "Admin")',
                        dataType: 'json',
                        data: function (params) {
                            var query = {
                                dropdownSearch: params.term,
                                pageNo: params.page || 1,
                                pageSize: 20,
                                Warehouse: warehouseId
                            }

                            // Query parameters will be ?search=[term]&page=[page]
                            return query;
                        },
                        processResults: function (data) {

                            let gropus = [];
                            let option = []
                            for (let i in data.ProductList) {
                                if (!gropus.includes(data.ProductList[i].CategoryName)) {
                                    gropus.push(data.ProductList[i].CategoryName);
                                    let child = data.ProductList.filter(f => f.CategoryName == data.ProductList[i].CategoryName).map(m => {
                                        return {
                                            id: m.Id,
                                            text: m.ProductName,
                                            CostPrice: m.CostPrice,
                                            Price: m.Price,
                                            UnitId: m.UnitId,
                                            Unit: m.Unit
                                        }
                                    });
                                    option.push({
                                        text: data.ProductList[i].CategoryName,
                                        children: child
                                    });



                                }
                            }



                            return {
                                results: option
                            };
                        },
                        cache: false
                    },


                });
                //editor.focus();
                editor.style.css = "100%";
                $(editor).select2('open');
                var ll = $("[aria-controls='select2-p-" + cell.getRow().getPosition() + "-results']");
                ll[0].focus();

            });
            function successFunc(e) {
                var data = e.params.data;
                console.log(data);
                cell.getRow().update({ 
                    "ProductId": editor.value, 
                    "productname": data.text, 
                    "Price": data.Price, 
                    "SecondaryPrice": data.Price,
                    "DefaultPrice": data.Price,
                    "Rate": data.Price, 
                    "CostPrice": data.CostPrice, 
                    "PurchaseAmount": data.costPrice, 
                    "Amount": data.Price, 
                    "Quantity": 1, 
                    "PrimaryUnitId": data.UnitId, 
                    "InputQuantity": 1, 
                    "SecondaryUnitId": data.UnitId, 
                    "Unit": data.Unit });

                success(data.text);
                $(editor).select2('close');
                //$(editor).trigger('select2:close');
                //cell.getRow().update({ "Productid": editor.value });

                // console.log(table.getData());
                //cancel();

            }
            $(editor).on("select2:select", successFunc);
            $(editor).on("select2:close", DestroyFunc);

            function DestroyFunc() {

                cancel();

                cell.navigateRight();
            }
            return editor;
        }

        var columns = [
            // { title: "SERVICE DATE", field: "SERVICE DATE", width: 200, editor: "input" },
            {
                headerSort: false,
                field: "drag",
                frozen: true,
                formatter: function (cell, formatterParams) {
                    return "<i class='fas fa-bars drag-icon'></i>";
                },
                width: 30,
                headerSort: false,
                rowHandle: true,


            },
            { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
            { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: 5, bottomCalc: "count", hozAlign: "right" },

            {
                title: "SERVICE DATE",
                field: "ServiceDate",
                //width: 150,
                editor: "input",
                editorParams: {
                    dateFormat: "d-M-Y",  
                },
                cellEdited: function (cell) { 
                    cell.getRow().update({ "ServiceDate": cell.getValue() });
                },
                editor: function (cell, onRendered, success, cancel, editorParams) {
                     
                    var input = document.createElement("input");
                    input.type = "text";
                    input.style.width = "100%";
                    input.value = cell.getValue() || ""; // Set the initial value to an empty string
                     
                    var flatpickrInstance = flatpickr(input, editorParams);
                     
                    flatpickrInstance.config.onClose.push(function (selectedDates, dateStr) {
                        cell.setValue(dateStr);
                        success(dateStr);
                    });
                     
                    onRendered(function () {
                        input.focus();
                    });

                    return input;
                },
            },


            {
                title: "PRODUCT/SERVICE",
                field: "Name",
                //width: 200,
                hozAlign: "center",
                sorter: "number",
                editor: productEditor,
                // editorParams: {
                //     values: selectOptions.map(option => option.Text),
                // },
                cellEdited: function (cell) {
                    // Update the hidden column ("HiddenValue") with the selected value
                    var rowData = cell.getRow().getData();
                    if (rowData.ServiceDate === undefined) {
                        rowData.ServiceDate = moment().format('DD-MMM-YYYY');
                        cell.getRow().update({ ServiceDate: rowData.ServiceDate });
                    }
                    var selectedText = cell.getValue();
                    var selectedValue = selectOptions.find(option => option.Text === selectedText);
                    if (selectedValue) {
                        cell.getRow().update({ ProductId: selectedValue.Value });

                        var productId = selectedValue.Value;
                        getPriceForProductId(productId, function (price, costprice, defaultprice, unitId) {
                            // Update the Price field in the row with the fetched price
                            cell.getRow().update({ SecondaryPrice: price, Price: price, CostPrice: costprice, Quantity: 1, Amount: price, DefaultPrice: defaultprice, PrimaryUnitId: unitId });
                        });
                    }
                },
            },
            {
                title: "Hidden Value",
                field: "ProductId",
                visible: false,
                editor: "input",
            },


            { title: "DESCRIPTION", field: "Description", width: 180, editor: "input" },
            {
                title: "Primary Unit Id",
                field: "PrimaryUnitId",
                visible: false,
                editor: "input",
            },
            {
                title: "Unit",
                field: "Unit",
                headerHozAlign: "center",
                hozAlign: "center",
                sorter: "number",
                editor: unitEditor,
            },
            {
                title: "Secondary Unit Id",
                field: "SecondaryUnitId",
                visible: false,
                editor: "input",
            },
            {
                title: "Location<span style=\"color: red; \">*</span>",
                titleFormatter: "html",
                field: "WHName",
                //width: 120,
                hozAlign: "center",
                sorter: "number",
                editor: "select",
                editorParams: {
                    values: selectedLocation.map(option => option.Text),
                },
                cellEdited: function (cell) {
                    var selectedText = cell.getValue();
                    var selectedValue = selectedLocation.find(option => option.Text === selectedText);
                    if (selectedValue) {
                        cell.getRow().update({ WarehouseId: selectedValue.Value });
                    }
                    cell.navigateRight();
                },
                visible: '@transactionType' !== "Estimate"
            },
            {
                title: "Hidden Value",
                field: "WarehouseId",
                visible: false,
                editor: "input",
            },
            {
                title: "QTY", field: "Quantity", hozAlign: "center", headerHozAlign: "center", editor: "input", bottomCalc: "sum", visible: false
            },
            
            {
                title: "Quantity",
                field: "InputQuantity",
                visible: true,
                editor: "input", bottomCalc: "sum", hozAlign: "center", headerHozAlign: "center",
                cellEdited: function (cell, formatterParams) {
                    var rowData = cell.getRow().getData();
                    if ((rowData.PrimaryUnitId === rowData.SecondaryUnitId) || (rowData.SecondaryUnitId === undefined)) {
                        var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(4);
                        cell.getRow().update({ Quantity: rowData.InputQuantity, Amount: amount });
                    }
                    else 
                    { 
                        var conversionRate = rowData.ConversionRate;
                        var costprice = (rowData.CostPrice/ conversionRate).toFixed(4);
                        //var price = (rowData.Price/ conversionRate).toFixed(2);
                        //var defaultPrice = (rowData.DefaultPrice/ conversionRate).toFixed(4);
                        var qty = (rowData.InputQuantity/ conversionRate).toFixed(4);
                        var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(4);
                        cell.getRow().update({ Quantity: qty,  Amount: amount});
                    }
                },
            },
            //{ title: "RATE", field: "Price"},
            {
                title: "RATE",
                field: "SecondaryPrice",
                headerHozAlign: "center",
                hozAlign: "center",
                visible: '@transactionType' !== "Issue",
                //width: 180,
                editor: "input",
                formatter: function (cell, formatterParams) {
                    // Format the Price column as currency
                    return formatCurrency(cell.getValue());
                },
                cellEdited: function (cell) {
                    var selectedvalue = cell.getValue();
                    var currencyRate = $("#CurrencyRate").val();
                    if (currencyRate == "" || currencyRate == undefined) {
                        currencyRate = 1;
                    }
                    cell.getRow().update({ DefaultPrice: selectedvalue * currencyRate, Price: selectedvalue });
                },
            },
            {
                title: "RATE",
                field: "Price",
                headerHozAlign: "center",
                hozAlign: "center",
                visible: false,
                //width: 180,
                editor: "input",
                // formatter: function (cell, formatterParams) {
                //     // Format the Price column as currency
                //     return formatCurrency(cell.getValue());
                // },
                // cellEdited: function (cell) {
                //     var selectedvalue = cell.getValue();
                //     var currencyRate = $("#CurrencyRate").val();
                //     if (currencyRate == "" || currencyRate == undefined) {
                //         currencyRate = 1;
                //     }
                //     cell.getRow().update({ DefaultPrice: selectedvalue * currencyRate });
                // },
            },
            {
                title: "DefaultPrice",
                field: "DefaultPrice",
                headerHozAlign: "center",
                hozAlign: "center",
                //width: 160,
                editor: "input",
                visible: false,
            },
            {
                title: "Cost Price",
                field: "CostPrice",
                headerHozAlign: "center",
                hozAlign: "right",
                //width: 160,
                editor: "number",
                visible: false,
                formatter: function (cell, formatterParams) {
                    // Format the Price column as currency
                    return formatCurrency(cell.getValue());
                },
            },
            {
                title: "Discount",
                field: "IndDiscount",
                headerHozAlign: "center",
                hozAlign: "center",
                sorter: "date",
                editor: "input",                
                visible: '@transactionType' !== "Issue",
                formatter: function (cell, formatterParams) {
                    var selectedvalue = cell.getValue();
                    if (typeof selectedvalue !== "string" && selectedvalue !== undefined) {
                        selectedvalue = selectedvalue.toString();
                    }

                    if (selectedvalue !== undefined && selectedvalue !== null) {
                        var rowData = cell.getRow().getData();
                        var qty = parseFloat(rowData.Quantity) || 0;
                        var rate = parseFloat(rowData.SecondaryPrice) || 0;
                        var amount = qty * rate;
                        var temp = 0;
                        

                        if (selectedvalue.endsWith('%') && /^\d+$/.test(selectedvalue.slice(0, -1))) {
                            temp = parseFloat(selectedvalue.slice(0, -1));
                            temp = (temp / 100) * amount;
                            var updatedAmount = (amount - temp).toString();
                            cell.getRow().update({ Amount: updatedAmount });
                            temp = temp.toString();
                            
                            cell.getRow().update({ IndDiscount: formatCurrency(temp) });
                            return formatCurrency(temp);
                        }
                        else {
                            cell.getRow().update({ Amount: amount - parseFloat(selectedvalue), IndDiscount: formatCurrency(selectedvalue) });
                            return formatCurrency(selectedvalue);
                        }
                        
                        
                    } else {
                        
                       //return ""; // Or you can return any default value or handle it differently
                        cell.getRow().update({ IndDiscount: '0' }); // Set IndDiscount to 0 if undefined or null
                        return formatCurrency(0);
                    }
                },
                cellEdited: function (cell) {
                    // Your cellEdited function logic
                }
            },

            {
                title: "AMOUNT",
                field: "Amount",
                //width: 180,
                headerHozAlign: "center",
                hozAlign: "center",
                sorter: "date",
                visible: '@transactionType' !== "Issue",
                formatter: function (cell, formatterParams) {
                    var rowData = cell.getRow().getData();
                    var qty = parseFloat(rowData.InputQuantity) || 0;
                    var rate = parseFloat(rowData.SecondaryPrice) || 0;
                    var discount = rowData.IndDiscount || '0';
                    var amount = qty * rate;
                    var temp = 0;
                    var amount2 = amount - parseFloat(discount);

                    if (discount.endsWith('%') && /^\d+$/.test(discount.slice(0, -1))) {
                        temp = parseFloat(discount.slice(0, -1));
                        temp = (temp / 100) * amount;
                        var updatedAmount = (amount - temp).toString();
                        return formatCurrency(updatedAmount);
                    }

                    calculateSubtotal();
                    return formatCurrency(amount2);
                },
            },
            {
                title: "TAX",
                field: "TAX",
                visible: false,
                hozAlign: "center",
                //width: 80,
                editor: "tickCross", // Use the "tickCross" editor to display a checkbox
                editorParams: {
                    tristate: true, // Allow for a third state (null) to represent an undefined value
                },
                formatter: "tickCross", // Display the checkbox in the grid
                formatterParams: {
                    allowEmpty: true, // Display an empty cell when the value is null
                },
            },
            {
                title: "TAX",
                field: "MasterTaxName",
                //width: 130,
                headerHozAlign: "center",
                hozAlign: "center",
                sorter: "number",
                editor: "select",
                visible: '@transactionType' !== "Issue",
                editorParams: {
                    values: selectedTax.map(option => option.Text),
                },
                cellEdited: async function (cell) {
                    // Update the hidden column ("HiddenValue") with the selected value
                    var selectedText = cell.getValue();
                    var selectedValue = selectedTax.find(option => option.Text === selectedText);
                    if (selectedValue) {
                        cell.getRow().update({ MasterTaxId: selectedValue.Value });
                        var taxId = selectedValue.Value;
                        var amountare = $("#AmountsAre").val();
                        if (amountare !== 'outscope') {
                            var qty = cell.getRow().getData().InputQuantity;
                            var rate = await getRateForTaxId(cell.getRow().getData(), taxId);
                            cell.getRow().update({ SecondaryPrice: rate.Data[0], Amount: rate.Data[0] * qty });
                        }
                    }
                },
            },
            {
                title: "Hidden Tax",
                field: "MasterTaxId",
                visible: false,
                editor: "input",
            },
            {
                title: "Hidden Items",
                field: "PurchaseItemsId",
                visible: false,
                editor: "input",
            },
            {
                title: "ConversionRate",
                field: "ConversionRate",
                visible: false,
                editor: "input",
            }

        ];


        var deleteColumn = {
            title: "",
            field: "Delete",
            movable: false,
            formatter: function (cell, formatterParams) {
                return "<i class='fas fa-trash-alt delete-icon'></i>";
            },
            width: 30,
            headerSort: false,
            cellClick: function (e, cell) {
                var rowData = cell.getRow().getData();
                var row = cell.getRow();
                deleteRow(row);
            }
        };

        columns.push(deleteColumn);

        var table = new Tabulator("#example-table", {
            height: "311px",
            layout: "fitColumns",
            addRowPos: "bottom",
            columns: columns,
            data: initialData,
        });

       
        function initializeTabulator(data) {
            if (table) {
                data.forEach(function (row, index) {
                    var dateObj = new Date(row.ServiceDate);

                    row.ServiceDate = dateObj.getDate() + '-' +
                        new Intl.DateTimeFormat('en-us', { month: 'short' }).format(dateObj) + '-' +
                        dateObj.getFullYear();

                    row.SLNo = index + 1;
                });
                table.setData(data);
            } else {
                table = new Tabulator("#example-table", {
                    height: "311px",
                    layout: "fitColumns",
                    addRowPos: "bottom",
                    columns: columns,
                    data: data,
                });
            }
        }
        function mergeTabulator(data) {
            var lastSLNo = 0;

            // Get the last SLNo in the existing table
            if (table) {
                var rows = table.getRows();
                if (rows.length > 0) {
                    lastSLNo = rows[rows.length - 1].getData().SLNo;
                }
            }

            data.forEach(function (row, index) {
                var dateObj = new Date(row.ServiceDate);

                var price = row.Price;

                row.ServiceDate = dateObj.getDate() + '-' +
                    new Intl.DateTimeFormat('en-us', { month: 'short' }).format(dateObj) + '-' +
                    dateObj.getFullYear();

                row.SLNo = lastSLNo + index + 1;

                // var currencyRate = $("#CurrencyRate").val();
                // if(currencyRate != 1 && currencyRate != "")
                // {
                //    row.Price = price / currencyRate;
                // }
            });

            if (table) {
                table.addData(data);
            } else {
                table = new Tabulator("#example-table", {
                    height: "311px",
                    layout: "fitColumns",
                    addRowPos: "bottom",
                    columns: columns,
                    data: data,
                });
            }
        }



        function deleteRow(row) {
            calculateSubtotal();
            calculateTaxableSubtotal();
            updateTotal();
            // Show a confirmation dialog and delete the row if confirmed
            if (confirm("Are you sure you want to delete this row?")) {
                table.deleteRow(row);
                console.log("Row deleted successfully.");
                calculateSubtotal();
                calculateTaxableSubtotal();
                updateTotal();
                renumberRows();
            }

        }

        function getPriceForProductId(productId, callback) {
            $.ajax({
                type: "get",
                url: '@Url.Action("ProductPrice", "Sales")',
                data: { ProductId: productId },

                success: function (response) {
                    // Assuming the response contains the price, you can extract it here
                    var price = response.price;
                    var defaultprice = response.price;
                    var costprice = response.costprice;
                    var unitId = response.unitId;
                    var currencyRate = $("#CurrencyRate").val();
                    if (currencyRate != 1 && currencyRate != "") {
                        price = price / currencyRate;
                    }
                    callback(price, costprice, defaultprice, unitId); // Call the callback function with the fetched price
                },
                error: function (error) {
                    console.error("Error fetching price:", error);
                }
            });
        }


        function renumberRows() {
            var rows = table.getRows();
            //console.log(rows);
            rows.forEach(function (row, index) {
                row.update({ SLNo: index + 1 });
            });
        }
        table.on("cellEdited", function (cell) {


            calculateSubtotal();
            calculateTaxableSubtotal();
            renumberRows();
            setTaxAmount();
        });     


        var columns1 = [
            { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
            { title: "TaxId", field: "TaxId", movable: false, headerSort: false, visible: false },
            { title: "Total", field: "TotalAmount", movable: false, headerSort: false, visible: false },
            { title: "", field: "Nickname", headerSort: false, width: 200 },
            { title: "", field: "IsSum", headerSort: false, width: 200, visible: false },
            { title: "", field: "Amount", hozAlign: "center", headerSort: false, editor: "input" }
        ];

        var table1 = new Tabulator("#seperate-tax", {
            layout: "fitColumns",
            addRowPos: "bottom",
            headerVisible: false,
            columns: columns1,
        });
        function initializeTaxData(data) {
            if (table1) {
                table1.setData(data);
                updateTotalAmount();
            } else {
                table1 = new Tabulator("#seperate-tax", {
                    layout: "fitColumns",
                    addRowPos: "bottom",
                    columns: columns1,
                    data: data,
                });

                updateTotalAmount();
            }
        }
        function initializePaymentData(data) {
            if (table3) {
                table3.setData(data);
                updateTotalAmount();
            } else {
                table3 = new Tabulator("#transaction-method", {
                    layout: "fitColumns",
                    addRowPos: "bottom",
                    columns: columns3,
                    data: data,
                });

                updateTotalAmount();
            }
        }
        table1.on("cellEdited", function (cell) {

            updateTotalAmount();
            updateTotal();
        });
        function updateTotalAmount() {
            var data = table1.getData();
            var totalAmount = data.reduce(function (sum, row) {
                var amount = 0;
                if(row.IsSum == true)
                {
                    amount = parseFloat(row.Amount) || 0;
                }
                return sum + amount;
            }, 0);
            console.log(totalAmount);

            document.getElementById("total-tax").textContent = totalAmount.toFixed(4);
        }

        function setTaxAmountForTaxFilter() {
            const masterTaxIds = [];
            const masterAmounts = [];
            const rows = table.getRows(); // Assuming you have a reference to the Tabulator table
            var currentData = table.getData();

            currentData.forEach(function (row) {
                const masterTaxId = row.MasterTaxId;
                const masterAmount = row.Amount;
                if (masterTaxId != undefined) {
                    masterTaxIds.push(masterTaxId);
                    masterAmounts.push(masterAmount);
                }
            });


            if (masterTaxIds.length > 0) {
                //console.log(masterTaxIds);
                const taxString = masterTaxIds.join(',');
                const amountString = masterAmounts.join(',');
                const selectedValue = $("#AmountsAre").val();
                console.log(selectedValue);

                $.ajax({
                    url: '@Url.Action("ProductWiseTax", "Sales")',
                    type: 'GET',
                    data: { taxes: taxString, amounts: amountString, criteria: selectedValue },
                    success: function (response) {

                        if (response.Data.length > 0) {
                            // Load data into the table
                            table1.setData(response.Data);
                            updateTotalAmount();
                            updateTotal();
                        }
                    },
                    error: function (error) {
                        // Handle errors here
                        console.error(error);
                    }
                });
            }
        }


        function setTaxAmount() {
            const masterTaxIds = [];
            const masterAmounts = [];
            const rows = table.getRows(); // Assuming you have a reference to the Tabulator table

            rows.forEach(function (row) {
                const masterTaxId = row.getData().MasterTaxId;
                const masterAmount = row.getData().Amount;
                const masterQTY = row.getData().InputQuantity;
                const masterRate = row.getData().SecondaryPrice;
                const masterDiscount = row.getData().IndDiscount;
                console.log(masterQTY);
                if (masterTaxId != undefined) {
                    masterTaxIds.push(masterTaxId);
                    //masterAmounts.push(masterAmount);
                    masterAmounts.push((masterQTY * masterRate)-masterDiscount);
                }
            });


            if (masterTaxIds.length > 0) {
                //console.log(masterTaxIds);
                const taxString = masterTaxIds.join(',');
                const amountString = masterAmounts.join(',');
                //console.log(taxString);

                $.ajax({
                    url: '@Url.Action("ProductWiseTax", "Sales")',
                    type: 'GET',
                    data: { taxes: taxString, amounts: amountString },
                    success: function (response) {

                        if (response.Data.length > 0) {
                            // Load data into the table
                            table1.setData(response.Data);
                            updateTotalAmount();
                            updateTotal();
                        }
                    },
                    error: function (error) {
                        // Handle errors here
                        console.error(error);
                    }
                });
            }

        }

        if ('@transactionType' === "Invoice" || '@transactionType' === "Estimate" || '@transactionType' === "Sales_Order" || '@transactionType' === "Sales_Receipt" || '@transactionType' === "Issue" ) {
            document.getElementById("add-row").addEventListener("click", function () {
                table.addRow({});
                calculateSubtotal();
                calculateTaxableSubtotal();
                updateTotal();
                renumberRows();
            });

            document.getElementById("del-row").addEventListener("click", function () {
                table.clearData();
                calculateSubtotal();
                calculateTaxableSubtotal();
                updateTotal();
                renumberRows();
            });
        }

        function calculateSubtotal() {
            var data = table.getData();
            var subtotal = data.reduce(function (sum, row) {
                var qty = row.InputQuantity;
                var price = row.SecondaryPrice;
                var discount = row.IndDiscount;
                var amount = parseFloat((qty * price)-discount) || 0;
                return sum + amount;
            }, 0);

            // Update the content of the "subtotal" <p> element
            document.getElementById("subtotal").textContent = subtotal.toFixed(4);
            document.getElementById("total").textContent = subtotal.toFixed(4);
            var previousRate = $("#CurrencyRate").val();
            document.getElementById("totalInBDT").textContent = (subtotal * previousRate).toFixed(4);
        }
        table.on("cellEdited", function (cell) {
            var field = cell.getField();
            if (field === "InputQuantity" || field === "SecondaryPrice" || field === "Name") {
                var rowData = cell.getRow().getData();
                var qty = parseFloat(rowData.InputQuantity) || 0;
                var rate = parseFloat(rowData.SecondaryPrice) || 0;
                var amount = (qty * rate).toFixed(4);
                cell.getRow().update({ "Amount": amount });
                calculateSubtotal(); // Recalculate subtotal when QTY or RATE is edited
                renumberRows();

            }
        });

        function calculateTaxableSubtotal() {
            var data = table.getData();
            var taxableSubtotal = data.reduce(function (sum, row) {
                if (row.MasterTaxName != undefined) {
                    var qty = row.InputQuantity;
                    var price = row.SecondaryPrice;
                    var discount = row.IndDiscount;
                    var amount = parseFloat((qty * price)-discount) || 0; // Parse the amount as a float
                    return sum + amount;
                } else {
                    return sum;
                }
            }, 0);

            // Update the content of the "taxable-subtotal" <span> element
            document.getElementById("taxable-subtotal").textContent = taxableSubtotal.toFixed(4);
        }

        var showoffcanvas = document.getElementById('showoffcanvas');
        showoffcanvas.addEventListener('click', function () {
            var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
            offcanvas.show();
        });

        if ('@transactionType' === "Sales_Receipt") {
            var selectPaymentMethod = @Html.Raw(Json.Serialize(ViewBag.PaymentMethod));
            var selectedCategory = @Html.Raw(Json.Serialize(ViewBag.CategoryList));

            var initData = [
                {
                    "Id": "0",
                    "Reference No": "",
                    "Deposit to": "",
                    "Deposit Id": "",
                    "Amount": "0",
                }
            ];
            var columns3 = [
                { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },

                {
                    title: "Deposit to",
                    field: "DepositTo",
                    hozAlign: "center",
                    sorter: "number",
                    editor: "select",
                    editorParams: {
                        values: selectedCategory.map(option => option.Text),
                    },
                    cellEdited: function (cell) {
                        // Update the hidden column ("HiddenValue") with the selected value
                        var selectedText = cell.getValue();
                        var selectedValue = selectedCategory.find(option => option.Text === selectedText);
                        if (selectedValue) {
                            cell.getRow().update({ AccountHeadId: selectedValue.Value });

                        }
                    },
                },
                {
                    title: "Deposit Id",
                    field: "AccountHeadId",
                    visible: false,
                    editor: "input",
                },

                { title: "Reference No", field: "PaymentCardNo", editor: "input" },

                { title: "Amount", field: "Amount", editor: "input", bottomCalc: "sum" },
            ];

            var deleteColumn = {
                title: "",
                field: "Delete",
                movable: false,
                formatter: function (cell, formatterParams) {
                    return "<i class='fas fa-trash-alt delete-icon'></i>";
                },
                width: 30,
                headerSort: false,
                cellClick: function (e, cell) {
                    var rowData = cell.getRow().getData();
                    var row = cell.getRow();
                    deleteRow(row);
                }
            };

            columns3.push(deleteColumn);

            var table3 = new Tabulator("#transaction-method", {
                layout: "fitColumns",
                addRowPos: "bottom",
                columns: columns3,
                // data: initData,
            });
            document.getElementById("add-obj").addEventListener("click", function () {
                table3.addRow({});

                var data = table3.getData();

                var sumOfAmounts = data.reduce(function (total, row) {
                    return total + parseFloat(row.Amount || 0);
                }, 0);


                var totalValue = $('#total').text().replace('$', '').replace(',', '');

                var lastIndex = data.length - 1;

                data[lastIndex].DepositTo = selectedCategory.length > 0 ? selectedCategory[0].Text : '';
                data[lastIndex].AccountHeadId = selectedCategory.length > 0 ? selectedCategory[0].Value : '';

                data[lastIndex].Amount = (parseFloat(totalValue) - sumOfAmounts).toFixed(4);;

                table3.clearData();

                table3.setData(data);

            });

            document.getElementById("del-obj").addEventListener("click", function () {
                table3.clearData();
            });
        }

        function getRecurringValues(invoiceId) {
            var values = {};

            values.Id = parseInt(document.getElementById("recurr-id").value);

            values.TemplateName = document.getElementById("temp-name").value;

            values.TemplateType = document.getElementById("RecurringType").value;

            values.CreateDays = parseInt(document.getElementById("create-days").value ? document.getElementById("create-days").value : 0);

            values.Interval = document.getElementById("Interval").value;

            values.Week_ = document.getElementById("Week").value;

            values.Month_ = document.getElementById("Month").value;

            values.Integer_ = document.getElementById("Integer").value;

            values.Count_ = document.getElementById("Count").value;

            values.Every_ = parseInt(document.getElementById("every").value ? document.getElementById("every").value : 0);

            values.RecurringStartDate = document.getElementById("recurring-start-date").value;

            values.End_ = document.getElementById("End").value;

            values.RecurringEndDate = document.getElementById("recurring-end-date").value;

            values.occurences = parseInt(document.getElementById("occurences").value ? document.getElementById("occurences").value : 0);

            values.SalesId = invoiceId;

            return values;
        }



        function gatherData() {

            var dataList = [];

            var taxList = [];

            var paymentModel = [];

            var rows = table.getData();
            var fiscalMonthId = $('#FiscalMonthId').val();

            rows.forEach(function (row) {
                var taxValue = row.TAX === null ? false : row.TAX;

                var rowData = {
                    "Id": row["Id"],
                    "ServiceDate": row["ServiceDate"],
                    "Name": row.Name,
                    "ProductId": row.ProductId,
                    "Description": row.Description,
                    "Quantity": row.Quantity,
                    "Price": row.Price,
                    "SecondaryPrice": row.SecondaryPrice,
                    "DefaultPrice": row.DefaultPrice,
                    "IndDiscount": row.IndDiscount,
                    "CostPrice": row.CostPrice,
                    "Amount": row.Amount,
                    "MasterTaxId": row.MasterTaxId,
                    "WarehouseId": row.WarehouseId,
                    "WHName": row.WHName,
                    "PurchaseItemsId": row.PurchaseItemsId,
                    "InputQuantity": row.InputQuantity,
                    "PrimaryUnitId": row.PrimaryUnitId,
                    "SecondaryUnitId": row.SecondaryUnitId,
                    "Unit": row.Unit,
                    "ConversionRate" : row.ConversionRate
                };

                dataList.push(rowData);
            });

            var rows1 = table1.getData();

            if ('@transactionType' === "Sales_Receipt") {
                var rows3 = table3.getData();

                rows3.forEach(function (row) {

                    var rowData = {
                        "Id": row["Id"] || 0,
                        //"PaymentTypeModelId": row.PaymentTypeModelId,
                        "AccountHeadId": row.AccountHeadId,
                        "PaymentCardNo": row.PaymentCardNo,
                        "Amount": row.Amount,
                    };

                    paymentModel.push(rowData);
                });

            }



            console.log(dataList);



            rows1.forEach(function (row) {

                var rowData = {
                    "Id": row["Id"],
                    "Nickname": row.Nickname,
                    "Amount": row.Amount,
                    "TaxId": row.TaxId,
                    "TotalAmount": row.TotalAmount,
                    "IsSum": row.IsSum
                };

                taxList.push(rowData);
            });

            var IsRecurring = 0;
            var myDiv = document.getElementById("top-row");
            var IsRecognition = false;

            
                

            if (myDiv.classList.contains("d-none")) {
                IsRecurring = 1;
            }
            
            // var totalElement = document.getElementById("total");ccc
            // var totalText = totalElement.textContent;
            // var amount = parseFloat(totalText.replace("$", ""));

            var totalElement = document.getElementById("total");
            var totalText = totalElement.textContent;
            var amount = parseFloat(totalText.replace(/[^\d.-]/g, ''));


            var subtotalElement = document.getElementById("subtotal");
            var subtotalText = subtotalElement.textContent;
            var subamount = parseFloat(subtotalText.replace(/[^\d.-]/g, ''));

            var totaltaxElement = document.getElementById("total-tax");
            var totaltaxText = totaltaxElement.textContent;
            var taxamount = parseFloat(totaltaxText.replace(/[^\d.-]/g, ''));


            if ('@transactionType' === "Invoice") {
                var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                var selectedTags = $('#tagDropdown').val();
                var salesData = {
                    ComId: ComId,
                    LuserId: UserId,
                    Id: $("#sales-id").val(),
                    CurrencyId: $("#MultiiCurrencyId").val(),

                    CustomerId: $("#Customer").val(),
                    WarehouseIdMain: $("#WarehouseIdMain").val(),
                    EmailId: $("#customer-email").val(),
                    PrimaryAddress: $("#billing-address").val(),
                    SalesDate: $("#start-date").val(),
                    DueDate: $("#end-date").val(),
                    ShippingVia: $("#ship-via").val(),
                    ShippingDate: $("#ship-date").val(),
                    TrackingNo: $("#tracking-no").val(),
                    SaleCode: $("#invoice-no").val(),
                    CurrencyRate: $("#CurrencyRate").val(),
                    SecoundaryAddress: $("#shipping-from").val(),
                    ShippingTo: $("#shipping-to").val(),
                    MessageInvoice: $("#message-invoice").val(),
                    MessageStatement: $("#message-statement").val(),
                    Total: amount,
                    SubTotal: subamount,
                    TotalVat: taxamount,
                    IsRecurring: IsRecurring,
                    Shipping: $("#shipping-amount").val(),
                    ShippingTax: $("#shipping-tax").val(),
                    AmountsAre: $("#AmountsAre").val(),
                    SalesTags: selectedTags,
                    SalesItemVM: dataList,
                    SalesProductTaxVM: taxList,
                    FiscalMonthId: fiscalMonthId,
                    salesRecievedtTermsId: $("#terms").val()
                };

                return salesData;
            }
            else {

                 var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                 var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';

                var selectedTags = $('#tagDropdown').val();

                if ('@transactionType' === "Estimate") {
                    var salesData = {
                        ComId: ComId,
                        LuserId: UserId,

                        Id: $("#sales-id").val(),
                        CurrencyId: $("#MultiiCurrencyId").val(),
                        CustomerId: $("#Customer_Estimate").val(),
                        EstimateStatus: $("#EstimateStatus").val(),
                        StatusBy: $("#status-by").val(),
                        StatusDate: $("#status-date").val(),
                        WarehouseIdMain: $("#WarehouseIdMain").val(),
                        EmailId: $("#customer-email").val(),
                        PrimaryAddress: $("#billing-address").val(),
                        SalesDate: $("#start-date").val(),
                        DueDate: $("#end-date").val(),
                        ShippingVia: $("#ship-via").val(),
                        ShippingDate: $("#ship-date").val(),
                        TrackingNo: $("#tracking-no").val(),
                        SaleCode: $("#invoice-no").val(),
                        CurrencyRate: $("#CurrencyRate").val(),
                        FiscalMonthId: fiscalMonthId,
                        SecoundaryAddress: $("#shipping-from").val(),
                        ShippingTo: $("#shipping-to").val(),
                        MessageInvoice: $("#message-invoice").val(),
                        MessageStatement: $("#message-statement").val(),
                        Total: amount,
                        SubTotal: subamount,
                        TotalVat: taxamount,
                        IsRecurring: IsRecurring,
                        Shipping: $("#shipping-amount").val(),
                        ShippingTax: $("#shipping-tax").val(),
                        AmountsAre: $("#AmountsAre").val(),
                        SalesTags: selectedTags,
                        //Notes: $("#tags").val(),
                        SalesItemVM: dataList,
                        SalesProductTaxVM: taxList

                    };

                    return salesData;
                }
                if ('@transactionType' === "Sales_Receipt") {

                    var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                    var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';

                    var selectedTags = $('#tagDropdown').val();
                    const isRecogn = document.getElementById("isRecognition");

                    if (isRecogn.checked) {
                        IsRecognition = true;
                    }

                    var salesData = {

                        ComId: ComId,
                        LuserId: UserId,

                        Id: $("#sales-id").val(),
                        CurrencyId: $("#MultiiCurrencyId").val(),

                        CustomerId: $("#Customer_SalesReceipt").val(),
                        WarehouseIdMain: $("#WarehouseIdMain").val(),
                        EmailId: $("#customer-email").val(),
                        PrimaryAddress: $("#billing-address").val(),
                        SalesDate: $("#start-date").val(),
                        DueDate: $("#start-date").val(),
                        ShippingVia: $("#ship-via").val(),
                        ShippingDate: $("#ship-date").val(),
                        TrackingNo: $("#tracking-no").val(),
                        SaleCode: $("#invoice-no").val(),
                        CurrencyRate: $("#CurrencyRate").val(),
                        SecoundaryAddress: $("#shipping-from").val(),
                        ShippingTo: $("#shipping-to").val(),
                        MessageInvoice: $("#message-invoice").val(),
                        MessageStatement: $("#message-statement").val(),
                        FiscalMonthId: fiscalMonthId,
                        //Notes: $("#tags").val(),
                        Shipping: $("#shipping-amount").val(),
                        ShippingTax: $("#shipping-tax").val(),
                        AmountsAre: $("#AmountsAre").val(),
                        Total: amount,
                        SubTotal: subamount,
                        IsRecurring: IsRecurring,
                        TotalVat: taxamount,
                        SalesTags: selectedTags,
                        SalesItemVM: dataList,
                        SalesProductTaxVM: taxList,
                        TransactionModelVM: paymentModel,
                        IsRecognition: IsRecognition

                    };

                    return salesData;
                }
                if ('@transactionType' === "Issue") {

                    var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                    var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';

                    

                    var salesData = {

                        ComId: ComId,
                        LuserId: UserId,

                        Id: $("#sales-id").val(),
                        CurrencyId: $("#MultiiCurrencyId").val(),

                        CustomerId: $("#CustomerIssue").val(),
                        WarehouseIdMain: $("#WarehouseIdMain").val(),
                        EmailId: $("#customer-email").val(),
                        
                        CurrencyRate: $("#CurrencyRate").val(),
                        
                        FiscalMonthId: fiscalMonthId,
                        //Notes: $("#tags").val(),
                        Shipping: $("#shipping-amount").val(),
                        ShippingTax: $("#shipping-tax").val(),
                        AmountsAre: $("#AmountsAre").val(),
                        Total: amount,
                        SubTotal: subamount,
                        IsRecurring: IsRecurring,
                        TotalVat: taxamount,
                        //SalesTags: selectedTags,
                        SalesItemVM: dataList,
                        //SalesProductTaxVM: taxList,
                        //TransactionModelVM: paymentModel,
                        IsRecognition: IsRecognition

                    };

                    return salesData;
                }
                else {

                    var selectedTags = $('#tagDropdown').val();

                    var salesData = {
                        Id: $("#sales-id").val(),
                        CurrencyId: $("#MultiiCurrencyId").val(),

                        CustomerId: $("#Customer_SalesOrder").val(),
                        WarehouseIdMain: $("#WarehouseIdMain").val(),
                        EmailId: $("#customer-email").val(),
                        PrimaryAddress: $("#billing-address").val(),
                        SalesDate: $("#start-date").val(),
                        DueDate: $("#end-date").val(),
                        ShippingVia: $("#ship-via").val(),
                        ShippingDate: $("#ship-date").val(),
                        TrackingNo: $("#tracking-no").val(),
                        SaleCode: $("#invoice-no").val(),
                        CurrencyRate: $("#CurrencyRate").val(),
                        SecoundaryAddress: $("#shipping-from").val(),
                        ShippingTo: $("#shipping-to").val(),
                        MessageInvoice: $("#message-invoice").val(),
                        MessageStatement: $("#message-statement").val(),
                        FiscalMonthId: fiscalMonthId,
                        Total: amount,
                        SubTotal: subamount,
                        TotalVat: taxamount,
                        IsRecurring: IsRecurring,
                        Shipping: $("#shipping-amount").val(),
                        ShippingTax: $("#shipping-tax").val(),
                        AmountsAre: $("#AmountsAre").val(),
                        //Notes: $("#tags").val(),
                        SalesTags: selectedTags,
                        SalesItemVM: dataList,
                        SalesProductTaxVM: taxList

                    };

                    return salesData;
                }
            }

        }
        function gatherDataForDelayedCharge() {

            var dataList = [];

            var taxList = [];

            var paymentModel = [];

            var rows = table.getData();

            var rows1 = table1.getData();

            //var rows3 = table3.getData();

            rows.forEach(function (row) {
                var taxValue = row.TAX === null ? false : row.TAX;

                var rowData = {
                    "Id": row["Id"],
                    "ServiceDate": row["ServiceDate"],
                    "Name": row.Name,
                    "ProductId": row.ProductId,
                    "Description": row.Description,
                    "Quantity": row.Quantity,
                    "SecondaryPrice": row.SecondaryPrice,
                    "CostPrice": row.CostPrice,
                    "DefaultPrice": row.DefaultPrice,
                    "IndDiscount": row.IndDiscount,
                    "Amount": row.Amount,
                    "MasterTaxId": row.MasterTaxId,
                    "WarehouseId": row.WarehouseId,
                    "WHName": row.WHName,
                    "InputQuantity": row.InputQuantity,
                    "PrimaryUnitId": row.PrimaryUnitId,
                    "SecondaryUnitId": row.SecondaryUnitId,
                    "Unit": row.Unit,
                    "ConversionRate": row.ConversionRate
                };

                dataList.push(rowData);
            });

            console.log(dataList);

            var IsRecurring = 0;
            var myDiv = document.getElementById("top-row");

            if (myDiv.classList.contains("d-none")) {
                IsRecurring = 1;
            }

            rows1.forEach(function (row) {

                var rowData = {
                    "Id": row["Id"],
                    "Nickname": row.Nickname,
                    "Amount": row.Amount,
                    "TaxId": row.TaxId,
                    "TotalAmount": row.TotalAmount,
                    "IsSum": row.IsSum,
                };

                taxList.push(rowData);
            });

            // rows3.forEach(function (row) {

            //     var rowData = {
            //         "Id": row["Id"],
            //         "PaymentTypeModelId": row.PaymentTypeModelId,
            //         "AccountHeadId": row.AccountHeadId,
            //         "PaymentCardNo": row.PaymentCardNo,
            //         "Amount": row.Amount,
            //     };

            //     paymentModel.push(rowData);
            // });

            // var totalElement = document.getElementById("total");
            // var totalText = totalElement.textContent;
            // var amount = parseFloat(totalText.replace("$", ""));

            var totalElement = document.getElementById("total");
            var totalText = totalElement.textContent;
            var amount = parseFloat(totalText.replace(/[^\d.-]/g, ''));

            var subtotalElement = document.getElementById("subtotal");
            var subtotalText = subtotalElement.textContent;
            var subamount = parseFloat(subtotalText.replace(/[^\d.-]/g, ''));

            var totaltaxElement = document.getElementById("total-tax");
            var totaltaxText = totaltaxElement.textContent;
            var taxamount = parseFloat(totaltaxText.replace(/[^\d.-]/g, ''));

            var selectedTags = $('#tagDropdown').val();

             var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
             var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';

            var salesData = {

                ComId: ComId,
                LuserId: UserId,

                Id: $("#sales-id").val(),
                CurrencyId: $("#MultiiCurrencyId").val(),

                CustomerId: $("#Customer_Delayed_Charge").val(),
                WarehouseIdMain: $("#WarehouseIdMain").val(),
                EmailId: $("#customer-email").val(),
                SalesDate: $("#start-date").val(),
                SaleCode: $("#invoice-no").val(),
                CurrencyRate: $("#CurrencyRate").val(),
                //TotalVAT: $("#total-tax").val(),
                //TaxAmount: $("#total-tax").val(),
                //Notes: $("#tags").val(),
                MessageStatement: $("#message-statement").val(),
                Shipping: $("#shipping-amount").val(),
                ShippingTax: $("#shipping-tax").val(),
                AmountsAre: $("#AmountsAre").val(),
                IsRecurring: IsRecurring,
                Total: amount,
                SubTotal: subamount,
                TotalVat: taxamount,
                SalesTags: selectedTags,
                SalesProductTaxVM: taxList,
                FiscalMonthId: fiscalMonthId,
                SalesItemVM: dataList

            };

            return salesData;

        }

        var InvoiceId = 0;
        function sendDataToServer() {
            var salesData = gatherData();

            var data = JSON.stringify(salesData);
            console.log("after save data", data);
            var fileInput = $('input[type=file]')[0];


            $.ajax({

                url: '@Url.Action("InvoiceCreation", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    InvoiceId = response.Id;
                    console.log("Done");
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                    setTimeout(function () {
                        var myDiv = document.getElementById("top-row");

                        if (myDiv.classList.contains("d-none")) {
                            window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                        }
                        else {
                            window.location.href = '@Url.Action("InvoiceList", "Sales")';
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });


            if (salesData.IsRecurring === 1) {
                var recdata = getRecurringValues(InvoiceId);
                var data = JSON.stringify(recdata);
                $.ajax({

                    url: '@Url.Action("RecurringDetailsCreation", "Sales")',
                    type: 'POST',
                    data: data,
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (response) {

                        console.log("Done");
                    },
                    error: function (error) {
                        console.log("Error");
                    }
                });
            }

            if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                var formData = new FormData();
                //formData.append("file", fileInput.files[0]);
                for (var i = 0; i < fileInput.files.length; i++) {
                    formData.append("files", fileInput.files[i]);
                }
                formData.append("InvoiceId", InvoiceId);

                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("UploadImage", "Sales")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        // Handle the response
                    }
                });
            } else {
                // Handle the case where no file was selected
            }
        }

        function sendDataToServerForIssue()
        {
            var salesData = gatherData();

            var data = JSON.stringify(salesData);
            console.log(data);
            var fileInput = $('input[type=file]')[0];


            $.ajax({

                url: '@Url.Action("IssueCreation", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    InvoiceId = response.Id;
                    console.log("Done");
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                    setTimeout(function () {
                        var myDiv = document.getElementById("top-row");

                        if (myDiv.classList.contains("d-none")) {
                            window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                        }
                        else {
                            window.location.href = '@Url.Action("InvoiceList", "Sales")';
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });
        }

        function sendDataToServerforEstimate() {
            var salesData = gatherData();

            var data = JSON.stringify(salesData);
            console.log(data);
            var fileInput = $('input[type=file]')[0];


            $.ajax({

                url: '@Url.Action("EstimateCreation", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    InvoiceId = response.Id;
                    console.log("Done");
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                    setTimeout(function () {
                        var myDiv = document.getElementById("top-row");

                        if (myDiv.classList.contains("d-none")) {
                            window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                        }
                        else {
                            window.location.href = '@Url.Action("InvoiceList", "Sales")';
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });

            if (salesData.IsRecurring === 1) {
                var recdata = getRecurringValues(InvoiceId);
                var data = JSON.stringify(recdata);
                $.ajax({

                    url: '@Url.Action("RecurringDetailsCreation", "Sales")',
                    type: 'POST',
                    data: data,
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (response) {

                        console.log("Done");
                    },
                    error: function (error) {
                        console.log("Error");
                    }
                });
            }

            if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                var formData = new FormData();
                //formData.append("file", fileInput.files[0]);
                for (var i = 0; i < fileInput.files.length; i++) {
                    formData.append("files", fileInput.files[i]);
                }
                formData.append("InvoiceId", InvoiceId);

                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("UploadImage", "Sales")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        // Handle the response
                    }
                });
            }
            else {
                // Handle the case where no file was selected
            }
        }

        function sendDataToServerforSalesOrder() {
            var salesData = gatherData();

            var data = JSON.stringify(salesData);
            console.log(data);
            var fileInput = $('input[type=file]')[0];


            $.ajax({

                url: '@Url.Action("SalesOrderCreation", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    InvoiceId = response.Id;
                    console.log("Done");
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                    setTimeout(function () {
                        var myDiv = document.getElementById("top-row");

                        if (myDiv.classList.contains("d-none")) {
                            window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                        }
                        else {
                            window.location.href = '@Url.Action("InvoiceList", "Sales")';
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });

            if (salesData.IsRecurring === 1) {
                var recdata = getRecurringValues(InvoiceId);
                var data = JSON.stringify(recdata);
                $.ajax({

                    url: '@Url.Action("RecurringDetailsCreation", "Sales")',
                    type: 'POST',
                    data: data,
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (response) {

                        console.log("Done");
                    },
                    error: function (error) {
                        console.log("Error");
                    }
                });
            }

            if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                var formData = new FormData();
                //formData.append("file", fileInput.files[0]);
                for (var i = 0; i < fileInput.files.length; i++) {
                    formData.append("files", fileInput.files[i]);
                }
                formData.append("InvoiceId", InvoiceId);

                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("UploadImage", "Sales")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        // Handle the response
                    }
                });
            } else {
                // Handle the case where no file was selected
            }
        }

        function gatherAdvTrxn(SalesId) {
            var advtrxn = {
                Id: $("#adv-trxn-id").val(),
                SalesId: SalesId,
                Duration: parseInt($("#every_adv").val()),
                OccuringDate: $("#adv_Integer").val(), 
                Occurence: $("#adv_occurences").val(),
                StartDate: $("#adv-start-date").val()
            };
            return advtrxn;
        }

        function parseDateTime(dateTimeString) {
            return new Date(dateTimeString);
        }

        function sendDataToServerforSalesReceipt() {
            var salesData = gatherData();
            
            var data = JSON.stringify(salesData);
            console.log(data);
            var fileInput = $('input[type=file]')[0];
            var occur = parseInt($("#adv_occurences").val());
            const isRecognition = document.getElementById("isRecognition");

            $.ajax({

                url: '@Url.Action("SalesReceiptCreation", "Sales")',
                type: 'POST',
                data: data ,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    InvoiceId = response.Id;
                    console.log("Done");
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                    setTimeout(function () {
                        var myDiv = document.getElementById("top-row");

                        if (myDiv.classList.contains("d-none")) {
                            window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                        }
                        else {
                            window.location.href = '@Url.Action("InvoiceList", "Sales")';
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });

            if (isRecognition.checked) {
                var advTrasaction = JSON.stringify(gatherAdvTrxn(InvoiceId));
                $.ajax({

                    url: '@Url.Action("AdvanceSalesCreation", "Sales")',
                    type: 'POST',
                    data: advTrasaction,
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (response) {

                        console.log("Done");
                    },
                    error: function (error) {
                        console.log("Error");
                    }
                });
            }
            if (salesData.IsRecurring === 1) {
                var recdata = getRecurringValues(InvoiceId);
                var data = JSON.stringify(recdata);
                $.ajax({

                    url: '@Url.Action("RecurringDetailsCreation", "Sales")',
                    type: 'POST',
                    data: data,
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (response) {

                        console.log("Done");
                    },
                    error: function (error) {
                        console.log("Error");
                    }
                });
            }

            if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                var formData = new FormData();
                //formData.append("file", fileInput.files[0]);
                for (var i = 0; i < fileInput.files.length; i++) {
                    formData.append("files", fileInput.files[i]);
                }
                formData.append("InvoiceId", InvoiceId);

                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("UploadImage", "Sales")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        // Handle the response
                    }
                });
            } else {
                // Handle the case where no file was selected
            }
        }

        function sendDataToServerforDelayedCharge() {
            var salesData = gatherDataForDelayedCharge();

            var data = JSON.stringify(salesData);
            console.log(data);
            var fileInput = $('input[type=file]')[0];

            $.ajax({

                url: '@Url.Action("DelayedChargeCreation", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    InvoiceId = response.Id;
                    console.log("Done");
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                    setTimeout(function () {
                        var myDiv = document.getElementById("top-row");

                        if (myDiv.classList.contains("d-none")) {
                            window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                        }
                        else {
                            window.location.href = '@Url.Action("InvoiceList", "Sales")';
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });

            if (salesData.IsRecurring === 1) {
                var recdata = getRecurringValues(InvoiceId);
                var data = JSON.stringify(recdata);
                $.ajax({

                    url: '@Url.Action("RecurringDetailsCreation", "Sales")',
                    type: 'POST',
                    data: data,
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (response) {

                        console.log("Done");
                    },
                    error: function (error) {
                        console.log("Error");
                    }
                });
            }

            if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                var formData = new FormData();
                //formData.append("file", fileInput.files[0]);
                for (var i = 0; i < fileInput.files.length; i++) {
                    formData.append("files", fileInput.files[i]);
                }
                formData.append("InvoiceId", InvoiceId);

                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("UploadImage", "Sales")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        // Handle the response
                    }
                });
            } else {
                // Handle the case where no file was selected
            }
        }
        if ('@transactionType' === "Invoice") {
            var saveButton = document.getElementById('BtnSave');
            saveButton.addEventListener('click', function () {
                if ($("#Customer").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Sales Date");
                }
                if ($("#end-date").val() == "") {
                    $("#end-date-validation").html("Please enter Due Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                if ($("#terms").val() == "0") {
                    $("#terms-validation").html("Please select Terms");
                }
                if ($("#ship-date").val() == "") {
                    $("#ship-date-validation").html("Please enter Shipping Date");
                } else {
                    sendDataToServer(); // Call sendDataToServer if all conditions are false
                }
            });

            $("#Customer").on("change", function () {
                if ($("#Customer").val() != "") {
                    $("#Customer-validation").html("");
                }
            });

            $("#start-date").on("change", function () {
                if ($("#start-date").val() != "") {
                    $("#start-date-validation").html("");
                }
            });

            $("#end-date").on("change", function () {
                if ($("#end-date").val() != "") {
                    $("#end-date-validation").html("");
                }
            });
            $("#terms").on("change", function () {
                $("#end-date-validation").html("");
            });

            $("#ship-date").on("change", function () {
                if ($("#ship-date").val() != "") {
                    $("#ship-date-validation").html("");
                }
            });

            $("#WarehouseIdMain").on("change", function () {
                if ($("#WarehouseIdMain").val() != "") {
                   $("#location-validation").html("");
                }
            });
        }
        if ('@transactionType' === "Estimate") {
            var saveButton = document.getElementById('BtnSave_Estimate');
            saveButton.addEventListener('click', function () {
                if ($("#Customer_Estimate").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Sales Date");
                }
                if ($("#end-date").val() == "") {
                    $("#end-date-validation").html("Please enter Due Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                if ($("#ship-date").val() == "") {
                    $("#ship-date-validation").html("Please enter Shipping Date");
                } else {
                    sendDataToServerforEstimate();
                }
            });

            $("#Customer_Estimate").on("change", function () {
                if ($("#Customer_Estimate").val() != "") {
                    $("#Customer-validation").html("");
                }
            });

            $("#start-date").on("change", function () {
                if ($("#start-date").val() != "") {
                    $("#start-date-validation").html("");
                }
            });

            $("#end-date").on("change", function () {
                if ($("#end-date").val() != "") {
                    $("#end-date-validation").html("");
                }
            });

            $("#ship-date").on("change", function () {
                if ($("#ship-date").val() != "") {
                    $("#ship-date-validation").html("");
                }
            });

            $("#WarehouseIdMain").on("change", function () {
                if ($("#WarehouseIdMain").val() != "") {
                   $("#location-validation").html("");
                }
            });
        }
        if ('@transactionType' === "Sales_Order") {
            var saveButton = document.getElementById('BtnSaveSales_Order');
            saveButton.addEventListener('click', function () {
                if ($("#Customer_SalesOrder").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Sales Date");
                }
                if ($("#end-date").val() == "") {
                    $("#end-date-validation").html("Please enter Due Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                if ($("#ship-date").val() == "") {
                    $("#ship-date-validation").html("Please enter Shipping Date");
                } else {
                    sendDataToServerforSalesOrder();
                }
            });

            $("#Customer_SalesOrder").on("change", function () {
                if ($("#Customer").val() != "") {
                    $("#Customer-validation").html("");
                }
            });

            $("#start-date").on("change", function () {
                if ($("#start-date").val() != "") {
                    $("#start-date-validation").html("");
                }
            });

            $("#end-date").on("change", function () {
                if ($("#end-date").val() != "") {
                    $("#end-date-validation").html("");
                }
            });

            $("#ship-date").on("change", function () {
                if ($("#ship-date").val() != "") {
                    $("#ship-date-validation").html("");
                }
            });

            $("#WarehouseIdMain").on("change", function () {
                if ($("#WarehouseIdMain").val() != "") {
                   $("#location-validation").html("");
                }
            });
        }
        if ('@transactionType' === "Delayed_Charge") {
            var saveButton = document.getElementById('BtnSaveDelayed_Charge');
            saveButton.addEventListener('click', function () {
                if ($("#Customer_Delayed_Charge").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Sales Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                else {
                    sendDataToServerforDelayedCharge();
                }
            });

            $("#Customer_Delayed_Charge").on("change", function () {
                if ($("#Customer_Delayed_Charge").val() != "") {
                    $("#Customer-validation").html("");
                }
            });

            $("#start-date").on("change", function () {
                if ($("#start-date").val() != "") {
                    $("#start-date-validation").html("");
                }
            });

            $("#WarehouseIdMain").on("change", function () {
                if ($("#WarehouseIdMain").val() != "") {
                   $("#location-validation").html("");
                }
            });
        }
        if ('@transactionType' === "Sales_Receipt") {
            var saveButton = document.getElementById('BtnSaveSales_Receipt');
            saveButton.addEventListener('click', function () {
                var data = table3.getData();
                var sum = 0;
                for (var i = 0; i < data.length; i++) {
                    sum += parseFloat(data[i].Amount || 0);
                }

                // var totalElement = document.getElementById("total");
                // var totalText = totalElement.textContent;
                // var amount = parseFloat(totalText.replace("$", ""));
                var totalElement = document.getElementById("total");
                var totalText = totalElement.textContent;
                var amount = parseFloat(totalText.replace(/[^\d.-]/g, ''));

                if (sum > amount) {
                    $("#SalesReceiptAmount-validation").html("Summation of Receiving Amount should not greater than total amount");
                }
                else {
                    if ($("#Customer_SalesReceipt").val() == "") {
                        $("#Customer-validation").html("Choose a Customer");
                    }
                    else {
                        if ($("#start-date").val() == "") {
                            $("#start-date-validation").html("Please enter Sales Date");
                        }

                        else {
                            if ($("#ship-date").val() == "") {
                                $("#ship-date-validation").html("Please enter Shipping Date");
                            } else {
                                sendDataToServerforSalesReceipt();
                            }
                        }

                    }

                }

            });

            $("#Customer_SalesReceipt").on("change", function () {
                if ($("#Customer_SalesReceipt").val() != "") {
                    $("#Customer-validation").html("");
                }
            });

            $("#start-date").on("change", function () {
                if ($("#start-date").val() != "") {
                    $("#start-date-validation").html("");
                }
            });

            $("#ship-date").on("change", function () {
                if ($("#ship-date").val() != "") {
                    $("#ship-date-validation").html("");
                }
            });

        }

        if ('@transactionType' === "Invoice") {
            var saveButton = document.getElementById('BtnSaveClose');
            saveButton.addEventListener('click', function () {
                if ($("#Customer").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Sales Date");
                }
                if ($("#end-date").val() == "") {
                    $("#end-date-validation").html("Please enter Due Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                if ($("#terms").val() == "0") {
                    $("#terms-validation").html("Please select Terms");
                }
                if ($("#ship-date").val() == "") {
                    $("#ship-date-validation").html("Please enter Shipping Date");
                } else {
                    sendDataToServer(); // Call sendDataToServer if all conditions are false
                }
            });
        }
        if ('@transactionType' === "Estimate") {
            var saveButton = document.getElementById('BtnSave_EstimateClose');
            saveButton.addEventListener('click', function () {
                if ($("#Customer_Estimate").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Sales Date");
                }
                if ($("#end-date").val() == "") {
                    $("#end-date-validation").html("Please enter Due Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                if ($("#ship-date").val() == "") {
                    $("#ship-date-validation").html("Please enter Shipping Date");
                } else {
                    sendDataToServerforEstimate();
                }
            });
        }
        if ('@transactionType' === "Sales_Order") {
            var saveButton = document.getElementById('BtnSaveSales_OrderClose');
            saveButton.addEventListener('click', function () {
                if ($("#Customer_SalesOrder").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Sales Date");
                }
                if ($("#end-date").val() == "") {
                    $("#end-date-validation").html("Please enter Due Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                if ($("#ship-date").val() == "") {
                    $("#ship-date-validation").html("Please enter Shipping Date");
                } else {
                    sendDataToServerforSalesOrder();
                }
            });
        }
        if ('@transactionType' === "Delayed_Charge") {
            var saveButton = document.getElementById('BtnSaveDelayed_ChargeClose');
            saveButton.addEventListener('click', function () {
                if ($("#Customer_Delayed_Charge").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Sales Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                else {
                    sendDataToServerforDelayedCharge();
                }
            });
        }
        if ('@transactionType' === "Sales_Receipt") {
            var saveButton = document.getElementById('BtnSaveSales_ReceiptClose');
            saveButton.addEventListener('click', function () {
                var data = table3.getData();
                var sum = 0;
                for (var i = 0; i < data.length; i++) {
                    sum += parseFloat(data[i].Amount || 0);
                }

                // var totalElement = document.getElementById("total");
                // var totalText = totalElement.textContent;
                // var amount = parseFloat(totalText.replace("$", ""));
                var totalElement = document.getElementById("total");
                var totalText = totalElement.textContent;
                var amount = parseFloat(totalText.replace(/[^\d.-]/g, ''));

                if (sum > amount) {
                    $("#SalesReceiptAmount-validation").html("Summation of Receiving Amount should not greater than total amount");
                }
                else {
                    if ($("#Customer_SalesReceipt").val() == "") {
                        $("#Customer-validation").html("Choose a Customer");
                    }
                    else {
                        if ($("#start-date").val() == "") {
                            $("#start-date-validation").html("Please enter Sales Date");
                        }

                        else {
                            if ($("#ship-date").val() == "") {
                                $("#ship-date-validation").html("Please enter Shipping Date");
                            } else {
                                sendDataToServerforSalesReceipt();
                            }
                        }

                    }

                }

            });
        }
        function gatherCreditData() {

            var dataList = [];

            var taxList = [];

            var rows = table.getData();

            var rows1 = table1.getData();

            rows.forEach(function (row) {
                var taxValue = row.TAX === null ? false : row.TAX;

                var rowData = {
                    "Id": row["Id"],
                    "ServiceDate": row["ServiceDate"],
                    "Name": row.Name,
                    "ProductId": row.ProductId,
                    "Description": row.Description,
                    "Quantity": row.Quantity,
                    "SecondaryPrice": row.SecondaryPrice,
                    "DefaultPrice": row.DefaultPrice,
                    "IndDiscount": row.IndDiscount,
                    "CostPrice": row.CostPrice,
                    "Amount": row.Amount,
                    "MasterTaxId": row.MasterTaxId,
                    "WarehouseId": row.WarehouseId,
                    "WHName": row.WHName,
                    "InputQuantity": row.InputQuantity,
                    "PrimaryUnitId": row.PrimaryUnitId,
                    "SecondaryUnitId": row.SecondaryUnitId,
                    "Unit": row.Unit,
                    "ConversionRate" : row.ConversionRate
                };

                dataList.push(rowData);
            });

            console.log(dataList);

            rows1.forEach(function (row) {

                var rowData = {
                    "Id": row["Id"],
                    "Nickname": row.Nickname,
                    "Amount": row.Amount,
                    "TaxId": row.TaxId,
                    "TotalAmount": row.TotalAmount,
                    "IsSum": row.IsSum,
                };

                taxList.push(rowData);
            });
            var IsRecurring = 0;
            var myDiv = document.getElementById("top-row");

            if (myDiv.classList.contains("d-none")) {
                IsRecurring = 1;
            }
            // var totalElement = document.getElementById("total");
            // var totalText = totalElement.textContent;
            // var amount = parseFloat(totalText.replace("$", ""));
            var totalElement = document.getElementById("total");
            var totalText = totalElement.textContent;
            var amount = parseFloat(totalText.replace(/[^\d.-]/g, ''));

            var subtotalElement = document.getElementById("subtotal");
            var subtotalText = subtotalElement.textContent;
            var subamount = parseFloat(subtotalText.replace(/[^\d.-]/g, ''));

            var totaltaxElement = document.getElementById("total-tax");
            var totaltaxText = totaltaxElement.textContent;
            var taxamount = parseFloat(totaltaxText.replace(/[^\d.-]/g, ''));

            var selectedTags = $('#tagDropdown').val();

             var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
             var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';

            var salesData = {

                ComId: ComId,
                LuserId: UserId,

                Id: $("#sales-id").val(),
                CurrencyId: $("#MultiiCurrencyId").val(),

                CustomerId: $("#Customer_CreditNote").val(),
                WarehouseIdMain: $("#WarehouseIdMain").val(),
                EmailId: $("#customer-email").val(),
                PrimaryAddress: $("#billing-address-credit").val(),
                SalesDate: $("#start-date").val(),
                //TrackingNo: $("#tags").val(),
                SaleCode: $("#invoice-no").val(),
                CurrencyRate: $("#CurrencyRate").val(),
                MessageInvoice: $("#message-invoice").val(),
                MessageStatement: $("#message-statement").val(),
                Shipping: $("#shipping-amount").val(),
                ShippingTax: $("#shipping-tax").val(),
                AmountsAre: $("#AmountsAre").val(),
                FiscalMonthId: fiscalMonthId,
                Total: amount,
                SubTotal: subamount,
                TotalVat: taxamount,
                IsRecurring: IsRecurring,
                SalesTags: selectedTags,
                SalesItemVM: dataList,
                SalesProductTaxVM: taxList

            };

            return salesData;
        }
        var CreditNoteId = 0;
        function sendDataToServerForCredit() {
            var salesData = gatherCreditData();

            var data = JSON.stringify(salesData);
            console.log(data);
            var fileInput = $('input[type=file]')[0];


            $.ajax({

                url: '@Url.Action("CreditNoteCreation", "Sales")',
                type: 'POST',
                data: data,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                success: function (response) {
                    CreditNoteId = response.Id;
                    console.log("Done");
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                    setTimeout(function () {
                        var myDiv = document.getElementById("top-row");

                        if (myDiv.classList.contains("d-none")) {
                            window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                        }
                        else {
                            window.location.href = '@Url.Action("InvoiceList", "Sales")';
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log("Error");
                }
            });

            if (salesData.IsRecurring === 1) {
                var recdata = getRecurringValues(CreditNoteId);
                var data = JSON.stringify(recdata);
                $.ajax({

                    url: '@Url.Action("RecurringDetailsCreation", "Sales")',
                    type: 'POST',
                    data: data,
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    success: function (response) {

                        console.log("Done");
                    },
                    error: function (error) {
                        console.log("Error");
                    }
                });
            }

            if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                var formData = new FormData();
                //formData.append("file", fileInput.files[0]);
                for (var i = 0; i < fileInput.files.length; i++) {
                    formData.append("files", fileInput.files[i]);
                }
                formData.append("InvoiceId", CreditNoteId);

                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("UploadImage", "Sales")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        // Handle the response
                    }
                });
            } else {
                // Handle the case where no file was selected
            }
        }

        if ('@transactionType' === "Credit-note") {
            var saveButton2 = document.getElementById('BtnSave-Credit');
            saveButton2.addEventListener('click', function () {
                if ($("#Customer").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Credit Note Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                else {
                    sendDataToServerForCredit(); // Call sendDataToServer if all conditions are false
                }
            });

            $("#Customer").on("change", function () {
                if ($("#Customer").val() != "") {
                    $("#Customer-validation").html("");
                }
            });

            $("#start-date").on("change", function () {
                if ($("#start-date").val() != "") {
                    $("#start-date-validation").html("");
                }
            });

            $("#WarehouseIdMain").on("change", function () {
                if ($("#WarehouseIdMain").val() != "") {
                   $("#location-validation").html("");
                }
            });

        }
        if ('@transactionType' === "Credit-note") {
            var saveButton2 = document.getElementById('BtnSave-CreditClose');
            saveButton2.addEventListener('click', function () {
                if ($("#Customer").val() == "") {
                    $("#Customer-validation").html("Choose a Customer");
                }
                if ($("#start-date").val() == "") {
                    $("#start-date-validation").html("Please enter Credit Note Date");
                }
                if ($("#WarehouseIdMain").val() == "") {
                    $("#location-validation").html("Please select Location");
                }
                else {
                    sendDataToServerForCredit(); // Call sendDataToServer if all conditions are false
                }
            });
        }
        if ('@transactionType' === "Issue") {
            var saveButton2 = document.getElementById('BtnSaveIssue');
            saveButton2.addEventListener('click', function () {
                    sendDataToServerForIssue(); 
            });

            var saveButton3 = document.getElementById('BtnSaveIssue_Close');
            saveButton3.addEventListener('click', function () {
                    sendDataToServerForIssue(); 
            });
        }


    </script>
    @* --------------------- recurring purpose ------------------- *@
    <script>
        function recurringTypeCriteria() {
            var selectedValue = document.getElementById("RecurringType").value;

            if (selectedValue === "Scheduled") {
                document.getElementById("before-create-days").innerText = "Create";
                $("#create-days").removeClass("d-none");
                $("#after-create-days").removeClass("d-none");
                $("#IntervalDiv").removeClass("d-none");
            }
            if (selectedValue === "Reminder") {
                document.getElementById("before-create-days").innerText = "Remind";
                $("#create-days").removeClass("d-none");
                $("#after-create-days").removeClass("d-none");
                $("#IntervalDiv").removeClass("d-none");
            }
            if (selectedValue === "Unscheduled") {
                document.getElementById("before-create-days").innerText = "Unscheduled transactions don’t have timetables.";

                $("#create-days").addClass("d-none");
                $("#after-create-days").addClass("d-none");
                $("#IntervalDiv").addClass("d-none");
            }

        }

        function intervalCriteria() {
            var selectedValue = document.getElementById("Interval").value;

            if (selectedValue === 'Daily') {
                document.getElementById("before-every").innerText = "every";
                document.getElementById("after-interval").innerText = "day(s)";
                $("#every").removeClass("d-none");
                $("#Week").addClass("d-none");
                $("#Count").addClass("d-none");
                $("#Integer").addClass("d-none");
                $("#Month").addClass("d-none");
            }
            if (selectedValue === 'Weekly') {
                document.getElementById("before-every").innerText = "every";
                document.getElementById("after-interval").innerText = "week(s) on";
                $("#every").removeClass("d-none");
                $("#Week").removeClass("d-none");
                $("#Count").addClass("d-none");
                $("#Integer").addClass("d-none");
                $("#Month").addClass("d-none");

            }
            if (selectedValue === 'Monthly') {
                document.getElementById("before-every").innerText = "of every";
                document.getElementById("after-interval").innerText = "month(s) on";
                $("#every").removeClass("d-none");
                $("#Week").addClass("d-none");
                $("#Count").removeClass("d-none");
                $("#Integer").removeClass("d-none");
                $("#Month").addClass("d-none");
            }
            if (selectedValue === 'Yearly') {
                document.getElementById("before-every").innerText = "every";
                document.getElementById("after-interval").innerText = "";
                $("#every").addClass("d-none");
                $("#Week").addClass("d-none");
                $("#Count").addClass("d-none");
                $("#Integer").removeClass("d-none");
                $("#Month").removeClass("d-none");
            }
        }

        function limitCriteria() {
            var selectedValue = document.getElementById("End").value;

            if (selectedValue === 'None') {
                $("#recurringEndDiv").addClass("d-none");
                $("#occurencesDiv").addClass("d-none");
                $("#occurencesSpan").addClass("d-none");
            }
            if (selectedValue === 'By') {
                $("#recurringEndDiv").removeClass("d-none");
                $("#occurencesDiv").addClass("d-none");
                $("#occurencesSpan").addClass("d-none");
            }
            if (selectedValue === 'After') {
                $("#recurringEndDiv").addClass("d-none");
                $("#occurencesDiv").removeClass("d-none");
                $("#occurencesSpan").removeClass("d-none");
            }
        }

        function changeListForMonth() {
            var selectedValue = document.getElementById("Count").value;
            if (selectedValue === 'day') {
                $("#Week").addClass("d-none");
                $("#Count").removeClass("d-none");
                $("#Integer").removeClass("d-none");
                $("#Month").addClass("d-none");
            }
            else {
                $("#Week").removeClass("d-none");
                $("#Count").removeClass("d-none");
                $("#Integer").addClass("d-none");
                $("#Month").addClass("d-none");
            }
        }

        function makeRecurring() {
            $("#top-row").addClass("d-none");
            $("#makeRecurringDiv").addClass("d-none");
            $("#First-row-Recurring").removeClass("d-none");
            $("#IntervalDiv").removeClass("d-none");

        }
        function CommonInitToZero() {
            var data = table.getData();
            var data1 = table1.getData();
            var currencyRate = $("#CurrencyRate").val();
            data = data.map(function (row) {
                const defaultPrice = row.DefaultPrice / currencyRate;
                row.Price = defaultPrice.toFixed(4);
                if (row.DefaultPrice == undefined) {
                    row.Price = 0;
                }
                return row;
            });

            table.setData(data);
            setTaxAmount();
            // table1.clearData();
            var initvalue = 0
            document.getElementById("total-tax").textContent = initvalue.toFixed(4);
            document.getElementById("total").textContent = initvalue.toFixed(4);
            document.getElementById("subtotal").textContent = initvalue.toFixed(4);
            document.getElementById("taxable-subtotal").textContent = initvalue.toFixed(4);
            document.getElementById("totalInBDT").textContent = initvalue.toFixed(4);
        }

        if ('@actionType' === "Edit" || '@actionType' === "Create") {
            $("#Customer").on("select2:select", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#MultiiCurrencyId").val(data.CurrencyId);

                                $("#CurrencyRate").val(data.CurrencyRate);
                                if (previousRate !== "" && data.CurrencyRate !== 1) {
                                    CommonInitToZero();
                                } else if (data.CurrencyRate === 1 && previousRate !== "" && previousRate !== 1) {
                                    CommonInitToZero();
                                }
                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if ('@actionType' === "Create") {
                                    if (previousRate != data.CurrencyRate) {
                                        CommonInitToZero();
                                    }
                                }
                                else {
                                    CommonInitToZero();
                                }

                            }
                        }


                    }
                });
            });
        }
        if ('@actionType' === "Edit") {
            $("#Customer").on("change", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                //$("#CurrencyRate").val(1);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                //$("#CurrencyRate").val(data.CurrencyRate);

                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                //$("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                var totalText = document.getElementById("total").textContent;
                                var totalAmount = parseFloat(totalText.replace(",", ""));
                                var currencyRate = $("#CurrencyRate").val();
                                const amountTotalInBDT = document.getElementById("totalInBDT");
                                amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);
                            }
                        }


                    }
                });
            });
        }


        if ('@actionType' === "Edit" || '@actionType' === "Create") {
            $("#Customer_Delayed_Charge").on("select2:select", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate !== "" && data.CurrencyRate !== 1) {
                                    CommonInitToZero();
                                }
                                else if (data.CurrencyRate === 1 && previousRate !== "" && previousRate !== 1) {
                                    CommonInitToZero();
                                }
                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate != data.CurrencyRate) {
                                    CommonInitToZero();
                                }
                            }
                        }


                    }
                });
            });
        }

        if ('@actionType' === "Edit") {
            $("#Customer_Delayed_Charge").on("change", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                //$("#CurrencyRate").val(data.CurrencyRate);

                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                //$("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                var totalText = document.getElementById("total").textContent;
                                var totalAmount = parseFloat(totalText.replace(",", ""));
                                var currencyRate = $("#CurrencyRate").val();
                                const amountTotalInBDT = document.getElementById("totalInBDT");
                                amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);
                            }
                        }


                    }
                });
            });
        }

        if ('@actionType' === "Edit" || '@actionType' === "Create") {
            $("#Customer_CreditNote").on("select2:select", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate !== "" && data.CurrencyRate !== 1) {
                                    CommonInitToZero();
                                } else if (data.CurrencyRate === 1 && previousRate !== "" && previousRate !== 1) {
                                    CommonInitToZero();
                                }
                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate != data.CurrencyRate) {
                                    CommonInitToZero();
                                }
                            }
                        }


                    }
                });
            });
        }

        if ('@actionType' === "Edit") {
            $("#Customer_CreditNote").on("change", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                //$("#CurrencyRate").val(data.CurrencyRate);

                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                //$("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                var totalText = document.getElementById("total").textContent;
                                var totalAmount = parseFloat(totalText.replace(",", ""));
                                var currencyRate = $("#CurrencyRate").val();
                                const amountTotalInBDT = document.getElementById("totalInBDT");
                                amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);
                            }
                        }


                    }
                });
            });
        }

        if ('@actionType' === "Edit" || '@actionType' === "Create") {
            $("#Customer_Estimate").on("select2:select", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.length == 0) {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                $(".rate").text("BDT");
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(1);
                                $("#MultiiCurrencyId").val(18);
                                CommonInitToZero();

                            }
                            else {
                                if (data.CurrencyShortName == "BDT") {
                                    $("#yourRateParent").css("display", "none !important");
                                    $(".totalspan").css("display", "none !important");
                                    var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                    $(".flag").html(flag);
                                    $(".rate").text(data.CurrencyShortName);

                                    var previousRate = $("#CurrencyRate").val();
                                    $("#CurrencyRate").val(data.CurrencyRate);
                                    CommonInitToZero();

                                }
                                else {
                                    $("#yourRateParent").css("display", "");
                                    $(".totalspan").css("display", "");
                                    var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                    $(".flag").html(flag);
                                    $(".rate").text(data.CurrencyShortName);
                                    var previousRate = $("#CurrencyRate").val();
                                    $("#CurrencyRate").val(data.CurrencyRate);
                                    $("#MultiiCurrencyId").val(data.CurrencyId);
                                    if (previousRate != data.CurrencyRate) {
                                        CommonInitToZero();
                                    }
                                }
                            }

                        }


                    }
                });
            });
        }

        if ('@actionType' === "Edit") {
            $("#Customer_Estimate").on("change", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                //$("#CurrencyRate").val(data.CurrencyRate);

                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);

                                var previousRate = $("#CurrencyRate").val();
                                //$("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                var totalText = document.getElementById("total").textContent;
                                var totalAmount = parseFloat(totalText.replace(",", ""));
                                var currencyRate = $("#CurrencyRate").val();
                                const amountTotalInBDT = document.getElementById("totalInBDT");
                                amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);
                            }
                        }


                    }
                });
            });

            $("#Customer_Estimate").trigger("select2:select");
        }

        if ('@actionType' === "Edit" || '@actionType' === "Create") {
            $("#Customer_SalesOrder").on("select2:select", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate !== "" && data.CurrencyRate !== 1) {
                                    CommonInitToZero();
                                } else if (data.CurrencyRate === 1 && previousRate !== "" && previousRate !== 1) {
                                    CommonInitToZero();
                                }
                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate != data.CurrencyRate) {
                                    CommonInitToZero();
                                }
                            }
                        }


                    }
                });
            });
        }

        if ('@actionType' === "Edit") {
            $("#Customer_SalesOrder").on("change", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                //$("#CurrencyRate").val(data.CurrencyRate);

                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                //$("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                var totalText = document.getElementById("total").textContent;
                                var totalAmount = parseFloat(totalText.replace(",", ""));
                                var currencyRate = $("#CurrencyRate").val();
                                const amountTotalInBDT = document.getElementById("totalInBDT");
                                amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);
                            }
                        }


                    }
                });
            });
        }

        if ('@actionType' === "Edit" || '@actionType' === "Create") {
            $("#Customer_SalesReceipt").on("select2:select", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate !== "" && data.CurrencyRate !== 1) {
                                    CommonInitToZero();

                                } else if (data.CurrencyRate === 1 && previousRate !== "" && previousRate !== 1) {
                                    CommonInitToZero();
                                }
                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate != data.CurrencyRate) {
                                    CommonInitToZero();
                                }
                            }
                        }


                    }
                });
            });
        }
        if ('@actionType' === "Edit") {
            $("#Customer_SalesReceipt").on("change", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                //$("#CurrencyRate").val(data.CurrencyRate);

                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                //$("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                var totalText = document.getElementById("total").textContent;
                                var totalAmount = parseFloat(totalText.replace(",", ""));
                                var currencyRate = $("#CurrencyRate").val();
                                const amountTotalInBDT = document.getElementById("totalInBDT");
                                amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);
                            }
                        }


                    }
                });
            });
        }

        if ('@actionType' === "Edit" || '@actionType' === "Create") {
            $("#CustomerIssue").on("select2:select", function () {
                var selectedOption = $(this).find("option:selected");
                var CustomerId = selectedOption.val();
                console.log('Selected Currency ID:', CustomerId);

                $.ajax({
                    url: '@Url.Action("GetCurrencyRateForSales", "Admin")' + '?CustomerId=' + CustomerId + '&salesdate=' + $("#start-date").val(),
                    success: function (data) {
                        console.log("see currency", data);
                        if (data.success == "0") {
                            toastr.success(data.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else {
                            if (data.CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate !== "" && data.CurrencyRate !== 1) {
                                    CommonInitToZero();
                                } else if (data.CurrencyRate === 1 && previousRate !== "" && previousRate !== 1) {
                                    CommonInitToZero();
                                }
                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                var flag = '<i class="flag-icon ' + data.FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data.CurrencyShortName);
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(data.CurrencyRate);
                                $("#MultiiCurrencyId").val(data.CurrencyId);
                                if (previousRate != data.CurrencyRate) {
                                    CommonInitToZero();
                                }
                            }
                        }


                    }
                });
            });
        }

        var grrcolumns = [
            // { title: "SERVICE DATE", field: "SERVICE DATE", width: 200, editor: "input" },
            {
                headerSort: false,
                field: "drag",
                frozen: true,
                formatter: function (cell, formatterParams) {
                    return "<i class='fas fa-bars drag-icon'></i>";
                },
                width: 30,
                headerSort: false,
                rowHandle: true,


            },
            { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
            { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: 5, bottomCalc: "count", hozAlign: "right" },

            {
                title: "PRODUCT",
                field: "Name",
                //width: 200,
                hozAlign: "center",
                sorter: "number",
                headerFilter: "input",
            },
            {
                title: "Hidden Value",
                field: "ProductId",
                visible: false,
                editor: "input",
            },

            { title: "CategoryName", field: "CategoryName", movable: false, headerSort: false, visible: true, headerFilter: "input" },
            { title: "Desc", field: "Description", width: 180, headerFilter: "input" },
            {
                title: "Color",
                field: "ColorName",
                visible: true, headerFilter: "input"
            },
            {
                title: "Size",
                field: "SizeName",
                visible: true, headerFilter: "input"
            },
            {
                title: "Cost",
                field: "CostPrice",
                headerHozAlign: "center",
                hozAlign: "right",
                headerFilter: "input",
                visible: true,
                formatter: function (cell, formatterParams) {
                    // Format the Price column as currency
                    return formatCurrency(cell.getValue());
                },
            },
            {
                title: "MRP",
                field: "Price",
                headerHozAlign: "center",
                hozAlign: "center",
                visible: '@transactionType' !== "Issue",
                headerFilter: "input",
                formatter: function (cell, formatterParams) {
                    // Format the Price column as currency
                    return formatCurrency(cell.getValue());
                },
                
            },
            {
                title: "Location",
                titleFormatter: "html",
                field: "WHName",
                //width: 120,
                hozAlign: "center",
                sorter: "number",
                headerFilter: "input",
                visible: true
            },
            {
                title: "Hidden Value",
                field: "WarehouseId",
                visible: false,
                editor: "input",
            },
            {
                title: "Hidden Value",
                field: "PurchaseItemsId",
                visible: false,
            },
            { title: "Supplier PO", field: "SupplierPO", width: 180, headerFilter: "input" },
            { title: "Supplier Name", field: "SupplierName", width: 180, headerFilter: "input" },
            { title: "BuyerPO", field: "BuyerPO", width: 180, headerFilter: "input" },
            {
                title: "GRR QTY", field: "Quantity", hozAlign: "center", headerHozAlign: "center", headerFilter: "input", bottomCalc: "sum"
            },
            {
                title: "GRR Date", field: "GRRDate", hozAlign: "center", headerHozAlign: "center", headerFilter: "input"
            },
            {
                title: "Stock QTY", field: "StockQty", hozAlign: "center", headerHozAlign: "center", headerFilter: "input"
            },
            {
                title: "Stock", field: "Stock", hozAlign: "center", headerHozAlign: "center", headerFilter: "input"
            },
            //{ title: "RATE", field: "Price"},
            
            {
                title: "",
                field: "DefaultPrice",
                headerHozAlign: "center",
                hozAlign: "center",
                //width: 160,
                editor: "input",
                visible: false,
            },
            
            {
                title: "Discount",
                field: "IndDiscount",
                headerHozAlign: "center",
                hozAlign: "center",
                sorter: "date",
                editor: "input",                
                visible: '@transactionType' !== "Issue",
                
            },

            {
                title: "AMOUNT",
                field: "Amount",
                //width: 180,
                headerHozAlign: "center",
                hozAlign: "center",
                sorter: "date",
                visible: false,
                
            },
            {
                title: "TAX",
                field: "TAX",
                visible: false,
                hozAlign: "center",
                //width: 80,
                editor: "tickCross", // Use the "tickCross" editor to display a checkbox
                editorParams: {
                    tristate: true, // Allow for a third state (null) to represent an undefined value
                },
                formatter: "tickCross", // Display the checkbox in the grid
                formatterParams: {
                    allowEmpty: true, // Display an empty cell when the value is null
                },
            },
            {
                title: "TAX",
                field: "MasterTaxName",
                //width: 130,
                headerHozAlign: "center",
                hozAlign: "center",
                sorter: "number",
                editor: "select",
                visible: '@transactionType' !== "Issue",
                
            },
            {
                title: "Hidden Tax",
                field: "MasterTaxId",
                visible: false,
                editor: "input",
            }
        ];

        var grrTable = new Tabulator("#GRR-table", {
                layout: "fitColumns",
            columns: grrcolumns,
                selectable: 1,
                pagination: true,
                scrollHorizontal: true,
                paginationMode: "local",
                filterMode: "local",
                paginationSize: 5,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, true],
                paginationCounter: "rows",
                columnDefaults: {
                    resizable: true,
                },
            });


            grrTable.on("rowDblClick", function (e, row) {

                var rowData = row.getData();

                table.addData(rowData);

                // renumberRowsItem();
                // calculation();
                grrTable.deleteRow(row);
            });

        document.addEventListener("DOMContentLoaded", function () {
            const checkbox = document.getElementById("showGRRItem");
            const bdpoTable = document.getElementById("GRR-table");

            // Function to toggle the d-none class
            function toggleBDPOVisibility() {
                if (checkbox.checked) {
                    bdpoTable.classList.remove("d-none"); 
                } else {
                    bdpoTable.classList.add("d-none"); 
                }
            }

            // Initial check
            toggleBDPOVisibility();

            // Add event listener to the checkbox
            checkbox.addEventListener("change", toggleBDPOVisibility);
        });
    </script>
}


