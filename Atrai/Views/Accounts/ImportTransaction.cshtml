@model Atrai.Model.Core.Entity.Acc_VoucherTypeModel
@{
    ViewData["Title"] = "Voucher Type";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}

<link href="~/admin_theme_gtr/assets/css/multistep-custom.css" rel="stylesheet" />

<div class="mt-5 card">
    <div class="card-body">
        <div class="row d-flex justify-content-center align-items-center">
            <div class="col-md-10 offse-md-1">

                <form action="#" class="form" id="forms" onsubmit="event.preventDefault()">
                    <div class="progressbar">
                        <div class="progress" id="progress"></div>

                        <div class="progress-step progress-step-active" data-title="Upload"></div>
                        <div class="progress-step" data-title="Map Data"></div>
                        <div class="progress-step" data-title="Import"></div>
                        <div class="progress-step" data-title="Final ShowDown"></div>
                    </div>
                    <div class="step-forms step-forms-active">
                        <div class="row">
                            <div class="col-md-4 mt-5">
                                <div class="bg-style">
                                    <img src="~/assets/excel 1.png" alt="" style="float:left; margin-right: 15px;"><h6>Import from Manual Excel</h6>
                                    <p>Some guidlines are given... <i><a href="https://docs.google.com/document/d/19buokOuLAoNixMlynNyGP2Z2tDS3xdDV/edit?usp=share_link&ouid=116160212043922713437&rtpof=true&sd=true">Read more</a></i></p>
                                    <p>

                                        <div class="input-group my-4">
                                            @* <input type="file" class="form-control" id="inputGroupFile03">
                                            <button id="uploadButton" class="input-group-text ms-3 bg-white">Upload</button>*@
                                            @*<input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf">*@
                                            <input type="file" id="excel-file">

                                        </div>


                                    </p>


                                    <a href="https://docs.google.com/spreadsheets/d/1c7cqc2K2m6J7Kw3WRIo52edWU7zeP0-r/edit?usp=share_link&ouid=116160212043922713437&rtpof=true&sd=true">Download a sample file</a>
                                </div>
                            </div>

                            <div class="col-md-4 mt-5">
                                <div class=" bg-style">
                                    <img src="~/assets/tally_logo.png" alt="tally" style="float:left; margin-right: 15px; height: 30px; width: 30px;"><h6>Import XML file from Tally</h6>
                                    <p>Some guidlines are given...<i><a href="https://docs.google.com/document/d/19buokOuLAoNixMlynNyGP2Z2tDS3xdDV/edit?usp=share_link&ouid=116160212043922713437&rtpof=true&sd=true">Read more</a></i></p>
                                    <div class="input-group my-4">
                                        <input type="file" id="xml-file">
                                        @*<input type="file" class="form-control" id="inputGroupFile02">*@
                                        @*<label class="input-group-text ms-3 bg-white" for="inputGroupFile02">Connect</label>*@
                                    </div>

                                    <a href="#">Preview a sample</a>
                                </div>
                            </div>

                            <div class="col-md-4 mt-5">
                                <div class="bg-style">
                                    <img src="~/assets/quickbooks-online-logo-clipart.png" alt="quickbooks-online" style="float:left; margin-right: 15px; height: 30px; width: 30px;"><h6>Import Excel file from Quickbook</h6>
                                    <p>Some guidlines are given...<i><a href="https://docs.google.com/document/d/19buokOuLAoNixMlynNyGP2Z2tDS3xdDV/edit?usp=share_link&ouid=116160212043922713437&rtpof=true&sd=true">Read more</a></i></p>
                                    <p>

                                        <div class="input-group my-4">
                                            @* <input type="file" class="form-control" id="inputGroupFile03">
                                            <button id="uploadButton" class="input-group-text ms-3 bg-white">Upload</button>*@
                                            @*<input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf">*@
                                            <input type="file" id="quickbook-file">

                                        </div>


                                    </p>


                                    <a href="https://docs.google.com/spreadsheets/d/1c7cqc2K2m6J7Kw3WRIo52edWU7zeP0-r/edit?usp=share_link&ouid=116160212043922713437&rtpof=true&sd=true">Download a sample file</a>
                                </div>
                            </div>


                        </div>

                        <div class="row">
                            <div class="col-md-11">
                            </div>
                            <div class="col-md-1 mt-5 pt-5">
                                <a href="#" class="btn btn-primary" id="btn-next-upload">Next</a>
                            </div>
                        </div>
                    </div>
                    <div class="step-forms">
                        <h6>Map your fields to Atrai fields</h6>
                        <div class="row">
                            <div id="jsGridExcel">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-11  mt-5 pt-5">
                                <a href="#" class="btn btn-primary" id="btn-prev">Previous</a>
                            </div>
                            <div class="col-md-1 mt-5 pt-5">
                                <a href="#" class="btn btn-next-last btn-primary">Next</a>
                            </div>
                        </div>

                    </div>
                    <div class="step-forms">
                        <div class="row">
                            <div class="col-md-12">
                                <div id="jsGridImportData">
                                </div>
                                
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col-md-11  mt-5 pt-5">
                                <a href="#" class="btn btn-primary" id="btn-prev">Previous</a>
                            </div>
                            <div class="col-md-1 mt-5 pt-5">
                                <a href="#" class="btn btn-primary" id="next-form">Next</a>
                                
                            </div>
                        </div>
                        
                    </div>
                    <div class="step-forms">
                        <div class="row">
                            <div class="col-md-12">
                                <div id="jsGridFinalShowdown">
                                </div>
                                
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col-md-11  mt-5 pt-5">
                                <input type="button" class="btn btn-primary btn-sm" value="Back To List" onclick="@("window.location.href='" + @Url.Action("VoucherList", "Accounts") + "'");" />
                            </div>
                            <div class="col-md-1 mt-5 pt-5">
                                @*<input type="submit" value="Save the List" id="submit-form" class="btn btn-primary" />*@
                                <button id="submit-form" class="btn btn-primary">Save</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts{


    <script type="text/javascript">
        const prevBtns = document.querySelectorAll(".btn-prev");
        const lastBtn = document.querySelectorAll("#next-form");
        //const nextBtns = document.querySelectorAll(".btn-next");
        const nextBtnsLast = document.querySelectorAll(".btn-next-last");
        const nextBtnsuploader = document.querySelectorAll("#btn-next-upload");
        const progress = document.getElementById("progress");
        const formSteps = document.querySelectorAll(".step-forms");
        const progressSteps = document.querySelectorAll(".progress-step");

        //datatable

        $(document).ready(function () {


            var ResponseData;
            var ResponseDataXml;

            var totalDebit = 0.00;
            var totalCredit = 0.00;

            var AccuountHeadList = [];
            $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("GetAccountDropdown", "Admin")',
                //  data: { VoucherType: "Cash Payment" },

                success: function (data) {
                    console.log(data);
                    for (var i = 0; i < data.length; i++) {
                        ListAll = {
                            Text: data[i].Text,
                            Value: parseInt(data[i].Value)
                        };

                        AccuountHeadList.push(ListAll);
                    }
                }
            });


            var AccountTypeList = [

                { Text: 'Ledger', Value: 'L' },
                { Text: 'Group', Value: 'G' }
            ]


            var ExtractHeader = [];

            function calculation(){
                totalDebit = 0.00;
                totalCredit = 0.00;
                var items = $('#jsGridImportData').jsGrid('option', 'data');


                items.forEach(function (item) {
                    if (item.AccId != null) {
                   
                        totalDebit += parseFloat(item.Debit);
                        totalCredit += parseFloat(item.Credit);
                    }


                });
                console.log(totalDebit);
                console.log(totalCredit);
                $('#totalDebit').text(totalDebit);
                $('#totalCredit').text(totalCredit);
               
               
            }

            function calculationExcel() {
                totalDebit = 0.00;
                totalCredit = 0.00;
                var itemsExcel = $('#jsGridImportData').jsGrid('option', 'data');
                if (!Array.isArray(itemsExcel)) {
                    console.error('The data returned from jsGrid is not an array:', itemsExcel);
                    return;
                }

                itemsExcel.forEach(function (item) {
                    if (item.AccId !="") {

                        totalDebit += parseFloat(item.Debit);
                        totalCredit += parseFloat(item.Credit);
                    }


                });
                console.log(totalDebit);
                console.log(totalCredit);
                $('#totalDebit').text(totalDebit);
                $('#totalCredit').text(totalCredit);


            }
             function calculationQuickbook(){
                totalDebit = 0.00;
                totalCredit = 0.00;
                var items = $('#jsGridImportData').jsGrid('option', 'data');

                console.log(items);
                items.forEach(function (item) {
                    if(item.Debit!=""){
                        totalDebit += parseFloat(item.Debit);
                    }
                    if(item.Credit!=""){
                         totalCredit += parseFloat(item.Credit);
                    }   
                        
                    console.log(totalDebit);
                });
                console.log(totalDebit);
                console.log(totalCredit);
                $('#totalDebit').text(totalDebit);
                $('#totalCredit').text(totalCredit);
               
               
            }
            //$('#jsGridImportData').jsGrid({
            //    width: "100%",
            //    height: "auto",
            //    editing: true,
            //    inserting: true,
            //    autoload: true,
            //    pageSize: 3,
            //    pageLoading: true,
            //    pageIndex: 1,
            //    paging: true,
            //    deleteButton: true,
            //    confirmDeleting: true,
            //    deleteConfirm: "Are you sure?",
            //    controller: {

            //        insertItem: function (args) {
            //            ResponseData.push(args);
            //        },

            //        deleteItem: function (args) {

            //            const indexToRemove = ResponseData.findIndex((item) =>
            //                item.AccName === args.AccName &&
            //                item.OP_Date === args.OP_Date &&
            //                item.OP_Balance === args.OP_Balance &&
            //                item.AccCategory === args.AccCategory &&
            //                item.AccGroup === args.AccGroup &&
            //                item.Type === args.Type

            //            );
            //            ResponseData.splice(indexToRemove, 1);
            //            $('#jsGridImportData').jsGrid('loadData');
            //        }
            //    },

            //    fields: [
            //        { name: "AccName", title: 'Account Head', type: 'text' },
            //        {
            //            name: "OP_Date",
            //            title: 'Opening Date',
            //            type: 'text',
            //            width: 150,
            //            filtering: false,
            //            editing: true,
            //            insertTemplate: function () {
            //                var $result = jsGrid.fields.text.prototype.insertTemplate.call(this);
            //                $result.datepicker({
            //                    dateFormat: "d-mm-y"
            //                });
            //                return $result;
            //            },
            //            editTemplate: function (value) {
            //                var $result = jsGrid.fields.text.prototype.editTemplate.call(this, value);
            //                $result.datepicker({
            //                    dateFormat: "d-mm-y"
            //                });
            //                return $result;
            //            },
            //            insertValue: function () {
            //                return this.val();
            //            }//,
            //            //editValue: function (args) {
            //            //    console.log(args);
            //            //    return this.val();
            //            //}
            //        },
            //        { name: "OP_Balance", title: 'Opening Balance', type: 'text' },
            //        { name: "AccCategory", title: 'Account Category[Excel]', type: 'label' },
            //        { name: "AccGroup", title: 'Account Group[Excel]', type: 'label' },
            //        { name: "AccCategoryList", title: 'Account Category', type: 'select', items: CategoryList, valueField: "Value", textField: "Text", width: 100, visible: true },
            //        { name: "AccGroupList", title: 'Account Group', type: 'select', items: AccuountHeadList, valueField: "Value", textField: "Text", width: 100, visible: true },
            //        { name: "Type", title: 'Account Type', type: 'select', items: AccountTypeList, valueField: "Value", textField: "Text", width: 100, visible: true },
            //        { type: "control", width: '80', title: 'Action' }
            //    ]

            //    ,
            //    onItemInserted: function (args) {
            //        var s = $.isNumeric(args.item.OP_Balance);
            //        if (s == false) {
            //            args.cancel = true;
            //            alert('Put a valid opening balance');

            //            $("#jsGridImportData").jsGrid("editItem", args.item);
            //        }
            //    },
            //    onItemUpdating: function (args) {
            //        var s = $.isNumeric(args.item.OP_Balance);
            //        if (s == false) {
            //            args.cancel = true;
            //            alert('Put a valid opening balance');

            //            $("#jsGridImportData").jsGrid("editItem", args.item);
            //        }

            //    },
            //    onItemDeleted: function (args) {
            //        console.log(args);
            //        $("#jsGridImportData").jsGrid("refresh");
            //    }
            //});
            let formStepsNum = 0;
            prevBtns.forEach((btn) => {
                btn.addEventListener("click", () => {
                    // Decrement formStepsNum
                    formStepsNum--;
                    // Update the form steps and progress bar
                    updateFormSteps(formStepsNum);
                    updateProgressbar();
                });
            });
             var inputFile = $('#excel-file')[0];
                    var inputXmlFile = $('#xml-file')[0];
            var quickbook = $('#quickbook-file')[0];
            nextBtnsuploader.forEach((btn) => {
                btn.addEventListener("click", () => {

                  
                   

                    if (quickbook.files.length > 0 && quickbook.files[0].size > 0) {
                        formStepsNum++;
                        updateFormSteps(formStepsNum);
                        updateProgressbar();
                        var quickbookFile = $('#quickbook-file')[0].files[0];

                        var formData = new FormData();
                        formData.append('file', quickbookFile);

                        $.ajax({
                            url: '@Url.Action("ImportQuickbookTransaction", "Accounts")',
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                console.log(data);
                                for (var i = 0; i < data.length; i++) {
                                    imeiListAll = {
                                        Text: data[i].Text,
                                        Value: parseInt(data[i].Value)
                                    };

                                    ExtractHeader.push(imeiListAll);
                                }


                                var length = 0;
                                $('#jsGridExcel').jsGrid({
                                    width: "100%",
                                    height: "auto",

                                    editing: true,
                                    autoload: true,
                                    pageSize: 3,
                                    pageLoading: true,
                                    pageIndex: 1,
                                    paging: true,
                                    controller: {
                                        loadData: function (filter) {
                                            console.log(filter);
                                            var d = $.Deferred();
                                            $.ajax({
                                                type: "GET",
                                                url: '@Url.Action("GetTransactionQuickbookList", "Accounts")',

                                                contentType: "application/json; charset=utf-8",
                                                dataType: "json"
                                            })

                                                .done(function (result) {
                                                    console.log(result);
                                                    d.resolve(result);
                                                });
                                            return d.promise().then(function (q) {

                                                length = q.length;
                                                return {

                                                    data: q

                                                }
                                            });
                                        }
                                    },
                                    fields: [
                                        { name: "AtraiColumn", title: 'Atrai Column' },
                                        { name: "ExcelColumn", title: 'Excel Column', type: "select", items: ExtractHeader, valueField: "Text", textField: "Text", width: 100, visible: true },
                                        { name: "DefaultValues", title: 'Default Values', type: 'text' },
                                        { type: "control", width: '80', title: 'Action' },

                                    ],
                                    onItemUpdated: function (args) {
                                        if (args.item.ExcelColumn) {

                                        }
                                    }

                                });



                            }
                        });
                    }







                   else if (inputXmlFile.files.length > 0 && inputXmlFile.files[0].size > 0) {
                        formStepsNum += 2;
                        updateFormSteps(formStepsNum);
                        updateProgressbar();
                        var xmlFile = $('#xml-file')[0].files[0];
                        var formData = new FormData();

                        formData.append('file', xmlFile);
                        console.log(formData);
                        $.ajax({
                            url: '@Url.Action("ImportTransactionXml", "Accounts")',
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                ResponseDataXml = data;
                                console.log(ResponseDataXml);

                                $('#jsGridImportData').jsGrid({
                                    width: "100%",
                                    height: "auto",
                                    data: ResponseDataXml,
                                    editing: true,
                                    inserting: true,
                                    autoload: true,
                                    pageSize: 3,
                                    pageLoading: true,
                                    pageIndex: 1,
                                    paging: true,
                                    pagination: true,
                                    deleteButton: true,
                                    confirmDeleting: true,
                                    deleteConfirm: "Are you sure?",
                                    controller: {

                                        insertItem: function (args) {
                                            ResponseDataXml.push(args);
                                        },

                                        deleteItem: function (item) {
                                            var voucherId = item.VoucherID;
                                            

                                            // Loop through the remaining rows and delete any with the same VoucherId
                                            var items = $('#jsGridImportData').jsGrid('option','data');
                                            for (var i = items.length - 1; i >= 0; i--) {
                                                if (items[i].VoucherID === voucherId) {

                                                    items.splice(i, 1);
                                                }
                                            }
                                            $("#jsGridImportData").jsGrid("refresh");
                                        }
      






                                    },

                                    fields: [
                                        { name: "VoucherID", title: 'Voucher Id', type: 'text',visible: true },
                                        { name: "Guid", title: 'Guid', type: 'text', visible: false },
                                        {
                                            name: "VoucherDate",
                                            title: 'Voucher Date',
                                            type: 'text',
                                            width: 150,
                                            filtering: false,
                                            editing: true,
                                            insertTemplate: function () {
                                                var $result = jsGrid.fields.text.prototype.insertTemplate.call(this);
                                                $result.datepicker({
                                                    dateFormat: "d-MM-y"
                                                });
                                                return $result;
                                            },
                                            editTemplate: function (value) {
                                                var $result = jsGrid.fields.text.prototype.editTemplate.call(this, value);
                                                $result.datepicker({
                                                    dateFormat: "d-MM-y"
                                                });
                                                return $result;
                                            },
                                            insertValue: function () {
                                                return this.val();
                                            }//,
                                            //editValue: function (args) {
                                            //    console.log(args);
                                            //    return this.val();
                                            //}
                                        },
                                        { name: "VoucherNo", title: 'Voucher No', type: 'text' },
                                        { name: "VoucherType", title: 'Voucher Type', type: 'text' },
                                        { name: "Narration", title: 'Narration', type: 'label' },
                                        { name: "note1", title: 'Note 1', type: 'label' },
                                        { name: "note2", title: 'Note 2', type: 'label' },
                                        { name: "LedgerName", title: 'Ledger Name', width: 100, visible: true },
                                       // { name: "AccId", title: 'Atrai Account', type: "select", items: AccuountHeadList, textField: "AccName", valueField: "AccId", width: 100, visible: true },
                                        { name: "AccId", title: 'Atrai Account', type: "text", width: 100, visible: true },
                                        { name: "Debit", title: 'Debit', type: 'text', visible: true },
                                        { name: "Credit", title: 'Credit', type: 'text', visible: true },
                                        { name: "Remarks", title: 'Remarks', type: 'text', visible: true },
                                        { type: "control", width: '80', title: 'Action' }
                                    ],

                                    onItemDeleted: function (args) {
                                        console.log('deleted');
                                        calculation();
                                        console.log(totalCredit,totalDebit);
                                        $("#jsGridImportData").jsGrid("refresh");
                                    },
                                    //removeRow: function (item) {
                                    //    var index = this._items.indexOf(item);
                                    //    if (index >= 0) {
                                    //        this._items.splice(index, 1);
                                    //        this._refreshGrid();
                                    //    }
                                    //},
                                    onRefreshed: function(args){
                                        
                                        var items = $('#jsGridImportData').jsGrid('option', 'data');
                                        console.log('refreshed');
                                        calculation();
                                        console.log(totalCredit,totalDebit);
                                         args.grid._content.append("<tr><td  colspan=8><strong id=totalDebit >Total Entries (" + items.length + ")</strong></td>"
                    + "<td class=text-end><strong id=totalDebit >" + totalDebit + "</strong></td><td class=text-end><strong id=totalCredit >" + totalCredit + " </strong></td>");

                                    }
                                });
                                //$("#jsGridImportData").jsGrid("loadData");

                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                console.log(xhr.responseText);
                            }
                        });





                    }

                    else if (inputFile.files.length > 0 && inputFile.files[0].size > 0) {
                        formStepsNum++;
                        updateFormSteps(formStepsNum);
                        updateProgressbar();
                        var excelFile = $('#excel-file')[0].files[0];

                        var formData = new FormData();
                        formData.append('file', excelFile);

                        $.ajax({
                            url: '@Url.Action("ImportExcelTransaction", "Accounts")',
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                console.log(data);
                                for (var i = 0; i < data.length; i++) {
                                    imeiListAll = {
                                        Text: data[i].Text,
                                        Value: parseInt(data[i].Value)
                                    };

                                    ExtractHeader.push(imeiListAll);
                                }


                                var length = 0;
                                $('#jsGridExcel').jsGrid({
                                    width: "100%",
                                    height: "auto",

                                    editing: true,
                                    autoload: true,
                                    pageSize: 3,
                                    pageLoading: true,
                                    pageIndex: 1,
                                    paging: true,
                                    controller: {
                                        loadData: function (filter) {
                                            console.log(filter);
                                            var d = $.Deferred();
                                            $.ajax({
                                                type: "GET",
                                                url: '@Url.Action("GetTransactionMappingList", "Accounts")',

                                                contentType: "application/json; charset=utf-8",
                                                dataType: "json"
                                            })

                                                .done(function (result) {
                                                    console.log(result);
                                                    d.resolve(result);
                                                });
                                            return d.promise().then(function (q) {

                                                length = q.length;
                                                return {

                                                    data: q

                                                }
                                            });
                                        }
                                    },
                                    fields: [
                                        { name: "AtraiColumn", title: 'Atrai Column' },
                                        { name: "ExcelColumn", title: 'Excel Column', type: "select", items: ExtractHeader, valueField: "Text", textField: "Text", width: 100, visible: true },
                                        { name: "DefaultValues", title: 'Default Values', type: 'text' },
                                        { type: "control", width: '80', title: 'Action' },

                                    ],
                                    onItemUpdated: function (args) {
                                        if (args.item.ExcelColumn) {
                                          
                                        }
                                    }

                                });


                                
                            }
                        });
                    }
                    else {
                        alert('select a file first');
                    }



                });
            });






            nextBtnsLast.forEach((btn) => {
                btn.addEventListener("click", () => {

                    formStepsNum++;
                    updateFormSteps(formStepsNum);
                    updateProgressbar();


                    if(quickbook.files.length > 0 && quickbook.files[0].size > 0){

                    var itemspay = ($('#jsGridExcel').jsGrid('option', 'data'));
                    console.log(itemspay);
                    $.ajax({
                        async: false,
                        url: "@Url.Action("GetImportQuickbookTransactionData", "Accounts")",
                        type: "POST",
                        data: JSON.stringify(itemspay),
                        contentType: "application/json",
                        success: function (response) {
                            console.log(response);

                            $('#jsGridImportData').jsGrid({
                                width: "100%",
                                height: "auto",
                                data: response,
                                editing: true,
                                inserting: true,
                                autoload: true,
                                pageSize: 3,
                                pageLoading: true,
                                pageIndex: 1,
                                paging: true,
                                pagination: true,
                                pagerFormat: "Pages: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} of {pageCount}",
                                deleteButton: true,
                                confirmDeleting: true,
                                deleteConfirm: "Are you sure?",
                                controller: {

                                    insertItem: function (args) {
                                        ResponseDataXml.push(args);
                                    },

                                    deleteItem: function (item) {
                                        var VoucherId = item.VoucherID;


                                        // Loop through the remaining rows and delete any with the same VoucherId
                                        var items = $('#jsGridImportData').jsGrid('option', 'data');
                                        for (var i = items.length - 1; i >= 0; i--) {
                                                if (items[i].VoucherID === VoucherId) {

                                                items.splice(i, 1);
                                            }
                                        }
                                        $("#jsGridImportData").jsGrid("refresh");
                                    }







                                },

                                fields: [
                                    { name: "VoucherID", title: 'Voucher Id', type: 'text', visible: true },
                                    {
                                        name: "VoucherDate",
                                        title: 'Voucher Date',
                                        type: 'text',
                                        width: 150,
                                        filtering: false,
                                        editing: true,
                                        insertTemplate: function () {
                                            var $result = jsGrid.fields.text.prototype.insertTemplate.call(this);
                                            $result.datepicker({
                                                dateFormat: "d-MM-y"
                                            });
                                            return $result;
                                        },
                                        editTemplate: function (value) {
                                            var $result = jsGrid.fields.text.prototype.editTemplate.call(this, value);
                                            $result.datepicker({
                                                dateFormat: "d-MM-y"
                                            });
                                            return $result;
                                        },
                                        insertValue: function () {
                                            return this.val();
                                        }//,
                                        //editValue: function (args) {
                                        //    console.log(args);
                                        //    return this.val();
                                        //}
                                    },
                                    { name: "VoucherNo", title: 'Voucher No', type: 'text' },
                                    { name: "VoucherType", title: 'Voucher Type', type: 'text' },
                                    { name: "Narration", title: 'Narration', type: 'label' },
                                    { name: "note1", title: 'Note 1', type: 'label' },
                                   
                                    { name: "LedgerName", title: 'Ledger Name', width: 100, visible: true },
                                    // { name: "AccId", title: 'Atrai Account', type: "select", items: AccuountHeadList, textField: "AccName", valueField: "AccId", width: 100, visible: true },
                                    { name: "AccId", title: 'Atrai Account', type: "text", width: 100, visible: true },
                                    { name: "Debit", title: 'Debit', type: 'text', visible: true },
                                    { name: "Credit", title: 'Credit', type: 'text', visible: true },
                                    { type: "control", width: '80', title: 'Action' }
                                ],

                                onItemDeleted: function (args) {
                                    console.log('deleted');
                                    calculationQuickbook();
                                    console.log(totalCredit, totalDebit);
                                    $("#jsGridImportData").jsGrid("refresh");
                                },
                                //removeRow: function (item) {
                                //    var index = this._items.indexOf(item);
                                //    if (index >= 0) {
                                //        this._items.splice(index, 1);
                                //        this._refreshGrid();
                                //    }
                                //},
                                onRefreshed: function (args) {

                                    var items = $('#jsGridImportData').jsGrid('option', 'data');
                                    console.log('refreshed');
                                    calculationQuickbook();
                                    console.log(totalCredit, totalDebit);
                                    args.grid._content.append("<tr><td  colspan=7><strong id=totalDebit >Total Entries (" + items.length + ")</strong></td>"
                                        + "<td class=text-end><strong id=totalDebit >" + totalDebit + "</strong></td><td class=text-end><strong id=totalCredit >" + totalCredit + " </strong></td>");

                                }
                            });
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            console.log(xhr.responseText);
                        }
                    });
                        
                    }

                  else  {

                    var itemspay = ($('#jsGridExcel').jsGrid('option', 'data'));
                    console.log(itemspay);
                    $.ajax({
                        async: false,
                        url: "@Url.Action("GetImportTransactionData", "Accounts")",
                        type: "POST",
                        data: JSON.stringify(itemspay),
                        contentType: "application/json",
                        success: function (response) {
                            console.log(response);

                            $('#jsGridImportData').jsGrid({
                                width: "100%",
                                height: "auto",
                                data: response,
                                editing: true,
                                inserting: true,
                                autoload: true,
                                pageSize: 3,
                                pageLoading: true,
                                pageIndex: 1,
                                paging: true,
                                pagination: true,
                                deleteButton: true,
                                confirmDeleting: true,
                                deleteConfirm: "Are you sure?",
                                controller: {

                                    insertItem: function (args) {
                                        ResponseDataXml.push(args);
                                    },

                                    deleteItem: function (item) {
                                        var voucherId = item.VoucherID;


                                        // Loop through the remaining rows and delete any with the same VoucherId
                                        var items = $('#jsGridImportData').jsGrid('option', 'data');
                                        for (var i = items.length - 1; i >= 0; i--) {
                                            if (items[i].VoucherID === voucherId) {

                                                items.splice(i, 1);
                                            }
                                        }
                                        $("#jsGridImportData").jsGrid("refresh");
                                    }







                                },

                                fields: [
                                    { name: "VoucherID", title: 'Voucher Id', type: 'text', visible: true },
                                   
                                    {
                                        name: "VoucherDate",
                                        title: 'Voucher Date',
                                        type: 'text',
                                        width: 150,
                                        filtering: false,
                                        editing: true,
                                        insertTemplate: function () {
                                            var $result = jsGrid.fields.text.prototype.insertTemplate.call(this);
                                            $result.datepicker({
                                                dateFormat: "d-MM-y"
                                            });
                                            return $result;
                                        },
                                        editTemplate: function (value) {
                                            var $result = jsGrid.fields.text.prototype.editTemplate.call(this, value);
                                            $result.datepicker({
                                                dateFormat: "d-MM-y"
                                            });
                                            return $result;
                                        },
                                        insertValue: function () {
                                            return this.val();
                                        }//,
                                        //editValue: function (args) {
                                        //    console.log(args);
                                        //    return this.val();
                                        //}
                                    },
                                    { name: "VoucherNo", title: 'Voucher No', type: 'text' },
                                    { name: "VoucherType", title: 'Voucher Type', type: 'text' },
                                    { name: "Narration", title: 'Narration', type: 'label' },
                                    { name: "note1", title: 'Note 1', type: 'label' },
                                    { name: "note2", title: 'Note 2', type: 'label' },
                                    { name: "LedgerName", title: 'Ledger Name', width: 100, visible: true },
                                    // { name: "AccId", title: 'Atrai Account', type: "select", items: AccuountHeadList, textField: "AccName", valueField: "AccId", width: 100, visible: true },
                                    { name: "AccId", title: 'Atrai Account', type: "text", width: 100, visible: true },
                                    { name: "Debit", title: 'Debit', type: 'text', visible: true },
                                    { name: "Credit", title: 'Credit', type: 'text', visible: true },
                                    { name: "Remarks", title: 'Remarks', type: 'text', visible: true },
                                    { type: "control", width: '80', title: 'Action' }
                                ],

                                onItemDeleted: function (args) {
                                    console.log('deleted');
                                    calculationExcel();
                                    console.log(totalCredit, totalDebit);
                                    $("#jsGridImportData").jsGrid("refresh");
                                },
                                //removeRow: function (item) {
                                //    var index = this._items.indexOf(item);
                                //    if (index >= 0) {
                                //        this._items.splice(index, 1);
                                //        this._refreshGrid();
                                //    }
                                //},
                                onRefreshed: function (args) {

                                    var items = $('#jsGridImportData').jsGrid('option', 'data');
                                    console.log('refreshed');
                                    calculationExcel();
                                    console.log(totalCredit, totalDebit);
                                    args.grid._content.append("<tr><td  colspan=8><strong id=totalDebit >Total Entries (" + items.length + ")</strong></td>"
                                        + "<td class=text-end><strong id=totalDebit >" + totalDebit + "</strong></td><td class=text-end><strong id=totalCredit >" + totalCredit + " </strong></td>");

                                }
                            });
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            console.log(xhr.responseText);
                        }
                    });

                    }

                    //deleteItem: function (args) {

                    //    const indexToRemove = ResponseData.findIndex((pl) => pl.AccName === args.AccName);   // && pl.OP_Date === args.OP_Date && pl.OP_Balance === args.OP_Balance && pl.AccCategory === args.AccCategory && pl.AccGroup === args.AccGroup
                    //    ResponseData.splice(indexToRemove, 1);

                    //},
                    

                });
            });




              lastBtn.forEach((btn) => {
                btn.addEventListener("click", () => {

                    formStepsNum++;
                    updateFormSteps(formStepsNum);
                    updateProgressbar();

                    var importFrom='';

                    var Null = 0;
                    var items = $('#jsGridImportData').jsGrid('option', 'data');
                    for (var i = items.length - 1; i >= 0; i--) {
                        if (items[i].AccId === null || items[i].AccId === "") {
                            console.log('null');
                            Null = 1;
                            break;
                        }
                    }
                   // if (totalDebit == totalCredit && Null == 0) {
                        var importedData = $('#jsGridImportData').jsGrid('option', 'data');
                        if (importedData.length > 0) {
                            var JsonimportedData = JSON.stringify(importedData);
                           
                            if (inputXmlFile.files.length > 0 && inputXmlFile.files[0].size > 0) {
                                importFrom='Tally XML';

                            }
                            else if (inputFile.files.length > 0 && inputFile.files[0].size > 0) {
                               importFrom='Manual Excel';
                            }
                        else if (quickbook.files.length > 0 && quickbook.files[0].size > 0) {
                            importFrom='Quickbook Excel';
                            }
                            $.ajax({
                                async: false,
                                url: "@Url.Action("PostTransactionImportData", "Accounts")",
                                type: "POST",
                                data: JSON.stringify({ importedData: importedData, importFrom: importFrom }),
                                contentType: "application/json; charset=utf-8",
                                success: function (response) {
                                    console.log(response);

                                    $('#jsGridFinalShowdown').jsGrid({
                                        width: "100%",
                                        height: "auto",
                                        data: response,
                                        editing: true,
                                        inserting: true,
                                        autoload: true,
                                        pageSize: 3,
                                        pageLoading: true,
                                        pageIndex: 1,
                                        paging: true,

                                        fields: [
                                            { name: "VoucherID", title: 'Voucher Id', type: 'label' },
                                            {
                                                name: "VoucherDate",
                                                title: 'Voucher Date',
                                                type: 'label'
                                            },
                                            { name: "Debit", title: 'Debit', type: 'label' },
                                            { name: "Credit", title: 'Credit', type: 'label' },
                                            { name: "LedgerName", title: 'LedgerName', type: 'label' },
                                            { name: "Narration", title: 'Narration', type: 'label' },
                                            { name: "VoucherType", title: 'Voucher Type', type: 'label' },
                                            { name: "AccId", title: 'Atrai Account', type: 'label' },
                                            { name: "Remarks", title: 'Remarks', type: 'label' },
                                            { name: "ImportFrom", title: 'Import From', type: 'label' }
                                        ]

                                    });
                                }
                            });
                            
                            console.log(importedData);
                        console.log(' console.log(importedData);');
                            
                           
                            
                           


                           
                        }


                   // }

                    //else {
                    //    alert("Import Data Correctly");
                    //}



                    

                });
            });





            document.getElementById("submit-form").addEventListener("click", function () {

                progressSteps.forEach((progressStep, idx) => {
                    if (idx <= formStepsNum) {

                        progressStep.classList.add("progress-step-check");
                    } else {

                        progressStep.classList.remove("progress-step-check");
                    }
                });

           

            });

            //document.getElementById("next-form").addEventListener("click", function () {
            //    var Null = 0;
            //    var items = $('#jsGridImportData').jsGrid('option', 'data');
            //    for (var i = items.length - 1; i >= 0; i--) {
            //        if (items[i].AccId === null || items[i].AccId === "") {
            //            console.log('null');
            //            Null=1;
            //            break;
            //        }
            //    }
            //    if(totalDebit==totalCredit && Null==0){
            //        var importedData = $('#jsGridImportData').jsGrid('option', 'data');
            //        if (importedData.length > 0) {
            //            var JsonimportedData = JSON.stringify(importedData);
            //            console.log(importedData);
            //            console.log(JsonimportedData);
            //             if (inputXmlFile.files.length > 0 && inputXmlFile.files[0].size > 0) {
            //                $.ajax({
            //                        async: false,
            //                        url: "@Url.Action("PostImportXMLData", "Accounts")",
            //                        type: "POST",
            //                        data: JSON.stringify(importedData),
            //                        contentType: "application/json",
            //                        success: function (response) {
            //                            console.log(response);
            //                            responseData=response;   
            //                        }
            //                     });
            //               }
            //              else if (inputFile.files.length > 0 && inputFile.files[0].size > 0) {
            //                $.ajax({
            //                    async: false,
            //                    url: "@Url.Action("PostTransactionImportData", "Accounts")",
            //                    type: "POST",
            //                    data: JSON.stringify(importedData),
            //                    contentType: "application/json",
            //                    success: function (response) {
            //                        console.log(response);
            //                        $('#jsGridFinalShowdown').jsGrid({
            //                            width: "100%",
            //                            height: "auto",
            //                            data: response,
            //                            editing: true,
            //                            inserting: true,
            //                            autoload: true,
            //                            pageSize: 3,
            //                            pageLoading: true,
            //                            pageIndex: 1,
            //                            paging: true,

            //                            fields: [
            //                                { name: "VoucherID", title: 'Voucher Id', type: 'text' },
            //                                {
            //                                    name: "VoucherDate",
            //                                    title: 'Voucher Date',
            //                                    type: 'label'
            //                                },
            //                                { name: "Debit", title: 'Debit', type: 'label' },
            //                                { name: "Credit", title: 'Credit', type: 'label' },
            //                                { name: "LedgerName", title: 'LedgerName', type: 'label' },
            //                                { name: "Narration", title: 'Narration', type: 'label' },
            //                                { name: "VoucherType", title: 'Voucher Type', type: 'label' },
            //                                { name: "AccId", title: 'Atrai Account', type: 'label' }
            //                            ]

            //                        });
            //                    }
            //                });
            //               }

                        
            //            progressSteps.forEach((progressStep, idx) => {
            //                if (idx <= formStepsNum) {

            //                    progressStep.classList.add("progress-step-check");
            //                } else {

            //                    progressStep.classList.remove("progress-step-check");
            //                }
            //            });

            //            //var forms = document.getElementById("forms");
            //            //forms.classList.remove("form");
            //            //forms.innerHTML = '<div class="welcome"><div class="content"><svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52"><circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none"/><path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/></svg><h2>Thanks for Import!</h2><div></div>';

            //    }
                

            //    }
                
            //    else {
            //        alert("Import Data Correctly");
            //    }




            //});







            function updateFormSteps(formStepsNum) {
                formSteps.forEach((formStep) => {
                    formStep.classList.contains("step-forms-active") &&
                        formStep.classList.remove("step-forms-active");
                });

                //console.log(formStepsNum);
                //formSteps[formStepsNum].classList.add("step-forms-active");
                console.log(formStepsNum);
                console.log(formSteps.length);

                if (formSteps[formStepsNum]) {
                    formSteps[formStepsNum].classList.add("step-forms-active");
                }

            }

            function updateProgressbar() {
                progressSteps.forEach((progressStep, idx) => {
                    if (idx < formStepsNum + 1) {
                        progressStep.classList.add("progress-step-active");

                    } else {
                        progressStep.classList.remove("progress-step-active");

                    }
                });

                progressSteps.forEach((progressStep, idx) => {
                    if (idx < formStepsNum) {

                        progressStep.classList.add("progress-step-check");
                    } else {

                        progressStep.classList.remove("progress-step-check");
                    }
                });

                const progressActive = document.querySelectorAll(".progress-step-active");

                progress.style.width =
                    ((progressActive.length - 1) / (progressSteps.length - 1)) * 100 + "%";
            }



            $('#importTable').DataTable({
                dom: "'<'row'<'col-xs-6 float-end'><'col-xs-6'f>r>t<'row'<'col-xs-12 mt-3'i p>>",
                "language": {

                    "info": "Results: _PAGE_ - _PAGES_ of _MAX_",
                    "infoFiltered": "(filtered from _MAX_ total records)",
                    "searchPlaceholder": "Filter by name",
                    "sSearch": '<i class="bi bi-funnel"></i>',
                    "paginate": {
                        "previous": '<i class="bi bi-chevron-left"></i>',
                        "next": '<i class="bi bi-chevron-right"></i>'
                    }
                },
            });
        });


    </script>

}

















