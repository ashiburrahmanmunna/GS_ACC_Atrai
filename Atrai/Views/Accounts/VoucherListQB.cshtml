@model IEnumerable<Atrai.Model.Core.Entity.Acc_VoucherMainModel>
@{
    List<Atrai.Model.Core.Entity.Acc_VoucherNoPrefixModel> VoucherTypes = ViewBag.Acc_VoucherNoPrefix;
}
@{
    ViewData["Title"] = "Voucher Created Type";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}

<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet">


<style>

   

   .custom-grid {
    display: grid;
    grid-template-columns: repeat(3, 180px);
    /*grid-auto-flow: row;*/
    margin-top: 10px;
   }
    .main-dropdown-size .col {
        width: auto; /* Adjust the width as needed */
    }

    .child-table-hidden {
        display: none;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .tabulator {
        border-top: none !important;
        border-bottom: none !important;
        border-right: none !important;
        border-left: none !important;
    }

        .tabulator .tabulator-footer {
            border-top: 1px solid #dee2e6;
        }


    .form-check-label {
        margin-left: 15px; /* Adjust the spacing between checkbox and column name */
    }

    .tabulator-cell {
        color: black;
    }

    .tabulator .tabulator-header {
        border-bottom: 1px solid #dee2e6;
    }

    .tabulator .tabulator-footer .tabulator-calcs-holder {
        border-top: none !important;
        border-bottom: none !important;
    }

    .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {
        border-top: none !important;
    }

   .table-checkbox {
        transform: scale(1.5);
        margin: 10px;
    }

  /*  .custom-control-input {
        width: 10px;
        height: 10px;
        margin-left: 50px;
    }*/

    /*style written by shahinur*/
 /*   .jsgrid-grid-body {
        overflow: auto;
    }*/

    /*.tabulator-row .tabulator-cell {
        overflow: visible;
    }*/
    .tabulator .tabulator-row .active-cell {
      overflow: visible;

    /* Add any other styles you need for the active cell */
    }
    


    .tabulator-row:nth-child(odd) .tabulator-cell {
        border-right-color: #ced4da;
    }

    .tabulator-row:nth-child(even) .tabulator-cell {
        border-right-color: #ced4da;
    }


/*
    .label-hover:hover {
        background-color: #E9ECEF;
        border-right: 50px solid #E9ECEF;
    }*/


    .tabulator .tabulator-header {
        background-color: #ffffff;
    }

    /* .tabulator .tabulator-row {
        background-color: #ffffff;
    } */

    .tabulator .tabulator-row:nth-child(even) {
        background-color: #e9ecef; /* Even rows */
    }

    .tabulator .tabulator-row:nth-child(odd) {
        background-color: #ffffff; /* Odd rows */
    }

    .tabulator .tabulator-tableholder {
        background-color: #ffffff;
    }

    /* Targeting the table rows on hover */
    .tabulator .tabulator-row:hover {
        /*background-color: #e0e0e0;*/
        /* background-color: #ffffff; */
        color: black;
    }


   .tabulator .tabulator-header .tabulator-col {
        display: inline-flex;
        position: relative;
        box-sizing: border-box;
        flex-direction: column;
        justify-content: flex-start;
        border-right: 1px solid #dee2e6;
        background: #ffffff !important;
        text-align: left;
        vertical-align: bottom;
        overflow: hidden;
    }

    /* Targeting the header cells on hover */
    .tabulator .tabulator-header:hover {
        background-color: #ffffff;
        color: black;
    }


    .tabulator .tabulator-footer .tabulator-paginator .tabulator-page:hover {
        background-color: deepskyblue;
    }

    .tabulator .tabulator-footer {
        background-color: #fff;
        color: black;
    }

    .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {
        font-weight: 700;
        background: #ffffff !important;
    }

    .tabulator .tabulator-header-filter input {
        border: 0.5px solid #ced4da;
    }


</style>
@using (Html.BeginForm())
{

    <div class="card">
        <div class="card-body">
            <div class="row my-3">
                <div class="col-md-8 col-12">
                    <h4 class="center fw-semibold">Voucher List</h4>
                </div>
                <div class="col-md-3 col-12 text-end pt-3">
                    <label class="ps-1"><input type="radio" name="RptType" value="PDF" checked="checked" /> PDF  </label>
                    <label class="ps-1"><input type="radio" name="RptType" value="EXCEL" /> EXCEL  </label>
                    <label class="ps-1"><input type="radio" name="RptType" value="WORD" /> WORD  </label>

                </div>
                <div class="col-md-1 text-end">
                    <div class="dropdown">
                        <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            New
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var item in VoucherTypes)
                            {
                                <li>
                                    @Html.ActionLink(item.vVoucherTypes.VoucherTypeName, "AddVoucherByType", new { Type = item.vVoucherTypes.VoucherTypeNameShort }, new { @class = "dropdown-item" })  @* + @item.vVoucherTypes.VoucherTypeButtonClass *@
                                </li>
                            }

                            <li class="dropdown-item d-none">
                                <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Import Voucher</a>
                            </li>

                        </ul>
                    </div>
                </div>
            </div>

            <div class="heroSection" style="width:60%">

                <div class="row mt-5" id="TheadDropdown">

                    <div class="col-md-6 col-12" id="divAccountHead">
                        <div class="mb-2">
                            <label class="form-label fw-semibold">
                                User List
                            </label>
                            <select class="form-select select2me thead" id="THead"
                                aria-label="Floating label select example">
                            </select>

                        </div>
                    </div>
                    <div class="col-md-6 col-12" id="divLocation">
                        <div class="mb-2">
                            <label class="form-label fw-semibold">
                                Location
                            </label>
                            <select class="form-select select2me thead" id="location" aria-label="Floating label select example"></select>

                        </div>
                    </div>



                </div>
                <div class="row mt-2">
                    <div class="col-md-4 col-12">
                        <div class="mb-2">
                            <label class="form-label fw-semibold">From Date</label>
                            <input type="text" class="form-control tg" id="Date">
                        </div>
                    </div>

                    <div class="col-md-4 col-12">
                        <div class="mb-2">
                            <label class="form-label fw-semibold">To Date</label>
                            <input type="text" class="form-control tg" id="Date2">
                        </div>
                    </div>
                    <div id="PostType" class="col-md-4 col-12 mb-2  ">

                        <label class="form-label fw-semibold">
                            Doc Type
                        </label>

                        @Html.DropDownList("IsPosted", new List<SelectListItem>
                    {
                    new SelectListItem() {Text = "Posted", Value="1"},
                    new SelectListItem() {Text = "Not-Posted", Value="0"},

                    }, "All", new { @class = "form-control" })

                    </div>




                </div>


            </div>


        </div>



        <!-- Gear Icon configuration for jsgrid Start -->


        <div>

            <div class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <button class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    <i class="bi bi-gear" me-1"></i>
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="columnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>
                           
                        </div>

                        <div class="col mt-3 vertical-hr">
                            <span class="fw-bold mt-5 ms-3">Others</span>
                            <hr class="m-0 w-75 w-sm-50  ms-3" />
                            <ul class="list-unstyled">
                                <li><a id="show-all" value="100" class="dropdown-item" href="#">Show all</a></li>
                                <li><a id="hide-all" class="dropdown-item" href="#">Hide all</a></li>
                                <li><a id="restore" class="dropdown-item" href="#">Restore</a></li>


                                <li>
                                    <select name="rows" id="rows" class="border-0 cursor-pointer" style="margin-left: 13px;padding: 10px 0;width: 70px; ">

                                        <option value="0" disabled selected>Rows</option>
                                        <option value="5" selected>5</option>
                                        <option value="10">10</option>
                                        <option value="20">20</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                        <option value="1000">1000</option>
                                    </select>
                                </li>
                                <li>
                                    @*<a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input title-input" id="withChild" value="withChild">
                                <label class="custom-control-label cursor-pointer" id="withChild-label" for="withChild" style="font-size: 7px;">Export with Child</label>
                                </div>
                                </a>*@
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>


            </div>


            <div class="btn-group">
                <button class="btn btn-sm border border-end-0" type="button" id="exportUl">
                    <img src="~/assets/excel 1.png" alt="">
                </button>
                <button type="button" class="btn border border-start-0 dropdown-toggle dropdown-toggle-split" id="exportBtn" data-bs-toggle="dropdown" data-target="#exportUl" aria-expanded="false">
                    <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" id="exportPDF" href="#"><img src="~/assets/pdf 1.png" alt="">PDF</a></li>
                    <li class="dropdown-divider"></li>
                    <li><a class="dropdown-item" id="exportWithChild" href="#"><img src="~/assets/excel 1.png" alt="">Export with Child</a></li>
                </ul>
            </div>

              <input type="text" class="textbox search_box ms-2" id="searchInput" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px;height: 40px; border: 1px solid #8080807d; padding: 7px;border-radius: 30px;" />
        </div>

        <!-- Gear Icon configuration for jsgrid End -->
        <br>


        <br>

        <div id="example-table"></div>


        @*<div class="gridSection">
    <div class="row mt-2">
    <div class="col-12 col-md-12">
    <div id="jsGridItems"></div>
    </div>
    </div>
    </div>*@


        @*<button type="button" id="checkmodalbuttonid" class="btn btn-primary d-none " data-bs-toggle="modal" data-bs-target="#exampleModal">
    Launch demo modal
    </button>

    <div class="modal fade modal-xl" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
    <div class="modal-content">
    <div class="modal-header">
    <h5 class="modal-title" id="exampleModalLabel"></h5>
    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">

    <div class="card rounded-10">
    <div id="jsChildItems"></div>

    </div>

    </div>
    <div class="modal-footer">
    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
    <button type="button" class="btn btn-primary">Save changes</button>
    </div>
    </div>
    </div>
    </div>*@


    </div>




}


@section Scripts{
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables@5.5.0/dist/js/tabulator.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>


    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.20/jspdf.plugin.autotable.min.js"></script>

    <script type="text/javascript">

         function deleteRowFunction(voucherId) {
            // Perform deletion logic using AJAX
            $.ajax({
                url: '@Url.Action("DeleteVoucher", "Accounts")',
                type: 'POST',
                data: { VoucherId: voucherId },
                success: function (response) {
                    // Success callback, handle response if needed

                    // Refresh the page
                    location.reload();
                },
                error: function (xhr, status, error) {
                    // Error callback, handle error if needed
                }
            });
        }
        $('input[name=RptType]').click(function () {
            var reporttypeind = $("input[name=RptType]:checked").val();
            //alert(reporttype);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionReportType", "Accounts")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttypeind },
                success: function (response) {
                    //  window.location.href = response.Url;

                    //window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        });

        $(document).ready(function () {

            //  $('select').select2();
            $('#THead').select2({
                theme: 'bootstrap-5'
            });
            $('#location').select2({
                theme: 'bootstrap-5'
            });

            $('#Date').datepicker({
                dateFormat: 'dd-M-yy',
                todayHighlight: true,
                autoclose: true
            }).datepicker("setDate", new Date());

            $('#Date2').datepicker({
                dateFormat: 'dd-M-yy',
                todayHighlight: true,
                autoclose: true
            }).datepicker("setDate", new Date());









            //function initTabulator() {
            //    // Define the Tabulator table instance
            //    parentTable = new Tabulator("#example-table", {

            //        layout: "fitColumns",
            //        height: "fitDataFill",
            //        //pagination: "local",
            //        pagination: true,
            //        paginationMode: "remote",
            //        paginationSize: 5,
            //        paginationInitialPage: 1,
            //        paginationSizeSelector: [5, 10, 25, 50, 100, true],
            //        paginationCounter: "rows",
            //        //paginationCounter: "pages",

            //        columnDefaults: {
            //            resizable: true,
            //        },
            //        dataTree: true,
            //        dataTreeStartExpanded: false,
            //        ajaxURL: '@Url.Action("GetVoucherListTabulator", "Accounts")',
            //        ajaxConfig: "get",
            //        ajaxContentType: "json",

            //        ajaxResponse: function (url, params, response) {
            //            // Use setData method to load data into the table
            //            //console.log(response);
            //        //    initializeCheckboxStates(parentTable);
            //            parentTable.setMaxPage(response.last_page);
            //            //parentTable.setData(response.data);


            //            return {

            //                data: response.data,
            //                last_page: response.last_page,

            //            };
            //        },
            //        columns: globalFields,
            //        rowFormatter: function (row) {
            //            // Create and style holder elements for nested table
            //            var holderEl = document.createElement("div");
            //            var tableEl = document.createElement("div");

            //            holderEl.style.boxSizing = "border-box";


            //            holderEl.appendChild(tableEl);

            //            row.getElement().appendChild(holderEl);



            //            var childData = row.getData().VoucherSubs; // Get the child data array for the current row
            //            var childTable = new Tabulator(tableEl, {
            //                layout: "fitDataFill",

            //                data: childData, // Pass the child data array to the child table
            //                columns: [
            //                    { title: "Code", field: "AccCode", width: 150 },
            //                    { title: "Account Head", width: 352, field: "AccName" },
            //                    { title: "Note 1", field: "Note1", width: 350, editor: "input" },
            //                    { title: "Note 2", field: "Note2", width: 350, editor: "input" },
            //                    { title: "TKDebit", field: "TKDebit", width: 185, bottomCalc: "sum" },
            //                    { title: "TKCredit", field: "TKCredit", width: 187, bottomCalc: "sum" },
            //                    { title: "Type", field: "AccType", visible: false },
            //                ],
            //            });

            //            var detailsButtonEl = row.getElement().querySelector(".btn.btn-alert");

            //            detailsButtonEl.addEventListener("click", function (event) {
            //                // Prevent event propagation to stop expanding the child table when clicking the "Details" button
            //                event.stopPropagation();

            //                if (childTable.getRows().length === 0) {
            //                    childTable.setData(childData); // Load child data into the table
            //                }

            //                if (holderEl.classList.contains("child-table-hidden")) {
            //                    // Expand the child table
            //                    holderEl.classList.remove("child-table-hidden");
            //                    holderEl.classList.add("child-table-visible");


            //                } else {
            //                    // Collapse the child table
            //                    holderEl.classList.remove("child-table-visible");
            //                    holderEl.classList.add("child-table-hidden");
            //                }

            //                updateParentTableHeight();
            //            });

            //            // Hide the child table initially
            //            holderEl.classList.add("child-table-hidden");

            //        },
            //    });
            //}

              
           




            var dataLoad;
            var childTable;
            var parentTable;

              $('#searchInput').on('input', function() {
              var inputValue = $(this).val();
              var url = '@Url.Action("GetVoucherListTabulator", "Accounts")' + '?searchquery=' + inputValue;
              parentTable.setData(url);

            });

            function initTabulator() {
                var fromDate = $("#Date").val();
                var toDate = $("#Date2").val();

                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetVoucherListTabulator", "Accounts")' + '?fromDate=' + fromDate + '&toDate=' + toDate;

                // Define the Tabulator table instance
                parentTable = new Tabulator("#example-table", {

                    layout: "fitColumns",
                    height: "fitDataFill",
                    height: "400px",
                    //pagination: "local",
                    pagination: true,
                    paginationMode: "remote",
                    paginationSize: 5,
                    paginationInitialPage: 1,
                    paginationSizeSelector: [5, 10, 25, 50, 100, true],
                    paginationCounter: "rows",
                    //paginationCounter: "pages",

                    columnDefaults: {
                        resizable: true,
                    },
                    dataTree: true,
                    dataTreeStartExpanded: false,
                    ajaxURL: apiUrl,
                    ajaxConfig: "get",
                    ajaxContentType: "json",

                    ajaxResponse: function (url, params, response) {
                        parentTable.setMaxPage(response.last_page);
                        console.log("response.last_page", response.last_page);

                        dataLoad = response.data;
                        console.log("load:", dataLoad);

                        return {

                            data: response.data,
                            last_page: response.last_page,

                        };
                    },
                    columns: globalFields,
                    rowFormatter: function (row) {
                        // Create and style holder elements for nested table
                        var holderEl = document.createElement("div");
                        var tableEl = document.createElement("div");

                        holderEl.style.boxSizing = "border-box";


                        holderEl.appendChild(tableEl);

                        row.getElement().appendChild(holderEl);



                        var childData = row.getData().VoucherSubs; // Get the child data array for the current row

                        childTable = new Tabulator(tableEl, {
                            
                            data: childData, // Pass the child data array to the child table
                            columns: [
                                { title: "Code", field: "AccCode",  width: 100 }, //resizable: false
                                { title: "Account Head", width: 250,  field: "AccName" },
                                { title: "Note 1", field: "Note1",  width: 100 },
                                { title: "Note 2", field: "Note2",  width: 180 },
                                { title: "Note 3", field: "Note5",  width: 120 },
                                {
                                    title: "Cu. Rate", field: "CurrencyRate", hozAlign: "right", width: 110,
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                { title: "Debit", field: "TKDebit",headerHozAlign: "right",hozAlign: "right", width: 120, bottomCalc: "sum",
                                  bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                { title: "Credit", field: "TKCredit",headerHozAlign: "right",hozAlign: "right", width: 120, bottomCalc: "sum",
                                    bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                {
                                    title: "DebitLocal", field: "TKDebitLocal", headerHozAlign: "right", hozAlign: "right", width: 120, bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                {
                                    title: "CreditLocal", field: "TKCreditLocal", headerHozAlign: "right", hozAlign: "right", width: 125, bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                { title: "Type", field: "AccType", visible: false },
                            ],
                        });

                     var detailsIconEl = row.getElement().querySelector(".btn-details-icon");

                     detailsIconEl.addEventListener("click", function (event) {
                      event.stopPropagation();

                       if (childTable.getRows().length === 0) {
                       childTable.setData(childData);
                       }

                       holderEl.classList.toggle("child-table-hidden");
                       holderEl.classList.toggle("child-table-visible");

                     updateParentTableHeight();

                        if (holderEl.classList.contains("child-table-visible")) {
                         detailsIconEl.className = "fa-solid fa-chevron-down btn-details-icon"; // Use collapse icon
                         } else {
                         detailsIconEl.className = "fa-solid fa-plus btn-details-icon"; // Use expand icon
                         }
                     });


                        // Hide the child table initially
                        holderEl.classList.add("child-table-hidden");

                    },
                });
            }


            function reloadTableData() {
                var fromDate = $("#Date").val();
                var toDate = $("#Date2").val();
                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetVoucherListTabulator", "Accounts")' + '?fromDate=' + fromDate + '&toDate=' + toDate;
                parentTable.setData(apiUrl);
            }


            // $(document).ready(function () {
            //     initTabulator();
            // });


            // Add event listeners to the From Date and To Date input fields
            $("#Date, #Date2").on("change", function () {
                reloadTableData();
            });


            function updateParentTableHeight() {
                parentTable.setHeight("fitDataFill");
            }

            // Call the initTabulator function when the document is ready
            //$(document).ready(function () {
            //    initTabulator();

            //});


            $(document).ready(function () {
                initTabulator();

                // Add event listener to the rows select input
                $("#rows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        // Convert the selected value to an integer
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            // Set the page size for the parentTable
                            parentTable.setPageSize(pageSize);

                            // You may also want to update the parent table height
                            updateParentTableHeight();
                        }
                    }
                });


                $("#show-all").on("click", function (e) {
                    e.preventDefault();

                    // Set a large value to show all available rows
                    parentTable.setPageSize(999999); // You can set a value higher than the expected number of rows

                    // You may also want to update the parent table height
                    updateParentTableHeight();
                });



                $("#hide-all").on("click", function (e) {
                    e.preventDefault();

                    // Clear all data from the table to hide it
                    parentTable.clearData();

                    // You may also want to update the parent table height
                    updateParentTableHeight();
                });



            });








            //check global fields
            var globalFields = [
                { title: "CheckBox", field: "CheckBox", width: 70, headerSort: false, hozAlign: "center",vertAlign: "middle", formatter: customCheckBoxFormatter, visible: true },
                {
                    title: "Details", field: "ButtonDetails", width: 70, headerHozAlign: "center", hozAlign: "center",vertAlign: "middle", formatter: customDetailsButtonFormatter, headerSort: false, visible: true
                },
                { title: "Id", field: "VoucherId", visible: false },
                { title: "Voucher No", field: "VoucherNo", headerHozAlign: "center",vertAlign: "middle", resizable: false, width: 190, sorter: "string", visible: true, headerFilter: "input", 
                 formatter: function (cell, formatterParams, onRendered) {
                        // Get the data for the current row
                        var rowData = cell.getRow().getData();

                        // Create a div to hold the content and icon
                        var container = document.createElement("div");
                        container.style.display = "flex";
                        container.style.flexDirection = "column"; // Display content in a column

                        // Create a span for the content
                        var contentSpan = document.createElement("span");
                        contentSpan.textContent = rowData.VoucherNo;
                        contentSpan.style.marginRight = "5px"; // Adjust the margin as needed                        
                        contentSpan.style.color = "blue";

                        // Create an anchor element and set its href attribute
                        var link = document.createElement("a");
                        // link.href = "mailto:" + rowData.Email; 
                        //link.href = '@Url.Action("ViewReceivePaymentQB", "Sales")' + "?Id=" + rowData.SourceId;    
                        
                        if (rowData.Source === "Sales") {
                            link.href = '@Url.Action("InvoiceViewReport", "Sales")' + "?SaleId=" + rowData.SourceId + "&ReportType=SALES INVOICE";
                        } 
                        else if (rowData.Source === "Receive Payment") {
                                link.href = '@Url.Action("ViewReceivePaymentQB", "Sales")' + "?Id=" + rowData.SourceId;
                        } else if (rowData.Source === "Purchase") {
                            link.href = '@Url.Action("AddBillByType", "Accounts")' + "?Type=Expense" + "&PurchaseId=" + rowData.SourceId + "&isCopy=2";
                        }  
                        else if (rowData.Source === "Bill Payment") {
                            link.href = `@Url.Action("AddPaymentTypeQB", "Admin")?TransactionId=${rowData.SourceId}&isCopy=2`;  
                        }
                        else if (rowData.Source === "Accounts") {
                            link.href = '@Url.Action("ViewTransaction", "Admin")' + "?TransactionId=" + rowData.SourceId;
                        } else {
                            
                            link.href = '#'; // Set a default value or handle as needed
                        }

                        link.appendChild(contentSpan); // Append the custom text node to the link

                        // Append the content and the anchor (containing the icon) to the container
                        container.appendChild(contentSpan);
                        container.appendChild(link);

                        // Add an event listener to the content span to redirect on click
                        contentSpan.addEventListener("click", function () {
                           // window.location.href = link.href; // Redirect to the link URL
                            window.open(link.href, '_blank');
                        });

                        return container;
                    },
                },
                { title: "Type", field: "VoucherTypeName", hozAlign: "center", headerHozAlign: "center",vertAlign: "middle", resizable: false, width: 130, sorter: "string", visible: true, headerFilter: "input" },
                { title: "Type", field: "VoucherTypeNameShort", visible: false },
                { title: "Date", field: "VoucherDate", hozAlign: "center",vertAlign: "middle", resizable: false, width: 130, sorter: "date", sorterParams: { format: "YYYY-MM-DD" }, visible: true, headerFilter: "input" },
                { title: "Description", field: "VoucherDesc", headerHozAlign: "center",vertAlign: "middle", resizable: false, width: 220, visible: true, headerFilter: "input" },
                { title: "Amount", field: "VAmount", hozAlign: "right", headerHozAlign: "center",vertAlign: "middle", resizable: false, width: 130, visible: true, headerFilter: "input" },
                { title: "AmountLocal", field: "vAmountLocal", hozAlign: "right", headerHozAlign: "center",vertAlign: "middle", resizable: false, width: 150, visible: true, headerFilter: "input" },
                { title: "Status", field: "Status", headerHozAlign: "center", hozAlign: "center",vertAlign: "middle", resizable: false, width: 130, sorter: "string", formatter: customStatusFormatter, visible: true },
                { title: "App. Stage",field: "ApprovalStage", headerHozAlign: "left", width:130,vertAlign:"middle", hozAlign: "left" },
                { title: "Is", field: "isPosted", visible: false },
                { title: "AccountType", field: "AccountType", visible: false },
                {
                    title: "Actions", field: "button", headerHozAlign: "center", headerSort: false, hozAlign: "center", resizable: false, width: 150, formatter: function (cell, formatterParams, onRendered) {
                        var data = cell.getData();
                        var myUrldelete = `@Url.Action("DeleteVoucher", "Accounts")?VoucherId=${data.VoucherId}`;
                        var myUrlGet = `@Url.Action("AddVoucherByType", "Accounts")?VoucherId=${data.VoucherId}&Type=${data.VoucherTypeNameShort}`;
                        var myUrlprint = `@Url.Action("Print", "Accounts")/${data.VoucherId}`;
                        var myUrlview = `@Url.Action("AddVoucherByType", "Accounts")?VoucherId=${data.VoucherId}&Type=${data.VoucherTypeNameShort}&IsCopy=2`;
                        var message = `return confirm('Are you sure you want to Remove the AccountHead Information ?')`;

                        var editHtml = `
                                       <a href='${myUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                       </a>
                                               <div class='dropdown-divider m-0'></div>
                                   `;

                        var viewHtml = `
                                               <a href='${myUrlview}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                               <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                              </a>

                                   `;

                     var deleteHtml = `
                        <a class='text-decoration-none text-black ms-3 mt-1' href='#' data-voucher-id='${data.VoucherId}'>
                            <i class='bi bi-x-lg pe-1'></i><span class='ms-1 mt-2'>Delete</span><br />
                        </a>
                    `;


                        if (data.IsClosed == true) {
                            var statusDependentHtml = data.isPosted ? viewHtml :  deleteHtml;
                        }
                        else
                        {
                            var statusDependentHtml = data.isPosted ? viewHtml : editHtml + deleteHtml;
                        }
                        //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                       

                        var html = `
                                      <div class='dropdown ms-1'>
                                          <a href='${myUrlprint}' target='_blank' class='fw-bolder mt-2'>Run Report</a>
                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                         <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                              ${statusDependentHtml}

                                          </ul>
                                      </div>
                                  `;

                        return html;
                     },
                     visible: true,cellClick: function(e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                  },
                },
            ]
            console.log("globalFields::", globalFields);


            // var data = cell.getData();
            // var myUrldelete = '@Url.Action("DeleteVoucher", "Accounts")?VoucherId=' + data.VoucherId;
            // var myUrlGet = '@Url.Action("AddVoucherByType", "Accounts")?VoucherId=' + data.VoucherId + '&Type=' + data.VoucherTypeNameShort;
            // var message = "return confirm('Are you sure you want to Remove the AccountHead Information ?')";
            // var myUrlprint = '@Url.Action("Print", "Accounts")/' + data.VoucherId;

            // var $dropdown = $("<div class='dropdown ms-1'>").append(
            //     $("<button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'>")
            // ).append(
            //     $("<ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>").css({
            //         'margin-left': '-105px'
            //     }).append(function () {
            //         return $("<li>").append(
            //             $(`<a href='${myUrlGet}' target="_blank" class=" text-decoration-none text-black ms-3 mt-1"><i class="bi bi-pencil-square pe-1"></i> <span>Edit</span>  <br /></a>`),
            //             $(`<div class="dropdown-divider m-0"></div>`),
            //             $(`<a href="#" class="text-decoration-none text-black ms-3 mt-1" onclick="deleteRowFunction(${data.VoucherId})"><i class="bi bi-trash pe-1"></i> <span>Delete</span></a>`)



            //             //$(`<a class='text-decoration-none text-black ms-3 mt-1'>`).attr("href", `#`)
            //             //    .html(`<i class="bi bi-x-lg pe-1"></i><span class='ms-2 mt-2' >Delete</span> <br /></a>`).click(function () {
            //             //        setDeleteUrl(data.VoucherId);
            //             //    })
            //         );
            //     })
            // );

            // var $iconButton = $(`<a href='${myUrlprint}' target="_blank" class="fw-bolder mt-2">Run Report</a>`);
            // var $flex = $("<div class='d-flex justify-content'></div>").append($iconButton).append($dropdown);

            // return $flex.prop('outerHTML');



            //document.getElementById("exportPDF").addEventListener("click", function () {
            //    parentTable.download("pdf", "Voucher_ListQB.pdf")
            //});


            function customCheckBoxFormatter(cell, formatterParams, onRendered) {
                return '<input type="checkbox" class="table-checkbox">';
            }


            function customCheckBoxHeaderFormatter() {
                return '<input type="checkbox" id="selectAllCheckbox" style="border: 0; background: transparent;" onclick="selectAllItems()">';
            }



          function customDetailsButtonFormatter(cell, formatterParams, onRendered) {
                var icon = '<i class="fa-solid fa-plus btn-details-icon"></i>';
                return icon;
            }



            function customStatusFormatter(cell, formatterParams, onRendered) {
                var value = cell.getValue();
                var statusColor = value ? "darkgreen" : "red";
                //var statusText = value ? "Posted" : "Not Posted";
                return "<span style='color: " + statusColor + "'>" + value + "</span>";
            }




            // function customActionsFormatter(cell, formatterParams, onRendered) {
            //    var data = cell.getData();
            //    var myUrldelete = `@Url.Action("DeleteVoucher", "Accounts")?VoucherId=${data.VoucherId}`;
            //    var myUrlGet = `@Url.Action("AddVoucherByType", "Accounts")?VoucherId=${data.VoucherId}&Type=${data.VoucherTypeNameShort}`;
            //    var myUrlprint = `@Url.Action("Print", "Accounts")/${data.VoucherId}`;
            //    var myUrlview = `@Url.Action("AddVoucherByType", "Accounts")?VoucherId=${data.VoucherId}&Type=${data.VoucherTypeNameShort}&IsCopy=2`;
            //    var message = `return confirm('Are you sure you want to Remove the AccountHead Information ?')`;

            //    var editHtml = `
            //                    <a href='${myUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
            //                        <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
            //                    </a>
            //                            <div class='dropdown-divider m-0'></div>
            //                `;

            //    var viewHtml = `
            //                            <a href='${myUrlview}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
            //                            <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
            //                           </a>
                                       
            //                `;

            //    var deleteHtml = `
            //                    <a class='text-decoration-none text-black ms-3 mt-1' href='#' onclick='${message && message} ? setDeleteUrl(${data.VoucherId}) : void(0);'>
            //                        <i class='bi bi-x-lg pe-1'></i><span class='ms-2 mt-2'>Delete</span><br />
            //                    </a>
            //                `;

            //    //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
            //    var statusDependentHtml = data.isPosted ? viewHtml : editHtml + deleteHtml;

            //    var html = `
            //                   <div class='dropdown ms-1'>
            //                       <a href='${myUrlprint}' target='_blank' class='fw-bolder mt-2'>Run Report</a>
            //                       <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
            //                       <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
            //                           ${statusDependentHtml}

            //                       </ul>
            //                   </div>
            //               `;

            //    return html;

            // }

            //    //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;

            //    //    var dropdownContainer = document.createElement('div');
            //    //  //  dropdownContainer.classList.add('dropdown', 'ms-1');
            //    //       dropdownContainer.classList.add('dropdown-container');

            //    //    var runReportLink = `
            //    //        <a href='${myUrlprint}' target='_blank' class='fw-bolder mt-2'>Run Report</a>
            //    //    `;

            //    //    var dropdownButton = `
            //    //        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
            //    //    `;

            //    //    var dropdownMenu = `
            //    //        <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
            //    //            ${statusDependentHtml}
            //    //        </ul>
            //    //    `;

            //    //    dropdownContainer.innerHTML = runReportLink + dropdownButton + dropdownMenu;

            //    //    var html = dropdownContainer.outerHTML;

            //    //    return html;


            //    var $dropdown = $("<div class='dropdown ms-1'>").append(
            //        $("<button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'>")
            //    ).append(
            //        $("<ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>").css({
            //            'margin-left': '-105px'
            //        }).append(function () {
            //            return $("<li>").append(

            //                $(`<a href='${myUrlGet}' target="_blank" class=" text-decoration-none text-black ms-3 mt-1"><i class="bi bi-pencil-square pe-1"></i> <span>Edit</span>  <br /></a>`),
            //                $(`<div class="dropdown-divider m-0"></div>`),
            //                $(`<a class='text-decoration-none text-black ms-3 mt-1'>`).attr("href", `#`)
            //                    .html(`<i class="bi bi-x-lg pe-1"></i><span class='ms-2 mt-2' >Delete</span> <br /></a>`).click(function () {
            //                        setDeleteUrl(data.VoucherId);
            //                    })



            //                //$(`<a class='text-decoration-none text-black ms-3 mt-1'>`).attr("href", `${myUrlGet}`).html("<i class='fa-solid fa-pen-to-square'></i> <span>Edit</span>  <br />")
            //                ////.click(function () {
            //                ////    editVoucherList(data.VoucherId , data.VoucherTypeNameShort);
            //                ////})
            //                //,
            //                //$(`<a class='text-decoration-none text-black ms-3 mt-1'>`).attr("href", `#`)
            //                //    .html(`<i class='fa-sharp fa-solid fa-trash mt-2'></i><span class='ms-2 mt-2' >Delete</span>`).click(function () {
            //                //        setDeleteUrl(data.VoucherId);
            //                //    })
            //            );
            //        }));

            //    var $iconButton = $(`<a href='${myUrlprint}' target="_blank" class="fw-bolder mt-2">Run Report</a>`)
            //    var $flex = $("<div class='d-flex justify-content-center'></div>").append($iconButton).append($dropdown)
            //    var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
            //    return $result.add($flex);



            










           






          



            document.getElementById("exportPDF").addEventListener("click", function () {
                // Define the titles of the columns to be excluded
                var columnsToExclude = ["Check Box", "Details", "Actions"];

                // Temporarily hide the columns you want to exclude from the PDF
                parentTable.getColumns().forEach(function (column) {
                    if (columnsToExclude.includes(column.getDefinition().title)) {
                        column.hide();
                    }
                });

                // Download the table as a PDF file
                parentTable.download("pdf", "Voucher_ListQB.pdf", {
                    columnVisibility: "visible",
                });

                // Restore the columns after the PDF export
                parentTable.getColumns().forEach(function (column) {
                    if (columnsToExclude.includes(column.getDefinition().title)) {
                        column.show();
                    }
                });
            });





            //document.getElementById("exportUl").addEventListener("click", async function () {
            //    const allRows = parentTable.getRows();
            //    const allColumns = parentTable.getColumns();

            //    // Columns to exclude from the export
            //    const excludedColumns = ["CheckBox", "ButtonDetails", "button"];

            //    // Check if "Export with Child" checkbox is checked
            //    const exportWithChild = document.getElementById("withChild").checked;

            //    if (exportWithChild) {
            //        // Export both parent and child data
            //        exportParentAndChildData(allRows, allColumns, excludedColumns);
            //    } else {
            //        // Export only parent data
            //        exportParentData(allRows, allColumns, excludedColumns);
            //    }
            //});

            document.getElementById("exportUl").addEventListener("click", async function () {
                const allRows = parentTable.getRows();
                const allColumns = parentTable.getColumns();

                // Columns to exclude from the export
                const excludedColumns = ["CheckBox", "ButtonDetails", "button"];

                // Export only parent data
                exportParentData(allRows, allColumns, excludedColumns);
            });

            document.getElementById("exportWithChild").addEventListener("click", async function () {
                const allRows = parentTable.getRows();
                const allColumns = parentTable.getColumns();

                // Columns to exclude from the export
                const excludedColumns = ["CheckBox", "ButtonDetails", "button"];

                // Export both parent and child data
                exportParentAndChildData(allRows, allColumns, excludedColumns);
            });


            // Function to export only parent data
            function exportParentData(allRows, allColumns, excludedColumns) {
                let csvContent = "";

                // Generate header row for parent table
                const parentHeaderRow = allColumns
                    .filter(column => column.isVisible() && !excludedColumns.includes(column.getField()))
                    .map(column => column.getDefinition());
                csvContent += parentHeaderRow.map(column => column.title).join(",") + "\r\n";

                // Collect parent rows
                for (const row of allRows) {
                    const rowData = row.getData();
                    const parentRowData = parentHeaderRow
                        .map(column => rowData[column.field] || "")
                        .join(",");
                    csvContent += parentRowData + "\r\n";
                }

                // Create a Blob object with the CSV content
                const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });

                // Create a download link and trigger the download
                const link = document.createElement("a");
                link.setAttribute("href", URL.createObjectURL(blob));
                link.setAttribute("download", "Voucher_List.csv");
                document.body.appendChild(link);
                link.click();
            }

            // Function to export both parent and child data
            function exportParentAndChildData(allRows, allColumns, excludedColumns) {
                let csvContent = "";

                // Generate header row for parent table
                const parentHeaderRow = allColumns
                    .filter(column => column.isVisible() && !excludedColumns.includes(column.getField()))
                    .map(column => column.getDefinition());
                csvContent += parentHeaderRow.map(column => column.title).join(",") + "\r\n";

                // Collect parent rows and their child rows
                for (const row of allRows) {
                    const rowData = row.getData();
                    const childData = rowData.VoucherSubs;

                    // Add parent row to csvContent
                    const parentRowData = parentHeaderRow
                        .map(column => rowData[column.field] || "")
                        .join(",");
                    csvContent += parentRowData + "\r\n";

                    // Check if the row has child data
                    if (childData && childData.length > 0) {
                        // Generate header row for child table (if childData exists)
                        const childHeaderRow = Object.keys(childData[0]).filter(column => column !== "AccType");
                        console.log(childHeaderRow);
                        // Create an array with child header titles
                        const childHeaderTitles = childHeaderRow.map(column => {
                            // Search for the corresponding child column definition in the parentTable
                            const childColumn = parentTable.getColumn(column);
                            console.log(parentTable);
                            return childColumn ? childColumn.getDefinition().title : "";

                        });
                        // Create an array of child column titles (excluding 'Type')
                        const childColumnTitles = childTable.getColumns()
                            .filter(column => column.getField() !== 'AccType') // Exclude the 'Type' column
                            .map(column => column.getDefinition().title);
                        //var childColumnTitles = childTable.getColumns().map(column => column.getDefinition().title);
                        // Now you have an array of child column titles
                        console.log(childColumnTitles);
                        csvContent += childColumnTitles.join(",") + "\r\n";


                        // Add child rows to csvContent
                        for (const childRow of childData) {
                            const childRowValues = childHeaderRow.map(column => {
                                const value = childRow[column] !== undefined ? childRow[column] : ''; // Handle empty or falsy values
                                return value;
                            });
                            csvContent += childRowValues.join(",") + "\r\n";
                        }

                    }
                }

                // Create a Blob object with the CSV content
                const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });

                // Create a download link and trigger the download
                const link = document.createElement("a");
                link.setAttribute("href", URL.createObjectURL(blob));
                link.setAttribute("download", "Voucher_List.csv");
                document.body.appendChild(link);
                link.click();
            }














            //document.getElementById("exportUl").addEventListener("click", async function () {
            //    const allRows = parentTable.getRows();
            //    const allColumns = parentTable.getColumns();

            //    // Columns to exclude from the export
            //    const excludedColumns = ["CheckBox", "ButtonDetails", "button"];

            //    // Check if "Export with Child" checkbox is checked
            //    const exportWithChild = document.getElementById("withChild").checked;

            //    if (exportWithChild) {
            //        // Export both parent and child data
            //        exportParentAndChildData(allRows, allColumns, excludedColumns);
            //    } else {
            //        // Export only parent data
            //        exportParentData(allRows, allColumns, excludedColumns);
            //    }
            //});

            //// Function to export only parent data
            //function exportParentData(allRows, allColumns, excludedColumns) {
            //    let csvContent = "";

            //    // Generate header row for parent table
            //    const parentHeaderRow = allColumns
            //        .filter(column => column.isVisible() && !excludedColumns.includes(column.getField()))
            //        .map(column => column.getDefinition());
            //    csvContent += parentHeaderRow.map(column => column.title).join(",") + "\r\n";

            //    // Collect parent rows
            //    for (const row of allRows) {
            //        const rowData = row.getData();
            //        const parentRowData = parentHeaderRow
            //            .map(column => rowData[column.field] || "")
            //            .join(",");
            //        csvContent += parentRowData + "\r\n";
            //    }

            //    // Create a Blob object with the CSV content
            //    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });

            //    // Create a download link and trigger the download
            //    const link = document.createElement("a");
            //    link.setAttribute("href", URL.createObjectURL(blob));
            //    link.setAttribute("download", "Voucher_List.csv");
            //    document.body.appendChild(link);
            //    link.click();
            //}

            //// Function to export both parent and child data
            //function exportParentAndChildData(allRows, allColumns, excludedColumns) {
            //    let csvContent = "";

            //    // Generate header row for parent table
            //    const parentHeaderRow = allColumns
            //        .filter(column => column.isVisible() && !excludedColumns.includes(column.getField()))
            //        .map(column => column.getDefinition());
            //    csvContent += parentHeaderRow.map(column => column.title).join(",") + "\r\n";

            //    // Collect parent rows and their child rows
            //    for (const row of allRows) {
            //        const rowData = row.getData();
            //        const childData = rowData.VoucherSubs;

            //        // Add parent row to csvContent
            //        const parentRowData = parentHeaderRow
            //            .map(column => rowData[column.field] || "")
            //            .join(",");
            //        csvContent += parentRowData + "\r\n";

            //        // Check if the row has child data
            //        if (childData && childData.length > 0) {
            //            // Generate header row for child table (if childData exists)
            //            const childHeaderRow = Object.keys(childData[0]).filter(column => column !== "AccType");
            //            csvContent += childHeaderRow.join(",") + "\r\n";

            //            // Add child rows to csvContent
            //            for (const childRow of childData) {
            //                csvContent += childHeaderRow
            //                    .map(column => childRow[column] || "")
            //                    .join(",") + "\r\n";
            //            }
            //        }
            //    }

            //    // Create a Blob object with the CSV content
            //    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });

            //    // Create a download link and trigger the download
            //    const link = document.createElement("a");
            //    link.setAttribute("href", URL.createObjectURL(blob));
            //    link.setAttribute("download", "Voucher_List.csv");
            //    document.body.appendChild(link);
            //    link.click();
            //}





            //document.getElementById("withChild").addEventListener("click", function () {
            //    exportWithChild = this.checked;
            //    if (exportWithChild) {
            //        alert("Exporting with Child!");
            //    } else {
            //        alert("Exporting without Child!");
            //    }
            //});










            $(document).ready(function () {
                var columnList = $("#columnList");

                // Iterate through globalFields and create checkboxes for each column name
                $.each(globalFields, function (index, field) {
                    //var li = $("<li>").addClass("label-hover");
                    //var label = $("<label>").addClass("form-check-label cursor-pointer");
                    //var checkbox = $("<input>")
                    //    .addClass("form-check-input")
                    //    .attr("type", "checkbox")
                    //    .attr("data-field", field.field) // Use data-field attribute to store the column field
                    //    .prop("checked", field.visible) // Set checkbox based on the "visible" property in globalFields
                    //    .on("change", function () {
                    //        // Code to handle checkbox change event
                    //        var columnField = $(this).data("field");
                    //        var isChecked = $(this).prop("checked");
                    //        if (isChecked) {
                    //            parentTable.showColumn(columnField); // Show the column
                    //        } else {
                    //            parentTable.hideColumn(columnField); // Hide the column
                    //        }
                    //    });

                    //var space = $("<span>").text("  "); // Adjust the number of spaces here
                    //label.append(checkbox, space, field.title);
                    //li.append(label);
                   
                       console.log(field);
                       var title=field.title;
                       var name=field.field;
                       var visible = true;
                    if (field.visible == false) {
                            visible = false;
                        }
                            titles = `<li>
                                <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkbox" >
                                <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
                                        <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                                </div>
                                </a>
                                </li>`;
                            columnList.append(titles);

                     document.querySelector(`${'#' + name}`).addEventListener('click', function () {
                    var checkbox = event.target;
                    var isChecked = checkbox.checked;
                    if (isChecked) {
                            parentTable.showColumn(name);
                        //$("#jsGridItems").jsGrid("fieldOption", this.value, "visible", true);
                    }
                    else {
                        parentTable.hideColumn(name);
                     
                        //$("#jsGridItems").jsGrid("fieldOption", this.value, "visible", false);
                    }
                });

                $(`${'#' + name}`).prop('checked', visible);


                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });
                    
                });
            });




            //$(document).ready(function () {
            //    var columnList = $("#columnList");

            //    // Iterate through globalFields and create checkboxes for each column name
            //    $.each(globalFields, function (index, field) {
            //        var li = $("<li>");
            //        var label = $("<label>").addClass("form-check-label cursor-pointer");
            //        var checkbox = $("<input>")
            //            .addClass("form-check-input")
            //            .attr("type", "checkbox")
            //            .attr("data-field", field.field) // Use data-field attribute to store the column field
            //            .prop("checked", true) // Set to true if you want the checkbox checked by default, false otherwise
            //            .on("change", function () {
            //                // Code to handle checkbox change event
            //                var columnField = $(this).data("field");
            //                var isChecked = $(this).prop("checked");
            //                if (isChecked) {
            //                    parentTable.showColumn(columnField); // Show the column
            //                } else {
            //                    parentTable.hideColumn(columnField); // Hide the column
            //                }
            //            });

            //        var space = $("<span>").text("  "); // Adjust the number of spaces here
            //        label.append(checkbox, space, field.title);
            //        li.append(label);
            //        columnList.append(li);
            //    });
            //});






            // Use event delegation to handle clicks on the dynamically created buttons
            //$(document).on('click', '.btn-alert', function () {
            //    showAlert();
            //});

            //function showAlert() {
            //    alert("Button clicked!");
            //}




            //var globalFields = [
            //    {
            //        name: "CheckBox", title: 'Check Box',headerTemplate: function () {
            //            return $("<button>").attr("type", "button").css({
            //                'border': '0', 'background': 'transparent'
            //            }).html("<i class='fas fa-trash text-danger'></i>") //text("Delete")
            //                .on("click", function () {
            //                    deleteSelectedItems();
            //                    initjsGrid();
            //                });
            //        },
            //        itemTemplate: function (_, item) {
            //            return $("<input>").attr("type", "checkbox").css({
            //                'width': '20px',
            //                'height': '20px'
            //            }).prop("checked", $.inArray(item, selectedItems) > -1)
            //                .on("change", function () {
            //                    $(this).is(":checked") ? selectItem(item) : unselectItem(item);
            //                });
            //        },

            //        align: "center",
            //        width: 50
            //    },
            //      {
            //          name:'buttonDetails',width: '55', title: 'Details',align:'center',itemTemplate: function(value, item) {

            //              var $iconPencil = $(" <input class='jsgrid-button jsgrid-insert-button' type = 'button' title = 'Details' >").click(function (e) {

            //                  $("#checkmodalbuttonid").trigger('click');
            //              });

            //              var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
            //              return $result.add($iconPencil);

            //          }
            //    },
            //      { name: "VoucherId", title: 'Id', width: 60, visible: false },
            //      { name: "VoucherNo", title: 'Voucher No', width: 110, type: "text" },
            //      { name: "VoucherTypeName", title: 'Voucher Type', type: "text" },
            //         { name: "VoucherTypeNameShort", title: 'Type', type: "text",visible:false },
            //      { name: "VoucherDate", title: 'Voucher Date', type: "text" },
            //  { name: "VoucherDesc", title: 'Voucher Desc', width: 220, type: "text" },
            //      { name: "VAmount", title: 'Amount', type: "text", align: 'right'},
            //  {
            //      name: "Status", title: 'Status', type: "lable", itemTemplate: function (value, item) {
            //          var statusColor = item.isPosted ? "darkgreen" : "red";
            //          var statusText = item.isPosted ? "Posted" : "Not Posted";
            //          return $("<span>").text(statusText).css("color", statusColor);
            //      }
            //      },
            //    { name: "isPosted", title: 'Is', visible: false },
            //    { name: "AccountType", title: 'AccountType', type: "text", visible: false },
            //      {
            //          name: "button", width: '100', title: 'Actions', align: 'center', itemTemplate: function (value, data) {
            //              console.log(data.VoucherId);
            //      //var options = [
            //      //    { value: "Edit", text: "<i class='fa-solid fa-pen-to-square'></i> Edit"},
            //      //    { value: "Delete", text: "<i class='fa-sharp fa-solid fa-trash'></i> Delete" },
            //      //];
            //      //console.log(data);
            //      @*var myUrledit = '@Url.Action("EditAccountHead", "Admin")?AccountHeadId=' + data.Id;*@
            //      var myUrldelete = '@Url.Action("DeleteVoucher", "Accounts")?VoucherId=' + data.VoucherId;
            //      //var myUrlGet = `editAccountHead(${data.Id})`;
            //      var myUrlGet = '@Url.Action("AddVoucherByType", "Accounts")?VoucherId=' + data.VoucherId+'&Type='+data.VoucherTypeNameShort;

            //      var message = `return confirm('Are you sure you want to Remove the AccountHead Information ?')`;
            //      var myUrlprint = '@Url.Action("Print", "Accounts")/' + data.VoucherId;

            //              var $dropdown = $("<div class='dropdown ms-1'>").append(
            //                  $("<button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'>")
            //              ).append(
            //                  $("<ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>").css({
            //                      'margin-left': '-105px'
            //                  }).append(function () {
            //                      return $("<li>").append(

            //                      $(`<a href='${myUrlGet}' target="_blank" class=" text-decoration-none text-black ms-3 mt-1"><i class="bi bi-pencil-square pe-1"></i> <span>Edit</span>  <br /></a>`),
            //                      $(`<div class="dropdown-divider m-0"></div>`),
            //                      $(`<a class='text-decoration-none text-black ms-3 mt-1'>`).attr("href", `#`)
            //                          .html(`<i class="bi bi-x-lg pe-1"></i><span class='ms-2 mt-2' >Delete</span> <br /></a>`).click(function () {
            //                              setDeleteUrl(data.VoucherId);
            //                          })

            //                      );
            //                  }));

            //              var $iconButton = $(`<a href='${myUrlprint}' target="_blank" class="fw-bolder mt-2">Run Report</a>`)
            //          var $flex = $("<div class='d-flex justify-content-center'></div>").append($iconButton).append($dropdown)
            //  var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
            //      return $result.add($flex);
            //  }
            //    },


            //  ];






            var eachGlobalIdForVoucherDelete = [];
            var globalIdsForVoucherDelete = [];
            var globalPageSize = 5;

            //function restoreDropdown() {
            //    $("#dropdown-titles").empty();
            //    for (var i = 0; i < globalFields.length; i++) {
            //        var title = globalFields[i].title;
            //        var name = globalFields[i].name;
            //        var visible = true;
            //        if (globalFields[i].visible == false) {
            //            visible = false;
            //        }
            //        //console.log(visible);
            //        titles = `<li>
            //                    <a class="dropdown-item" href="#">
            //                    <div class="custom-control custom-checkbox" >
            //                    <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
            //                    <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                    </div>
            //                    </a>
            //                    </li>`;

            //        $("#dropdown-titles").append(titles);

            //        document.querySelector(`${'#' + name}`).addEventListener('click', function () {
            //            var checkbox = event.target;
            //            var isChecked = checkbox.checked;
            //            if (isChecked) {
            //                $("#jsGridItems").jsGrid("fieldOption", this.value, "visible", true);
            //            }
            //            else {
            //                $("#jsGridItems").jsGrid("fieldOption", this.value, "visible", false);
            //            }
            //        });

            //        $(`${'#' + name}`).prop('checked', visible);


            //        $('.custom-control-label').on('click', function (e) {
            //            e.stopPropagation();
            //        });
            //        $('#dropdown-titles').on('click', function (e) {
            //            e.stopPropagation();
            //        });

            //        //console.log(data.BankBalance[i].AccName);
            //    }

            //    AccType = 'L';
            //    IncludingInactive = false;
            //}





            //document.getElementById("rows").addEventListener("change", function (e) {

            //    globalPageSize = this.value;

            //    $("#example-table").jsGrid({
            //        pageSize: globalPageSize
            //    });


            //});

            //document.getElementById("hide-all").addEventListener("click", function (e) {
            //    //e.stopPropagation();
            //    //e.preventDefault();
            //    globalPageSize = 0;
            //    $("#example-table").jsGrid({
            //        pageSize: globalPageSize
            //    });

            //    $("#rows").prop('selectedIndex', 0);

            //});
            //document.getElementById("show-all").addEventListener("click", function (e) {

            //    globalPageSize = 100;
            //    $("#example-table").jsGrid({
            //        pageSize: globalPageSize
            //    });
            //    $("#rows").prop('selectedIndex', 0);

            //});
            //document.getElementById("restore").addEventListener("click", function (e) {

            //    globalPageSize = 5;

            //    $("#example-table").jsGrid({
            //        pageSize: globalPageSize
            //    });

            //    //$('#rows').value(0);
            //    $("#rows").prop('selectedIndex', 0);

            //});

            //var withChildFlag = false;
            //document.getElementById("withChild").addEventListener("click", function (e) {


            //    withChildFlag = true;

            //    //alert('SAS');
            //});


            $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("GetUserDropdown", "Admin")',
                //  data: { VoucherType: "Cash Payment" },
                //  data: {VoucherType:$('#VoucherTypeName').text() },
                //headers: {
                //    contentType: "application/json; charset=utf-8",
                //    Authorization: token
                //},
                success: function (data) {

                    console.log(data);

                    const select = document.querySelector('#THead');
                    for (var i = 0; i < data.length; i++) {
                        const option = document.createElement('option');
                        option.value = data[i].Value;
                        option.text = data[i].Text;
                        select.appendChild(option);
                    }
                }
            });

            $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("GetWarehouseDropdown", "Admin")',//url: "https://www.pqstec.com/InvoiceApps/values/GetSupplierDropdown",
                //headers: {
                //    contentType: "application/json; charset=utf-8",
                //    Authorization: token
                //},
                success: function (data) {

                    const select = document.querySelector('#location');
                    for (var i = 0; i < data.length; i++) {
                        const option = document.createElement('option');
                        option.value = data[i].Value;
                        option.text = data[i].Text;
                        select.appendChild(option);
                    }
                }
            });




            //var jsGridItemsUrl = '@Url.Action("GetVoucherListByPage", "Accounts")';
            //  function initJsGrid() {
            //      var jsGridItemsDB = {
            //          loadData: function (filter) {
            //              console.log(filter);
            //              var d = $.Deferred();
            //              $.ajax({
            //                  type: "GET",
            //                  url: jsGridItemsUrl,
            //                  //headers: {
            //                  //    contentType: "application/json; charset=utf-8",
            //                  //    Authorization: token
            //                  //},
            //                  data: { searchquery: JSON.stringify(filter) },
            //                  contentType: "application/json; charset=utf-8",
            //                  dataType: "json"
            //              })

            //                  .done(function (result) {
            //                   //console.log(result);
            //                      d.resolve(result);
            //                      //console.log(result.ProductList);

            //                  });
            //              return d.promise().then(function (q) {

            //                  //console.log(q);
            //                  return {

            //                      data: q.VoucherList,
            //                      itemsCount: parseInt(q.PageInfo.TotalRecordCount)
            //                  }
            //              });
            //          }



            //      }


            //      //$("#exampleModal").on('hide.bs.modal', function () {
            //      //      $("#jsGridItems .jsgrid-update-button").trigger( "click" );
            //      //  });
            //      var child = [];

            //      var serial = 0;
            //      $("#jsGridItems").jsGrid({

            //          width: "100%",
            //          height:400,
            //          filtering: true,
            //          editing: true,
            //          autoload: true,
            //          pageSize: globalPageSize,
            //          pageLoading: true,
            //          pageIndex: 1,
            //          paging: true,
            //          controller: jsGridItemsDB,
            //        pagerFormat: "{prev} {pages} {next}   Results: {pageIndex} - {pageCount} of {itemCount}",
            //        pagePrevText: "<",
            //        pageNextText: ">",
            //          // selecting: true,

            //          fields: globalFields,
            //          rowClick: function (args) {
            //              // this.select(args.itemIndex, true);

            //              // console.log(args.item);
            //              // var Item=args.item;
            //              child = args.item.VoucherSubs;


            //              //// delete (Item);
            //              showModal(child,args.item.VoucherNo);

            //              // $("#jsGridItems").jsGrid("updateItem", args.item);


            //              $checkbox = $(args.event.currentTarget).find("input[type=checkbox]");
            //              if ($(args.event.target).closest("td").index() !== 8 && $(args.event.target).closest("td").index() !== 0 && $(args.event.target).closest("td").index() !== 1) {
            //                  $checkbox.prop("checked", !$checkbox.prop("checked"));

            //                  // Update selected items array
            //                  if ($checkbox.prop("checked")) {
            //                      selectItem(args.item);
            //                  } else {
            //                      unselectItem(args.item);
            //                  }
            //              }

            //          },

            //          onItemDeleting: function (args) {

            //              console.log(args.item);
            //              var abcvalue = args.item.isPosted;
            //              console.log(abcvalue);


            //              if (abcvalue == true) {
            //                  //$("#grid").jsGrid("deleteItem", args);
            //                  args.cancel = true;
            //                  alert('Already Posted');
            //              }

            //          },
            //          onItemDeleted: function (args) {
            //              parentValue = $('#jsGridItems').jsGrid('option', 'data');
            //              var serial = 0;
            //              for (var i = 0; i < parentValue.length; i++) {
            //                  parentValue[i].SLNo = serial + 1;
            //                  serial++;
            //              }
            //              console.log('serial');
            //              console.log(serial);
            //              $("#jsGridItems").jsGrid("refresh");

            //          }
            //          //rowDoubleClick: function(args) {

            //          //    var args = args.item;
            //          //    console.log('args.....?/////');
            //          //    console.log(args);
            //          //    var parentValue= $('#jsGridItems').jsGrid('option','data');
            //          //    serial = parentValue.length+1;
            //          //    Entry(args,serial);

            //          //}
            //      });
            //  }
            //  initJsGrid();
            //restoreDropdown();

            //function delete(Item){
            //   alert('deleted');
            //}



            function sendData() {
                var fromDate = new Date($('#Date').val());
                var toDate = new Date($('#Date2').val());

                if (fromDate > toDate) {
                    alert('Invalid date range! From Date must be smaller than To Date.');
                    return; // Abort the function and prevent further execution
                }
                var jsSendDataDB = {
                    loadData: function (filter) {
                        console.log(filter);
                        var d = $.Deferred();
                        $.ajax({
                            type: "GET",
                            url: jsGridItemsUrl,
                            //headers: {
                            //    contentType: "application/json; charset=utf-8",
                            //    Authorization: token
                            //},
                            data: { searchquery: JSON.stringify(filter), FromDate: $('#Date').val(), ToDate: $('#Date2').val(), UserId: $('#THead').val(), Warehouse: $('#location').val(), IsPosted: $('#PostType').val() },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json"
                        })

                            .done(function (result) {
                                //console.log(result);
                                d.resolve(result);
                                //console.log(result.ProductList);

                            });
                        return d.promise().then(function (q) {

                            //console.log(q);
                            return {

                                data: q.VoucherList,
                                itemsCount: parseInt(q.PageInfo.TotalRecordCount)
                            }
                        });
                    }

                }

                $("#jsGridItems").jsGrid({
                    controller: jsSendDataDB
                })

            }

            $(document).ready(function () {
                $('#Date, #Date2, #THead, #location, #PostType').on('change', function () {
                    // Display an alert message
                    //alert('Success! Date changed.');

                    sendData();
                });
            });




            function showModal(child, VoucherNo) {
                $("#exampleModalLabel").text("Voucher No: " + VoucherNo);
                $('#jsChildItems').jsGrid({
                    data: child
                });

            }
            //$('#jsChildItems').jsGrid({
            //    width:'100%',
            //    fields: [
            //        { name: "AccCode", title: 'Code' },
            //        { name: "AccName", title: 'Account Head' },
            //        { name: "Note1", title: 'Note 1',type:'text' },
            //        { name: "Note2", title: 'Note 2', type: 'text' },
            //        { name: "TKDebit", title: 'TKDebit' },
            //        { name: "TKCredit", title: 'TKCredit' },
            //        { name: "AccType", title: 'Type',visible:false}
            //    ]
            //});



            var titleTaker = [];
            var titlekey = [];
            var nameTaker = [];
            var jsonKey = [];

            //$('#exportPDF').click(function () {
            //    alert('PDF exportation is under construction!! \nthank you!!');

            //});

            //////***** without child ****//////
            //$('#exportPDF').click(function () {
            //    window.jsPDF = window.jspdf.jsPDF;

            //    // Get the data from JSGrid
            //    var data = $("#jsGridItems").jsGrid("option", "data");

            //    // Initialize the PDF document
            //    var doc = new jsPDF({
            //        orientation: 'landscape'
            //    });


            //    var parentJson = $('#jsGridItems').jsGrid('option', 'data');
            //    console.log(parentJson);
            //    // Set the table headers
            //    var headers = [];
            //    $("#jsGridItems").jsGrid("option", "fields").forEach(function (field) {
            //        console.log(field);
            //        if (field.name != "buttonDetails" && field.name != "button" && field.name != "CheckBox" && field.visible != false) {
            //            headers.push({
            //                title: field.title,
            //                dataKey: field.name
            //            });
            //        }
            //    });
            //    console.log(headers);

            //    var tableData = [];
            //    data.forEach(function (row) {
            //        var rowData = [];
            //        headers.forEach(function (header) {
            //            rowData.push(row[header.dataKey]);
            //        });
            //        tableData.push(rowData);
            //    });


            //    // AutoTable is a plugin for jsPDF that allows generating tables
            //    doc.autoTable({
            //        head: [headers],
            //        body: tableData
            //    });


            //    var startY = 25; // Adjust the startY value as needed
            //    doc.autoTable({
            //        startY: startY
            //    });

            //    // Add the text section
            //    var text = "Voucher List";
            //    var textWidth = doc.getStringUnitWidth(text) * doc.internal.getFontSize() / doc.internal.scaleFactor;
            //    var textHeight = doc.internal.getLineHeight() / doc.internal.scaleFactor;
            //    var textX = (doc.internal.pageSize.width - textWidth) / 2;
            //    var textY = startY - textHeight - 10; // Adjust the vertical position as needed
            //    doc.text(text, textX, textY);
            //    // Save the PDF
            //    //doc.save("jsgrid.pdf");
            //    var currentDate = new Date();
            //    var timestamp = currentDate.toISOString().replace(/:/g, "-");
            //    var fileName = "Voucher List " + timestamp + ".pdf";

            //    doc.save(fileName);


            //});

            ////////////////////*** with child ****///////////
            //$('#exportPDF').click(function () {
            //    window.jsPDF = window.jspdf.jsPDF;

            //    // Get the data from JSGrid
            //    var parentData = $("#jsGridItems").jsGrid("option", "data");

            //    // Initialize the PDF document
            //    var doc = new jsPDF({
            //        orientation: 'landscape'
            //    });

            //    var parentHeaders = [];
            //    var childHeaders = [];

            //    // Extract headers for parent and child items separately
            //    $("#jsGridItems").jsGrid("option", "fields").forEach(function (field) {
            //        if (field.name != "buttonDetails" && field.name != "button" && field.name != "CheckBox" && field.visible != false) {
            //            parentHeaders.push({
            //                title: field.title,
            //                dataKey: field.name
            //            });
            //        }
            //    });

            //    // Extract headers for child items
            //    $("#jsChildItems").jsGrid("option", "fields").forEach(function (field) {
            //        if (field.name != "VoucherId") { // Exclude the common key field
            //            childHeaders.push({
            //                title: field.title,
            //                dataKey: field.name
            //            });
            //        }
            //    });

            //    var tableData = [];
            //    parentData.forEach(function (parentRow) {
            //        var rowData = [];
            //        parentHeaders.forEach(function (header) {
            //            rowData.push(parentRow[header.dataKey]);
            //        });
            //        tableData.push(rowData);

            //        // Add child headers with color
            //        var childHeaderRow = [];
            //        //childHeaderRow.push('');
            //        childHeaders.forEach(function (header) {
            //            childHeaderRow.push({
            //                content: header.title,
            //                styles: {
            //                    fillColor: '#CCCCCC' // Specify the desired color
            //                }
            //            });
            //        });
            //        tableData.push(childHeaderRow);

            //        // Add child items to tableData
            //        if (parentRow.VoucherSubs) {
            //            parentRow.VoucherSubs.forEach(function (childItem) {
            //                var childRow = [];
            //                //childRow.push('');
            //                childHeaders.forEach(function (header) {
            //                    childRow.push(childItem[header.dataKey]);
            //                });
            //                tableData.push(childRow);
            //            });
            //        }
            //    });

            //    // AutoTable is a plugin for jsPDF that allows generating tables
            //    doc.autoTable({
            //        head: [parentHeaders],
            //        body: tableData,
            //        didParseCell: function (data) {
            //            if (data.row.index === 1) { // Apply styles only to the child header row
            //                data.cell.styles.fillColor = '#CCCCCC'; // Specify the desired color
            //            }
            //        }
            //    });

            //    var startY = 25; // Adjust the startY value as needed
            //    doc.autoTable({
            //        startY: startY
            //    });

            //    // Add the text section
            //    var text = "Voucher List";
            //    var textWidth = doc.getStringUnitWidth(text) * doc.internal.getFontSize() / doc.internal.scaleFactor;
            //    var textHeight = doc.internal.getLineHeight() / doc.internal.scaleFactor;
            //    var textX = (doc.internal.pageSize.width - textWidth) / 2;
            //    var textY = startY - textHeight - 10; // Adjust the vertical position as needed
            //    doc.text(text, textX, textY);

            //    // Save the PDF
            //    var currentDate = new Date();
            //    var timestamp = currentDate.toISOString().replace(/:/g, "-");
            //    var fileName = "Voucher List " + timestamp + ".pdf";

            //    doc.save(fileName);
            //});

            //////***** CSV File ****//////
            //$('#exportUl').click(function () {

            //    let globalFields = $('#jsGridItems').jsGrid('option', 'fields');
            //    let globalFieldsTitle = $('#jsGridItems').jsGrid('option', 'title');

            //    //debugger

            //    for (var i = 0; i < globalFields.length; i++) {

            //        if (globalFields[i].name != 'button' && globalFields[i].visible != false && globalFields[i].title != 'Check Box' && globalFields[i].title != 'Details') {
            //            nameTaker.push(globalFields[i]);
            //            titleTaker.push(globalFields[i].title);
            //        }
            //    }
            //    //debugger
            //    var parentJson = $('#jsGridItems').jsGrid('option', 'data');
            //    if (parentJson == '')
            //        return;
            //    if (withChildFlag == true) {
            //        var csv = convertJsonToCsv(parentJson, titleTaker);
            //    }
            //    else if (withChildFlag == false) {
            //        var csv = convertJsonToCsvWithoutchild(parentJson, titleTaker);
            //    }

            //    titleTaker = [];
            //    titlekey = [];
            //    nameTaker = [];
            //    jsonKey = [];
            //    var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            //    var link = document.createElement("a");
            //    link.href = URL.createObjectURL(blob);
            //    var currentDate = new Date();
            //    var timestamp = currentDate.toISOString().replace(/:/g, "-");
            //    var fileName = "Voucher List " + timestamp + ".csv";
            //    link.download = fileName;
            //    //link.download = "data.csv";
            //    link.click();


            //});




            //// $('#csv').click(function () {

            ////    jsonKey=[];
            ////    nameTaker=[];
            ////     for (var i = 0; i < globalFields.length; i++) {

            ////            if (globalFields[i].name != 'button' && globalFields[i].visible!=false) {
            ////               nameTaker.push(globalFields[i]);

            ////            }
            ////     }

            ////    var parentJson = $('#jsGridItems').jsGrid('option', 'data');
            ////        if (parentJson == '')
            ////        return;

            ////        var csv = convertJsonToCsv(parentJson);
            ////        var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            ////        var link = document.createElement("a");
            ////        link.href = URL.createObjectURL(blob);
            ////        link.download = "data.csv";
            ////        link.click();


            ////});

            ////function convertJsonToCsv(jsonData) {
            ////    var csv = '';
            ////    var keys = Object.keys(jsonData[0]);

            ////    csv += keys.join(',') + '\n';
            ////    jsonData.forEach(function(item) {
            ////        csv += keys.map(function(key) {

            ////            return item[key];
            ////            }).join(',') + '\n';
            ////         });
            ////     return csv;
            ////}


            //function convertJsonToCsv(jsonData, titletaker) {
            //    //debugger

            //    var csv = '';
            //    var keys = Object.keys(jsonData[0]);
            //    for (var k = 0; k < keys.length; k++) {
            //        for (var i = 0; i < nameTaker.length; i++) {

            //            if (nameTaker[i].name == keys[k]) {
            //                jsonKey[i] = keys[k];

            //            }
            //        }
            //    }

            //    for (var k = 0; k < keys.length; k++) {
            //        for (var i = 0; i < titleTaker.length; i++) {
            //            console.log(titleTaker[i]);
            //            console.log(keys[k]);
            //            if (titleTaker[i] == keys[k]) {
            //                titlekey[i] = keys[k];

            //            }
            //        }
            //    }

            //    //csv += jsonKey.join(',') + '\n';
            //    csv += titleTaker.join(',') + '\n';
            //    jsonData.forEach(function (item) {

            //        csv += jsonKey.map(function (key) {

            //            for (var i = 0; i < nameTaker.length; i++) {
            //                if (nameTaker[i].name == key) {
            //                    return item[key];
            //                }
            //            }

            //        }).join(',') + '\n' + ',' + ',';

            //        var childHeaders = $('#jsChildItems').jsGrid('option', 'fields').map(function (field) {
            //            return field.title;
            //        });

            //        var typeIndex = childHeaders.indexOf('Type');
            //        if (typeIndex !== -1) {
            //            childHeaders.splice(typeIndex, 1);
            //        }

            //        csv += childHeaders.join(',') + '\n' + ',' + ',';

            //        item.VoucherSubs.forEach(function (childItems, index) {
            //            var childValues = Object.keys(childItems).map(function (key) {
            //                if (key !== 'AccType' && childItems != AccType) {
            //                    return childItems[key];
            //                }
            //            });
            //            csv += childValues.join(',') + '\n' + (index === item.VoucherSubs.length - 1 ? '' : ',' + ',');
            //        });

            //    });

            //    //    var childkeys = Object.keys(item.VoucherSubs[0]);
            //    //     csv += childkeys.join(',') + '\n'+','+',';
            //    //     var count=0;

            //    //   item.VoucherSubs.forEach(function(childItems){

            //    //       count++;

            //    //       if(count==item.VoucherSubs.length){
            //    //           console.log('what');
            //    //           console.log(count);
            //    //           console.log(item.VoucherSubs.length);
            //    //           csv += childkeys.map(function(key) {
            //    //               if(childItems!= AccType){
            //    //           return childItems[key];
            //    //               }
            //    //            }).join(',') + '\n';
            //    //       }
            //    //       else {
            //    //           csv += childkeys.map(function(key) {
            //    //               if(childItems!= AccType){
            //    //           return childItems[key];
            //    //               }
            //    //            }).join(',') + '\n'+','+',';
            //    //       }

            //    //   });

            //    //  // console.log('parent');

            //    //});
            //    return csv;
            //}

            //function convertJsonToCsvWithoutchild(jsonData, titletaker) {

            //    //debugger
            //    var csv = '';
            //    var keys = Object.keys(jsonData[0]);
            //    for (var k = 0; k < keys.length; k++) {
            //        for (var i = 0; i < nameTaker.length; i++) {

            //            if (nameTaker[i].name == keys[k]) {
            //                jsonKey[i] = keys[k];

            //            }
            //        }
            //    }

            //    for (var k = 0; k < keys.length; k++) {
            //        for (var i = 0; i < titleTaker.length; i++) {
            //            console.log(titleTaker[i]);
            //            console.log(keys[k]);
            //            if (titleTaker[i] == keys[k]) {
            //                titlekey[i] = keys[k];

            //            }
            //        }
            //    }

            //    //csv += jsonKey.join(',') + '\n';
            //    csv += titletaker.join(',') + '\n';
            //    let sumstring = "=";
            //    let ii = 2;
            //    jsonData.forEach(function (item) {
            //        sumstring += 'E' + ii + '+';

            //        ii++;
            //        csv += jsonKey.map(function (key) {

            //            for (var i = 0; i < nameTaker.length; i++) {
            //                if (nameTaker[i].name == key) {
            //                    var value = item[key];
            //                    console.log(value);
            //                    if (typeof value === 'string' && value.includes(',')) {
            //                        // Wrap the value in double quotes if it contains commas
            //                        value = '"' + value + '"';
            //                    }
            //                    //return item[key];
            //                    return value;
            //                }
            //            }

            //        }).join(',') + '\n';

            //    });
            //    sumstring = sumstring.slice(0, -1);
            //    console.log(sumstring);
            //    csv += ',,,,' + sumstring + '\n';
            //    return csv;
            //}



            //To load get data in main modal
            function editVoucherList(data, type) {
                alert('edit clicked')
                var myUrlGet = '@Url.Action("AddVoucherByType", "Accounts")?VoucherId=' + data + '&Type=' + type;
            }



            //delete voucherlist function
           document.addEventListener("click", function(event) {
                var deleteButton = event.target.closest("[data-voucher-id]");
    
                if (deleteButton) {
                    event.preventDefault();
        
                    var voucherId = deleteButton.getAttribute("data-voucher-id");
        
                    if (confirm('Are you sure you want to remove the AccountHead Information?')) {
                        // Perform the AJAX request
                        $.ajax({
                            type: "get",
                            data: { VoucherId: voucherId },
                            url: '@Url.Action("DeleteVoucher", "Accounts")',
                            success: function (response) {
                                if (response.success == "1") {
                                    toastr.success(response.msg, "", {
                                        "toastClass": "toast-green",
                                    });
                                   
                                    initTabulator();
                                   // initJsGrid();
                                } else if (response.success == "0") {
                                    toastr.success(response.msg, "", {
                                        "toastClass": "toast-red",
                                    });
                                }
                            }
                        });
                    }
                }
            });

            //functions to select/unselect and manage batch delete starts
            var selectedItems = [];

            var selectItem = function (item) {
                selectedItems.push(item);
            };

            var unselectItem = function (item) {
                selectedItems = $.grep(selectedItems, function (i) {
                    return i !== item;
                });
            };

            var deleteSelectedItems = function () {
                if (!selectedItems.length || !confirm("Are you sure?"))
                    return;

                deleteClientsFromDb(selectedItems);

                var $grid = $("#jsGridItems");
                $grid.jsGrid("option", "pageIndex", 1);
                $grid.jsGrid("loadData");

                selectedItems = [];
                eachGlobalIdForVoucherDelete = [];

            };
            //      var deleteClientsFromDb = function (deletingClients) {
            //          console.log(deletingClients)
            //          console.log(deletingClients.VoucherId)

            //    globalIdsForVoucherDelete = [...deletingClients]
            //    console.log(globalIdsForVoucherDelete);
            //    for (var i = 0; i < globalIdsForVoucherDelete.length; i++) {
            //        console.log(globalIdsForVoucherDelete[i].VoucherId);
            //        eachGlobalIdForVoucherDelete.push(globalIdsForVoucherDelete[i].Id);
            //    }
            //    console.log(eachGlobalIdForVoucherDelete);
            //};

            var deleteClientsFromDb = function (deletingClients) {
                globalIdsForVoucherDelete = [...deletingClients]
                for (var i = 0; i < globalIdsForVoucherDelete.length; i++) {
                    eachGlobalIdForVoucherDelete.push(globalIdsForVoucherDelete[i].VoucherId);
                }

                for (var i = 0; i < eachGlobalIdForVoucherDelete.length; i++) {
                    var myUrldelete = '@Url.Action("DeleteVoucher", "Accounts")?VoucherId=' + eachGlobalIdForVoucherDelete[i];
                    $.ajax({
                        type: "get",
                        url: myUrldelete, /*"/api/AccountHead/DeleteAccountHead?AccountHeadId=" + eachGlobalIdForVoucherDelete[i],*/
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                            }
                            else if (response.success == "0") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                            }
                            //initjsGrid();
                            //console.log(response);
                        },
                        error: function (error) {
                            console.error(error);
                        }
                    });
                }
            };
            //  function JSONToCSVConvertor(JSONData, ReportTitle, ShowLabel) {
            //      //If JSONData is not an object then JSON.parse will parse the JSON string in an Object
            //      var arrData = typeof JSONData != 'object' ? JSON.parse(JSONData) : JSONData;
            //      var CSV = '';
            //      var subCSV = '';

            //      //Set Report title in first row or line

            //      CSV += ReportTitle + '\r\n\n';

            //      //This condition will generate the Label/Header
            //      if (ShowLabel) {
            //          var row = "";
            //          var subrow = "";

            //          //console.log(arrData[0]);
            //          //This loop will extract the label from 1st index of on array
            //          for (var index in arrData[0]) {
            //              //
            //              //Now convert each value to string and comma-seprated

            //              if (index === 'subinfo') {
            //                  row += ',' + ',' + index;
            //              }
            //              else {
            //                  row += index + ',';
            //              }

            //          }

            //          row = row.slice(0, -1);
            //          //append Label row with line break
            //          CSV += row + ',' + '\r\n';

            //      }

            //      //1st loop is to extract each row
            //      for (var i = 0; i < arrData.length; i++) {
            //          var row = "";
            //          var subrow = "";

            //          //2nd loop will extract each column and convert it in string comma-seprated
            //          for (var index in arrData[i]) {
            //              if (index != 'subinfo') {
            //                  row += arrData[i][index] + ',';
            //              }



            //      }
            //          CSV += row + ',';

            //          row.slice(0, row.length - 1);

            //          //add a line break after each row
            //          // CSV += row + '\r\n';
            //      }
            //      //1st loop is to extract each row


            //if (CSV == '') {
            //          alert("Invalid data");
            //          return;
            //      }

            //      //Generate a file name
            //      var fileName = "MyReport_";
            //      //this will remove the blank-spaces from the title and replace it with an underscore
            //      fileName += ReportTitle.replace(/ /g, "_");

            //      //Initialize file format you want csv or xls
            //      var uri = 'data:text/csv;charset=utf-8,' + escape(CSV);

            //      // Now the little tricky part.
            //      // you can use either>> window.open(uri);
            //      // but this will not work in some browsers
            //      // or you will not get the correct file extension

            //      //this trick will generate a temp <a /> tag
            //      var link = document.createElement("a");
            //      link.href = uri;

            //      //set the visibility hidden so it will not effect on your web-layout
            //      link.style = "visibility:hidden";
            //      link.download = fileName + ".csv";

            //      //this part will append the anchor tag and remove it after automatic click
            //      document.body.appendChild(link);
            //      link.click();
            //      document.body.removeChild(link);


            //  }
        @*function getReport(VoucherId) {
            alert(VoucherId)
            var type = '';
            $.ajax({
            type: 'POST',
            url: '@Url.Action("Print", "Accounts")',
            dataType: 'json',
            async: true,
            data: { id: VoucherId, type: type },
            success: function (response) {
            console.log('success');
            alert('ss')
            location.open(response, '_blank')

            },
            error: function (ex) {
            alert('Failed.' + ex);
            }

            });

            }*@
                          });




    </script>
}


