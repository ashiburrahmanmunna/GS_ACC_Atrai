@*@model List<Atrai.Model.Core.Entity.AccountHeadModel>*@
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@model IEnumerable<Atrai.Controllers.AccountsController.BalanceSheetModel>
@*@model Tuple<List<Atrai.Model.Core.Entity.AccountHeadModel>, IEnumerable<Atrai.Controllers.AccountsController.BalanceSheetModel>>*@
@{
    ViewData["Title"] = "Voucher Type";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    System.Globalization.CultureInfo BDFormat = new System.Globalization.CultureInfo("hi-IN");
}
<style>
    .center-align {
        text-align: center;
    }
    .table > :not(:first-child) {
        border-top: 0;
    }

    #treegridTable th {
        text-align: center;
        font-weight: 600;
        border: 1px solid #BABEC5;
        /*font-size: 14px;*/
    }

    .table > tbody > tr > td {
        line-height: 15px !important;
        border: 1px solid #c9c9c9;
    }


    .table tbody tr td {
        /* border: 1px solid #c9c9c9;*/
        font: 14px;
        color: #8A8A8A;
        line-height: 15px;
    }
    /*    .table>:not(caption)>*>* {

             border-bottom-width: 0px;

        }*/
    .text-red {
        color: #FF0000 !important;
    }

    #body td:not(:first-child) {
        text-align: center;
    }

    .root-node {
        font-weight: 500;
    }

    .upper-form-style {
        background: #e9ecef6b;
        /*padding-top: 62px*/
    }

    .report-text-style {
        color: #0000ce;
    }

    .company-and-other-text-style {
        margin-top: 40px;
    }

    .customize-btn {
        background: #e9ecef6b;
        border: 1px solid black;
        border-radius: 20px;
    }

        .customize-btn:hover {
            background: #ffffff;
            border: 1px solid black;
            color: black;
            border-radius: 20px;
        }

    .customization-btn {
        background: #2CA01C;
        color: white;
        /*border: 1px solid black;*/
        border-radius: 20px;
    }

        .customization-btn:hover {
            background: #235d1b;
            color: white;
            border-radius: 20px;
        }

    .dropdown-button-style {
        border: 1px solid #ced4da;
        background: white;
    }

        .dropdown-button-style:hover {
            border: 1px solid #ced4da;
            background: white;
        }

    .dropdown-menu.show {
        width: 360px;
    }

    .modal-dialog {
        max-width: 90%;
        margin: 2rem auto;
    }

    .report-print-setting-style {
        background: #e9ecef6b;
    }

    .total-accname {
        border-bottom: 5px double black !important;
    }

    #loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        background: url('/assets/loading-load.gif') 50% 50% no-repeat rgb(249, 249, 249);
        opacity: .6;
    }
    .tabulator-data-tree-branch
    {
        display: none;
    }
    input[type="checkbox"]:disabled + label {
        opacity: 0.6; /* Adjust the opacity value as desired */
        cursor: not-allowed;
    }

</style>
<div class="row" id="change-checkbox">
    <div class="col-12 col-md-12">

        <div class="card">
            <div class="card-body">
                <div class="row m-0 ps-4 upper-form-style pt-2">
                    <div class="col-md-12 mb-2">
                        <span class="report-text-style"><i class="bi bi-chevron-left"></i> Back to report list</span>
                        <h4 class="fw-bold fs-3 mt-3">
                            Balance Sheet Comparison Report
                        </h4>
                        <span class="float-end">
                            <button type="button" class="btn customize-btn fw-bold">Customize</button>
                            <button type="button" class="btn customization-btn fw-bold">Save Customization</button>
                        </span>
                    </div>
                    <div class="col-md-8 col-12 mb-2">



                        <div class="row">
                            <div class="col-md-3 col-12">
                                <div class="mb-2" id="reportrange">
                                    <label class="form-label">Report period</label>
                                    <select onclick="setDateRange()" id="select2" class="form-select">
                                        @*<option selected="selected" disabled="disabled">Select an Option</option>*@
                                        <option value="1">All Dates</option>
                                        <option value="2">Custom</option>
                                        <option value="3" selected>Today</option>
                                        <option value="4">This Week</option>
                                        <option value="5">This Week-to-date</option>
                                        <option value="6">This Month</option>
                                        <option value="7">This Month-to-date</option>
                                        <option value="8">This Quarter</option>
                                        <option value="9">This Quater-to-date</option>
                                        <option value="10">This Year</option>
                                        <option value="11">This Year-to-date</option>
                                        <option value="12">This Year-to-last-month</option>
                                        <option value="13">Yesterday</option>
                                        <option value="14">Recent</option>
                                        <option value="15">Last Week</option>
                                        <option value="16">Last Week-to-date</option>
                                        <option value="17">Last Month</option>
                                        <option value="18">Last Month-to-date</option>
                                        <option value="19">Last Quarter</option>
                                        <option value="20">Last Quarter-to-date</option>
                                        <option value="21">Last Year</option>
                                        <option value="22">Last Year-to-date</option>
                                        <option value="23">Since 30 days ago</option>
                                        <option value="24">Since 60 days ago</option>
                                        <option value="25">Since 90 days ago</option>
                                        <option value="26">Since 365 days ago</option>
                                        <option value="27">Next Week</option>
                                        <option value="28">Next 4 Weeks</option>
                                        <option value="29">Next Month</option>
                                        <option value="30">Next Quarter</option>
                                        <option value="31">Next Year</option>
                                    </select>
                                </div>
                            </div>


                            <div class="col-md-4 col-12">
                                <div class="mb-2">
                                    <label class="form-label">From Date</label>

                                    <input class="form-control" id="start-date" disabled="disabled" />

                                </div>
                            </div>
                            <div class="col-md-4 col-12">
                                <div class="mb-2">
                                    <label class="form-label">To Date</label>

                                    <input class="form-control" id="end-date" disabled="disabled" />

                                </div>
                            </div>
                            @*<div class="col-md-4 col-12">
                                <div class="mb-2">
                                <label class="form-label">Show non-zero or active only</label>
                                <select class="form-select">
                                <option selected>Active rows/active columns</option>
                                <option value="1">Months</option>
                                </select>
                                </div>
                                </div>*@
                            <div class="col-md-8 col-12 mb-12 d-none">
                                <div class="input-group mb-1">

                                    <span class="input-group-text ">
                                        Voucher Transaction Group
                                    </span>

                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-md-3 col-12">
                                <div class="mb-2">
                                    <label class="form-label">Display columns by</label>
                                    <select class="form-select" id="select-form">
                                        <option value="0" selected>Others</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-3 col-12">
                                <div class="dropdown1 d-grid">
                                    <label class="form-label">Show non-zero or active only</label>
                                    <button class="btn dropdown-button-style  dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                            aria-expanded="false">
                                        Active rows/columns
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                        <li class="fw-bold ms-3">Show rows</li>
                                        <li>
                                            <a class="dropdown-item" href="#">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                                                    <label class="custom-control-label cursor-pointer" id="with-group-label" for="with-group">Active</label>
                                                </div>
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="with-inactive">All</label>
                                                </div>
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="with-inactive">Non-zero</label>
                                                </div>
                                            </a>
                                        </li>
                                        <li class="fw-bold ms-3">Show columns</li>
                                        <li>
                                            <a class="dropdown-item" href="#">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                                                    <label class="custom-control-label cursor-pointer" id="with-group-label" for="with-group">Active</label>
                                                </div>
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="with-inactive">All</label>
                                                </div>
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="with-inactive">Non-zero</label>
                                                </div>
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-3 col-12">
                                <div class="dropdown1 d-grid">
                                    <label class="form-label">Compare another period</label>
                                    <button class="btn dropdown-button-style  dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                            aria-expanded="false">
                                        <span class="me-5">Select period </span>
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                        <li>
                                            @*<a id="" class="dropdown-item" href="#">*@
                                            <div class="custom-control custom-checkbox">
                                                <input class="form-check-input ms-3" type="checkbox" value="Months" name="flexRadioDefault" id="previous-period">
                                                <label class="custom-control-label cursor-pointer" id="PP" for="with-group">Previous period (PP)</label>
                                            </div>
                                            @*</a>*@
                                            @*<div class="d-flex mx-4">
                            <input class="form-control w-75 mx-2" id="start-date" />
                            <input class="form-control w-75" id="end-date" />
                        </div>*@
                                            <div class="ms-4 d-flex my-2">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="checkbox" name="flexRadioDefault" value="1" id="TkChange" disabled>
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="TkChange">Tk change</label>
                                                </div>
                                                <div class="custom-control custom-checkbox ms-2">
                                                    <input class="form-check-input" type="checkbox" value="1" name="flexRadioDefault" id="PercentageChange" disabled>
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="PercentageChange">% change</label>
                                                </div>
                                            </div>
                                        </li>
                                        <li>
                                            @*<a id="" class="dropdown-item" href="#">*@
                                            <div class="custom-control custom-checkbox">
                                                <input class="form-check-input ms-3" type="checkbox" value="Months PY" name="flexRadioDefault" id="previous-year">
                                                <label class="custom-control-label cursor-pointer" id="PY" for="with-group">Previous year (PY)</label>
                                            </div>
                                            @*</a>*@
                                            @*<div class="d-flex mx-4">
                            <input class="form-control w-75 mx-2" id="start-date" />
                            <input class="form-control w-75" id="end-date" />
                        </div>*@
                                            <div class="ms-4 d-flex my-2">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="checkbox" name="flexRadioDefault" value="1" id="TkChangePy" disabled>
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="TkChangePy">Tk change</label>
                                                </div>
                                                <div class="custom-control custom-checkbox ms-2">
                                                    <input class="form-check-input" type="checkbox" value="1" name="flexRadioDefault" id="PercentageChangePy" disabled>
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="PercentageChangePy">% change</label>
                                                </div>
                                            </div>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="checkbox" name="flexRadioDefault" id="percent-of-row">
                                                    <label class="custom-control-label cursor-pointer" id="with-inactive-label" for="with-inactive">% of Row</label>
                                                </div>
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item" href="#">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="form-check-input" type="checkbox" name="flexRadioDefault" value="1" id="percent-of-column">
                                                    <label class="custom-control-label cursor-pointer" id="with-group-label" for="with-group">% of Column</label>
                                                </div>
                                            </a>
                                        </li>
                                        <li class="mt-3 ms-3"><a href="#">Reorder columns</a></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-3 col-12">
                                <div class="mb-2">
                                    <label class="form-label">Accounting method</label>
                                    <div class="mt-2">
                                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                                        <label class="form-label">Cash</label>
                                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                                        <label class="form-label">Accural</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4 col-12 mb-2 mt-5 d-flex justify-content-center">
                        <div>
                            <button type="button" class="btn customize-btn fw-bold" style="" onclick="GetReport()">Run Report</button>
                        </div>
                    </div>
                </div>
                <div id="balance-sheet" class="me-lg-auto ms-lg-auto w-75" style="border: 1px solid #e3eaf3;  margin-top:40px;">
                    <div class="ms-3 mt-3">
                        <a class="text-decoration-none text-black cursor-pointer" id="add-notes"><span>Add notes</span></a>
                        <span class="float-end">
                            <a type="button" id="emailPdfLoaded" href="#" class="text-decoration-none text-black" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                <i class="bi bi-envelope me-3 fs-5"></i>
                            </a>
                            <a href="#" id="printPdfLoaded" class="text-decoration-none text-black" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                <i class="bi bi-printer me-3 fs-5"></i>
                            </a>
                            <span class="dropdown1 me-3">
                                <a class="dropdown-toggle text-decoration-none text-black cursor-pointer" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                   aria-expanded="false">
                                    <i class="bi bi-upload fs-5"></i>
                                </a>
                                @*<button class="btn dropdown-button-style  dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                    </button>*@
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                    <li><a class="dropdown-item" href="#" id="export-excel-link">Export to Excel</a></li>
                                    <li><a class="dropdown-item" href="#" id="export-pdf-link">Export to PDF</a></li>
                                    <li><a class="dropdown-item" href="#">Export to Google Sheets</a></li>
                                </ul>
                            </span>
                            <span class="dropdown1 me-3">
                                <a class="text-decoration-none text-black cursor-pointer" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                   aria-expanded="false">
                                    <i class="bi bi-gear fs-5"></i>

                                </a>
                                @*<button class="btn dropdown-button-style  dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                    </button>*@
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                    <li class="fw-bold ms-3">Display density</li>
                                    <li>
                                        <a class="dropdown-item" href="#">
                                            <div class="custom-control custom-checkbox">
                                                <input type="checkbox" class="custom-control-input title-input" id="compact" value="compact">
                                                <label class="custom-control-label cursor-pointer" id="compact-label" for="compact">Compact</label>
                                            </div>
                                        </a>
                                    </li>
                                </ul>
                            </span>
                            @*<a href="#" class="text-decoration-none text-black">
                                <i class="bi bi-upload me-3 fs-5"></i>
                                </a>*@
                            @*<a href="#" class="text-decoration-none text-black">
                                <i class="bi bi-gear me-3 fs-5"></i>
                                </a>*@
                        </span>

                        @*print modal*@
                        <!-- Button trigger modal -->
                        @*<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                            Launch demo modal
                            </button>*@

                        <!-- Modal -->
                        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                                <div class="modal-content" style="border-radius:0px;">
                                    <div class="d-flex mt-4 mb-3">
                                        <h4 class="ms-3 fw-bold">Print, email, or save as PDF</h4>
                                        <div class="ms-auto"><button type="button" class="btn-close me-2 mt-2" data-bs-dismiss="modal" aria-label="Close"></button></div>
                                    </div>
                                    <div class="modal-body">
                                        To print, right-click the preview and select <span class="fw-bold">Print</span>. Or, click the <span class="fw-bold">Print</span> icon if you see one below.
                                        <div class="row">
                                            @*report-print-setting-style*@
                                            <p class="fw-bold">Report print settings</p>
                                            <div class="col-lg-1 mt-2">
                                                Orientation
                                            </div>
                                            <div class="col-lg-2">
                                                <select class="form-select" id="orientation">
                                                    <option value="portrait" selected>Portrait</option>
                                                    <option value="landscape">Landscape</option>
                                                </select>
                                            </div>
                                            <div class="col-lg-9">
                                                <iframe id="pdf-iframe" name="pdf-iframe" style="width: 100%; height: 500px;"></iframe>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3 mt-3">
                                        <button type="button" class="btn ms-5 customize-btn fw-bolder" data-bs-dismiss="modal">Close</button>
                                        <button id="print-pdf" type="button" class="btn float-end me-5 customization-btn fw-bolder">Print</button>
                                        <button id="save-pdf" type="button" class="btn float-end me-2 customize-btn fw-bolder">Save as PDF</button>
                                        <button type="button" class="btn float-end me-2 customize-btn fw-bolder">Email</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div id="parentDiv">
                        <div class="row">
                            <div class="col">

                                <div id="make-editable" class="text-center company-and-other-text-style" onclick="makeEditable()">
                                    <div class="form-check d-none" id="form-check-visibility">
                                        <input class="form-check-input float-md-none" type="checkbox" name="flexCheckDefaultforImage" id="flexCheckDefaultforImage">
                                        <label class="form-check-label" for="flexCheckDefaultforImage">
                                            Show Image
                                        </label>
                                    </div>
                                    <img id="company-image" style="width:10%" class="d-none" src="~/assets/Custom-URL-Shortener.jpg" />
                                    <h3 id="company-name">@HttpContextAccessor.HttpContext.Session.GetString("CompanyName")</h3>
                                    <h6 id="primary-address">@HttpContextAccessor.HttpContext.Session.GetString("PrimaryAddress")</h6>
                                    <h6 id="trial-balance" class="text-black fw-bolder">
                                        Balance Sheet Comparison
                                    </h6>
                                    <h6 id="date-month-year"></h6>
                                </div>
                            </div>
                        </div>


                        <div class="row m-0 p-0">
                            <div class="table-responsive">
                                <table class="table table-condensed table-hover tree bg-white border" data-statement-id="balancesheet" id="treegridTable">
                                    <tbody id="body">
                                    </tbody>
                                </table>
                                @*<div id="loader" class="d-none"></div>*@

                            </div>
                            <!--<table class="table-borderless table-sm">
                            <thead style="border-top: 0.5px solid #00000059; border-bottom: 0.5px solid #00000059; ">
                                <tr id="add-th">
                                </tr>
                                <tr id="t-head-rows">-->
                            @*<th class="w-50" scope="col"></th>
                                <th class="text-end p-2 text-black" scope="col" style="border-left: 0.5px solid #00000059; ">DEBIT</th>
                                <th class="text-end pe-3 text-black" scope="col" style="border-left: 0.5px solid #00000059; ">CREDIT</th>*@
                            <!--</tr>
                                </thead>

                                <tbody id="t-body">
                                </tbody>
                            </table>-->
                            @*<div id="tableContainer"></div>*@
                            <div class="form-floating d-none" id="add-notes-textarea">
                                <textarea class="form-control" placeholder="Add notes or include additional info with your report" id="floatingTextarea2" style="height: 200px"></textarea>
                                <label for="floatingTextarea2">Add notes or include additional info with your report</label>
                                <i class="bi bi-x cursor-pointer float-end" id="close-textarea" style="position: absolute; top: -10px; right: 13px; font-size:25px; "></i>
                                @*<button type="button" class="close" id="close-textarea">&times;</button>*@
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-treegrid/0.2.0/js/jquery.treegrid.bootstrap3.js"></script>
    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsVoucherReport.js" asp-append-version="true"></script>
    <script type="text/javascript">
        $(document).ready(function () {

            $('#make-editable').mouseover(function () {
                $('#form-check-visibility').removeClass('d-none').addClass('d-block');
            });
            $('#make-editable').mouseout(function () {
                $('#form-check-visibility').removeClass('d-block').addClass('d-none');
            });
        });

        function makeEditable() {
            $("#form-check-visibility").removeClass("d-none");
            var checkbox = document.getElementById("flexCheckDefaultforImage");
            var image = document.getElementById("company-image");

            checkbox.addEventListener("change", function () {
                if (this.checked) {
                    image.classList.remove("d-none");
                } else {
                    image.classList.add("d-none");
                }
            });
            var companyName = document.getElementById("company-name");
            var primaryAddress = document.getElementById("primary-address");
            var trialBalanceName = document.getElementById("trial-balance");
            var dateMonthYear = document.getElementById("date-month-year");
            companyName.contentEditable = true;
            primaryAddress.contentEditable = true;
            trialBalanceName.contentEditable = true;
            dateMonthYear.contentEditable = true;
        }
        //document.getElementById("change-checkbox").on("click", function () {
        //    $("#form-check-visibility").toggleClass("d-none");
        //})
        $('#compact').change(function() {
            if ($(this).is(':checked')) {
                $('#treegridTable th').addClass('pt-3 pb-3');
                $('.table tbody tr td').addClass('pt-3 pb-3');
            }
            else {
                $('#treegridTable th').removeClass('pt-3 pb-3');
                $('.table tbody tr td').removeClass('pt-3 pb-3');
            }
        });
        //document.addEventListener("click", function (event) {
        //    var visibilityDiv = document.getElementById("form-check-visibility");
        //    var targetElement = event.target;
        //    if (!targetElement.closest('#make-editible') && !targetElement.closest('#form-check-visibility')) {
        //        visibilityDiv.removeClass("d-none").classList.add("d-none");
        //    }
        //})
        /*function to goto the add notes text area after click*/
        $("#add-notes").click(function() {
            $("#add-notes-textarea").toggleClass("d-none");
            $("#floatingTextarea2").focus();
            $("#add-notes").text("Edit notes");
        });

        /*function to close  text area after click*/
        $("#close-textarea").click(function() {
            $("#add-notes-textarea").addClass("d-none");
            $("#add-notes").text("Add notes");
            var elem = document.getElementById("add-notes");
            elem.scrollIntoView();
        });

        // Tk change wise functionality starts
        var valueOfPP = "Total Only";
        var pp=false;
        
       
        
        
        
        document.getElementById("previous-period").addEventListener("change", function () {
            if (this.checked) {
                pp=true;
                valueOfPP = "Months";
                document.getElementById("TkChange").disabled = false;
                document.getElementById("PercentageChange").disabled = false;
            } else {
                pp=false;
                valueOfPP = "Total Only";
                document.getElementById("TkChange").checked = false;
                document.getElementById("TkChange").disabled = true;
                document.getElementById("PercentageChange").checked = false;
                document.getElementById("PercentageChange").disabled = true;
            }
        });

        var ChangeValueTk = "0";
         var tkpp=false;
        document.getElementById("TkChange").addEventListener("change", function () {
            if (this.checked) {
                tkpp=true;
                ChangeValueTk = "1";
            } else {
                tkpp=false;
                ChangeValueTk = "0";
            }
        });
        var ChangeValuePercentage = "0";
        var perPP=false;
        document.getElementById("PercentageChange").addEventListener("change", function () {
            if (this.checked) {
                perPP=true;
                ChangeValuePercentage = "1";
            } else {
                perPP=false;
                ChangeValuePercentage = "0";
            }
        });
        // Tk change wise functionality ends

        // % change wise functionality starts
        //var valueOfPY = "Total Only";
        var py=false;
        document.getElementById("previous-year").addEventListener("change", function () {
            if (this.checked) {
                py=true;
                valueOfPP = "Months PY";
                document.getElementById("TkChangePy").disabled = false;
                document.getElementById("PercentageChangePy").disabled = false;
            } else {
                py=false;
                valueOfPP = "Total Only";
                document.getElementById("TkChangePy").checked = false;
                document.getElementById("TkChangePy").disabled = true;
                document.getElementById("PercentageChangePy").checked = false;
                document.getElementById("PercentageChangePy").disabled = true;
            }
        });
        var tkpy=false;
        document.getElementById("TkChangePy").addEventListener("change", function () {
            if (this.checked) {
                tkpy=true;
                ChangeValueTk = "1";
            } else {
                tkpy=false;
                ChangeValueTk = "0";
            }
        });
        var perPY = false;
        document.getElementById("PercentageChangePy").addEventListener("change", function () {
            if (this.checked) {
                perPY=true;
                ChangeValuePercentage = "1";
            } else {
                perPY=false;
                ChangeValuePercentage = "0";
            }
        });
        // % change wise functionality starts


        //% of row, % of column functionalities starts
        var valueOfPercentOfColumn = "0";
        var perRow=false;
        document.getElementById("percent-of-row").addEventListener("change", function () {
            if (this.checked) {
                perRow=true;
                //valueOfPercentOfColumn = "1";
                ChangeValuePercentage = '3';
                valueOfPP = 'Months';
            }
            else {
                perRow=false;
                ChangeValuePercentage = "0";
                valueOfPP = 'Total Only';
            }
        });
        //var valueOfPercentOfColumn = "0";
        var perCol=false;
        document.getElementById("percent-of-column").addEventListener("change", function () {
            if (this.checked) {
                perCol=true;
                //valueOfPercentOfColumn = "1";
                ChangeValuePercentage = '2';
                valueOfPP = 'Months';
            }
            else {
                perCol=false;
                ChangeValuePercentage = "0";
                valueOfPP = 'Total Only';
            }
        });
        //% of row, % of column functionalities ends

        var totallength = "";
        var ResponseForPdf = [];
        setDateRange(3);
        GetReport();
        function GetReport() {
            //alert(ChangeValuePercentage);
            //alert(valueOfPercentOfColumn);
            //alert(valueOfPP);
            const parentDiv = document.getElementById("parentDiv");
            parentDiv.scrollIntoView({ behavior: "smooth" })
            $("#loader").toggleClass("d-none");
           /* $("#treegridTable").empty();*/
        var MyAppUrlSettings = {
            MyUsefulUrl: '@Url.Action("GetBalanceSheetComparisonQuickBook", "Accounts")'
            }
            $.ajax({
                /* * "9-May-2022"*/
                //$('#end-date').val()"8-Jun-2022 
            //url:"https://raw.githubusercontent.com/kautuk-desai/demo-data/master/datagrid-lib.json",
            url: MyAppUrlSettings.MyUsefulUrl,
                data: { FromDate: $('#start-date').val(), ToDate: $('#end-date').val(), rpttype: "TB", criteria: $("#select2 option:selected").text(), isGroup: 0, isViewPageReport: 1, Months: valueOfPP, ChangeValueTk: ChangeValueTk, ChangeValuePercentage: ChangeValuePercentage, valueOfPercentOfColumn: valueOfPercentOfColumn }, // , valueOfPercentOfColumn: valueOfPercentOfColumn
            type: "GET",
            dataType: 'json',
            //shrinkToFit : false,
            scrollX: true,
            buttons: {
                dom: {
                    button: {
                        className: 'btn btn-sm rounded-0'
                    }
                },
                buttons: [

                    {
                        extend: 'excel',
                        text: '<i class="bi bi-file-earmark-excel"></i>',
                        className: 'btn-success',
                        titleAttr: 'Export to excel'
                    }

                ],
            },

                success: function (response) {
               
                ResponseForPdf = [...response.data];
                $("#balance-sheet")
                $("#treegrid-thead").remove();
                const balanceSheet = response.data;
                    allData = [...response.data];
              
                var trialBalanceDate = `<span>${response.data[0].MonthCaption}</span>`;
                $("#date-month-year").empty();
                $("#date-month-year").append(trialBalanceDate);

                const columns = [];
                const keys = Object.keys(response.data[0]);
              
                const keysWithoutLastElement = keys.slice(0, -1);

                for (let i = 8; i < keysWithoutLastElement.length; i++) {
                    columns.push(keys[i]);
                }
                $('[data-statement-id="balancesheet"]').prepend(formHeaderColumns(columns));

                // Remove existing tbody element from the table
                $('#body').empty();

                // Create new tbody element and add it to the table
                formTable(balanceSheet, undefined, 1);
                $(".tree").treegrid({
                    expanderExpandedClass: "bi bi-chevron-down pe-4",
                    expanderCollapsedClass: "bi bi-chevron-right pe-4"
                });
                $("#loader").toggleClass("d-none");
            }


        });
    };
        var tbody = $("#body");
        var formHeaderColumns = function (timeseriesprojections) {
            var thead = "<thead id='treegrid-thead'><tr><th>Account Head</th>";
            //console.log('thead', thead);
            $.grep(timeseriesprojections, function (ele, i) {
                console.log("ele:::", ele);
                if (ele != "TkChange" && ele != "PercentageChange" && ele != "clBalance" && ele != 'PercentageReport' && ele !='PercentageRowReport') {
                    thead += "<th class='text-end'>AS OF " + ele + "</th>";
                }
                else if (ele =="TkChange") {
                    thead += "<th class='text-end'>CHANGE</th>";
                }
                else if (ele =="clBalance") {
                    thead += "<th class='text-end'>Total</th>";
                }
                else if (ele =="PercentageChange") {
                    thead += "<th class='text-end'>% OF COLUMN</th>";
                }
                else if (ele =="PercentageRowReport") {
                    thead += "<th class='text-end'>% OF ROW</th>";
                }
                else if (ele =="PercentageReport") {
                    thead += "<th class='text-end'>% OF COLUMN</th>";
                }
              
            });
            thead += "</thead>";
            return thead;
        };

        var formTable = function (data, ParentId, level) {
            var colIndex = 2;

            var currentLevel = level;
           
            $.each(data, function (i, ele) {
                //console.log("ele.datalevel:", ele.datalevel); // check value of ele.datalevel
                //console.log("currentLevel:", currentLevel); // check value of currentLevel
                //console.log("i:", i);
               /* console.log("ele:", ele);*/
                //console.log("ele.datalevel::", ele.datalevel)
                ;
                ele.datalevel = currentLevel;
                var tr = "<tr data-account-name='" + ele.AccName + "' class='";
                tr += "treegrid-" + ele.AccId;
                if (ParentId !== undefined && ele.AccId !== ParentId) {
                    tr += " treegrid-parent-" + ParentId;
                }
                if (ele.datalevel == 1) {
                    tr += " root-node'>";
                } else {
                    tr += " node'>";
                }


                if (ele.AccType == "G") {
                    tr += "<td class='text-left text-nowrap font-weight-bold text-black'>" + ele.AccName + "</td>";
                }
                else {
                    tr += "<td class='text-left text-black'>" + ele.AccName + "</td>";
                }

                if (jQuery.isEmptyObject(ele)) {

                }
                else {
                    let sortedData = Object.keys(ele); //.sort();
                    /*console.log(sortedData[8]);*/
                    let group = 0;
                    for (let i in sortedData) {
                        let key = sortedData[i];
                        /*console.log(i);*/
                        let value = ele[sortedData[i]];
                        //console.log("value:", value);
                        //console.log("key:", key);
                        /*console.log(i, ":", sortedData[4], "", ele[sortedData[4]]);*/
                        //let length = sortedData.length;
                        //if (ele[sortedData[4]] == "G") {
                        //    length = sortedData.length - 1;
                        //}
                     /*   if (i > 7 &&  i < 10) {*/
                        if (i > 7 && i < sortedData.length - 1) {
                           //console.log("found");
                            //console.log("value", value);
                            if (value > 0) {
                                if (group == 1) {
                                    //console.log( key + ": " + value );
                                    tr += "<td class='text-end font-weight-bold text-black'>" + value.toLocaleString('en-IN') + "</td>";
                                }
                                else {

                                    tr += "<td class='text-end text-black'>" + value.toLocaleString('en-IN') + "</td>";

                                }
                            }
                            else if (value == 0) {
                                if (group == 1) {
                                    //console.log( key + ": " + value );
                                    tr += "<td class='text-end font-weight-bold'>asas</td>";
                                }
                                else {

                                    tr += "<td class='text-end text-black''>0.00</td>";

                                }
                            }
                            else if (value < 0) {
                                if (group == 1) {
                                    //console.log( key + ": " + value );
                                    tr += "<td class='text-end font-weight-bold text-red text-black'>" + value.toLocaleString('en-IN') + "</td>";
                                }
                                else {

                                    tr += "<td class='text-end text-red'>" + value.toLocaleString('en-IN') + "</td>"; //balance sum

                                }
                            }
                            //else {
                            //    tr += "<td>-</td>";
                            //}
                        }
                        //else {
                        //    tr += "<td>-</td>";
                        //}
                        //console.log("Key: " + sortedData[i] + "   " + ele.data[sortedData[i]])
                    }
                }

                if (ele.projections && ele.projections.length > 0) {
                    tr += bindAccountValues(ele.projections);
                }
                
                tr += "</tr>";
                tbody.append(tr);
                ele.ParentId = ParentId;
                if (ele.hasOwnProperty("Children")) {
                    formTable(ele.Children, ele.AccId, parseInt(currentLevel + 1));
                }
            });
        };

        var bindAccountValues = function (projections) {
            var accountValues = "";
            $.grep(projections, function (ele, i) {
                accountValues +=
                    '<td data-account-dt="' + ele.dt + '">' + ele.value + "</td>";
            });
            return accountValues;
        };


        $(function () {
            $("#start-date").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#end-date").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
        });

        /*     $("#treegridTable").empty();*/


   

        // Store the references to the print button element and the current PDF document
        var printButton = document.getElementById("print-pdf");
        var saveButton = document.getElementById("save-pdf");
        var pdfButton = document.getElementById("export-pdf-link");
        var currentDoc;

        var excelbutton= document.getElementById("export-excel-link");


        excelbutton.addEventListener("click", function () {

            var csvContent = "data:text/csv;charset=utf-8,";

             if(perCol==true){
                 var dates = [];

                    allData.forEach(function(item) {
                      Object.keys(item).forEach(function(key) {
                        if (!isNaN(Date.parse(key))) {
                          if (!dates.includes(key)) {
                            dates.push(key);
                          }
                        }
                      });
                    });

                    console.log('COLUMN');

                var headers = ["Account Head"].concat(dates.map(date => formatCSVValue("AS OF " + date))).concat([formatCSVValue("% OF COLUMN")]);



                    var debitTotal = 0;
                    var creditTotal = 0;
                    var rows = [];

                    function processRow(data, level) {
                      var row = [formatCSVValue(data.AccName.trim())];

                      dates.forEach(function (date, index) {
                        var value = data[date] || 0;
                        value=value.toFixed(3);
                        row.push(formatCSVValue(value));
                      });

                     var rowNumber=rows.length+2;
                     
                     
                    // var percentageChangeFormula = '=IF((B' + rowNumber + ' = 0), null, ((B' + rowNumber + ')/(B' + rowNumber + ')*100))';
                     
                      var percentageChangeFormula = '=IF(OR(B2 = 0), null, ((B' + rowNumber + ')/(B2))*100)';
                                                   
                     row.push(formatCSVValue(percentageChangeFormula));



                    //  row.push(formatCSVValue(data.PercentageReport));
                      console.log(row);
                      rows.push(row);

                      if (data.Children) {
                        data.Children.forEach(function (child) {
                          processRow(child, level + 1);
                        });
                      }
                    }

                    allData.forEach(function (data) {
                      processRow(data, 0);
                    });



                    csvContent += headers.join(",") + "\r\n";
             let sumstring ="=" ;
             let sumstring1 ="=" ;
             let ii = 2;
            // Add the data rows to the CSV content
            rows.forEach(function (row) {
                sumstring+='B'+ii+'+';
                sumstring1+='C'+ii+'+';
                  ii++;
                csvContent += row.join(",") + "\r\n";
            });
              sumstring = sumstring.slice(0, -1);
              sumstring1 = sumstring1.slice(0, -1);
                console.log(sumstring);
                csvContent += ',' + sumstring+ ','+sumstring1+'\n';
               

           


           }
            
             else if (perRow == true) {
                var dates = [];

                allData.forEach(function (item) {
                    Object.keys(item).forEach(function (key) {
                        if (!isNaN(Date.parse(key))) {
                            if (!dates.includes(key)) {
                                dates.push(key);
                            }
                        }
                    });
                });

                


                  var headers = ["Account Head"].concat(dates.map(date => formatCSVValue("AS OF " + date))).concat([formatCSVValue("% OF ROW")]);



                    var debitTotal = 0;
                    var creditTotal = 0;
                    var rows = [];

                    function processRow(data, level,rowNumber) {
                      var row = [formatCSVValue(data.AccName.trim())];

                      dates.forEach(function (date, index) {
                        var value = data[date] || 0;
                        row.push(formatCSVValue(value));
                      });
                       var rowNumber=rows.length+2;
                     
                     
                     var percentageChangeFormula = '=IF((B' + rowNumber + ' = 0), null, ((B' + rowNumber + ')/(B' + rowNumber + ')*100))';
         
                   
                      row.push(formatCSVValue(percentageChangeFormula));
                     
                      rows.push(row);

                      if (data.Children) {
                        data.Children.forEach(function (child) {
                          processRow(child, level + 1,rowNumber);
                        });
                      }
                    }

                    allData.forEach(function (data) {
                      processRow(data, 0,rows.length+2);
                    });

                csvContent += headers.join(",") + "\r\n";
                let sumstring = "=";
                let sumstring1 = "=";
                let ii = 2;
                // Add the data rows to the CSV content
                rows.forEach(function (row) {
                    sumstring += 'B' + ii + '+';
                    sumstring1 += 'C' + ii + '+';
                    ii++;
                    csvContent += row.join(",") + "\r\n";
                });
                sumstring = sumstring.slice(0, -1);
                sumstring1 = sumstring1.slice(0, -1);
                console.log(sumstring);
                csvContent += ',' + sumstring + ',' + sumstring1 + '\n';



            }

              else if(pp==true || py==true){
                    var dates = [];

                    allData.forEach(function(item) {
                      Object.keys(item).forEach(function(key) {
                        if (!isNaN(Date.parse(key))) {
                          if (!dates.includes(key)) {
                            dates.push(key);
                          }
                        }
                      });
                    });

             
                 if((pp==true && tkpp==true && perPP==false) ||(py==true && tkpy==true && perPY==false)){
                    
                      var headers = ["Account Head"].concat(dates.map(date => formatCSVValue("AS OF " + date))).concat([formatCSVValue("CHANGE")]);



                    var debitTotal = 0;
                    var creditTotal = 0;
                    var rows = [];

                    function processRow(data, level) {
                      var row = [formatCSVValue(data.AccName.trim())];

                      dates.forEach(function (date, index) {
                        var value = data[date] || 0;
                        row.push(formatCSVValue(value));
                      });

                      var rowNumber=rows.length+2;
                     
                     
                  var tkChangeFormula = '=(B' + rowNumber + ')-(C' + rowNumber + ')';
                


                      row.push(formatCSVValue(tkChangeFormula));

                      console.log(row);
                      rows.push(row);

                      if (data.Children) {
                        data.Children.forEach(function (child) {
                          processRow(child, level + 1,rowNumber);
                        });
                      }
                    }

                    allData.forEach(function (data) {
                      processRow(data, 0,rows.length+2);
                    });

                         csvContent += headers.join(",") + "\r\n";
                let sumstring = "=";
                let sumstring1 = "=";
                let sumstring2 = "=";
                let ii = 2;
                // Add the data rows to the CSV content
                rows.forEach(function (row) {
                    sumstring += 'B' + ii + '+';
                    sumstring1 += 'C' + ii + '+';
                    sumstring2 += 'D' + ii + '+';
                    ii++;
                    csvContent += row.join(",") + "\r\n";
                });
                sumstring = sumstring.slice(0, -1);
                sumstring1 = sumstring1.slice(0, -1);
                sumstring2 = sumstring2.slice(0, -1);
                console.log(sumstring);
                csvContent += ',' + sumstring + ',' + sumstring1 + ',' + sumstring2+ '\n';

                    
                 }

                else if ((pp == true && perPP == true && tkpp==false) || (py == true && perPY == true && tkpy==false)) {
                   
                    console.log('2 Column');

                     var headers = ["Account Head"].concat(dates.map(date => formatCSVValue("AS OF " + date))).concat([formatCSVValue("% OF COLUMN")]);



                    var debitTotal = 0;
                    var creditTotal = 0;
                    var rows = [];

                    function processRow(data, level) {
                      var row = [formatCSVValue(data.AccName.trim())];

                      dates.forEach(function (date, index) {
                        var value = data[date] || 0;
                        row.push(formatCSVValue(value));
                      });
                        var rowNumber=rows.length+2;
                     
                     
                 var percentageChangeFormula = '=IF(OR(B' + rowNumber + ' = 0, C' + rowNumber + ' = 0), 0, ((B' + rowNumber + ')-(C' + rowNumber + '))/ABS(C' + rowNumber + '))';
              //  var percentageChangeFormula = '=(B' + rowNumber + '-C' + rowNumber + ')/IF(OR(C' + rowNumber + '=0, B' + rowNumber + '=0), 1, ABS(C' + rowNumber + '))';



                   
                      row.push(formatCSVValue(percentageChangeFormula));
                    
                      console.log(row);
                      rows.push(row);

                      if (data.Children) {
                        data.Children.forEach(function (child) {
                          processRow(child, level + 1,rowNumber);
                        });
                      }
                    }

                    allData.forEach(function (data) {
                      processRow(data, 0,rows.length+2);
                    });
                     csvContent += headers.join(",") + "\r\n";
                let sumstring = "=";
                let sumstring1 = "=";
                let sumstring2 = "=";
                let ii = 2;
                // Add the data rows to the CSV content
                rows.forEach(function (row) {
                    sumstring += 'B' + ii + '+';
                    sumstring1 += 'C' + ii + '+';
                    sumstring2 += 'D' + ii + '+';
                    ii++;
                    csvContent += row.join(",") + "\r\n";
                });
                sumstring = sumstring.slice(0, -1);
                sumstring1 = sumstring1.slice(0, -1);
                sumstring2 = sumstring2.slice(0, -1);
                console.log(sumstring);
                csvContent += ',' + sumstring + ',' + sumstring1 + ',' + sumstring2+ '\n';

                 }

                 else if((pp == true && perPP == true && tkpp==true) || (py == true && perPY == true && tkpy==true)){
                     
                 var headers = ["Account Head"].concat(dates.map(date => formatCSVValue("AS OF " + date))).concat([formatCSVValue("CHANGE")]).concat([formatCSVValue("% OF COLUMN")]);

                    var debitTotal = 0;
                    var creditTotal = 0;
                    var rows = [];

                   function processRow(data, level, rowNumber) {
                      var row = [formatCSVValue(data.AccName.trim())];

                      dates.forEach(function (date, index) {
                        var value = data[date] || 0;
                        row.push(formatCSVValue(value));
                      });
                      var rowNumber=rows.length+2;
                      console.log(rows.length+2);
                      var tkChangeFormula = '=(B' + rowNumber + ')-(C' + rowNumber + ')';
                 var percentageChangeFormula = '=IF(OR(B' + rowNumber + ' = 0, C' + rowNumber + ' = 0), 0, ((B' + rowNumber + ')-(C' + rowNumber + '))/ABS(C' + rowNumber + '))';
              //  var percentageChangeFormula = '=(B' + rowNumber + '-C' + rowNumber + ')/IF(OR(C' + rowNumber + '=0, B' + rowNumber + '=0), 1, ABS(C' + rowNumber + '))';



                      row.push(formatCSVValue(tkChangeFormula));
                      row.push(formatCSVValue(percentageChangeFormula));
                      
                      console.log(row);
                      rows.push(row);

                      if (data.Children) {
                        data.Children.forEach(function (child) {
                          processRow(child, level + 1,rowNumber);
                        });
                      }
                    }

                        allData.forEach(function (data, index) {
                            console.log(index);
                          processRow(data, 0, rows.length+2);
                        });

                    csvContent += headers.join(",") + "\r\n";
                    let sumstring = "=";
                    let sumstring1 = "=";
                    let sumstring2 = "=";
                    let sumstring3 = "=";
                    let ii = 2;
                    // Add the data rows to the CSV content
                    rows.forEach(function (row) {
                        sumstring += 'B' + ii + '+';
                        sumstring1 += 'C' + ii + '+';
                        sumstring2 += 'D' + ii + '+';
                        sumstring3 += 'E' + ii + '+';
                        ii++;
                        csvContent += row.join(",") + "\r\n";
                    });
                    sumstring = sumstring.slice(0, -1);
                    sumstring1 = sumstring1.slice(0, -1);
                    sumstring2 = sumstring2.slice(0, -1);
                    sumstring3 = sumstring3.slice(0, -1);
                    console.log(sumstring);
                    csvContent += ',' + sumstring + ',' + sumstring1 + ',' + sumstring2 +',' + sumstring3+ '\n';
                   
                 }

                 else{

                    var headers = ["Account Head"].concat(dates.map(date => formatCSVValue("AS OF " + date)));
                    
                    var debitTotal = 0;
                    var creditTotal = 0;
                    var rows = [];

                    function processRow(data, level) {
                      var row = [formatCSVValue(data.AccName.trim())];

                      dates.forEach(function (date, index) {
                        var value = data[date] || 0;
                        row.push(formatCSVValue(value));
                      });

                    
                      console.log(row);
                      rows.push(row);

                      if (data.Children) {
                        data.Children.forEach(function (child) {
                          processRow(child, level + 1);
                        });
                      }
                    }

                    allData.forEach(function (data) {
                      processRow(data, 0);
                    });
                    csvContent += headers.join(",") + "\r\n";
                    let sumstring = "=";
                    let sumstring1 = "=";
                    
                    let ii = 2;
                    // Add the data rows to the CSV content
                    rows.forEach(function (row) {
                        sumstring += 'B' + ii + '+';
                        sumstring1 += 'C' + ii + '+';
                        
                        ii++;
                        csvContent += row.join(",") + "\r\n";
                    });
                    sumstring = sumstring.slice(0, -1);
                    sumstring1 = sumstring1.slice(0, -1);
                   
                    console.log(sumstring);
                    csvContent += ',' + sumstring + ',' + sumstring1 + '\n';

                 
                 }

               
             

            }

               else{



                var headers = ["Account Head", "Total"];
                var rows = [];
                var uniqueAccountNames = {};

                for (var i = 0; i < allData.length; i++) {
                    var account = allData[i];
                    var accountName = formatCSVValue(account.AccName.trim());
                    var clBalance = account.clBalance;
                    var formattedValue = formatCSVValue(clBalance);
                    rows.push([accountName, formattedValue]);

                    if (account.Children && account.Children.length > 0) {
                        for (var j = 0; j < account.Children.length; j++) {
                            var childAccount = account.Children[j];
                            var childAccountName = formatCSVValue(childAccount.AccName.trim());
                            var childClBalance = childAccount.clBalance;
                            var formattedValueChild = formatCSVValue(childClBalance);
                            rows.push(['\t' + childAccountName, formattedValueChild]);

                            if (childAccount.Children && childAccount.Children.length > 0) {
                                for (var k = 0; k < childAccount.Children.length; k++) {
                                    var subChildAccount = childAccount.Children[k];
                                    var subChildAccountName = formatCSVValue(subChildAccount.AccName.trim());
                                    var subChildClBalance = subChildAccount.clBalance;
                                    var formattedValuesubChild = formatCSVValue(subChildClBalance);
                                    rows.push(['\t\t' + subChildAccountName, formattedValuesubChild]);
                                }
                            }
                        }
                    }
                }

                csvContent += headers.join(",") + "\r\n";
                let sumstring = "=";
                let ii = 2;
                // Add the data rows to the CSV content
                rows.forEach(function (row) {
                    sumstring += 'B' + ii + '+';
                    ii++;
                    csvContent += row.join(",") + "\r\n";
                });
                sumstring = sumstring.slice(0, -1);
                console.log(sumstring);
                csvContent += ',' + sumstring + '\n';

              
          
          }

           
        

         

            // Create a download link and click it programmatically to initiate the download
            var encodedUri = encodeURI(csvContent);
            var link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "data.csv");
            document.body.appendChild(link); // Required for Firefox
            link.click();




            if (currentDoc) {
                currentDoc.save("balance-sheet-comparison.csv");
                
            }
        });

        
          pdfButton.addEventListener("click", function () {
            portrait();
           
            if (currentDoc) {
                currentDoc.save("balance-sheet-comparison.pdf");
                
            }
        });
        // Event handler for printing the PDF
        printButton.addEventListener("click", function () {
            if ($("#orientation").val() === 'portrait') {
                portrait();
            } else if ($("#orientation").val() === 'landscape') {
                landscape();
            }

            // Auto-print the current PDF document
            if (currentDoc) {
                currentDoc.autoPrint();
                currentDoc.output("dataurlnewwindow");
            }
        });
        saveButton.addEventListener("click", function () {
           
            // Auto-print the current PDF document
            if (currentDoc) {
                currentDoc.save("balanceSheet-Comparison.pdf");
            }
        });


        function portrait() {
            
            var selectedText = $("#select-form option:selected").text();
            var selectedPeriod = $("#select2 option:selected").text();

            // Set the font styles
            var fontUrl = 'https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap';

            // Load the font styles dynamically
            var fontLink = document.createElement('link');
            fontLink.href = fontUrl;
            fontLink.rel = 'stylesheet';
            document.head.appendChild(fontLink);

            var element = document.getElementById("parentDiv");
            var companyName = document.getElementById("company-name").innerText;
            var primaryAddress = document.getElementById("primary-address").innerText;
            var trialBalance = document.getElementById("trial-balance").innerText;
            var dateMonthYear = document.getElementById("date-month-year").innerText;

            var pdfWidth = 595.28; // A4 width in points
            var pdfHeight = 841.89;
            
            var jsPDF = window.jspdf.jsPDF;

            var doc = new jsPDF({
                orientation: "portrait",
                unit: "pt",
                format: "a4"
            });



            var centerX = pdfWidth / 2;

            // Add the content to the PDF
            doc.setFont('Montserrat', 'sans-serif');
            doc.setTextColor(76, 82, 88);
            doc.setFontSize(20);
            var textWidth = doc.getStringUnitWidth(companyName) * doc.internal.getFontSize() / doc.internal.scaleFactor;
            doc.text(companyName, centerX - textWidth / 2, 40);

            doc.setFontSize(12);
            doc.setFont('Montserrat', 'sans-serif');
            doc.setTextColor(76, 82, 88);
            var textWidth = doc.getStringUnitWidth(primaryAddress) * doc.internal.getFontSize() / doc.internal.scaleFactor;
            doc.text(primaryAddress, centerX - textWidth / 2, 40 + 20);

            doc.setFontSize(12);
            doc.setFont('Montserrat', 'sans-serif');
            doc.setTextColor(0, 0, 0);
            var textWidth = doc.getStringUnitWidth(trialBalance) * doc.internal.getFontSize() / doc.internal.scaleFactor;
            doc.text(trialBalance, centerX - textWidth / 2, 40 + 40);

            doc.setFontSize(12);
            doc.setFont('Montserrat', 'sans-serif');
            doc.setTextColor(76, 82, 88);
            var textWidth = doc.getStringUnitWidth(dateMonthYear) * doc.internal.getFontSize() / doc.internal.scaleFactor;
            doc.text(dateMonthYear, centerX - textWidth / 2, 40 + 60);



             if(perCol==true){
                 var dates = [];

                    allData.forEach(function(item) {
                      Object.keys(item).forEach(function(key) {
                        if (!isNaN(Date.parse(key))) {
                          if (!dates.includes(key)) {
                            dates.push(key);
                          }
                        }
                      });
                    });

                    




                var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                 headers.push({ content: '% OF COLUMN', styles: { halign: "right" } });
                console.log(headers);
                var debitTotal = 0;
                var creditTotal = 0;
                var rows = [];

                function processRow(data, level) {
                    var row = [data.AccName.trim()];
                   

                    dates.forEach(function (date, index) {
                      
                        var value = data[date] || 0;
                         
                        var formattedValue = formatNumberWithCommas(value);
                        row.push(formattedValue);
                       

                    });
                  
                    row.push(formatNumberWithCommas(data.PercentageReport === 0 ? "0.00" : data.PercentageReport.toFixed(3).replace(/\.?0*$/, '')));
                   
                        rows.push(row);
                    

                    if (data.Children) {
                        data.Children.forEach(function (child) {
                            processRow(child, level + 1);
                        });
                    }
                }

                allData.forEach(function (data) {
                    processRow(data, 0);
                });

               
                var tableContainer = document.createElement("div");
                tableContainer.style.overflow = "auto";
                tableContainer.style.maxHeight = "300px";

                var table = document.createElement("table");

                tableContainer.appendChild(table);
                document.body.appendChild(tableContainer);
                var tableX = 40;
                var tableY = 120;
                var tableWidth = pdfWidth - 2 * tableX;
                var tableHeight = pdfHeight - tableY - 40;

                doc.autoTable({

                    didDrawCell: function (data) {
                        // Apply borders to all cells
                        var lineWidth = 0.2; // Adjust the border width
                        doc.setDrawColor(200); // Set border color to a lighter shade
                        doc.setLineWidth(lineWidth);

                        if (data.cell.section === "body" && data.cell.index % 2 === 0) {
                            // Apply thicker bottom border to debit cells in the body section
                            doc.rect(
                                data.cell.x,
                                data.cell.y + data.cell.height - lineWidth,
                                data.cell.width,
                                lineWidth,
                                "S"
                            );
                        }  else {
                            // Apply regular borders to all other cells
                            doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, "S");
                        }
                    },


                    head: [headers], // Set the header rows
                    body: rows,
                    startY: tableY,

                    tableWidth: tableWidth,
                    tableHeight: tableHeight,
                    theme: "grid",
                    headStyles: {
    fillColor: [248, 249, 250],
    fontStyle: "bold",
    textColor: 0,
    fontSize: 8,
    font: "Calibri",
    halign: "center", // Align header cells to the center
  },
  bodyStyles: {
    textColor: [33, 37, 41],
    fontStyle: "normal",
    font: "Calibri",
    fontSize: 8,
    cellPadding: 3,
    cellStyles: {
      0: { halign: "left" }, // Align account name column to the left
      // Align date columns to the right
      fromIndex: 1,
      toIndex: headers.length,
      halign: "right",
    },
  },
                    didParseCell: function (data) {
                        if (data.section === 'head') {
                            //doc.setDrawColor(0); // Set border color to black
                            // doc.setLineWidth(0.2); // Set border width to thin
                            // doc.line(data.cell.x, data.cell.y + data.cell.height, data.cell.x + data.cell.width, data.cell.y + data.cell.height);
                            data.cell.styles.fillColor = [255, 255, 255];
                            data.cell.styles.textColor = [0, 0, 0];
                            // Increase the font size of the header
                            data.cell.styles.fontSize = 9.5;
                            data.cell.styles.fontStyle = 'bold';
                          
                            if (data.cell.raw=='Account Head') {
                                // Center align the "Opening," "Transaction," and "Closing" headers
                                data.cell.styles.halign = 'center';
                            } else {
                                // Right align the "Debit" and "Credit" headers
                                data.cell.styles.halign = 'right';
                            }

                        }
                        if (data.section === 'body') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            if(data.column.index!=0){
                                data.cell.styles.halign = 'right';
                            }
                            else{
                                data.cell.styles.halign = 'left';
                            }


                        }

                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');
                    },
                    margin: { top: 120 },
                    tableWidth: "auto",
                    columnWidth: "auto",
                });


           }
             else if (perRow == true) {
                var dates = [];

                allData.forEach(function (item) {
                    Object.keys(item).forEach(function (key) {
                        if (!isNaN(Date.parse(key))) {
                            if (!dates.includes(key)) {
                                dates.push(key);
                            }
                        }
                    });
                });

                




                var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                headers.push({ content: '% OF ROW', styles: { halign: "right" } });
                var debitTotal = 0;
                var creditTotal = 0;
                var rows = [];


                function processRow(data, level) {
                    var row = [data.AccName.trim()];


                    dates.forEach(function (date, index) {
                    
                        var value = data[date] || 0;

                        var formattedValue = formatNumberWithCommas(value);
                        row.push(formattedValue);


                    });
                    
                     row.push(formatNumberWithCommas(data.PercentageRowReport === 0 ? "0.00" : data.PercentageRowReport.toFixed(3).replace(/\.?0*$/, '')));
                    rows.push(row);


                    if (data.Children) {
                        data.Children.forEach(function (child) {
                            processRow(child, level + 1);
                        });
                    }
                }

                allData.forEach(function (data) {
                    processRow(data, 0);
                });



                // Create a wrapper div for the table with a scrollbar
                var tableContainer = document.createElement("div");
                tableContainer.style.overflow = "auto";
                tableContainer.style.maxHeight = "300px";


                // Create the table element
                var table = document.createElement("table");



                tableContainer.appendChild(table);
                document.body.appendChild(tableContainer);
                var tableX = 40;
                var tableY = 120;
                var tableWidth = pdfWidth - 2 * tableX;
                var tableHeight = pdfHeight - tableY - 40;



                doc.autoTable({

                    didDrawCell: function (data) {
                        // Apply borders to all cells
                        var lineWidth = 0.2; // Adjust the border width
                        doc.setDrawColor(200); // Set border color to a lighter shade
                        doc.setLineWidth(lineWidth);

                        if (data.cell.section === "body" && data.cell.index % 2 === 0) {
                            // Apply thicker bottom border to debit cells in the body section
                            doc.rect(
                                data.cell.x,
                                data.cell.y + data.cell.height - lineWidth,
                                data.cell.width,
                                lineWidth,
                                "S"
                            );
                        } else {
                            // Apply regular borders to all other cells
                            doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, "S");
                        }
                    },


                    head: [headers], // Set the header rows
                    body: rows,
                    startY: tableY,

                    tableWidth: tableWidth,
                    tableHeight: tableHeight,
                    theme: "grid",
                    headStyles: {
                        fillColor: [248, 249, 250],
                        fontStyle: "bold",
                        textColor: 0,
                        fontSize: 8,
                        font: "Calibri",
                        halign: "center", // Align header cells to the center
                    },
                    bodyStyles: {
                        textColor: [33, 37, 41],
                        fontStyle: "normal",
                        font: "Calibri",
                        fontSize: 8,
                        cellPadding: 3,
                        cellStyles: {
                            0: { halign: "left" }, // Align account name column to the left
                            // Align date columns to the right
                            fromIndex: 1,
                            toIndex: headers.length,
                            halign: "right",
                        },
                    },
                    didParseCell: function (data) {
                        if (data.section === 'head') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            data.cell.styles.textColor = [0, 0, 0];
                            // Increase the font size of the header
                            data.cell.styles.fontSize = 9.5;
                            data.cell.styles.fontStyle = 'bold';

                            if (data.cell.raw == 'Account Head') {
                                // Center align the "Opening," "Transaction," and "Closing" headers
                                data.cell.styles.halign = 'center';
                            } else {
                                // Right align the "Debit" and "Credit" headers
                                data.cell.styles.halign = 'right';
                            }

                        }
                        if (data.section === 'body') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            if (data.column.index != 0) {
                                data.cell.styles.halign = 'right';
                            }
                            else {
                                data.cell.styles.halign = 'left';
                            }


                        }

                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');
                    },
                    margin: { top: 120 },
                    tableWidth: "auto",
                    columnWidth: "auto",
                });


            }

             else if(pp==true || py==true){
                    var dates = [];

                    allData.forEach(function(item) {
                      Object.keys(item).forEach(function(key) {
                        if (!isNaN(Date.parse(key))) {
                          if (!dates.includes(key)) {
                            dates.push(key);
                          }
                        }
                      });
                    });

             
                 if((pp==true && tkpp==true && perPP==false) ||(py==true && tkpy==true && perPY==false)){
                    
                     var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                        headers.push({ content: 'CHANGE', styles: { halign: "right" } });
                        var debitTotal = 0;
                        var creditTotal = 0;
                        var rows = [];

                        function processRow(data, level) {
                            var row = [data.AccName.trim()];
                            var hasValue = false; // Flag to check if the account has a value for both dates

                            dates.forEach(function (date, index) {
                        
                                var value = data[date] || 0;
                                var formattedValue = formatNumberWithCommas(value);
                                row.push(formattedValue); 
                            });
                            
                             row.push(formatNumberWithCommas(data.TkChange === 0 ? "0.00" : data.TkChange.toFixed(3).replace(/\.?0*$/, '')));
                       
                          
                           
                             rows.push(row);
                            if (data.Children) {
                                data.Children.forEach(function (child) {
                                    processRow(child, level + 1);
                                });
                            }
                        }

                        allData.forEach(function (data) {
                            processRow(data, 0);
                        });

               
                    
                 }

                else if ((pp == true && perPP == true && tkpp==false) || (py == true && perPY == true && tkpy==false)) {
                   
                     var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                    headers.push({ content: '% OF COLUMN', styles: { halign: "right" } });
                        var debitTotal = 0;
                        var creditTotal = 0;
                        var rows = [];

                    function processRow(data, level) {
                        var row = [data.AccName.trim()];
                        var hasValue = false; // Flag to check if the account has a value for both dates

                        dates.forEach(function (date, index) {
                         
                            var value = data[date] || 0;
                            var formattedValue = formatNumberWithCommas(value);
                            row.push(formattedValue);
                        });

                         
                        row.push(formatNumberWithCommas(data.PercentageChange === 0 ? "0.00" : data.PercentageChange.toFixed(3).replace(/\.?0*$/, '')));
                        rows.push(row);
                        if (data.Children) {
                            data.Children.forEach(function (child) {
                                processRow(child, level + 1);
                            });
                        }
                    }

                        allData.forEach(function (data) {
                            processRow(data, 0);
                        });
                 }

                 else if((pp == true && perPP == true && tkpp==true) || (py == true && perPY == true && tkpy==true)){
                     
                     var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                    headers.push({ content: 'CHANGE', styles: { halign: "right" } });
                    headers.push({ content: '% OF COLUMN', styles: { halign: "right" } });
                        var debitTotal = 0;
                        var creditTotal = 0;
                        var rows = [];

                         function processRow(data, level) {
                        var row = [data.AccName.trim()];
                        var hasValue = false; // Flag to check if the account has a value for both dates

                        dates.forEach(function (date, index) {
                            
                            var value = data[date] || 0;
                            var formattedValue = formatNumberWithCommas(value);
                            row.push(formattedValue);
                        });

                      row.push(formatNumberWithCommas(data.TkChange === 0 ? "0.00" : data.TkChange.toFixed(3).replace(/\.?0*$/, '')));
                        row.push(formatNumberWithCommas(data.PercentageChange === 0 ? "0.00" : data.PercentageChange.toFixed(3).replace(/\.?0*$/, '')));

                        rows.push(row);
                        if (data.Children) {
                            data.Children.forEach(function (child) {
                                processRow(child, level + 1);
                            });
                        }
                    }

                        allData.forEach(function (data) {
                            processRow(data, 0);
                        });
                 }
                 else{

                    var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                    var debitTotal = 0;
                    var creditTotal = 0;
                    var rows = [];

                    function processRow(data, level) {
                        var row = [data.AccName.trim()];
                        var hasValue = false; // Flag to check if the account has a value for both dates

                        dates.forEach(function (date, index) {
                       
                            var value = data[date] || 0;
                            var debitIndex = index * 2 + 1;
                            var creditIndex = index * 2 + 2;
                            
                            var formattedValue = formatNumberWithCommas(value);

                            row[debitIndex] = formattedValue;
                            row[creditIndex] = formattedValue;



                            // Check if the account has a value for both dates
                            if (value !== 0) {
                                hasValue = true;
                            }
                        });

                        if (hasValue) {
                            rows.push(row);
                          ;
                            debitTotal += row.reduce((sum, val, index) => (index % 2 === 1 ? sum + (+val || 0) : sum), 0);
                            creditTotal += row.reduce((sum, val, index) => (index % 2 === 0 ? sum + (+val || 0) : sum), 0);
                        }

                        if (data.Children) {
                            data.Children.forEach(function (child) {
                                processRow(child, level + 1);
                            });
                        }
                    }

                    allData.forEach(function (data) {
                        processRow(data, 0);
                    });

                 
                 }

               
               

                // Create a wrapper div for the table with a scrollbar
                var tableContainer = document.createElement("div");
                tableContainer.style.overflow = "auto";
                tableContainer.style.maxHeight = "300px";


                // Create the table element
                var table = document.createElement("table");



                tableContainer.appendChild(table);
                document.body.appendChild(tableContainer);
                var tableX = 40;
                var tableY = 120;
                var tableWidth = pdfWidth - 2 * tableX;
                var tableHeight = pdfHeight - tableY - 40;



                doc.autoTable({

                    didDrawCell: function (data) {
                        // Apply borders to all cells
                        var lineWidth = 0.2; // Adjust the border width
                        doc.setDrawColor(200); // Set border color to a lighter shade
                        doc.setLineWidth(lineWidth);

                        if (data.cell.section === "body" && data.cell.index % 2 === 0) {
                            // Apply thicker bottom border to debit cells in the body section
                            doc.rect(
                                data.cell.x,
                                data.cell.y + data.cell.height - lineWidth,
                                data.cell.width,
                                lineWidth,
                                "S"
                            );
                        }  else {
                            // Apply regular borders to all other cells
                            doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, "S");
                        }
                    },


                    head: [headers], // Set the header rows
                    body: rows,
                    startY: tableY,

                    tableWidth: tableWidth,
                    tableHeight: tableHeight,
                    theme: "grid",
                    headStyles: {
    fillColor: [248, 249, 250],
    fontStyle: "bold",
    textColor: 0,
    fontSize: 8,
    font: "Calibri",
    halign: "center", // Align header cells to the center
  },
  bodyStyles: {
    textColor: [33, 37, 41],
    fontStyle: "normal",
    font: "Calibri",
    fontSize: 8,
    cellPadding: 3,
    cellStyles: {
      0: { halign: "left" }, // Align account name column to the left
      // Align date columns to the right
      fromIndex: 1,
      toIndex: headers.length,
      halign: "right",
    },
  },
                    didParseCell: function (data) {
                        if (data.section === 'head') {
                           
                            data.cell.styles.fillColor = [255, 255, 255];
                            data.cell.styles.textColor = [0, 0, 0];
                            // Increase the font size of the header
                            data.cell.styles.fontSize = 9.5;
                            data.cell.styles.fontStyle = 'bold';
                          
                            if (data.cell.raw=='Account Head') {
                                // Center align the "Opening," "Transaction," and "Closing" headers
                                data.cell.styles.halign = 'center';
                            } else {
                                // Right align the "Debit" and "Credit" headers
                                data.cell.styles.halign = 'right';
                            }

                        }
                        if (data.section === 'body') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            if(data.column.index!=0){
                                data.cell.styles.halign = 'right';
                            }
                            else{
                                data.cell.styles.halign = 'left';
                            }


                        }

                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');
                    },
                    margin: { top: 120 },
                    tableWidth: "auto",
                    columnWidth: "auto",
                });


             

            }

          
           


          
          else{

              

                var headers = ["Account Head", "Total"];


                var tableData = [];
                var uniqueAccountNames = {};

                for (var i = 0; i < allData.length; i++) {
                    var account = allData[i];
                    var accountName = account.AccName.trim();
                    var clBalance = account.clBalance;
                    var formattedValue = formatNumberWithCommas(clBalance);
                    tableData.push([accountName, formattedValue]);

                    if (account.Children && account.Children.length > 0) {
                        for (var j = 0; j < account.Children.length; j++) {
                            var childAccount = account.Children[j];
                            var childAccountName = childAccount.AccName.trim();
                            var childClBalance = childAccount.clBalance;
                            var formattedValueChild = formatNumberWithCommas(childClBalance);
                            tableData.push(['\t' + childAccountName, formattedValueChild]);

                            if (childAccount.Children && childAccount.Children.length > 0) {
                                for (var k = 0; k < childAccount.Children.length; k++) {
                                    var subChildAccount = childAccount.Children[k];
                                    var subChildAccountName = subChildAccount.AccName.trim();
                                    var subChildClBalance = subChildAccount.clBalance;
                                    var formattedValuesubChild = formatNumberWithCommas(subChildClBalance);
                                    tableData.push(['\t\t' + subChildAccountName, formattedValuesubChild]);
                                }
                            }
                        }
                    }
                }

               
                var tableWidth = 360; // Assuming the total width of the table is 360 points
                var pdfWidth = 595.28; // Width of the PDF in points

                doc.autoTable({
                    startY: 110,
                    startX: -100,
                    head: [headers],
                    body: tableData,
                    headStyles: {
                        fillColor: [255, 255, 255],
                        textColor: [0, 0, 0], // Set text color to black
                        fontSize: 12,
                        fontStyle: 'bold',
                        halign: 'center',
                        font: 'Montserrat'
                    },

                    didDrawCell: function (data) {
                        var isLastRow = (data.row.index === tableData.length - 1);
                        var isAccountNameColumn = (data.column.index === 0);
                        var hasChildren = data.row.raw[0].startsWith('\t');
                       
                      
                        if (data.section === 'head') {

                            doc.setFillColor(255, 255, 255); // Set the desired light color
                            doc.setTextColor(0, 0, 0); // Set text color to black
                            doc.setFont('Montserrat', 'bold'); // Set font style to bold
                            doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S'); // Draw border around header cells
                        }
                        if (data.section === 'body') {

                            if (isLastRow) {
                                // Draw top border and two bottom borders for the last row
                                doc.setDrawColor(0); // Set border color to black
                                doc.setLineWidth(0.2); // Set border width to thin

                            } else if (data.row.index % 2 === 0) {
                                // Remove the background color of alternate rows
                                data.cell.styles.fillColor = [255, 255, 255]; // Set the background color to white
                            }
                           
                        }


                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');



                    },
                    didParseCell: function (data) {
                        if (data.section === 'head') {
                          
                            data.cell.styles.fillColor = [255, 255, 255];
                            data.cell.styles.textColor = [0, 0, 0];
                            // Increase the font size of the header
                            data.cell.styles.fontSize = 9.5;
                            data.cell.styles.fontStyle = 'bold';

                            if (data.cell.raw == 'Account Head') {
                                // Center align the "Opening," "Transaction," and "Closing" headers
                                data.cell.styles.halign = 'center';
                            } else {
                                // Right align the "Debit" and "Credit" headers
                                data.cell.styles.halign = 'right';
                            }

                        }
                        if (data.section === 'body') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            if (data.column.index != 0) {
                                data.cell.styles.halign = 'right';
                            }
                            else {
                                data.cell.styles.halign = 'left';
                            }


                        }

                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');
                    },
                    columnStyles: {
                        0: { cellWidth: 380, halign: 'left', font: 'Montserrat' },
                        1: { cellWidth: 120, halign: 'right', font: 'Montserrat' }

                    }
                });
          
          }
          
      
            var pdfDataUrl = doc.output("datauristring");
            var pdfIframe = document.getElementById("pdf-iframe");
            pdfIframe.src = pdfDataUrl;
            currentDoc = doc;   
         
        }
        function landscape() {
            
            var selectedText = $("#select-form option:selected").text();
            var selectedPeriod = $("#select2 option:selected").text();

            // Set the font styles
            var fontUrl = 'https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap';

            // Load the font styles dynamically
            var fontLink = document.createElement('link');
            fontLink.href = fontUrl;
            fontLink.rel = 'stylesheet';
            document.head.appendChild(fontLink);

            var element = document.getElementById("parentDiv");
            var companyName = document.getElementById("company-name").innerText;
            var primaryAddress = document.getElementById("primary-address").innerText;
            var trialBalance = document.getElementById("trial-balance").innerText;
            var dateMonthYear = document.getElementById("date-month-year").innerText;

            var pdfWidth = 595.28; // A4 width in points
            var pdfHeight = 841.89;
            
            var jsPDF = window.jspdf.jsPDF;

            var doc = new jsPDF({
                orientation: "landscape",
                unit: "pt",
                format: "a4"
            });

                    var startX = 40;

                    // Calculate the x-coordinate for each text element
                    var companyNameX = startX ;
                    var primaryAddressX = startX;
                    var trialBalanceX = startX;
                    var dateMonthYearX = startX;

                    // Add the content to the PDF
                    doc.setFont('Montserrat', 'sans-serif');
                    doc.setTextColor(76, 82, 88);
                    doc.setFontSize(28);
                    doc.text(companyName, companyNameX, 40);

                    doc.setFont('Montserrat', 'sans-serif');
                    doc.setFontSize(16);
                    doc.setTextColor(76, 82, 88);
                    doc.text(primaryAddress, primaryAddressX, 40 + 20);

                    doc.setFont('Montserrat', 'sans-serif');
                    doc.setFontSize(16);
                    doc.setTextColor(0, 0, 0);
                    doc.text(trialBalance, trialBalanceX, 40 + 40);

                    doc.setFont('Montserrat', 'sans-serif');
                    doc.setFontSize(16);
                    doc.setTextColor(76, 82, 88);
                    doc.text(dateMonthYear, dateMonthYearX, 40 + 60);



             if(perCol==true){
                 var dates = [];

                    allData.forEach(function(item) {
                      Object.keys(item).forEach(function(key) {
                        if (!isNaN(Date.parse(key))) {
                          if (!dates.includes(key)) {
                            dates.push(key);
                          }
                        }
                      });
                    });

                    




                var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                 headers.push({ content: '% OF COLUMN', styles: { halign: "right" } });
                var debitTotal = 0;
                var creditTotal = 0;
                var rows = [];

                function processRow(data, level) {
                    var row = [data.AccName.trim()];
                   

                    dates.forEach(function (date, index) {
                      
                        var value = data[date] || 0;
                         
                        var formattedValue = formatNumberWithCommas(value);
                        row.push(formattedValue);
                       

                    });
                  
                    row.push(formatNumberWithCommas(data.PercentageReport === 0 ? "0.00" : data.PercentageReport.toFixed(3).replace(/\.?0*$/, '')));
                   
                        rows.push(row);
                    

                    if (data.Children) {
                        data.Children.forEach(function (child) {
                            processRow(child, level + 1);
                        });
                    }
                }

                allData.forEach(function (data) {
                    processRow(data, 0);
                });

               
                var tableContainer = document.createElement("div");
                tableContainer.style.overflow = "auto";
                tableContainer.style.maxHeight = "300px";

                var table = document.createElement("table");

                tableContainer.appendChild(table);
                document.body.appendChild(tableContainer);
                var tableX = 40;
                var tableY = 120;
                var tableWidth = pdfWidth - 2 * tableX;
                var tableHeight = pdfHeight - tableY - 40;

                doc.autoTable({

                    didDrawCell: function (data) {
                        // Apply borders to all cells
                        var lineWidth = 0.2; // Adjust the border width
                        doc.setDrawColor(200); // Set border color to a lighter shade
                        doc.setLineWidth(lineWidth);

                        if (data.cell.section === "body" && data.cell.index % 2 === 0) {
                            // Apply thicker bottom border to debit cells in the body section
                            doc.rect(
                                data.cell.x,
                                data.cell.y + data.cell.height - lineWidth,
                                data.cell.width,
                                lineWidth,
                                "S"
                            );
                        }  else {
                            // Apply regular borders to all other cells
                            doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, "S");
                        }
                    },


                    head: [headers], // Set the header rows
                    body: rows,
                    startY: tableY,

                    tableWidth: tableWidth,
                    tableHeight: tableHeight,
                    theme: "grid",
                    headStyles: {
    fillColor: [248, 249, 250],
    fontStyle: "bold",
    textColor: 0,
    fontSize: 8,
    font: "Calibri",
    halign: "center", // Align header cells to the center
  },
  bodyStyles: {
    textColor: [33, 37, 41],
    fontStyle: "normal",
    font: "Calibri",
    fontSize: 8,
    cellPadding: 3,
    cellStyles: {
      0: { halign: "left" }, // Align account name column to the left
      // Align date columns to the right
      fromIndex: 1,
      toIndex: headers.length,
      halign: "right",
    },
  },
                    didParseCell: function (data) {
                        if (data.section === 'head') {
                            //doc.setDrawColor(0); // Set border color to black
                            // doc.setLineWidth(0.2); // Set border width to thin
                            // doc.line(data.cell.x, data.cell.y + data.cell.height, data.cell.x + data.cell.width, data.cell.y + data.cell.height);
                            data.cell.styles.fillColor = [255, 255, 255];
                            data.cell.styles.textColor = [0, 0, 0];
                            // Increase the font size of the header
                            data.cell.styles.fontSize = 9.5;
                            data.cell.styles.fontStyle = 'bold';
                          
                            if (data.cell.raw=='Account Head') {
                                // Center align the "Opening," "Transaction," and "Closing" headers
                                data.cell.styles.halign = 'center';
                            } else {
                                // Right align the "Debit" and "Credit" headers
                                data.cell.styles.halign = 'right';
                            }

                        }
                        if (data.section === 'body') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            if(data.column.index!=0){
                                data.cell.styles.halign = 'right';
                            }
                            else{
                                data.cell.styles.halign = 'left';
                            }


                        }

                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');
                    },
                    margin: { top: 120 },
                    tableWidth: "auto",
                    columnWidth: "auto",
                });


           }
             else if (perRow == true) {
                var dates = [];

                allData.forEach(function (item) {
                    Object.keys(item).forEach(function (key) {
                        if (!isNaN(Date.parse(key))) {
                            if (!dates.includes(key)) {
                                dates.push(key);
                            }
                        }
                    });
                });

                




                var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                headers.push({ content: '% OF ROW', styles: { halign: "right" } });
                var debitTotal = 0;
                var creditTotal = 0;
                var rows = [];


                function processRow(data, level) {
                    var row = [data.AccName.trim()];


                    dates.forEach(function (date, index) {
                    
                        var value = data[date] || 0;

                        var formattedValue = formatNumberWithCommas(value);
                        row.push(formattedValue);


                    });
                    
                     row.push(formatNumberWithCommas(data.PercentageRowReport === 0 ? "0.00" : data.PercentageRowReport.toFixed(3).replace(/\.?0*$/, '')));
                    rows.push(row);


                    if (data.Children) {
                        data.Children.forEach(function (child) {
                            processRow(child, level + 1);
                        });
                    }
                }

                allData.forEach(function (data) {
                    processRow(data, 0);
                });



                // Create a wrapper div for the table with a scrollbar
                var tableContainer = document.createElement("div");
                tableContainer.style.overflow = "auto";
                tableContainer.style.maxHeight = "300px";


                // Create the table element
                var table = document.createElement("table");



                tableContainer.appendChild(table);
                document.body.appendChild(tableContainer);
                var tableX = 40;
                var tableY = 120;
                var tableWidth = pdfWidth - 2 * tableX;
                var tableHeight = pdfHeight - tableY - 40;



                doc.autoTable({

                    didDrawCell: function (data) {
                        // Apply borders to all cells
                        var lineWidth = 0.2; // Adjust the border width
                        doc.setDrawColor(200); // Set border color to a lighter shade
                        doc.setLineWidth(lineWidth);

                        if (data.cell.section === "body" && data.cell.index % 2 === 0) {
                            // Apply thicker bottom border to debit cells in the body section
                            doc.rect(
                                data.cell.x,
                                data.cell.y + data.cell.height - lineWidth,
                                data.cell.width,
                                lineWidth,
                                "S"
                            );
                        } else {
                            // Apply regular borders to all other cells
                            doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, "S");
                        }
                    },


                    head: [headers], // Set the header rows
                    body: rows,
                    startY: tableY,

                    tableWidth: tableWidth,
                    tableHeight: tableHeight,
                    theme: "grid",
                    headStyles: {
                        fillColor: [248, 249, 250],
                        fontStyle: "bold",
                        textColor: 0,
                        fontSize: 8,
                        font: "Calibri",
                        halign: "center", // Align header cells to the center
                    },
                    bodyStyles: {
                        textColor: [33, 37, 41],
                        fontStyle: "normal",
                        font: "Calibri",
                        fontSize: 8,
                        cellPadding: 3,
                        cellStyles: {
                            0: { halign: "left" }, // Align account name column to the left
                            // Align date columns to the right
                            fromIndex: 1,
                            toIndex: headers.length,
                            halign: "right",
                        },
                    },
                    didParseCell: function (data) {
                        if (data.section === 'head') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            data.cell.styles.textColor = [0, 0, 0];
                            // Increase the font size of the header
                            data.cell.styles.fontSize = 9.5;
                            data.cell.styles.fontStyle = 'bold';

                            if (data.cell.raw == 'Account Head') {
                                // Center align the "Opening," "Transaction," and "Closing" headers
                                data.cell.styles.halign = 'center';
                            } else {
                                // Right align the "Debit" and "Credit" headers
                                data.cell.styles.halign = 'right';
                            }

                        }
                        if (data.section === 'body') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            if (data.column.index != 0) {
                                data.cell.styles.halign = 'right';
                            }
                            else {
                                data.cell.styles.halign = 'left';
                            }


                        }

                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');
                    },
                    margin: { top: 120 },
                    tableWidth: "auto",
                    columnWidth: "auto",
                });


            }

             else if(pp==true || py==true){
                    var dates = [];

                    allData.forEach(function(item) {
                      Object.keys(item).forEach(function(key) {
                        if (!isNaN(Date.parse(key))) {
                          if (!dates.includes(key)) {
                            dates.push(key);
                          }
                        }
                      });
                    });

             
                 if((pp==true && tkpp==true && perPP==false) ||(py==true && tkpy==true && perPY==false)){
                    
                     var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                        headers.push({ content: 'CHANGE', styles: { halign: "right" } });
                        var debitTotal = 0;
                        var creditTotal = 0;
                        var rows = [];

                        function processRow(data, level) {
                            var row = [data.AccName.trim()];
                            var hasValue = false; // Flag to check if the account has a value for both dates

                            dates.forEach(function (date, index) {
                        
                                var value = data[date] || 0;
                                var formattedValue = formatNumberWithCommas(value);
                                row.push(formattedValue); 
                            });
                            
                             row.push(formatNumberWithCommas(data.TkChange === 0 ? "0.00" : data.TkChange.toFixed(3).replace(/\.?0*$/, '')));
                       
                          
                           
                             rows.push(row);
                            if (data.Children) {
                                data.Children.forEach(function (child) {
                                    processRow(child, level + 1);
                                });
                            }
                        }

                        allData.forEach(function (data) {
                            processRow(data, 0);
                        });

               
                    
                 }

                else if ((pp == true && perPP == true && tkpp==false) || (py == true && perPY == true && tkpy==false)) {
                   
                     var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                    headers.push({ content: '% OF COLUMN', styles: { halign: "right" } });
                        var debitTotal = 0;
                        var creditTotal = 0;
                        var rows = [];

                    function processRow(data, level) {
                        var row = [data.AccName.trim()];
                        var hasValue = false; // Flag to check if the account has a value for both dates

                        dates.forEach(function (date, index) {
                         
                            var value = data[date] || 0;
                            var formattedValue = formatNumberWithCommas(value);
                            row.push(formattedValue);
                        });

                         
                        row.push(formatNumberWithCommas(data.PercentageChange === 0 ? "0.00" : data.PercentageChange.toFixed(3).replace(/\.?0*$/, '')));
                        rows.push(row);
                        if (data.Children) {
                            data.Children.forEach(function (child) {
                                processRow(child, level + 1);
                            });
                        }
                    }

                        allData.forEach(function (data) {
                            processRow(data, 0);
                        });
                 }

                 else if((pp == true && perPP == true && tkpp==true) || (py == true && perPY == true && tkpy==true)){
                     
                     var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                    headers.push({ content: 'CHANGE', styles: { halign: "right" } });
                    headers.push({ content: '% OF COLUMN', styles: { halign: "right" } });
                        var debitTotal = 0;
                        var creditTotal = 0;
                        var rows = [];

                         function processRow(data, level) {
                        var row = [data.AccName.trim()];
                        var hasValue = false; // Flag to check if the account has a value for both dates

                        dates.forEach(function (date, index) {
                            
                            var value = data[date] || 0;
                            var formattedValue = formatNumberWithCommas(value);
                            row.push(formattedValue);
                        });

                      row.push(formatNumberWithCommas(data.TkChange === 0 ? "0.00" : data.TkChange.toFixed(3).replace(/\.?0*$/, '')));
                        row.push(formatNumberWithCommas(data.PercentageChange === 0 ? "0.00" : data.PercentageChange.toFixed(3).replace(/\.?0*$/, '')));

                        rows.push(row);
                        if (data.Children) {
                            data.Children.forEach(function (child) {
                                processRow(child, level + 1);
                            });
                        }
                    }

                        allData.forEach(function (data) {
                            processRow(data, 0);
                        });
                 }
                 else{

                    var headers = ["Account Head"].concat(dates.map(date => "AS OF " + date));
                    var debitTotal = 0;
                    var creditTotal = 0;
                    var rows = [];

                    function processRow(data, level) {
                        var row = [data.AccName.trim()];
                        var hasValue = false; // Flag to check if the account has a value for both dates

                        dates.forEach(function (date, index) {
                       
                            var value = data[date] || 0;
                            var debitIndex = index * 2 + 1;
                            var creditIndex = index * 2 + 2;
                            
                            var formattedValue = formatNumberWithCommas(value);

                            row[debitIndex] = formattedValue;
                            row[creditIndex] = formattedValue;



                            // Check if the account has a value for both dates
                            if (value !== 0) {
                                hasValue = true;
                            }
                        });

                        if (hasValue) {
                            rows.push(row);
                          ;
                            debitTotal += row.reduce((sum, val, index) => (index % 2 === 1 ? sum + (+val || 0) : sum), 0);
                            creditTotal += row.reduce((sum, val, index) => (index % 2 === 0 ? sum + (+val || 0) : sum), 0);
                        }

                        if (data.Children) {
                            data.Children.forEach(function (child) {
                                processRow(child, level + 1);
                            });
                        }
                    }

                    allData.forEach(function (data) {
                        processRow(data, 0);
                    });

                 
                 }

               
               

                // Create a wrapper div for the table with a scrollbar
                var tableContainer = document.createElement("div");
                tableContainer.style.overflow = "auto";
                tableContainer.style.maxHeight = "300px";


                // Create the table element
                var table = document.createElement("table");



                tableContainer.appendChild(table);
                document.body.appendChild(tableContainer);
                var tableX = 40;
                var tableY = 120;
                var tableWidth = pdfWidth - 2 * tableX;
                var tableHeight = pdfHeight - tableY - 40;



                doc.autoTable({

                    didDrawCell: function (data) {
                        // Apply borders to all cells
                        var lineWidth = 0.2; // Adjust the border width
                        doc.setDrawColor(200); // Set border color to a lighter shade
                        doc.setLineWidth(lineWidth);

                        if (data.cell.section === "body" && data.cell.index % 2 === 0) {
                            // Apply thicker bottom border to debit cells in the body section
                            doc.rect(
                                data.cell.x,
                                data.cell.y + data.cell.height - lineWidth,
                                data.cell.width,
                                lineWidth,
                                "S"
                            );
                        }  else {
                            // Apply regular borders to all other cells
                            doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, "S");
                        }
                    },


                    head: [headers], // Set the header rows
                    body: rows,
                    startY: tableY,

                    tableWidth: tableWidth,
                    tableHeight: tableHeight,
                    theme: "grid",
                    headStyles: {
    fillColor: [248, 249, 250],
    fontStyle: "bold",
    textColor: 0,
    fontSize: 8,
    font: "Calibri",
    halign: "center", // Align header cells to the center
  },
  bodyStyles: {
    textColor: [33, 37, 41],
    fontStyle: "normal",
    font: "Calibri",
    fontSize: 8,
    cellPadding: 3,
    cellStyles: {
      0: { halign: "left" }, // Align account name column to the left
      // Align date columns to the right
      fromIndex: 1,
      toIndex: headers.length,
      halign: "right",
    },
  },
                    didParseCell: function (data) {
                        if (data.section === 'head') {
                           
                            data.cell.styles.fillColor = [255, 255, 255];
                            data.cell.styles.textColor = [0, 0, 0];
                            // Increase the font size of the header
                            data.cell.styles.fontSize = 9.5;
                            data.cell.styles.fontStyle = 'bold';
                          
                            if (data.cell.raw=='Account Head') {
                                // Center align the "Opening," "Transaction," and "Closing" headers
                                data.cell.styles.halign = 'center';
                            } else {
                                // Right align the "Debit" and "Credit" headers
                                data.cell.styles.halign = 'right';
                            }

                        }
                        if (data.section === 'body') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            if(data.column.index!=0){
                                data.cell.styles.halign = 'right';
                            }
                            else{
                                data.cell.styles.halign = 'left';
                            }


                        }

                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');
                    },
                    margin: { top: 120 },
                    tableWidth: "auto",
                    columnWidth: "auto",
                });


             

            }

          
           


          
          else{

              

                var headers = ["Account Head", "Total"];


                var tableData = [];
                var uniqueAccountNames = {};

                for (var i = 0; i < allData.length; i++) {
                    var account = allData[i];
                    var accountName = account.AccName.trim();
                    var clBalance = account.clBalance;
                    var formattedValue = formatNumberWithCommas(clBalance);
                    tableData.push([accountName, formattedValue]);

                    if (account.Children && account.Children.length > 0) {
                        for (var j = 0; j < account.Children.length; j++) {
                            var childAccount = account.Children[j];
                            var childAccountName = childAccount.AccName.trim();
                            var childClBalance = childAccount.clBalance;
                            var formattedValueChild = formatNumberWithCommas(childClBalance);
                            tableData.push(['\t' + childAccountName, formattedValueChild]);

                            if (childAccount.Children && childAccount.Children.length > 0) {
                                for (var k = 0; k < childAccount.Children.length; k++) {
                                    var subChildAccount = childAccount.Children[k];
                                    var subChildAccountName = subChildAccount.AccName.trim();
                                    var subChildClBalance = subChildAccount.clBalance;
                                    var formattedValuesubChild = formatNumberWithCommas(subChildClBalance);
                                    tableData.push(['\t\t' + subChildAccountName, formattedValuesubChild]);
                                }
                            }
                        }
                    }
                }

               
                var tableWidth = 360; // Assuming the total width of the table is 360 points
                var pdfWidth = 595.28; // Width of the PDF in points

                doc.autoTable({
                    startY: 110,
                    startX: -100,
                    head: [headers],
                    body: tableData,
                    headStyles: {
                        fillColor: [255, 255, 255],
                        textColor: [0, 0, 0], // Set text color to black
                        fontSize: 12,
                        fontStyle: 'bold',
                        halign: 'center',
                        font: 'Montserrat'
                    },

                    didDrawCell: function (data) {
                        var isLastRow = (data.row.index === tableData.length - 1);
                        var isAccountNameColumn = (data.column.index === 0);
                        var hasChildren = data.row.raw[0].startsWith('\t');
                       
                      
                        if (data.section === 'head') {

                            doc.setFillColor(255, 255, 255); // Set the desired light color
                            doc.setTextColor(0, 0, 0); // Set text color to black
                            doc.setFont('Montserrat', 'bold'); // Set font style to bold
                            doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S'); // Draw border around header cells
                        }
                        if (data.section === 'body') {

                            if (isLastRow) {
                                // Draw top border and two bottom borders for the last row
                                doc.setDrawColor(0); // Set border color to black
                                doc.setLineWidth(0.2); // Set border width to thin

                            } else if (data.row.index % 2 === 0) {
                                // Remove the background color of alternate rows
                                data.cell.styles.fillColor = [255, 255, 255]; // Set the background color to white
                            }
                           
                        }


                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');



                    },
                    didParseCell: function (data) {
                        if (data.section === 'head') {
                          
                            data.cell.styles.fillColor = [255, 255, 255];
                            data.cell.styles.textColor = [0, 0, 0];
                            // Increase the font size of the header
                            data.cell.styles.fontSize = 9.5;
                            data.cell.styles.fontStyle = 'bold';

                            if (data.cell.raw == 'Account Head') {
                                // Center align the "Opening," "Transaction," and "Closing" headers
                                data.cell.styles.halign = 'center';
                            } else {
                                // Right align the "Debit" and "Credit" headers
                                data.cell.styles.halign = 'right';
                            }

                        }
                        if (data.section === 'body') {
                            data.cell.styles.fillColor = [255, 255, 255];
                            if (data.column.index != 0) {
                                data.cell.styles.halign = 'right';
                            }
                            else {
                                data.cell.styles.halign = 'left';
                            }


                        }

                        doc.setDrawColor(200); // Set border color
                        doc.setLineWidth(0.2); // Set border width
                        doc.rect(data.cell.x, data.cell.y, data.cell.width, data.cell.height, 'S');
                    },
                    columnStyles: {
                        0: { cellWidth: 380, halign: 'left', font: 'Montserrat' },
                        1: { cellWidth: 120, halign: 'right', font: 'Montserrat' }

                    }
                });
          
          }
          
      
            var pdfDataUrl = doc.output("datauristring");
            var pdfIframe = document.getElementById("pdf-iframe");
            pdfIframe.src = pdfDataUrl;
            currentDoc = doc;   
         
        }
        function formatNumberWithCommas(x) {
             x=x.toString();
            var afterPoint = '';
            if(x.indexOf('.') > 0)
               afterPoint = x.substring(x.indexOf('.'),x.length);
            x = Math.floor(x);
            x=x.toString();
            var lastThree = x.substring(x.length-3);
            var otherNumbers = x.substring(0,x.length-3);
            if(otherNumbers != '')
                lastThree = ',' + lastThree;
            var res = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree + afterPoint;
    
            

            return res;
        }

          function formatCSVValue(value) {
                var stringValue = String(value);
                if (stringValue.includes(",")) {
                    return '"' + stringValue + '"';
                }
                return stringValue;
            }
       
   









      

        $('#printPdfLoaded').on('click', function () {
            portrait();
        })

          $('#emailPdfLoaded').on('click', function () {
            portrait();
        })

        //new pdf portrait landscape code start
        $("#orientation").change(function () {
            if ($(this).val() === 'portrait') {
                portrait();
            }
            else if ($(this).val() === 'landscape') {
                landscape();
            }
        });
       //new pdf portrait landscape code end

    </script>
}
