@model string
@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var actionType = ViewBag.Type as string;
}
<style>
    .toast-red {
        background-color: red !important;
        color: white; /* Set text color as needed */
    }
    /* .left-box {
          float:left;
        }
        .right-box {

          overflow: hidden;
        }*/
    .btn-delete {
        position: absolute;
        left: 90%;
        bottom: 85%;
        margin-top: 2px;
        cursor: pointer;
        background: none;
        border: none;
    }

    #title {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-weight: 600;
        line-height: 20px;
        color: #393a3d;
        text-transform: uppercase;
        font-size: 14px !important;
        float: left;
        margin-left: 8px;
        margin-bottom: 0px;
    }

    #title-container {
        margin-top: 0;
        margin-bottom: 4px;
        line-height: 20px;
        color: #6b6c72;
        font-weight: 500;
        font-size: 14px;
        float: left;
        margin-left: 8px;
        margin-top: 4px;
        margin-bottom: 0px;
    }

    #money-container {
        margin-top: 0;
        margin-bottom: 4px;
        line-height: 20px;
        color: black;
        float: left;
        margin-left: 8px;
        margin-top: 8px;
    }

    .image-container {
        position: relative; /* Make the container relative to position the check icon */
        width: 100px; /* Adjust to match the width of your images */
        height: 100px; /* Adjust to match the height of your images */
    }

    .compare-ul {
        list-style: none;
        padding: 0;
        text-align: left;
        display: inline-block;
        vertical-align: top; /* Align the lists to the top */
        margin-right: 20px;
    }

    .form-label {
        font-weight: 400 !important;
        font-size: 12px;
        text-align: left;
    }


    .check-icon {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%; /* Make the check icon cover the entire container */
        height: 100%; /* Make the check icon cover the entire container */
    }

    hr {
        margin-top: 1rem;
        margin-bottom: 1rem;
        border: 1px solid !important;
        border-top: 1px solid rgba(0,0,0,.1);
    }

    .chart-type-img {
        width: 82px;
        height: 82px;
    }

    .chart-type {
        width: 100px;
        float: left;
    }

    .stacked-field {
        display: none !important;
    }

    .stacked-field-show {
        display: block !important;
    }

    .selected-chart {
        box-shadow: 0px 0px 5px 2px lightblue; /* Adjust the color to your preference */
    }

    .offcanvas-body .card {
        /* background: linear-gradient(135deg, #3498db, #ecf0f1); */
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin: auto;
        width: 70%;
        transition: transform 0.2s, box-shadow 0.2s;
        color: black;
        text-align: center;
        border: 0px solid;
    }

    .table-box {
        border: 1px solid;
        border-color: rgb(212, 215, 220) !important;
        padding: 10px;
        margin: 5px;
        box-sizing: border-box;
        border-radius: 10px;
        width: 30%;
        height: 250px;
        float: left;
        text-align: center;
        position: relative;
    }

    .center-content {
        margin-top: 30px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }


    .rightside {
        padding-left: 6%;
        overflow: hidden;
        /*width:60%;*/
    }

    .left {
        margin-right: 500px
    }


    .card p {
        margin-bottom: 20px;
    }

    .offcanvas-header {
        background-color: #ECEEF1;
    }

    .offcanvas-body {
        background-color: #F4F5F8;
    }

    .scrollb {
        overflow-y: auto;
        height: 100vh;
    }

    .cardsize {
        width: 200px;
        height: 160px;
    }

    .onsortenble {
        border: 5px solid black;
    }

    .card-img-top {
        width: 100px;
        height: 100px;
    }
</style>

<div class="container">
    <div class="row">
        <h3>@Model Import Data</h3>
        <h6> Bring your existing data into Atrai</h6>
        @* <a asp-action="DownloadSample" asp-controller="Accounts" asp-route-type="@Model" target="_blank">Download Sample</a> *@
        <a id="downloadLink" href="#">Download Sample</a>

    </div>
    <div class="row my-2">
        <div class="col-6">
            <div>
                <label for="FileUpload" class="form-label">Choose a Excel File</label>
                <input class="form-control form-control-md" id="FileUpload" type="file" accept=".xlsx">
                <button type="button" class="btn btn-primary" onclick="uploadFile()">Upload</button>
            </div>
        </div>
        

        
    </div>
    <div class="row">
        <div class="col-md-2">
        <button type="button" class="btn btn-success" onclick="ApplyChange()">Apply Changes</button>
        </div>
        <div id="tableContainer" class="mt-4" style="width: 100%;">
            <div id="Report_table"></div>
        </div>
    </div>
</div>




@section Scripts {
    <script src="~/admin_theme_gtr/assets/js/shortable.js"></script>

    <script>
        var dataList;
        var table;
        var Columns;
        function uploadFile() {

            var type = '@actionType';
            if (type == 'Product' || type == 'Customers' || type == 'Suppliers') {
                const fileInput = document.getElementById('FileUpload');

                if ('files' in fileInput && fileInput.files.length > 0) {
                    const selectedFile = fileInput.files[0];

                    const formData = new FormData();
                    formData.append('file', selectedFile);
                    formData.append('type', '@Model');

                    $.ajax({
                        //url: '@Url.Action("ImportDataFile", "Accounts")',
                        url: '@Url.Action("UploadFiles", "Admin")',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (response) {
                            dataList = response;
                            console.log('File uploaded successfully:', response);
                            toastr.success(response.message, "", {
                                "toastClass": "toast-green",
                            });
                            // GetColumns();
                            // TabulatorInitializer();
                        },
                        error: function (xhr, status, error) {

                            console.error('Error uploading file:', error);
                            toastr.success(response.message, "", {
                                "toastClass": "toast-red",
                            });
                        }
                    });
                } else {
                    console.error('No file selected');
                }
            }
            else 
            {
                const fileInput = document.getElementById('FileUpload');

                if ('files' in fileInput && fileInput.files.length > 0) {
                    const selectedFile = fileInput.files[0];

                    const formData = new FormData();
                    formData.append('file', selectedFile);
                    formData.append('type', '@Model');

                    $.ajax({
                        url: '@Url.Action("ImportDataFile", "Accounts")',
                        //url: '@Url.Action("UploadFiles", "Admin")',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (response) {
                            dataList = response;
                            console.log('File uploaded successfully:', response);
                            GetColumns();
                            TabulatorInitializer();
                        },
                        error: function (xhr, status, error) {

                            console.error('Error uploading file:', error);
                        }
                    });
                } else {
                    console.error('No file selected');
                }
            }
           
        }
        function TabulatorInitializer() {

            table = new Tabulator("#Report_table", {
                data: dataList, //set initial table data
                //layout: "fitDataTable",
                columns: CustomColumn(),
                movableColumns: true,
                pagination: true,
                paginationSize: 10,
                paginationSizeSelector: [10, 25, 50, 100, true],
                groupStartOpen: true,
            });
            //table.on("dataProcessed", applyFiltering);
        }
        function CustomColumn() {
            if (Columns.length == 0) {

                return [{
                    title: "Report Data Not Available",
                    field: "fieldName",
                    formatter: function (cell, formatterParams, onRendered) {
                        return "No Data available";
                    }
                }];
            }         

            let columns = Columns.map(fieldName => {
                
                return {
                    title: fieldName,
                    field: fieldName,
                    editor: "input"
                };
            });
            return columns;
        }
        function GetColumns() {
            
            Columns = dataList.length > 0 ? Object.keys(dataList[0]) : [];
            for (let i in dataList[0]) {

                console.log("key datatype", typeof dataList[0][i]);
                // if (typeof dataList[0][i] == 'number') {

                //     NumberColumns.push(i);
                //     // console.log("key datatype", i);
                //     // console.log("NumberColumns", NumberColumns);

                // }
            }


        }

        function ApplyChange() {

            let tabledata =JSON.stringify(table.getData());
            const formData = new FormData();
            formData.append('File', tabledata);
            formData.append('type', '@Model');
            $.ajax({
                url: '@Url.Action("ImportSaveData", "Accounts")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    toastr.success(response.message, "", {
                        "toastClass": "toast-green",
                    });
                },
                error: function (xhr, status, error) {

                    console.error('Error uploading file:', error);
                }
            });
        }

        $(document).ready(function () {
            $('#downloadLink').click(function (e) {
                e.preventDefault(); 

                var type = '@actionType';

                $.ajax({
                    url: '@Url.Action("DownloadSample2", "Accounts")',
                    type: 'GET',
                    data: { type: type },
                    xhrFields: {
                        responseType: 'blob' 
                    },
                    success: function (response) {
                        var blob = new Blob([response], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                        var url = window.URL.createObjectURL(blob);

                        var a = document.createElement('a');
                        a.href = url;
                        a.download = 'Samplefile.xlsx'; 
                        document.body.appendChild(a);
                        a.click();

                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                    }
                });
            });
        });


    </script>
}