@using Microsoft.AspNetCore.Http
@*@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery AntiForgery*@
@inject IHttpContextAccessor HttpContextAccessor
@model IEnumerable<Atrai.Model.Core.Entity.Acc_VoucherMainModel>
@{
    List<Atrai.Model.Core.Entity.Acc_VoucherNoPrefixModel> VoucherTypes = ViewBag.Acc_VoucherNoPrefix;
}
@*@model int*@
@{
    ViewData["Title"] = "Voucher Entry";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var VoucherTypeId = ViewBag.VoucherTypeId;
    var VoucherTypeName = ViewBag.VoucherTypeName;
    var VoucherId = ViewBag.VoucherId;



}

<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
<!-- Add this line to include the FontAwesome CSS -->
<link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet">
<script type="text/javascript" src="https://unpkg.com/tabulator-tables@5.5.0/dist/js/tabulator.min.js"></script>
<style>
    /* CSS for the arrow icon */
    span.arrow-icon {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        font-weight: bold;
    }

    .red-text {
        color: white;
        background-color: red;
        padding: 5px;
        border-radius: 8px;
        font-weight: bold;
        font-style: italic;
    }

    .footerButton {
        margin-top: 40px;
    }

    .green-text {
        color: white;
        background-color: green;
        border-radius: 8px;
        padding: 5px;
        font-weight: bold;
        font-style: italic;
    }

    .italic-text {
        font-style: italic;
    }

    .tabulator .tabulator-header .tabulator-col {
        display: inline-flex;
        position: relative;
        box-sizing: border-box;
        flex-direction: column;
        justify-content: flex-start;
        border-right: 1px solid #aaa;
        background: #ffffff !important;
        text-align: left;
        vertical-align: bottom;
        overflow: hidden;
    }

    .tabulator-row .tabulator-cell {
        display: inline-block;
        position: relative;
        box-sizing: border-box;
        padding: 8px;
        border-right: 1px dotted #aaa;
        vertical-align: middle;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .tabulator .tabulator-footer .tabulator-calcs-holder {
        box-sizing: border-box;
        width: 100%;
        text-align: left;
        background: #f3f3f3 !important;
        border-bottom: 1px;
        border-top: 1px;
        overflow: hidden;
    }

    .tabulator {
        position: relative;
        border: 1px #999;
        background-color: #ffffff;
        font-size: 14px;
        text-align: left;
        overflow: hidden;
        -webkit-transform: translateZ(0);
        -moz-transform: translateZ(0);
        -ms-transform: translateZ(0);
        -o-transform: translateZ(0);
        transform: translateZ(0);
    }

    .loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        background: url('/assets/loading-load.gif') 50% 50% no-repeat rgb(249, 249, 249);
        opacity: .6;
    }
    /* Customize the Select2 container */
    .select2-container {
        width: 240px !important;
        font-size: 16px;
    }


    /* Customize the Select2 selection box */
    .select2-selection {
        background-color: #f2f2f2;
        border-radius: 5px;
        height: 40px;
        padding-bottom: 42px;
        border: 1px solid #ced4da
    }

    .select2-selection__rendered, .select2-selection__arrow {
        margin-top: 8px;
    }



    .tabulator-row .tabulator-cell.tabulator-editing input {
        margin-top: 6px;
    }

    .tabulator-row .tabulator-cell.tabulator-editing {
        padding-bottom: 10px;
    }

    .bootstrap-tagsinput {
        height: 45px;
        /* width: 485px; */
    }

    .move-right {
        margin-left: 160px;
    }

    .col-md-1 {
        width: 6.2%;
    }

    .file-wrapper {
        position: relative;
        margin-bottom: 20px;
    }

    .remove-button {
        position: absolute;
        top: 5px;
        right: 5px;
        z-index: 10;
    }

    .file-iframe {
        width: 50%;
        height: auto;
        border: 1px solid #ccc;
        overflow: hidden;
    }
</style>


<div class="page-wrapper">

    <div class="container-fluid">
        @*<div class="col-md-12 row mt-5" >*@

        <div class="hiddenSector">
            <div class="row">
                <input type="hidden" id="CountryIdLocal" name="CountryIdLocal" value="" />
                <input type="hidden" id="Id" name="Id" value="" />
                <input type="hidden" id="VoucherSerialId" name="VoucherSerialId" value="" />
                <input type="hidden" id="LuserId" name="LuserId" value="" />
                <input type="hidden" id="ComId" name="ComId" value="" />
                <input type="hidden" id="LuserIdUpdate" name="LuserIdUpdate" value="" />
                <input type="hidden" id="CreateDate" name="CreateDate" value="" />
                <input type="hidden" id="UpdateDate" name="UpdateDate" value="" />
                <input type="hidden" id="isPosted" name="isPosted" value="" />
                <input type="hidden" id="IsCash" name="IsCash" value="" />
                <input type="hidden" id="LuserIdApprove" name="LuserIdApprove" value="" />
                <input type="hidden" id="LuserIdCheck" name="LuserIdCheck" value="" />
                <input type="hidden" id="vAmountInWords" name="vAmountInWords" value="" />
                <input type="hidden" id="VoucherFilePath" name="VoucherFilePath" value="" />



            </div>

        </div>


        <div class="upperSection">
            <div class="row">
                <div class="col-md-1 col-4">
                    <button type="button" class="btn text-center border" data-bs-toggle="modal" data-bs-target="#historyModal">
                        <i class="bi bi-clock-history fw-bold"></i>
                    </button>
                    <!---Modal start-->
                    <div class="modal fade modal-lg" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="historyModalLabel">Modal title</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">

                                    <div class="card rounded-10">
                                        <div id="jsClockHistory"></div>

                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                                </div>
                            </div>
                        </div>
                    </div>
                    <!---Modal ends-->

                </div>

                <div class="col-md-3 col-4">
                    @{
                        if (VoucherTypeName == "Cash Payment" || VoucherTypeName == "Bank Payment")
                        {
                                <button class="btn btn-danger" id="VoucherTypeName" style="width: 100%; cursor: default;">@VoucherTypeName</button>
                                <input type="hidden" id="VoucherTypeId" name="" value="@VoucherTypeId" />
                        }
                        else if (VoucherTypeName == "Cash Receipt" || VoucherTypeName == "Bank Receipt")
                        {
                                <button class="btn btn-success" id="VoucherTypeName" style="width: 100%; cursor: default;">@VoucherTypeName</button>
                                <input type="hidden" id="VoucherTypeId" name="" value="@VoucherTypeId" />
                        }
                        else
                        {
                                <button class="btn btn-warning" id="VoucherTypeName" style="width: 100%; cursor: default;">@VoucherTypeName</button>
                                <input type="hidden" id="VoucherTypeId" name="" value="@VoucherTypeId" />
                        }
                    }

                </div>

                @*                                <div class="col-md-4 col-4">
        <button class="btn btn-primary" id="VoucherTypeName" style="width:100%" disabled>Cash Payment</button>
        <input type="hidden" id="VoucherTypeId" name="" value="1" />
        </div>*@
                <div class="col-md-3 col-4">
                    <div class="col-md-3 col-12" id="divCurrency">
                        <div class="mb-2">

                            <select class="form-select select2me" id="CountryId"
                                    aria-label="Floating label select example">
                            </select>

                        </div>
                    </div>
                </div>

                <div class="col-md-3 col-4">
                    <div class="d-flex mt-2 ms-2 d-none" id="yourRateParent" style="width: 126%;">
                        <label class="mt-1">1 <span class="rate"></span><span class="flag"></span> = </label>
                        <input type="text" class="form-control h-100 ms-2 me-2" id="CurrencyRate" style="border-radius:0px;width: 150px;">
                        <input type="text" class="form-control w-50 h-100 ms-2 me-2" id="MultiiCurrencyId" style="border-radius:0px;" hidden>
                        <label class="mt-1">BDT</label><i class="flag-icon flag-icon-bd"></i>
                    </div>
                </div>
                
                <div class="col-md-2 col-4" id="total-rate-label-main">
                    <p class="fw-bold" id="total-rate-label">Amount</p>

                </div>

            </div>
        </div>
        <div class="heroSection" style="width:70%;height: 50px;" id="cpSection">
            <div class="row mt-5">
                <div class="col-md-3 col-12">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">Voucher Date</label>
                        <input type="text" class="form-control tg" id="VoucherDate" autocomplete="off" readonly>
                        <span class="text-danger" id="VoucherDate-validation"></span>
                    </div>
                </div>
                <div class="col-md-3 col-12" id="divVoucherNo">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">Voucher no:</label>
                        <input type="text" class="form-control" id="VoucherNo" readonly>

                    </div>

                </div>
                @* <div class="col-md-4 col-12" id="divInvoiceno">
                <div class="mb-2">
                <label class="form-label fw-semibold">Find by invoice no:</label>
                <input type="text" class="form-control" id="Invoiceno" readonly>

                </div>

                </div>*@

                <div class="col-md-3 col-12">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">Ref.One:</label>
                        <input type="text" class="form-control" id="Referance">
                    </div>
                </div>
                <div class="col-md-3 col-12">
                    <div class="d-none" id="FiscalMonthDiv">
                        <label class="form-label fw-semibold">Fiscal month</label>
                        <select class="form-select " id="FiscalMonthId"
                                aria-label="Floating label select example">
                        </select>
                    </div>
                  

                </div>



            </div>
            <div class="row mt-5" id="AccountMainIdDropdown">

                @*<div class="form-floating col-md-4 col-12 select-option" id="divAccountMainId" >
                <select class="form-select select2me AccountMainId" id="AccountMainId"
                aria-label="Floating label select example">
                </select>
                <label for="floatingSelect">Transaction Head</label>
                </div>*@


                <div class="col-md-4 col-12" id="divAccountMainId">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">
                            Payment Account
                        </label>
                        <select class="form-select select2me AccountMainId" id="AccountMainId"
                                aria-label="Floating label select example">
                        </select>

                    </div>
                </div>

                <div class="col-md-4 col-12" id="divBalance">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">Balance</label>
                        <input type="text" class="form-control" id="balance" readonly>

                    </div>

                </div>


            </div>

        </div>

        <!--<div class="heroSection" style="width:50%" id="crSection">
            <div class="row mt-5">
                <div class="col-md-4 col-12" id="divcrCustomerHead">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">
                            Customer
                        </label>
                        <select class="form-select select2me" id="crCustomer"
                                aria-label="Floating label select example">
                        </select>

                    </div>
                </div>
                <div class="col-md-4 col-12" id="divcrPaymenAccountMainId">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">
                            Payment Method
                        </label>
                        <select class="form-select select2me" id="paymentTypes"
                                aria-label="Floating label select example">
                        </select>

                    </div>
                </div>



                <div class="col-md-4 col-12" id="divcrInvoiceno">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">Find by invoice no:</label>
                        <input type="text" class="form-control" id="crInvoiceno" readonly>

                    </div>

                </div>




            </div>-->
        <!-- Default checked -->
        <!--</div>-->




        <div class="row mt-5 " id="TagField">
            <div class="col-md-1 col-12 my-auto" id="divLocation">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked">
                    <label class="form-check-label" for="flexSwitchCheckChecked"></label>
                </div>
            </div>
            <div class="col-4">
                @* w-25 col-12 *@
                <div class="">
                    <label class="form-label fw-semibold">Tags</label>
                    <input id="MultiTags" type="text" value="" data-role="tagsinput" />
                </div>
            </div>
            <div class=" col-md-1 my-auto" id="divLocation">
                @* w-25 col-12 *@
                <div class="mb-2">
                    <label class="form-label fw-semibold">
                        Location
                    </label>
                    <select class="form-select select2me" id="location"
                            aria-label="Floating label select example">
                    </select>

                </div>
            </div>
            @*<div class="mt-5">
            <select id='selUser' style="width: 740px;">
            <option value='0'>Products</option>
            </select>

            </div>*@


        </div>




        <div class="gridSection" style="overflow:hidden">
            <div class="row">
                <div class="col-12 col-md-12">
                    <div id="jsFilterGrid" style="font-size:14px;"></div>
                </div>
            </div>
            @* <div class="col-md-4 col-12" id="divBalanceMultiDrCr">*@
        </div>
        @*<div class="row">
        <div class="col-12 col-md-12">
        <hr />
        <div id="jsGridItems"></div>
        </div>
        </div>*@
        <div class="row mt-5">
            <div class="col-12 col-md-12">

                <div id="tabulatorGrid"></div>
            </div>
        </div>
        @*<div class="row">
        <div class="col-12 col-md-12">
        <hr />
        <div id="jsGrid"></div>
        </div>
        </div>*@

        <div style="margin-top: 50px;margin-bottom:30px;">
            @if (ViewBag.IsCopy != 2)
            {
                <button id="add-row" class="btn" style="border: 1px solid;margin-right: 30px;">Add Row</button>
                <button id="clear" class="btn" style="border: 1px solid;margin-right: 30px;">Clear All Rows</button>
            }
            else
            {
                <button id="add-row" class="btn d-none" style="border: 1px solid;margin-right: 30px;">Add Row</button>
                <button id="clear" class="btn d-none" style="border: 1px solid;margin-right: 30px;">Clear All Rows</button>
            }
        </div>

        @*<div class="totalAmount" id="total-amount-id" style="margin-top:4%;text-align: right;">*@


        @*<input  id="VAmount-debit" readonly>
        <input  id="VAmount-credit" readonly>
        <input  id="difference" readonly>*@
        @*<input type="hidden" style="text-align:right; font-weight:bold" id="difference">*@
    </div>


</div>

<div class="row">
    <div class="col-md-4 col-12">
        <div class="mb-2">
            <label class="form-label fw-bold">
                Description
            </label>

            <textarea class="form-control text-box multi-line" id="VoucherDesc" name="VoucherDesc" rows="4"></textarea>
        </div>
    </div>
    <div class="col-md-4 col-12 mt-4 pt-1">
        <input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf" multiple>
    </div>
    <div class="footerButton">
        @if (ViewBag.ActionType == "Edit")
        {
            <button class="btn btn-warning btn-md" id="BtnSave" data-voucher-Id="@VoucherId">Update</button>
        }
        else if (ViewBag.ActionType == "Create")
        {
            <button class="btn btn-info btn-md" id="BtnSave" data-voucher-Id="@VoucherId">Save</button>
        }
        else
        {
            <button class="btn btn-warning btn-md d-none" id="BtnSave" data-voucher-Id="@VoucherId">Save</button>
        }
        @*<button class="btn btn-info btn-sm" id="btnBack" data-voucher-Id="@VoucherId">Back to List</button>*@
        <input type="button" class="btn btn-primary btn-md" value="Back To List" onclick="@("window.location.href='" + @Url.Action("VoucherListQB", "Accounts") + "'");" />
        <input type="button" id="unknown" class="btn  btn-md" value="" />
        <div class="dropdown" id="unknown1" style="display: inline-block;">
            <button class="btn btn-danger btn-md dropdown-toggle" type="button" data-bs-toggle="dropdown">
                Add New
            </button>
            <ul id="voucherDropdown" class="dropdown-menu">
                @foreach (var item in VoucherTypes)
                {
                    <li>
                        @Html.ActionLink(item.vVoucherTypes.VoucherTypeName, "AddVoucherByType", new { Type = item.vVoucherTypes.VoucherTypeNameShort }, new { @class = "dropdown-item" })  @* + @item.vVoucherTypes.VoucherTypeButtonClass *@
                    </li>
                }

                <li class="dropdown-item">
                    <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Import Voucher</a>
                </li>

            </ul>
        </div>
        @*            <button class="btn btn-info btn-sm" id="json">Json Data</button>
        <button id="voucherSave" class="btn btn-primary btnVoucher btn-sm" type="button">
        <span class="d-none spinner-border spinner-border-lg" id="voucherspinner" role="status" aria-hidden="true"></span> S
        </button>*@
    </div>

    <div class="footerButton">
        <button class="btn btn-outline-dark fw-bolder btn-sm mt-4 d-none" id="view-image-or-pdf">Full view <i class="bi bi-eye-fill"></i></button>
        <button class="btn btn-outline-dark fw-bolder btn-sm mt-4 bg-danger text-white d-none" id="remove-image-or-pdf">X</button>
    </div>
    <div class="col-lg-12">
        <iframe id="pdf-iframe" class="d-none" style="width: 66%; height: 500px;"></iframe>
    </div>
    <div class="col-lg-12 row" id="file-container">
        <!-- Placeholder for dynamically added iframes and buttons -->
    </div>
</div>
    </div>

</div>

<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this file?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script type="text/javascript">



        $(document).ready(function () {

            $('#FiscalMonthId').select2();
            var editingModeTrigger = 1;
            var currencyrate;
            var AccountCategory = '';
            var currencyId;
            var isMultiCurrency = '@HttpContextAccessor.HttpContext.Session.GetInt32("isMultiCurrency")';
            var DefaultCurrencyId = '@HttpContextAccessor.HttpContext.Session.GetInt32("defaultcurrencyid").ToString()';

            var isMultiDebitCredit = '@HttpContextAccessor.HttpContext.Session.GetString("isMultiDebitCredit").ToLower()' == 'true';
            if ((isMultiDebitCredit == false) && ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3)) {
                var amountInputs = `
                <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;font-weight:bold; padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="VAmount-debit" readonly>
                `
                $("#total-amount-id").append(amountInputs);

            }
            else if ((isMultiDebitCredit == false) && ($('#VoucherTypeId').val() == 2 || $('#VoucherTypeId').val() == 4)) {
                var amountInputs = `
                <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;ont-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="VAmount-credit" readonly>
                `
                $("#total-amount-id").append(amountInputs);

            }
            else if ((isMultiDebitCredit == false) && ($('#VoucherTypeId').val() == 5 || $('#VoucherTypeId').val() == 6)) {
                var amountInputs = `
                <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="VAmount-debit" readonly>

                <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="VAmount-credit" readonly>

                            <label style="font-weight:bold;color: red;" for="total" class="ms-5">Diffrenece &nbsp;: &nbsp;</label>
                            <input type="text" style="text-align:right;font-weight:bold;color: red;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                 border-radius: 8px;" id="difference" readonly>
                            <input type="hidden" class="d-none" id="VAmount" readonly>
                `
                $("#total-amount-id").append(amountInputs);
            }
            else {
                var amountInputs = `
                                    <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                                    <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                            border-radius: 8px;" id="VAmount-debit" readonly>

                                    <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                                    <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                            border-radius: 8px;" id="VAmount-credit" readonly>

                                    <label style="font-weight:bold;color: red;" for="total" class="ms-5">Diffrenece &nbsp;: &nbsp;</label>
                                    <input type="text" style="text-align:right;font-weight:bold; color: red; padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                            border-radius: 8px;" id="difference" readonly>
                                    <input type="hidden" class="d-none" id="VAmount" readonly>
                `
                $("#total-amount-id").append(amountInputs);

            }

            if (isMultiDebitCredit == true) {
                let balance = `
                                                  <div class="mb-2">
                                                    <p class="fw-bold" id="balance">Balance</p>
                                                </div>
                                                    `
                $("#divBalanceMultiDrCr").append(balance);

                $("#total-rate-label-main").addClass("d-none");
            }
            ////////////////////////////// *********** upper section field *********///////////////////////////////////

            document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                document.getElementById("pdf-iframe").classList.add("d-none");
                document.getElementById("view-image-or-pdf").classList.add("d-none");
                document.getElementById("remove-image-or-pdf").classList.add("d-none");
                document.getElementById("VoucherFilePath").value = "";
            });
            var fileInput = $('input[type=file]')[0];
            /*alert(fileInput.files.length);*/
            //if (fileInput.files.length == 0 || fileInput.files[0].size == 0) {
            //    $("#pdf-iframe").toggleClass("d-none");
            //    $("#view-image-or-pdf").toggleClass("d-none");
            //    document.getElementById("remove-image-or-pdf").classList.add("d-none");
            //}
            //else if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
            //    $("#pdf-iframe").removeClass("d-none").addClass("d-block");
            //    $("#view-image-or-pdf").removeClass("d-none").addClass("d-block");
            //    $("#remove-image-or-pdf").removeClass("d-none").addClass("d-block");
            //}
            var today = new Date();
            var day = today.getDate();
            var month = today.toLocaleString('default', { month: 'short' });
            var year = today.getFullYear().toString().slice(-2);

            var formattedDay = (day < 10 ? '0' : '') + day;

            var formattedDate = formattedDay + '-' + month + '-' + year;

            document.getElementById('VoucherDate').value = formattedDate;

            $('#VoucherDate').datepicker({
                dateFormat: 'dd-M-y',
                todayHighlight: true,
                autoclose: true,
                onSelect: function (dateText, inst) {
                    getverifyFiscalMonth(dateText);
                }
            });

            function initializeFiscalMonth(date)
            {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetFiscalMonthDateWise", "Accounts")',
                    data: { fiscalDate: date },
                    datatype: "Json",
                    success: function (data) {

                        if (data.length > 1) {
                            $("#FiscalMonthDiv").removeClass('d-none');
                        }
                        else
                        {
                            $("#FiscalMonthDiv").addClass('d-none');
                        }
                        $('#FiscalMonthId').empty();
                        $.each(data, function (index, value) {
                            $('#FiscalMonthId').append('<option value="' + value.Id + '" >' + value.MonthName + '</option>');
                        });
                        console.log($('#FiscalMonthId').val());
                    }
                });
            }
            function deleteFile(filename) {
                $.ajax({
                    url: '@Url.Action("DeleteFileName", "Accounts")',
                    type: 'Post',
                    data: { fileName: filename },
                    success: function (result) {

                    },
                    error: function (error) {
                        console.log('Error fetching group list:', error);
                    }
                });
            }

            // Function to determine file type based on extension
            function getFileType(fileName) {
                var extension = fileName.split('.').pop().toLowerCase();
                if (extension === 'pdf') {
                    return 'pdf';
                } else if (extension === 'xls' || extension === 'xlsx') {
                    return 'excel';
                } else if (extension === 'jpg' || extension === 'jpeg' || extension === 'png' || extension === 'gif') {
                    return 'image';
                } else {
                    return 'unknown';
                }
            }
            function getverifyFiscalMonth(selectedDate) {

                $.ajax({
                    url: '@Url.Action("VerifyFiscalMonth", "Accounts")',
                    data: { fiscalDate: selectedDate },
                    type: 'GET',
                    success: function (result) {

                        if(result.IsLocked == true)
                        {
                            if(result.data == null)
                            {
                                $('#VoucherDate-validation').text('Open a fiscal month.');
                                $('#VoucherDate').val('');
                            }
                            else
                            {
                                //$('#VoucherDate').val(result.data);
                                var formattedDate = moment(result.data).format('DD-MMM-YY');
                                $('#VoucherDate').val(formattedDate);
                                $('#VoucherDate-validation').text('The fiscal month you choosed is closed');
                                initializeFiscalMonth(result.data);
                            }
                        }
                        else
                        {
                            $('#VoucherDate-validation').text('');
                            initializeFiscalMonth($('#VoucherDate').val());
                        }
                    },
                    error: function (error) {
                        console.log('Error fetching group list:', error);
                    }
                });
            }

            var VoucherDate;
            var VoucherNo;
            var VoucherList = [];

            $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("LastVoucher", "Accounts")',//url: "https://www.pqstec.com/InvoiceApps/values/GetSupplierDropdown",
                data: { vouchertypeid: $('#VoucherTypeId').val(), vouchertypesearch: " " },

                success: function (data) {
                    VoucherDate = data.LastVoucherDate;
                    VoucherNo = data.LastVoucherNo;
                    VoucherList = data.PrevVoucherList;
                    console.log("VoucherList::", VoucherList);

                }
            });

            //$('#VoucherDate').val(VoucherDate);
            $('#VoucherNo').val(VoucherNo);


            $('#jsClockHistory').jsGrid({
                width: '100%',
                data: VoucherList,
                fields: [
                    { name: "Id", title: 'Id', type: "label", visible: false },
                    { name: "VoucherNo", title: 'Voucher', type: "label" },
                    { name: "VoucherType", title: 'Type', type: "label", visible: false },
                    { name: "VoucherDate", title: 'Voucher VoucherDate', type: "label" },
                    { name: "VoucherDesc", title: 'Description', type: "label" },
                    { name: "VAmount", title: 'Amount', type: "label" }
                ]


            });

            $('#CountryId').select2({})
                .on("select2:select", function (e) {
                    GetCultureInfo($("#VAmount").val());
                });





            $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("GetCurrencyDropdown", "Admin")',
                //  data: { VoucherType: "Cash Payment" },

                success: function (data) {



                    const select = document.querySelector('#CountryId');
                    for (var i = 0; i < data.length; i++) {
                        const option = document.createElement('option');
                        option.value = data[i].Value;
                        option.text = data[i].Text;
                        select.appendChild(option);
                    }
                }
            });





            function LedgerBalance(AccountId) {
                //alert(AccountId);
                //alert($("#Customer").val());
                //tblaccountList.rows().remove().draw(false);
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetLedgerBalance", "Values")'
                }
                //alert('test');
                $.ajax({
                    type: 'Get',
                    // data: { VoucherType: "Cash Payment" },
                    url: MyAppUrlSettings.MyUsefulUrl,
                    dataType: 'json',
                    data: { AccountId: AccountId, TransactionId: 0 }, //, $("#Id").val()
                    success: function (result) {

                        $("#balance").text(result.toLocaleString());
                        $("#balance").val(result.toLocaleString());
                    },
                    error: function (ex) {
                        //alert('Failed.' + ex);
                    }
                });
                return false;
            };

            $('#AccountMainId').select2({})
                .on("select2:select", function (e) {
                    LedgerBalance($('#AccountMainId').val());
                });





            //$.ajax({
            //    method: "get",
            //    async: false,
            //    url: '@Url.Action("GetPaymentTypes", "Sales")',
            //    //  data: { VoucherType: "Cash Payment" },

            //    success: function(data) {



            //        const select = document.querySelector('#paymentTypes');
            //        for (var i = 0; i < data.length; i++) {
            //            const option = document.createElement('option');
            //            option.value = data[i].Value;
            //            option.text = data[i].Text;
            //            select.appendChild(option);
            //        }
            //    }
            //});


            $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("GetWarehouseDropdown", "Admin")',//url: "https://www.pqstec.com/InvoiceApps/values/GetSupplierDropdown",
                //headers: {
                //    contentType: "application/json; charset=utf-8",
                //    Authorization: token
                //},
                success: function (data) {
                    const select = document.querySelector('#location');
                    for (var i = 0; i < data.length; i++) {
                        const option = document.createElement('option');
                        option.value = data[i].Value;
                        option.text = data[i].Text;
                        select.appendChild(option);
                    }
                }
            });




            function GetCultureInfo() {
                let VamountVis = $('#VAmount').val();
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetCultureInfo", "Admin")'
                }
                //alert('test');
                $.ajax({
                    type: 'Get',
                    // data: { VoucherType: "Cash Payment" },
                    url: MyAppUrlSettings.MyUsefulUrl,
                    dataType: 'json',
                    data: { CurrencyId: $('#CountryId').val() }, //, $("#Id").val()
                    success: function (result) {

                        console.log(result);
                        let CultureInfo = result.CultureInfo;
                        let CurrencySymbol = result.CurrencySymbol;
                        let currencyshortname = result.CurrencyShortName;

                        if (VamountVis > 0) {

                            //ar ---> OMR, AED
                            //en---> USD,EUR
                            // bn--> BDT

                            //alert(CultureInfo.substr(3,2));
                            $('#VAmountvisible').val(Number(VamountVis).toLocaleString(CultureInfo.substr(0, 2), { style: 'currency', currency: currencyshortname }));


                            // const valueFormated = (TotalAmount).toLocaleString(CultureInfo, {
                            // style: 'currency',
                            // currency: currencyshortname,
                            // currencyDisplay : CurrencySymbol
                            //});


                            //// here is the value formated
                            // valueFormated.split('')[1]
                            //$('#VAmountvisible').val(valueFormated);





                            // $('#VAmount').val(valueformatednumber);
                        }



                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            }




            /////////***** condition based div hide and show **** ///////

            $('#cpSection').hide();
            $('#crSection').hide();
            if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {
                $('#cpSection').show();
            }

            else if ($('#VoucherTypeId').val() == 2 || $('#VoucherTypeId').val() == 4) {
                $('#cpSection').show();


                ///customer
                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("GetCustomersDropDown", "Admin")',
                    //data: { VoucherType: "Cash Receipt" },
                    success: function (data) {

                        const select = document.querySelector('#crCustomer');
                        for (var i = 0; i < data.length; i++) {
                            const option = document.createElement('option');
                            option.value = data[i].Value;
                            option.text = data[i].Text;
                            select.appendChild(option);
                        }
                    }
                });



            }
            else if ($('#VoucherTypeId').val() == 5 || $('#VoucherTypeId').val() == 6) {


                $('#cpSection').show();

                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                    data: { VoucherType: "Cash Receipt" },

                    success: function (data) {



                        const select = document.querySelector('#AccountMainId');
                        for (var i = 0; i < data.length; i++) {
                            const option = document.createElement('option');
                            option.value = data[i].Value;
                            option.text = data[i].Text;
                            select.appendChild(option);
                        }

                    }
                });

            }
            else {

                $('#cpSection').show();

            }




            if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 2) {



                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                    data: { VoucherType: "Cash" },

                    success: function (data) {



                        const select = document.querySelector('#AccountMainId');
                        for (var i = 0; i < data.length; i++) {
                            const option = document.createElement('option');
                            option.value = data[i].Value;
                            option.text = data[i].Text;
                            select.appendChild(option);
                        }
                    }
                });


            }
            else if ($('#VoucherTypeId').val() == 3 || $('#VoucherTypeId').val() == 4) {
                ///main account
                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                    data: { VoucherType: "Bank" },

                    success: function (data) {



                        const select = document.querySelector('#AccountMainId');
                        for (var i = 0; i < data.length; i++) {
                            const option = document.createElement('option');
                            option.value = data[i].Value;
                            option.text = data[i].Text;
                            select.appendChild(option);
                        }
                    }
                });

            }

            ////////****** hide/show end ******//////////

            //var withoutlocalFields=[
            //      {
            //          title: "",
            //          field: "drag",
            //          formatter: function (cell, formatterParams) {
            //              return "<i class='fas fa-bars drag-icon'></i>";
            //          },
            //          width: 30,
            //          headerSort: false,
            //          rowHandle: true,
            //          movable: false

            //      },
            //      { title: "SL.", field: "SLNo", width:'5px',movable: false, bottomCalc: "count",hozAlign:"right" },
            //      { title: "Id", field: "Id",movable: false,visible:false },
            //      { title: "Account Id", field: "AccId",movable: false, visible:false},
            //      { title: "Name", field: "Name", editor: "input", editable: true, movable: false, visible: false },

            //      {
            //          title: "Account Head",
            //          field: "AccName",
            //          editable: true,
            //          width:'30px',
            //          movable: false,
            //          formatter: "html",
            //          editor: categoryEditor,
            //          bottomCalcFormatter: "money",

            //           bottomCalcParams: { title: "Difference:" }, // Additional parameter for the bottomCalc function

            //         bottomCalc: function (values, data, calcParams) {

            //              var totalDebit = 0;
            //              data.forEach(function (row) {
            //                  if (row.TKDebitLocal) {
            //                      totalDebit += parseFloat(row.TKDebitLocal);
            //                  }
            //              });


            //              var totalCredit = 0;
            //              data.forEach(function (row) {
            //                  if (row.TKCreditLocal) {
            //                      totalCredit += parseFloat(row.TKCreditLocal);
            //                  }
            //              });
            //              calculation();
            //              difference = totalDebit - totalCredit;
            //                          if (difference > 0 || difference < 0) {
            //                              return calcParams.title + " " + difference;
            //                          } else {
            //                              return ""; // Return an empty string if the difference is 0
            //                          }

            //          },

            //          cellEdited: function (cell) {
            //              var selectedValues = cell.getValue();
            //          }
            //      },

            //      { title: "Note 1", field: "Note1",  editor: "input", movable: false,editable: true, width:'20px', },
            //      { title: "Note 2", field: "Note2", movable: false, editor: "input", editable: true, width:'20px', },
            //      {
            //          title: "Debit",
            //          field: "TKDebit",
            //          editable: true,
            //          hozAlign:"right",
            //          width:'10px',
            //          movable: false,
            //          bottomCalc: "sum",
            //          editor: "input",//,
            //          cellEditing: function(cell){

            //          }
            //      },
            //      {
            //          title: "Credit",
            //          field: "TKCredit",
            //          editable: true,
            //           width:'10px',
            //          hozAlign:"right",
            //          movable: false,
            //          bottomCalc: "sum",
            //          editor: "input"

            //      },

            //      {
            //          title: "",
            //          field: "Delete",
            //          movable: false,

            //          formatter: function (cell, formatterParams) {
            //              return "<i class='fas fa-trash-alt delete-icon'></i>";
            //          },
            //          width: 30,
            //          headerSort: false,
            //          cellClick: function (e, cell) {
            //              var rowData = cell.getRow().getData();
            //              var row = cell.getRow();
            //              deleteRow(row);


            //          }
            //      }
            //  ];

            function formatCurrency(value) {

            if (value === undefined) {
                return '0.00';
            }
            return parseFloat(value).toFixed(4).replace(/\d(?=(\d{3})+\.)/g, '$&,');
        }

            var flag = 0;
            var localFields = [





                {
                    headerSort: false,
                    field: "drag",
                    frozen: true,
                    formatter: function (cell, formatterParams) {
                        return "<i class='fas fa-bars drag-icon'></i>";
                    },
                    width: 30,
                    headerSort: false,
                    rowHandle: true,


                },
                { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '5px', bottomCalc: "count", hozAlign: "right" },
                {
                    title: "Account Head",
                    field: "AccName",
                    frozen: true,
                    editable: true,
                    headerSort: false,
                    width: '30px',

                    formatter: "html",
                    editor: categoryEditor,
                    editorParams: {
                        listOnEmpty: true,
                        autocomplete: true,
                    },
                    bottomCalcFormatter: "money",

                    bottomCalcParams: { title: "Difference:" }, // Additional parameter for the bottomCalc function

                    bottomCalc: function (values, data, calcParams) {


                        if (isMultiCurrency == 1 && $('#CountryId').val() != DefaultCurrencyId) {
                            var totalDebit = 0;
                            data.forEach(function (row) {
                                if (row.TKDebitLocal) {
                                    totalDebit += parseFloat(row.TKDebitLocal);
                                }
                            });


                            var totalCredit = 0;
                            data.forEach(function (row) {
                                if (row.TKCreditLocal) {
                                    totalCredit += parseFloat(row.TKCreditLocal);
                                }
                            });

                        }
                        else if ((isMultiCurrency == 0) || (isMultiCurrency == 1 && $('#CountryId').val() == DefaultCurrencyId)) {
                            var totalDebit = 0;
                            data.forEach(function (row) {
                                if (row.TKDebit) {
                                    totalDebit += parseFloat(row.TKDebit);
                                }
                            });


                            var totalCredit = 0;
                            data.forEach(function (row) {
                                if (row.TKCredit) {
                                    totalCredit += parseFloat(row.TKCredit);
                                }
                            });
                        }


                        calculation();
                        difference = totalDebit - totalCredit;
                        if (difference > 0 || difference < 0) {
                            return calcParams.title + " " + difference;
                        } else {
                            return "";
                        }
                        ////  console.log(value);
                        //  return {
                        //      value: difference,
                        //      title: "difference"
                        //  };
                    },

                    cellEdited: function (cell) {
                        var selectedValues = cell.getValue();
                    }
                },





                { title: "AccCategory", field: "AccountCategory", movable: false, headerSort: false, visible: false },
                { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                { title: "Account Id", field: "AccId", movable: false, headerSort: false, visible: false },
                { title: "Name", field: "Name", editor: "input", headerSort: false, editable: true, movable: false, visible: false },


                { title: "Note 1", field: "Note1", headerSort: false, editor: "input", movable: false, editable: true, width: '20px', },
                { title: "Note 2", headerSort: false, field: "Note2", movable: false, editor: "input", editable: true, width: '20px', },
                {
                    title: "Debit",
                    field: "TKDebit",
                    editable: true,
                    hozAlign: "right",
                    width: '10px',
                    headerSort: false,
                    bottomCalc: "sum",
                    movable: false,
                    // bottomCalc: "sum",
                    editor: "input",
                    formatter: function (cell, formatterParams) {
                        return formatCurrency(cell.getValue());
                    },
                    cellEditing: function (cell) {

                       // if (isMultiCurrency == 1 && $('#CountryId').val() != DefaultCurrencyId) {
                            //if (cell.getData().CurrencyForeignId == 18) {
                            //    cell.cancelEdit();
                            //}
                      //  }


                        var debitValue = parseFloat(cell.getValue());
                        if (isNaN(debitValue)) { // Check if the value is NaN or empty
                            cell.setValue(0);
                        }
                        var creditValue = cell.getData().TKCredit;
                        if (creditValue > 0) {
                            alert("multiple values are not allowed");
                            cell.setValue(0);
                        }

                        var accountHeadValue = cell.getData().AccName;
                        if (!accountHeadValue) {
                            alert("Please select a value in the Account Head field first.");
                            cell.setValue(0);
                            table.getRows().filter(function (row) {
                                return row.getPosition() === cell.getRow().getPosition();
                            })[0].getCell("AccName").edit();


                        }

                        if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {

                            if (cell.getData().AccountCategory == "Cash" || cell.getData().AccountCategory == "Bank") {
                                alert("Category (" + AccountCategory + ") Debit Entry not allowed!!!");
                                cell.setValue(0);
                            }
                        }


                    },
                    cellEdited: function (cell) {
                        var debitValue = parseFloat(cell.getValue());
                        var creditValue = cell.getData().TKCredit;
                        if (isNaN(debitValue)) { // Check if the value is NaN or empty
                            cell.setValue(0);
                        }

                        // if (cell.getData().CurrencyForeignId != 18) {
                        //     var debitValue = parseFloat(cell.getValue());
                        //     var currencyRate = parseFloat(cell.getData().CurrencyRate);
                        //     alert(debitValue, currencyRate);
                        //     var tkDebitLocalValue = debitValue * currencyRate;
                        //     cell.getRow().update({ TKDebitLocal: tkDebitLocalValue });
                        // }
                        var currencyRate = parseFloat(cell.getData().CurrencyRate) || 1;
                        if (currencyRate > 0) {
                            var debitValue = parseFloat(cell.getValue());                                                      
                            var tkDebitLocalValue = debitValue * currencyRate;
                            cell.getRow().update({ TKDebitLocal: tkDebitLocalValue });
                        }


                        if (debitValue + creditValue > 0) {
                            var newRowData = {
                                TKDebit: 0,
                                TKCredit: 0,
                                TKDebitLocal: 0,
                                TKCreditLocal: 0,
                                CurrencyRate: 1
                                // Add other fields here...
                            };
                            table.addRow(newRowData);
                            renumberRows();

                        }
                    }


                },
                {
                    title: "Credit",
                    field: "TKCredit",
                    editable: true,
                    width: '10px',
                    bottomCalc: "sum",
                    hozAlign: "right",
                    headerSort: false,
                    movable: false,
                    // bottomCalc: "sum",
                    editor: "input",
                    formatter: function (cell, formatterParams) {
                        // Format the Price column as currency
                        return formatCurrency(cell.getValue());
                    },
                    cellEditing: function (cell) {
                        //alert($('#CountryId').val());
                        //if (isMultiCurrency == 1 && $('#CountryId').val() != DefaultCurrencyId) {
                        //    if (cell.getData().CurrencyForeignId == 18) {
                        //        cell.cancelEdit();
                        //    }
                        //}
                        var flag = 1;
                        var creditValue = parseFloat(cell.getValue());
                        if (isNaN(creditValue)) { // Check if the value is NaN or empty
                            cell.setValue(0);
                        }
                        var debitValue = cell.getData().TKDebit;
                        if (debitValue > 0) {
                            alert("multiple values are not allowed");
                            cell.setValue(0);
                        }
                        var creditValue = parseFloat(cell.getValue());
                        var accountHeadValue = cell.getData().AccName;
                        if (!accountHeadValue) {
                            alert("Please select a value in the Account Head field first.");
                            cell.setValue(0);
                            table.getRows().filter(function (row) {
                                return row.getPosition() === cell.getRow().getPosition();
                            })[0].getCell("AccName").edit();

                            //return;
                        } else {
                            if (cell.getData().CurrencyForeignId != 18) {
                                var currencyRate = parseFloat(cell.getData().CurrencyRate);
                                var tkCreditLocalValue = creditValue * currencyRate;
                                cell.getRow().update({ TKCreditLocal: tkCreditLocalValue });
                            }
                            // rowData.alertShown = false;
                        }
                    },
                    cellEdited: function (cell) {
                        var debitValue = cell.getData().TKDebit;
                        var creditValue = parseFloat(cell.getValue());
                        if (isNaN(creditValue)) { // Check if the value is NaN or empty
                            cell.setValue(0);
                        }
                        var creditValue = parseFloat(cell.getValue());
                        // if (cell.getData().CurrencyForeignId != 18) {
                        //     var currencyRate = parseFloat(cell.getData().CurrencyRate);
                        //     var tkCreditLocalValue = creditValue * currencyRate;
                        //     cell.getRow().update({ TKCreditLocal: tkCreditLocalValue });
                        // }

                        var currencyRate = parseFloat(cell.getData().CurrencyRate) || 1;
                        if (currencyRate > 0) {                           
                            var tkCreditLocalValue = creditValue * currencyRate;
                            cell.getRow().update({ TKCreditLocal: tkCreditLocalValue });
                        }

                        if (debitValue + creditValue > 0) {
                            var newRowData = {
                                TKDebit: 0,
                                TKCredit: 0,
                                TKDebitLocal: 0,
                                TKCreditLocal: 0,
                                CurrencyRate: 1
                                // Add other fields here...
                            };
                            table.addRow(newRowData);
                            renumberRows();

                        }

                    }



                },


            ];
            var difference;

            var sampletableData = [
                { SLNo: 1, TKDebit: 0, TKCredit: 0, TKDebitLocal: 0, TKCreditLocal: 0, CurrencyRate: 1 }
            ];


            if (isMultiCurrency == 0) { //
                $('#CountryId').prop("disabled", true);
                var table = new Tabulator("#tabulatorGrid", {
                    height: "auto",
                    layout: "fitColumns",
                    //data: sampletableData,
                    columns: [
                        ...localFields,

                        {
                            title: "",
                            field: "Delete",
                            movable: false,

                            formatter: function (cell, formatterParams) {
                                return "<i class='fas fa-trash-alt delete-icon'></i>";
                            },
                            width: 30,
                            headerSort: false,
                            cellClick: function (e, cell) {
                                var rowData = cell.getRow().getData();
                                var row = cell.getRow();
                                deleteRow(row);


                            }
                        }
                    ],


                    movableRows: true,
                    movableColumns: true,

                    responsiveLayout: true

                });
            }

            else if (isMultiCurrency == 1 && $('#CountryId option:selected').val() == DefaultCurrencyId) {

                $('#CountryId').prop("disabled", false);
                var table = new Tabulator("#tabulatorGrid", {
                    height: "auto",
                    layout: "fitColumns",
                    headerSort: false,
                    data: sampletableData,
                    columns: [
                        ...localFields,





                        {
                            title: "",
                            field: "Delete",
                            movable: false,

                            formatter: function (cell, formatterParams) {
                                return "<i class='fas fa-trash-alt delete-icon'></i>";
                            },
                            width: 30,
                            headerSort: false,
                            cellClick: function (e, cell) {
                                var rowData = cell.getRow().getData();
                                var row = cell.getRow();
                                deleteRow(row);


                            }
                        }

                    ],


                    movableRows: true,
                    movableColumns: true,

                    responsiveLayout: true

                });



            }





           //else if(isMultiCurrency == 1 && $('#CountryId option:selected').val()!=18)  {

           //     $('#CountryId').prop("disabled", false);
           //     var table = new Tabulator("#tabulatorGrid", {
           //         height: "auto",
           //         layout: "fitColumns",
           //         headerSort: false,
           //         data: sampletableData,
           //         columns: [
           //             ...localFields,
           //             {
           //                 title: "FC",
           //                 width: '5px',
           //                 field: "CurrencyForeignId",
           //                 headerFilter: false,
           //                 editor: customNativeSelect,
           //                 formatter: function (cell) {

           //                     var value = cell.getValue();

           //                     if (editingModeTrigger == 0) {
           //                         var value1 = value.toString();
           //                         for (var i = 0; i < userData.length; i++) {

           //                             if (userData[i].LoginName === value1) {

           //                                 // Store value to cell dataset
           //                                 cell.getElement().dataset.loginName = value1;
           //                                 value1 = userData[i].FullName;

           //                                 break;
           //                             }
           //                         }
           //                         return value1;
           //                     }
           //                     else {
           //                         for (var i = 0; i < userData.length; i++) {

           //                             if (userData[i].LoginName === value) {

           //                                 // Store value to cell dataset
           //                                 cell.getElement().dataset.loginName = value;
           //                                 value = userData[i].FullName;

           //                                 break;
           //                             }
           //                         }

           //                         return value;
           //                     }

           //                 }
           //             },
           //             {
           //                 title: "Rate",
           //                 field: "CurrencyRate",
           //                 editable: true,
           //                 // visible:false,
           //                 width: '5px',
           //                 hozAlign: "right",
           //                 movable: false,
           //                 headerSort: false,
           //                 editor: "input",
           //                 cellEdited: function (cell) {

           //                     var LocalCurrencyId = $('#CountryId').val();

           //                     if (DefaultCurrencyId == LocalCurrencyId) {
           //                         cell.setValue(1);
           //                     }
           //                     var currencyRate = parseFloat(cell.getValue());





           //                     if (cell.getData().CurrencyForeignId != 18) {
           //                         var debitValue = parseFloat(cell.getData().TKDebit);
           //                         var creditValue = parseFloat(cell.getData().TKCredit);
           //                         var tkDebitLocalValue = debitValue * currencyRate;
           //                         var tKCreditLocalValue = creditValue * currencyRate;
           //                         cell.getRow().update({ TKDebitLocal: tkDebitLocalValue, TKCreditLocal: tKCreditLocalValue });
           //                     }
           //                     else if (cell.getData().CurrencyForeignId == 18) {
           //                         var TKDebitLocal = parseFloat(cell.getData().TKDebitLocal);
           //                         var TKCreditLocal = parseFloat(cell.getData().TKCreditLocal);
           //                         var tkDebit = TKDebitLocal / currencyRate;
           //                         var tKCredit = TKCreditLocal / currencyRate;
           //                         cell.getRow().update({ TKDebit: tkDebit, TKCredit: tKCredit });
           //                     }



           //                 },

           //             },
           //             {
           //                 title: "Debit",
           //                 field: "TKDebitLocal",
           //                 editable: true,
           //                 // visible:false,
           //                 headerSort: false,
           //                 width: '10px',
           //                 hozAlign: "right",
           //                 movable: false,
           //                 bottomCalc: "sum",
           //                 editor: "input",
           //                 cellEditing: function (cell) {
           //                     var debitValuelocal = parseFloat(cell.getValue());
           //                     if (isNaN(debitValuelocal)) { // Check if the value is NaN or empty
           //                         cell.setValue(0);
           //                     }
           //                     var accountHeadValue = cell.getData().AccName;
           //                     if (!accountHeadValue) {
           //                         alert("Please select a value in the Account Head field first.");
           //                         cell.setValue(0);
           //                         table.getRows().filter(function (row) {
           //                             return row.getPosition() === cell.getRow().getPosition();
           //                         })[0].getCell("AccName").edit();

           //                         //return;
           //                     }
           //                     if (cell.getData().CurrencyForeignId != 18) {
           //                         cell.cancelEdit();
           //                     }
           //                 },
           //                 cellEdited: function (cell) {
           //                     if (cell.getData().CurrencyForeignId == 18) {
           //                         var debitValuelocal = parseFloat(cell.getValue());
           //                         if (isNaN(debitValuelocal)) { // Check if the value is NaN or empty
           //                             cell.setValue(0);
           //                         }
           //                         var currencyRate = parseFloat(cell.getData().CurrencyRate);
           //                         var tkDebit = debitValuelocal / currencyRate;
           //                         cell.getRow().update({ TKDebit: tkDebit });
           //                     }
           //                     else {
           //                         cell.cancelEdit();
           //                     }


           //                 }
           //             },
           //             {
           //                 title: "Credit",
           //                 field: "TKCreditLocal",
           //                 editable: true,
           //                 headerSort: false,
           //                 // visible:false,
           //                 width: '10px',
           //                 hozAlign: "right",
           //                 movable: false,
           //                 bottomCalc: "sum",
           //                 editor: "input",
           //                 cellEditing: function (cell) {
           //                     var creditValuelocal = parseFloat(cell.getValue());
           //                     if (isNaN(creditValuelocal)) { // Check if the value is NaN or empty
           //                         cell.setValue(0);
           //                     }
           //                     var accountHeadValue = cell.getData().AccName;
           //                     if (!accountHeadValue) {
           //                         alert("Please select a value in the Account Head field first.");
           //                         cell.setValue(0);
           //                         table.getRows().filter(function (row) {
           //                             return row.getPosition() === cell.getRow().getPosition();
           //                         })[0].getCell("AccName").edit();

           //                         //return;
           //                     }
           //                     if (cell.getData().CurrencyForeignId != 18) {
           //                         cell.cancelEdit();
           //                     }
           //                 },
           //                 cellEdited: function (cell) {
           //                     if (cell.getData().CurrencyForeignId == 18) {
           //                         var creditValuelocal = parseFloat(cell.getValue());
           //                         var currencyRate = parseFloat(cell.getData().CurrencyRate);
           //                         var tkCredit = creditValuelocal / currencyRate;
           //                         cell.getRow().update({ TKCredit: tkCredit });
           //                     }

           //                 }
           //             },

           //             {
           //                 title: "",
           //                 field: "Delete",
           //                 movable: false,

           //                 formatter: function (cell, formatterParams) {
           //                     return "<i class='fas fa-trash-alt delete-icon'></i>";
           //                 },
           //                 width: 30,
           //                 headerSort: false,
           //                 cellClick: function (e, cell) {
           //                     var rowData = cell.getRow().getData();
           //                     var row = cell.getRow();
           //                     deleteRow(row);


           //                 }
           //             }

           //         ],


           //         movableRows: true,
           //         movableColumns: true,

           //         responsiveLayout: true

           //     });



           // }

           $('#CountryId').select2({})

                .on("change", function() {
                    var selectedValue = $(this).val();
                    var info=table.getData();

                     if (table && info[0].AccName) {

                        window.location.reload();

                    }


                   if(isMultiCurrency == 1 && selectedValue != DefaultCurrencyId){ //create
                    
                   table = new Tabulator("#tabulatorGrid", {
                    height: "auto",
                    layout: "fitColumns",
                    headerSort: false,
                    data: sampletableData,
                    columns: [
                          {
                    headerSort: false,
                    field: "drag",
                    frozen: true,
                    formatter: function (cell, formatterParams) {
                        return "<i class='fas fa-bars drag-icon'></i>";
                    },
                    width: 30,
                    headerSort: false,
                    rowHandle: true,


                },
                { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '5px', bottomCalc: "count", hozAlign: "right" },
                {
                    title: "Account Head",
                    field: "AccName",
                    frozen: true,
                    editable: true,
                    headerSort: false,
                    width: '30px',

                    formatter: "html",
                    editor: categoryEditor,
                    editorParams: {
                        listOnEmpty: true,
                        autocomplete: true,
                    },
                    bottomCalcFormatter: "money",

                    bottomCalcParams: { title: "Difference:" }, // Additional parameter for the bottomCalc function

                    bottomCalc: function (values, data, calcParams) {


                        if (isMultiCurrency == 1 && $('#CountryId').val() != DefaultCurrencyId) {
                            var totalDebit = 0;
                            data.forEach(function (row) {
                                if (row.TKDebitLocal) {
                                    totalDebit += parseFloat(row.TKDebitLocal);
                                }
                            });


                            var totalCredit = 0;
                            data.forEach(function (row) {
                                if (row.TKCreditLocal) {
                                    totalCredit += parseFloat(row.TKCreditLocal);
                                }
                            });

                        }
                        else if ((isMultiCurrency == 0) || (isMultiCurrency == 1 && $('#CountryId').val() == DefaultCurrencyId)) {
                            var totalDebit = 0;
                            data.forEach(function (row) {
                                if (row.TKDebit) {
                                    totalDebit += parseFloat(row.TKDebit);
                                }
                            });


                            var totalCredit = 0;
                            data.forEach(function (row) {
                                if (row.TKCredit) {
                                    totalCredit += parseFloat(row.TKCredit);
                                }
                            });
                        }


                        calculation();
                        difference = totalDebit - totalCredit;
                        if (difference > 0 || difference < 0) {
                            return calcParams.title + " " + difference;
                        } else {
                            return "";
                        }
                        ////  console.log(value);
                        //  return {
                        //      value: difference,
                        //      title: "difference"
                        //  };
                    },

                    cellEdited: function (cell) {
                        var selectedValues = cell.getValue();
                    }
                },





                { title: "AccCategory", field: "AccountCategory", movable: false, headerSort: false, visible: false },
                { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                { title: "Account Id", field: "AccId", movable: false, headerSort: false, visible: false },
                { title: "Name", field: "Name", editor: "input", headerSort: false, editable: true, movable: false, visible: false },


                { title: "Note 1", field: "Note1", headerSort: false, editor: "input", movable: false, editable: true, width: '20px', },
                { title: "Note 2", headerSort: false, field: "Note2", movable: false, editor: "input", editable: true, width: '20px', },
                {
                    title: "Debit",
                    field: "TKDebit",
                    editable: true,
                    hozAlign: "right",
                    width: '10px',
                    headerSort: false,
                    bottomCalc: "sum",
                    movable: false,
                    // bottomCalc: "sum",
                    editor: "input",
                                    formatter: function (cell, formatterParams) {
                                        // Format the Price column as currency
                                        return formatCurrency(cell.getValue());
                                    },
                    cellEditing: function (cell) {

                          if (cell.getData().CurrencyForeignId == 18) {
                                cell.cancelEdit();
                            }



                        var debitValue = parseFloat(cell.getValue());
                        if (isNaN(debitValue)) { // Check if the value is NaN or empty
                            cell.setValue(0);
                        }
                        var creditValue = cell.getData().TKCredit;
                        if (creditValue > 0) {
                            alert("multiple values are not allowed");
                            cell.setValue(0);
                        }

                        var accountHeadValue = cell.getData().AccName;
                        if (!accountHeadValue) {
                            alert("Please select a value in the Account Head field first.");
                            cell.setValue(0);
                            table.getRows().filter(function (row) {
                                return row.getPosition() === cell.getRow().getPosition();
                            })[0].getCell("AccName").edit();


                        }

                        if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {

                            if (cell.getData().AccountCategory == "Cash" || cell.getData().AccountCategory == "Bank") {
                                alert("Category (" + AccountCategory + ") Debit Entry not allowed!!!");
                                cell.setValue(0);
                            }
                        }


                    },
                    cellEdited: function (cell) {
                        var debitValue = parseFloat(cell.getValue());
                        var creditValue = cell.getData().TKCredit;
                        if (isNaN(debitValue)) { // Check if the value is NaN or empty
                            cell.setValue(0);
                        }

                        if (cell.getData().CurrencyForeignId != 18) {
                            var debitValue = parseFloat(cell.getValue());
                            var currencyRate = parseFloat(cell.getData().CurrencyRate);
                            var tkDebitLocalValue = debitValue * currencyRate;
                            cell.getRow().update({ TKDebitLocal: tkDebitLocalValue });
                        }


                        if (debitValue + creditValue > 0) {
                            var newRowData = {
                                TKDebit: 0,
                                TKCredit: 0,
                                TKDebitLocal: 0,
                                TKCreditLocal: 0,
                                CurrencyRate: 1
                                // Add other fields here...
                            };
                            table.addRow(newRowData);
                            renumberRows();

                        }
                    }


                },
                {
                    title: "Credit",
                    field: "TKCredit",
                    editable: true,
                    width: '10px',
                    bottomCalc: "sum",
                    hozAlign: "right",
                    headerSort: false,
                    movable: false,
                    // bottomCalc: "sum",
                    editor: "input",
                                    formatter: function (cell, formatterParams) {
                                        // Format the Price column as currency
                                        return formatCurrency(cell.getValue());
                                    },
                    cellEditing: function (cell) {

                            if (cell.getData().CurrencyForeignId == 18) {
                                cell.cancelEdit();
                            }
                        var flag = 1;
                        var creditValue = parseFloat(cell.getValue());
                        if (isNaN(creditValue)) { // Check if the value is NaN or empty
                            cell.setValue(0);
                        }
                        var debitValue = cell.getData().TKDebit;
                        if (debitValue > 0) {
                            alert("multiple values are not allowed");
                            cell.setValue(0);
                        }
                        var creditValue = parseFloat(cell.getValue());
                        var accountHeadValue = cell.getData().AccName;
                        if (!accountHeadValue) {
                            alert("Please select a value in the Account Head field first.");
                            cell.setValue(0);
                            table.getRows().filter(function (row) {
                                return row.getPosition() === cell.getRow().getPosition();
                            })[0].getCell("AccName").edit();

                            //return;
                        } else {
                            if (cell.getData().CurrencyForeignId != 18) {
                                var currencyRate = parseFloat(cell.getData().CurrencyRate);
                                var tkCreditLocalValue = creditValue * currencyRate;
                                cell.getRow().update({ TKCreditLocal: tkCreditLocalValue });
                            }
                            // rowData.alertShown = false;
                        }
                    },
                    cellEdited: function (cell) {
                        var debitValue = cell.getData().TKDebit;
                        var creditValue = parseFloat(cell.getValue());
                        if (isNaN(creditValue)) { // Check if the value is NaN or empty
                            cell.setValue(0);
                        }
                        var creditValue = parseFloat(cell.getValue());
                        if (cell.getData().CurrencyForeignId != 18) {
                            var currencyRate = parseFloat(cell.getData().CurrencyRate);
                            var tkCreditLocalValue = creditValue * currencyRate;
                            cell.getRow().update({ TKCreditLocal: tkCreditLocalValue });
                        }

                        if (debitValue + creditValue > 0) {
                            var newRowData = {
                                TKDebit: 0,
                                TKCredit: 0,
                                TKDebitLocal: 0,
                                                TKCreditLocal: 0,
                                                CurrencyRate: 1
                                // Add other fields here...
                            };
                            table.addRow(newRowData);
                            renumberRows();

                        }

                    }



                },


                        {
                            title: "FC",
                            width: '5px',
                            field: "CurrencyForeignId",

                            headerFilter: false,
                             editable: false,
                            editor: customNativeSelect,
                            formatter: function (cell) {

                                var value = cell.getValue();
                                console.log(value);
                                 if (editingModeTrigger == 0) {
                                    if (value !== undefined && value !== null) {
                                        var valueString = value.toString();
                                        for (var i = 0; i < userData.length; i++) {
                                            if (userData[i].LoginName === valueString) {
                                                cell.getElement().dataset.loginName = valueString;
                                                valueString = userData[i].FullName;
                                                break;
                                            }
                                        }
                                        return valueString;
                                    } else {
                                        // Handle the case when 'value' is undefined or null
                                        return "N/A";
                                    }
                                }
                                else {
                                    for (var i = 0; i < userData.length; i++) {

                                        if (userData[i].LoginName === value) {

                                            // Store value to cell dataset
                                            cell.getElement().dataset.loginName = value;
                                            value = userData[i].FullName;

                                            break;
                                        }
                                    }

                                    return value;
                                }

                            }
                        },
                        {
                            title: "Rate",
                            field: "CurrencyRate",
                            editable: true,
                            // visible:false,
                            width: '5px',
                            hozAlign: "right",
                            movable: false,
                            headerSort: false,
                            editor: "input",
                            cellEdited: function (cell) {
                                
                                //if (cell.getData().CurrencyForeignId == 18) {
                                //    cell.setValue(1);
                                //}
                                var currencyRate = parseFloat(cell.getValue());


                                if (cell.getData().CurrencyForeignId != DefaultCurrencyId) {
                                    var debitValue = parseFloat(cell.getData().TKDebit);
                                    var creditValue = parseFloat(cell.getData().TKCredit);
                                    var tkDebitLocalValue = debitValue * currencyRate;
                                    var tKCreditLocalValue = creditValue * currencyRate;
                                    cell.getRow().update({ TKDebitLocal: tkDebitLocalValue, TKCreditLocal: tKCreditLocalValue });
                                }
                                        else if (cell.getData().CurrencyForeignId == DefaultCurrencyId) {
                                    var TKDebitLocal = parseFloat(cell.getData().TKDebitLocal);
                                    var TKCreditLocal = parseFloat(cell.getData().TKCreditLocal);

                                    // var tkDebit = TKDebitLocal / currencyRate;
                                    // var tKCredit = TKCreditLocal / currencyRate;

                                     if (currencyRate > 0) {
                                        var tkDebit = TKDebitLocal / currencyRate;
                                        var tKCredit = TKCreditLocal / currencyRate;
                                    } else {
                                        // If currencyRate is 0, set tkDebit and tKCredit to 0
                                        var tkDebit = 0;
                                        var tKCredit = 0;
                                    }

                                    cell.getRow().update({ TKDebit: tkDebit, TKCredit: tKCredit, CurrencyRate: 1 });
                                }



                            },

                        },
                        {
                            title: "Debit",
                            field: "TKDebitLocal",
                            editable: true,
                            // visible:false,
                            headerSort: false,
                            width: '10px',
                            hozAlign: "right",
                            movable: false,
                            bottomCalc: "sum",
                            editor: "input",
                            cellEditing: function (cell) {
                                var debitValuelocal = parseFloat(cell.getValue());
                                if (isNaN(debitValuelocal)) { 
                                    cell.setValue(0);
                                }
                                var accountHeadValue = cell.getData().AccName;
                                if (!accountHeadValue) {
                                    alert("Please select a value in the Account Head field first.");
                                    cell.setValue(0);
                                    table.getRows().filter(function (row) {
                                        return row.getPosition() === cell.getRow().getPosition();
                                    })[0].getCell("AccName").edit();

                                    //return;
                                }
                                if (cell.getData().CurrencyForeignId != 18) {
                                    cell.cancelEdit();
                                }
                            },
                            cellEdited: function (cell) {
                                if (cell.getData().CurrencyForeignId == 18) {
                                    var debitValuelocal = parseFloat(cell.getValue());
                                    if (isNaN(debitValuelocal)) {
                                        cell.setValue(0);
                                    }
                                    var currencyRate = parseFloat(cell.getData().CurrencyRate);

                                    cell.getRow().update({ TKDebit: formatCurrency(tkDebit) });

                                     if (currencyRate > 0) 
                                     {
                                                var tkDebit = (isNaN(debitValuelocal / currencyRate) ? 0 : debitValuelocal / currencyRate);
                                                cell.getRow().update({ TKDebit: formatCurrency(tkDebit) });

                                     } 
                                     else {
                                          cell.getRow().update({ TKDebit: 0 });                                     
                                     }

                                    
                                }
                                else {
                                    cell.cancelEdit();
                                }


                            }
                        },
                        {
                            title: "Credit",
                            field: "TKCreditLocal",
                            editable: true,
                            headerSort: false,
                            // visible:false,
                            width: '10px',
                            hozAlign: "right",
                            movable: false,
                            bottomCalc: "sum",
                            editor: "input",
                            cellEditing: function (cell) {
                                var creditValuelocal = parseFloat(cell.getValue());
                                if (isNaN(creditValuelocal)) { // Check if the value is NaN or empty
                                    cell.setValue(0);
                                }
                                var accountHeadValue = cell.getData().AccName;
                                if (!accountHeadValue) {
                                    alert("Please select a value in the Account Head field first.");
                                    cell.setValue(0);
                                    table.getRows().filter(function (row) {
                                        return row.getPosition() === cell.getRow().getPosition();
                                    })[0].getCell("AccName").edit();

                                    //return;
                                }
                                if (cell.getData().CurrencyForeignId != 18) {
                                    cell.cancelEdit();
                                }
                            },
                            cellEdited: function (cell) {
                                if (cell.getData().CurrencyForeignId == 18) {
                                    var creditValuelocal = parseFloat(cell.getValue());
                                    var currencyRate = parseFloat(cell.getData().CurrencyRate);
                                   // var tkCredit = creditValuelocal / currencyRate;

                                   cell.getRow().update({ TKCredit: formatCurrency(tkCredit) });

                                     if(currencyRate > 0) 
                                     {
                                                var tkCredit = creditValuelocal / currencyRate;
                                                if (isNaN(tkCredit) || tkCredit == null) {
                                                    tkCredit = 0;
                                                }
                                                cell.getRow().update({ TKCredit: formatCurrency(tkCredit) });

                                     } 
                                     else
                                     {                                   
                                          cell.getRow().update({ TKCredit: 0 });
                                     }

                                    
                                }

                            }
                        },

                        {
                            title: "",
                            field: "Delete",
                            movable: false,

                            formatter: function (cell, formatterParams) {
                                return "<i class='fas fa-trash-alt delete-icon'></i>";
                            },
                            width: 30,
                            headerSort: false,
                            cellClick: function (e, cell) {
                                var rowData = cell.getRow().getData();
                                var row = cell.getRow();
                                deleteRow(row);


                            }
                        }

                    ],


                    movableRows: true,
                    movableColumns: true,

                    responsiveLayout: true

                });


                    }
                       else if(isMultiCurrency == 1 && selectedValue==DefaultCurrencyId){

                           table.hideColumn("CurrencyForeignId");
                        table.hideColumn("CurrencyRate");
                            table.hideColumn("TKDebitLocal");
                            table.hideColumn("TKCreditLocal");
                        }

              });






            ////////////////// ****** editing mode ********//////////////
            var parent = [];
            var tabulatorData = [];
            function getVoucher(id) {
                //alert("voucher");
                return $.ajax({
                    type: 'GET',
                    datatype: "Json",
                    /* url: "../Accounts/GetVoucher",*/
                    url: "@Url.Action("GetVoucher", "Accounts")",
                    data: { "VoucherId": id, isCopy: @ViewBag.IsCopy }
                });
            }
           

            var VoucherIddata = $("#BtnSave").attr("data-voucher-Id");
            //alert(VoucherIddata);
            if (VoucherIddata > 0) {

                var button = document.getElementById("unknown");
                var button1 = document.getElementById("unknown1");
                button1.style.display = "inline-block";
                button.style.display = "none";
                button.value = "New";
                button.classList.remove("btn-warning"); // Remove the orange color class
                button.classList.add("btn-danger"); // Add the red color class
                button.onclick = function () {
                    var link = $(this).attr("href");

                };


                $.when(getVoucher(VoucherIddata)).then(function (response) {

                    if (response.Success == 0) {
                        //alert(res.ex);
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-red",
                        });

                        setTimeout(function () {
                            window.location.href = '@Url.Action("VoucherListQB", "Accounts")';
                        }, 1000);

                        return true;
                    }
                    //alert("aa");
                    //console.log("sss",res);

                    parent = response.voucher;
                    res = response.voucher;
                    console.log(res);
                    tabulatorData = res.VoucherSubs;
                    sampletableData = res.VoucherSubs;
                    for (var i = 0; i < tabulatorData.length; i++) {
                        // if(tabulatorData[i].CurrencyForeignId)
                    }
                    editingModeTrigger = 0;
                    console.log(tabulatorData);
                    //table.setData(tabulatorData);

                    if (@ViewBag.IsCopy == "2") {
                        //let idGencopy = new Generator();
                        $("#BtnSave").attr("data-voucher-Id", "0");
                        $('#VoucherNo').val("Auto Generated");
                        //$('#VoucherDate').val(ret);
                    }
                    else {
                        $("#VoucherNo").val(res.VoucherNo);

                    }

                    // $('#jsFilterGrid').hide();

                    $("#jsGridItems").jsGrid({
                        data: res.VoucherSubs
                    })

                    var $tagInput = $("#MultiTags");

                    var values = res.VoucherTagsList;
                    // Iterate over each value and add it as a tag
                    $.each(values, function (i, value) {
                        console.log(value, i);
                        $tagInput.tagsinput('add', value.tag);
                    });

                    //console.log(res.VoucherSubs.filter(item => item.SRowNo === '-1'));




                    $("#Id").val(res.Id);
                    $("#VoucherDate").val(res.VoucherDate);
                    initializeFiscalMonthForEdit(res.VoucherDate, res.FiscalMonthId);
                    
                    $("#Referance").val(res.Referance);

                    //alert(res.AccountMainId);
                    $("#AccountMainId").val(res.AccountMainId).change();
                    LedgerBalance(res.AccountMainId);

                    $("#VoucherTypeId").val(res.VoucherTypeId);
                    $("#VoucherDesc").val(res.VoucherDesc);
                    $("#location").val(res.WarehouseId);
                    $("#VoucherFilePath").val(res.FilePath);
                    console.log(res.FilePath);

                    console.log("tabulatorData::", tabulatorData);

                    $("#VoucherSerialId").val(res.VoucherSerialId);
                    $("#vAmountInWords").val(res.vAmountInWords);
                    $("#LuserId").val(res.LuserId);
                    $("#ComId").val(res.ComId);
                    $("#CreateDate").val(res.CreateDate);

                    $('#CurrencyRate').val(res.MasterCurrencyRate);
                    $('#MultiiCurrencyId').val(res.CurrencyId);

                    console.log('at before');
                    console.log(table.getData());
                    var selectedValue;
                   // $('#CountryId').val(res.CountryId).change();

                    if(res.CountryId==18){
                        console.log(res.CountryId);
                         $('#CountryId').val(res.CountryId).change();
                          table.setData(tabulatorData);
                    }

                    else {
                       console.log(res.CountryId);
                       var selectedValue=res.CountryId;
                        $('#CountryId').val(res.CountryId).change();
                //       $('#CountryId').val(res.CountryId).change(function(){
                //          // table.setData(tabulatorData);
                //if(isMultiCurrency == 1 && selectedValue != DefaultCurrencyId){
                if(false){

                  table = new Tabulator("#tabulatorGrid", {
                    height: "auto",
                    layout: "fitColumns",
                    headerSort: false,
                    data: tabulatorData,
                      columns: [
                          {
                              headerSort: false,
                              field: "drag",
                              frozen: true,
                              formatter: function (cell, formatterParams) {
                                  return "<i class='fas fa-bars drag-icon'></i>";
                              },
                              width: 30,
                              headerSort: false,
                              rowHandle: true,


                          },
                          { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '5px', bottomCalc: "count", hozAlign: "right" },
                          {
                              title: "CATEGORY",
                              field: "AccName",
                              frozen: true,
                              editable: true,
                              headerSort: false,
                              width: '30px',

                              formatter: "html",
                              editor: categoryEditor,
                              editorParams: {
                                  listOnEmpty: true,
                                  autocomplete: true,
                              }
                          },





                          { title: "AccCategory", field: "AccountCategory", movable: false, headerSort: false, visible: false },
                          { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                          { title: "Account Id", field: "AccId", movable: false, headerSort: false, visible: false },
                          { title: "Name", field: "Name", editor: "input", headerSort: false, editable: true, movable: false, visible: false },


                          { title: "DESCRIPTION", field: "Note1", headerSort: false, editor: "input", movable: false, editable: true, width: '20px', },
                          {
                              title: "AMOUNT",
                              field: "Amount",
                              editable: true,
                              hozAlign: "right",
                              width: '10px',
                              headerSort: false,
                              bottomCalc: "sum",
                              movable: false,
                              // bottomCalc: "sum",
                              editor: "input",
                          },
                          {
                              title: "BILLABLE",
                              field: "IsBillable",
                              editable: true,
                              width: '10px',
                              bottomCalc: "sum",
                              hozAlign: "right",
                              headerSort: false,
                              movable: false,
                              // bottomCalc: "sum",
                              /*       editor: "input",*/
                              formatter: "tickCross",
                          },
                          {
                              title: "TAX",
                              field: "IsTax",
                              editable: true,
                              width: '10px',
                              bottomCalc: "sum",
                              hozAlign: "right",
                              headerSort: false,
                              movable: false,
                              // bottomCalc: "sum",
                              //editor: "input",
                              formatter: "tickCross",
                          },
                          { title: "Customer Id", field: "CustomerId", movable: false, headerSort: false, visible: false },
                          {
                              title: "CUSTOMER",
                              field: "Name",
                              frozen: false,
                              editable: true,
                              headerSort: false,
                              width: '30px',

                              formatter: "html",
                              //editor: customerEditor,
                              editorParams: {
                                  listOnEmpty: true,
                                  autocomplete: true,
                              },
                          },],


                    movableRows: true,
                    movableColumns: true,

                    responsiveLayout: true

                });


                    }

                       else if(isMultiCurrency == 1 && selectedValue==DefaultCurrencyId){
                      // alert('what');

                           table.hideColumn("CurrencyForeignId");
                        table.hideColumn("CurrencyRate");
                            table.hideColumn("TKDebitLocal");
                            table.hideColumn("TKCreditLocal");
                        }


                //         });

                    }

                    console.log(table);

                    console.log('at now');
                    console.log(table.getData());
                    console.log(tabulatorData);

                    //alert(res.VAmount);
                    $("#VAmount").val(res.VAmount);
                    $("#VAmount").text(res.VAmount);

                    // if (document.getElementById("VoucherFilePath").value !== "") {
                    //     $('#pdf-iframe').toggleClass("d-none");
                    //     $('#view-image-or-pdf').toggleClass("d-none");
                    //     $('#remove-image-or-pdf').toggleClass("d-none");
                    // }
                    // console.log("res.FilePath::", "../" + res.FilePath);
                    // $('#pdf-iframe').attr('src', "../" + res.FilePath);
                    // //$('#pdf-iframe').attr('src', res.FilePath);
                    // $('#pdf-iframe').on('load', function () {
                    //     $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                    //     $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                    // });
                    // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                    //     var url = res.FilePath;
                    //     window.open(url, '_blank');
                    // });
                    //$("#ConvRate").val(res.ConvRate);
                    //$("#CreateDate").val(res.CreateDate);

                    var fileNames = res.FilePath ? res.FilePath.split(';') : [];

                        var fileContainer = $('#file-container');

                        // Clear any existing elements
                        fileContainer.empty();

                        fileNames.forEach(function (fileName, index) {
                            if (fileName) {
                                // Determine file type based on extension
                                var fileType = getFileType(fileName);
                            var fileName2 = fileName.split('/').pop();

                            var actualFileName = fileName2.match(/[^_]+$/)[0];
                                // Wrapper div
                                var fileWrapper = $('<div>', {
                                    class: 'file-wrapper col-md-2',
                                    css: {
                                        position: 'relative',
                                        marginBottom: '20px' // space between files
                                    }
                                });

                                // Create iframe for PDF and Excel files
                                var iframe;
                                if (fileType === 'pdf' || fileType === 'excel') {
                                    iframe = $('<iframe>', {
                                        id: 'pdf-iframe-' + index,
                                        class: 'file-iframe',
                                        css: {
                                            width: '100%',
                                            height: '0',
                                            border: '1px solid #ccc',
                                            overflow: 'hidden'
                                        },
                                        //src: "../" + fileName
                                    });

                                    // Display filename as text overlay
                                    var filenameOverlay = $('<div>', {
                                        class: 'filename-overlay',
                                        css: {
                                            position: 'absolute',
                                            top: '0',
                                            left: '0',
                                            width: '100%',
                                            background: 'rgba(0, 0, 0, 0.5)',
                                            color: '#fff',
                                            padding: '5px',
                                            boxSizing: 'border-box',
                                            zIndex: '5'
                                        },
                                        text: fileName.split('/').pop() // Extract filename from path
                                    });

                                    // Append filename overlay to iframe container
                                    iframe.append(filenameOverlay);
                                } else if (fileType === 'image') {
                                    // Create img element for image files
                                    iframe = $('<img>', {
                                        class: 'file-img',
                                        css: {
                                            width: '100%',
                                            height: 'auto',
                                            border: '1px solid #ccc',
                                            objectFit: 'contain' // Adjust as needed for image display
                                        },
                                        src: "../" + fileName
                                    });
                                } else {
                                    // Handle unknown file types (optional)
                                    console.log("Unknown file type for fileName: " + fileName);
                                    return; // Skip processing this file
                                }

                                // Create download button for PDF and Excel files
                                var downloadButton;
                                if (fileType === 'pdf' || fileType === 'excel') {
                                    downloadButton = $('<a>', {
                                        class: 'btn btn-primary btn-sm download-button',
                                        text: actualFileName,
                                        href: "../" + fileName,
                                        download: fileName.split('/').pop() // Extract filename for download
                                    });
                                }

                                // Create remove button
                                var removeButton = $('<button>', {
                                    class: 'btn btn-danger btn-sm remove-button',
                                    text: 'X',
                                    css: {
                                        position: 'absolute',
                                        top: '5px',
                                        right: '5px',
                                        zIndex: 10
                                    },
                                    click: function () {
                                        $('#confirmDeleteModal').modal('show');

                                        // Handle click on confirmation button
                                        $('#confirmDeleteBtn').on('click', function () {
                                            // Close modal
                                            $('#confirmDeleteModal').modal('hide');
                                            fileWrapper.remove();
                                            deleteFile(fileName);
                                        });
                                    }
                                });

                                // Append iframe (or img) and buttons to the wrapper
                                fileWrapper.append(iframe);
                                fileWrapper.append(removeButton);
                                if (downloadButton) {
                                    fileWrapper.append(downloadButton);
                                }

                                // Append the wrapper to the container
                                fileContainer.append(fileWrapper);

                                // Show initial elements if necessary
                                if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                    iframe.removeClass('d-none');
                                    removeButton.removeClass('d-none');
                                    if (downloadButton) {
                                        downloadButton.removeClass('d-none');
                                    }
                                }
                            }
                        });

                    calculation();

                    GetCultureInfo();


                    //var value = new Date(res.SalesDate);

                    //var ret = value.getDate() + "-" + months[value.getMonth()] + "-" + value.getFullYear(); //value.getMonth() + 1 + "/" + value.getDate() + "/" + value.getFullYear();




                    //$("#CreateDate").val(res.CreateDate);
                    //$("#LuserId").val(res.LuserId);
                    //$("#OrderId").val(res.OrderId);

                }).fail(function (err) {
                    console.log(err);
                });
            }


            else {

                var button = document.getElementById("unknown");
                var button1 = document.getElementById("unknown1");

                button.style.display = "inline-block";
                button.value = "Reset";
                button.classList.remove("btn-danger"); // Remove the red color class
                button.classList.add("btn-warning");
                button.onclick = function () {
                    window.location.reload();
                };

            }


            ///////////////////////// **** editing mode end **** /////////////


            ///////////////////////*********** GRID SECTION **********////////////
            $("#flexSwitchCheckChecked").click(function () {
                // $('select').select2();
                $('#jsFilterGrid').toggle();


            });

            function initializeFiscalMonthForEdit(date, FiscalMonthId) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetFiscalMonthDateWise", "Accounts")',
                    data: { fiscalDate: date },
                    datatype: "Json",
                    success: function (data) {

                        if (data.length > 1) {
                            $("#FiscalMonthDiv").removeClass('d-none');
                        }
                        else {
                            $("#FiscalMonthDiv").addClass('d-none');
                        }
                        $('#FiscalMonthId').empty();
                        $.each(data, function (index, value) {
                            $('#FiscalMonthId').append('<option value="' + value.Id + '" >' + value.MonthName + '</option>');
                        });
                        console.log($('#FiscalMonthId').val());
                        $("#FiscalMonthId").val(FiscalMonthId).trigger('change');
                    }
                });
            }

            $('#jsFilterGrid').hide();
            var filterSearchUrl = '@Url.Action("GetCOAList", "Admin")';

            var filterSearchDb = {
                loadData: function (filter) {

                    var d = $.Deferred();
                    $.ajax({
                        type: "GET",
                        url: filterSearchUrl,

                        data: { AccType: "L", searchquery: JSON.stringify(filter) },
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    })
                        .done(function (result) {

                            d.resolve(result);


                        });
                    return d.promise().then(function (q) {

                        //console.log(q);
                        return {

                            data: q.AccountHeadList,
                            itemsCount: parseInt(q.PageInfo.TotalRecordCount)
                        }
                    });

                }

            }








            //   function customCurrencyEditor(cell, onRendered, success, cancel, editorParams) {
            //    var select = document.createElement("select");
            //    select.style.display = "none";

            //    $.ajax({
            //        method: "get",
            //        url: '@Url.Action("GetCurrencyDropdown", "Admin")',
            //        success: function (data) {
            //            for (var i = 0; i < data.length; i++) {
            //                const option = document.createElement('option');
            //                option.value = data[i].Value;
            //                option.text = data[i].Text;
            //                select.appendChild(option);
            //            }

            //            select.addEventListener("change", function () {
            //                cell.setValue(select.options[select.selectedIndex].text); // Set the selected text as the cell value
            //                success(select.value);
            //                select.style.display = "none";
            //            });

            //            select.addEventListener("blur", function () {
            //                cancel();
            //                select.style.display = "none";
            //            });

            //            cell.getElement().addEventListener("click", function () {
            //                select.style.display = "block";
            //                select.focus();
            //            });

            //            cell.getElement().appendChild(select);
            //        }
            //    });
            //}

            var customNativeSelect = function (cell, onRendered, success, cancel) {
                var cellRealValue = cell.getElement().dataset.loginName;
                cellRealValue = (typeof cellRealValue === "undefined") ? "none" : cellRealValue;

                // Create and append select list
                var selectList = document.createElement("select");

                selectList.style.width = "100%";
                selectList.style.boxSizing = "border-box";

                // Populate select options
                for (var i = 0; i < userData.length; i++) {
                    var option = document.createElement("option");
                    option.value = userData[i].LoginName.toString();
                    option.text = userData[i].FullName;
                    if (userData[i].LoginName === parseInt(cellRealValue)) {
                        option.selected = "selected";
                    }
                    selectList.appendChild(option);
                }

                // Attach event listeners
                onRendered(function () {
                    selectList.focus();
                    selectList.style.height = "100%";
                });

                selectList.addEventListener("blur", function () {
                    onChange();
                });

                selectList.addEventListener("keydown", function (e) {
                    if (e.keyCode === 13) {
                        onChange();
                    }
                    if (e.keyCode === 27) {
                        cancel();
                    }
                });

                function onChange() {
                    if (selectList.selectedOptions[0].value !== cellRealValue) {
                        success(selectList.selectedOptions[0].value);
                        alert("Here is what the actual looks like: " + JSON.stringify(cell.getTable().getData()));
                    } else {
                        cancel();
                    }
                }

                return selectList;
            };


            var userData = [
                {
                    "FullName": "",
                    "LoginName": "none"
                }, {
                    "FullName": "AED",
                    "LoginName": "229"
                }, {
                    "FullName": "BDT",
                    "LoginName": "18"
                }, {
                    "FullName": "OMR",
                    "LoginName": "165"
                }, {
                    "FullName": "USD",
                    "LoginName": "231"
                }
                
            ];


            setTimeout(function () {
                table.redraw();
            }, 10);



            table.on("rowClick", function (e, row) {
                var clickedRowData = row.getData();

                // Iterate through all rows and update data except the clicked row
                table.getRows().forEach(function (rowToUpdate) {
                    if (rowToUpdate !== row) {
                        var rowDataToUpdate = rowToUpdate.getData();

                        // Update the data for rows other than the clicked row
                        // For example, you can copy properties from the clicked row's data
                        rowDataToUpdate.property1 = clickedRowData.property1;
                        rowDataToUpdate.property2 = clickedRowData.property2;

                        // Call the update method to refresh the row with updated data
                        rowToUpdate.update(rowDataToUpdate);
                    }
                });
            });

            var controlSignal = 0;
            var serial = 0;
            $("#jsFilterGrid").jsGrid({

                width: "100%",
                height: 'auto',
                filtering: true,
                autoload: true,
                pageSize: 5,
                pageLoading: true,
                pageIndex: 1,
                paging: true,
                controller: filterSearchDb,
                fields: [

                    { name: "AccType", title: 'Type', type: "text", width: 220, visible: false },
                    { name: "AccountCategory", title: 'Category', type: "text" },
                    { name: "AccCode", title: 'Code', type: "text" },
                    { name: "AccName", title: 'Account Head', type: "text" },
                    { name: "ParentName", title: 'Group Head', type: "text" },
                    { name: "AccountBalance", title: 'Balance', type: "text" }
                    // { name: "Currency", title: 'Currency', type: "text" },



                ],
                rowDoubleClick: function (args) {

                    var args = args.item;
                    console.log('args.....?/////');
                    console.log(args);
                    var parentValue = $('#jsGridItems').jsGrid('option', 'data');
                    serial = parentValue.length + 1;

                    // console.log(renumberRows());
                    controlSignal = 1;
                    Entry(args, serial);

                }
            })
            function Entry(args, serial) {



                if ($('#VoucherTypeId').val() == 5 || $('#VoucherTypeId').val() == 6) {

                    var newData = {

                        "CurrencyId": '18',
                        "CurrencyForeignId": '18',
                        "AccId": args.Id,
                        //"DisplayName": "<b>" + Name + "</b>" + "-" + productCode + "<br>" + "<i><p style='font-size:11px; margin-bottom:0px'>" + CategoryName + Color + Size + Brand + "</p></i>",
                        "AccName": args.AccName,//args.item.Description,
                        "EmpId": 0,
                        "Note1": " ",
                        "Note2": " ",
                        // "account":'1',
                        "CustomerId": 0,
                        "SupplierId": 0,
                        "TKDebit": 0.00,
                        "TKDebitLocal": 0.00,
                        "TKCredit": 0.00,
                        "TKCreditLocal": 0.00,
                        "CurrencyRate": 1,
                    }
                }
                else {

                    var newData = {

                        "CurrencyId": '18',
                        "CurrencyForeignId": '18',
                        "AccId": args.Id,
                        //"DisplayName": "<b>" + Name + "</b>" + "-" + productCode + "<br>" + "<i><p style='font-size:11px; margin-bottom:0px'>" + CategoryName + Color + Size + Brand + "</p></i>",
                        "AccName": args.AccName,//args.item.Description,
                        "EmpId": 0,
                        "Note1": " ",
                        "Note2": " ",
                        // "account":'1',
                        "CustomerId": 0,
                        "SupplierId": 0,
                        "TKDebit": 0.00,
                        "TKDebitLocal": 0.00,
                        "TKCredit": 0.00,
                        "TKCreditLocal": 0.00,
                        "CurrencyRate": 1,
                    }
                }

                //$("#jsGridItems").jsGrid("insertItem", newData).done(function () {

                //    //  $(".jsgrid-update-button").trigger( "click" );
                //    // toastr.success('Items Added..');
                //    $("#jsGridItems").jsGrid("editItem", newData);

                //});

                table.addRow(newData);
                renumberRows();
                console.log(table);

            }

            ///////////////////////////// ****filterGrid ends****////////////////

            function VoucherTypeName() {

                if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {
                    table.toggleColumn("TKDebit", true);
                    table.toggleColumn("TKCredit", false);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", true);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", false);

                }
                else if ($('#VoucherTypeId').val() == 2 || $('#VoucherTypeId').val() == 4) {
                    table.toggleColumn("TKDebit", false);
                    table.toggleColumn("TKCredit", true);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", false);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", true);
                }

                else if ($('#VoucherTypeId').val() == 5 || $('#VoucherTypeId').val() == 6) {
                    table.toggleColumn("TKDebit", true);
                    table.toggleColumn("TKCredit", true);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", true);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", true);

                }


                else {
                    table.toggleColumn("TKDebit", true);
                    table.toggleColumn("TKCredit", false);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", true);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", false);
                }





                if (isMultiDebitCredit == true) {
                    table.toggleColumn("TKDebit", true);
                    table.toggleColumn("TKCredit", true);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", true);
                    //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", true);
                }

            }

            ////////////////////////////// ********JsGridItems grid ********////////
            var autocompleteId = 0;
            var autoCompleteField = function (config) {
                jsGrid.Field.call(this, config);
            };

            autoCompleteField.prototype = new jsGrid.Field({


                itemTemplate: function (value) {


                    return value;
                },

                _createSelect: function (selected, callback) {

                    var $input = $("<input>").attr("type", "text").attr("name", this.name).attr('autocomplete', 'off').autocomplete({

                        source: function (request, response) {
                            console.log(request.term);
                            $.ajax({
                                url: "@Url.Action("GetCOAList", "Admin")",
                                dataType: "json",
                                data: {
                                    dropdownSearch: request.term,
                                    type: "public",
                                    pageSize: 5,
                                    minimumInputLength: 0
                                },
                                success: function (data) {
                                    var results = [];
                                    var categoryNames = $.unique($.map(data.AccountHeadList, function (item) {
                                        return item.AccName;
                                    }));

                                    $.each(categoryNames, function (index, categoryName) {
                                        var group = {
                                            label: categoryName,
                                            children: []
                                        };

                                        group.children = $.grep(data.AccountHeadList, function (item) {
                                            return item.AccName == group.label;
                                        });

                                        group.children = $.map(group.children, function (item) {
                                            console.log(item);
                                            return {
                                                label: item.AccName + ' - ' + item.AccCode,
                                                value: item.Id,

                                            };
                                        });

                                        results.push(group);
                                    });

                                    response(results);
                                }
                            });
                        },
                        select: function (event, ui) {
                            // var selectedId = ui;
                            // console.log(ui);
                            if (ui.item.children) {
                                autocompleteId = ui.item.children[0].value;
                                //countryIDfunc(countryId);
                                console.log(ui.item.children);
                                return true;
                            } else {
                                // handle selection of item here
                            }
                        },
                        focus: function (event, ui) {
                            if (ui.item.children) {
                                return true;
                            } else {
                                // handle focus on item here
                            }
                        },

                        minLength: 0,
                        autoFocus: true,
                        allowCustomValue: false,
                        delay: 0,
                        //cacheLength: 0,
                        open: function () {
                            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        },
                        close: function () {
                            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                        },
                        change: function (event, ui) {
                            if (ui.item === null) {
                                $(this).val('');
                                autocompleteId = 0;
                                //  $('#field_id').val('');
                            }
                        },
                        create: function () {
                            $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                                if (item.children) {

                                    return $("<li><table style='font-size:11px;' class='table table-sm table-bordered'><thead><tr><th style='width:30%;' scope='col'> " + item.label + " </th></tr></thead></table></li>")
                                        .data("ui-autocomplete-item", item)
                                        .appendTo(ul);
                                } else {
                                    return $("<li><table style='font-size:10px;' class='table table-sm table-bordered'><tbody><tr><td style='width:30%;'><i class='p-0 m-0'> &nbsp;" + item.label + "</i></td></tr><tbody></table></li>")
                                        .data("ui-autocomplete-item", item)
                                        .appendTo(ul);
                                }
                            };
                        }


                    }).focus(function () {
                        $(this).autocomplete("search", $(this).val());
                        $(this).select();


                    });

                    // Set the value of the input element to the current field value
                    $input.val(selected);
                    //$input.click(function () {
                    //    if ($input.val().length === 0) {
                    //        $input.autocomplete("search", "");
                    //    }
                    //});   ///// fahad

                    return $input;
                },

                insertTemplate: function () {
                    var insertControl = this._insertControl = this._createSelect(null, function (id) {

                        insertControl.val(id);
                    });

                    return insertControl;
                },

                editTemplate: function (value) {
                    var editControl = this._editControl = this._createSelect(value, function (id) {
                        editControl.val(id);
                    });

                    return editControl;
                },

                insertValue: function () {
                    return this._insertControl.val();
                },

                editValue: function () {
                    return this._editControl.val();
                }

            });

            jsGrid.fields.autocomplete = jsGrid.autoCompleteField = autoCompleteField;
            $('select').select2();

            let currentActiveInput = null;

            function categoryEditor(cell, onRendered, success, cancel, editorParams) {

                var selected = cell.getValue();
                if (typeof selected === "undefined") {
                    selected = null;
                }

                // Handle the null value and set an empty string
                if (selected === null) {
                    selected = "";
                }
                var arrowIcon = document.createElement("span");
                arrowIcon.innerHTML = '<i class="fas fa-chevron-down"></i>';
                arrowIcon.className = "arrow-icon";
                //arrowIcon.style.position = "absolute";
                //arrowIcon.style.right = "5px";
                //arrowIcon.style.top = "70%";
                //arrowIcon.style.transform = "translateY(-50%)";
                arrowIcon.style.cursor = "pointer";
                arrowIcon.style.fontWeight = "bold";

                // Update the CSS to vertically align the text and the arrow icon
                var inputContainer = document.createElement("div");
                //inputContainer.style.position = "relative";
                inputContainer.style.display = "flex";
                inputContainer.style.alignItems = "center";

                var input = document.createElement("input");
                input.type = "text";
                input.setAttribute("name", cell.getField());
                input.setAttribute("autocomplete", "off");
                input.style.flex = "1"; // Take up the remaining space in the container

                inputContainer.appendChild(input);
                inputContainer.appendChild(arrowIcon);

                arrowIcon.addEventListener("click", function () {
                    $(input).autocomplete("search", $(input).val());
                    $(input).select();
                });
                         onRendered(function () {
        $(input).autocomplete("search", $(input).val());
                    });
                input.addEventListener("focus", function () {
                    currentActiveInput = this;
                    // Add keydown event listener to the input field to prevent default behavior of arrow keys
                    this.addEventListener("keydown", function (e) {
                        if (e.keyCode === 40 || e.keyCode === 38) {
                            e.preventDefault();
                        }
                    });
                });

                $(input).autocomplete({

                    source: function (request, response) {

                        setTimeout(function () {
                            console.log(request.term);
                            $.ajax({
                                url: "@Url.Action("GetCOAList", "Admin")",
                                dataType: "json",
                                data: {
                                    dropdownSearch: request.term,
                                    type: "public",
                                    pageSize: 5,
                                    minimumInputLength: 0
                                },
                                success: function (data) {
                                    console.log("auto:", data);
                                    var results = [];
                                    var categoryNames = $.unique($.map(data.AccountHeadList, function (item) {
                                        return item.AccName;
                                    }));

                                    $.each(categoryNames, function (index, categoryName) {

                                        var group = {
                                            label: categoryName,
                                            children: []
                                        };

                                        group.children = $.grep(data.AccountHeadList, function (item) {
                                            return item.AccName == group.label;
                                        });

                                        group.children = $.map(group.children, function (item) {

                                            //currencyrate='';

                                            //currencyId=item.CurrencyShortName;
                                            return {
                                                label: item,
                                                // label: item.AccName + ' - ' + item.AccCode + '  -----  ' + item.AccountCategory+ ',' + item.AccountBalance,
                                                value: item.Id,

                                            };
                                        });

                                        results.push(group);
                                    });

                                    response(results);
                                }
                            });

                        }, 200);

                    },
                    select: function (event, ui) {
                        // var selectedId = ui;
                        // console.log(ui);
                        if (ui.item.children) {

                            autocompleteId = ui.item.children[0].value;
                            console.log("abc",ui.item.children);
                            var checkCurrencyId = ui.item.children[0].label.CurrencyId;
                            if (checkCurrencyId == null) {
                                currencyId = DefaultCurrencyId;
                            }
                            else {
                                currencyId = ui.item.children[0].label.CurrencyId.toString();
                            }
                            //currencyId = ui.item.children[0].label.CurrencyId.toString();
                            if (currencyId==DefaultCurrencyId){
                                currencyrate = ui.item.children[0].label.CurrencyRate;
                            }else{
                                currencyrate = $("#CurrencyRate").val();
                            }
                            
                            AccountCategory = ui.item.children[0].label.AccountCategory;

                            // currencyrate=item.CurrencyRate; ui.item.children[0].value

                            // currencyId=item.CurrencyId.toString();
                            var currencyRateField = "CurrencyRate"; // Replace with the actual field name
                            var currencyRateValue = currencyrate;
                            var CurrencyForeignId = "CurrencyForeignId"; // Replace with the actual field name
                            var CurrencyIdvalue = currencyId;

                            var accIdField = "AccId";
                            var accIdValue = autocompleteId; /* Get the corresponding AccId based on the selected AccName */
                            var row = cell.getRow();
                            row.update({ [accIdField]: accIdValue, [currencyRateField]: currencyRateValue, [CurrencyForeignId]: CurrencyIdvalue, AccountCategory: AccountCategory });
                            console.log(row);
                            success(ui.item.value);
                        } else {
                            // handle selection of item here
                        }
                    },
                    focus: function (event, ui) {
                        if (ui.item.children) {
                            return true;
                        } else {
                            // handle focus on item here
                        }
                    },

                    minLength: 0,
                    autoFocus: true,
                    allowCustomValue: false,
                    delay: 0,
                    //cacheLength: 0,
                    open: function () {
                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    },
                    close: function () {
                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                         cancel();
                    },
                    change: function (event, ui) {
                        if (ui.item === null) {
                            $(this).val('');
                            autocompleteId = 0;
                            //  $('#field_id').val('');
                        }
                    },
                    create: function () {
                        $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                            var trs = '';

                            //if (item.children) {

                            //    return $("<li><table style='font-size:12px;' class='table table-sm table-bordered'><thead><tr><th style='width:10%;height:30%;' scope='col'> " + item.children[0].label+" </th></tr></thead></table></li>")
                            //        .data("ui-autocomplete-item", item)
                            //        .appendTo(ul);
                            //} else {
                            //    return $("<li><table style='font-size:12px;' class='table table-sm table-bordered'><tbody><tr><td style='width:10%;height:30%;'><i class='p-0 m-0'> &nbsp;" +  item.children[0].label+"</i></td></tr><tbody></table></li>")
                            //        .data("ui-autocomplete-item", item)
                            //        .appendTo(ul);
                            //}
                            if (item) {
                                trs = '<p class="text-sm-left" style="font-size:12px"> Category : '; // Remove the font-italic class from here
                                $.each($(item), function (key, value) {


                                    // Determine the balance value
                                    const balance = value.children[0].label.AccountBalance;

                                    // Add class based on balance value
                                    const balanceClass = balance <= 0 ? 'red-text' : 'green-text';

                                    // Append the entire category text with the corresponding class (including the italic style)
                                    trs += '<span class="italic-text">[ ' + value.children[0].label.AccName + ' - ' + value.children[0].label.AccountCategory + ' ]</span>   - <span class="' + balanceClass + '">Balance :' + balance + '</span>  ';
                                })
                                trs += '</p>';
                            }




                            return $("<li>")
                                .append("<div class=m-0>" + item.label + trs + "</div>")
                                .appendTo(ul);
                        };
                    },
                    focus: function () {
                        return false; // Prevent default focus behavior
                    }


                    //         var trs = '';
                    ////console.log(item.WarehouseList);
                    //if (item.WarehouseList.length > 0) {

                    //    trs = '<p class="text-sm-left font-italic" style="font-size:12px"> Stock : ';
                    //    $.each($(item.WarehouseList), function(key, value) {
                    //        // alert('found');
                    //        trs += '[ ' + item.WarehouseList[key].WhShortName + ' - ' + item.WarehouseList[key].CurrentStock + ' ]   - Cost :' + item.WarehouseList[key].AverageCosting + '  ';
                    //    })

                    //    trs += '</p>';
                    //}



                }).focus(function () {
                    $(this).autocomplete("search", $(this).val());
                    $(this).select();


                });

                input.addEventListener("keydown", function (e) {
                    // Prevent default behavior of arrow keys (40 for down, 38 for up)
                    if (e.keyCode === 40 || e.keyCode === 38) {
                        e.preventDefault();
                    }
                });



                if (currentActiveInput !== null) {
                    currentActiveInput.focus();
                }

                // Set the value of the input element to the current field value
                input.value = selected;


                return inputContainer;



            }




            //            function categoryEditor(cell, onRendered, success, cancel, editorParams) {


            //     var input = document.createElement("input");
            //     input.type = "text";
            //    input.setAttribute("name", cell.getField());
            //    input.setAttribute("autocomplete", "off");

            //    // Set up the autocomplete
            //    $(input).autocomplete({
            //        source: function (request, response) {
            //            $.ajax({
            //                url: "@Url.Action("GetCOAList", "Admin")",
            //                dataType: "json",
            //                data: {
            //                    dropdownSearch: request.term,
            //                    type: "public",
            //                    pageSize: 5,
            //                    minimumInputLength: 0
            //                },
            //                success: function (data) {
            //                    var categoryNames = $.unique($.map(data.AccountHeadList, function (item) {
            //                        return item.AccName;
            //                    }));
            //                    response(categoryNames);
            //                },
            //                error: function (xhr, status, error) {
            //                    console.error(error);
            //                }
            //            });
            //        },
            //        minLength: 0, // Show suggestions on focus
            //        select: function (event, ui) {
            //            // Update the cell value and trigger success callback
            //            cell.setValue(ui.item.value);
            //            success();
            //        },
            //        close: function () {
            //            // Handle the case when the autocomplete dropdown is closed without a selection
            //            cancel();
            //        }
            //    });

            //    // Prevent Tabulator from re-rendering the cell during edit
            //    cell.getElement().style.display = "none";

            //    // Append the input element to the cell
            //    cell.getElement().parentNode.appendChild(input);

            //    // Focus the input element
            //    $(input).focus();
            //}



            document.getElementById("add-row").addEventListener("click", function () {
                editingModeTrigger = 1;
                var newRowData = {
                    TKDebit: 0,
                    TKCredit: 0,
                    TKDebitLocal: 0,
                    TKCreditLocal: 0,
                    CurrencyRate:  1
                    // Add other fields here...
                };
                table.addRow(newRowData);
                renumberRows();
                // calculation();
            });



            table.on("rowMoved", function (row) {
                renumberRows();
                calculation();
            });
            document.getElementById("clear").addEventListener("click", function () {
                table.clearData()
            });

            function renumberRows() {
                var rows = table.getRows();
                console.log(rows);
                rows.forEach(function (row, index) {
                    row.update({ SLNo: index + 1 });
                });
            }
            function deleteRow(row) {
                // Show a confirmation dialog and delete the row if confirmed
                if (confirm("Are you sure you want to delete this row?")) {
                    table.deleteRow(row);
                    console.log("Row deleted successfully.");
                    renumberRows();
                }
                calculation();
            }
            function startEditing(row) {
                var rowData = row.getData();
                row.update(rowData);
                //row.getElement().classList.add("tabulator-editing");
            }

            //$("#jsGridItems").jsGrid({
            //    width: "100%",
            //    inserting: true,
            //    // filtering: true,
            //    editing: true,

            //    sorting: true,
            //    paging: true,
            //    autoload: true,
            //    deleteConfirm: "Do you really want to delete the client?",
            //    fields: [
            //        { type: "control", width: '80', title: 'Action', editButton: false, width: '3%', },
            //        { name: "Id", title: 'ID', type: "label", visible: false },
            //        { name: "SLNo", title: "SL.", visible: true, width: '6%', align: 'center' },
            //        { name: "AccId", title: 'Account Id', type: "label", visible: false },
            //        { name: "VoucherId", title: "Voucher", type: "text", visible: false },
            //        // { name: "VoucherSubId", title: "Voucher sub", type: "text", visible: false },
            //        { name: "CurrencyId", title: 'Currency Id', type: "select", visible: false },
            //        { name: "CurrencyForeignId", title: 'Currency Foreign Id', type: "select", visible: false },
            //        { name: "AccName", title: "Account Head", "visible": true, type: "autocomplete", validate: "required" },////// items: IMEIlIST, valueField: "Value", textField: "Text"

            //        { name: "EmpId", title: 'Employee', type: "select", visible: false },
            //        { name: "Note1", title: 'Note 1', type: "text" },
            //        { name: "Note2", title: 'Note 2', type: "text", align: "center" },
            //        { name: "CustomerId", title: 'Customer', type: "select", visible: false },

            //        { name: "SupplierId", title: "Supplier", type: "select", visible: false },
            //        { name: "TKDebit", title: "Debit", type: "text" },
            //        { name: "TKCredit", title: "Credit", type: "text" },
            //        { name: "CurrencyRate", title: "currencyrate", visible: false, type: "text" },
            //        { name: "TKDebitLocal", title: "debitlocal", visible: false, type: "text" },
            //        { name: "TKCreditLocal", title: "creditlocal", visible: false, type: "text" },
            //        { name: "VoucherTranGroupIdRow", title: "Transaction Group", visible: false }
            //    ],
            //    onItemInserting: function (args) {

            //        console.log(args.item);
            //        var parentValue = $('#jsGridItems').jsGrid('option', 'data');
            //        var serial = parentValue.length + 1;
            //        args.item.SLNo = serial;
            //        /*alert('args');*/
            //        controlSignal = 0;
            //        $("#jsGridItems").jsGrid("editItem", args.item);
            //        //alert(isMultiDebitCredit);
            //        if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {
            //            if (isMultiDebitCredit == false) {

            //                var s = $.isNumeric(args.item.TKDebit);
            //                args.item.TKCredit = 0;
            //                // alert(args.item.TKDebit);
            //                if (args.item.TKDebit <= 0 || s == false) {

            //                    args.cancel = true;
            //                    alert('Put a valid Debit value');

            //                    $("#jsGridItems").jsGrid("editItem", args.item);
            //                }
            //                else {

            //                    $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //                }
            //            }
            //        }
            //        else if ($('#VoucherTypeId').val() == 2 || $('#VoucherTypeId').val() == 4) {
            //            if (isMultiDebitCredit == false) {
            //                args.item.TKDebit = 0;
            //                var s1 = $.isNumeric(args.item.TKCredit);
            //                console.log(args.item);
            //                //alert(args.item.TKCredit);

            //                if (args.item.TKCredit <= 0 || s1 == false) {
            //                    args.cancel = true;
            //                    alert('Put a valid Credit value');
            //                    $("#jsGridItems").jsGrid("editItem", args.item);
            //                }
            //                else {

            //                    $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //                }
            //            }


            //        }
            //        else if ($('#VoucherTypeId').val() == 5 || $('#VoucherTypeId').val() == 6) {

            //            var s = $.isNumeric(args.item.TKDebit);
            //            var s1 = $.isNumeric(args.item.TKCredit);

            //            if ((args.item.TKDebit > 0) && args.item.TKCredit == 0) {
            //                args.item.TKCredit = 0;

            //            }
            //            else if (s == false || s1 == false) {
            //                args.cancel = true;
            //                alert('Put a valid  value');
            //                $("#jsGridItems").jsGrid("editItem", args.item);
            //            }

            //            else if ((args.item.TKCredit > 0) && args.item.TKDebit == 0) {
            //                args.item.TKDebit = 0;
            //            }

            //            else if (args.item.TKCredit > 0 && args.item.TKDebit > 0 && controlSignal == 0) {
            //                args.item.TKDebit = 0;
            //                args.item.TKCredit = 0;
            //                args.cancel = true;
            //                alert('Multiple value not allowed');
            //                $("#jsGridItems").jsGrid("editItem", args.item);
            //            }
            //            else if (args.item.TKCredit <= 0 && args.item.TKDebit <= 0) {
            //                args.cancel = true;
            //                alert('Put debit or credit value');
            //                $("#jsGridItems").jsGrid("editItem", args.item);

            //            }
            //            else {

            //                $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //            }


            //        }
            //    },
            //    onItemInserted: function (args) {

            //        setTimeout(() => {
            //            //  console.log('editing now');
            //            $('#jsGridItems select').select2();
            //        }, 0);

            //        $("#jsGridItems").jsGrid("editItem", args.item);
            //        var s = $.isNumeric(args.item.TKDebit);
            //        var s1 = $.isNumeric(args.item.TKCredit);

            //        if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {

            //            if (isMultiDebitCredit == false) {
            //                args.item.TKCredit = 0;
            //                // alert(args.item.TKDebit);
            //                if (args.item.TKDebit <= 0 || s == false) {
            //                    args.cancel = true;
            //                    alert('Put a valid Debit value');

            //                    $("#jsGridItems").jsGrid("editItem", args.item);
            //                }
            //                else {

            //                    $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //                }
            //            }
            //        }
            //        else if ($('#VoucherTypeId').val() == 2 || $('#VoucherTypeId').val() == 4) {
            //            if (isMultiDebitCredit == false) {
            //                if (args.item.TKCredit <= 0 || s1 == false) {
            //                    args.item.TKDebit = 0;
            //                    console.log(args.item);
            //                    //alert(args.item.TKCredit);



            //                    args.cancel = true;
            //                    alert('Put a valid Credit value');
            //                    $("#jsGridItems").jsGrid("editItem", args.item);
            //                }
            //                else {

            //                    $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //                }
            //            }

            //        }
            //        else if ($('#VoucherTypeId').val() == 5 || $('#VoucherTypeId').val() == 6) {

            //            var s = $.isNumeric(args.item.TKDebit);
            //            var s1 = $.isNumeric(args.item.TKCredit);

            //            if ((args.item.TKDebit > 0) && args.item.TKCredit == 0) {
            //                args.item.TKCredit = 0;

            //            }
            //            else if (s == false || s1 == false) {
            //                args.cancel = true;
            //                alert('Put a valid  value');
            //                $("#jsGridItems").jsGrid("editItem", args.item);
            //            }

            //            else if ((args.item.TKCredit > 0) && args.item.TKDebit == 0) {
            //                args.item.TKDebit = 0;
            //            }
            //            else if (args.item.TKCredit > 0 && args.item.TKDebit > 0) {
            //                args.item.TKDebit = 0;
            //                args.item.TKCredit = 0;
            //                args.cancel = true;
            //                alert('Multiple value not allowed');
            //                $("#jsGridItems").jsGrid("editItem", args.item);
            //            }
            //            else if (args.item.TKCredit <= 0 && args.item.TKDebit <= 0) {
            //                args.cancel = true;
            //                alert('Put debit or credit value');
            //                $("#jsGridItems").jsGrid("editItem", args.item);

            //            }
            //            else {

            //                $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //            }


            //        }

            //        if (autocompleteId == 0) {
            //            console.log(args.item.AccId);
            //            args.item.AccId = args.item.AccId;

            //            $('#jsGridItems').jsGrid('refresh');

            //        }
            //        else {
            //            args.item.AccId = autocompleteId;
            //            $('#jsGridItems').jsGrid('refresh');
            //        }
            //        //  console.log('...??');
            //        console.log(args.item);
            //        calculation();

            //        GetCultureInfo();
            //    },

            //    onItemEditing: function (args) {

            //        calculation();

            //        GetCultureInfo();
            //        if (autocompleteId == 0) {
            //            console.log(args.item.AccId);
            //            args.item.AccId = args.item.AccId;


            //        }
            //        else {
            //            args.item.AccId = autocompleteId;

            //        }
            //        $("#jsGridItems").keypress(function (e) {
            //            if (e.which == 13) {
            //                $("#jsGridItems .jsgrid-update-button").trigger("click");
            //                //  $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //            }
            //        });



            //    },
            //    //onItemInserting: function(args){
            //    //alert('inserting');
            //    //    calculation();

            //    //   GetCultureInfo();
            //    //    var s=$.isNumeric(args.item.TKDebit);
            //    //    var s1=$.isNumeric(args.item.TKCredit);
            //    //    if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {

            //    //        // alert(args.item.TKDebit);
            //    //        if (args.item.TKDebit <= 0 || s == false) {
            //    //            args.cancel = true;
            //    //            alert('Put a valid Debit value');

            //    //            $("#jsGridItems").jsGrid("editItem", args.item);
            //    //        }
            //    //        else {

            //    //            $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //    //        }
            //    //    }
            //    //    else if($('#VoucherTypeId').val() == 2 ||$('#VoucherTypeId').val() == 4){
            //    //            console.log(args.item);
            //    //            //alert(args.item.TKCredit);
            //    //            if (args.item.TKCredit <= 0 || s1 == false) {
            //    //                args.cancel = true;
            //    //                alert('Put a valid Credit value');
            //    //                $("#jsGridItems").jsGrid("editItem", args.item);
            //    //            }
            //    //            else {

            //    //                $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //    //            }

            //    //        }

            //    //    },
            //    onItemUpdating: function (args) {

            //        calculation();

            //        GetCultureInfo();
            //        var s = $.isNumeric(args.item.TKDebit);
            //        var s1 = $.isNumeric(args.item.TKCredit);

            //        if ($('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {
            //            if (isMultiDebitCredit == false) {
            //                // alert(args.item.TKDebit);
            //                if (args.item.TKDebit <= 0 || s == false) {
            //                    args.cancel = true;
            //                    alert('Put a valid Debit value');

            //                    $("#jsGridItems").jsGrid("editItem", args.item);
            //                }
            //                else {

            //                    $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //                }
            //            }
            //        }
            //        else if ($('#VoucherTypeId').val() == 2 || $('#VoucherTypeId').val() == 4) {
            //            if (isMultiDebitCredit == false) {
            //                console.log(args.item);
            //                //alert(args.item.TKCredit);
            //                if (isMultiDebitCredit == false) {
            //                    if (args.item.TKCredit <= 0 || s1 == false) {
            //                        args.cancel = true;
            //                        alert('Put a valid Credit value');
            //                        $("#jsGridItems").jsGrid("editItem", args.item);
            //                    }
            //                    else {

            //                        $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //                    }
            //                }
            //            }
            //        }
            //        else if ($('#VoucherTypeId').val() == 5 || $('#VoucherTypeId').val() == 6) {

            //            var s = $.isNumeric(args.item.TKDebit);
            //            var s1 = $.isNumeric(args.item.TKCredit);



            //            if ((args.item.TKDebit > 0) && (args.item.TKCredit == 0)) {

            //                args.item.TKCredit = 0;

            //            }
            //            else if ((args.item.TKDebit > 0) && (args.item.TKCredit == '')) {
            //                args.cancel = true;
            //                alert('put credit value to 0');
            //                $("#jsGridItems").jsGrid("editItem", args.item);
            //            }

            //            else if (s == false || s1 == false) {
            //                args.cancel = true;
            //                alert('Put a valid  value');
            //                $("#jsGridItems").jsGrid("editItem", args.item);
            //            }

            //            else if ((args.item.TKCredit > 0) && args.item.TKDebit == 0) {
            //                args.item.TKDebit = 0;
            //                console.log(args.item.TKCredit);
            //                alert(args.item.TKCredit);
            //            }
            //            else if ((args.item.TKCredit > 0) && args.item.TKDebit == '') {
            //                args.cancel = true;
            //                alert('put dabit value to 0');
            //                $("#jsGridItems").jsGrid("editItem", args.item);
            //            }

            //            else if (args.item.TKCredit > 0 && args.item.TKDebit > 0) {
            //                args.item.TKDebit = 0;
            //                args.item.TKCredit = 0;
            //                args.cancel = true;
            //                alert('Multiple value not allowed');
            //                $("#jsGridItems").jsGrid("editItem", args.item);
            //            }
            //            else if (args.item.TKCredit <= 0 && args.item.TKDebit <= 0) {
            //                args.cancel = true;
            //                alert('Put debit or credit value');
            //                $("#jsGridItems").jsGrid("editItem", args.item);

            //            }
            //            else {

            //                $('#jsFilterGrid :input[type=text]').eq(1).focus();
            //            }


            //        }

            //        console.log(args.item);

            //    },
            //    onItemUpdated: function (args) {

            //        calculation();
            //        GetCultureInfo();
            //        console.log(autocompleteId);
            //        //alert(countryId);
            //        if (autocompleteId == 0) {
            //            console.log(args.item.AccId);
            //            args.item.AccId = args.item.AccId;

            //            $('#jsGridItems').jsGrid('refresh');

            //        }
            //        else {
            //            args.item.AccId = autocompleteId;
            //            $('#jsGridItems').jsGrid('refresh');
            //        }


            //    },

            //    onItemDeleted: function (args) {
            //        var parentValue = $('#jsGridItems').jsGrid('option', 'data');
            //        var serial = 0;
            //        for (var i = 0; i < parentValue.length; i++) {
            //            parentValue[i].SLNo = serial + 1;
            //            serial++;
            //        }

            //        $("#jsGridItems").jsGrid("refresh");

            //    },
            //    onRefreshed: function (args) {

            //        calculation();


            //    }


            //});


            VoucherTypeName();


            function calculation() {
                var DefaultCurrencyId = '@HttpContextAccessor.HttpContext.Session.GetInt32("defaultcurrencyid").ToString()';
                var SelectedCurrencyId = $('#CountryId').val();

                let TotalDebit = 0.00;
                let TotalCredit = 0.00;
                // let difference = 0.00;
                let TotalAmount = 0.00;
                // const items = ($("#jsGridItems").jsGrid('option', 'data'));
                const items = table.getData();

                if (isMultiCurrency == 1 && $('#CountryId').val() != DefaultCurrencyId) {
                    items.forEach(function (item) {

                        // TotalDebit += parseFloat(item.TKDebit);
                        TotalDebit += parseFloat(item.TKDebitLocal);
                        /*console.log('jishaansmrity');*/
                        //console.log(TotalDebit);
                        TotalCredit += parseFloat(item.TKCreditLocal);
                        /* console.log('jishaansmrityMiqdaad');*/
                        //console.log(TotalCredit);

                    });

                }
                else if ((isMultiCurrency == 0) || (isMultiCurrency == 1 && $('#CountryId').val() == DefaultCurrencyId)) {
                    items.forEach(function (item) {

                        // TotalDebit += parseFloat(item.TKDebit);
                        TotalDebit += parseFloat(item.TKDebit);
                        /*console.log('jishaansmrity');*/
                        //console.log(TotalDebit);
                        TotalCredit += parseFloat(item.TKCredit);
                        /* console.log('jishaansmrityMiqdaad');*/
                        //console.log(TotalCredit);

                    });

                }

                //if (isMultiDebitCredit == true && difference > 0) {
                //    alert("debit credit amount is not same");
                //}
                /*alert(TotalDebit, TotalCredit)*/
                TotalAmount = TotalDebit + TotalCredit;
                //  difference = TotalDebit - TotalCredit;
                console.log(TotalAmount);
                //if (isMultiDebitCredit == true & $('#VoucherTypeId').val() == 1 || $('#VoucherTypeId').val() == 3) {
                //    $('#VAmount-debit').val(TotalDebit);

                //}

                $('#VAmount').val(TotalAmount);

                $('#VAmount-debit').val(TotalDebit);
                $('#VAmount-debit').text(TotalDebit);

                $('#VAmount-credit').val(TotalCredit);
                $('#VAmount-credit').text(TotalCredit);

                //   $('#difference').val(difference);
                //   $('#difference').text(difference);



                //const valueFormated = (TotalAmount).toLocaleString('ar-ae', {
                //      style: 'currency',
                //      currency: 'AED',
                //     });


                //     // here is the value formated
                //     valueFormated.split('')[1]
                //  $('#VAmount').val(valueFormated);

                //const valueFormated = (TotalAmount).toLocaleString('en-US', {
                // style: 'currency',
                // currency: 'USD',
                //});




                //  const x=valueFormated('en-US','USD');

                /// $('#VAmount').val(TotalAmount.toLocaleString());
                //$('#VAmount').val(x);
                //  $('#difference').val(difference);

                // Convert Rate formula
                // if (DefaultCurrencyId == SelectedCurrencyId) {

                //     const value = 1; // Replace this with your calculation

                //     // Update the text content of the p element with the label and the calculated value
                //     const convertRateLabel = document.getElementById('convert-rate-label');
                //     convertRateLabel.textContent = 'Convert Rate: ' + value;

                //     const totalRateLabel = document.getElementById('total-rate-label');
                //     totalRateLabel.textContent = 'Amount: ' + value * TotalAmount;



                // }
                // else {
                //     const value = 0; // Replace this with your calculation

                //     // Update the text content of the p element with the label and the calculated value
                //     const convertRateLabel = document.getElementById('convert-rate-label');
                //     convertRateLabel.textContent = 'Convert Rate: ' + value;
                // }

            }



            if (isMultiDebitCredit == true) {
                //$("#divAccountMainId").addClass("d-none");
                //$("#divBalance").addClass("d-none");
                $("#AccountMainIdDropdown").addClass("d-none");
            }
            else {
                //$("#divAccountMainId").toggleClass("d-none");
                //$("#divBalance").toggleClass("d-none");
                $("#AccountMainIdDropdown").toggleClass("d-none");

            }

            //var minMaxFilterEditor = function (cell, onRendered, success, cancel, editorParams) {
            //    var end;

            //    var container = document.createElement("span");

            //    //create and style inputs
            //    var start = document.createElement("input");
            //    start.setAttribute("type", "number");
            //    start.setAttribute("placeholder", "Min");
            //    start.setAttribute("min", 0);
            //    start.setAttribute("max", 200);
            //    start.style.padding = "4px";
            //    start.style.width = "50%";
            //    start.style.boxSizing = "border-box";

            //    start.value = cell.getValue();

            //    function buildValues() {
            //        success({
            //            start: start.value,
            //            end: end.value,
            //        });
            //    }

            //    function keypress(e) {
            //        if (e.keyCode == 13) {
            //            buildValues();
            //        }

            //        if (e.keyCode == 27) {
            //            cancel();
            //        }
            //    }

            //    end = start.cloneNode();
            //    end.setAttribute("placeholder", "Max");

            //    start.addEventListener("change", buildValues);
            //    start.addEventListener("blur", buildValues);
            //    start.addEventListener("keydown", keypress);

            //    end.addEventListener("change", buildValues);
            //    end.addEventListener("blur", buildValues);
            //    end.addEventListener("keydown", keypress);


            //    container.appendChild(start);
            //    container.appendChild(end);

            //    return container;
            //}

             $(document).ready(function() {
            // Set the default value of #CurrencyRate to 1
                $("#CurrencyRate").val(1);
                $("#MultiiCurrencyId").val(18);
            });

            // json data generate
            $('#BtnSave').click(function () {
                var loaderinAajx = `<div class="loader"></div>`;
                //    $(".page-wrapper").append(loaderinAajx);
                var isMultiCurrency = '@HttpContextAccessor.HttpContext.Session.GetInt32("isMultiCurrency")';
                var DefaultCurrencyId = '@HttpContextAccessor.HttpContext.Session.GetInt32("defaultcurrencyid").ToString()';

                // var isMultiCurrency = '@HttpContextAccessor.HttpContext.Session.GetString("isMultiCurrency").ToLower()' == '1';
                var isVoucherDistributionEntry = '@HttpContextAccessor.HttpContext.Session.GetString("isVoucherDistributionEntry").ToLower()' == 'true';
                var isChequeDetails = '@HttpContextAccessor.HttpContext.Session.GetString("isChequeDetails").ToLower()' == 'true';
                var isModal = true;


                var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                $("#ComId").val(ComId);
                $("#LuserId").val(UserId);


                if (isMultiDebitCredit == true) { //|| VoucherType == "VJR"

                    if (difference != 0) {

                        alert("Debit And Credit Amount is Not Same");
                        //StopSpinner(".btnVoucher");


                        return;


                    };
                }
                else {
                    // var x = $('#AccountMainId').val() || 0;
                    // if (x == 0) {
                    //     alert("Please Confirm the Opposite Head");
                    //     $('#AccountMainId').focus();
                    //     //StopSpinner(".btnVoucher");
                    //     return false;
                    // }


                };


                // let Items = null;
                //let Items = $("#jsGridItems").jsGrid('option', 'data');
                let Items = table.getData();
                for (var i = 0; i < Items.length; i++) {
                    //Items[i].TKDebitLocal = Items[i].TKDebitLocal;
                    //Items[i].TKCreditLocal = Items[i].TKCredit;
                    Items[i].ComId = $("#ComId").val();
                    Items[i].LuserId = $("#LuserId").val();
                    Items[i].SRowNo = 0;
                    //Items[i].CurrencyForeignId = 0;
                    Items[i].VoucherId = $('#Id').val() || 0;
                    //Items[i].VoucherId= null;//$('#Id').val();
                    Items[i].VoucherSubId = 0;
                }
                debugger
                console.log("Items::", Items);





                var newItems = [];
              var foundNonUndefined = false;
                for (var i = Items.length - 1; i >= 0; i--) {
                    if (Items[i].AccName !== undefined) {
                         newItems.unshift(Items[i]);
                    }

                }
                let vouchersubs = [...newItems];
                console.log(vouchersubs);







                var VoucherTypeId = $('#VoucherTypeId').val();
                var ref = $('#Referance').val();
                var Location = $('#location option:selected').val();
                var description = $.trim($("#VoucherDesc").val());
                var VoucherDate = $('#VoucherDate').val();

                var TotalVoucherAmount = 0.00;
                var TotalVoucherAmountLocal = 0.00;
                var totalDebit = 0;
                var totalCredit = 0;

                // Get the table data
                var tableData = table.getData();

                // Loop through the data to calculate the totals
                tableData.forEach(function (row) {
                    if (row.AccName == 'undefined') {
                        tableData.pop();
                    }
                    if ((isMultiCurrency == 0) || (isMultiCurrency == 1 && $('#CountryId').val() == DefaultCurrencyId)) {

                        if (row.TKDebit) {
                            totalDebit += parseFloat(row.TKDebit);
                        }
                        if (row.TKCredit) {
                            totalCredit += parseFloat(row.TKCredit);
                        }
                    }
                    else {
                        if (row.TKDebit) {
                            totalDebit += parseFloat(row.TKDebitLocal);
                        }
                        if (row.TKCredit) {
                            totalCredit += parseFloat(row.TKCreditLocal);
                        }
                    }

                });

                console.log("Total Debit:", totalDebit);
                console.log("Total Credit:", totalCredit);


                if (VoucherTypeId == 1 || VoucherTypeId == 3) {

                    TotalVoucherAmount = totalDebit;//$("#VAmount-debit").val();
                    TotalVoucherAmountLocal = totalDebit;
                    var AccountMainId = $('#AccountMainId option:selected').val();
                    //var balance = $('#balance').val();

                }
                else if (VoucherTypeId == 2 || VoucherTypeId == 4) {
                    TotalVoucherAmount = totalCredit;//$("#VAmount-credit").val();
                    TotalVoucherAmountLocal = totalCredit;
                    var AccountMainId = $('#AccountMainId option:selected').val();
                    var customer = $('#crCustomer option:selected').val();


                }
                else if (VoucherTypeId == 5 || VoucherTypeId == 6) {
                    TotalVoucherAmount = totalDebit; //$("#VAmount-debit").val();
                    TotalVoucherAmountLocal = totalDebit;
                    var AccountMainId = $('#AccountMainId option:selected').val();


                }



                let Acc_VoucherSub = {};
                                                                      

                if (isMultiDebitCredit == false) {
                    $("#MultiiCurrencyId").val(18);
                    Acc_VoucherSub.SLNo = 1;
                    //Acc_VoucherSub.CurrencyId = '@HttpContextAccessor.HttpContext.Session.GetInt32("defaultcurrencyid").ToString()';
                    Acc_VoucherSub.CurrencyForeignId = '18';///countryid foreign
                    Acc_VoucherSub.AccId = AccountMainId;
                    Acc_VoucherSub.accname = '';
                    Acc_VoucherSub.EmpId = 0;
                    Acc_VoucherSub.Note1 = ref;//$("#Referance").val();
                    Acc_VoucherSub.Note2 = "";//$("#ReferanceTwo").val();
                    Acc_VoucherSub.CustomerId = 0;
                    Acc_VoucherSub.SupplierId = 0;

                    Acc_VoucherSub.ComId = $("#ComId").val();
                    Acc_VoucherSub.LuserId = $("#LuserId").val();
                    Acc_VoucherSub.CurrencyId = $("#MultiiCurrencyId").val();
                    Acc_VoucherSub.CurrencyRate = $("#CurrencyRate").val();
                    Acc_VoucherSub.VoucherId = $('#Id').val() || 0;
                    var totalamt = difference;//$("#difference").val();

                    if (totalamt != 0) {
                        Acc_VoucherSub.SRowNo = -1;
                        //alert(Acc_VoucherSub.SRowNo);
                        /*Acc_VoucherSub.VoucherId = $('#Id').val();*/
                        Acc_VoucherSub.VoucherSubId = 0;
                    }


                    if (VoucherTypeId == 1 || VoucherTypeId == 3) {
                        Acc_VoucherSub.TKDebit = 0;//$("#VAmount").val();
                        Acc_VoucherSub.TKCredit = $("#VAmount").val();
                        Acc_VoucherSub.TKDebitLocal = 0;//$("#VAmountLocal").val();
                        Acc_VoucherSub.TKCreditLocal = $("#VAmount").val();

                    }
                    if (VoucherTypeId == 2 || VoucherTypeId == 4) {

                        Acc_VoucherSub.TKDebit = $("#VAmount").val();
                        Acc_VoucherSub.TKCredit = 0;
                        Acc_VoucherSub.TKDebitLocal = $("#VAmount").val();
                        Acc_VoucherSub.TKCreditLocal = 0;

                    }
                    else {

                        if (totalamt > 0) {
                            Acc_VoucherSub.TKDebit = 0;//$("#VAmount").val();
                            Acc_VoucherSub.TKCredit = $("#VAmount").val();
                            Acc_VoucherSub.TKDebitLocal = 0;//$("#VAmountLocal").val();
                            Acc_VoucherSub.TKCreditLocal = $("#VAmount").val();


                        }
                        else {

                            Acc_VoucherSub.TKDebit = $("#VAmount").val();
                            Acc_VoucherSub.TKCredit = 0;
                            Acc_VoucherSub.TKDebitLocal = $("#VAmount").val();
                            Acc_VoucherSub.TKCreditLocal = 0;
                        }



                    }

                    console.log(Acc_VoucherSub);

                    //Items[Items.length] = null;
                    //Items[Items.length] = Acc_VoucherSub;
                    vouchersubs.push(Acc_VoucherSub);


                }
                //Final Ajax to send image and data to controller starts

                //var VoucherId = 0;
                // First ajax call for image


                 


                var multipleTag = $("#MultiTags").tagsinput('items');
                var CountryId = $('#CountryId').val();
                var CountryIdLocal = $('#CountryId').val();
                var VoucherId = $('#Id').val() || 0;
                var fiscalMonthId = $('#FiscalMonthId').val();
                //alert(VoucherId);

                var vouchermodel =
                {
                    ComId: ComId,
                    LuserId: UserId,
                    Id: VoucherId,
                    VoucherTypeId: VoucherTypeId,
                    VoucherDate: VoucherDate,
                    AccountMainId: AccountMainId,
                    WarehouseId: Location,
                    CountryId: CountryId,
                    CountryIdLocal: CountryIdLocal,
                    VoucherNo: $('#VoucherNo').val(),
                    Referance: $('#Referance').val(),
                    FilePath: $('#VoucherFilePath').val(),
                    CurrencyId: $('#MultiiCurrencyId').val(),
                    MasterCurrencyRate: $('#CurrencyRate').val(),
                    FiscalMonthId: fiscalMonthId,
                    VoucherTags: multipleTag,
                    VoucherDesc: description,
                    //VAmount: $('#VAmount').val(),
                    VAmount: TotalVoucherAmount,
                    vAmountLocal: TotalVoucherAmountLocal,
                    VoucherSubs: vouchersubs
                };

                console.log(vouchermodel);
                
                var VoucherIdabc = 0;


                $.ajax({
                    async: false,
                    type: "POST",
                    url: "@Url.Action("AddVoucher", "Accounts")",
                    data: JSON.stringify(vouchermodel),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        //$(window).on('load', function () {
                        //    $('.loader').remove();
                        //})
                        VoucherIdabc = response.VoucherID;
                        //alert(VoucherIdabc);
                        setTimeout(function () {
                            toastr.success(response.ex, "", {
                                "toastClass": "toast-green"
                            });
                        }, 1500);
                    }
                });


                if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                    var formData = new FormData();
                    // formData.append("file", fileInput.files[0]);
                    for (var i = 0; i < fileInput.files.length; i++) {
                        formData.append("files", fileInput.files[i]);
                    }
                    formData.append("VoucherIdabc", VoucherIdabc);

                    $.ajax({
                        async: false,
                        type: "POST",
                        url: "@Url.Action("UploadImage", "Accounts")",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            // Handle the response
                        }
                    });
                } else {
                    // Handle the case where no file was selected
                }


        @*if ($('input[type=file]')[0].files[0].size > 0) {
                var formData = new FormData();
                alert(formData);
                formData.append("file", $('input[type=file]')[0].files[0]);
                formData.append("VoucherIdabc", VoucherIdabc);


                $.ajax({
                async: false,
                type: "POST",
                url: "@Url.Action("UploadImage", "Accounts")",
                data: formData,
                contentType: false,
                processData: false,
                success: function(response) {
                //alert('success');
                // Handle the response
                }
                });

                }*@



                                    if (VoucherIdabc > 0) {
                    setTimeout(function () {
                        window.location.href = '@Url.Action("VoucherListQB", "Accounts")';
                    }, 500);


                }





                //Final Ajax to send image and data to controller ends


                // var multipleTag = $("#MultiTags").tagsinput('items');
                //var CountryId = $('#CountryId').val();
                //var CountryIdLocal = $('#CountryId').val();
                //var VoucherId = 0;
                //var vouchermodel =
                //{

                //    VoucherTypeId: VoucherTypeId,
                //    VoucherDate: VoucherDate,
                //    AccountMainId: AccountMainId,
                //    WarehouseId: Location,
                //    CountryId: CountryId,
                //    VoucherId: VoucherId,
                //    CountryIdLocal: CountryIdLocal,
                //    Balance: balance,
                //                          /*   VoucherNo: VoucherNo,*/
                //    Reference: ref,
                //    VoucherTags: multipleTag,
                //    VoucherDesc: description,
                //    VoucherSubs: Items
                //};



                //var CombineData = { 'VoucherTypeId': VoucherTypeId, 'VoucherVoucherDate': VoucherDate, 'AccountMainId': AccountMainId, 'WarehouseId': Location, 'VoucherDesc': description };

                //  var jsonItems=JSON.stringify(CombineData);

                //var data = JSON.stringify({ 'Id':0 ,'VoucherTypeId': VoucherTypeId, 'VoucherVoucherDate': VoucherDate, 'AccountMainId': AccountMainId, 'WarehouseId': Location, 'Reference': ref, 'VoucherDesc': description, 'VoucherSubs': Items });

                //var jsonItems = CombineData;

                // console.log(vouchermodel);
                //alert('smrity');
                //$.ajax({
                //    type: "POST",
                //    url: '@Url.Action("AddVoucher", "Accounts")',
                //    contentType: "application/json",
                //    data: data,
                //    success: function (response) {
                //        alert('found');
                //        // Do something with the response
                //    },
                //    error: function (xhr, status, error) {
                //        console.error(error);
                //    }
                //});

                //var vouchermodel =
                //    {
                //        "Id": 0,
                //        "VoucherTypeId": "1",
                //        "VoucherDate": "05-Feb-23"
                //    };

                //console.log(vouchermodel);


                //var AccountMainId = {
                //    Id: 0,
                //    AccName: "Fahad",
                //    AccountCategoryId: 1,
                //    ParentId: 1,
                //    AccCode: "10001",
                //    AccType: "L",
                //    CountryId: "1",
                //    OpDebit: 1000,
                //    OpCredit: 2000,
                //    Description: "Test ABC"

                //}

                //var AccountMainId = {
                //     Property1: "Fahad",
                //     Property2: 0

                // }


                //$.ajax({
                //    async: true,
                //    type: "POST",
                //    url: '@Url.Action("AddVoucher", "Accounts")',
                //    data: { model: vouchermodel },
                //    //contentType: "application/json; charset=utf-8",
                //    dataType: "json",
                //    success: function(response) {
                //        alert('Data Save Successfully');
                //        window.location.href = '@Url.Action("VoucherList", "Accounts")';
                //        // Handle the response
                //    }
                //});



                //$.ajax({
                //    type: "POST",
                //    url: '@Url.Action("AddVoucher", "Accounts")',
                //    contentType: "application/json",
                //    dataType: 'json',
                //   data: {modelabc : JSON.stringify(data)},
                //    success: function (response) {
                //        // Do something with the response
                //    },
                //    error: function (xhr, status, error) {
                //        console.error(error);
                //    }
                //});



                //$.ajax({
                ////    //url: '/Voucher/Create',
                ////    //url: '@Url.Action("Create", "Accounts")',
                ////    //data: model,
                ////    //type: 'POST',
                ////    //contentType: 'application/json;',
                ////    // dataType: 'json',

                ////    type: 'POST',
                //    type: "POST",
                //    url: '@Url.Action("AddVoucher", "Accounts")',
                //    //dataType: 'json',

                //    //contentType: false,
                //    //processData: false,
                //    ////async: 'false',
                //    //beforeSend: function() {
                //    //    //$('#loader').removeClass('hidden');
                //    //    //$('#voucherSave').attr('disabled');
                //    //},
                //    //data: { acc_voucherMain: jsonItems },

                //    data: data,
                //    contentType: "application/json; charset=utf-8",
                //    dataType: "json",


                //    success: function(result) {
                //        console.log(result);
                //        if (result.Success == "1") {
                //            //window.location.href = "/Voucher/VoucherList";
                //            //window.location.href = '@Url.Action("VoucherList", "Accounts")';
                //        }
                //        else {
                //            alert(result.ex);
                //        }
                //        //StopSpinner(".btnVoucher");
                //    }
                //    //complete: function() {
                //    //   // $('#loader').addClass('hidden');
                //    //   // $('#voucherSave').attr('enabled');
                //    //},
                //    //error: function() {
                //    //    //StopSpinner(".btnVoucher");
                //    //}
                //});


            });



        });
        $("#CountryId").on("select2:select", function () {
            var selectedOption = $(this).find("option:selected");
            var currencyId = selectedOption.val();
            console.log('Selected Currency ID:', currencyId);
            $.ajax({
                url: '@Url.Action("GetCurrencyRateForExpense", "Admin")' + '?CurrencyId=' + currencyId,
                success: function (data) {
                    if (data[0].CurrencyShortName == "BDT") {
                        $("#yourRateParent").addClass("d-none");
                    }
                    else {
                        $("#yourRateParent").removeClass("d-none");
                        $(".rate").text(data[0].CurrencyShortName);
                        $("#CurrencyRate").val(data[0].CurrencyRate);
                        $("#MultiiCurrencyId").val(data[0].CurrencyId);
                        var flag = '<i class="flag-icon ' + data[0].FlagClass + '"></i>';
                            $(".flag").html(flag);
                    }
                    console.log("see currency", data);

                }
            });
        });
        $("#CountryId").on("change", function () {
    var selectedOption = $(this).find("option:selected");
    var currencyId = selectedOption.val();
    console.log('Selected Currency ID:', currencyId);
    $.ajax({
               url: '@Url.Action("GetCurrencyRateForExpense", "Admin")' + '?CurrencyId=' + currencyId,
               success: function (data) {
                   if (data[0].CurrencyShortName == "BDT") {
                       $("#yourRateParent").addClass("d-none");
                   }
                   else {
                       $("#yourRateParent").removeClass("d-none");
                        $(".rate").text(data[0].CurrencyShortName);
                        //$("#CurrencyRate").val(data[0].CurrencyRate);
                        $("#MultiiCurrencyId").val(data[0].CurrencyId);
                        var flag = '<i class="flag-icon ' + data[0].FlagClass + '"></i>';
                            $(".flag").html(flag);
                   }
                   console.log("see currency",data);

               }
           });
});

    </script>
}


