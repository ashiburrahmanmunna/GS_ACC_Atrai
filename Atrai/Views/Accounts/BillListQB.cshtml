@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@using Atrai.Model.Core.Entity;
@using Atrai.Model.Core.Common;
@model IEnumerable<Atrai.Model.Core.Entity.Acc_VoucherMainModel>
@{
    List<Atrai.Model.Core.Entity.Acc_VoucherNoPrefixModel> VoucherTypes = ViewBag.Acc_VoucherNoPrefix;
}
@{
    ViewData["Title"] = "Voucher Created Type";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var ListType = ViewBag.ListType as string;
    var IsSerialSales = @HttpContextAccessor.HttpContext.Session.GetInt32("IsSerialSales");
    var BusinessTypeName = @HttpContextAccessor.HttpContext.Session.GetString("BusinessType").ToString().ToLower();
    var formname = "Sales";
    if (BusinessTypeName.ToLower() == "GARMENTS INVENTORY".ToLower())
    {

        formname = "Issue";
    }
}

<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">


<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">


<style>
    /*li {
        cursor: pointer;
        padding: 10px;
        margin: 5px;
        border: 1px solid #ccc;
    }*/

    /* Set the anchor tag to have full width */
    li a {
            display: block;
            width: 100%;
        }
    .table > :not(:first-child) {
        border-top: 0;
    }

    #treegridTable th {
        text-align: center;
        font-weight: 600;
        border: 1px solid #BABEC5;
        /*font-size: 14px;*/
    }

    .table > tbody > tr > td {
        line-height: 15px !important;
        border: 1px solid #c9c9c9;
    }


    .table tbody tr td {
        /* border: 1px solid #c9c9c9;*/
        font: 14px;
        color: #8A8A8A;
        line-height: 15px;
    }
    /*    .table>:not(caption)>*>* {

                     border-bottom-width: 0px;

                }*/
    .text-red {
        color: #FF0000 !important;
    }

    #body td:not(:first-child) {
        text-align: center;
    }

    .root-node {
        font-weight: 500;
    }

    /*   .tabulator-table .tabulator-row {
        background-color: white;
    } */

    .upper-form-style {
        background: #e9ecef6b;
        /*padding-top: 62px*/
    }

    .report-text-style {
        color: #0000ce;
    }

    .company-and-other-text-style {
        margin-top: 40px;
    }

    .customize-btn {
        background: #e9ecef6b;
        border: 1px solid black;
    }

    .customize-btn-another {
        background: #2CA01C;
        border: 1px solid black;
        border-radius: 20px;
        color: #FFFFFF;
        border: 1px solid #2CA01C;
    }

        .customize-btn-another:hover {
            background: #2CA01C;
            border: 1px solid black;
            border-radius: 20px;
            color: #FFFFFF;
            border: 1px solid #2CA01C;
        }

    .customize-btn:hover {
        background: #e9ecef6b;
        border: 1px solid black;
    }

    .customization-btn {
        background: #2CA01C;
        color: white;
        /*border: 1px solid black;*/
        border-radius: 20px;
    }

        .customization-btn:hover {
            background: #235d1b;
            color: white;
            border-radius: 20px;
        }

    .dropdown-button-style {
        border: 1px solid #ced4da;
        background: white;
    }

        .dropdown-button-style:hover {
            border: 1px solid #ced4da;
            background: white;
        }
   
     .gear-dropdown1.show {
        width: 550px;
     }

     .gear-dropdown2.show {
        width: 540px;
     }

    .gear-dropdown3.show {
        width: 562px;
    }

    .gear-dropdown4.show {
        width: 585px;
    }

    .modal-dialog {
        max-width: 90%;
        margin: 2rem auto;
    }

    .report-print-setting-style {
        background: #e9ecef6b;
    }

    .total-accname {
        border-bottom: 5px double black !important;
    }

    #modal-content3 {
        background-color: #fefefe;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
    }
    #loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        background: url('/assets/loading-load.gif') 50% 50% no-repeat rgb(249, 249, 249);
        opacity: .6;
    }

    .tabulator {
        border: none;
    }

    .tabulator-col .tabulator-col-title {
        text-align: center;
    }

    .tabulator-tableholder {
        background-color: white;
    }

    .tabulator[tabulator-layout=fitDataTable] {
        display: inherit;
    }

    .tabulator .tabulator-header .tabulator-col .tabulator-col-content {
        margin-top: 7px;
    }

    .tabulator .tabulator-header .tabulator-col, .tabulator .tabulator-header {
        background-color: white;
        border-bottom: white;
        border-right: 1px solid #aaaaaa38;
        /* border-top: 1px solid #f8f9fa; */
        /*border-left: 1px solid #aaaaaa38;*/        
    }
    /*    .tabulator-row .tabulator-cell, .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
                border-right: none;
                border-left: none;
            }*/
    .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
        border-right: 2px solid #aaaaaa38;
    }

    .tabulator-row .tabulator-cell {
        border-right: none;
        border-left: none;
        padding-left: 10px;
        border: 1px solid #aaaaaa29;
    }

    .tabulator-cell {
        padding-top: 10px;
        padding-bottom: 10px;
        /*margin-top: 27px;*/
    }

    .tabulator .tabulator-row .active-cell {
        overflow: visible;
        z-index: 13;
        /* Add any other styles you need for the active cell */
    }

    .tabulator-row {
        /*   border: 1px solid #aaaaaa38;*/
        border-left: none;
        border-right: none;
    }

    input[type="checkbox"] {
        width: 15px; /* Set the width */
        height: 20px; /* Set the height */
    }

    .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active {
        border-top-color: transparent !important;
        border-left-color: transparent !important;
        border-right-color: transparent !important;
        border-bottom: 4px solid green;
    }

        .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active:hover {
            background-color: #F8F8F8;
            border-top-color: transparent !important;
            border-left-color: transparent !important;
            border-right-color: transparent !important;
        }

    .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link:hover {
        background-color: #F8F8F8;
        border-top-color: transparent !important;
        border-left-color: transparent !important;
        border-right-color: transparent !important;
    }

    .customize-btnew {
        background: transparent;
        border: 1px solid black;
        border-radius: 20px;
    }

        .customize-btnew:hover {
            background: #ffffff;
            border: 1px solid black;
            color: black;
            border-radius: 20px;
        }

    .tabulator-row .tabulator-cell.tabulator-editing {
        border: 1px solid #404c5d;
        outline: none;
        padding: 0;
    }

    .tabulator-cell.tabulator-editable[tabulator-field="AccName"] {
        border: 1px solid #0003;
        margin-bottom: 10px;
    }

    .filter-dropdown > .filter-dropdown-class.show {
        width: 580px;
    }

    p {
        margin: 1em 0;
    }

    .button {
        -webkit-tap-highlight-color: rgba(0,0,0,0);
        position: relative;
        background: #aa0000;
        padding: 10px 15px;
        color: white;
        box-shadow: 0 2px black;
        text-decoration: none;
        border-radius: 5px;
        /*text-shadow: 0 1px 1px black;*/
    }

        .button:hover {
            top: -2px;
            box-shadow: 0 7px #000000a3;
        }

        .button:active {
            top: 1px;
            box-shadow: 0 7px #000000a3;
        }

    .unbilledbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000a3;
    }

    .overduebtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000a3;
    }

    .openbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000a3;
    }

    .paidbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000a3;
    }

    .scrollable-offcanvas {
        /* max-height: 80vh;*/ /* Adjust the maximum height as needed */
        overflow-y: auto;
    }

    .tabulator .tabulator-footer .tabulator-paginator .tabulator-page:hover {
        background-color: deepskyblue;
    }

    .tabulator .tabulator-footer {
        background-color: #fff;
        color: black;
    }

        .tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {
            background: white !important;
        }


    .offcanvas {
        /* Add position relative to its parent */
        display: flex;
        flex-direction: column;
        height: 100vh; /* Ensure offcanvas takes full viewport height */
    }

    .offcanvas-footer {
        margin-top: auto; /* Push footer to the bottom */
        width: 100%; /* Occupy full width */
    }

    .modal-footer {
        width: 100%; /* Ensure buttons occupy full width */
        padding: 10px; /* Add padding for better appearance */
    }

    .w-15 {
        width: fit-content !important;
    }

    .tabulator-row:nth-child(even) {
        background-color: white;
    }

    .separator {
        display: flex;
        align-items: center;
        text-align: center;
        color: #999;
        font-size: 12px;
    }

        .separator::before,
        .separator::after {
            content: '';
            flex: 1;
            border-bottom: 1px solid #999;
        }

        .separator:not(:empty)::before {
            margin-right: .25em;
        }

        .separator:not(:empty)::after {
            margin-left: .25em;
        }

    .tabulator-row.tabulator-selected {
        background-color: #9abcea !important;
    }
    .rating {
        display: flex;
        flex-direction: row-reverse;
        justify-content: center;
        align-items: center;
    }

        .rating input {
            display: none;
        }

        .rating label {
            cursor: pointer;
            padding: 5px;
            font-size: 24px;
        }

            .rating label:before {
                content: '\2605'; /* Unicode star character */
            }

        .rating input:checked ~ label:before {
            color: gold; /* Change color of selected stars */
        }

        .child-table-hidden {
            display: none;
        }

        .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {  
           background: #fff!important;
        }

        .tabulator .tabulator-footer {
           border-top: 1px solid #fff;
        }

         #offcanvasForExpenses
        {
            width: fit-content;
        }

          #offcanvasForBillPayments
        {
            width: 500px;
        }

         .custom-grid {
            display: grid;
            grid-template-columns: repeat(3, 180px);
            background-color: white;
            
        }  

        .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {
            border-left: 2px solid #f8f9fa;
        }

        .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {
            border-left: 2px solid #f8f9fa;
        }

</style>
@*expenses tag and navs starts*@
<div class="col-lg-2">
    <p class="fs-4 fw-bold">Expenses</p>
</div>
@Html.Hidden("FromDate", null, new { @class = "form-control text-center FromDate", @placeholder = "From Date", @autocomplete = "off", name = "FromDate" })
@Html.Hidden("ToDate", null, new { @class = "form-control text-center ToDate", @placeholder = "To Date", @autocomplete = "off", name = "ToDate" })
<ul class="nav nav-tabs mt-5">
    @*<li class="nav-item">
        <a class="nav-link  fw-semibold" aria-current="page" href="#" id="overview-id">Overview</a>
        </li>*@

          @{
            var AllChildMenu = HttpContextAccessor.HttpContext.Session.GetObject<List<UserMenuPermissionViewModel>>("UserChildMenu");
            
            var filterparentmenu = AllChildMenu.Where(x => x.ControllerName == "Accounts" && x.ActionName == "BillListQB" && x.IsView == true).ToList();
            var i = 0;
            foreach (var childitem in filterparentmenu)
            {

                if (childitem.FirstParameter != null)
                {

                    if (i == 0)
                    {
                    <li class="nav-item">
                        <a class="nav-link  fw-semibold active" href="#" id=@childitem.FirstValue>@childitem.MenuName</a>
                    </li>

                    }
                    else
                    {
                    <li class="nav-item">
                        <a class="nav-link  fw-semibold" href="#" id=@childitem.FirstValue>@childitem.MenuName</a>
                    </li>

                    }


                }

                i++;
            }
        }

    @* <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="expenses-id">Expenses</a>
    </li>
    <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="payments-id">Payments</a>
    </li>
    <li class="nav-item">
        <a class="nav-link  fw-semibold" href="#" id="suppliers-id">Suppliers</a>
    </li> *@


    @*<li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="expenses-claims-id">Expense claims</a>
        </li>
        <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="bill-id">Bills</a>
        </li>
        <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="vendors-id">Vendors</a>
        </li>
        <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="contractors-id">Contractors</a>
        </li>
        <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="mileage-id">Mileage</a>
        </li>*@
</ul>
@*expenses tag and navs ends*@

@*Bills all html tags starts*@
<div id="bills-view-id" class="d-none">
    @*bills tag and buttons starts*@
    <div class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-2">
            <p class="fs-4 fw-bold">Bills</p>
        </div>
        <div class="col-lg-10">
            <div class="float-end d-flex">
                <button id="run-report-btn" type="button" class="btn fw-bold" style="color: #0077c5;"><i class="bi bi-chat-left-quote"></i> Give feedback</button>
                <button id="run-report-btn" type="button" class="btn customize-btn fw-bold ms-3" style="">Manage recurring bills</button>
                <div class="dropdown">
                    <button class="btn btn-success dropdown-toggle fw-bold ms-3 h-100" type="button" data-bs-toggle="dropdown">
                        Add bill
                    </button>
                    <ul class="dropdown-menu" id="ul-id">
                        <li class="dropdown-item">
                            <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Upload from computer</a>
                        </li>
                        @*<li class="dropdown-item">
                            <a href="/Accounts/AddBillbyType" class="dropdown-link" style="color: black;">Create bill</a>
                            </li>
                            <li class="dropdown-item">
                            <a href="/Accounts/AddBillbyType?Type=Bill" class="dropdown-link" style="color: black;">Create bill with doctype</a>
                            </li>*@
                        <li class="dropdown-item">
                            <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Create recurring bill</a>
                        </li>
                    </ul>
                </div>
            </div>


        </div>
    </div>
    @*bills tag and buttons ends*@
    @*bills nav tab section starts*@
    <ul class="nav nav-tabs mt-5">
        <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="#" id="for-review-id">For Review <i class="bi bi-info-circle"></i></a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" id="unpaid-id">Unpaid</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" id="paid-id">Paid</a>
        </li>
    </ul>
    @*bills nav tab section ends*@

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex mt-3">
                <button id="run-report-btn" type="button" class="btn customize-btnew fw-bold" onclick="CopyBill()" style="">Batch Actions</button>
                <button id="run-report-btn" type="button" class="btn customize-btnew fw-bold ms-2" onclick="CopyBill()" style="">Filter</button>
            </div>
        </div>
        <div>
            <div class="dropdown1 mt-3 custom-grid" style="display:inline-block;" onclick="dropDownKeepOpen(event)">
                <button title="Print" class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                        aria-expanded="false">
                    <i class="bi bi-printer fs-5"></i>
                </button>
                <button title="Export to excel" class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                        aria-expanded="false">
                    <i class="bi bi-file-earmark-excel fs-5"></i>
                </button>
                <button class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                        aria-expanded="false">
                    <i class="bi bi-gear fs-5" me-1"></i>
                </button>
                <div class="dropdown-menuz" aria-labelledby="dropdownMenuButton1">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="columnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="rows" class="cursor-pointer" style="padding: 10px 0;width: 70px; ">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>
                    </div>
                </div>


            </div>

        </div>
    </div>

    @*gear icon and other two buttons ends*@

    @*tabulators starts*@
    <div id="tableContainer" class="mt-4">
        <div id="bill-table-review"></div>
        <div id="bill-table-unpaid" class="d-none" style="height:400px"></div>
        <div id="bill-table-paid" class="d-none" style="height:400px"></div>
    </div>
    @*tabulators ends*@
</div>
@*=================Bills all html tags ends=================*@

@*Expenses all html tags starts*@
<div id="expenses-view-id" class="d-none">
    @*expenses tag and buttons starts*@
    <div class="row py-3" style="background: #e9ecef6b;">
        <div class="col-md-5">
            <p class="fs-4 fw-bold">Expense Transactions</p>
        </div>
        <div class="col-md-7">
            <div class="float-end d-flex">
                <div class=" d-flex">                   
                    <div class="dropdown">
                        <a href="#" id="feedbackLink" data-bs-toggle="modal" data-bs-target="#feedbackModal">
                            <i class="bi bi-chat-left-quote me-2"></i><span class="me-3 fw-bold">Give feedback</span>
                        </a>
                        <div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered large-modal-dialog">
                                <div class="modal-content w-50 mx-auto">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="feedbackModalLabel">Provide Feedback</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <form>
                                            <div class="form-group">
                                                <label for="rating">Rate your experience:</label>
                                                <div class="rating">
                                                    <input type="radio" id="happy" name="rating" value="Happy"><label for="happy">😄</label>
                                                    <input type="radio" id="good" name="rating" value="Good"><label for="good">😊</label>
                                                    <input type="radio" id="satisfactory" name="rating" value="Satisfactory"><label for="satisfactory">😐</label>
                                                    <input type="radio" id="sad" name="rating" value="Sad"><label for="sad">😞</label>
                                                    <input type="radio" id="angry" name="rating" value="Angry"><label for="angry">😡</label>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label for="feedback">Feedback:</label>
                                                <textarea id="feedback" class="form-control" rows="3"></textarea>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <button type="button" class="btn btn-success" id="submitFeedback">Submit Feedback</button>
                                    </div>
                                </div>
                            </div>
                        </div>                       
                    </div>
                    <div>
                       <a asp-action="Paybills" asp-controller="Accounts" class="btn customize-btn fw-bold">Paybills</a>
                    </div>
                </div>

                <div class=" d-flex">
                    <div style=" margin-left: 10px; ">
                          <button type="button" class="btn btn-warning" onclick="openpendingListModal()">Pending</button>
                    </div>
                    <div style=" height: fit-content; ">
                        <button class="btn btn-success dropdown-toggle fw-bold ms-2 h-100 radius-30" type="button" data-bs-toggle="dropdown">
                            New transaction
                        </button>
                        <ul class="dropdown-menu" id="ul-id-for-expenses">
                            <li class="dropdown-item">
                                <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Time activity</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*expenses tag and buttons ends*@

    @*gear icon and other two buttons starts*@
    <div class="row">
        <div class="dropdown filter-dropdown">
            <button id="filter-btn" type="button" class="btn customize-btnew fw-bold ms-2 dropdown-toggle mt-3 px-4" data-bs-toggle="dropdown" aria-expanded="false">Filter</button>
            <div class="dropdown-menu dropdown-of filter-drop filter-dropdown-class" aria-labelledby="filter-btn" id="filter-dropdown-id">
                <form class="p-3">
                    <div class="row">
                        <div class="mb-3 col-md-5">
                            <label for="typeDropdown" class="form-label fw-bold">Type</label>
                            <select class="form-select" id="typeDropdown" style="border-radius:0;">
                                <option value="option1">All transactions</option>
                            </select>
                        </div>
                        <div class="mb-3 col-md-5"></div>
                        <div class="mb-3 col-md-2">
                            <button onclick="closeModal2()" type="button" class="btn-close" data-bs-dismiss="dropdown" aria-label="Close"></button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="mb-3 col-lg-4" id="statusDropdownParent">
                            <label for="statusDropdown" class="form-label fw-bold">Status</label>
                            <select class="form-select" id="statusDropdown" style="border-radius:0;">
                                <option value="option1">All statuses</option>
                            </select>
                        </div>
                        @*<div class="mb-3 col-lg-4" id="deliveryMethodDropdownParent">
                                <label for="deliveryMethodDropdown" class="form-label fw-bold">Delivery Method</label>
                                <select class="form-select" id="deliveryMethodDropdown" style="border-radius:0;">
                                    <option value="Any">Any</option>
                                    <option value="Print later">Print later</option>
                                </select>
                            </div>*@
                    </div>
                    <div class="row" id="fromToDateParent">
                        <div class="mb-3 col-lg-4">
                            <label for="dateDropdown" class="form-label fw-bold">Date</label>
                            <select onclick="setDateRange()" id="select2" class="form-select">
                                @*<option selected="selected" disabled="disabled">Select an Option</option>*@
                                <option value="0" selected>Select Date</option>
                                <option value="1">Since 365 days ago</option>
                                <option value="2">Custom</option>
                                <option value="3">Today</option>
                                <option value="13">Yesterday</option>
                                <option value="4">This Week</option>
                                <option value="5">This Week-to-date</option>
                                <option value="6">This Month</option>
                                <option value="8">This Quarter</option>
                                <option value="10">This Year</option>
                                <option value="15">Last Week</option>
                                <option value="17">Last Month</option>
                                <option value="19">Last Quarter</option>
                                <option value="21">Last Year</option>
                                <option value="27">Next Week</option>
                                <option value="29">Next Month</option>
                                <option value="30">Next Quarter</option>
                                <option value="30">Next Year</option>
                            </select>
                        </div>
                        <div class="mb-3 col-lg-4">
                            <label for="fromInput" class="form-label fw-bold">From</label>
                            <input class="form-control" id="start-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                        </div>
                        <div class="mb-3 col-lg-4">
                            <label for="toInput" class="form-label fw-bold">To</label>
                            <input class="form-control" id="end-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                        </div>
                    </div>
                    <div class="mb-3 col-lg-6" id="payeeDropdownParent">
                        <label for="payeeDropdown" class="form-label fw-bold">Payee</label>
                        <select class="form-select" id="payeeDropdown" style="border-radius:0;" onclick="event.stopPropagation()">
                            <option value="option1">All</option>
                        </select>
                    </div>
                    <div class="d-flex justify-content-between mt-5">
                        <button type="reset" class="btn customize-btn radius-30 fw-bold" onclick="resetForm(event)">Reset</button>
                        <button type="button" class="btn  customize-btn-another fw-bold" onclick="reloadTableData()">Apply</button>
                    </div>
                </form>
            </div>
        </div>

    </div>
    <div class="d-flex justify-content-between">
        <div style="display: flex;">
        <div class="dropdown batch-dropdown mt-3">
            <span><i class="bi bi-arrow-90deg-down mt-3 ms-3"></i></span> <button id="batch-btn" type="button" class="btn customize-btnew fw-bold ms-1 dropdown-toggle px-4" data-bs-toggle="dropdown" aria-expanded="false">Batch Actions</button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li><a class="dropdown-item disabled" href="#">Print transactions</a></li>
                <li><a class="dropdown-item disabled" href="#">Categories selected</a></li>
                <li><a class="dropdown-item disabled" href="#">Void transactions</a></li>
                <li><a id="batch-delete" class="dropdown-item" href="#">Delete transactions</a></li>
            </ul>
        </div>

        <div class="row">           
            @*<div class="d-flex mt-3">  
                <i class="bi bi-arrow-90deg-down mt-3 ms-3"></i>
                <button id="run-report-btn" type="button" class="btn customize-btnew fw-bold ms-1 dropdown-toggle" onclick="CopyBill()">Batch Actions</button>
                </div>*@
           <div class="col-md-6 col-12">
            <input type="text" class="textbox search_box ms-3 mt-3" id="searchInput1" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d;height: 40px; border-radius: 25px;padding-left: 15px;" />
           </div>

            <div class="col-md-5 col-12 text-end pt-4" style=" padding-left: 62px; ">
            <label class="ps-1"><input type="radio" name="RptType" value="PDF" checked="checked" /> PDF  </label>
            <label class="ps-1"><input type="radio" name="RptType" value="EXCEL" /> EXCEL  </label>
            <label class="ps-1"><input type="radio" name="RptType" value="WORD" /> WORD  </label>

            </div>
        
        </div>
        </div>

        <div>
            <a href="#" id="print-table" class="text-decoration-none text-black">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-xlsx" class="text-decoration-none text-black">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            @*<button title="Export to excel" class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                aria-expanded="false">
                <i class="bi bi-file-earmark-excel fs-5"></i>
                </button>*@
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                @*<button class="btn btn-white border-0" type="button">
                    <i class="bi bi-gear fs-5"></i>
                    </button>*@
                <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown1" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="expenseColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="expense-rows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                        <div class=" p-4">
                             <button id="saveExpense" class="btn btn-success">Save Filter</button>
                        </div> 

                         <div style=" padding-top: 24px; ">
                              <button class="btn btn-danger btn-sm" onclick="DeleteFilter1('Expense')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>
    </div>

    @*gear icon and other two buttons ends*@

    @*expenses tabulators starts*@
    <div id="tableContainer" class="mt-4">
        <div id="expense-table-review"></div>
    </div>
</div>
@*expenses tabulators ends*@
<div id="purchase-view-id" class="d-none">

    <div class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-3">
            <p class="fs-4 fw-bold">Purchase/GRR Analysis</p>
        </div>
        <div class="col-lg-7"></div>
        <div class="col-lg-2">
            <div class="form-check form-check-inline mt-2">
              <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1" style="font-size: 20px;" checked>
              <label class="form-check-label" for="inlineRadio1" style="font-size: 20px;">Purchase</label>
            </div>
            <div class="form-check form-check-inline mt-2">
              <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2" value="option2"  style="font-size: 20px;">
              <label class="form-check-label" for="inlineRadio2" style="font-size: 20px;">GRR</label>
            </div>
        </div>
    </div>
    <div class="row mt-2">
       <div class="col-md-2">
            <label><strong>Supplier</strong></label>
            <select id="SupplierPurchase" class="form-control" onchange="GetPurchaseList()">
                <option value="">Select Supplier</option>
            </select>
        </div>
        <div class="col-md-2">
            <label><strong>Customer</strong></label>
            <select id="CustomerPurchase" class="form-control" onchange="GetPurchaseList()">
                <option value="">Select Customer</option>
            </select>
        </div>
        <div class="col-md-2">
            <label><strong>Status</strong></label>
            <select id="StatusPurchase" class="form-control" onchange="GetPurchaseList()">
                <option value="0" selected>Select</option>
                <option value="1">Fully Received</option>
                <option value="2">Excess Received</option>
                <option value="3">Partially Received</option>
                <option value="4">Not Yet Received</option>
            </select>
        </div>
    </div>
    <div class="d-flex justify-content-end">
            <button title="Print" class="btn btn-white border-0" type="button" id="purchasePrint-pdf" style="padding: 0px;padding-bottom: 10px;" 
                    aria-expanded="false">
                <i class="bi bi-printer fs-5" style=" margin-right: 0px; "></i>
            </button>
            <button title="Export to excel" class="btn btn-white border-0" type="button" id="purchasePrint-excel" style="padding: 0px;padding-bottom: 10px;padding-left: 10px;" 
                    aria-expanded="false">
                <i class="bi bi-file-earmark-excel fs-5" style=" margin-right: 0px; "></i>
            </button>
            <div title="Settings" class="dropdown1  custom-grid" style="display:inline-block;margin-left: 10px;">
                                    
                <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown4" aria-labelledby="dropdownMenuButton-sales">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="purchaseColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="purchase-rows" class="cursor-pointer" style="padding: 10px 0;width: 70px; ">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                         <div class=" p-4">
                            <button id="savePurchase" class="btn btn-success">Save Filter</button>
                         </div> 
                          
                          <div style=" padding-top: 24px; ">
                              <button class="btn btn-danger btn-sm" onclick="DeleteFilter3('GRR')">Remove Filter</button>
                         </div> 
                        </div>


                    </div>
                </div>


            </div>

        </div>
    <div id="purchase-table" class="mt-2"></div>
</div>

@*offcanvas for Journal starts*@
           <div class="offcanvas offcanvas-end overflow-y-scroll"  tabindex="-1" id="offcanvasForExpenses" aria-labelledby="offcanvasRightLabel">
                <div class="offcanvas-header">
                    <h6 class="offcanvas-title" id="offcanvasRightLabel" ><span id="SalesCodeForInvoice"></span></h6>

                    <button onclick="clearModalData()" type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body vertical-scroll">

                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FirstDiv" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black; " id="SecondDiv" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black; " id="ThirdDiv" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FourthDiv" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FifthDiv" class="py-2">
                        
                    </div>
                    <div style="color:black;" id="SixthDiv" class="py-2">
                        
                    </div>

                    <br />
                <button type="button" id="showJournal" class="btn btn-primary" style=" width: 100px; margin-left: 15px; ">Journal</button>
                 <br />
                  <input type="hidden" id="PurchaseIdForJournal" name="PurchaseIdForJournal" value="" />
                <div id="example-table"></div>
                <br />
                </div>
                
            </div>

@*offcanvas for Journal ends*@


@*offcanvas for add supplier starts*@
<div class="offcanvas offcanvas-end scrollable-offcanvas" tabindex="-1" id="supplierOffcanvas" data-bs-backdrop="false" style="width: 50%;">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title">Add New Supplier</h5>
        <button onclick="clearOffCanvasData()" id="offcanvasCloseBtn" type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        @*<form id="supplierForm">*@
        <input type="hidden" id="Id" name="Id" value="" />
        <input type="hidden" id="SupplierFilePath" name="SupplierFilePath" value="" />
        <div class="row mb-2">
            <div class="col-md-6">
                @if (ViewBag.isMultiCurrency)
                {
                 <label id="currency_label">Currency <sup style="color:red;">*</sup></label>
                 <select id="currency" class="form-control mb-3">
                    <option value="">Select Currency</option>
                 </select>
                }
                else
                {
                <select id="currency" class="form-control mb-3 d-none">
                    <option value="">Select Currency</option>
                </select>
                }
            </div>
            <div class="col-md-6 col-6">
                    <label>Supplier Code </label>
                    <input id="supplier_code" type="text" class="form-control marginLeft" />
                    <span class="text-danger" id="SupplierCodeValidation"></span>
                </div>
        </div>
        

        <div class="border p-3 rounded shadow-sm mb-3">
            <div class="row mb-3">
                <div class="d-flex"><i class="bi bi-journal-richtext fs-4"></i><h5 class="my-2 ms-3">Name and contact</h5></div>
                <div class="col-md-2">
                    <label for="title" class="form-label">Title</label>
                    <input type="text" class="form-control" id="title" placeholder="Title">
                </div>
                <div class="col-md-2">
                    <label for="firstName" class="form-label">First Name</label>
                    <input type="text" class="form-control" id="firstName" placeholder="First Name">
                </div>
                <div class="col-md-3">
                    <label for="middleName" class="form-label">Middle Name</label>
                    <input type="text" class="form-control" id="middleName" placeholder="Middle Name">
                </div>
                <div class="col-md-3">
                    <label for="lastName" class="form-label">Last Name</label>
                    <input type="text" class="form-control" id="lastName" placeholder="Last Name">
                </div>
                <div class="col-md-2">
                    <label for="suffix" class="form-label">Suffix</label>
                    <input type="text" class="form-control" id="suffix" placeholder="Suffix">
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="supplierDisplayName" class="form-label">Supplier Display Name <sup style="color:red">*</sup></label>
                    <input type="text" class="form-control" id="supplierDisplayName" placeholder="Supplier Display Name">
                    <span class="text-danger" id="supplierDisplayName-validation"></span>
                </div>
                <div class="col-md-6">
                    <label for="companyName" class="form-label">Company Name</label>
                    <input type="text" class="form-control" id="companyName" placeholder="Company Name">
                </div>
                
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" placeholder="Email">
                </div>
                <div class="col-md-6">
                    <label for="phoneNumber" class="form-label">Phone Number </label>
                    <input type="tel" class="form-control" id="phoneNumber" placeholder="Phone Number">
                    <span class="text-danger" id="phoneNumber-validation"></span>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="mobileNumber" class="form-label">Mobile Number</label>
                    <input type="tel" class="form-control" id="mobileNumber" placeholder="Mobile Number">
                </div>
                <div class="col-md-6">
                    <label for="fax" class="form-label">Fax</label>
                    <input type="tel" class="form-control" id="fax" placeholder="Fax">
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="other" class="form-label">Other</label>
                    <input type="text" class="form-control" id="other" placeholder="Other">
                </div>
                <div class="col-md-6">
                    <label for="website" class="form-label">Website</label>
                    <input type="url" class="form-control" id="website" placeholder="Website">
                </div>
            </div>
        </div>

        <div class="border p-3 rounded shadow-sm mb-3">
            <div class="d-flex">
                <i class="bi bi-geo-alt fs-4"></i><h5 class="my-2 ms-3">Address</h5>
            </div>
            <div class="mb-3">
                <label for="street" class="form-label">Street</label>
                <textarea class="form-control" id="street" rows="4" style="width: 100%"></textarea>
            </div>

            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="city" class="form-label">City</label>
                    <input type="text" class="form-control" id="city" placeholder="City">
                </div>
                <div class="col-md-4">
                    <label for="province" class="form-label">Province</label>
                    <input type="text" class="form-control" id="province" placeholder="Province">
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="postalCode" class="form-label">Postal Code</label>
                    <input type="text" class="form-control" id="postalCode" placeholder="Postal Code">
                </div>
                <div class="col-md-4">
                    <label for="country" class="form-label">Country</label>
                    <input type="text" class="form-control" id="country" placeholder="Country">
                </div>
            </div>
        </div>

        <div class="border p-3 rounded shadow-sm mb-3">
            <div class="d-flex">
                <i class="bi bi-pencil-square fs-4"></i><h5 class="my-2 ms-3">Notes and attachments</h5>
            </div>
            <div class="mb-3">
                <label for="notes" class="form-label">Notes</label>
                <textarea class="form-control" id="notes" rows="4" style="width: 100%"></textarea>
            </div>

            <div class="mb-3">
                <label for="attachments" class="form-label">Attachments</label>
                <div class="d-flex justify-content-between" id="attachment-cross-id"><div id="attachmentsText" class="mt-3"></div><i id="clear-file" class="bi bi-x fs-4 cursor-pointer"></i></div>
                <div class="input-group">
                    <input type="file" class="form-control" id="attachments" accept=".pdf, .doc, .docx" />
                    <span class="input-group-text">Add Attachment max size 20mb</span>
                </div>
            </div>
        </div>

        <div class="border p-3 rounded shadow-sm mb-3">
            <div class="d-flex">
                <i class="bi bi-card-text fs-4"></i><h5 class="my-2 ms-3">Additional info</h5>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="businessId" class="form-label">Business ID No. / Social Insurance No.</label>
                    <input type="text" class="form-control" id="businessId" placeholder="Business ID / SIN">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="billingRate" class="form-label">Billing Rate (/hr)</label>
                    <input type="text" class="form-control" id="billingRate" placeholder="Billing Rate">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="terms" class="form-label">Terms</label>
                    <select class="form-select select2me" id="terms">
                        <option value="" selected>Default Term</option>
                        <!-- Add your dropdown options here -->
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="accountNo" class="form-label">Account no.</label>
                    <input type="text" class="form-control" id="accountNo" placeholder="Account no">
                </div>
            </div>

            <div class="mb-3">
                <label for="accounting" class="form-label">Accounting</label>
                <select class="form-select" id="accounting">
                    <option value="0" selected>Default expense category</option>
                    <!-- Add your dropdown options here -->
                </select>
            </div>

            <div class="row mb-3 opBalanceParentDiv">
                <div class="col-md-4">
                    <label for="openingBalance" class="form-label">Opening Balance</label>
                    <input type="text" class="form-control" id="openingBalance" placeholder="Opening Balance">
                </div>
                <div class="col-md-4">
                    <label for="asOf" class="form-label">As of</label>
                    <input class="form-control" id="asOf" />
                </div>
            </div>
        </div>


        @*</form>*@   
    </div>

    <div class="offcanvas-footer">
        <div class="modal-footer my-2">
            <button onclick="clearOffCanvasData()" id="offcanvasCloseBtn2" class="btn btn-danger" data-bs-dismiss="offcanvas" aria-label="Close"  style="margin-right: 5px;">Close</button>
            <button id="SupplierSaveBtn" type="submit" class="btn float-lg-end px-5 py-2 text-white fw-bolder" style="background: #2ca01c;margin-right: 15px;">Save</button>
        </div>
    </div>
</div>

@*offcanvas for add supplier ends*@
@*-------------suppliers all html tags starts--------------*@
<div id="suppliers-view-id" class="d-none">
    @*suppliers tag and buttons starts*@
    <div id="supplier-div" class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-2">
            <p class="fs-4 fw-bold">Suppliers</p>
        </div>
        <div class="col-lg-10">
            <div class="float-end d-flex">
                <div class="dropdown">
                    <button class="btn btn-success dropdown-toggle fw-bold ms-3 h-100 radius-30" type="button" data-bs-toggle="offcanvas" data-bs-target="#supplierOffcanvas">
                        New supplier
                    </button>

                    <ul class="dropdown-menu" id="ul-id-for-expenses">
                        <li class="dropdown-item">
                            <a href="/Admin/AddSupplier" class="dropdown-link" style="color: black;">Add supplier</a>
                        </li>
                    </ul>
                </div>
            </div>




        </div>

        <div class="row mb-5 ">
            <div class="col-lg-3">
                <label>Unbilled Last 365 Days</label> <br />
                <button id="" class="button unbilledbtn text-lg-start btn-unbilled-amount" style="width: 300px; height: 83px; background: #0077c5; border: 0px; ">
                    @*<span class="fs-4">Tk @ViewBag.POAmount</span> <br />
                        <span class="fs-6">@ViewBag.POCount PURCHASE ORDERS</span>*@
                    <span class="fs-4 btn-unbilled-amount" id="unbilled-amount"></span> <br />
                    <span class="fs-6 btn-unbilled-amount" id="unbilled-count"></span>
                </button>
            </div>
            <div class="col-lg-3">
                <label>Unpaid Last 365 Days</label> <br />
                <button id="" class="button overduebtn text-lg-start btn-overdue-amount" style="width: 300px; height: 83px; background-color: #FF8000; border: 0px; ">
                    <span class="fs-4 btn-overdue-amount" id="overdue-amount"></span> <br />
                    <span class="fs-6 btn-overdue-amount" id="overdue-count"></span>
                    @*<span class="fs-4">Tk @ViewBag.OverDueAmount </span> <br />
                        <span class="fs-6">@ViewBag.OverDueCount OVERDUE</span>*@
                </button>
            </div>
            <div class="col-lg-3">
                <label class="">Open Bills</label> <br />
                <button id="" class="button openbtn text-lg-start btn-open-amount" style="width: 300px; height: 83px; background-color: #BABEC5; border: 0px; ">
                    <span class="fs-4 btn-open-amount" id="open-amount"></span> <br />
                    <span class="fs-6 btn-open-amount" id="open-count"></span>
                </button>
            </div>
            <div class="col-lg-3">
                <label class="">Paid</label> <br />
                <button id="" class="button paidbtn text-lg-start btn-paid-amount" style="width: 300px; height: 83px; background-color: #7fd000; border: 0px; ">
                    <span class="fs-4 btn-paid-amount" id="paid-amount"></span> <br />
                    <span class="fs-6 btn-paid-amount" id="paid-count"></span>
                </button>
            </div>
        </div>

    </div>
    @*suppliers tag and buttons ends*@

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex mt-3">
                @*<button id="filter-btn" type="button" class="btn customize-btnew fw-bold ms-2" style="">Filter</button>*@
                <div class="dropdown filter-dropdown d-flex">
                    <div class="dropdown batch-dropdown mt-3">
                        <span><i class="bi bi-arrow-90deg-down mt-3 ms-3"></i></span> <button id="supplier-batch-btn" type="button" class="btn customize-btnew fw-bold ms-1 dropdown-toggle px-4" data-bs-toggle="dropdown" aria-expanded="false">Batch Actions</button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                            <li><a id="supplier-email" class="dropdown-item" href="#">Email</a></li>
                            <li><a id="supplier-batch-delete" class="dropdown-item" href="#">Make Inactive/Active</a></li>
                        </ul>
                    </div>
                    <input type="text" class="textbox search_box ms-2 mt-2" id="searchInput" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d; padding: 7px;border-radius: 30px;height: 45px;" />
                </div>

            </div>
        </div>

        <div style="display: flex;">
            <div class="col-md-9 col-6 divHiddenItems">
                <div class="input-group  mb-2" style=" width: 290px; margin-top: 21px;margin-left: 30px;">
                    <input type="text" class="form-control" name="date" id="daterange-btn">
                    <button id='btnDec' type="button" class="btn btn-danger btn-sm rounded-0" title='Decrement month'><i class="bi bi-calendar-minus" aria-hidden="true"></i></button>
                    <button id='btnInc' type="button" class="btn btn-primary btn-sm" title='Increment month'><i class="bi bi-calendar-plus" aria-hidden="true"></i></button>
                </div>

            </div>

            <div class="col-md-1 col-6 divHiddenItems" style=" margin-left: 2px; ">
                <div class="dropdown" style=" margin-top: 20px; ">
                    <button class="btn btn-primary dropdown-toggle radius-30" type="button" data-bs-toggle="dropdown">
                        <i class="fa fa-floppy-o "></i><span>Reports</span>
                    </button>
                    <div class="dropdown-menu" id="button-container">
                        <div class="separator">Individual Report</div>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('SupplierNotPosted')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">View Report [ Not Posted ]</span>
                        </a>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('PrintLedger')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">Ledger [ Posted ]</span>
                        </a>

                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('SupplierPerformanceIMEI')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">IMEI Wise Performance</span>
                        </a>

                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('SupplierPerformanceALL')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">Performance</span>
                        </a>

                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('Supplier')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">View</span>
                        </a>

                        <div class="separator">Group Report</div>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('AllSupplierBalance')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">All Supplier Balance</span>
                        </a>
                        <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('AllSupplierAgingBalance')">
                            <i class="icon-pencil icon-white"></i><span class="mx-2">All Supplier Aging Balance</span>
                        </a>


                        @if (BusinessTypeName == "Aluminum Manufacturer".ToLower())
                        {
                            <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('AllSupplierBalance_AllSales')">
                                <i class="icon-pencil icon-white"></i><span class="mx-2">All Supplier Details</span>
                            </a>
                            <a class="dropdown-item BtnSave" href="#" onclick="ReportPrintSupplier('AllSupplierBalance_AllSalesQty')">
                                <i class="icon-pencil icon-white"></i><span class="mx-2">Supplier Qty Ledger</span>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>



        <div>
            <button title="Print" class="btn btn-white border-0" type="button" id="" data-bs-toggle="dropdown" style=" padding-right: 0px; "
                    aria-expanded="false">
                <i class="bi bi-printer fs-5" id="supplier-download-pdf"></i>
            </button>
            <button title="Export to excel" class="btn btn-white border-0" type="button" id="" data-bs-toggle="dropdown" style=" padding-right: 0px;padding-left: 0px; "
                    aria-expanded="false">
                <i class="bi bi-file-earmark-excel fs-5" id="supplier-download-xlsx"></i>
            </button>
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <button class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" style=" padding-left: 0px; "
                        aria-expanded="false">
                    <i class="bi bi-gear fs-5" me-1"></i>
                </button>
                <div class="dropdown-menu gear-dropdown3" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="supplierColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                            <span class="fw-bold ms-3">Others</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <div class="form-check ms-3">
                                    <input class="form-check-input" type="checkbox" value="" id="include-inactive">
                                    <label class="form-check-label" for="include-inactive">
                                        Include inactive
                                    </label>
                                </div>
                            </ul>
                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="supplier-rows" class="cursor-pointer" style="padding: 10px 0;width: 70px; ">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                         <div class=" p-4">
                            <button id="saveSupplier" class="btn btn-success">Save Filter</button>
                         </div> 

                         <div style=" padding-top: 28px; ">
                               <button class="btn btn-danger btn-sm" onclick="DeleteFilter4('Supplier')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>
    </div>

    @*gear icon and other two buttons ends*@
    @*suppliers tabulators starts*@
    <div id="supplierTaableContainer" class="mt-4">
        <div id="supplier-table"></div>
    </div>
    @*suppliers tabulators ends*@
</div>




@*-------------Payments all html tags starts--------------*@
<div id="payments-view-id" class="d-none">
    @*expenses tag and buttons starts*@
    <div class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-2">
            <p class="fs-4 fw-bold">Payments</p>
        </div>
        <div class="col-lg-7"></div>
        <div class="col-md-3">
            <div class="float-end">
            <button class="btn btn-success fw-bold ms-3 radius-30" type="button" style="height: fit-content; margin-top:10px;margin-right: 25px;" data-bs-toggle="dropdown" onclick="gotoAddPaymentTypeQB()">
                    Bill Payments
                </button>
            </div>
        </div>
    </div>
    @*expenses tag and buttons ends*@

    @*gear icon and other two buttons starts*@
    <div class="row">
        <div class="dropdown payment-dropdown">
            <button id="payment-btn" type="button" class="btn customize-btnew fw-bold ms-2 dropdown-toggle mt-3 px-4" data-bs-toggle="dropdown" aria-expanded="false">Filter</button>
            <div class="dropdown-menu dropdown-of filter-drop-payment" aria-labelledby="filter-btn-btn" id="filter-btn-dropdown-id" style="width:400px;">
                <form class="p-3">
                    @*<div class="row">
                        <div class="mb-3 col-lg-4" id="statusDropdownParent">
                        <label for="statusDropdown" class="form-label fw-bold">Status</label>
                        <select class="form-select" id="statusDropdown" style="border-radius:0;">
                        <option value="option1">All statuses</option>
                        </select>
                        </div>
                        <div class="mb-3 col-lg-4" id="deliveryMethodDropdownParent">
                        <label for="deliveryMethodDropdown" class="form-label fw-bold">Delivery Method</label>
                        <select class="form-select" id="deliveryMethodDropdown" style="border-radius:0;">
                        <option value="option1">Any</option>
                        <option value="option2">Print later</option>
                        </select>
                        </div>
                        </div>*@
                    <div class="row" id="fromToDateParent">
                        <!--<div class="mb-3 col-lg-4">
                            <label for="dateDropdown" class="form-label fw-bold">Date</label>
                            <select onclick="setDateRange()" id="payment-select2" class="form-select">-->
                        @*<option selected="selected" disabled="disabled">Select an Option</option>*@
                        <!--<option value="0" selected>Select Date</option>
                                <option value="1">Since 365 days ago</option>
                                <option value="2">Custom</option>
                                <option value="3">Today</option>
                                <option value="13">Yesterday</option>
                                <option value="4">This Week</option>
                                <option value="5">This Week-to-date</option>
                                <option value="6">This Month</option>
                                <option value="8">This Quarter</option>
                                <option value="10">This Year</option>
                                <option value="15">Last Week</option>
                                <option value="17">Last Month</option>
                                <option value="19">Last Quarter</option>
                                <option value="21">Last Year</option>
                                <option value="27">Next Week</option>
                                <option value="29">Next Month</option>
                                <option value="30">Next Quarter</option>
                                <option value="30">Next Year</option>
                            </select>
                        </div>-->
                        <div class="mb-3 col-lg">
                            <label for="fromInput" class="form-label fw-bold">From</label>
                            <input class="form-control" id="payment-start-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                        </div>
                        <div class="mb-3 col-lg">
                            <label for="toInput" class="form-label fw-bold">To</label>
                            <input class="form-control" id="payment-end-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                        </div>
                    </div>
                    <div class="mb-3 col-lg-6" id="payeeDropdownParent">
                        <label for="payeeDropdown" class="form-label fw-bold">Payee</label>
                        <select class="form-select" id="payment-payeeDropdown" style="border-radius:0;" onclick="event.stopPropagation()">
                            <option value="option1">All</option>
                        </select>
                    </div>
                    <div class="d-flex justify-content-between mt-5">
                        <button type="reset" class="btn customize-btn radius-30 fw-bold" onclick="resetPaymentForm(event)">Reset</button>
                        <button type="button" class="btn  customize-btn-another fw-bold" onclick="reloadPaymentTableData()">Apply</button>
                    </div>
                </form>
            </div>
        </div>

    </div>
    <div class="d-flex justify-content-between">
        <div class="dropdown batch-dropdown mt-3 d-none">
            <span><i class="bi bi-arrow-90deg-down mt-3 ms-3"></i></span> <button id="" type="button" class="btn customize-btnew fw-bold ms-1 dropdown-toggle px-4" data-bs-toggle="dropdown" aria-expanded="false">Batch Actions</button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li><a class="dropdown-item disabled" href="#">Print transactions</a></li>
                <li><a class="dropdown-item disabled" href="#">Categories selected</a></li>
                <li><a class="dropdown-item disabled" href="#">Void transactions</a></li>
            </ul>
        </div>

        <div>
             <input type="text" class="textbox search_box ms-2 mt-4" id="searchInput2" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d; padding: 7px;border-radius: 30px;" /> 
        </div>
        <div>
            <a href="#" id="print-paymenttable" class="text-decoration-none text-black">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-paymentxlsx" class="text-decoration-none text-black">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            @*<button title="Export to excel" class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                aria-expanded="false">
                <i class="bi bi-file-earmark-excel fs-5"></i>
                </button>*@
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                @*<button class="btn btn-white border-0" type="button">
                    <i class="bi bi-gear fs-5"></i>
                    </button>*@
                <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown2" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="paymentColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="payment-rows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                         <div class=" p-4">
                           <button id="savePayment" class="btn btn-success">Save Filter</button>
                         </div> 

                         <div style=" padding-top: 24px; ">
                              <button class="btn btn-danger btn-sm" onclick="DeleteFilter2('Bill_Payment')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>
    </div>

    @*gear icon and other two buttons ends*@

    @*suppliers tabulators starts*@
    <div id="PaymentTableContainer" class="mt-4">
        <div id="payment-table"></div>
    </div>
    @*suppliers tabulators ends*@
</div>


@*offcanvas for Journal starts*@
           <div class="offcanvas offcanvas-end overflow-y-scroll"  tabindex="-1" id="offcanvasForBillPayments" aria-labelledby="offcanvasRightLabel">
                <div class="offcanvas-header">
                    <h6 class="offcanvas-title" id="offcanvasRightLabel" ><span id="CodeForBillPayments"></span></h6>

                    <button onclick="clearModalData()" type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body vertical-scroll">

                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FirstDiv1" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black; " id="SecondDiv1" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black; " id="ThirdDiv1" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FourthDiv1" class="py-2">
                        
                    </div>
                    <div style="border-bottom: 1px solid; border-bottom-color: grey; color:black;" id="FifthDiv1" class="py-2">
                        
                    </div>
                    <div style="color:black;" id="SixthDiv1" class="py-2">
                        
                    </div>

                    <br />
                <button type="button" id="paymentJournal" class="btn btn-primary" style=" width: 100px; margin-left: 15px; ">Journal</button>
                 <br />
                  <input type="hidden" id="PaymentIdForJournal" name="PaymentIdForJournal" value="" />
                <div id="payment-table1"></div>
                <br />
                </div>
                
            </div>

@*offcanvas for Journal ends*@




@*Supplier-Details and buttons starts*@
<div Id="Supplier-Details-view" class="d-none">

    <div class="row" style="margin-bottom:10px;">
        <div class="col">
            <br />
            <h6 class="cursor-pointer" id="divsupplier" style="color:blue"> << Suppliers</h6>
        </div>

        <div class="col d-flex justify-content-end">

            <div class="btn-group" style="margin-top:10px;">
                <button class="btn btn-outline-info fw-bold vi-supplier-editbtn" style="height: fit-content;">Edit</button>
                <button type="button" class="btn btn-outline-info dropdown-toggle dropdown-toggle-split" style="height: fit-content;" data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu">
                    <li class="dropdown-item">
                        <a href="#" class="dropdown-link" style="color: black;">Make Inactive</a>
                    </li>
                    <li class="dropdown-item">
                        <a href="#" class="dropdown-link" style="color: black;">marge contact</a>
                    </li>
                </ul>
            </div>

            <div class="dropdown">
                <button class="btn btn-success dropdown-toggle fw-bold ms-3 radius-30" type="button" style="height: fit-content; margin-top:10px;margin-right: 25px;" data-bs-toggle="dropdown">
                    New transaction
                </button>
                <ul class="dropdown-menu" id="ul-id-for-expensesdetail">
                    <li class="dropdown-item">
                        <a href="/Accounts/ImportTransaction" class="dropdown-link" style="color: black;">Time activity</a>
                    </li>
                </ul>
            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-md-2">
            <input type="text" class="textbox search_box" id="supplierInput" autocomplete="off" name="keywords" placeholder="Search" style="width: 200px; border: 1px solid #8080807d; padding: 7px;border-radius: 30px;" />
            <br />

            @* <input type="text" id="searchBox" class="form-control" oninput="GetSupplierAllForSideBarSearch()">
                <ul class="list-group" id="Splist">

                <!-- Add more items as needed -->
                </ul> *@
            <div id="supplier-details-supplierName"></div>
        </div>
        <div class="col-md-10">
            <div class="row py-3" style="background: #e9ecef6b;">
                <div class="d-flex">
                    <div>
                        <div class="card" style="width: 800px; margin-right: 30px;">
                            <div class="card-body">
                                <div class="d-flex" style="padding-bottom: 50px;">

                                    <div class="col-4" style="margin-right: 90px;">
                                        <p class="fs-4 fw-bold" id="vi-sup-Name"> </p>
                                        <p>
                                            <span id="vi-sup-comname"> </span> | <br />
                                            <span id="vi-sup-address"> </span>
                                        </p>

                                    </div>
                                    <div class="col-2">

                                        <a class="fs-4 fw-bold" id="vi-sup-mail"><i class="bi bi-envelope"></i> </a>
                                        <a class="fs-4 fw-bold" id="vi-sup-mob"><i class="bi bi-telephone"></i> </a>

                                    </div>

                                </div>


                            </div>
                        </div>

                    </div>

                    <div class="col-6 ">
                        <div class="text-right">

                            @* <div class="button-group">
                                <button class="btn btn-outline-info fw-bold ms-3 h-100 radius-30 vi-supplier-editbtn">Edit</button>
                                <button class="btn btn-outline-info dropdown-toggle fw-bold ms-3 h-100 radius-30" type="button" data-bs-toggle="dropdown">
                                <i class="bi bi-chevron-compact-down"></i>
                                </button>
                                <div class="dropdown">
                                <ul class="dropdown-menu" id="ul-id-for-expenses">
                                <li class="dropdown-item">
                                <a href="#" class="dropdown-link" style="color: black;">Make Inactive</a>

                                </li> <li class="dropdown-item">
                                <a href="#" class="dropdown-link" style="color: black;">marge contact</a>

                                </li>
                                </ul>
                                </div>
                                </div> *@

                            <div class="card" style="width: 300px;">
                                <div class="card-body">
                                    <h6>SUMMARY</h6>
                                    <h4 id="vi-sup-openBanlance"> 0 </h4>
                                    <h6>Open balance</h6>
                                    <h4 id="vi-sup-overdue"> 0 </h4>
                                    <h6>Overdue payment</h6>

                                </div>
                            </div>
                        </div>

                    </div>

                </div>
            </div>
            @*Supplier-Details tag and buttons ends*@
            @*gear icon and other two buttons ends*@
            <ul class="nav nav-tabs" id="sd-myTab" role="tablist">

                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Transaction List</button>

                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile-tab-pane" type="button" role="tab" aria-controls="profile-tab-pane" aria-selected="false">Supplier Details</button>

                </li>

            </ul>
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">
                    @*gear icon and other two buttons starts*@
                    <div class="row">
                        <div class="dropdown filter-dropdown">
                            <button id="filter-btn" type="button" class="btn customize-btnew fw-bold ms-2 dropdown-toggle mt-3 px-4" data-bs-toggle="dropdown" aria-expanded="false">Filter</button>
                            <div class="dropdown-menu dropdown-of filter-drop filter-dropdown-class" aria-labelledby="filter-btn" id="filter-dropdown-id">
                                <form class="p-3">
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Type</label>
                                            <select class="form-select" id="typeDropdown" style="border-radius:0;">
                                                <option value="option1">All transactions</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="mb-3 col-lg-4" id="statusDropdownParent">
                                            <label for="statusDropdown" class="form-label fw-bold">Status</label>
                                            <select class="form-select" id="statusDropdown" style="border-radius:0;">
                                                <option value="option1">All statuses</option>
                                            </select>
                                        </div>
                                        <div class="mb-3 col-lg-4" id="deliveryMethodDropdownParent">
                                            <label for="deliveryMethodDropdown" class="form-label fw-bold">Delivery Method</label>
                                            <select class="form-select" id="deliveryMethodDropdown" style="border-radius:0;">
                                                <option value="option1">Any</option>
                                                <option value="option2">Print later</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row" id="fromToDateParent">
                                        <div class="mb-3 col-lg-4">
                                            <label for="dateDropdown" class="form-label fw-bold">Date</label>
                                            <select onclick="setDateRange()" id="select2" class="form-select">
                                                @*<option selected="selected" disabled="disabled">Select an Option</option>*@
                                                <option value="0" selected>Select Date</option>
                                                <option value="1">Since 365 days ago</option>
                                                <option value="2">Custom</option>
                                                <option value="3">Today</option>
                                                <option value="13">Yesterday</option>
                                                <option value="4">This Week</option>
                                                <option value="5">This Week-to-date</option>
                                                <option value="6">This Month</option>
                                                <option value="8">This Quarter</option>
                                                <option value="10">This Year</option>
                                                <option value="15">Last Week</option>
                                                <option value="17">Last Month</option>
                                                <option value="19">Last Quarter</option>
                                                <option value="21">Last Year</option>
                                                <option value="27">Next Week</option>
                                                <option value="29">Next Month</option>
                                                <option value="30">Next Quarter</option>
                                                <option value="30">Next Year</option>
                                            </select>
                                        </div>
                                        <div class="mb-3 col-lg-4">
                                            <label for="fromInput" class="form-label fw-bold">From</label>
                                            <input class="form-control" id="start-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                                        </div>
                                        <div class="mb-3 col-lg-4">
                                            <label for="toInput" class="form-label fw-bold">To</label>
                                            <input class="form-control" id="end-date" style="border-radius:0;" onclick="keepDropdownOpened(event)" />
                                        </div>
                                    </div>
                                    <div class="mb-3 col-lg-6" id="payeeDropdownParent">
                                        <label for="payeeDropdown" class="form-label fw-bold">Payee</label>
                                        <select class="form-select" id="payeeDropdown" style="border-radius:0;" onclick="event.stopPropagation()">
                                            <option value="option1">All</option>
                                        </select>
                                    </div>
                                    <div class="d-flex justify-content-between mt-5">
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold" onclick="resetForm(event)">Reset</button>
                                        <button type="button" class="btn  customize-btn-another fw-bold" onclick="reloadTableData()">Apply</button>
                                    </div>
                                </form>
                            </div>
                        </div>

                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="dropdown batch-dropdown mt-3">
                            <span><i class="bi bi-arrow-90deg-down mt-3 ms-3"></i></span> <button id="batch-btn" type="button" class="btn customize-btnew fw-bold ms-1 dropdown-toggle px-4" data-bs-toggle="dropdown" aria-expanded="false">Batch Actions</button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                <li><a class="dropdown-item disabled" href="#">Print transactions</a></li>
                                <li><a class="dropdown-item disabled" href="#">Categories selected</a></li>
                                <li><a class="dropdown-item disabled" href="#">Void transactions</a></li>
                                <li><a id="batch-delete" class="dropdown-item" href="#">Delete transactions</a></li>
                            </ul>
                        </div>

                        <div>
                            @*<div class="d-flex mt-3">
                                <i class="bi bi-arrow-90deg-down mt-3 ms-3"></i>
                                <button id="run-report-btn" type="button" class="btn customize-btnew fw-bold ms-1 dropdown-toggle" onclick="CopyBill()">Batch Actions</button>
                                </div>*@
                        </div>
                        <div>
                            <a href="#" id="print-table" class="text-decoration-none text-black">
                                <i class="bi bi-printer fs-5"></i>
                            </a>
                            <a href="#" id="download-xlsx" class="text-decoration-none text-black">
                                <i class="bi bi-file-earmark-excel fs-5"></i>
                            </a>
                            @*<button title="Export to excel" class="btn btn-white border-0" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                aria-expanded="false">
                                <i class="bi bi-file-earmark-excel fs-5"></i>
                                </button>*@
                            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                                @*<button class="btn btn-white border-0" type="button">
                                    <i class="bi bi-gear fs-5"></i>
                                    </button>*@
                                <a href="#" class="text-decoration-none text-black" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                                   aria-expanded="false">
                                    <i class="bi bi-gear fs-5"></i>
                                </a>
                                <div class="dropdown-menu gear-dropdown" aria-labelledby="dropdownMenuButton-expense">
                                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                                        <div class="col">
                                            <span class="fw-bold ms-3">Columns</span>
                                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                                            <ul class="list-unstyled">
                                                <li>
                                                    <div id="expenseColumnList" class="custom-grid">
                                                    </div>
                                                </li>
                                            </ul>

                                        </div>

                                        <div class="ms-3">
                                            <label>Rows</label> <br />
                                            <select name="rows" id="expense-rows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                                <option value="0" disabled selected>Rows</option>
                                                <option value="5" selected>5</option>
                                                <option value="10">10</option>
                                                <option value="20">20</option>
                                                <option value="50">50</option>
                                                <option value="100">100</option>
                                                <option value="1000">1000</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>


                            </div>

                        </div>
                    </div>


                    @*Supplier-Details tabulators starts*@
                    <div id="tableContainer" class="mt-4">
                        <div id="expense-details-table-review"></div>
                    </div>
                </div>
                <div class="tab-pane fade" id="profile-tab-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">

                    <div class="row">
                        <div class="col-md-6">

                            <p><span class="fw-bold">Supplier :</span> <span id="di-Name">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Email :</span> <span id="di-Email">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Phone :</span> <span id="di-Phone">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Mobile :</span> <span id="di-Mobile">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Fax :</span> <span id="di-Fax">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Other :</span> <span id="di-Other">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Website :</span> <span id="di-Website">Mahin Bhai</span></p>
                            <hr />

                        </div>
                        <div class="col-md-6">
                            <p><button class="btn btn-outline-info fw-bold  radius-30 vi-supplier-editbtn">Edit</button></p>
                            <p><span class="fw-bold">Billing address :</span> <span id="di-Billing">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Terms :</span> <span id="di-Terms">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Company :</span> <span id="di-Company">Mahin Bhai</span></p><hr />
                            <p><span class="fw-bold">Notes :</span> <span id="di-Notes">Mahin Bhai</span></p><hr />

                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>
</div>

<div class="col-md-4  col-4">
    <div id="pendingListModal" class="modal">
        <div class="modal-content " id="modal-content3">
            <div class="row">
                <div class="col-md-11 col-11">
                    <p><strong>Pending Sales Transaction</strong></p>
                </div>
                <div class="col-md-1 col-1">
                    <i class="bi bi-x-square-fill" style="color: red; font-size: 20px;" onclick="closeModal()"></i>
                </div>
            </div>

            <div id="pendingTransaction"></div>
        </div>
    </div>
</div>
@*Supplier-Details all html tags ends*@


@section Scripts {

    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsVoucherReport.js" asp-append-version="true"></script>
    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script type="text/javascript">


        var pageSize = 10;
        $(document).ready(function () {
            ExpenseGear();
            PaymentGear();
            PurchaseGear();
            supplierGear();                      
        });

        function customCheckBoxFormatter(cell, formatterParams, onRendered) {
            return '<input type="checkbox" class="custom-checkbox">';
        }

        var globalFieldsForPaymentList = [
                    { title: "", field: "CheckBox",width: 15, headerHozAlign: "left",vertAlign: "middle", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true },
                    {
                        title: "DATE", headerHozAlign: "center", field: "PaymentDate",width:110, hozAlign: "left",visible: true,vertAlign: "middle",
                        formatter: function(cell, formatterParams, onRendered) {
                        const date = new Date(cell.getValue());
                        // Array of month abbreviations
                        const monthNames = [
                            "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                        ];
                        const day = date.getDate();
                        const monthIndex = date.getMonth();
                        const monthAbbrev = monthNames[monthIndex];
                        const year = date.getFullYear().toString().substr(-2);
                        const formattedDate = `${day}-${monthAbbrev}-${year}`;

                        return formattedDate;
                    },
                        cellClick: function (e, cell) {
                        openOffcanvas1(cell.getRow().getData());
                    } 

                    },
                    /*{ title: "TYPE", headerHozAlign: "left", field: "DocType", width: "14px", hozAlign: "left", },*/
                    { title: "NO.", field: "TransactionCode",  headerHozAlign: "center", hozAlign: "left",visible: true,vertAlign: "middle",
                        formatter: function(cell, formatterParams, onRendered) {
                            return "<strong>" + cell.getValue() + "</strong>";
                        },
                        cellClick: function (e, cell) {
                            openOffcanvas1(cell.getRow().getData());
                        } 
                    },
                    { title: "PAYEE", headerHozAlign: "center", field: "SupplierName", hozAlign: "left",visible:true,vertAlign: "middle",
                        cellClick: function (e, cell) {
                            openOffcanvas1(cell.getRow().getData());
                        } 
                    },
                    { title: "MEMO", headerHozAlign: "center", field: "Remarks", hozAlign: "left", width:130,visible:true,vertAlign: "middle",
                        cellClick: function (e, cell) {
                            openOffcanvas1(cell.getRow().getData());
                        } 
                    },
                    {
                        title: "Total", headerHozAlign: "center", hozAlign: "right", field: "Amount",vertAlign: "middle", movable: false, headerSort: false, visible: true, 
                        formatter: "money", // Use a custom money formatter
                        formatterParams: {
                            precision: 2, // Number of decimal places
                            symbol: "",   // Currency symbol (change as needed)
                            thousand: ",", // Thousands separator
                            decimal: ".",  // Decimal point
                        },
                        bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                        bottomCalcFormatterParams: {
                            precision: 2, // Number of decimal places
                            symbol: "",   // Currency symbol (change as needed)
                            thousand: ",", // Thousands separator
                            decimal: ".",  // Decimal point
                        },
                            cellClick: function (e, cell) {
                            openOffcanvas1(cell.getRow().getData());
                        } 
                    },
                    //{ title: "STATUS", headerHozAlign: "left", field: "StatusPosted", width: "10px", hozAlign: "left", },
                        { title: '<i class="bi bi-paperclip"></i>', headerHozAlign: "center", field: "FilePath", hozAlign: "left",vertAlign: "middle", visible: true, formatter: linkFormatter },
                    //{ title: "PHONE", field: "Phone", headerSort: false, frozen: false, width: '30px', hozAlign: "left", headerHozAlign: "left" },
                    //{ title: "EMAIL", headerHozAlign: "left", field: "Email", width: "14px", hozAlign: "left", },
                        { title: "Status", field: "isPost",vertAlign: "middle",visible: true,hozAlign: "center",                                                                
                            formatter: function(cell, formatterParams, onRendered) {
                            var value = cell.getValue();
                            if (!value) {                                     
                                return '<span style="color: red;">Not Posted</span>';
                            } else {                                     
                                return '<span style="color: #06d906;">Posted</span>';
                            }
                            },

                                cellClick: function (e, cell) {
                        openOffcanvas1(cell.getRow().getData());
                        } 
                    },
                    { title: "App. Stage",field: "ApprovalStage", headerHozAlign: "left", width:130,vertAlign:"middle",visible: true, hozAlign: "left" },
                {
                title: "ACTIONS", field: "Paymentbutton", headerHozAlign: "left", headerSort: false, hozAlign: "left",vertAlign: "middle", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                        var data = cell.getData();                                                                
                        //console.log("payment data", data);                                                                                   
                        // var myUrlGet = `@Url.Action("AddPaymentTypeQB", "Admin")?TransactionId=${data.Id}&SupplierId=${data.SupplierId}`;
                        // var ViewUrlGet = `@Url.Action("AddPaymentTypeQB", "Admin")?TransactionId=${data.Id}&SupplierId=${data.SupplierId}&isCopy=2`; 
                        var myUrlGet = `@Url.Action("EditPaymentTypeQB", "Accounts")?TransactionId=${data.Id}`;
                        var ViewUrlGet = `@Url.Action("EditPaymentTypeQB", "Accounts")?TransactionId=${data.Id}&isCopy=2`;   
                        var inActive = `deletePaymentUrl(${data.Id}) `
                        var active = `setActiveUrl(${data.Id}) `
                        var transactionReportViewUrl = '@Url.Action("TransactionVoucherViewReport", "Admin")?TransactionId=' + data.Id;
                        var viewEditLink = data.isPost === true ? ViewUrlGet : myUrlGet;

                    var printHtml = `
                                    <a href='${transactionReportViewUrl}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-printer pe-1'></i> <span>Print</span>  <br />
                                    </a>
                                            <div class='dropdown-divider m-0'></div>
                                `;
                    var copyHtml = `
                                    <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-c-circle pe-1'></i> <span>Copy</span>  <br />
                                    </a>
                                            <div class='dropdown-divider m-0'></div>
                                `;

                        var editHtml = `
                                            <a href='${myUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                            </a>
                                            <div class='dropdown-divider m-0'></div>
                                `;

                    var viewHtml = `
                                            <a href='${ViewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                            </a>

                                `;
                    var deleteHtml = `
                    <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                        <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                    </a>
                                                            
                    `;


                                            var voidHtml = `
                                    <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-pencil-square pe-1'></i> <span>Void</span>  <br />
                                    </a>

                                `;


                                            //var statusDependentHtml = data.isPost ? viewHtml + deleteHtml : editHtml + deleteHtml;
                                            var statusDependentHtml = data.isPost ? viewHtml : printHtml  + editHtml + deleteHtml/* + voidHtml*/;

                    var html = `
                                    <div class='dropdown ms-1'>
                                        <a href='${viewEditLink}' target='_blank' class='fw-bolder mt-2'>View Payment</a>
                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                        <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                            ${statusDependentHtml}

                                        </ul>
                                    </div>
                                `;

                    return html;
                    },
                    visible: true,cellClick: function(e, cell) {
                // Add a custom class to the cell when it's clicked
                cell.getElement().classList.add('active-cell');
                },
            },
                ]


                var globalFields1 = [  
                                        //{ title: "", field: "CheckBox", headerHozAlign: "left", width: "2px", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true },
                                        {
                                            title: "", // Title for the checkbox column
                                            field: "selected", // Field for the checkbox value in your data
                                            headerSort: false, // Disable sorting for the checkbox column
                                            formatter: "rowSelection", // Use the built-in row selection formatter
                                            visible: true,
                                            width: 30, // Adjust the width as needed
                                            vertAlign:"middle",
                                        },
                                            {
                                                title: "Details", field: "ButtonDetails", width: 50, headerHozAlign: "center", hozAlign: "center",vertAlign: "middle", formatter: customDetailsButtonFormatter, headerSort: false, visible: true
                                            },
                                        {
                                            title: "DATE", headerHozAlign: "left", field: "PurchaseDateString",visible: true, vertAlign:"middle", hozAlign: "left",
                                            formatter: function (cell, formatterParams, onRendered) {
                                                // Get the original date value from the cell
                                                const originalDate = cell.getValue();

                                                // Check if the originalDate is a valid date
                                                if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                    // Format the date as "YYYY-MM-DD"
                                                    const formattedDate = originalDate.toISOString().split('T')[0];
                                                    return formattedDate;
                                                } else {
                                                    // Return the original value if it's not a valid date
                                                    return originalDate;
                                                }
                                            },
                                                 cellClick: function (e, cell) {
                                            openOffcanvas(cell.getRow().getData());
                                        } 
                                        },
                                        {
                                            title: "DUE DATE", headerHozAlign: "left", field: "DueDate", hozAlign: "left", visible:false,
                                            formatter: function (cell, formatterParams, onRendered) {
                                                // Get the original date value from the cell
                                                const originalDate = cell.getValue();

                                                // Check if the originalDate is a valid date
                                                if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                    // Format the date as "YYYY-MM-DD"
                                                    const formattedDate = originalDate.toISOString().split('T')[0];
                                                    return formattedDate;
                                                } else {
                                                    // Return the original value if it's not a valid date
                                                    return originalDate;
                                                }
                                            }
                                        },
                                        { title: "BALANCE", headerHozAlign: "left", field: "NetAmount",  hozAlign: "left", visible: false, },
                                        { title: "STATUS", headerHozAlign: "left", field: "DocStatus",  hozAlign: "left", visible: false, },
                                        { title: "TYPE", headerHozAlign: "left", field: "DocType", vertAlign:"middle",visible: true, hozAlign: "left",
                                           cellClick: function (e, cell) {
                                            openOffcanvas(cell.getRow().getData());
                                        } 
                                        },
                                        { title: "NO.", field: "PurchaseCode", frozen: false,vertAlign:"middle",visible: true, hozAlign: "left", headerHozAlign: "left",
                                        formatter: function(cell, formatterParams, onRendered) {
                                            return "<strong>" + cell.getValue() + "</strong>";
                                        },
                                           cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            } 
                                        },
                                        { title: "PAYEE", headerHozAlign: "left", field: "SupplierName",vertAlign:"middle",visible: true, hozAlign: "left",
                                           cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            } 
                                        },
                                        { title: "MEMO", headerHozAlign: "left", field: "Remarks", vertAlign:"middle",hozAlign: "left",visible:false },
                                        { title: "Total Before TAX", headerHozAlign: "right", field: "BeforeTax", vertAlign:"middle",hozAlign: "right",visible:true,
                                           cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            }                                                                               
                                        
                                        },
                                        { title: "TAX", headerHozAlign: "left", field: "TotalVat", vertAlign:"middle",hozAlign: "right",visible:true,
                                           cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            } 
                                        },
                                            {
                                                title: "TOTAL", headerHozAlign: "right", field: "NetAmount",vertAlign:"middle",visible: true, hozAlign: "right", bottomCalc: "sum", formatter: "money", // Use a custom money formatter
                                                formatterParams: {
                                                    precision: 2, // Number of decimal places
                                                    symbol: "",   // Currency symbol (change as needed)
                                                    thousand: ",", // Thousands separator
                                                    decimal: ".",  // Decimal point
                                                },
                                                bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                                bottomCalcFormatterParams: {
                                                    precision: 2, // Number of decimal places
                                                    symbol: "",   // Currency symbol (change as needed)
                                                    thousand: ",", // Thousands separator
                                                    decimal: ".",  // Decimal point
                                                },

                                                   cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            } 
                                            },
                                        { title: "STATUS", headerHozAlign: "left", field: "StatusPosted",width:110,vertAlign:"middle",visible: true, hozAlign: "left",
                                           cellClick: function (e, cell) {
                                openOffcanvas(cell.getRow().getData());
                            } 
                                        },
                                        { title: "App. Stage",field: "Status", headerHozAlign: "left",vertAlign:"middle",visible: true, hozAlign: "left" },

                                        { title: '<i class="bi bi-paperclip"></i>', headerHozAlign: "center", field: "FilePath",vertAlign:"middle", hozAlign: "left", visible: false, formatter: linkFormatter },
                                        {
                                    title: "ACTIONS", field: "button", headerHozAlign: "center", headerSort: false, hozAlign: "right",frozen:true, resizable: false,  formatter: function (cell, formatterParams, onRendered) {
                                                                var data = cell.getData();
                                                                //console.log("see data::", data);
                                                                //var myUrlGet = `editAccountHead(${data.Id})`;                                                               
                                                var myUrlGet = `@Url.Action("EditBillByType", "Accounts")?Type=${data.DocType}&PurchaseId=${data.Id}`;
                                                var ViewUrlGet = `@Url.Action("EditBillByType", "Accounts")?Type=${data.DocType}&PurchaseId=${data.Id}&isCopy=2`;
                                                var makePayment =  '@Url.Action("AddPaymentTypeQB", "Accounts")?Type=Payment' + '&PurchaseId=' + data.Id + '&SupplierId=' + data.SupplierId;

                                                var copyBill = `@Url.Action("EditBillByType", "Accounts")?Type=Purchase Order&PurchaseId=${data.Id}&CopyBill=1`;
                                                //var copyBill = '/Accounts/AddBillByType?Type=Purchase Order' + '&PurchaseId=' + data.Id + '&CopyBill=1';
                                               // var copyStockAdjustment = '/Accounts/AddBillByType?Type=Stock Adjustment' + '&PurchaseId=' + data.Id ;
                                                var copyStockAdjustment = `@Url.Action("EditBillByType", "Accounts")?Type=Stock Adjustment&PurchaseId=${data.Id}`;
                                                                var inActive = `setInactiveUrl(${data.Id}) `
                                                var active = `setActiveUrl(${data.Id}) ` //&ReportType=Purchase Invoice

                                                var myUrlPdf = '@Url.Action("CustomFormStylePreview", "Admin")?type=RunningExpnesesReport&id=' + data.Id;

                                                var viewEditLink = data.isPosted === true ? ViewUrlGet : myUrlGet;

                                        var viewCustomForm = `
                                                        <a href='${myUrlPdf}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>    
                                                            <i class='bi bi-printer pe-1'></i> <span>Print PDF</span>
                                                        </a>
                                                                <div class='dropdown-divider m-0'></div>
                                                    `;

                                        var viewReportOne = `
                                                        <a href='@Url.Action("PurchaseInvoiceReport", "Purchase")?PurchaseId=${data.Id}&&ReportStyle=1' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                            <i class='bi bi-eye pe-1'></i> <span>style one</span>
                                                        </a>
                                                                <div class='dropdown-divider m-0'></div>
                                                    `;

                                        var viewReportTwo = `
                                                        <a href='@Url.Action("PurchaseInvoiceReport", "Purchase")?PurchaseId=${data.Id}&&ReportStyle=2' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                            <i class='bi bi-eye pe-1'></i> <span>style two</span>
                                                        </a>
                                                                <div class='dropdown-divider m-0'></div>
                                                    `;

                                        var viewReport = `
                                                        <a href='@Url.Action("PurchaseInvoiceViewReport", "Purchase")?PurchaseId=${data.Id}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                            <i class='bi bi-eye pe-1'></i> <span>View report</span>
                                                        </a>
                                                                <div class='dropdown-divider m-0'></div>
                                                    `;

                                        var printHtml = `
                                                        <a href='@Url.Action("PurchaseReport", "Purchase")?PurchaseId=${data.Id}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                            <i class='bi bi-printer pe-1'></i> <span>Print</span>
                                                        </a>
                                                                <div class='dropdown-divider m-0'></div>
                                                    `;
                                        var copyHtml = `
                                                        <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                            <i class='bi bi-c-circle pe-1'></i> <span>Copy</span>
                                                        </a>
                                                                <div class='dropdown-divider m-0'></div>
                                                    `;

                                        var viewHtml = `
                                                                <a href='${ViewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                                <i class='bi bi-eye pe-1'></i> <span>View</span>
                                                                </a>

                                                    `;
                                                var deleteHtml = `
                                        <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                            <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span>
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;
                                                                var voidHtml = `
                                                        <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                            <i class='bi bi-pencil-square pe-1'></i> <span>Void</span>
                                                        </a>

                                                    `;

                                                var edit = `
                                                        <a href='${myUrlGet}'  target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i><span class='ms-1 mt-2'>Edit</span>
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                                    `;

                                                                //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                                                var statusDependentHtml = data.isPosted ? viewHtml : viewCustomForm + viewReportOne + viewReportTwo +viewReport + printHtml  + edit + deleteHtml/* + voidHtml*/;
                                                var html;
                                                if (data.DocType === "Bill") {
                                                    html = `
                                                        <div class='dropdown ms-1'>
                                                            <a  href='${makePayment}' target='_blank' class='fw-bolder mt-2'>Make payment</a>
                                                            <button class='btn dropdown-toggle' type='button' id='dropdown-menu' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                                ${statusDependentHtml}

                                                            </ul>
                                                        </div>
                                                    `;
                                                }
                                                if (data.DocType === "Purchase Order" ) {
                                                    html = `
                                                        <div class='dropdown ms-1'>
                                                            <a  href='${copyBill}' target='_blank' class='fw-bolder mt-2'>Copy Bill</a>
                                                            <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                                ${statusDependentHtml}

                                                            </ul>
                                                        </div>
                                                    `;
                                                }
                                                if (data.DocType === "Stock Adjustment") {
                    html = `
                        <div class='dropdown ms-1'>
                                    <a  href='${copyStockAdjustment}' target='_blank' class='fw-bolder mt-2'>Copy Bill</a>
                            <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                ${statusDependentHtml}

                            </ul>
                        </div>
                    `;
                }
                                                //if (data.DocType === "Purchase Payment" || data.DocType === "Expense") {
                                                //    html = `
                                                //      <div class='dropdown ms-1'>
                                                //          <a  href='${copyBill}' target='_blank' class='fw-bolder mt-2'>Copy Bill</a>
                                                //          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                //         <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                //              ${statusDependentHtml}

                                                //          </ul>
                                                //      </div>
                                                //  `;
                                                //}
                                                if (data.DocType === "Supplier credit" || data.DocType === "Purchase Payment" || data.DocType === "Expense" || data.DocType === "Cheque" || data.DocType ==="Supplier PO"|| data.DocType ==="GRR") {
                                                    html = `
                                                        <div class='dropdown ms-1'>
                                                            <a href='${viewEditLink}' target='_blank' class='fw-bolder mt-2'>View/Edit</a>
                                                            <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                                ${statusDependentHtml}

                                                            </ul>
                                                        </div>
                                                    `;
                                                }


                                        return html;
                                        },
                                        visible: true,cellClick: function(e, cell) {
                                    // Add a custom class to the cell when it's clicked
                                    cell.getElement().classList.add('active-cell');
                                    },
                                },
                            ]

        
         var SupplierGlobalFields = [
                        {
                            title: "", // Title for the checkbox column
                            field: "selected1", // Field for the checkbox value in your data
                            headerSort: false, // Disable sorting for the checkbox column
                            visible: true,
                            formatter: "rowSelection", // Use the built-in row selection formatter
                            hozAlign: "center", // Center-align the checkboxes
                            width: 70, // Adjust the width as needed
                            vertAlign:"middle",
                        },
                        //{
                        //    title: "SUPPLIER/COMPANY",
                        //    headerHozAlign: "left",
                        //    field: "SupplierName",
                        //    vertAlign:"middle",
                        //    //width: "20px",
                        //    hozAlign: "left",
                        //    formatter: function (cell, formatterParams, onRendered) {
                        //        // Get the data for the current row
                        //        var rowData = cell.getRow().getData();

                        //        // Create a div to hold the content and icon
                        //        var container = document.createElement("div");
                        //        container.style.display = "flex";
                        //        container.style.alignItems = "center";
                        //        // find-sup
                        //        // Create a span for the content
                        //        var contentSpan = document.createElement("span");
                        //        contentSpan.textContent = rowData.SupplierName;
                        //        contentSpan.style.marginRight = "5px"; // Adjust the margin as needed
                        //       contentSpan.style.color="black";
                        //       contentSpan.style.fontWeight = "bold";
                        //        contentSpan.setAttribute("onclick", `GetCustomerDetails(${rowData.Id})`);
                        //        // Create the icon
                        //        var icon = document.createElement("i");
                        //        icon.className = "bi bi-envelope";

                        //        // Create an anchor element and set its href attribute
                        //        var link = document.createElement("a");
                        //        link.href = "mailto:" + rowData.Email; // Assuming the email is in the 'Email' column
                        //        link.appendChild(icon); // Append only the icon to the link

                        //        // Append the content and the anchor (containing the icon) to the container
                        //        container.appendChild(contentSpan);
                        //        container.appendChild(link);

                        //        return container;
                        //    },
                        //},
                        {
                            title: "SUPPLIER/COMPANY",
                            headerHozAlign: "left",
                            field: "SupplierNames",
                            vertAlign: "middle",
                            hozAlign: "left",
                            visible: true,
                            formatter: function (cell, formatterParams, onRendered) {
                                // Get the data for the current row
                                var rowData = cell.getRow().getData();

                                // Create a div to hold the content
                                var container = document.createElement("div");
                                container.style.display = "flex";
                                container.style.flexDirection = "column"; // Display content in a column

                                // Create a span for the SupplierName
                                var supplierSpan = document.createElement("span");
                                supplierSpan.textContent = rowData.SupplierNames;
                                supplierSpan.style.marginBottom = "5px"; // Adjust the margin as needed
                                supplierSpan.style.color = "black";
                                supplierSpan.style.fontWeight = "bold";
                                supplierSpan.setAttribute("onclick", `GetCustomerDetails(${rowData.Id})`);

                                // Create a span for the CompanyName
                                var companySpan = document.createElement("span");
                                companySpan.textContent = rowData.CompanyName;
                                companySpan.style.color = "#727272"; // Adjust the color as needed

                                // Append the spans to the container
                                container.appendChild(supplierSpan);
                                container.appendChild(companySpan);

                                return container;
                            },
                        },
                        { title: "Supplier Code",vertAlign:"middle", headerHozAlign: "left", field: "SupplierCode"/*, width: "30px"*/,visible: true, hozAlign: "center", },
                        { title: "ADDRESS", headerHozAlign: "center", field: "PrimaryAddress",vertAlign:"middle",visible: true, hozAlign: "left", },
                        { title: "PHONE", field: "Phone",vertAlign:"middle", headerSort: false, frozen: false/*, width: '30px'*/,visible: true, hozAlign: "left", headerHozAlign: "center" },
                        { title: "EMAIL", headerHozAlign: "center",vertAlign:"middle", field: "Email"/*, width: "14px"*/,visible: true, hozAlign: "left", },
                        { title: "Currency", headerHozAlign: "center",vertAlign:"middle", field: "Currency"/*, width: "14px"*/,visible: true, hozAlign: "center", },

                        { title: "OPEN BALANCE", field: "ClBalance", hozAlign: "right",vertAlign:"middle", movable: false, headerSort: false, visible: true,
                            formatter: "money",
                            formatterParams: {
                            precision: 2,
                            thousand: ",",
                            symbol: "",
                            },
                        },
                   {
                    title: "ACTIONS", field: "Supplierbutton", headerHozAlign: "center", headerSort: false,vertAlign:"middle", hozAlign: "right", resizable: false/*, width: "9px"*/, formatter: function (cell, formatterParams, onRendered) {
                                                var data = cell.getData();
                                                ////console.log("see data::", data);
                                                //var myUrlGet = `editAccountHead(${data.Id})`;
                                                var myUrlGet = '@Url.Action("Editsupplier", "Admin")?SupplierId=' + data.Id;

                                                var CreateExpenseVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Expense&' + 'SupplierId=' + data.Id;
                                                var CreateBillVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Bill&' + 'SupplierId=' + data.Id;
                                                var CreateChequeVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Cheque&' + 'SupplierId=' + data.Id;
                                                var CreatePOVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Purchase Order&' + 'SupplierId=' + data.Id;
                                                var PaymentVar = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=Payment&FromSupplier=1&' + 'SupplierId=' + data.Id;

                                                var Edit = `editSupplier(${data.Id})`;
                                                var Delete = `setDeleteUrl(${data.Id})`
                                                var active = `setActiveUrl(${data.Id}) `
                                                var viewEdit = `
                                        <a onclick=${Edit} href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;

                                                var deleteHtml = `
                        <a onclick='${Delete}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                            <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                        </a>
                                <div class='dropdown-divider m-0'></div>
                                        `;
                                                var createBill = `
                                    <a href='${CreateBillVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-receipt pe-1'></i> <span>Create bill</span>  <br />
                                    </a>
                                    <div class='dropdown-divider m-0'></div>
                                `;

                                                var createExpense = `
                                    <a href='${CreateExpenseVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-receipt pe-1'></i> <span>Create expense</span>  <br />
                                    </a>
                                    <div class='dropdown-divider m-0'></div>
                                `;

                                                var writeCheque = `
                                    <a href='${CreateChequeVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-receipt pe-1'></i> <span>write Cheque</span>  <br />
                                    </a>
                                    <div class='dropdown-divider m-0'></div>
                                `;

                                                var createPurchaseOrder = `
                                    <a href='${CreatePOVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-receipt pe-1'></i> <span>create Purchase Order</span>  <br />
                                    </a>
                                    <div class='dropdown-divider m-0'></div>
                                `;
                                                var makeInactive = `
                                        <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>make Inactive</span>  <br />
                                        </a>
                                            <div class='dropdown-divider m-0'></div>
                                    `;
                                    var statusDependentHtml = viewEdit + createExpense + writeCheque + createPurchaseOrder + makeInactive + deleteHtml;
                                    var statusDependentHtmlAnother =viewEdit + deleteHtml + createBill + createExpense;
                                                var html;
                                                if (data.ClBalance == 0) {
                                                    html = `
                                        <div class='dropdown ms-1'>
                                            <a href='${CreateBillVar}' class='fw-bolder mt-2'>Create Bill</a>
                                            <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' >
                                                ${statusDependentHtml}

                                            </ul>
                                        </div>
                                    `;
                                                }
                                                else {
                                                    html = `
                                        <div class='dropdown ms-1'>
                                            <a href='${PaymentVar}' class='fw-bolder mt-2'>Make Payment</a>
                                            <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' >
                                                ${statusDependentHtmlAnother}

                                            </ul>
                                        </div>
                                    `;

                                                }


                        return html;
                        },
                        visible: true,cellClick: function(e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                    },
                },
           ]


            var globalFieldsPurchase = [  
                    { title: "Item Code", headerHozAlign: "left", field: "ItemCode",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "Item Name", headerHozAlign: "left", field: "ItemName",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "Item Category", headerHozAlign: "left", field: "ItemCategory",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "Item Description", headerHozAlign: "left", field: "ItemDescription",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "Unit", headerHozAlign: "left", field: "Unit",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "Color", headerHozAlign: "left", field: "Color",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "Unit Cost", headerHozAlign: "left", field: "UnitCost",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "BDPO", headerHozAlign: "left", field: "BDPO",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "Buyer Name", headerHozAlign: "left", field: "BuyerName",  hozAlign: "center", visible: true, headerFilter: "input"},
                    { title: "Quantity", headerHozAlign: "left", field: "Quantity",  hozAlign: "center", visible: true, headerFilter: "input"},
                    {
                        title: "DATE", headerHozAlign: "left", field: "PurchaseDate", vertAlign:"middle",width: 105,visible: true, hozAlign: "left"
                    }
        ]


        function gotoAddPaymentTypeQB() {
            var editUrl = '@Url.Action("AddPaymentTypeQB", "Accounts")?Type=Payment&PurchaseId=0&SupplierId=0';
            window.location.href = editUrl;
        }

        //=======feedback functionaloties starts=================
        document.addEventListener('DOMContentLoaded', function () {
            const feedbackForm = document.querySelector('#feedbackModal form');
            const submitButton = document.querySelector('#submitFeedback');

            feedbackForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const rating = document.querySelector('input[name="rating"]:checked').value;
                const feedback = document.querySelector('#feedback').value;

                console.log('Rating: ' + rating);
                console.log('Feedback: ' + feedback);

                // Close the modal (assuming you're using Bootstrap)
                const feedbackModal = new bootstrap.Modal(document.getElementById('feedbackModal'));
                feedbackModal.hide();
            });

            // Add an event listener for the "Submit Feedback" button click
            submitButton.addEventListener('click', function () {
                // Trigger the form submission
                feedbackForm.submit();
            });
        });


                $("#submitFeedback").click(function () {
            var selectedRating = $("input[name='rating']:checked").val();
            var feedback = $("#feedback").val();

            if (selectedRating) {
                // A rating is selected, you can now use the 'selectedRating' variable
                console.log("Selected Rating:", selectedRating);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("InsertFeedback", "Sales")',
                    type: 'POST', // or 'GET' depending on your controller method
                    data: {
                        rating: selectedRating,
                        feedback: feedback
                    },
                    success: function (response) {
                        // Handle the response from the server
                        console.log("Response from server:", response);
                        toastr.success(response.message, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle any errors that occur during the AJAX request
                        console.error("AJAX Error:", error);
                    }
                });
            } else {
                // No rating is selected
                console.log("No rating selected");
            }

            // You can also use the 'feedback' variable to send the feedback along with the rating.
            console.log("Feedback:", feedback);
        });


        //=======feedback functionaloties ends===================



                                    const today = new Date();
                                    const OpeningDate = document.getElementById('asOf');

                                    // Get day, month, and year from today's date
                                    const day = String(today.getDate()).padStart(2, '0');
                                    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                                    const month = monthNames[today.getMonth()];
                                    const year = today.getFullYear();

                                    // Format the date as dd-Mon-yyyy
                                    const formattedDate = `${day}-${month}-${year}`;

                                    // Set the default value of the input field to the formatted date
                                    OpeningDate.value = formattedDate;


                                            //======add supplier offcanvas all functioanlities form starts=======
                                            var supplierOffcanvas = new bootstrap.Offcanvas(document.getElementById('supplierOffcanvas'));
                                            $("#clear-file").on("click", function () {
                                                $("#attachmentsText").text("");
                                                $("#attachment-cross-id").addClass("d-none");
                                                document.getElementById("SupplierFilePath").value = "";
                                            })
                                            var fileInput = $('input[type=file]')[0];


                                            // populate terms dropdown starts
                                            $.ajax({
                                                url: '@Url.Action("GetTerms", "Admin")',
                                                success: function (data) {
                                                    ////console.log("term ajax data::", data);
                                                    const select = document.querySelector('#terms');

                                                    //while (select.options.length > 2) {
                                                    //    select.options[2].remove();
                                                    //}

                                                    for (var i = 0; i < data.length; i++) {
                                                        const option = document.createElement('option');
                                                        ////console.log(" data[i]::", data[i]);
                                                        option.value = data[i].Value;
                                                        option.text = data[i].Text;
                                                        // You can add data attributes to the option element if needed
                                                        option.setAttribute('DueInFixedDays', data[i].DueInFixedDays);
                                                        select.appendChild(option);
                                                    }
                                                }
                                            });
                                            // populate terms dropdown ends

                                            // populate expense head dropdown starts
                                            $.ajax({
                                                url: '@Url.Action("GetExpenseHeadList", "Admin")',
                                                success: function (data) {
                                                    ////console.log("expense head  ajax data::", data);
                                                    const select = document.querySelector('#accounting');

                                                    for (var i = 0; i < data.length; i++) {
                                                        const option = document.createElement('option');
                                                        ////console.log(" data[i]::", data[i]);
                                                        option.value = data[i].Value;
                                                        option.text = data[i].Text;
                                                        // You can add data attributes to the option element if needed
                                                        option.setAttribute('DueInFixedDays', data[i].DueInFixedDays);
                                                        select.appendChild(option);
                                                    }
                                                }
                                            });
                                            // populate expense head dropdown ends

                                                        $("#SupplierSaveBtn").click(function () {
                                                            //   var displayName = $("#supplierDisplayName").val();
                                                            // // Check if display name is empty or contains only whitespace
                                                            // if (displayName.trim() === '') {
                                                            //     $("#validationMessage").css("display", "block");

                                                            // }
                                                            SaveSupplier();
                                                            clearOffCanvasData();
                                                        });

                                                        // $("#phoneNumber").on("input", function () {
                                                        //     $("#phoneNumber-validation").html("");
                                                        // });
                                                        $("#supplierDisplayName").on("input", function () {
                                                            $("#supplierDisplayName-validation").html("");
                                                        });
                                                        function SaveSupplier() {
                                                            var Id = $("#Id").val();
                                                            var CurrencyId = $("#currency").val();
                                                            var Title = $("#title").val();
                                                            var FirstName = $("#firstName").val();
                                                            var MiddleName = $("#middleName").val();
                                                            var LastName = $("#lastName").val();
                                                            var Suffix = $("#suffix").val();
                                                            var SupplierName = $("#supplierDisplayName").val();
                                                            var SupplierCode = $("#supplier_code").val();
                                                            var CompanyName = $("#companyName").val();
                                                            var Email = $("#email").val();
                                                            var Phone = $("#phoneNumber").val();
                                                            var MobileNo = $("#mobileNumber").val();
                                                            var Fax = $("#fax").val();
                                                            var Other = $("#other").val();
                                                            var Website = $("#website").val();
                                                            var StreetAddress = $("#street").val();
                                                            var City = $("#city").val();
                                                            var Province = $("#province").val();
                                                            var PostalCode = $("#postalCode").val();
                                                            var Country = $("#country").val();
                                                            var Notes = $("#notes").val();
                                                            var BusinessIdNo = $("#businessId").val();
                                                            var BillingRate = $("#billingRate").val();
                                                            var AccountNo = $("#accountNo").val();
                                                            var OpBalance = $("#openingBalance").val();
                                                            var AsOf = $("#asOf").val();
                                                            var FilePath = $('#SupplierFilePath').val();
                                                            var PaymentTermsId = Number($('#terms option:selected').val())||null;
                                                            var AccIdExpenseCategory = Number($('#accounting option:selected').val())||null;
                                                            // if (!Phone) {
                                                            //     $("#phoneNumber-validation").html("Please enter phone no.");
                                                            //     $("#phoneNumber").focus();
                                                            // }
                                                            if (!SupplierName) {
                                                                $("#supplierDisplayName-validation").html("Supplier Name must be filled");
                                                                $("#supplierDisplayName").focus();
                                                            }

                                                          var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                                                          var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';

                                                            var Supplier = {
                                                                ComId: ComId,
                                                                LuserId: UserId,
                                                                Id: Id,
                                                                SupplierCurrencyId: CurrencyId,
                                                                Title: Title,
                                                                FirstName: FirstName,
                                                                MiddleName: MiddleName,
                                                                LastName: LastName,
                                                                Suffix: Suffix,
                                                                SupplierName: SupplierName,
                                                                CompanyName: CompanyName,
                                                                Email: Email,
                                                                Phone: Phone,
                                                                MobileNo: MobileNo,
                                                                Fax: Fax,
                                                                Other: Other,
                                                                SupplierCode: SupplierCode,
                                                                Website: Website,
                                                                StreetAddress: StreetAddress,
                                                                City: City,
                                                                Province: Province,
                                                                PostalCode: PostalCode,
                                                                Country: Country,
                                                                Notes: Notes,
                                                                BusinessIdNo: BusinessIdNo,
                                                                BillingRate: BillingRate,
                                                                AccountNo: AccountNo,
                                                                OpBalance: OpBalance,
                                                                AsOf: AsOf,
                                                                FilePath: FilePath,
                                                                PaymentTermsId: PaymentTermsId,
                                                                AccIdExpenseCategory: AccIdExpenseCategory
                                                            };

                                                            //console.log(Supplier);
                                                            //console.log("Supplier.Id", Supplier.Id);
                                                            var PurchaseIdAbc;

                                                            $.ajax({
                                                                url: '@Url.Action("AddUpdatesupplierQB", "Accounts")',
                                                                data: { model: Supplier },
                                                                type: 'POST',
                                                                async: true,
                                                                dataType: 'json',
                                                                success: function (result) {
                                                                    //console.log("result result,result", result);
                                                                    var PurchaseIdAbc = result.Id; // Define PurchaseIdAbc here
                                                                    $("#currency").removeClass("d-none");
                                                                    $("#currency_label").removeClass("d-none");
                                                                    if (result.success == "1") {
                                                                        toastr.success(result.message, "", {
                                                                            "toastClass": "toast-green",
                                                                        });
                                                                        setTimeout(function () { $("#supplierOffcanvas").offcanvas('hide'); }, 1400);
                                                                        GetSupplier();
                                                                        // Now you have PurchaseIdAbc, so you can proceed with the file upload
                                                                        if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                                                                            var formData = new FormData();
                                                                            formData.append("file", fileInput.files[0]);
                                                                            formData.append("PurchaseIdAbc", PurchaseIdAbc);
                                                                            $.ajax({
                                                                                type: "POST",
                                                                                url: "@Url.Action("UploadSupplierImage", "Admin")",
                                                                                data: formData,
                                                                                contentType: false,
                                                                                processData: false,
                                                                                success: function (response) {
                                                                                    // Handle the response
                                                                                }
                                                                            });
                                                                        }
                                                                    } else {
                                                                        toastr.success(result.message, "", {
                                                                            "toastClass": "toast-red",
                                                                        });
                                                                        GetSupplier();
                                                                    }
                                                                },
                                                                error: function () {
                                                                    toastr.success(result.message, "", {
                                                                        "toastClass": "toast-red",
                                                                    });
                                                                    GetSupplier();
                                                                }
                                                            });


                                                                }


                                            //To clear data after closing edit modal
                                            function clearOffCanvasData() {
                                                 $("#Id").val("");
                                                $("#currency").val("");
                                                $("#currency").removeClass("d-none");
                                                $("#currency_label").removeClass("d-none");
                                                $("#title").val("");
                                                $("#firstName").val("");
                                                $("#middleName").val("");
                                                $("#lastName").val("");
                                                $("#suffix").val("");
                                                $("#supplierDisplayName").val("");
                                                $("#supplier_code").val("");
                                                $("#companyName").val("");
                                                $("#email").val("");
                                                $("#phoneNumber").val("");
                                                $("#mobileNumber").val("");
                                                $("#fax").val("");
                                                $("#other").val("");
                                                $("#website").val("");
                                                $("#street").val("");
                                                $("#city").val("");
                                                $("#province").val("");
                                                $("#postalCode").val("");
                                                $("#country").val("");
                                                $("#notes").val("");
                                                $("#businessId").val("");
                                                $("#billingRate").val("");
                                                $("#accountNo").val("");
                                                $("#openingBalance").val("");
                                                //$("#asOf").val("");
                                                $('#terms option:selected').val("0");
                                                $('#accounting option:selected').val("0");
                                                $('#SupplierFilePath').val("");
                                                $("#phoneNumber-validation").html("");
                                                $("#supplierDisplayName-validation").html("");
                                                $("#SupplierCodeValidation").html("");
                                                $('#attachmentsText').text("");
                                                $("#attachments").val('');
                                                $("#SupplierSaveBtn").text('Save').addClass("w-15");
                                                var BtnSave = document.querySelector('#SupplierSaveBtn');
                                                         $("#SupplierCodeValidation").html("");
         BtnSave.disabled = false;
                                            }



                                            $(function () {
                                                            $("#asOf").removeClass("hasDatepicker").datepicker({
                                                                dateFormat: "dd-M-yy"
                                                            })
                                                        });
                                                        function formatDateToCustom(dateString) {
                                                            const date = new Date(dateString);
                                                            const year = date.getFullYear();
                                                            const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                                                            const monthIndex = date.getMonth();
                                                            const monthName = monthNames[monthIndex];
                                                            const day = date.getDate();
                                                            return `${year}-${monthName}-${day}`;
                                                        }
                                                          //To load get data in main modal
                                                function editSupplier(data) {
                                                    var myUrlGet = '@Url.Action("GetSupplierForEdit", "Accounts")?SupplierId=' + data;
                                                    $.ajax({
                                                        type: "GET",
                                                        url: myUrlGet,
                                                        success: function (result) {
                                                            console.log("ki onostha supplier", result);
                                                                    $("#currency").addClass("d-none");
                                                                    $("#currency_label").addClass("d-none");


                                                                    if (result.success == "1") {
                                                                $("#supplierOffcanvas").offcanvas("show");
                                                                $("#SupplierSaveBtn").text('Update').addClass("w-25");
                                                                $("#Id").val(result.data.Id);
                                                                $("#title").val(result.data.Title);
                                                                $("#firstName").val(result.data.FirstName);
                                                                $("#middleName").val(result.data.MiddleName);
                                                                $("#lastName").val(result.data.LastName);
                                                                $("#suffix").val(result.data.Suffix);
                                                                $("#supplierDisplayName").val(result.data.SupplierName);
                                                                        $("#supplier_code").val(result.data.SupplierCode);
                                                                        $("#currency").val(result.data.SupplierCurrencyId).trigger('change');
                                                                $("#companyName").val(result.data.CompanyName);
                                                                $("#email").val(result.data.Email);
                                                                $("#phoneNumber").val(result.data.Phone);
                                                                $("#mobileNumber").val(result.data.MobileNo);
                                                                $("#fax").val(result.data.Fax);
                                                                $("#other").val(result.data.Other);
                                                                $("#website").val(result.data.Website);
                                                                $("#street").val(result.data.StreetAddress);
                                                                $("#city").val(result.data.City);
                                                                $("#province").val(result.data.Province);
                                                                $("#postalCode").val(result.data.PostalCode);
                                                                $("#country").val(result.data.Country);
                                                                $("#notes").val(result.data.Notes);
                                                                $("#businessId").val(result.data.BusinessIdNo);
                                                                $("#billingRate").val(result.data.BillingRate);
                                                                $("#accountNo").val(result.data.AccountNo);
                                                                $("#openingBalance").val(result.data.OpBalance);
                                                                $("#asOf").val(result.data.AsOf);
                                                                // const formattedDate = formatDateToCustom(result.data.AsOf);
                                                                // $("#asOf").val(formattedDate);
                                                                $("#attachments").val('');
                                                                //console.log("result.data.FilePath", result.data.FilePath);
                                                                if (!result.data.FilePath) {
                                                                    $("#attachment-cross-id").addClass("d-none");
                                                                }
                                                                else {
                                                                    $("#attachment-cross-id").removeClass("d-none");
                                                                    const filePathParts = result.data.FilePath.split('/');
                                                                    const fileName = filePathParts[filePathParts.length - 1];
                                                                    $('#attachmentsText').text(fileName);
                                                                }

                                                                $('#terms').val(result.data.TermsId);
                                                                $('#accounting').val(result.data.ExpenseCategoryId);
                                                            }
                                                            else {

                                                                toastr.success(result.message, "Access Denied", {
                                                                    "toastClass": "toast-red",
                                                                });
                                                            }
                                                        },
                                                        error: function (xhr, ajaxOptions, thrownError) {
                                                            alert("Error: " + xhr.status);
                                                        }
                                                    });
                                                }

                                                //delete functioanlities starts
        @*function setDeleteUrl(data) {
                var myUrldelete = '@Url.Action("DeleteSupplierQB", "Admin")';

                // Show a confirmation dialog
                var confirmDelete = confirm('Are you sure you want to delete?');

                if (confirmDelete) {
                    // User confirmed the deletion
                    $.ajax({
                        type: "get",
                        data: { SupplierId: data },
                        url: myUrldelete,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                GetSupplier();
                            } else if (response.success == "0") {
                                toastr.error(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                GetSupplier();
                            }
                        }
                    });
                }
           }*@


             $('input[name=RptType]').click(function () {
            var reporttypeind = $("input[name=RptType]:checked").val();
            //alert(reporttype);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionReportType", "Accounts")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttypeind },
                success: function (response) {
                    //  window.location.href = response.Url;

                    //window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        });




                                            function setDeleteUrl(data) {
                                                Swal.fire({
                                                    title: "Are you sure?",
                                                    text: "You won't be able to revert this!",
                                                    icon: "warning",
                                                    showCancelButton: true,
                                                    confirmButtonColor: "#3085d6",
                                                    cancelButtonColor: "#d33",
                                                    confirmButtonText: "Yes"
                                                }).then((result) => {
                                                    if (result.isConfirmed) {
                                                        $.ajax({
                                                            url: '@Url.Action("DeleteSupplierQB", "Accounts")',
                                                            type: "get",
                                                            data: { SupplierId: data }, // Pass the array of ids
                                                            traditional: true, // Ensures proper serialization of the array
                                                            success: function (response) {
                                                                if (response.success == "1") {
                                                                    toastr.success(response.msg, "", {
                                                                        "toastClass": "toast-green",
                                                                    });
                                                                    GetSupplier();
                                                                } else if (response.success == "0") {
                                                                    toastr.error(response.msg, "", {
                                                                        "toastClass": "toast-red",
                                                                    });
                                                                    GetSupplier();
                                                                }
                                                                else {

                                                                    toastr.success(response.message, "Access Denied", {
                                                                        "toastClass": "toast-red",
                                                                    });
                                                                }
                                                            },
                                                            error: function (xhr, status, error) {
                                                                console.error(xhr.responseText);
                                                                toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                                                            }
                                                        });
                                                    }
                                                })
                                            };
                                                //delete functioanlities ends

                                            //======add supplier offcanvas all functioanlities form ends=========







                                            //supplier list top buttons starts============
                                            var buttons = document.querySelectorAll(".button");

                                            buttons.forEach(function (button) {
                                                button.addEventListener("click", function () {
                                                    if (button.classList.contains("clicked")) {
                                                        button.classList.remove("clicked");
                                                    } else {
                                                        button.classList.add("clicked");
                                                    }
                                                });
                                            });
                                            document.addEventListener("click", function () { }, true);
                                            var viewport = document.createElement("meta");
                                            viewport.setAttribute('name', 'viewport');
                                            viewport.setAttribute('content', 'width=device-width, initial-scale=1');
                                            document.getElementsByTagName('head')[0].appendChild(viewport);
                                            //supplier list top buttons ends==============



                                            //print,csv,excel functionalities starts
                                            document.getElementById("print-table").addEventListener("click", function () {
                                                expenseTable.print(false, true);
                                            });
                                            document.getElementById("download-xlsx").addEventListener("click", function () {
                                                expenseTable.download("xlsx", "Expenses.xlsx", { sheetName: "Expenses" });
                                            });

                                            //$("#filter-dropdown-id").on("click", function () {
                                            //    // Add the "d-block" class to the .dropdown-menu element
                                            //    $(".dropdown-of").addClass("d-block");
                                            //});
                                            //$("#payeeDropdown").select2();
                                            //$(".select2-search").on("click", function (e) {
                                            //    alert("sss");
                                            //    e.stopPropagation();
                                            //});
                                            /*Functionalities to show filter dropdown options by changing type starts */
                                            function hideStatusOptions() {
                                                $("#statusDropdown option:not(:contains('All statuses'))").addClass('d-none');
                                            }
                                            // Function to show all options in the statusDropdown

                                            function showStatusOptions() {
                                                $("#statusDropdown option:not(:contains('Closed'))").removeClass('d-none');
                                            }

                                            $("#typeDropdown").on("change", function () {
                                                var option = $(this).find("option:selected").text();
                                                //alert(option);
                                                if (option == "Expense" || option == "Bill" || option == "Purchase Order" || option == "Credit card payment") {
                                                    $("#deliveryMethodDropdownParent").addClass("d-none");
                                                    $("#statusDropdownParent").removeClass("d-none");
                                                    $("#fromToDateParent").removeClass("d-none");
                                                    $("#payeeDropdownParent").removeClass("d-none");
                                                }
                                                else if (option == "Bill payments") {
                                                    $("#deliveryMethodDropdownParent").addClass("d-none");
                                                    $("#statusDropdownParent").addClass("d-none");
                                                    $("#fromToDateParent").removeClass("d-none");
                                                    $("#payeeDropdownParent").removeClass("d-none");
                                                }
                                                else if (option == "Recently paid") {
                                                    $("#deliveryMethodDropdownParent").addClass("d-none");
                                                    $("#statusDropdownParent").addClass("d-none");
                                                    $("#fromToDateParent").addClass("d-none");
                                                    $("#payeeDropdownParent").removeClass("d-none");
                                                }
                                                else if (option == "Supplier credit") {
                                                    $("#deliveryMethodDropdownParent").addClass("d-none");
                                                    $("#statusDropdownParent").addClass("d-none");
                                                    $("#fromToDateParent").removeClass("d-none");
                                                    $("#payeeDropdownParent").removeClass("d-none");
                                                }
                                                else {
                                                    $("#deliveryMethodDropdownParent").removeClass("d-none");
                                                    $("#statusDropdownParent").removeClass("d-none");
                                                    $("#fromToDateParent").removeClass("d-none");
                                                    $("#payeeDropdownParent").removeClass("d-none");
                                                }

                                                if (option == "Expense" || option == "Cheque" || option == "Credit card payment") {
                                                    hideStatusOptions();
                                                }
                                                else if (option == "Purchase order") {
                                                    $("#statusDropdown option:contains('Closed')").removeClass('d-none');
                                                }
                                                else {
                                                    showStatusOptions();
                                                }
                                            })
                                            $('.dropdown-menu').on('click', function (e) {
                                                e.stopPropagation();
                                            })
                                            $(function () {
                                                $("#start-date").removeClass("hasDatepicker").datepicker({
                                                    dateFormat: "dd-M-yy",
                                                    showOn: "focus" // Show the datepicker calendar when the input is focused
                                                });
                                                $("#start-date").attr("autocomplete", "off");
                                                $("#payment-start-date").removeClass("hasDatepicker").datepicker({
                                                    dateFormat: "dd-M-yy",
                                                    showOn: "focus" // Show the datepicker calendar when the input is focused
                                                });
                                                $("#payment-start-date").attr("autocomplete", "off");
                                                $("#end-date").removeClass("hasDatepicker").datepicker({
                                                    dateFormat: "dd-M-yy",
                                                    showOn: "focus" // Show the datepicker calendar when the input is focused
                                                });
                                                $("#end-date").attr("autocomplete", "off");
                                                $("#payment-end-date").removeClass("hasDatepicker").datepicker({
                                                    dateFormat: "dd-M-yy",
                                                    showOn: "focus" // Show the datepicker calendar when the input is focused
                                                });
                                                $("#payment-end-date").attr("autocomplete", "off");

                                                // Prevent clicking on the datepicker calendar from closing the dropdown
                                                $(".ui-datepicker").on("click", function (event) {
                                                    event.stopPropagation();
                                                });

                                                // Add a click event handler on the document body to close the dropdown when clicking outside of it
                                                $("#filter-btn").on("click", function (event) {
                                                    if (!$(event.target).closest(".filter-drop").length && !$(event.target).is("#start-date, #end-date")) {
                                                        $(".filter-drop").addClass("show"); // Remove the "show" class to close the dropdown
                                                    }
                                                });

                                            });




                                             //======Expense list nav functionalities starts========
                                            $("#bill-id").on("click", function () {
                                                $("#bills-view-id").removeClass("d-none");
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#suppliers-view-id").addClass("d-none");
                                                $("#payments-view-id").addClass("d-none");
                                                        $("#Supplier-Details-view").addClass("d-none");
                                                        $("#purchase-view-id").addClass("d-none");
                                            })
                                            $("#Expenses").on("click", function () {
                                                $("#bills-view-id").addClass("d-none");
                                                $("#suppliers-view-id").addClass("d-none");
                                                $("#expenses-view-id").removeClass("d-none");
                                                $("#payments-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");
                                                $("#purchase-view-id").addClass("d-none");

                                                $("#Suppliers").removeClass("active");
                                                $("#Expenses").addClass("active");
                                                $("#Purchase_List").removeClass("active");
                                            })
                                            $("#Suppliers").on("click", function () {
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#bills-view-id").addClass("d-none");
                                                $("#suppliers-view-id").removeClass("d-none");
                                                $("#payments-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");
                                                $("#purchase-view-id").addClass("d-none");

                                                $("#Suppliers").addClass("active");
                                                $("#Expenses").removeClass("active");
                                                $("#Purchase_List").removeClass("active");
                                            })
                                              $("#divsupplier").on("click", function () {
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#bills-view-id").addClass("d-none");
                                                $("#suppliers-view-id").removeClass("d-none");
                                                $("#payments-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");
                                                $("#purchase-view-id").addClass("d-none");
                                            })

                                            $("#Payments").on("click", function () {
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#bills-view-id").addClass("d-none");
                                                $("#suppliers-view-id").addClass("d-none");
                                                $("#payments-view-id").removeClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");
                                                $("#purchase-view-id").addClass("d-none");
                                            })
                                            $("#Purchase_List").on("click", function () {
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#bills-view-id").addClass("d-none");
                                                $("#suppliers-view-id").addClass("d-none");
                                                $("#purchase-view-id").removeClass("d-none");
                                                $("#payments-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");

                                                $("#Suppliers").removeClass("active");
                                                $("#Expenses").removeClass("active");
                                                $("#Purchase_List").addClass("active");
                                                
                                                GetPurchaseList();
                                            })
                                            $("#overview-id").on("click", function () {
                                                $("#bills-view-id").addClass("d-none");
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");
                                            })
                                            $("#expenses-claims-id").on("click", function () {
                                                $("#bills-view-id").addClass("d-none");
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");
                                            })
                                            $("#vendors-id").on("click", function () {
                                                $("#bills-view-id").addClass("d-none");
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");
                                            })
                                            $("#contractors-id").on("click", function () {
                                                $("#bills-view-id").addClass("d-none");
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").addClass("d-none");
                                            })
                                            $("#mileage-id").on("click", function () {
                                                $("#bills-view-id").addClass("d-none");
                                                $("#expenses-view-id").addClass("d-none");
                                                        $("#Supplier-Details-view").addClass("d-none");
                                            })
                                                    //======Expense list nav functionalities ends========


                                            //get supplier starts
                                            $.ajax({
                                                type: "GET",
                                                url: "../Purchase/GetSuppliers",
                                                datatype: "Json",
                                                success: function (data) {

                                                    $.each(data, function (index, value) {
                                                        $('#payeeDropdown').append('<option value="' + value.Id + '">' + value.SupplierName + '</option>');
                                                    });
                                                    $.each(data, function (index, value) {
                                                        $('#payment-payeeDropdown').append('<option value="' + value.Id + '">' + value.SupplierName + '</option>');
                                                    });
                                                }
                                            });

                                            //======Bill list nav functionalities starts========
                                            $(".nav-link").click(function () {
                                                // Remove the "active" class from all nav links
                                                $(".nav-link").removeClass("active");

                                                // Add the "active" class to the clicked nav link
                                                $(this).addClass("active");
                                            });
                                            var unpaidId = document.getElementById("unpaid-id");
                                            var reviewId = document.getElementById("for-review-id");
                                            var paidId = document.getElementById("paid-id");
                                            unpaidId.addEventListener("click", function () {
                                                $("#bill-table-review").addClass("d-none");
                                                $("#bill-table-unpaid").removeClass("d-none");
                                                $("#bill-table-paid").addClass("d-none");
                                            });
                                            reviewId.addEventListener("click", function () {
                                                $("#bill-table-unpaid").addClass("d-none");
                                                $("#bill-table-review").removeClass("d-none");
                                                $("#bill-table-paid").addClass("d-none");
                                            });
                                            paidId.addEventListener("click", function () {
                                                $("#bill-table-unpaid").addClass("d-none");
                                                $("#bill-table-review").addClass("d-none");
                                                $("#bill-table-paid").removeClass("d-none");
                                            });

                                            function showTable() {
                                                // Get a reference to the table container
                                                var tableContainer = document.getElementById("tableContainer");

                                                // Toggle the visibility of the table container
                                                if (tableContainer.style.display === "none" || tableContainer.style.display === "") {
                                                    tableContainer.style.display = "block";
                                                } else {
                                                    tableContainer.style.display = "none";
                                                }
                                            }
                                            //=========Bill list nav functionalities ends==========

                                            //========get doctype via ajax starts=======
                                                function getTermsDropdown() {
                                            $.ajax({
                                                url: '@Url.Action("GetDoctypeListFoExpense", "Admin")',
                                                success: function (data) {
                                                    ////console.log("term ajax data::", data);
                                                    const ul = document.querySelector('#ul-id');
                                                    const ulForExpenses = document.querySelector('#ul-id-for-expenses');
                                                    //console.log("payment bad dibo", data);
                                                    for (var i = 0; i < data.length; i++) {
                                                        const li = document.createElement('li');
                                                        li.className = 'dropdown-item';
                                                        const Type = data[i].DocTypeValue;
                                                        const DocType = data[i].DocType;
                                                        const a = document.createElement('a');
                                                        let linkUrl = '';

                                                        if (DocType == "Payment") {

                                                            a.href = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=' + encodeURIComponent(Type);
                                                            //console.log(linkUrl);
                                                            //a.href = '/Accounts/AddPaymentTypeQB?Type=' + Type;
                                                        }
                                                        else {
                                                            a.href = '@Url.Action("AddBillbyType", "Accounts")' + '?Type=' + encodeURIComponent(Type);
                                                            //console.log(linkUrl);
                                                            //a.href = '/Accounts/AddBillbyType?Type=' + Type;
                                                        }
                                                        a.className = 'dropdown-link';
                                                        a.style.color = 'black';
                                                        a.setAttribute('data-id', data[i].Id);

                                                        a.textContent = data[i].DocTypeValue;

                                                        li.addEventListener('click', function () {
                                                            window.location.href = linkUrl;
                                                        });

                                                        li.appendChild(a);
                                                        ul.appendChild(li);
                                                    }
                                                    for (var i = 0; i < data.length; i++) {
                                                        const li = document.createElement('li');
                                                        li.className = 'dropdown-item';
                                                        const Type = data[i].DocTypeValue;
                                                        const a = document.createElement('a');
                                                        const DocType = data[i].DocType;
                                                        let linkUrl = '';

                                                        if (DocType == "Payment") {

                                                            a.href = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=' + encodeURIComponent(Type) + '&PurchaseId=' + encodeURIComponent(0)+ '&SupplierId=' + encodeURIComponent(0);
                                                            ////console.log(linkUrl);
                                                            // a.href = '/Admin/AddPaymentTypeQB?Type=' + Type +'&PurchaseId=0&SupplierId=0';
                                                        }
                                                        else {
                                                            a.href = '@Url.Action("AddBillbyType", "Accounts")' + '?Type=' + encodeURIComponent(Type);
                                                                    ////console.log(linkUrl);
                                                            // a.href = '/Accounts/AddBillbyType?Type=' + Type;
                                                        }
                                                        a.className = 'dropdown-link';
                                                        a.style.color = 'black';
                                                        a.setAttribute('data-id', data[i].Id);

                                                        a.textContent = data[i].DocTypeValue;

                                                        li.addEventListener('click', function () {
                                                            window.location.href = linkUrl;
                                                        });

                                                        li.appendChild(a);
                                                        ulForExpenses.appendChild(li);
                                                    }

                                                    //const selectForType = document.querySelector('#typeDropdown');
                                                    //for (var i = 0; i < data.length; i++) {
                                                    //    const option = document.createElement('option');
                                                    //    option.value = data[i].Id; // Use an appropriate property from your data as the value
                                                    //    option.textContent = data[i].DocTypeValue; // Use an appropriate property from your data as the text content
                                                    //    selectForType.appendChild(option);
                                                    //}

                                                }
                                            });
                                            }
                                            getTermsDropdown();


                                        function getTermsDropdownForFilter() {
                                            $.ajax({
                                                url: '@Url.Action("GetDoctypeListForFilter", "Admin")',
                                                success: function (data) {
                                                    ////console.log("term ajax data::", data);
                                                    const selectForType = document.querySelector('#typeDropdown');
                                                    for (var i = 0; i < data.length; i++) {
                                                        const option = document.createElement('option');
                                                        option.value = data[i].Id; // Use an appropriate property from your data as the value
                                                        option.textContent = data[i].DocTypeValue;
                                                        selectForType.appendChild(option);
                                                    }

                                                }
                                            });
                                            }
                                            getTermsDropdownForFilter();

                                              function getDocStatusDropdown() {
                                            $.ajax({
                                                url: '@Url.Action("GetStatusList", "Admin")',
                                                success: function (data) {
                                                    ////console.log("GetStatusList data::", data);
                                                    const selectStatusDropdown = document.querySelector('#statusDropdown');
                                                    for (var i = 0; i < data.length; i++) {
                                                        const option = document.createElement('option');
                                                        option.value = data[i].Id; // Use an appropriate property from your data as the value
                                                        option.textContent = data[i].Status; // Use an appropriate property from your data as the text content
                                                        selectStatusDropdown.appendChild(option);
                                                        $("#statusDropdown option:contains('Closed')").addClass('d-none');
                                                    }

                                                }
                                            });
                                            }
                                            getDocStatusDropdown();

                                            //=====get doctype via ajax ends========
                                            function changeStatus(Id)
                                            {
                                                $.ajax({
                                                    type: "GET",
                                                    url: '@Url.Action("changeStatus", "Purchase")',
                                                    data: { Id: Id},
                                                    datatype: "Json",
                                                    success: function (data) {
                                                                        GetExpense();
                                                    }
                                                });
                                            }
                                            function openpendingListModal() {
                                                document.getElementById('pendingListModal').style.display = 'block';
                                                getModalData();
                                            }

                                            // Function to close the modal
                                            function closeModal() {
                                                document.getElementById('pendingListModal').style.display = 'none';
                                            }

                                            function closeModal2() {
                                                var dropdown = document.getElementById('filter-dropdown-id');
                                                if (dropdown) {
                                                    dropdown.classList.remove('show');
                                                }
                                            }
                                      //=======Tabulator function starts========
                                            var expenseTable;
                                            var suppliersTable;
                                            var paymentsTable;
                                            var modalTable;
                                            var purchaseTable;

                    var modalColumn = [  
                                        { title: "", field: "Id", headerHozAlign: "left", width: "2px", headerSort: false, hozAlign: "left",visible: false },
                                        
                                        {
                                            title: "DATE", headerHozAlign: "left", field: "PurchaseDateString", vertAlign:"middle" , hozAlign: "left",
                                            formatter: function (cell, formatterParams, onRendered) {
                                                // Get the original date value from the cell
                                                const originalDate = cell.getValue();

                                                // Check if the originalDate is a valid date
                                                if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                    // Format the date as "YYYY-MM-DD"
                                                    const formattedDate = originalDate.toISOString().split('T')[0];
                                                    return formattedDate;
                                                } else {
                                                    // Return the original value if it's not a valid date
                                                    return originalDate;
                                                }
                                            }
                                        } ,
                                        { title: "TYPE", headerHozAlign: "left", field: "DocType",  vertAlign:"middle", hozAlign: "left" },
                                        { title: "NO.", field: "PurchaseCode", headerSort: false, frozen: false,vertAlign:"middle", hozAlign: "left", headerHozAlign: "left",
                                            formatter: function(cell, formatterParams, onRendered) {
                                                return "<strong>" + cell.getValue() + "</strong>";
                                            }
                                        },
                                        { title: "PAYEE", headerHozAlign: "left", field: "SupplierName",vertAlign:"middle", hozAlign: "left"  }, 
                                        { title: "Total Before TAX", headerHozAlign: "right", field: "BeforeTax", vertAlign:"middle",hozAlign: "right",visible:true },
                                        { title: "TAX", headerHozAlign: "right", field: "TotalVat", vertAlign:"middle",hozAlign: "right",visible:true
                                        },
                                            {
                                                title: "TOTAL", headerHozAlign: "right", field: "NetAmount",vertAlign:"middle", hozAlign: "right", bottomCalc: "sum", formatter: "money", // Use a custom money formatter
                                                formatterParams: {
                                                    precision: 2, // Number of decimal places
                                                    symbol: "",   // Currency symbol (change as needed)
                                                    thousand: ",", // Thousands separator
                                                    decimal: ".",  // Decimal point
                                                },
                                                bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                                bottomCalcFormatterParams: {
                                                    precision: 2, // Number of decimal places
                                                    symbol: "",   // Currency symbol (change as needed)
                                                    thousand: ",", // Thousands separator
                                                    decimal: ".",  // Decimal point
                                                },    
                                            },
                                        { title: "STATUS", headerHozAlign: "left", field: "StatusPosted", vertAlign:"middle", hozAlign: "left", visible: false },
                                      {
                                                title: "Accept",
                                                field: "Add",
                                                movable: false,
                                                hozAlign: "center",
                                                formatter: function (cell, formatterParams) {
                                                    return "<i class='bi bi-plus-square-fill' style='color: green; font-size: 20px;'></i>";
                                                },
                                                headerSort: false,
                                                cellClick: function (e, cell) {
                                                    var rowData = cell.getRow().getData();
                                                    var row = cell.getRow();

                                                    // Remove row from the modal table
                                                    changeStatus(rowData.Id);
                                                    modalTable.deleteRow(row);
                                                }
                                            }
                                        
                            ]

                            function getModalData() {

            function fetchDataFromServer() {
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetPendingTransactionList", "Purchase")'
                };
                return $.ajax({
                    url: MyAppUrlSettings.MyUsefulUrl,
                    
                    dataType: "json",
                });
            }

            fetchDataFromServer().done(function (response) {

                console.log("notrmal response:", response.data);
                var dataTable = response.data;
                console.log("data table:", dataTable);// Define columns to be excluded
                var columnsToExclude = ["MonthCaption", "FontSignal"]; // Define columns to be excluded


                salesApiUrl = '@Url.Action("GetPendingTransactionList", "Purchase")',
                modalTable = new Tabulator("#pendingTransaction", {
                    //data: dataTable,

                    layout: "fitColumns",
                    minHeight: 400,           
                    pagination: true,
                    movableColumns: true,
                    ajaxURL: salesApiUrl,
                    paginationMode: "remote",
                    paginationSize: 10,
                    paginationInitialPage: 1,
                    paginationSizeSelector: [10, 25, 50, 100, true],
                    paginationCounter: "rows",
                    dataTree: true,
                    dataTreeStartExpanded: false,
                      ajaxConfig: "get",
                      ajaxContentType: "json",

                      ajaxResponse: function (url, params, response) {
                      modalTable.setMaxPage(response.last_page);
                      console.log("response.last_page", response.last_page);

                      dataLoadExpense = response.data;
                    /* console.log("dataLoadExpense:", dataLoadExpense);*/

                         return {

                          data: dataLoadExpense,
                          last_page: response.last_page,

                         };
                      },


                                columns: modalColumn,

                });
                
                
                    });


                }

                    

                           
                var purhcaseTable;

                function PurchaseGear(){
                    $.ajax({
                        url: '@Url.Action("GetFilteredColumn", "Sales")', 
                        type: 'GET',
                        contentType: 'application/json',
                        data: {type: 'GRR' },
                        success: function (response) {
    
                            // console.log("check munna::", JSON.parse(response.data.KeyValue));

                            if( response.Success == 1){
                                 if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                                     globalFieldsPurchase = JSON.parse(response.data.KeyValue);
                                     pageSize = Number(globalFieldsPurchase.pageSize);
                                     $('#ExportRows').val(pageSize);                                      

                               }
                            }
                         
                                populateCheckbox3();
                                GetPurchaseList();
                            },
    
                        error: function (error) {
                            // Handle error
                            console.error("Error saving settings:", error);
                        }
                    });

                }


                function showHidePurchase(colName) {
       
                    purhcaseTable.toggleColumn(colName);           
    
                }


                  function populateCheckbox3(){
                      //let columnListMasterLC = $("#POLColumnList");
                      let items = globalFieldsPurchase.map(x => {
                      var titles = `<li>
                                    <a class="dropdown-item" href="#">
                                        <div class="custom-control custom-checkboxs">
                                            <input type="checkbox" onclick = "showHidePurchase('${x.field}')" class="custom-control-input title-input purchase-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                            <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                        </div>
                                    </a>
                                    </li>`;
                                    return titles;
            
                      });


                        const columnListPurchase = document.getElementById('purchaseColumnList');
                        columnListPurchase.innerHTML = items.join('');
                        $('.custom-control-label').on('click', function (e) {
                            e.stopPropagation();
                        });
                        $('#dropdown-titles').on('click', function (e) {
                            e.stopPropagation();
                        });

                        // Handle change event for #customer-rows
                        $("#purchase-rows").on("change", function () {
                            var selectedRows = $(this).val();
                            if (selectedRows !== null) {
                                var pageSize = parseInt(selectedRows);
                                if (!isNaN(pageSize)) {
                                    purhcaseTable.setPageSize(pageSize);
                                }
                            }
                        });
   

                  }


                            function GetPurchaseList() {


                                function getTypedata() {
                                    return document.getElementById('inlineRadio2').checked ? 'GRR' : 'Supplier PO';
                                }

                                // Retrieve SupplierId and CustomerId from DOM
                                function getSupplierId() {
                                    return document.getElementById('SupplierPurchase').value || null;
                                }

                                function getCustomerId() {
                                    return document.getElementById('CustomerPurchase').value || null;
                                }
                                function getStatusText() {
                                    var selectElement = document.getElementById('StatusPurchase');
                                    var selectedOption = selectElement.options[selectElement.selectedIndex];
                                    return selectedOption.text;
                                }


                                // Update typedata based on the selected radio button
                                var typedata = getTypedata();
                                var supplierId = getSupplierId();
                                var customerId = getCustomerId();
                                var statusId = getStatusText();

                                var queryParams = '?type=' + typedata;
                                    
                                if (supplierId) {
                                        queryParams += '&SupplierId=' + supplierId;
                                    }
                                    if (customerId) {
                                        queryParams += '&CustomerId=' + customerId;
                                    }
                                    if(statusId !== "Select")
                                    {
                                                queryParams += '&Stock=' + statusId;
                                    }


                                function fetchDataFromServerAll() {

                                    
                                    var MyAppUrlSettings = {
                                        MyUsefulUrl: '@Url.Action("GetPurchaseListAll", "Purchase")' + queryParams
                                    };
                                    return $.ajax({
                                        url: MyAppUrlSettings.MyUsefulUrl,
                                        dataType: "json",
                                    });
                                }

                                fetchDataFromServerAll().done(function (response) {
                                    var dataTableFilter = response.data;
                                    var supplierApiUrl = '@Url.Action("GetPurchaseListAll", "Purchase")'+ queryParams;

                                        purhcaseTable = new Tabulator("#purchase-table", {
                                        data: dataTableFilter,
                                        dataTree: true,
                                        dataTreeStartExpanded: true,
                                        dataTreeChildField: "children",
                                        layout: "fitColumns",
                                        movableColumns: true,
                                        pagination: true,
                                        paginationMode: "remote",
                                        paginationSize: pageSize,
                                        paginationInitialPage: 1,
                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                        paginationCounter: "rows",
                                        ajaxURL: supplierApiUrl,
                                        ajaxConfig: "get",
                                        ajaxContentType: "json",

                                        ajaxResponse: function (url, params, response) {
                                            purhcaseTable.setMaxPage(response.last_page);
                                            var dataLoadExpense = response.data;
                                            return {
                                                data: dataLoadExpense,
                                                last_page: response.last_page
                                            };
                                        },
                                        columns: globalFieldsPurchase
                                    });
                                });
                            }


                            document.getElementById('inlineRadio1').addEventListener('change', GetPurchaseList);
                            document.getElementById('inlineRadio2').addEventListener('change', GetPurchaseList);

                            document.getElementById("purchasePrint-pdf").addEventListener("click", function () {
                                purhcaseTable.print(false, true);
                            });

                            document.getElementById("purchasePrint-excel").addEventListener("click", function () {
                                purhcaseTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
                            });


                            //=====GRR list gear functionality Starts======

                            //  console.log("globalFieldsForSalesList::", globalFieldsPurchase);
                            // let columnListPurchase = $("#purchaseColumnList");
                            //   columnListPurchase.empty();
        
                            // // Initialize columns page load
                            // $.ajax({
                            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
                            //     type: 'GET',
                            //     contentType: 'application/json',
                            //     data: {type: 'GRR' },
                            //     success: function (response) {
            
                            //         if(response.Success == 0)
                            //         {                                            
                            //             $.each(globalFieldsPurchase, function (index, field) {
                            //                 ////console.log("GLOBAL 2::",field);
                            //                 var title = field.title;
                            //                 var name = field.field;
                            //                 var visible = true;
                            //                 if (field.visible == false) {
                            //                     visible = false;
                            //                 }
                            //                 titles = `<li>
                            //                             <a class="dropdown-item" href="#">
                            //                             <div class="custom-control custom-checkboxs" >
                            //                             <input type="checkbox" class="custom-control-input title-input grr-column" id="${name}" value="${name}">
                            //                             <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                            //                             </div>
                            //                             </a>
                            //                             </li>`;
                            //                 columnListPurchase.append(titles);

                            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                            //                     var checkbox = event.target;
                            //                     var isChecked = checkbox.checked;

                            //                     if (isChecked) {
                            //                         purhcaseTable.showColumn(name);
                            //                     } else {
                            //                         purhcaseTable.hideColumn(name);
                            //                     }
                            //                 });


                            //                 $(`${'#' + name}`).prop('checked', visible);


                            //                 $('.custom-control-label').on('click', function (e) {
                            //                     e.stopPropagation();
                            //                 });
                            //                 $('#dropdown-titles').on('click', function (e) {
                            //                     e.stopPropagation();
                            //                 });

                            //             //Add event listener to the rows select input
                            //             $("#purchase-rows").on("change", function () {
                            //                 var selectedRows = $(this).val();
                            //                 if (selectedRows !== null) {
                            //                     // Convert the selected value to an integer
                            //                     var pageSize = parseInt(selectedRows);
                            //                     if (!isNaN(pageSize)) {
                            //                         // Set the page size for the parentTable
                            //                         purhcaseTable.setPageSize(pageSize);

                            //                         //// You may also want to update the parent table height
                            //                         //updateParentTableHeight();
                            //                     }
                            //                 }
                            //             });

                            //             });
                            //         }
                            //         else
                            //         {
                            //             var jsonData = response.data.KeyValue;
                            //             var columnData = JSON.parse(jsonData);

                   
                            //             $.each(globalFieldsPurchase, function (index, globalField) {
                            //                 var matchedField = columnData.find(function (fieldData) {
                            //                     return fieldData.Field === globalField.field;
                            //                 });

                            //                 // If a match is found, update the visibility
                            //                 if (matchedField) {
                            //                     globalField.visible = matchedField.IsVisible;
                            //                 } else {
                            //                     globalField.visible = false; // Default to false if not found
                            //                 }

                            //                 if (matchedField.IsVisible == false) {
                            //                     setTimeout(function() {
                            //                     purhcaseTable.hideColumn(matchedField.Field);
                            //                     }, 1000);
                            //                 }
                            //                 else
                            //                 {
                            //                     setTimeout(function() {
                            //                     purhcaseTable.showColumn(matchedField.Field);
                            //                     }, 1000);
                            //                 }
                            //                 var title = globalField.title;
                            //                 var name = globalField.field;
                            //                 var visible = globalField.visible;

                            //                 var titles = `<li>
                            //                 <a class="dropdown-item" href="#">
                            //                     <div class="custom-control custom-checkboxs">
                            //                         <input type="checkbox" class="custom-control-input title-input grr-column" id="${name}" value="${name}">
                            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                            //                     </div>
                            //                 </a>
                            //               </li>`;

                            //                 // Append the generated HTML to your column list
                            //                 columnListPurchase.append(titles);

                            //                 // Set the checkbox state based on visibility
                            //                 $(`#${name}`).prop('checked', visible);

                            //                 // Add event listener to the checkbox to show/hide columns
                            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                            //                     var checkbox = event.target;
                            //                     var isChecked = checkbox.checked;

                            //                     if (isChecked) {
                            //                         purhcaseTable.showColumn(name);
                            //                     } else {
                            //                         purhcaseTable.hideColumn(name);
                            //                     }
                            //                 });
                            //             });

                            //             // Prevent the dropdown from closing when clicking on a checkbox or label
                            //             $('.custom-control-label').on('click', function (e) {
                            //                 e.stopPropagation();
                            //             });
                            //             $('#dropdown-titles').on('click', function (e) {
                            //                 e.stopPropagation();
                            //             });

                            //             // Handle change event for #customer-rows
                            //             $("#purchase-rows").on("change", function () {
                            //                 var selectedRows = $(this).val();
                            //                 if (selectedRows !== null) {
                            //                     var pageSize = parseInt(selectedRows);
                            //                     if (!isNaN(pageSize)) {
                            //                         purhcaseTable.setPageSize(pageSize);
                            //                     }
                            //                 }
                            //             });

                            //         }
                            //     },
                            //     error: function (error) {
                            //         // Handle error
                            //         console.error("Error saving settings:", error);
                            //     }
                            // });

            

                    $("#savePurchase").on("click", function () {
                        var columnData = [];

                        var colDefs = purhcaseTable.getColumnDefinitions();

                        var selectElement = document.getElementById("purchase-rows");
                        var selectedValue = selectElement.value;

                        $(".grr-column").each(function () {
                            var field = $(this).val();
                            var title = $(`label[for='${field}']`).text();
                            var isVisible = $(this).is(":checked");

                            colDefs.forEach(function(colDef) {
                                if (colDef.field === field) {
                                    colDef.visible = isVisible;  // Set visibility based on checkbox state                
                                }
                            });

                            // columnData.push({
                            //     Title: title,
                            //     Field: field,
                            //     IsVisible: isVisible
                            // });
                        });

                        var finaldata = {
                            colDefs: colDefs,
                            pageSize: selectedValue
                        };

                        var jsonData = JSON.stringify(finaldata);

                        // Send data via AJAX
                        $.ajax({
                            url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ keyValue: jsonData, type: 'GRR' }),
                            success: function (response) {
                                toastr.success(response.ex, "", {
                                    "toastClass": "toast-green",
                                });
                            },
                            error: function (error) {
                                // Handle error
                                console.error("Error saving settings:", error);
                            }
                        });
                    });

                    function DeleteFilter3(data) {
 
                     $.ajax({
                         url: '@Url.Action("DeleteColumnFilter", "Sales")',
                         type: "get",
                         data: { type: data },               
                         success: function (response) {
                             if (response.success == "1") {
                                 toastr.success(response.msg, "", {
                                     "toastClass": "toast-green",
                                 });
                                 GetPurchaseList();
                             }
         
                         },
                         error: function (xhr, status, error) {
                             console.error(xhr.responseText);
                             toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                         }
                     });
    
 
                };
                         

                             //=====GRR list gear ends======


             function formatDateToCustomDate(originalDate) {      
            const months = [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ];

            const dateObj = new Date(originalDate);
            const day = dateObj.getDate();
            const month = months[dateObj.getMonth()];
            const year = dateObj.getFullYear();

            return `${day}-${month}-${year}`;
        }

          function formatCurrency(amount) {
            return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
        }

            function openOffcanvas(rowData) {
            var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasForExpenses'));
            
            var id = rowData.Id;
            var purchaseDate = formatDateToCustomDate(rowData.PurchaseDateString) || '';
            
            var supplierName = rowData.SupplierName || '';
            var totalAmount = rowData.NetAmount || '';
             var formattedTotalAmount = formatCurrency(totalAmount);
            var statusRemarks = rowData.Remarks || '';
            var billingAddress = rowData.PrimaryAddress || '';
            var phoneNo = rowData.PhoneNo || 'NA';
            var items = rowData.Items || [];
            var docType = rowData.DocType || '';
            $("#SalesCodeForInvoice").text(rowData.PurchaseCode);

            var myUrlGetforInvoice = `@Url.Action("EditBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            var myUrlGetforCreditNote = `@Url.Action("EditBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            var myUrlGetforEstimate = myUrlGetforInvoice;
            var myUrlGetforSalesOrder = myUrlGetforInvoice;
            var myUrlGetforSalesReceipt = myUrlGetforInvoice;
            var myUrlGetforDelayedCharge = `@Url.Action("EditBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            

            // Populate the div elements
            document.getElementById('FirstDiv').innerHTML = 'Total:</br><h4>' + formattedTotalAmount + '</h4>Input Date:</br>' + purchaseDate ;
            document.getElementById('SecondDiv').innerHTML = '<strong>' + supplierName + '</strong>'+ '</br>Billling address:</br>' + billingAddress + '</br>' + rowData.EmailId + '</br>Phone:' + phoneNo;
            document.getElementById('ThirdDiv').innerHTML = '<strong>Status:</strong> ' + statusRemarks
            document.getElementById('FourthDiv').innerHTML = '<strong>Product and services:</strong></br>'  ;
             items.forEach(function(item, index) {
                var itemName = item.Name || '';
                var itemAmount = item.Amount || '';

                // Create a new row for each item
                var row = '<div style="display: flex; justify-content: space-between;">';
                row += '<span>' + itemName + '</span>';
                row += '<span>' + formatCurrency(itemAmount) + '</span>';
                row += '</div>';

                document.getElementById('FourthDiv').innerHTML += row;
            });
            document.getElementById('FifthDiv').innerHTML = '<strong>More info</strong></br>' + 'Memo:' + rowData.MessageInvoice;

            document.getElementById('PurchaseIdForJournal').value = `${id}`;
            

            var button = document.createElement("button");
            if (docType == 'Purchase') {
                button.textContent = "Edit Purchase";
            }
            else
            {
                button.textContent = "Edit " + docType;
            }
            
            button.className = "btn btn-success";
            button.addEventListener("click", function() {
                if (docType == 'Expense') {
                    window.location.href = myUrlGetforInvoice;
                }
                if (docType == 'Bill') {
                    window.location.href = myUrlGetforCreditNote;
                }
                if (docType == 'Bill payments') {
                    window.location.href = myUrlGetforEstimate;
                }
                if (docType == 'Supplier credit') {
                    window.location.href = myUrlGetforSalesOrder;
                }
                if (docType == 'GRR') {
                    window.location.href = myUrlGetforSalesOrder;
                }
                if (docType == 'Cheque') {
                    window.location.href = myUrlGetforSalesReceipt;
                }
                if (docType == 'Purchase Order') {
                    window.location.href = myUrlGetforDelayedCharge;
                }
                
                
            });

            // Create a div for the button
            var buttonContainer = document.createElement("div");
            buttonContainer.className = "text-end"; // Align the button to the right

            buttonContainer.appendChild(button);

            // Append the buttonContainer to the SixthDiv
            document.getElementById('SixthDiv').innerHTML = '';
            document.getElementById('SixthDiv').appendChild(buttonContainer);
            offcanvas.show();

            journalTable.clearData();
                    journalTable.setColumns([]);
        }

       function buildTree(dataArray) {
            const tree = [];
            const dateMap = {};

            dataArray.forEach(item => {
                // Trim whitespace from AccName if it exists
                if (item.AccName !== null && item.AccName !== undefined) {
                    item.AccName = item.AccName.trim();
                }


                // Check if the VoucherId already exists in the dateMap
                if (!dateMap[item.VoucherId]) {
                    dateMap[item.VoucherId] = {
                        VoucherDate: item.VoucherDate,
                        children: []
                    };
                    tree.push(dateMap[item.VoucherId]);
                }

                const childItem = { ...item, VoucherDate: '' };
                // Add current item to the children array of the corresponding VoucherId
                dateMap[item.VoucherId].children.push(childItem);
            });

            return tree;
        }
                
        var journalTable;       
         document.getElementById('showJournal').addEventListener('click', function() {
            // Call the initTabulator function when the button is clicked
            initTabulator();
          });
           var journalFields = [
                  
                                { title: "Account Head",  field: "AccName" },
                                { title: "Group Head",  field: "GroupHead",visible: false },
                                { title: "Debit", field: "TKDebit",headerHozAlign: "right",hozAlign: "right", bottomCalc: "sum", visible: false,
                                  bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                { title: "Credit", field: "TKCredit",headerHozAlign: "right",hozAlign: "right", bottomCalc: "sum",visible: false,
                                    bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                {
                                    title: "Debit", field: "TKDebitLocal", headerHozAlign: "right", hozAlign: "right", bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                {
                                    title: "Credit", field: "TKCreditLocal", headerHozAlign: "right", hozAlign: "right", bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                
          ]


      function initTabulator() {         
     
     var SourceId = $("#PurchaseIdForJournal").val() ;
     var Source = "Purchase";     
     
     $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("JournalforSalesExpenses", "Purchase")',
                data: { SourceId: SourceId, Source: Source },   

                success: function(result) {   
                    
                    dataabc = buildTree(result.data);                   

             if (result.data.length === 0) {
                // Show message if dataabc is 0
                alert("This document is not Posted! That's why Journal is not showing. For Journal posted this document.");
            } else {

            var columnsToHide = ["GroupHead", "TKDebit", "TKCredit", "VoucherId", "children"];

                        var journalFields = Object.keys(dataabc[0].children[0]).map(key => {
                            return {
                                title: key,
                                field: key,
                                visible: !columnsToHide.includes(key),
                                formatter:  undefined,
                                formatterParams:  undefined
                            };
                        });

                         // Add tree structure configuration based on VoucherId
                         journalTable = new Tabulator("#example-table", {
                             layout: "fitColumns",
                             data: dataabc,
                             columns: journalFields,
                            dataTree: true,
                            dataTreeStartExpanded: true,
                            dataTreeChildField: "children",
                            layout: "datafit", // Assumes 'VoucherId' will be the tree element
                         });

            // journalTable = new Tabulator("#example-table", {
            //         data: dataabc,
            //         columns: journalFields
            //    }); 

            }

              }
          });
    
}

         



                            function linkFormatter(cell, formatterParams, onRendered) {
                                    var filePath = cell.getValue();
                                    var anchor = document.createElement("a");
                                    anchor.href = filePath;
                                    anchor.target = "_blank";
                                    if (!filePath) {
                                        var paragraph = document.createElement("p");
                                        paragraph.textContent = "No file uploaded";
                                        paragraph.classList.add("text-black-50"); // Add the text-warning class
                                        return paragraph;
                                    }
                                    else {
                                        anchor.textContent = "File";
                                    }
                                    return anchor;
                                }

                              function customDetailsButtonFormatter(cell, formatterParams, onRendered) {
                                   var icon = '<i class="fas fa-plus btn-details-icon"></i>';
                                   return icon;
                               }

                    //Server-Side search functionality
                   $('#searchInput1').on('input', function() {
                        var inputValue = $(this).val();
                        var url = '@Url.Action("GetPurchaseListTabulator", "Purchase")' + '?searchquery=' + inputValue;
                        expenseTable.setData(url);

                    });


            
            var checkbox1 = [
                 {
                    title: "", // Title for the checkbox column
                    field: "selected", // Field for the checkbox value in your data
                    headerSort: false, // Disable sorting for the checkbox column
                    formatter: "rowSelection", // Use the built-in row selection formatter
                                            
                    width: 30, // Adjust the width as needed
                    vertAlign:"middle",
                }
            ]

            var Actions1 = [
                  {
                    title: "ACTIONS", field: "button", headerHozAlign: "center", headerSort: false, hozAlign: "right",width:170, resizable: false,  formatter: function (cell, formatterParams, onRendered) {
                                var data = cell.getData();
                                //console.log("see data::", data);
                                //var myUrlGet = `editAccountHead(${data.Id})`;                                                               
                                var myUrlGet = `@Url.Action("EditBillByType", "Accounts")?Type=${data.DocType}&PurchaseId=${data.Id}`;
                                var ViewUrlGet = `@Url.Action("EditBillByType", "Accounts")?Type=${data.DocType}&PurchaseId=${data.Id}&isCopy=2`;
                                var makePayment =  '@Url.Action("AddPaymentTypeQB", "Accounts")?Type=Payment' + '&PurchaseId=' + data.Id + '&SupplierId=' + data.SupplierId;

                                var copyBill = `@Url.Action("EditBillByType", "Accounts")?Type=Purchase Order&PurchaseId=${data.Id}&CopyBill=1`;
                                //var copyBill = '/Accounts/AddBillByType?Type=Purchase Order' + '&PurchaseId=' + data.Id + '&CopyBill=1';
                               // var copyStockAdjustment = '/Accounts/AddBillByType?Type=Stock Adjustment' + '&PurchaseId=' + data.Id ;
                                var copyStockAdjustment = `@Url.Action("EditBillByType", "Accounts")?Type=Stock Adjustment&PurchaseId=${data.Id}`;
                                                var inActive = `setInactiveUrl(${data.Id}) `
                                var active = `setActiveUrl(${data.Id}) ` //&ReportType=Purchase Invoice

                                var myUrlPdf = '@Url.Action("CustomFormStylePreview", "Admin")?type=RunningExpnesesReport&id=' + data.Id;

                                var viewEditLink = data.isPosted === true ? ViewUrlGet : myUrlGet;

                        var viewCustomForm = `
                                        <a href='${myUrlPdf}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>    
                                            <i class='bi bi-printer pe-1'></i> <span>Print PDF</span>
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;

                        var viewReportOne = `
                                        <a href='@Url.Action("PurchaseInvoiceReport", "Purchase")?PurchaseId=${data.Id}&&ReportStyle=1' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-eye pe-1'></i> <span>style one</span>
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;

                        var viewReportTwo = `
                                        <a href='@Url.Action("PurchaseInvoiceReport", "Purchase")?PurchaseId=${data.Id}&&ReportStyle=2' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-eye pe-1'></i> <span>style two</span>
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;

                        var viewReport = `
                                        <a href='@Url.Action("PurchaseInvoiceViewReport", "Purchase")?PurchaseId=${data.Id}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-eye pe-1'></i> <span>View report</span>
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;

                        var printHtml = `
                                        <a href='@Url.Action("PurchaseReport", "Purchase")?PurchaseId=${data.Id}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-printer pe-1'></i> <span>Print</span>
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;
                        var copyHtml = `
                                        <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-c-circle pe-1'></i> <span>Copy</span>
                                        </a>
                                                <div class='dropdown-divider m-0'></div>
                                    `;

                        var viewHtml = `
                                                <a href='${ViewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                <i class='bi bi-eye pe-1'></i> <span>View</span>
                                                </a>

                                    `;
                                var deleteHtml = `
                        <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                            <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span>
                        </a>
                                <div class='dropdown-divider m-0'></div>
                    `;
                                                var voidHtml = `
                                        <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Void</span>
                                        </a>

                                    `;

                                var edit = `
                                        <a href='${myUrlGet}'  target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                            <i class='bi bi-pencil-square pe-1'></i><span class='ms-1 mt-2'>Edit</span>
                        </a>
                                <div class='dropdown-divider m-0'></div>
                                    `;

                                                //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                                var statusDependentHtml = data.isPosted ? viewHtml : viewCustomForm + viewReportOne + viewReportTwo +viewReport + printHtml  + edit + deleteHtml/* + voidHtml*/;
                                var html;
                                if (data.DocType === "Bill") {
                                    html = `
                                        <div class='dropdown ms-1'>
                                            <a  href='${makePayment}' target='_blank' class='fw-bolder mt-2'>Make payment</a>
                                            <button class='btn dropdown-toggle' type='button' id='dropdown-menu' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                ${statusDependentHtml}

                                            </ul>
                                        </div>
                                    `;
                                }
                                if (data.DocType === "Purchase Order" ) {
                                    html = `
                                        <div class='dropdown ms-1'>
                                            <a  href='${copyBill}' target='_blank' class='fw-bolder mt-2'>Copy Bill</a>
                                            <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                ${statusDependentHtml}

                                            </ul>
                                        </div>
                                    `;
                                }
                                if (data.DocType === "Stock Adjustment") {
                                html = `
                                    <div class='dropdown ms-1'>
                                                <a  href='${copyStockAdjustment}' target='_blank' class='fw-bolder mt-2'>Copy Bill</a>
                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                        <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                            ${statusDependentHtml}

                                        </ul>
                                    </div>
                                `;
                            }
                                //if (data.DocType === "Purchase Payment" || data.DocType === "Expense") {
                                //    html = `
                                //      <div class='dropdown ms-1'>
                                //          <a  href='${copyBill}' target='_blank' class='fw-bolder mt-2'>Copy Bill</a>
                                //          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                //         <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                //              ${statusDependentHtml}

                                //          </ul>
                                //      </div>
                                //  `;
                                //}
                                if (data.DocType === "Supplier credit" || data.DocType === "Purchase Payment" || data.DocType === "Expense" || data.DocType === "Cheque" || data.DocType ==="Supplier PO"|| data.DocType ==="GRR") {
                                    html = `
                                        <div class='dropdown ms-1'>
                                            <a href='${viewEditLink}' target='_blank' class='fw-bolder mt-2'>View/Edit</a>
                                            <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                            <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                ${statusDependentHtml}

                                            </ul>
                                        </div>
                                    `;
                                }


                        return html;
                        },
                        visible: true,cellClick: function(e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                    },
                },
            ]

           //GetExpense();

           function ExpenseGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Expense' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             globalFields1 = JSON.parse(response.data.KeyValue);
                             pageSize = Number(globalFields1.pageSize);
                             $('#WorkOrderRows').val(pageSize);
                             globalFields1 = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "selected" && column.field !== "button";
                            });                            
                            
                            // Prepend the checkBox array at the start of MasterLColumn
                            globalFields1 = checkbox1.concat(globalFields1);

                            // Append the Actions array at the end of realizationcolumn
                            globalFields1 = globalFields1.concat(Actions1);

                       }
                    }
                         
                        populateCheckbox1();
                        GetExpense();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideExpense(colName) {

            expenseTable.toggleColumn(colName);

        }


          function populateCheckbox1(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = globalFields1.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideExpense('${x.field}')" class="custom-control-input title-input expense-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListExpense = document.getElementById('expenseColumnList');
                columnListExpense.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#expense-rows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            expenseTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }

                        function GetExpense() {
                                function fetchDataFromServer() {
                                var MyAppUrlSettings = {
                                    MyUsefulUrl: '@Url.Action("GetPurchaseListTabulator", "Purchase")'
                                };
                                return $.ajax({
                                    url: MyAppUrlSettings.MyUsefulUrl,
                                    dataType: "json",
                                });
                            }

                            fetchDataFromServer().done(function (response) {

                                ////console.log("normal response:", response);
                                var dataTableFilter = response.data;

                                //console.log("dataTableFilter::", dataTableFilter);

                                var dataTable = dataTableFilter.filter(function (item) {
                                    return item.DocType === "Bill";
                                });


                                //var dataTable = response.data;
                                //console.log("data table:", dataTable);
                                var docTypeCheck = dataTable.DocType;

                                var toShowNavItems;
                                const dueDate = dataTable.DueDate;
                                ////console.log("dueDate::", dueDate);
                                const currentDate = new Date();
                                const formattedCurrentDate = currentDate.toISOString().slice(0, 10);


                                // Filter the dataTable to get only the rows where DueDate is greater than currentDate
                                const dataTableUnpaid = dataTable.filter(item => item.DueDate < formattedCurrentDate); // || item.PaidAmt < item.NetAmount
                                const dataTablePaid = dataTable.filter(item =>  item.PaidAmt < item.NetAmount);
                                ////console.log("dataTableUnpaid", dataTableUnpaid);
                                ////console.log("dataTablePaid", dataTablePaid);

                                // Log the filtered data to the console
                                ////console.log("Filtered data where DueDate is greater than current date:", dataTableUnpaid);




                                // Iterate through each element in the dataTable
                                for (let i = 0; i < dataTable.length; i++) {
                                    const dueDate = dataTable[i].DueDate;

                                    if (dueDate > formattedCurrentDate) {
                                        dataTable[i].toShowNavItems = "unpaid";
                                        toShowNavItems = "unpaid";
                                        ////console.log(`toShowNavItems`, toShowNavItems);
                                    } else {
                                        dataTable[i].toShowNavItems = "paid";
                                        toShowNavItems = "paid";
                                        ////console.log(`toShowNavItems`, toShowNavItems);
                                    }
                                }



                                function customCheckBoxFormatter(cell, formatterParams, onRendered) {
                                    return '<input type="checkbox" class="custom-checkbox">';
                                }
                                // Define a custom formatter function

                                //==getting data in this format 2023-1-1
                                //dataTable.forEach((item) => {
                                //    // Check if the DueDate is a valid date string
                                //    if (item.DueDate) {
                                //        const dateParts = item.DueDate.split('T');
                                //        dueDateForStatus = dateParts[0];
                                //        if (dateParts.length > 0) {
                                //            item.DueDate = dateParts[0];
                                //        }
                                //    }
                                //});

                                dataTable.forEach((item) => {
                                    // Check if the DueDate is a valid date string
                                    if (item.DueDate) {
                                        const dateParts = item.DueDate.split('T'); // Split by 'T' to remove the time part
                                        const datePart = dateParts[0];
                                        const parts = datePart.split('-');

                                        if (parts.length === 3) {
                                            const year = parts[0].slice(2); // Extract the last two digits of the year
                                            const month = formatMonth(parts[1]); // Format the month
                                            const day = parts[2];
                                            item.DueDate = `${day}-${month}-${year}`;
                                        }
                                    }
                                });

                                // Function to format the month to three-letter abbreviation
                                function formatMonth(monthNumber) {
                                    const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                                    return months[parseInt(monthNumber, 10) - 1] || '';
                                }




                                function customStatusFormatter(cell, formatterParams, onRendered) {
                                    const originalDate = cell.getRow().getData().DueDate;

                                    if (originalDate) {
                                        // Convert the original date to a JavaScript Date object
                                        const dueDate = new Date(originalDate);

                                        // Calculate the day difference
                                        const formattedCurrentDate = new Date().toISOString().slice(0, 10);
                                        const timeDifference = new Date(formattedCurrentDate) - dueDate;
                                        const dayDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

                                        // Create the HTML string with "OverDue" and day difference
                                        var span = `<span class="text-danger fw-semibold">OverDue</span><br>
                                    <span class="text-black fw-normal">${dayDifference} days ago</span>`;
                                        return span;
                                    }
                                    return "";
                                }




                                //=====Expenses list tabulator starts======
                                //======categoryeditor function for category table starts========
                                let currentActiveInput = null;
                            function categoryEditor(cell, onRendered, success, cancel, editorParams) {

                                var selected = cell.getValue();
                                if (typeof selected === "undefined") {
                                    selected = null;
                                }

                                // Handle the null value and set an empty string
                                if (selected === null) {
                                    selected = "";
                                }
                                var arrowIcon = document.createElement("span");
                                arrowIcon.innerHTML = '<i class="fas fa-chevron-down"></i>';
                                arrowIcon.className = "arrow-icon";
                                //arrowIcon.style.position = "absolute";
                                //arrowIcon.style.right = "5px";
                                //arrowIcon.style.top = "70%";
                                //arrowIcon.style.transform = "translateY(-50%)";
                                arrowIcon.style.cursor = "pointer";
                                arrowIcon.style.fontWeight = "bold";

                                // Update the CSS to vertically align the text and the arrow icon
                                var inputContainer = document.createElement("div");
                                //inputContainer.style.position = "relative";
                                inputContainer.style.display = "flex";
                                inputContainer.style.alignItems = "center";

                                var input = document.createElement("input");
                                input.type = "text";
                                input.setAttribute("name", cell.getField());
                                input.setAttribute("autocomplete", "off");
                                input.style.flex = "1"; // Take up the remaining space in the container

                                inputContainer.appendChild(input);
                                inputContainer.appendChild(arrowIcon);

                                arrowIcon.addEventListener("click", function () {
                                    $(input).autocomplete("search", $(input).val());
                                    $(input).select();
                                });

                                input.addEventListener("focus", function () {
                                    currentActiveInput = this;
                                    // Add keydown event listener to the input field to prevent default behavior of arrow keys
                                    this.addEventListener("keydown", function (e) {
                                        if (e.keyCode === 40 || e.keyCode === 38) {
                                            e.preventDefault();
                                        }
                                    });
                                });

                                $(input).autocomplete({

                                    source: function (request, response) {

                                        setTimeout(function () {
                                            //console.log(request.term);
                                            $.ajax({
                                                url: "@Url.Action("GetCOAList", "Admin")",
                                                dataType: "json",
                                                data: {
                                                    dropdownSearch: request.term,
                                                    type: "public",
                                                    pageSize: 5,
                                                    minimumInputLength: 0
                                                },
                                                success: function (data) {
                                                    //console.log("auto:", data);
                                                    var results = [];
                                                    var categoryNames = $.unique($.map(data.AccountHeadList, function (item) {
                                                        return item.AccName;
                                                    }));

                                                    $.each(categoryNames, function (index, categoryName) {

                                                        var group = {
                                                            label: categoryName,
                                                            children: []
                                                        };

                                                        group.children = $.grep(data.AccountHeadList, function (item) {
                                                            return item.AccName == group.label;
                                                        });

                                                        group.children = $.map(group.children, function (item) {

                                                            //currencyrate='';

                                                            //currencyId=item.CurrencyShortName;
                                                            return {
                                                                label: item,
                                                                // label: item.AccName + ' - ' + item.AccCode + '  -----  ' + item.AccountCategory+ ',' + item.AccountBalance,
                                                                value: item.Id,

                                                            };
                                                        });

                                                        results.push(group);
                                                    });

                                                    response(results);
                                                }
                                            });

                                        }, 200);

                                    },
                                    select: function (event, ui) {
                                        // var selectedId = ui;
                                        // //console.log(ui);
                                        if (ui.item.children) {

                                            autocompleteId = ui.item.children[0].value;
                                            //console.log(ui.item.children);
                                            currencyId = ui.item.children[0].label.CurrencyId.toString();
                                            currencyrate = ui.item.children[0].label.CurrencyRate;
                                            AccountCategory = ui.item.children[0].label.AccountCategory;

                                            // currencyrate=item.CurrencyRate; ui.item.children[0].value

                                            // currencyId=item.CurrencyId.toString();
                                            var currencyRateField = "CurrencyRate"; // Replace with the actual field name
                                            var currencyRateValue = currencyrate;
                                            var CurrencyForeignId = "CurrencyForeignId"; // Replace with the actual field name

                                            var CurrencyIdvalue = currencyId;

                                            var accIdField = "AccId";
                                            var accIdValue = autocompleteId; /* Get the corresponding AccId based on the selected AccName */
                                            var row = cell.getRow();
                                            row.update({ [accIdField]: accIdValue, [currencyRateField]: currencyRateValue, [CurrencyForeignId]: CurrencyIdvalue, AccountCategory: AccountCategory });
                                            //console.log(row);
                                            success(ui.item.value);
                                        } else {
                                            // handle selection of item here
                                        }
                                    },
                                    focus: function (event, ui) {
                                        if (ui.item.children) {
                                            return true;
                                        } else {
                                            // handle focus on item here
                                        }
                                    },

                                    minLength: 0,
                                    autoFocus: true,
                                    allowCustomValue: false,
                                    delay: 0,
                                    //cacheLength: 0,
                                    open: function () {
                                        $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                                    },
                                    close: function () {
                                        $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                                    },
                                    change: function (event, ui) {
                                        if (ui.item === null) {
                                            $(this).val('');
                                            autocompleteId = 0;
                                            //  $('#field_id').val('');
                                        }
                                    },
                                    create: function () {
                                        $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                                            var trs = '';

                                            if (item) {
                                                trs = '<p class="text-sm-left" style="font-size:12px"> Category : '; // Remove the font-italic class from here
                                                $.each($(item), function (key, value) {


                                                    // Determine the balance value
                                                    const balance = value.children[0].label.AccountBalance;

                                                    // Add class based on balance value
                                                    const balanceClass = balance <= 0 ? 'red-text' : 'green-text';

                                                    // Append the entire category text with the corresponding class (including the italic style)
                                                    trs += '<span class="italic-text">[ ' + value.children[0].label.AccName + ' - ' + value.children[0].label.AccountCategory + ' ]</span>   - <span class="' + balanceClass + '">Balance :' + balance + '</span>  ';
                                                })
                                                trs += '</p>';
                                            }




                                            return $("<li>")
                                                .append("<div class=m-0>" + item.label + trs + "</div>")
                                                .appendTo(ul);
                                        };
                                    },
                                    focus: function () {
                                        return false; // Prevent default focus behavior
                                    }



                                }).focus(function () {
                                    $(this).autocomplete("search", $(this).val());
                                    $(this).select();


                                });

                                input.addEventListener("keydown", function (e) {
                                    // Prevent default behavior of arrow keys (40 for down, 38 for up)
                                    if (e.keyCode === 40 || e.keyCode === 38) {
                                        e.preventDefault();
                                    }
                                });



                                if (currentActiveInput !== null) {
                                    currentActiveInput.focus();
                                }

                                // Set the value of the input element to the current field value
                                input.value = selected;


                                return inputContainer;



                            }                              
                            // ======categoryeditor function for  table ends======                             

                        var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';
                        expenseTable = new Tabulator("#expense-table-review", {
                            layout: "fitDataTable",
                            rowHeight:50,
                            height:"500px",
                            movableColumns: true,
                            pagination: true,
                            paginationMode: "remote",
                            paginationSize: pageSize,
                            paginationInitialPage: 1,
                            paginationSizeSelector: [5, 10, 25, 50, 100, true],
                            paginationCounter: "rows",
                            ajaxURL: apiUrl,
                            dataTree: true,
                            dataTreeStartExpanded: false,
                            ajaxConfig: "get",
                            ajaxContentType: "json",

                            ajaxResponse: function (url, params, response) {
                                expenseTable.setMaxPage(response.last_page);
                                //console.log("response.last_page", response.last_page);

                                dataLoadExpense = response.data;
                                //console.log("Expenses er data gulo dekhi:", dataLoadExpense);

                                return {

                                    data: response.data,
                                    last_page: response.last_page,

                                };
                            },

                            columns: globalFields1,
                                    
                            rowFormatter: function (row) {
                                var BeforeTaxValue = row.getData().BeforeTax;
                                var TotalVatValue = row.getData().TotalVat;
                                var NetAmountValue = row.getData().NetAmount;

                                // Check for undefined values before formatting
                                var formattedBeforeTax = BeforeTaxValue ? BeforeTaxValue.toLocaleString() : '';
                                var formattedTotalVat = TotalVatValue ? TotalVatValue.toLocaleString() : '';
                                var formattedNetAmount = NetAmountValue ? NetAmountValue.toLocaleString() : '';

                                // Update the HTML content of the cells with the formatted values
                                row.getCell("BeforeTax").getElement().innerHTML = formattedBeforeTax;
                                row.getCell("TotalVat").getElement().innerHTML = formattedTotalVat;
                                row.getCell("NetAmount").getElement().innerHTML = formattedNetAmount;


                              // Create and style holder elements for nested table
                                var holderEl = document.createElement("div");
                                var tableEl = document.createElement("div");

                                holderEl.style.boxSizing = "border-box";

                                holderEl.appendChild(tableEl);

                                row.getElement().appendChild(holderEl);

                                var childData = row.getData().PurchaseItems; // Get the child data array for the current row

                                var childTable = new Tabulator(tableEl, {
                            
                                    data: childData, // Pass the child data array to the child table
                                    columns: [
                                        { title: "Category", field: "CategoryName",headerHozAlign: "left",hozAlign: "left",width:200, resizable: false },
                                        { title: "Name",field: "ProductName",headerHozAlign: "left",hozAlign: "left",width:250, resizable: false }, 
                                        { title: "Code",field: "ProductCode",headerHozAlign: "left",hozAlign: "left",width:250, resizable: false },                               
                                        { title: "Quantity", field: "Quantity",headerHozAlign: "right",hozAlign: "right",width:200,bottomCalc: "sum", resizable: false },
                                        { title: "Rate", field: "Rate",headerHozAlign: "right",hozAlign: "right",width:200,bottomCalc: "sum", resizable: false,
                                           bottomCalcFormatter: "money",    
                                           formatter: "money",  
                                              formatterParams: {
                                                decimal: ".",
                                                thousand: ",",
                                                precision: 2,
                                              },
                                        },
                                        { title: "Price", field: "Amount",headerHozAlign: "right",hozAlign: "right",width:200,bottomCalc: "sum", resizable: false,
                                           bottomCalcFormatter: "money",  
                                           formatter: "money",  
                                              formatterParams: {
                                                decimal: ".",
                                                thousand: ",",
                                                precision: 2,
                                              },
                                        },
                                                               
                                    ],
                                });

                             var detailsIconEl = row.getElement().querySelector(".btn-details-icon");

                          if (detailsIconEl) {
                             detailsIconEl.addEventListener("click", function (event) {
                              event.stopPropagation();

                               if (childTable.getRows().length === 0) {
                               childTable.setData(childData);
                               }

                               holderEl.classList.toggle("child-table-hidden");
                               holderEl.classList.toggle("child-table-visible");

                     

                                if (holderEl.classList.contains("child-table-visible")) {
                                 detailsIconEl.className = "fas fa-chevron-down btn-details-icon"; // Use collapse icon
                                 } else {
                                 detailsIconEl.className = "fas fa-plus btn-details-icon"; // Use expand icon
                                 }
                             });
                          }
                                // Hide the child table initially
                                holderEl.classList.add("child-table-hidden");

                                },


                            });   // expenseTable end 

              
              
                            expenseTable.on("rowSelectionChanged", function (data) {
                                var selectedRows = expenseTable.getSelectedData();
                                //console.log("Selected Rows:", selectedRows);

                                // You can perform actions with the selected rows here
                            });
                            //------------------expense batch delete starts----------------
                            $("#batch-delete").click(function () {
                                // Collect the data of selected rows to be deleted
                                var selectedRows = expenseTable.getSelectedData();
                                //console.log("selectedRows", selectedRows);
                                if (selectedRows.length > 0) {
                                    // Extract the IDs or any identifying data from the selected rows
                                    var dataToBeDeleted = selectedRows.map(row => row.Id);

                                    // Perform the batch delete operation
                                    batchDeleteData(dataToBeDeleted);
                                } else {
                                    // Show a message or alert that no rows are selected for deletion
                                    alert("No rows selected for deletion.");
                                }
                            });
                            //------------------expense batch delete ends----------------

                            // Function to perform the batch delete operation for expense starts-------------------
                            function batchDeleteData(dataToBeDeleted) {
                                //console.log("dataToBeDeleted", dataToBeDeleted);
                                $.ajax({
                                    type: "post",
                                    data: { BillId: dataToBeDeleted },
                                    url: '@Url.Action("BatchDeleteBill", "Admin")',
                                    success: function (response) {
                                        // Handle the success or error response
                                        if (response.success) {
                                            toastr.success(response.msg, "", { "toastClass": "toast-green" });
                                        } else {
                                            toastr.error(response.msg, "", { "toastClass": "toast-red" });
                                        }
                                        GetExpense();
                                    }
                                });
                            }
                            // Function to perform the batch delete operation for expense ends-------------------



                          //======gear icon functionaloties for expense list starts=====
                           
                            // console.log("globalFieldsForSalesList::", globalFields1);
                            // let columnListExpenses = $("#expenseColumnList");
                            //   columnListExpenses.empty();
        
                            // // Initialize columns page load
                            // $.ajax({
                            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
                            //     type: 'GET',
                            //     contentType: 'application/json',
                            //     data: {type: 'Expense' },
                            //     success: function (response) {
            
                            //         if(response.Success == 0)
                            //         {                                                                                   
                            //             $.each(globalFields1, function (index, field) {
                            //                 ////console.log("GLOBAL 2::",field);
                            //                 var title = field.title;
                            //                 var name = field.field;
                            //                 var visible = true;
                            //                 if (field.visible == false) {
                            //                     visible = false;
                            //                 }
                            //                 titles = `<li>
                            //                             <a class="dropdown-item" href="#">
                            //                             <div class="custom-control custom-checkbox" >
                            //                             <input type="checkbox" class="custom-control-input title-input expense-column" id="${name}" value="${name}">
                            //                             <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                            //                             </div>
                            //                             </a>
                            //                             </li>`;
                            //                 columnListExpenses.append(titles);

                            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                            //                     var checkbox = event.target;
                            //                     var isChecked = checkbox.checked;

                            //                     if (isChecked) {
                            //                         expenseTable.showColumn(name);
                            //                     } else {
                            //                         expenseTable.hideColumn(name);
                            //                     }
                            //                 });


                            //                 $(`${'#' + name}`).prop('checked', visible);


                            //                 $('.custom-control-label').on('click', function (e) {
                            //                     e.stopPropagation();
                            //                 });
                            //                 $('#dropdown-titles').on('click', function (e) {
                            //                     e.stopPropagation();
                            //                 });

                            //                 //Add event listener to the rows select input
                            //                 $("#expense-rows").on("change", function () {
                            //                     var selectedRows = $(this).val();
                            //                     if (selectedRows !== null) {
                            //                         // Convert the selected value to an integer
                            //                         var pageSize = parseInt(selectedRows);
                            //                         if (!isNaN(pageSize)) {
                            //                             // Set the page size for the parentTable
                            //                             expenseTable.setPageSize(pageSize);

                            //                             //// You may also want to update the parent table height
                            //                             //updateParentTableHeight();
                            //                         }
                            //                     }
                            //                 });

                            //             });
                            //         }
                            //         else
                            //         {
                            //             var jsonData = response.data.KeyValue;
                            //             var columnData = JSON.parse(jsonData);

                   
                            //             $.each(globalFields1, function (index, globalField) {
                            //                 var matchedField = columnData.find(function (fieldData) {
                            //                     return fieldData.Field === globalField.field;
                            //                 });

                            //                 // If a match is found, update the visibility
                            //                 if (matchedField) {
                            //                     globalField.visible = matchedField.IsVisible;
                            //                 } else {
                            //                     globalField.visible = false; // Default to false if not found
                            //                 }

                            //                 if (matchedField.IsVisible == false) {
                            //                     setTimeout(function() {
                            //                     expenseTable.hideColumn(matchedField.Field);
                            //                     }, 1000);
                            //                 }
                            //                 else
                            //                 {
                            //                     setTimeout(function() {
                            //                     expenseTable.showColumn(matchedField.Field);
                            //                     }, 1000);
                            //                 }
                            //                 var title = globalField.title;
                            //                 var name = globalField.field;
                            //                 var visible = globalField.visible;

                            //                 var titles = `<li>
                            //                 <a class="dropdown-item" href="#">
                            //                     <div class="custom-control custom-checkboxs">
                            //                         <input type="checkbox" class="custom-control-input title-input expense-column" id="${name}" value="${name}">
                            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                            //                     </div>
                            //                 </a>
                            //               </li>`;

                            //                 // Append the generated HTML to your column list
                            //                 columnListExpenses.append(titles);

                            //                 // Set the checkbox state based on visibility
                            //                 $(`#${name}`).prop('checked', visible);

                            //                 // Add event listener to the checkbox to show/hide columns
                            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                            //                     var checkbox = event.target;
                            //                     var isChecked = checkbox.checked;

                            //                     if (isChecked) {
                            //                         expenseTable.showColumn(name);
                            //                     } else {
                            //                         expenseTable.hideColumn(name);
                            //                     }
                            //                 });
                            //             });

                            //             // Prevent the dropdown from closing when clicking on a checkbox or label
                            //             $('.custom-control-label').on('click', function (e) {
                            //                 e.stopPropagation();
                            //             });
                            //             $('#dropdown-titles').on('click', function (e) {
                            //                 e.stopPropagation();
                            //             });

                            //             // Handle change event for #customer-rows
                            //             $("#expense-rows").on("change", function () {
                            //                 var selectedRows = $(this).val();
                            //                 if (selectedRows !== null) {
                            //                     var pageSize = parseInt(selectedRows);
                            //                     if (!isNaN(pageSize)) {
                            //                         expenseTable.setPageSize(pageSize);
                            //                     }
                            //                 }
                            //             });

                            //         }
                            //     },
                            //     error: function (error) {
                            //         // Handle error
                            //         console.error("Error saving settings:", error);
                            //     }
                            // });

            

                    $("#saveExpense").on("click", function () {
                        var columnData = [];

                        var colDefs = expenseTable.getColumnDefinitions();

                        var selectElement = document.getElementById("expense-rows");
                        var selectedValue = selectElement.value;

                        $(".expense-column").each(function () {
                            var field = $(this).val();
                            var title = $(`label[for='${field}']`).text();
                            var isVisible = $(this).is(":checked");

                            colDefs.forEach(function(colDef) {
                                if (colDef.field === field) {
                                    colDef.visible = isVisible;  // Set visibility based on checkbox state                
                                }
                            });

                            // columnData.push({
                            //     Title: title,
                            //     Field: field,
                            //     IsVisible: isVisible
                            // });
                        });

                        var finaldata = {
                            colDefs: colDefs,
                            pageSize: selectedValue
                        };

                        var jsonData = JSON.stringify(finaldata);

                        // Send data via AJAX
                        $.ajax({
                            url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ keyValue: jsonData, type: 'Expense' }),
                            success: function (response) {
                                toastr.success(response.ex, "", {
                                    "toastClass": "toast-green",
                                });
                            },
                            error: function (error) {
                                // Handle error
                                console.error("Error saving settings:", error);
                            }
                        });
                    });

                function DeleteFilter1(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             GetExpense();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };
                                                   
                    //=====Expenses list tabulator ends======





                    //======gear icon functionaloties for Supplier list starts=====
                         //munna                           
                                                    
                         // console.log("globalFieldsForSalesList::", SupplierGlobalFields);
                         //    let columnListSupplier = $("#supplierColumnList");
                         //      columnListSupplier.empty();
        
                         //    // Initialize columns page load
                         //    $.ajax({
                         //        url: '@Url.Action("GetFilteredColumn", "Sales")', 
                         //        type: 'GET',
                         //        contentType: 'application/json',
                         //        data: {type: 'Supplier' },
                         //        success: function (response) {
            
                         //            if(response.Success == 0)
                         //            {                                            
                         //                $.each(SupplierGlobalFields, function (index, field) {
                         //                    //console.log("GLOBAL 2::", field);
                         //                    var title = field.title;
                         //                    var name = field.field;
                         //                    var visible = true;
                         //                    if (field.visible == false) {
                         //                        visible = false;
                         //                    }
                         //                    titles = `<li>
                         //                                <a class="dropdown-item" href="#">
                         //                                <div class="custom-control custom-checkbox" >
                         //                                <input type="checkbox" class="custom-control-input title-input supplier-column" id="${name}" value="${name}">
                         //                                <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                         //                                </div>
                         //                                </a>
                         //                                </li>`;
                         //                    columnListSupplier.append(titles);

                         //                    document.querySelector(`#${name}`).addEventListener('click', function (event) {
                         //                        var checkbox = event.target;
                         //                        var isChecked = checkbox.checked;

                         //                        if (isChecked) {
                         //                            suppliersTable.showColumn(name);
                         //                        } else {
                         //                            suppliersTable.hideColumn(name);
                         //                        }
                         //                    });


                         //                    $(`${'#' + name}`).prop('checked', visible);


                         //                    $('.custom-control-label').on('click', function (e) {
                         //                        e.stopPropagation();
                         //                    });
                         //                    $('#dropdown-titles').on('click', function (e) {
                         //                        e.stopPropagation();
                         //                    });

                         //                    //Add event listener to the rows select input
                         //                     $("#supplier-rows").on("change", function () {
                         //                         var selectedRows = $(this).val();
                         //                         if (selectedRows !== null) {
                         //                             // Convert the selected value to an integer
                         //                             var pageSize = parseInt(selectedRows);
                         //                             if (!isNaN(pageSize)) {
                         //                                 // Set the page size for the parentTable
                         //                                 suppliersTable.setPageSize(pageSize);

                         //                                 //// You may also want to update the parent table height
                         //                                 //updateParentTableHeight();
                         //                             }
                         //                         }
                         //                     });

                         //                });
                         //            }
                         //            else
                         //            {
                         //                var jsonData = response.data.KeyValue;
                         //                var columnData = JSON.parse(jsonData);

                   
                         //                $.each(SupplierGlobalFields, function (index, globalField) {
                         //                    var matchedField = columnData.find(function (fieldData) {
                         //                        return fieldData.Field === globalField.field;
                         //                    });

                         //                    // If a match is found, update the visibility
                         //                    if (matchedField) {
                         //                        globalField.visible = matchedField.IsVisible;
                         //                    } else {
                         //                        globalField.visible = false; // Default to false if not found
                         //                    }

                         //                    if (matchedField.IsVisible == false) {
                         //                        setTimeout(function() {
                         //                        suppliersTable.hideColumn(matchedField.Field);
                         //                        }, 1000);
                         //                    }
                         //                    else
                         //                    {
                         //                        setTimeout(function() {
                         //                        suppliersTable.showColumn(matchedField.Field);
                         //                        }, 1000);
                         //                    }
                         //                    var title = globalField.title;
                         //                    var name = globalField.field;
                         //                    var visible = globalField.visible;

                         //                    var titles = `<li>
                         //                    <a class="dropdown-item" href="#">
                         //                        <div class="custom-control custom-checkboxs">
                         //                            <input type="checkbox" class="custom-control-input title-input supplier-column" id="${name}" value="${name}">
                         //                            <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                         //                        </div>
                         //                    </a>
                         //                  </li>`;

                         //                    // Append the generated HTML to your column list
                         //                    columnListSupplier.append(titles);

                         //                    // Set the checkbox state based on visibility
                         //                    $(`#${name}`).prop('checked', visible);

                         //                    // Add event listener to the checkbox to show/hide columns
                         //                    document.querySelector(`#${name}`).addEventListener('click', function (event) {
                         //                        var checkbox = event.target;
                         //                        var isChecked = checkbox.checked;

                         //                        if (isChecked) {
                         //                            suppliersTable.showColumn(name);
                         //                        } else {
                         //                            suppliersTable.hideColumn(name);
                         //                        }
                         //                    });
                         //                });

                         //                // Prevent the dropdown from closing when clicking on a checkbox or label
                         //                $('.custom-control-label').on('click', function (e) {
                         //                    e.stopPropagation();
                         //                });
                         //                $('#dropdown-titles').on('click', function (e) {
                         //                    e.stopPropagation();
                         //                });

                         //                // Handle change event for #customer-rows
                         //                $("#supplier-rows").on("change", function () {
                         //                    var selectedRows = $(this).val();
                         //                    if (selectedRows !== null) {
                         //                        var pageSize = parseInt(selectedRows);
                         //                        if (!isNaN(pageSize)) {
                         //                            suppliersTable.setPageSize(pageSize);
                         //                        }
                         //                    }
                         //                });

                         //            }
                         //        },
                         //        error: function (error) {
                         //            // Handle error
                         //            console.error("Error saving settings:", error);
                         //        }
                         //    });

            

                    
                                              


                                  //=====Supplier list gear ends======


                                                    function ExecuteRecurrTransaction() {
                                                        $.ajax({
                                                            url: '@Url.Action("ExecuteRecurrTransaction", "Purchase")',
                                                            type: 'GET',
                                                            success: function (response) {
                                                                if (response.Success === 1) {

                                                                } else {
                                                                    console.error(response.ex);
                                                                }
                                                            },
                                                            error: function (error) {
                                                                console.error(error);
                                                            }
                                                        });
                                                    }

                                                   //====Bill list tabulators starts======
                                                    var tableReview;
                                                    function tableReview() {
                                                        tableReview = new Tabulator("#bill-table-review", {
                                                        data: dataTable,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "datafit",
                                                        frozenRows: 1,
                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: 5,
                                                        paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                                        paginationCounter: "rows",
                                                        ajaxURL: apiUrl,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                        ajaxResponse: function (url, params, response) {
                                                            tableReview.setMaxPage(response.last_page);
                                                            //console.log("response.last_page", response.last_page);


                                                            dataLoadReview = response.data;

                                                            var pagesLoadedData = dataLoadReview.filter(function (item) {
                                                                return item.DocType === "Bill";
                                                            });

                                                            //console.log("load:", dataLoadReview);

                                                            pagesLoadedData.forEach((item) => {
                                                                // Check if the DueDate is a valid date string
                                                                if (item.DueDate) {
                                                                    const dateParts = item.DueDate.split('T'); // Split by 'T' to remove the time part
                                                                    const datePart = dateParts[0];
                                                                    const parts = datePart.split('-');

                                                                    if (parts.length === 3) {
                                                                        const year = parts[0].slice(2); // Extract the last two digits of the year
                                                                        const month = formatMonth(parts[1]); // Format the month
                                                                        const day = parts[2];
                                                                        item.DueDate = `${day}-${month}-${year}`;
                                                                    }
                                                                }
                                                            });

                                                            // Function to format the month to three-letter abbreviation
                                                            function formatMonth(monthNumber) {
                                                                const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                                                                return months[parseInt(monthNumber, 10) - 1] || '';
                                                            }


                                                            return {

                                                                data: pagesLoadedData,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: [
                                                            { title: "", field: "CheckBox", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true },
                                                            { title: "VENDOR",headerHozAlign: "left", field: "SupplierName", width: "14px", hozAlign: "left", },
                                                            {
                                                                title: "DUE DATE", headerHozAlign: "left", field: "DueDate", width: "15px", hozAlign: "left", formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the original date value from the cell
                                                                    const originalDate = cell.getValue();

                                                                    // Check if the originalDate is a valid date
                                                                    if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                                        // Format the date as "YYYY-MM-DD"
                                                                        const formattedDate = originalDate.toISOString().split('T')[0];
                                                                        return formattedDate;
                                                                    } else {
                                                                        // Return the original value if it's not a valid date
                                                                        return originalDate;
                                                                    }
                                                                } },
                                                            { title: "BILL AMOUNT", headerHozAlign: "right", field: "", width: "15px", hozAlign: "right", },
                                                            { title: "OPEN BALANCE", headerHozAlign: "right", field: "NetAmount", width: "15px", hozAlign: "right", },
                                                            { title: "STATUS", headerHozAlign: "left", field: "Status", width: "11px", hozAlign: "left",},
                                                                            {
                                                        title: "ACTIONS", field: "button", headerHozAlign: "right", headerSort: false, hozAlign: "right", resizable: false, width: "19px", formatter: function (cell, formatterParams, onRendered) {
                                                                                    var data = cell.getData();
                                                                                    ////console.log("see data::", data);
                                                                                    //var myUrlGet = `editAccountHead(${data.Id})`;
                                                                                    var myUrlGet = `@Url.Action("EditBillByType", "Accounts")?Type=${data.DocType}&PurchaseId=${data.Id}`;
                                                                                    var inActive = `setInactiveUrl(${data.Id}) `
                                                                                    var active = `setActiveUrl(${data.Id}) `


                                                            var editHtml = `
                                                                           <a href='${myUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;

                                                            var viewHtml = `
                                                                                   <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                                                  </a>

                                                                       `;

                                                                                    var deleteHtml;
                                                                                    if (data.IsDelete == 0) {
                                                                                        deleteHtml = `
                                                            <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                            </a>
                                                        `;
                                                                                    }
                                                                                    else if (data.IsDelete == 1) {
                                                                                        deleteHtml = `
                                                            <a onclick='${active}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-recycle"></i><span class='ms-1 mt-2'>Restore</span><br />
                                                            </a>
                                                        `;
                                                                                    }


                                                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                                                            var statusDependentHtml = data.isPosted ? viewHtml : editHtml + deleteHtml;

                                                            var html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a target='_blank' class='fw-bolder mt-2'>Mark as paid</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                                            return html;
                                                         },
                                                         visible: true,cellClick: function(e, cell) {
                                                        // Add a custom class to the cell when it's clicked
                                                        cell.getElement().classList.add('active-cell');
                                                      },
                                                    },
                                                        ],
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });

                                                    }

                                                    $(document).ready(function () {
                                                        $('#CustomerPurchase').select2();
                                                        $('#SupplierPurchase').select2();
                                                        $('#StatusPurchase').select2();

                                                        $.ajax({
                                                            type: "GET",
                                                            url: '@Url.Action("GetBuyers", "BuyerOrder")',
                                                            datatype: "Json",
                                                            success: function (data) {

                                                                $.each(data, function (index, value) {
                                                                    $('#CustomerPurchase').append('<option value="' + value.Id + '" data-currency-id="' + value.CustomerCurrencyId + '" >' + value.Name + '-' + value.CurrencyShortName + '</option>');
                                                                });
                                                            }
                                                        });

                                                        $.ajax({
                                                            type: "GET",
                                                            url: '@Url.Action("GetSupplier", "BuyerOrder")',
                                                            datatype: "Json",
                                                            success: function (data) {

                                                                $.each(data, function (index, value) {
                                                                            $('#SupplierPurchase').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                                                                });
                                                            }
                                                        });

                                                        ExecuteRecurrTransaction();
                                                        tableReview();
                                                         if ('@ListType' === "Expenses")
                                                             {
                                                                    $("#bills-view-id").addClass("d-none");
                                                                    $("#suppliers-view-id").addClass("d-none");
                                                                    $("#expenses-view-id").removeClass("d-none");
                                                                    $("#payments-view-id").addClass("d-none");
                                                                    $("#purchase-view-id").addClass("d-none");

                                                                    $("#Expenses").addClass("active");
                                                                    $("#Purchase_List").removeClass("active");

                                                             }
                                                             if ('@ListType' === "Suppliers")
                                                             {
                                                                    $("#expenses-view-id").addClass("d-none");
                                                                    $("#bills-view-id").addClass("d-none");
                                                                    $("#suppliers-view-id").removeClass("d-none");
                                                                    $("#payments-view-id").addClass("d-none");
                                                                    $("#purchase-view-id").addClass("d-none");

                                                                    $("#Suppliers").addClass("active");
                                                                    $("#Expenses").removeClass("active");
                                                                    $("#Purchase_List").removeClass("active");
                                                             }
                                                             if ('@ListType' === "Payments")
                                                             {
                                                                    $("#expenses-view-id").addClass("d-none");
                                                                    $("#bills-view-id").addClass("d-none");
                                                                    $("#suppliers-view-id").addClass("d-none");
                                                                    $("#payments-view-id").removeClass("d-none");
                                                                    $("#purchase-view-id").addClass("d-none");

                                                                    $("#Payments").addClass("active");
                                                                    $("#Expenses").removeClass("active");
                                                                    $("#Purchase_List").removeClass("active");

                                                             }
                                                             if ('@ListType' === "Purchase_List")
                                                             {
                                                                    $("#expenses-view-id").addClass("d-none");
                                                                    $("#bills-view-id").addClass("d-none");
                                                                    $("#suppliers-view-id").addClass("d-none");
                                                                    $("#payments-view-id").addClass("d-none");
                                                                    $("#purchase-view-id").removeClass("d-none");

                                                                    $("#Payments").removeClass("active");
                                                                    $("#Expenses").removeClass("active");
                                                                    $("#Purchase_List").addClass("active");
                                                                    
                                                                    //GetPurchaseList();
                                                             }
                                                    });

                                                    var tableUnpaid = new Tabulator("#bill-table-unpaid", {
                                                        data: dataTableUnpaid,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "datafit",
                                                        frozenRows: 1,
                                                        //columns: columns,
                                                        columns: [
                                                            { title: "", field: "CheckBox", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true },
                                                            { title: "VENDOR",headerHozAlign: "left", field: "SupplierName", width: "14px", hozAlign: "left", },
                                                            {
                                                                title: "DUE DATE", headerHozAlign: "left", field: "DueDate", width: "15px", hozAlign: "left", formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the original date value from the cell
                                                                    const originalDate = cell.getValue();

                                                                    // Check if the originalDate is a valid date
                                                                    if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                                        // Format the date as "YYYY-MM-DD"
                                                                        const formattedDate = originalDate.toISOString().split('T')[0];
                                                                        return formattedDate;
                                                                    } else {
                                                                        // Return the original value if it's not a valid date
                                                                        return originalDate;
                                                                    }
                                                                } },
                                                            { title: "BILL AMOUNT", headerHozAlign: "right", field: "NetAmount", width: "15px", hozAlign: "right", },
                                                            { title: "OPEN BALANCE", headerHozAlign: "right", field: "NetAmount", width: "15px", hozAlign: "right", },
                                                            { title: "STATUS", headerHozAlign: "left", field: "Status", width: "13px", hozAlign: "left", formatter: customStatusFormatter },
                                                                            {
                                                        title: "Actions", field: "button", headerHozAlign: "right", headerSort: false, hozAlign: "right", resizable: false, width: "19px", formatter: function (cell, formatterParams, onRendered) {
                                                                                    var data = cell.getData();
                                                                                    ////console.log("see data::", data);
                                                                                    //var myUrlGet = `editAccountHead(${data.Id})`;
                                                                                    var myUrlGet = `@Url.Action("EditBillByType", "Accounts")?VoucherId=${data.Id}`;
                                                                                    var inActive = `setInactiveUrl(${data.Id}) `
                                                                                    var active = `setActiveUrl(${data.Id}) `


                                                            var editHtml = `
                                                                           <a href='${myUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;

                                                            var viewHtml = `
                                                                                   <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                                                  </a>

                                                                       `;

                                                                                    var deleteHtml;
                                                                                    if (data.IsDelete == 0) {
                                                                                        deleteHtml = `
                                                            <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                            </a>
                                                        `;
                                                                                    }
                                                                                    else if (data.IsDelete == 1) {
                                                                                        deleteHtml = `
                                                            <a onclick='${active}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-recycle"></i><span class='ms-1 mt-2'>Restore</span><br />
                                                            </a>
                                                        `;
                                                                                    }


                                                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                                                            var statusDependentHtml = data.isPosted ? viewHtml : editHtml + deleteHtml;

                                                            var html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a target='_blank' class='fw-bolder mt-2'>Run Report</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                                            return html;
                                                         },
                                                         visible: true,cellClick: function(e, cell) {
                                                        // Add a custom class to the cell when it's clicked
                                                        cell.getElement().classList.add('active-cell');
                                                      },
                                                    },
                                                        ],
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });


                                                    var tablePaid = new Tabulator("#bill-table-paid", {
                                                        data: dataTablePaid,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "datafit",
                                                        frozenRows: 1,
                                                        //columns: columns,
                                                        columns: [
                                                            { title: "VENDOR",headerHozAlign: "left", field: "SupplierName", width: "22px", hozAlign: "left", },
                                                            {
                                                                title: "BILL DATE", headerHozAlign: "left", field: "BillDate", width: "22px", hozAlign: "left", formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the original date value from the cell
                                                                    const originalDate = cell.getValue();

                                                                    // Check if the originalDate is a valid date
                                                                    if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                                        // Format the date as "YYYY-MM-DD"
                                                                        const formattedDate = originalDate.toISOString().split('T')[0];
                                                                        return formattedDate;
                                                                    } else {
                                                                        // Return the original value if it's not a valid date
                                                                        return originalDate;
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                title: "DUE DATE", headerHozAlign: "left", field: "DueDate", width: "15px", hozAlign: "left", formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the original date value from the cell
                                                                    const originalDate = cell.getValue();

                                                                    // Check if the originalDate is a valid date
                                                                    if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                                        // Format the date as "YYYY-MM-DD"
                                                                        const formattedDate = originalDate.toISOString().split('T')[0];
                                                                        return formattedDate;
                                                                    } else {
                                                                        // Return the original value if it's not a valid date
                                                                        return originalDate;
                                                                    }
                                                                }
                                                            },
                                                            { title: "BILL AMOUNT", headerHozAlign: "right", field: "NetAmount", width: "20px", hozAlign: "right", },
                                                                            {
                                                        title: "Actions", field: "button", headerHozAlign: "right", headerSort: false, hozAlign: "right", resizable: false, width: "19px", formatter: function (cell, formatterParams, onRendered) {
                                                                                    var data = cell.getData();
                                                                                    ////console.log("see data::", data);
                                                                                    //var myUrlGet = `editAccountHead(${data.Id})`;
                                                                                    var myUrlGet = `@Url.Action("EditBillByType", "Accounts")?VoucherId=${data.Id}`;
                                                                                    var inActive = `setInactiveUrl(${data.Id}) `
                                                                                    var active = `setActiveUrl(${data.Id}) `


                                                            var editHtml = `
                                                                           <a href='${myUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;

                                                            var viewHtml = `
                                                                                   <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                                                   <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                                                                  </a>

                                                                       `;

                                                                                    var deleteHtml;
                                                                                    if (data.IsDelete == 0) {
                                                                                        deleteHtml = `
                                                            <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                            </a>
                                                        `;
                                                                                    }
                                                                                    else if (data.IsDelete == 1) {
                                                                                        deleteHtml = `
                                                            <a onclick='${active}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-recycle"></i><span class='ms-1 mt-2'>Restore</span><br />
                                                            </a>
                                                        `;
                                                                                    }


                                                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                                                            var statusDependentHtml = data.isPosted ? viewHtml : editHtml + deleteHtml;

                                                            var html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a target='_blank' class='fw-bolder mt-2'>Run Report</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                                            return html;
                                                         },
                                                         visible: true,cellClick: function(e, cell) {
                                                        // Add a custom class to the cell when it's clicked
                                                        cell.getElement().classList.add('active-cell');
                                                      },
                                                    },
                                                        ],
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });
                                                   //====Bill list tabulators ends======
                                                   //======gear icon functionaloties for bill list review starts=====
                                              //check global fields
        @*var globalFields =
            [
                { title: "Check Box", field: "CheckBox", headerHozAlign: "left", width: "9px", headerSort: false, hozAlign: "left", visible: true },
                        { title: "VENDOR",headerHozAlign: "left", field: "SupplierName", width: "14px", hozAlign: "left", },
                        {
                            title: "DUE DATE", headerHozAlign: "left", field: "DueDate", width: "15px", hozAlign: "left", formatter: function (cell, formatterParams, onRendered) {
                                // Get the original date value from the cell
                                const originalDate = cell.getValue();

                                // Check if the originalDate is a valid date
                                if (originalDate instanceof Date && !isNaN(originalDate)) {
                                    // Format the date as "YYYY-MM-DD"
                                    const formattedDate = originalDate.toISOString().split('T')[0];
                                    return formattedDate;
                                } else {
                                    // Return the original value if it's not a valid date
                                    return originalDate;
                                }
                            } },
                        { title: "BILL AMOUNT", headerHozAlign: "right", field: "BillAmount", width: "15px", hozAlign: "right", },
                        { title: "OPEN BALANCE", headerHozAlign: "right", field: "NetAmount", width: "15px", hozAlign: "right", },
                        { title: "STATUS", headerHozAlign: "left", field: "Status", width: "11px", hozAlign: "left",},
                                        {
                    title: "ACTIONS", field: "button", headerHozAlign: "right", headerSort: false, hozAlign: "right", resizable: false, width: "19px", formatter: function (cell, formatterParams, onRendered) {
                                                var data = cell.getData();
                                                ////console.log("see data::", data);
                                                //var myUrlGet = `editAccountHead(${data.Id})`;
                                                var myUrlGet = `@Url.Action("AddBillByType", "Accounts")?Type=${data.DocType}&PurchaseId=${data.Id}`;
                                                var inActive = `setInactiveUrl(${data.Id}) `
                                                var active = `setActiveUrl(${data.Id}) `


                        var editHtml = `
                                       <a href='${myUrlGet}' class='text-decoration-none text-black ms-3 mt-1'>
                                           <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                       </a>
                                               <div class='dropdown-divider m-0'></div>
                                   `;

                        var viewHtml = `
                                               <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                               <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                              </a>

                                   `;

                                                var deleteHtml;
                                                if (data.IsDelete == 0) {
                                                    deleteHtml = `
                        <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                            <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                        </a>
                    `;
                                                }
                                                else if (data.IsDelete == 1) {
                                                    deleteHtml = `
                        <a onclick='${active}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                            <i class="bi bi-recycle"></i><span class='ms-1 mt-2'>Restore</span><br />
                        </a>
                    `;
                                                }


                        //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                        var statusDependentHtml = data.isPosted ? viewHtml : editHtml + deleteHtml;

                        var html = `
                                      <div class='dropdown ms-1'>
                                          <a target='_blank' class='fw-bolder mt-2'>Mark as paid</a>
                                          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                         <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                              ${statusDependentHtml}

                                          </ul>
                                      </div>
                                  `;

                        return html;
                     },
                     visible: true,cellClick: function(e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                  },
                },
                    ]*@
                                                ////console.log("globalFields::", globalFields);




                                            // Iterate through globalFields and create checkboxes for each column name
                                                    //var columnList = $("#columnList");

                                                    //setTimeout(function () {
                                                    //    $.each(globalFields, function (index, field) {
                                                    //        ////console.log("GLOBAL 1::",field);
                                                    //        var title = field.title;
                                                    //        var name = field.field;
                                                    //        var visible = true;
                                                    //        if (field.visible == false) {
                                                    //            visible = false;
                                                    //        }
                                                    //        titles = `<li>
                                                    //                <a class="dropdown-item" href="#">
                                                    //                <div class="custom-control custom-checkbox" >
                                                    //                <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
                                                    //                        <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                                                    //                </div>
                                                    //                </a>
                                                    //                </li>`;
                                                    //        columnList.append(titles);

                                                    //        document.querySelector(`#${name}`).addEventListener('click', function (event) {
                                                    //            var checkbox = event.target;
                                                    //            var isChecked = checkbox.checked;

                                                    //            if (isChecked) {
                                                    //                tableReview.showColumn(name);
                                                    //                tableUnpaid.showColumn(name);
                                                    //            } else {
                                                    //                tableReview.hideColumn(name);
                                                    //                tableUnpaid.hideColumn(name);
                                                    //            }
                                                    //        });


                                                    //        $(`${'#' + name}`).prop('checked', visible);


                                                    //        $('.custom-control-label').on('click', function (e) {
                                                    //            e.stopPropagation();
                                                    //        });
                                                    //        $('#dropdown-titles').on('click', function (e) {
                                                    //            e.stopPropagation();
                                                    //        });

                                                    //    });
                                                    //}, 5000)


                                                    ////Add event listener to the rows select input
                                                    //$("#rows").on("change", function () {
                                                    //    var selectedRows = $(this).val();
                                                    //    if (selectedRows !== null) {
                                                    //        // Convert the selected value to an integer
                                                    //        var pageSize = parseInt(selectedRows);
                                                    //        if (!isNaN(pageSize)) {
                                                    //            // Set the page size for the parentTable
                                                    //            tableReview.setPageSize(pageSize);
                                                    //            tableUnpaid.setPageSize(pageSize);

                                                    //            //// You may also want to update the parent table height
                                                    //            //updateParentTableHeight();
                                                    //        }
                                                    //    }
                                                    //});
                                            //======gear icon functionaloties for bill list review ends=====




                                                });

                                            };




                //========payment list functionalities starts====================
                // getPayment();

                $('#searchInput2').on('input', function() {
                var inputValue = $(this).val();
                var url = '@Url.Action("GetPaymentList", "Purchase")' + '?searchquery=' + inputValue;
                paymentsTable.setData(url);

                });

                var checkbox2 = [
                     { title: "", field: "CheckBox",width: 15, headerHozAlign: "left",vertAlign: "middle", headerSort: false, hozAlign: "left", formatter: customCheckBoxFormatter, visible: true }
                ]

                var Actions2 = [
                    {
                title: "ACTIONS", field: "Paymentbutton", headerHozAlign: "left", headerSort: false, hozAlign: "left",vertAlign: "middle", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                        var data = cell.getData();                                                                
                        //console.log("payment data", data);                                                                                   
                        // var myUrlGet = `@Url.Action("AddPaymentTypeQB", "Admin")?TransactionId=${data.Id}&SupplierId=${data.SupplierId}`;
                        // var ViewUrlGet = `@Url.Action("AddPaymentTypeQB", "Admin")?TransactionId=${data.Id}&SupplierId=${data.SupplierId}&isCopy=2`; 
                        var myUrlGet = `@Url.Action("EditPaymentTypeQB", "Accounts")?TransactionId=${data.Id}`;
                        var ViewUrlGet = `@Url.Action("EditPaymentTypeQB", "Accounts")?TransactionId=${data.Id}&isCopy=2`;   
                        var inActive = `deletePaymentUrl(${data.Id}) `
                        var active = `setActiveUrl(${data.Id}) `
                        var transactionReportViewUrl = '@Url.Action("TransactionVoucherViewReport", "Admin")?TransactionId=' + data.Id;
                        var viewEditLink = data.isPost === true ? ViewUrlGet : myUrlGet;

                    var printHtml = `
                                    <a href='${transactionReportViewUrl}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-printer pe-1'></i> <span>Print</span>  <br />
                                    </a>
                                            <div class='dropdown-divider m-0'></div>
                                `;
                    var copyHtml = `
                                    <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-c-circle pe-1'></i> <span>Copy</span>  <br />
                                    </a>
                                            <div class='dropdown-divider m-0'></div>
                                `;

                        var editHtml = `
                                            <a href='${myUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                            </a>
                                            <div class='dropdown-divider m-0'></div>
                                `;

                    var viewHtml = `
                                            <a href='${ViewUrlGet}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-eye pe-1'></i> <span>View</span>  <br />
                                            </a>

                                `;
                    var deleteHtml = `
                    <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                        <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                    </a>
                                                            
                    `;


                                            var voidHtml = `
                                    <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-pencil-square pe-1'></i> <span>Void</span>  <br />
                                    </a>

                                `;


                                            //var statusDependentHtml = data.isPost ? viewHtml + deleteHtml : editHtml + deleteHtml;
                                            var statusDependentHtml = data.isPost ? viewHtml : printHtml  + editHtml + deleteHtml/* + voidHtml*/;

                    var html = `
                                    <div class='dropdown ms-1'>
                                        <a href='${viewEditLink}' target='_blank' class='fw-bolder mt-2'>View Payment</a>
                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                        <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                            ${statusDependentHtml}

                                        </ul>
                                    </div>
                                `;

                    return html;
                    },
                    visible: true,cellClick: function(e, cell) {
                // Add a custom class to the cell when it's clicked
                cell.getElement().classList.add('active-cell');
                },
            },
                ]

                    function PaymentGear(){
                    $.ajax({
                        url: '@Url.Action("GetFilteredColumn", "Sales")', 
                        type: 'GET',
                        contentType: 'application/json',
                        data: {type: 'Bill_Payment' },
                        success: function (response) {
    
                            // console.log("check munna::", JSON.parse(response.data.KeyValue));

                            if( response.Success == 1){
                                    if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                                        globalFieldsForPaymentList = JSON.parse(response.data.KeyValue);
                                        pageSize = Number(globalFieldsForPaymentList.pageSize);
                                        $('#payment-rows').val(pageSize);
                                        globalFieldsForPaymentList = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                        return column.field !== "CheckBox" && column.field !== "Paymentbutton";
                                    });

                                    // Prepend the checkBox array at the start of exportcolumn
                                    globalFieldsForPaymentList = checkbox2.concat(globalFieldsForPaymentList);
                            
                                    // Append the Actions array at the end of exportcolumn
                                    globalFieldsForPaymentList = globalFieldsForPaymentList.concat(Actions2);

                                }
                            }
                         
                                populateCheckbox2();
                                getPayment();
                            },
    
                        error: function (error) {
                            // Handle error
                            console.error("Error saving settings:", error);
                        }
                    });

                }


                function showHidePayment(colName) {
       
                    paymentsTable.toggleColumn(colName);           
    
                }


                    function populateCheckbox2(){
                        //let columnListMasterLC = $("#POLColumnList");
                        let items = globalFieldsForPaymentList.map(x => {
                        var titles = `<li>
                                    <a class="dropdown-item" href="#">
                                        <div class="custom-control custom-checkboxs">
                                            <input type="checkbox" onclick = "showHidePayment('${x.field}')" class="custom-control-input title-input payment-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                            <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                        </div>
                                    </a>
                                    </li>`;
                                    return titles;
            
                        });


                        const columnListPayment = document.getElementById('paymentColumnList');
                        columnListPayment.innerHTML = items.join('');
                        $('.custom-control-label').on('click', function (e) {
                            e.stopPropagation();
                        });
                        $('#dropdown-titles').on('click', function (e) {
                            e.stopPropagation();
                        });

                        // Handle change event for #customer-rows
                        $("#payment-rows").on("change", function () {
                            var selectedRows = $(this).val();
                            if (selectedRows !== null) {
                                var pageSize = parseInt(selectedRows);
                                if (!isNaN(pageSize)) {
                                    paymentsTable.setPageSize(pageSize);
                                }
                            }
                        });
   

                    }


                            function getPayment() {
                                function fetchPaymentDataFromServer() {
                                    var MyAppUrlSettings = {
                                        MyUsefulUrl: '@Url.Action("GetPaymentList", "Purchase")'
                                    };
                                    return $.ajax({
                                        url: MyAppUrlSettings.MyUsefulUrl,
                                        dataType: "json",
                                    });
                                }
                                fetchPaymentDataFromServer().done(function (response) {

                                    //console.log("normal response:", response);
                                    var dataTableFilter = response.data;

                                    //console.log("dataTableFilter for payment::", dataTableFilter);

                                    var dataTable = dataTableFilter.filter(function (item) {
                                        return item.DocType === "Bill";
                                    });


                                    //var dataTable = response.data;
                                    //console.log("data table:", dataTable);
                                    const currentDate = new Date();
                                    const formattedCurrentDate = currentDate.toISOString().slice(0, 10);




                                    // Iterate through each element in the dataTable
                                    for (let i = 0; i < dataTable.length; i++) {
                                        const dueDate = dataTable[i].DueDate;

                                        if (dueDate > formattedCurrentDate) {
                                            dataTable[i].toShowNavItems = "unpaid";
                                            toShowNavItems = "unpaid";
                                            ////console.log(`toShowNavItems`, toShowNavItems);
                                        } else {
                                            dataTable[i].toShowNavItems = "paid";
                                            toShowNavItems = "paid";
                                            ////console.log(`toShowNavItems`, toShowNavItems);
                                        }
                                    }



                                    function customCheckBoxFormatter(cell, formatterParams, onRendered) {
                                        return '<input type="checkbox" class="custom-checkbox">';
                                    }

                                    dataTableFilter.forEach((item) => {
                                        // Check if the DueDate is a valid date string
                                        if (item.PaymentDate) {
                                            const dateParts = item.PaymentDate.split('T'); // Split by 'T' to remove the time part
                                            const datePart = dateParts[0];
                                            const parts = datePart.split('-');

                                            if (parts.length === 3) {
                                                const year = parts[0].slice(2); // Extract the last two digits of the year
                                                const month = formatMonth(parts[1]); // Format the month
                                                const day = parts[2];
                                                item.PaymentDate = `${day}-${month}-${year}`;
                                            }
                                        }
                                    });

                                    // Function to format the month to three-letter abbreviation
                                    function formatMonth(monthNumber) {
                                        const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                                        return months[parseInt(monthNumber, 10) - 1] || '';
                                    }
                                                    

                                    var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';

                                    //==================payments tabulator functionalties starts=============
                                    function paymentsListTableFunction() {
                                        function linkFormatter(cell, formatterParams, onRendered) {
                                            var filePath = cell.getValue();
                                            var anchor = document.createElement("a");
                                            anchor.href = filePath;
                                            anchor.target = "_blank";
                                            if (!filePath) {
                                                var paragraph = document.createElement("p");
                                                paragraph.textContent = "No file uploaded";
                                                paragraph.classList.add("text-black-50"); // Add the text-warning class
                                                return paragraph;
                                            }
                                            else {
                                                anchor.textContent = "File";
                                            }
                                            return anchor;
                                        }
                                    var paymentApiUrl = '@Url.Action("GetPaymentList", "Purchase")';
                                    paymentsTable = new Tabulator("#payment-table", {

                                        dataTree: true,
                                        layout: "fitColumns",
                                        dataTreeStartExpanded: true ,
                                        dataTreeChildField: "children",
                                        height: 400,
                                        rowHeight:50,
                                        movableColumns: true,
                                        pagination: true,
                                        paginationMode: "remote",
                                        paginationSize: pageSize,
                                        paginationInitialPage: 1,
                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                        paginationCounter: "rows",
                                        ajaxURL: paymentApiUrl,
                                        ajaxConfig: "get",
                                        ajaxContentType: "json",

                                        ajaxResponse: function (url, params, response) {
                                            paymentsTable.setMaxPage(response.last_page);
                                            //console.log("response.last_page", response.last_page);

                                            dataLoadExpense = response.data;
                                            /* //console.log("dataLoadExpense:", dataLoadExpense);*/

                                            return {

                                                data: dataLoadExpense,
                                                last_page: response.last_page,

                                            };
                                        },

                                        columns: globalFieldsForPaymentList,
                                        dataBound: function () {
                                            // Freeze the top 1 row (index 0) after the table is created
                                            var rows = table.getRows();
                                            if (rows.length > 0) {
                                                var cells = rows[0].getCells();
                                                cells.forEach(cell => {
                                                    cell.freeze();
                                                });
                                            }
                                        },

                                    });



                            document.getElementById("print-paymenttable").addEventListener("click", function () {
                                paymentsTable.print(false, true);
                            });
                            document.getElementById("download-paymentxlsx").addEventListener("click", function () {
                                        paymentsTable.download("xlsx", "Expenses.xlsx", { sheetName: "Expenses" });
                            });

                                    //======gear icon functionaloties for expense list starts=====
                                              

                            //  console.log("globalFieldsForSalesList::", globalFieldsForPaymentList);
                            // let columnListPayment = $("#paymentColumnList");
                            //   columnListPayment.empty();
        
                            // // Initialize columns page load
                            // $.ajax({
                            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
                            //     type: 'GET',
                            //     contentType: 'application/json',
                            //     data: {type: 'Bill Payment' },
                            //     success: function (response) {
            
                            //         if(response.Success == 0)
                            //         {                                                                               
                            //             $.each(globalFieldsForPaymentList, function (index, field) {
                            //                 ////console.log("GLOBAL 2::",field);
                            //                 var title = field.title;
                            //                 var name = field.field;
                            //                 var visible = true;
                            //                 if (field.visible == false) {
                            //                     visible = false;
                            //                 }
                            //                 titles = `<li>
                            //                         <a class="dropdown-item" href="#">
                            //                         <div class="custom-control custom-checkbox" >
                            //                         <input type="checkbox" class="custom-control-input title-input payment-column" id="${name}" value="${name}">
                            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                            //                         </div>
                            //                         </a>
                            //                         </li>`;
                            //                 columnListPayment.append(titles);

                            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                            //                     var checkbox = event.target;
                            //                     var isChecked = checkbox.checked;

                            //                     if (isChecked) {
                            //                         paymentsTable.showColumn(name);
                            //                     } else {
                            //                         paymentsTable.hideColumn(name);
                            //                     }
                            //                 });


                            //                 $(`${'#' + name}`).prop('checked', visible);


                            //                 $('.custom-control-label').on('click', function (e) {
                            //                     e.stopPropagation();
                            //                 });
                            //                 $('#dropdown-titles').on('click', function (e) {
                            //                     e.stopPropagation();
                            //                 });

                            //                 //Add event listener to the rows select input
                            //                 $("#payment-rows").on("change", function () {
                            //                     var selectedRows = $(this).val();
                            //                     if (selectedRows !== null) {
                            //                         // Convert the selected value to an integer
                            //                         var pageSize = parseInt(selectedRows);
                            //                         if (!isNaN(pageSize)) {
                            //                             // Set the page size for the parentTable
                            //                             paymentsTable.setPageSize(pageSize);

                            //                             //// You may also want to update the parent table height
                            //                             //updateParentTableHeight();
                            //                         }
                            //                     }
                            //                 });

                            //             });
                            //         }
                            //         else
                            //         {
                            //             var jsonData = response.data.KeyValue;
                            //             var columnData = JSON.parse(jsonData);

                   
                            //             $.each(globalFieldsForPaymentList, function (index, globalField) {
                            //                 var matchedField = columnData.find(function (fieldData) {
                            //                     return fieldData.Field === globalField.field;
                            //                 });

                            //                 // If a match is found, update the visibility
                            //                 if (matchedField) {
                            //                     globalField.visible = matchedField.IsVisible;
                            //                 } else {
                            //                     globalField.visible = false; // Default to false if not found
                            //                 }

                            //                 if (matchedField.IsVisible == false) {
                            //                     setTimeout(function() {
                            //                     paymentsTable.hideColumn(matchedField.Field);
                            //                     }, 1000);
                            //                 }
                            //                 else
                            //                 {
                            //                     setTimeout(function() {
                            //                     paymentsTable.showColumn(matchedField.Field);
                            //                     }, 1000);
                            //                 }
                            //                 var title = globalField.title;
                            //                 var name = globalField.field;
                            //                 var visible = globalField.visible;

                            //                 var titles = `<li>
                            //                 <a class="dropdown-item" href="#">
                            //                     <div class="custom-control custom-checkboxs">
                            //                         <input type="checkbox" class="custom-control-input title-input payment-column" id="${name}" value="${name}">
                            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                            //                     </div>
                            //                 </a>
                            //               </li>`;

                            //                 // Append the generated HTML to your column list
                            //                 columnListPayment.append(titles);

                            //                 // Set the checkbox state based on visibility
                            //                 $(`#${name}`).prop('checked', visible);

                            //                 // Add event listener to the checkbox to show/hide columns
                            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
                            //                     var checkbox = event.target;
                            //                     var isChecked = checkbox.checked;

                            //                     if (isChecked) {
                            //                         paymentsTable.showColumn(name);
                            //                     } else {
                            //                         paymentsTable.hideColumn(name);
                            //                     }
                            //                 });
                            //             });

                            //             // Prevent the dropdown from closing when clicking on a checkbox or label
                            //             $('.custom-control-label').on('click', function (e) {
                            //                 e.stopPropagation();
                            //             });
                            //             $('#dropdown-titles').on('click', function (e) {
                            //                 e.stopPropagation();
                            //             });

                            //             // Handle change event for #customer-rows
                            //             $("#payment-rows").on("change", function () {
                            //                 var selectedRows = $(this).val();
                            //                 if (selectedRows !== null) {
                            //                     var pageSize = parseInt(selectedRows);
                            //                     if (!isNaN(pageSize)) {
                            //                         paymentsTable.setPageSize(pageSize);
                            //                     }
                            //                 }
                            //             });

                            //         }
                            //     },
                            //     error: function (error) {
                            //         // Handle error
                            //         console.error("Error saving settings:", error);
                            //     }
                            // });

            

                    $("#savePayment").on("click", function () {
                        var columnData = [];

                        var colDefs = paymentsTable.getColumnDefinitions();

                        var selectElement = document.getElementById("payment-rows");
                        var selectedValue = selectElement.value;

                        $(".payment-column").each(function () {
                            var field = $(this).val();
                            var title = $(`label[for='${field}']`).text();
                            var isVisible = $(this).is(":checked");

                            colDefs.forEach(function(colDef) {
                                if (colDef.field === field) {
                                    colDef.visible = isVisible;  // Set visibility based on checkbox state                
                                }
                            });

                            // columnData.push({
                            //     Title: title,
                            //     Field: field,
                            //     IsVisible: isVisible
                            // });
                        });

                        var finaldata = {
                            colDefs: colDefs,
                            pageSize: selectedValue
                        };

                        var jsonData = JSON.stringify(finaldata);

                        // Send data via AJAX
                        $.ajax({
                            url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ keyValue: jsonData, type: 'Bill_Payment' }),
                            success: function (response) {
                                toastr.success(response.ex, "", {
                                    "toastClass": "toast-green",
                                });
                            },
                            error: function (error) {
                                // Handle error
                                console.error("Error saving settings:", error);
                            }
                        });
                    });

                    function DeleteFilter2(data) {
 
                            $.ajax({
                                url: '@Url.Action("DeleteColumnFilter", "Sales")',
                                type: "get",
                                data: { type: data },               
                                success: function (response) {
                                    if (response.success == "1") {
                                        toastr.success(response.msg, "", {
                                            "toastClass": "toast-green",
                                        });
                                        getPayment();
                                    }
         
                                },
                                error: function (xhr, status, error) {
                                    console.error(xhr.responseText);
                                    toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                                }
                            });
    
 
                    };
                        }
                        paymentsListTableFunction();
                    //==================payments tabulator functionalties ends=============

                    });
                }
                //========payment list functionalities ends======================



             function openOffcanvas1(rowData) {
            var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasForBillPayments'));
            
            var id = rowData.Id;
            var purchaseDate = formatDateToCustomDate(rowData.PaymentDate) || '';
            
            var supplierName = rowData.SupplierName || '';
            var totalAmount = rowData.Amount || '';
             var formattedTotalAmount = formatCurrency(totalAmount);
            var statusRemarks = rowData.Remarks || '';
            var billingAddress = rowData.PrimaryAddress || '';
            var phoneNo = rowData.PhoneNo || 'NA';
            var items = rowData.Items || [];
            var docType = 'Bill Payment';
            $("#CodeForBillPayments").text(rowData.PurchaseCode);

            var myUrlGetforInvoice = `@Url.Action("EditBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            var myUrlGetforCreditNote = `@Url.Action("EditBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            var myUrlGetforBillPayments = `@Url.Action("AddPaymentTypeQB", "Accounts")?TransactionId=${id}`;
            var myUrlGetforSalesOrder = myUrlGetforInvoice;
            var myUrlGetforSalesReceipt = myUrlGetforInvoice;
            var myUrlGetforDelayedCharge = `@Url.Action("EditBillByType", "Accounts")?Type=${docType}&PurchaseId=${id}`;
            

            // Populate the div elements
            document.getElementById('FirstDiv1').innerHTML = 'Total:</br><h4>' + formattedTotalAmount + '</h4>Input Date:</br>' + purchaseDate ;
            document.getElementById('SecondDiv1').innerHTML = '<strong>' + supplierName + '</strong>'+ '</br>Billling address:</br>' + billingAddress + '</br>' + rowData.EmailId + '</br>Phone:' + phoneNo;
            document.getElementById('ThirdDiv1').innerHTML = '<strong>Status:</strong> ' + statusRemarks
            document.getElementById('FourthDiv1').innerHTML = '<strong>Product and services:</strong></br>'  ;
             items.forEach(function(item, index) {
                var itemName = item.Name || '';
                var itemAmount = item.Amount || '';

                // Create a new row for each item
                var row = '<div style="display: flex; justify-content: space-between;">';
                row += '<span>' + itemName + '</span>';
                row += '<span>' + formatCurrency(itemAmount) + '</span>';
                row += '</div>';

                document.getElementById('FourthDiv1').innerHTML += row;
            });
            document.getElementById('FifthDiv1').innerHTML = '<strong>More info</strong></br>' + 'Memo:' + rowData.MessageInvoice;

            document.getElementById('PaymentIdForJournal').value = `${id}`;
            

            var button = document.createElement("button");
            if (docType == 'Bill Payment') {
                button.textContent = "Edit Payment";
            }
            else
            {
                button.textContent = "Edit " + docType;
            }
            
            button.className = "btn btn-success";
            button.addEventListener("click", function() {
                if (docType == 'Expense') {
                    window.location.href = myUrlGetforInvoice;
                }
                if (docType == 'Bill') {
                    window.location.href = myUrlGetforCreditNote;
                }
                if (docType == 'Bill Payment') {
                    window.location.href = myUrlGetforBillPayments;
                }
                if (docType == 'Supplier credit') {
                    window.location.href = myUrlGetforSalesOrder;
                }
                if (docType == 'Cheque') {
                    window.location.href = myUrlGetforSalesReceipt;
                }
                if (docType == 'Purchase Order') {
                    window.location.href = myUrlGetforDelayedCharge;
                }
                
                
            });

            // Create a div for the button
            var buttonContainer = document.createElement("div");
            buttonContainer.className = "text-end"; // Align the button to the right

            buttonContainer.appendChild(button);

            // Append the buttonContainer to the SixthDiv
            document.getElementById('SixthDiv1').innerHTML = '';
            document.getElementById('SixthDiv1').appendChild(buttonContainer);
            offcanvas.show();

        }

       
                
        var billPaymentTable; 
         document.getElementById('paymentJournal').addEventListener('click', function() {
            // Call the initTabulator function when the button is clicked
            initTabulatorPayment();
          });
           var journalFields1 = [
                  
                                { title: "Account Head",  field: "AccName" },
                                { title: "Group Head",  field: "GroupHead",visible: false },
                                { title: "Debit", field: "TKDebit",headerHozAlign: "right",hozAlign: "right", bottomCalc: "sum", visible: false,
                                  bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                { title: "Credit", field: "TKCredit",headerHozAlign: "right",hozAlign: "right", bottomCalc: "sum",visible: false,
                                    bottomCalcFormatter: "money",    
                                    formatter: "money",  
                                        formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                     },
                                },
                                {
                                    title: "Debit", field: "TKDebitLocal", headerHozAlign: "right", hozAlign: "right", bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                {
                                    title: "Credit", field: "TKCreditLocal", headerHozAlign: "right", hozAlign: "right", bottomCalc: "sum",
                                    bottomCalcFormatter: "money",
                                    formatter: "money",
                                    formatterParams: {
                                        decimal: ".",
                                        thousand: ",",
                                        precision: 2,
                                    },
                                },
                                
          ]


      function initTabulatorPayment() {         
     
     var SourceId = $("#PaymentIdForJournal").val() ;
     var Source = "Bill Payment";     
     
     $.ajax({
                method: "get",
                async: false,
                url: '@Url.Action("JournalforSalesExpenses", "Purchase")',
                data: { SourceId: SourceId, Source: Source },   

                success: function(result) {   
                    
                    dataabc = result.data;                   

             if (result.data.length === 0) {
                // Show message if dataabc is 0
                alert("This document is not Posted");
            } else {

            billPaymentTable = new Tabulator("#payment-table1", {
                    layout: "fitColumns",
                    data: dataabc,
                    columns: journalFields1
               }); 
            }

              }
          });
    
}




                                            //supplier list starts========================
                                            //trigger download of data.xlsx file
                                            document.getElementById("supplier-download-xlsx").addEventListener("click", function () {
                                                suppliersTable.download("xlsx", "data.xlsx", { sheetName: "My Data" });
                                            });

                                            //trigger download of data.pdf file
                                            document.getElementById("supplier-download-pdf").addEventListener("click", function () {
                                                suppliersTable.download("pdf", "data.pdf", {
                                                    orientation: "portrait", //set page orientation to portrait
                                                    title: "Example Report", //add title to report
                                                });
                                            });




                                            function GetSupplierAll() {
                                                function fetchDataFromServerAll() {
                                                    var MyAppUrlSettings = {
                                                        MyUsefulUrl: '@Url.Action("GetSupplierListAll", "Purchase")'
                                                    };
                                                    return $.ajax({
                                                        url: MyAppUrlSettings.MyUsefulUrl,
                                                        dataType: "json",
                                                    });
                                                }

                                                fetchDataFromServerAll().done(function (response) {

                                                    //console.log("normal response:", response);
                                                    var dataTableFilter = response.data;

                                                    //console.log("dataTableFilter:: for supplier", dataTableFilter);


                                               var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';

                                              //==================suppliers tabulator functionalties starts=============
                                                var supplierApiUrl = '@Url.Action("GetSupplierListAll", "Purchase")';

                                                 suppliersTable = new Tabulator("#supplier-table", {
                                                        data: dataTableFilter,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "fitColumns",

                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: 5,
                                                        paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                                        paginationCounter: "rows",
                                                        ajaxURL: supplierApiUrl,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                            ajaxResponse: function (url, params, response) {
                                                                suppliersTable.setMaxPage(response.last_page);
                                                            //console.log("response.last_page", response.last_page);

                                                            dataLoadExpense = response.data;
                                                           /* //console.log("dataLoadExpense:", dataLoadExpense);*/

                                                            return {

                                                                data: dataLoadExpense,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: [
                                                            {
                                                                title: "", // Title for the checkbox column
                                                                field: "selected", // Field for the checkbox value in your data
                                                                headerSort: false, // Disable sorting for the checkbox column
                                                                formatter: "rowSelection", // Use the built-in row selection formatter
                                                                
                                                                //width: 30, // Adjust the width as needed
                                                            },
                                                            {
                                                                title: "SUPPLIER/COMPANY",
                                                                headerHozAlign: "left",
                                                                field: "SupplierName",
                                                                vertAlign: "middle",
                                                                hozAlign: "left",
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the data for the current row
                                                                    var rowData = cell.getRow().getData();

                                                                    // Create a div to hold the content
                                                                    var container = document.createElement("div");
                                                                    container.style.display = "flex";
                                                                    container.style.flexDirection = "column"; // Display content in a column

                                                                    // Create a span for the SupplierName
                                                                    var supplierSpan = document.createElement("span");
                                                                    supplierSpan.textContent = rowData.SupplierName;
                                                                    supplierSpan.style.marginBottom = "5px"; // Adjust the margin as needed
                                                                    supplierSpan.style.color = "black";
                                                                    supplierSpan.style.fontWeight = "bold";
                                                                    supplierSpan.setAttribute("onclick", `GetCustomerDetails(${rowData.Id})`);

                                                                    // Create a span for the CompanyName
                                                                    var companySpan = document.createElement("span");
                                                                    companySpan.textContent = rowData.CompanyName;
                                                                    companySpan.style.color = "#727272"; // Adjust the color as needed

                                                                    // Append the spans to the container
                                                                    container.appendChild(supplierSpan);
                                                                    container.appendChild(companySpan);

                                                                    return container;
                                                                },
                                                            },
                                                            { title: "Supplier Code",vertAlign:"middle", headerHozAlign: "left", field: "SupplierCode"/*, width: "30px"*/, hozAlign: "center", },
                                                            { title: "ADDRESS",vertAlign:"middle", headerHozAlign: "left", field: "Address"/*, width: "30px"*/, hozAlign: "left", },
                                                            { title: "PHONE", field: "Phone",vertAlign:"middle", headerSort: false, frozen: false, hozAlign: "left", headerHozAlign: "left" },
                                                            { title: "EMAIL", headerHozAlign: "left",vertAlign:"middle", field: "Email", hozAlign: "left", },
                                                            { title: "Currency", headerHozAlign: "left",vertAlign:"middle", field: "Currency", hozAlign: "center", },

                                                            { title: "OPEN BALANCE", field: "OpBalance",hozAlign: "right",vertAlign:"middle", movable: false, headerSort: false, visible: true },
                                                                            {
                                                        title: "ACTIONS", field: "button", headerHozAlign: "left", headerSort: false, hozAlign: "left", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                                                                                    var data = cell.getData();
                                                                                    ////console.log("see data::", data);
                                                                                    //var myUrlGet = `editAccountHead(${data.Id})`;
                                                                                    var myUrlGet = '@Url.Action("Editsupplier", "Admin")?SupplierId=' + data.Id;

                                                                                    var CreateExpenseVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Expense&' + 'SupplierId=' + data.Id;
                                                                                     var CreateBillVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Bill&' + 'SupplierId=' + data.Id;
                                                                                    var CreateChequeVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Cheque&' + 'SupplierId=' + data.Id;
                                                                                    var CreatePOVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Purchase Order&' + 'SupplierId=' + data.Id;
                                                                                    var PaymentVar = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=Payment&FromSupplier=1&' + 'SupplierId=' + data.Id;
                                                                                    var Edit = `editSupplier(${data.Id})`;
                                                                                    var Delete = `setDeleteUrl(${data.Id})`
                                                                                    var active = `setActiveUrl(${data.Id}) `
                                                                                    var viewEdit = `
                                                                           <a onclick=${Edit} href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;

                                                                                    var deleteHtml = `
                                                            <a onclick='${Delete}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                            </a>
                                                                 <div class='dropdown-divider m-0'></div>
                                                        `;
                                                                                    var createBill = `
                                                                        <a href='${CreateBillVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create bill</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createExpense = `
                                                                        <a href='${CreateExpenseVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create expense</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var writeCheque = `
                                                                        <a href='${CreateChequeVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>write Cheque</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createPurchaseOrder = `
                                                                        <a href='${CreatePOVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>create Purchase Order</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;
                                                                                    var makeInactive = `
                                                                           <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>make Inactive</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;
                                                                                    var statusDependentHtml = viewEdit + createExpense + writeCheque + createPurchaseOrder + makeInactive;
                                                                                    var statusDependentHtmlAnother = viewEdit + deleteHtml + createBill + createExpense

                                                                                    var html;
                                                                                    if (data.ClBalance == 0) {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a  href='${CreateBillVar}' class='fw-bolder mt-2'>Create Bill</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' >
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;
                                                                                    }
                                                                                    else {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a href='${PaymentVar}' class='fw-bolder mt-2'>Make Payment</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' >
                                                                                  ${statusDependentHtmlAnother}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                                                                    }

                                                            return html;
                                                         },
                                                         visible: true,cellClick: function(e, cell) {
                                                        // Add a custom class to the cell when it's clicked
                                                        cell.getElement().classList.add('active-cell');
                                                      },
                                                    },
                                                        ],
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });
                                              //==================suppliers tabulator functionalties ends=============





                                              // Function to perform the batch delete operation for supplier starts-------------------
                                                    //------------------supplier batch delete starts----------------
                                                    suppliersTable.on("rowSelectionChanged", function (data) {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("Selected Rows:", selectedRows);

                                                        // You can perform actions with the selected rows here
                                                    });
                                                    $("#supplier-batch-delete").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var dataToBeDeleted = selectedRows.map(row => row.Id);
                                                            supplierBatchDeleteData(dataToBeDeleted);
                                                        } else {
                                                            alert("No rows selected for deletion.");
                                                        }
                                                    });
                                                        //------------------supplier batch delete ends----------------
                                                  function supplierBatchDeleteData(dataToBeDeleted) {
                                                    Swal.fire({
                                                        title: "Are you sure?",
                                                        text: "You won't be able to revert this!",
                                                        icon: "warning",
                                                        showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Yes"
                                                    }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            $.ajax({
                                                                url: '@Url.Action("RestoreBatchDeletedSupplier", "Admin")',
                                                                type: "POST",
                                                                data: { ids: dataToBeDeleted }, // Pass the array of ids
                                                                traditional: true, // Ensures proper serialization of the array
                                                                success: function (response) {
                                                                    if (response.success) {
                                                                        toastr.success(response.msg, "", { "toastClass": "toast-green" });
                                                                    } else {
                                                                        toastr.error(response.msg, "", { "toastClass": "toast-red" });
                                                                    }
                                                                    GetSupplier();
                                                                },
                                                                error: function (xhr, status, error) {
                                                                    console.error(xhr.responseText);
                                                                    toastr.error("Error during batch delete.", "", { "toastClass": "toast-red" });
                                                                }
                                                            });
                                                        }
                                                    });
                                                }
                                                    $("#supplier-email").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var emailsToRedirect = selectedRows.map(row => row.Email).join(','); // Join emails with comma
                                                            window.location.href = "mailto:" + emailsToRedirect;
                                                        } else {
                                                            alert("No rows selected for mail.");
                                                        }
                                                    });
                                                    // Function to perform the batch delete operation for supplier ends-------------------



                                                });
                                                $("#suppliers-rows").on("change", function () {
                                                    var selectedRows = $(this).val();
                                                    if (selectedRows !== null) {
                                                        // Convert the selected value to an integer
                                                        var pageSize = parseInt(selectedRows);
                                                        if (!isNaN(pageSize)) {
                                                            suppliersTable.setPageSize(pageSize);
                                                        }
                                                    }
                                                });



                                            };


                                            $('#include-inactive').change(function () {
                                                if ($(this).is(':checked')) {
                                                    GetSupplierAll();
                                                } else {
                                                    GetSupplier();
                                                }
                                            });



                            //Server-Side search functionality
                            $('#searchInput').on('input', function() {
                                   var inputValue = $(this).val();
                                   var url = '@Url.Action("GetSupplierList", "Purchase")' + '?searchquery=' + inputValue;
                                   suppliersTable.setData(url);

                               });

            //GetSupplier();

            var checkbox4 = [
                 {
                     title: "", // Title for the checkbox column
                     field: "selected1", // Field for the checkbox value in your data
                     headerSort: false, // Disable sorting for the checkbox column
                     formatter: "rowSelection", // Use the built-in row selection formatter
                     hozAlign: "center", // Center-align the checkboxes
                     width: 70, // Adjust the width as needed
                     vertAlign:"middle",
                 },
            ]

            var Actions4 = [
              {
                title: "ACTIONS", field: "Supplierbutton", headerHozAlign: "center", headerSort: false,vertAlign:"middle", hozAlign: "right", resizable: false/*, width: "9px"*/, formatter: function (cell, formatterParams, onRendered) {
                                            var data = cell.getData();
                                            ////console.log("see data::", data);
                                            //var myUrlGet = `editAccountHead(${data.Id})`;
                                            var myUrlGet = '@Url.Action("Editsupplier", "Admin")?SupplierId=' + data.Id;

                                            var CreateExpenseVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Expense&' + 'SupplierId=' + data.Id;
                                            var CreateBillVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Bill&' + 'SupplierId=' + data.Id;
                                            var CreateChequeVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Cheque&' + 'SupplierId=' + data.Id;
                                            var CreatePOVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Purchase Order&' + 'SupplierId=' + data.Id;
                                            var PaymentVar = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=Payment&FromSupplier=1&' + 'SupplierId=' + data.Id;

                                            var Edit = `editSupplier(${data.Id})`;
                                            var Delete = `setDeleteUrl(${data.Id})`
                                            var active = `setActiveUrl(${data.Id}) `
                                            var viewEdit = `
                                    <a onclick=${Edit} href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                    </a>
                                            <div class='dropdown-divider m-0'></div>
                                `;

                                            var deleteHtml = `
                    <a onclick='${Delete}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                        <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                    </a>
                            <div class='dropdown-divider m-0'></div>
                                    `;
                                            var createBill = `
                                <a href='${CreateBillVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                    <i class='bi bi-receipt pe-1'></i> <span>Create bill</span>  <br />
                                </a>
                                <div class='dropdown-divider m-0'></div>
                            `;

                                            var createExpense = `
                                <a href='${CreateExpenseVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                    <i class='bi bi-receipt pe-1'></i> <span>Create expense</span>  <br />
                                </a>
                                <div class='dropdown-divider m-0'></div>
                            `;

                                            var writeCheque = `
                                <a href='${CreateChequeVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                    <i class='bi bi-receipt pe-1'></i> <span>write Cheque</span>  <br />
                                </a>
                                <div class='dropdown-divider m-0'></div>
                            `;

                                            var createPurchaseOrder = `
                                <a href='${CreatePOVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                    <i class='bi bi-receipt pe-1'></i> <span>create Purchase Order</span>  <br />
                                </a>
                                <div class='dropdown-divider m-0'></div>
                            `;
                                            var makeInactive = `
                                    <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                        <i class='bi bi-pencil-square pe-1'></i> <span>make Inactive</span>  <br />
                                    </a>
                                        <div class='dropdown-divider m-0'></div>
                                `;
                                var statusDependentHtml = viewEdit + createExpense + writeCheque + createPurchaseOrder + makeInactive + deleteHtml;
                                var statusDependentHtmlAnother =viewEdit + deleteHtml + createBill + createExpense;
                                            var html;
                                            if (data.ClBalance == 0) {
                                                html = `
                                    <div class='dropdown ms-1'>
                                        <a href='${CreateBillVar}' class='fw-bolder mt-2'>Create Bill</a>
                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                        <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' >
                                            ${statusDependentHtml}

                                        </ul>
                                    </div>
                                `;
                                            }
                                            else {
                                                html = `
                                    <div class='dropdown ms-1'>
                                        <a href='${PaymentVar}' class='fw-bolder mt-2'>Make Payment</a>
                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                        <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' >
                                            ${statusDependentHtmlAnother}

                                        </ul>
                                    </div>
                                `;

                                            }


                    return html;
                    },
                    visible: true,cellClick: function(e, cell) {
                // Add a custom class to the cell when it's clicked
                cell.getElement().classList.add('active-cell');
                },
            },
            ]

            function supplierGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Supplier' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             SupplierGlobalFields = JSON.parse(response.data.KeyValue);
                             pageSize = Number(SupplierGlobalFields.pageSize);
                             $('#supplier-rows').val(pageSize);
                             SupplierGlobalFields = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "selected1" && column.field !== "Supplierbutton";
                            });

                            // Prepend the checkBox array at the start of exportcolumn
                            SupplierGlobalFields = checkbox4.concat(SupplierGlobalFields);
                            
                            // Append the Actions array at the end of exportcolumn
                            SupplierGlobalFields = SupplierGlobalFields.concat(Actions4);

                       }
                    }
                         
                        populateCheckbox4();
                        GetSupplier();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideSupplier(colName) {
       
            suppliersTable.toggleColumn(colName);           
    
        }


          function populateCheckbox4(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = SupplierGlobalFields.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideSupplier('${x.field}')" class="custom-control-input title-input supplier-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListsupplier = document.getElementById('supplierColumnList');
                columnListsupplier.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#supplier-rows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            suppliersTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }

                                            function GetSupplier() {
                                                            function fetchDataFromServer() {
                                                    var MyAppUrlSettings = {
                                                        MyUsefulUrl: '@Url.Action("GetSupplierList", "Purchase")'
                                                    };
                                                    return $.ajax({
                                                        url: MyAppUrlSettings.MyUsefulUrl,
                                                        dataType: "json",
                                                    });
                                                }

                                                fetchDataFromServer().done(function (response) {

                                                    ////console.log("normal response:", response);
                                                    var dataTableFilter = response.data;

                                                    ////console.log("dataTableFilter:: for supplier::", dataTableFilter);

                                                    var dataTable = dataTableFilter.filter(function (item) {
                                                        return item.DocType === "Bill";
                                                    });
                                                    ////console.log("data table:", dataTable);
                                                    const currentDate = new Date();
                                                    const formattedCurrentDate = currentDate.toISOString().slice(0, 10);
                                                    for (let i = 0; i < dataTable.length; i++) {
                                                        const dueDate = dataTable[i].DueDate;

                                                        if (dueDate > formattedCurrentDate) {
                                                            dataTable[i].toShowNavItems = "unpaid";
                                                            toShowNavItems = "unpaid";
                                                        } else {
                                                            dataTable[i].toShowNavItems = "paid";
                                                            toShowNavItems = "paid";
                                                        }
                                                    }



                                                    function customCheckBoxFormatter(cell, formatterParams, onRendered) {
                                                        return '<input type="checkbox" class="custom-checkbox">';
                                                    }

                                                    dataTable.forEach((item) => {
                                                        if (item.DueDate) {
                                                            const dateParts = item.DueDate.split('T');
                                                            const datePart = dateParts[0];
                                                            const parts = datePart.split('-');

                                                            if (parts.length === 3) {
                                                                const year = parts[0].slice(2);
                                                                const month = formatMonth(parts[1]);
                                                                const day = parts[2];
                                                                item.DueDate = `${day}-${month}-${year}`;
                                                            }
                                                        }
                                                    });

                                                    function formatMonth(monthNumber) {
                                                        const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                                                        return months[parseInt(monthNumber, 10) - 1] || '';
                                                    }


                                               var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';
                                                var GetSupplierDetails = '@Url.Action("GetSupplierDetails", "Purchase")';
                                              //==================suppliers tabulator functionalties starts=============// Main supplier table
                                                var supplierApiUrl = '@Url.Action("GetSupplierList", "Purchase")';
                                                 suppliersTable = new Tabulator("#supplier-table", {
                                                       // data: dataTableFilter,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "fitColumns",   
                                                        movableColumns: true,
                                                        selectable:1,
                                                        height:"300px",
                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: pageSize,
                                                        paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000, true],
                                                        paginationCounter: "rows",
                                                        ajaxURL: supplierApiUrl,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                            ajaxResponse: function (url, params, response) {
                                                                suppliersTable.setMaxPage(response.last_page);
                                                           // //console.log("response.last_page", response.last_page);

                                                            dataLoadExpense = response.data;
                                                            ////console.log("dataLoadExpense abc:", dataLoadExpense);

                                                            return {

                                                                data: dataLoadExpense,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: SupplierGlobalFields,
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });
                                              //==================suppliers tabulator functionalties ends=============





                                              // Function to perform the batch delete operation for supplier starts-------------------
                                                    //------------------supplier batch delete starts----------------
                                                    suppliersTable.on("rowSelectionChanged", function (data) {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("Selected Rows:", selectedRows);

                                                        // You can perform actions with the selected rows here
                                                    });
                                                    $("#supplier-batch-delete").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var dataToBeDeleted = selectedRows.map(row => row.Id);
                                                            supplierBatchDeleteData(dataToBeDeleted);
                                                        } else {
                                                            alert("No rows selected for deletion.");
                                                        }
                                                    });
                                                        //------------------supplier batch delete ends----------------
                                                  function supplierBatchDeleteData(dataToBeDeleted) {
                                                    Swal.fire({
                                                        title: "Are you sure?",
                                                        text: "You won't be able to revert this!",
                                                        icon: "warning",
                                                        showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Yes, inactive  it!"
                                                    }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            $.ajax({
                                                                url: '@Url.Action("BatchDeleteSupplier", "Admin")',
                                                                type: "POST",
                                                                data: { ids: dataToBeDeleted }, // Pass the array of ids
                                                                traditional: true, // Ensures proper serialization of the array
                                                                success: function (response) {
                                                                    if (response.success) {
                                                                        toastr.success(response.msg, "", { "toastClass": "toast-green" });
                                                                    } else {
                                                                        toastr.error(response.msg, "", { "toastClass": "toast-red" });
                                                                    }
                                                                    GetSupplier();
                                                                },
                                                                error: function (xhr, status, error) {
                                                                    console.error(xhr.responseText);
                                                                    toastr.error("Error during batch delete.", "", { "toastClass": "toast-red" });
                                                                }
                                                            });
                                                        }
                                                    });
                                                }
                                                    $("#supplier-email").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var emailsToRedirect = selectedRows.map(row => row.Email).join(','); // Join emails with comma
                                                            window.location.href = "mailto:" + emailsToRedirect;
                                                        } else {
                                                            alert("No rows selected for mail.");
                                                        }
                                                    });
                                                    // Function to perform the batch delete operation for supplier ends-------------------



                                                });

                                                $("#suppliers-rows").on("change", function () {
                                                    var selectedRows = $(this).val();
                                                    if (selectedRows !== null) {
                                                        // Convert the selected value to an integer
                                                        var pageSize = parseInt(selectedRows);
                                                        if (!isNaN(pageSize)) {
                                                            suppliersTable.setPageSize(pageSize);
                                                        }
                                                    }
                                                });



                                            };


                        // GetSupplier() function end //

                        // save filter functionlity

                        $("#saveSupplier").on("click", function () {
                        var columnData = [];

                        var colDefs = suppliersTable.getColumnDefinitions();

                        var selectElement = document.getElementById("supplier-rows");
                        var selectedValue = selectElement.value;

                        $(".supplier-column").each(function () {
                            var field = $(this).val();
                            var title = $(`label[for='${field}']`).text();
                            var isVisible = $(this).is(":checked");

                            colDefs.forEach(function(colDef) {
                                if (colDef.field === field) {
                                    colDef.visible = isVisible;  // Set visibility based on checkbox state                
                                }
                            });

                            // columnData.push({
                            //     Title: title,
                            //     Field: field,
                            //     IsVisible: isVisible
                            // });
                        });

                        var finaldata = {
                            colDefs: colDefs,
                            pageSize: selectedValue
                        };

                        var jsonData = JSON.stringify(finaldata);

                        // Send data via AJAX
                        $.ajax({
                            url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ keyValue: jsonData, type: 'Supplier' }),
                            success: function (response) {
                                toastr.success(response.ex, "", {
                                    "toastClass": "toast-green",
                                });
                            },
                            error: function (error) {
                                // Handle error
                                console.error("Error saving settings:", error);
                            }
                        });
                    });

                function DeleteFilter4(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             GetSupplier();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };

               // save filter functionlity end



                                            function GetSupplierUnbilled() {
                                                function fetchUnbilledDataFromServer() {
                                                    var MyAppUrlSettings = {
                                                        MyUsefulUrl: '@Url.Action("GetAllSupplierDataWithPurchase", "Accounts")'
                                                    };
                                                    return $.ajax({
                                                        url: MyAppUrlSettings.MyUsefulUrl,
                                                        dataType: "json",
                                                    });
                                                }

                                                fetchUnbilledDataFromServer().done(function (response) {
                                                    ////console.log("shudhu normal response dekhbo:", response);
                                                    ////console.log("normal response dekhbo:", response.data.Table);
                                                    var dataTableFilter = response.data.Table;

                                                    ////console.log("dataTableFilter::unbilled", dataTableFilter);



                                               var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';

                                              //==================suppliers tabulator functionalties starts=============
                                                var supplierApiUrl = '@Url.Action("GetSupplierList", "Purchase")';
                                               suppliersTable = new Tabulator("#supplier-table", {
                                                        data: dataTableFilter,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "fitColumns",                                                     
                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: 5,
                                                        paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                                        paginationCounter: "rows",
                                                        ajaxURL: supplierApiUrl,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                            ajaxResponse: function (url, params, response) {
                                                                suppliersTable.setMaxPage(response.last_page);
                                                            ////console.log("response.last_page", response.last_page);

                                                            dataLoadExpense = response.data;
                                                           /* //console.log("dataLoadExpense:", dataLoadExpense);*/

                                                            return {

                                                                data: dataLoadExpense,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: [
                                                            {
                                                                title: "", // Title for the checkbox column
                                                                field: "selected", // Field for the checkbox value in your data
                                                                headerSort: false, // Disable sorting for the checkbox column
                                                                formatter: "rowSelection", // Use the built-in row selection formatter
                                                                
                                                                width: 30, // Adjust the width as needed
                                                                vertAlign:"middle",
                                                            },
                                                            {
                                                                title: "SUPPLIER/COMPANY",
                                                                headerHozAlign: "left",
                                                                field: "SupplierNames",
                                                                vertAlign: "middle",
                                                                hozAlign: "left",
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the data for the current row
                                                                    var rowData = cell.getRow().getData();

                                                                    // Create a div to hold the content
                                                                    var container = document.createElement("div");
                                                                    container.style.display = "flex";
                                                                    container.style.flexDirection = "column"; // Display content in a column

                                                                    // Create a span for the SupplierName
                                                                    var supplierSpan = document.createElement("span");
                                                                    supplierSpan.textContent = rowData.SupplierNames;
                                                                    supplierSpan.style.marginBottom = "5px"; // Adjust the margin as needed
                                                                    supplierSpan.style.color = "black";
                                                                    supplierSpan.style.fontWeight = "bold";
                                                                    supplierSpan.setAttribute("onclick", `GetCustomerDetails(${rowData.Id})`);

                                                                    // Create a span for the CompanyName
                                                                    var companySpan = document.createElement("span");
                                                                    companySpan.textContent = rowData.CompanyName;
                                                                    companySpan.style.color = "#727272"; // Adjust the color as needed

                                                                    // Append the spans to the container
                                                                    container.appendChild(supplierSpan);
                                                                    container.appendChild(companySpan);

                                                                    return container;
                                                                },
                                                            },
                                                            { title: "Supplier Code",vertAlign:"middle", headerHozAlign: "left", field: "SupplierCode"/*, width: "30px"*/, hozAlign: "center", },
                                                            { title: "ADDRESS", headerHozAlign: "left", vertAlign:"middle",field: "Address", hozAlign: "left", },
                                                            { title: "PHONE", field: "Phone", headerSort: false,vertAlign:"middle", frozen: false, hozAlign: "left", headerHozAlign: "left" },
                                                            { title: "EMAIL", headerHozAlign: "left", field: "Email",vertAlign:"middle", hozAlign: "left", },


                                                            {
                                                                title: "OPEN PURCHASE ORDERS", headerHozAlign: "left", field: "Status",vertAlign:"middle", hozAlign: "left", visible: true,
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    var count = cell.getValue();
                                                                    if (count > 0) {
                                                                        // If there are open purchase orders, create a link
                                                                       // return '<a href="" target="_blank">' + count +' Open purchase order'+ '</a>';
                                                                          var rowData = cell.getRow().getData();
                                                                        var link = `<a href="javascript:GetCustomerDetails(${rowData.Id})">${count} Open purchase order</a>`;
                                                                        return link;

                                                                    } else {
                                                                        // If count is 0, display a blank tag
                                                                        return '';
                                                                    }
                                                                },
                                                            },
                                                            { title: "PO AMOUNT", field: "NetAmount",hozAlign: "right", movable: false,vertAlign:"middle", headerSort: false, visible: true, },
                                                                            {
                                                        title: "ACTIONS", field: "button", headerHozAlign: "left", headerSort: false, hozAlign: "left",vertAlign:"middle", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                                                                                    var data = cell.getData();
                                                                                    ////console.log("see data::", data);
                                                                                    //var myUrlGet = `editAccountHead(${data.Id})`;
                                                                                    var myUrlGet = '@Url.Action("Editsupplier", "Admin")?SupplierId=' + data.Id;

                                                                                    var CreateExpenseVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Expense&' + 'SupplierId=' + data.Id;
                                                                                     var CreateBillVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Bill&' + 'SupplierId=' + data.Id;
                                                                                    var CreateChequeVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Cheque&' + 'SupplierId=' + data.Id;
                                                                                    var CreatePOVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Purchase Order&' + 'SupplierId=' + data.Id;
                                                                                    var PaymentVar = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=Payment&FromSupplier=1&' + 'SupplierId=' + data.Id;
                                                                                    var Edit = `editSupplier(${data.Id})`;
                                                                                    var Delete = `setDeleteUrl(${data.Id})`
                                                                                    var active = `setActiveUrl(${data.Id}) `

                                                                                    var viewEdit = `
                                                                           <a onclick=${Edit} href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;
                                                                                    var deleteHtml = `
                                                            <a onclick='${Delete}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                            </a>
                                                                  <div class='dropdown-divider m-0'></div>
                                                        `;
                                                                                    var createBill = `
                                                                        <a href='${CreateBillVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create bill</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createExpense = `
                                                                        <a href='${CreateExpenseVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create expense</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var writeCheque = `
                                                                        <a href='${CreateChequeVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>write Cheque</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createPurchaseOrder = `
                                                                        <a href='${CreatePOVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>create Purchase Order</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;
                                                                                    var makeInactive = `
                                                                           <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-receipt pe-1'></i> <span>make Inactive</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;
                                                                                    var statusDependentHtml = viewEdit + createExpense + writeCheque + createPurchaseOrder + makeInactive;
                                                                                    var statusDependentHtmlAnother = viewEdit + deleteHtml + createBill + createExpense

                                                                                    var html;
                                                                                    if (data.ClBalance == 0) {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a  href='${CreateBillVar}' class='fw-bolder mt-2'>Create Bill</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;
                                                                                    }
                                                                                    else {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a href='${PaymentVar}' class='fw-bolder mt-2'>Make Payment</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                  ${statusDependentHtmlAnother}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                                                                    }

                                                            return html;
                                                         },
                                                         visible: true,cellClick: function(e, cell) {
                                                        // Add a custom class to the cell when it's clicked
                                                        cell.getElement().classList.add('active-cell');
                                                      },
                                                    },
                                                        ],
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });
                                              //==================suppliers tabulator functionalties ends=============


                                                        // Function to perform the batch delete operation for supplier starts-------------------
                                                    //------------------supplier batch delete starts----------------
                                                    suppliersTable.on("rowSelectionChanged", function (data) {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("Selected Rows:", selectedRows);

                                                        // You can perform actions with the selected rows here
                                                    });
                                                    $("#supplier-batch-delete").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var dataToBeDeleted = selectedRows.map(row => row.Id);
                                                            supplierBatchDeleteData(dataToBeDeleted);
                                                        } else {
                                                            alert("No rows selected for deletion.");
                                                        }
                                                    });
                                                        //------------------supplier batch delete ends----------------
                                                  function supplierBatchDeleteData(dataToBeDeleted) {
                                                    Swal.fire({
                                                        title: "Are you sure?",
                                                        text: "You won't be able to revert this!",
                                                        icon: "warning",
                                                        showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Yes, delete it!"
                                                    }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            $.ajax({
                                                                url: '@Url.Action("BatchDeleteSupplier", "Admin")',
                                                                type: "POST",
                                                                data: { ids: dataToBeDeleted }, // Pass the array of ids
                                                                traditional: true, // Ensures proper serialization of the array
                                                                success: function (response) {
                                                                    if (response.success) {
                                                                        toastr.success(response.msg, "", { "toastClass": "toast-green" });
                                                                    } else {
                                                                        toastr.error(response.msg, "", { "toastClass": "toast-red" });
                                                                    }
                                                                    GetSupplierUnbilled();
                                                                },
                                                                error: function (xhr, status, error) {
                                                                    console.error(xhr.responseText);
                                                                    toastr.error("Error during batch delete.", "", { "toastClass": "toast-red" });
                                                                }
                                                            });
                                                        }
                                                    });
                                                }

                                                    $("#supplier-email").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var emailsToRedirect = selectedRows.map(row => row.Email).join(','); // Join emails with comma
                                                            window.location.href = "mailto:" + emailsToRedirect;
                                                        } else {
                                                            alert("No rows selected for mail.");
                                                        }
                                                    });

                                                    // Function to perform the batch delete operation for supplier ends-------------------

                                                });

                                                $("#suppliers-rows").on("change", function () {
                                                    var selectedRows = $(this).val();
                                                    if (selectedRows !== null) {
                                                        // Convert the selected value to an integer
                                                        var pageSize = parseInt(selectedRows);
                                                        if (!isNaN(pageSize)) {
                                                            suppliersTable.setPageSize(pageSize);
                                                        }
                                                    }
                                                });



                                            };


                                            /*GetSupplierUnbilled();*/

                                            function GetSupplierOverDue() {
                                                function fetchOverDueDataFromServer() {
                                                    var MyAppUrlSettings = {
                                                        MyUsefulUrl: '@Url.Action("GetAllSupplierDataWithPurchase", "Accounts")'
                                                    };
                                                    return $.ajax({
                                                        url: MyAppUrlSettings.MyUsefulUrl,
                                                        dataType: "json",
                                                    });
                                                }

                                                fetchOverDueDataFromServer().done(function (response) {

                                                    ////console.log("normal response:", response);
                                                    var dataTableFilter = response.data.Table2;


                                               var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';

                                              //==================suppliers tabulator functionalties starts=============
                                                var supplierApiUrl = '@Url.Action("GetSupplierList", "Purchase")';
                                                suppliersTable = new Tabulator("#supplier-table", {
                                                        data: dataTableFilter,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "fitColumns",                                                      
                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: 5,
                                                        paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                                        paginationCounter: "rows",
                                                        ajaxURL: supplierApiUrl,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                            ajaxResponse: function (url, params, response) {
                                                                suppliersTable.setMaxPage(response.last_page);
                                                            ////console.log("response.last_page", response.last_page);

                                                            dataLoadExpense = response.data;
                                                           /* //console.log("dataLoadExpense:", dataLoadExpense);*/

                                                            return {

                                                                data: dataLoadExpense,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: [
                                                            {
                                                                title: "", // Title for the checkbox column
                                                                field: "selected", // Field for the checkbox value in your data
                                                                headerSort: false, // Disable sorting for the checkbox column
                                                                formatter: "rowSelection", // Use the built-in row selection formatter
                                                                hozAlign: "center",
                                                                width: 50, // Adjust the width as needed
                                                                vertAlign:"middle",
                                                            },
                                                            {
                                                                title: "SUPPLIER/COMPANY",
                                                                headerHozAlign: "left",
                                                                field: "SupplierNames",
                                                                vertAlign: "middle",
                                                                hozAlign: "left",
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the data for the current row
                                                                    var rowData = cell.getRow().getData();

                                                                    // Create a div to hold the content
                                                                    var container = document.createElement("div");
                                                                    container.style.display = "flex";
                                                                    container.style.flexDirection = "column"; // Display content in a column

                                                                    // Create a span for the SupplierName
                                                                    var supplierSpan = document.createElement("span");
                                                                    supplierSpan.textContent = rowData.SupplierNames;
                                                                    supplierSpan.style.marginBottom = "5px"; // Adjust the margin as needed
                                                                    supplierSpan.style.color = "black";
                                                                    supplierSpan.style.fontWeight = "bold";
                                                                    supplierSpan.setAttribute("onclick", `GetCustomerDetails(${rowData.Id})`);

                                                                    // Create a span for the CompanyName
                                                                    var companySpan = document.createElement("span");
                                                                    companySpan.textContent = rowData.CompanyName;
                                                                    companySpan.style.color = "#727272"; // Adjust the color as needed

                                                                    // Append the spans to the container
                                                                    container.appendChild(supplierSpan);
                                                                    container.appendChild(companySpan);

                                                                    return container;
                                                                },
                                                            },
                                                            { title: "Supplier Code",vertAlign:"middle", headerHozAlign: "left", field: "SupplierCode"/*, width: "30px"*/, hozAlign: "center", },
                                                            { title: "ADDRESS", headerHozAlign: "left", field: "Address",vertAlign:"middle", hozAlign: "left", },
                                                            { title: "PHONE", field: "Phone", headerSort: false, frozen: false, hozAlign: "right",vertAlign:"middle", headerHozAlign: "left" },
                                                            { title: "EMAIL", headerHozAlign: "left", field: "Email",vertAlign:"middle", hozAlign: "left", },


                                                            {
                                                                title: "PENDING BILL", headerHozAlign: "left", field: "Status",vertAlign:"middle", hozAlign: "left", visible: true,
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    var count = cell.getValue();
                                                                    var iconHtml = count > 0 ? '<i class="bi bi-exclamation-circle-fill fs-5 text-danger"></i> ' : '';
                                                                    //var linkHtml = count > 0 ? '<a href="" target="_blank"><span>' + count + ' Overdue bill' + '</span></a>' : '';
                                                                     var rowData = cell.getRow().getData();
                                                                     var linkHtml = count > 0 ? `<a href="javascript:GetCustomerDetails(${rowData.Id})"><span>${count} Overdue bill</span></a>` : '';

                                                                    return iconHtml + linkHtml;
                                                                },
                                                            },
                                                            { title: "OVERDUE BALANCE", field: "NetAmount", movable: false,vertAlign:"middle",hozAlign: "right", headerSort: false, visible: true },
                                                                            {
                                                        title: "ACTIONS", field: "button", headerHozAlign: "left", headerSort: false,vertAlign:"middle", hozAlign: "left", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                                                                                    var data = cell.getData();
                                                                                    ////console.log("see data::", data);
                                                                                    //var myUrlGet = `editAccountHead(${data.Id})`;
                                                                                    var myUrlGet = '@Url.Action("Editsupplier", "Admin")?SupplierId=' + data.Id;

                                                                                    var CreateExpenseVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Expense&' + 'SupplierId=' + data.Id;
                                                                                     var CreateBillVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Bill&' + 'SupplierId=' + data.Id;
                                                                                    var CreateChequeVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Cheque&' + 'SupplierId=' + data.Id;
                                                                                    var CreatePOVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Purchase Order&' + 'SupplierId=' + data.Id;
                                                                                    var PaymentVar = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=Payment&FromSupplier=1&' + 'SupplierId=' + data.Id;
                                                                                    var Edit = `editSupplier(${data.Id})`;
                                                                                    var Delete = `setDeleteUrl(${data.Id})`
                                                                                    var active = `setActiveUrl(${data.Id}) `
                                                                                    var viewEdit = `
                                                                           <a onclick=${Edit} href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;


                                                                                   var  deleteHtml = `
                                                            <a onclick='${Delete}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                            </a>
                                                                     <div class='dropdown-divider m-0'></div>
                                                        `;
                                                                                    var createBill = `
                                                                        <a href='${CreateBillVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create bill</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createExpense = `
                                                                        <a href='${CreateExpenseVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create expense</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var writeCheque = `
                                                                        <a href='${CreateChequeVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>write Cheque</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createPurchaseOrder = `
                                                                        <a href='${CreatePOVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>create Purchase Order</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;
                                                                                    var makeInactive = `
                                                                           <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>make Inactive</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;
                                                                                    var statusDependentHtml = viewEdit + createExpense + writeCheque + createPurchaseOrder + makeInactive;
                                                                                    var statusDependentHtmlAnother = viewEdit + deleteHtml + createBill + createExpense

                                                                                    var html;
                                                                                    if (data.ClBalance == 0) {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a href='${CreateBillVar}'class='fw-bolder mt-2'>Create Bill</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;
                                                                                    }
                                                                                    else {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a href='${PaymentVar}' class='fw-bolder mt-2'>Make Payment</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                  ${statusDependentHtmlAnother}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                                                                    }

                                                            return html;
                                                         },
                                                         visible: true,cellClick: function(e, cell) {
                                                        // Add a custom class to the cell when it's clicked
                                                        cell.getElement().classList.add('active-cell');
                                                      },
                                                    },
                                                        ],
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });
                                              //==================suppliers tabulator functionalties ends=============


                                               // Function to perform the batch delete operation for supplier starts-------------------
                                                    //------------------supplier batch delete starts----------------
                                                    suppliersTable.on("rowSelectionChanged", function (data) {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("Selected Rows:", selectedRows);

                                                        // You can perform actions with the selected rows here
                                                    });
                                                    $("#supplier-batch-delete").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var dataToBeDeleted = selectedRows.map(row => row.Id);
                                                            supplierBatchDeleteData(dataToBeDeleted);
                                                        } else {
                                                            alert("No rows selected for deletion.");
                                                        }
                                                    });
                                                        //------------------supplier batch delete ends----------------
                                                  function supplierBatchDeleteData(dataToBeDeleted) {
                                                    Swal.fire({
                                                        title: "Are you sure?",
                                                        text: "You won't be able to revert this!",
                                                        icon: "warning",
                                                        showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Yes, delete it!"
                                                    }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            $.ajax({
                                                                url: '@Url.Action("BatchDeleteSupplier", "Admin")',
                                                                type: "POST",
                                                                data: { ids: dataToBeDeleted }, // Pass the array of ids
                                                                traditional: true, // Ensures proper serialization of the array
                                                                success: function (response) {
                                                                    if (response.success) {
                                                                        toastr.success(response.msg, "", { "toastClass": "toast-green" });
                                                                    } else {
                                                                        toastr.error(response.msg, "", { "toastClass": "toast-red" });
                                                                    }
                                                                    GetSupplierOverDue();
                                                                },
                                                                error: function (xhr, status, error) {
                                                                    console.error(xhr.responseText);
                                                                    toastr.error("Error during batch delete.", "", { "toastClass": "toast-red" });
                                                                }
                                                            });
                                                        }
                                                    });
                                                }
                                                    $("#supplier-email").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        ////console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var emailsToRedirect = selectedRows.map(row => row.Email).join(','); // Join emails with comma
                                                            window.location.href = "mailto:" + emailsToRedirect;
                                                        } else {
                                                            alert("No rows selected for mail.");
                                                        }
                                                    });
                                                    // Function to perform the batch delete operation for supplier ends-------------------

                                                });
                                                $("#suppliers-rows").on("change", function () {
                                                    var selectedRows = $(this).val();
                                                    if (selectedRows !== null) {
                                                        // Convert the selected value to an integer
                                                        var pageSize = parseInt(selectedRows);
                                                        if (!isNaN(pageSize)) {
                                                            suppliersTable.setPageSize(pageSize);
                                                        }
                                                    }
                                                });



                                            };

                                           /* GetSupplierOverDue();*/


                                              function GetSupplierOpen() {
                                                  function fetchOpenDataFromServer() {
                                                    var MyAppUrlSettings = {
                                                    MyUsefulUrl: '@Url.Action("GetAllSupplierDataWithPurchase", "Accounts")'
                                                    };
                                                    return $.ajax({
                                                        url: MyAppUrlSettings.MyUsefulUrl,
                                                        dataType: "json",
                                                    });
                                                }

                                                  fetchOpenDataFromServer().done(function (response) {

                                                    //console.log("normal response:", response);
                                                      var dataTableFilter = response.data.Table1;
                                                      //console.log("open er ta dekhi", dataTableFilter);


                                               var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';

                                              //==================suppliers tabulator functionalties starts=============
                                                var supplierApiUrl = '@Url.Action("GetSupplierList", "Purchase")';
                                              suppliersTable = new Tabulator("#supplier-table", {
                                                        data: dataTableFilter,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "fitColumns",                                                      
                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: 5,
                                                        paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                                        paginationCounter: "rows",
                                                        ajaxURL: supplierApiUrl,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                            ajaxResponse: function (url, params, response) {
                                                                suppliersTable.setMaxPage(response.last_page);
                                                            //console.log("response.last_page", response.last_page);

                                                            dataLoadExpense = response.data;
                                                           /* //console.log("dataLoadExpense:", dataLoadExpense);*/

                                                            return {

                                                                data: dataLoadExpense,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: [
                                                            {
                                                                title: "", // Title for the checkbox column
                                                                field: "selected", // Field for the checkbox value in your data
                                                                headerSort: false, // Disable sorting for the checkbox column
                                                                formatter: "rowSelection", // Use the built-in row selection formatter
                                                                hozAlign: "center", // Adjust the width as needed
                                                                width: 50, // Adjust the width as needed
                                                                vertAlign:"middle",
                                                            },
                                                            {
                                                                title: "SUPPLIER/COMPANY",
                                                                headerHozAlign: "left",
                                                                field: "SupplierNames",
                                                                vertAlign: "middle",
                                                                hozAlign: "left",
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the data for the current row
                                                                    var rowData = cell.getRow().getData();

                                                                    // Create a div to hold the content
                                                                    var container = document.createElement("div");
                                                                    container.style.display = "flex";
                                                                    container.style.flexDirection = "column"; // Display content in a column

                                                                    // Create a span for the SupplierName
                                                                    var supplierSpan = document.createElement("span");
                                                                    supplierSpan.textContent = rowData.SupplierNames;
                                                                    supplierSpan.style.marginBottom = "5px"; // Adjust the margin as needed
                                                                    supplierSpan.style.color = "black";
                                                                    supplierSpan.style.fontWeight = "bold";
                                                                    supplierSpan.setAttribute("onclick", `GetCustomerDetails(${rowData.Id})`);

                                                                    // Create a span for the CompanyName
                                                                    var companySpan = document.createElement("span");
                                                                    companySpan.textContent = rowData.CompanyName;
                                                                    companySpan.style.color = "#727272"; // Adjust the color as needed

                                                                    // Append the spans to the container
                                                                    container.appendChild(supplierSpan);
                                                                    container.appendChild(companySpan);

                                                                    return container;
                                                                },
                                                            },
                                                            { title: "Supplier Code",vertAlign:"middle", headerHozAlign: "left", field: "SupplierCode"/*, width: "30px"*/, hozAlign: "center", },
                                                            { title: "ADDRESS", headerHozAlign: "left", field: "Address",vertAlign:"middle", hozAlign: "left", },
                                                            { title: "PHONE", field: "Phone", headerSort: false, frozen: false,vertAlign:"middle", hozAlign: "left", headerHozAlign: "left" },
                                                            { title: "EMAIL", headerHozAlign: "left", field: "Email",vertAlign:"middle", hozAlign: "left", },
                                                            { title: "Currency", headerHozAlign: "left", field: "Currency",vertAlign:"middle", hozAlign: "center", },


                                                            {
                                                                title: "PENDING BILL", headerHozAlign: "left", field: "Status",vertAlign:"middle", hozAlign: "left", visible: true,
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    var count = cell.getValue();
                                                                    if (count > 0) {
                                                                        // If there are open purchase orders, create a link
                                                                        //return '<a href="" target="_blank">' + count + ' Open Bill' + '</a>';

                                                                        var rowData = cell.getRow().getData();
                                                                        var link = `<a href="javascript:GetCustomerDetails(${rowData.Id})">${count} Open Bill</a>`;
                                                                        return link;
                                                                    } else {
                                                                        // If count is 0, display a blank tag
                                                                        return '';
                                                                    }
                                                                },
                                                            },
                                                            { title: "OPEN BALANCE", field: "NetAmount",hozAlign: "right", movable: false, headerSort: false,vertAlign:"middle", visible: true },
                                                                            {
                                                        title: "ACTIONS", field: "button", headerHozAlign: "left", headerSort: false,vertAlign:"middle", hozAlign: "left", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                                                                                    var data = cell.getData();
                                                                                    ////console.log("see data::", data);
                                                                                    //var myUrlGet = `editAccountHead(${data.Id})`;
                                                                                    var myUrlGet = '@Url.Action("Editsupplier", "Admin")?SupplierId=' + data.Id;

                                                                                    var CreateExpenseVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Expense&' + 'SupplierId=' + data.Id;
                                                                                     var CreateBillVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Bill&' + 'SupplierId=' + data.Id;
                                                                                    var CreateChequeVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Cheque&' + 'SupplierId=' + data.Id;
                                                                                    var CreatePOVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Purchase Order&' + 'SupplierId=' + data.Id;
                                                                                    var PaymentVar = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=Payment&FromSupplier=1&' + 'SupplierId=' + data.Id;

                                                                                    var Edit = `editSupplier(${data.Id})`;
                                                                                    var Delete = `setDeleteUrl(${data.Id})`
                                                                                    var active = `setActiveUrl(${data.Id}) `

                                                                                    var viewEdit = `
                                                                           <a onclick=${Edit} href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;

                                                                                   var deleteHtml = `
                                                            <a onclick='${Delete}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                            </a>
                                                                     <div class='dropdown-divider m-0'></div>
                                                        `;
                                                                                    var createBill = `
                                                                        <a href='${CreateBillVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create bill</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createExpense = `
                                                                        <a href='${CreateExpenseVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create expense</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var writeCheque = `
                                                                        <a href='${CreateChequeVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>write Cheque</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createPurchaseOrder = `
                                                                        <a href='${CreatePOVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>create Purchase Order</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;
                                                                                    var makeInactive = `
                                                                           <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>make Inactive</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;
                                                                                    var statusDependentHtml = viewEdit + createExpense + writeCheque + createPurchaseOrder + makeInactive;
                                                                                    var statusDependentHtmlAnother = viewEdit + deleteHtml + createBill + createExpense

                                                                                    var html;
                                                                                    if (data.ClBalance == 0) {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a href='${CreateBillVar}' class='fw-bolder mt-2'>Create Bill</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;
                                                                                    }
                                                                                    else {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a href='${PaymentVar}' class='fw-bolder mt-2'>Make Payment</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                  ${statusDependentHtmlAnother}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                                                                    }

                                                            return html;
                                                         },
                                                         visible: true,cellClick: function(e, cell) {
                                                        // Add a custom class to the cell when it's clicked
                                                        cell.getElement().classList.add('active-cell');
                                                      },
                                                    },
                                                        ],
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });
                                              //==================suppliers tabulator functionalties ends=============

                                               // Function to perform the batch delete operation for supplier starts-------------------
                                                    //------------------supplier batch delete starts----------------
                                                    suppliersTable.on("rowSelectionChanged", function (data) {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("Selected Rows:", selectedRows);

                                                        // You can perform actions with the selected rows here
                                                    });
                                                    $("#supplier-batch-delete").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var dataToBeDeleted = selectedRows.map(row => row.Id);
                                                            supplierBatchDeleteData(dataToBeDeleted);
                                                        } else {
                                                            alert("No rows selected for deletion.");
                                                        }
                                                    });
                                                        //------------------supplier batch delete ends----------------
                                                  function supplierBatchDeleteData(dataToBeDeleted) {
                                                    Swal.fire({
                                                        title: "Are you sure?",
                                                        text: "You won't be able to revert this!",
                                                        icon: "warning",
                                                        showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Yes, delete it!"
                                                    }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            $.ajax({
                                                                url: '@Url.Action("BatchDeleteSupplier", "Admin")',
                                                                type: "POST",
                                                                data: { ids: dataToBeDeleted }, // Pass the array of ids
                                                                traditional: true, // Ensures proper serialization of the array
                                                                success: function (response) {
                                                                    if (response.success) {
                                                                        toastr.success(response.msg, "", { "toastClass": "toast-green" });
                                                                    } else {
                                                                        toastr.error(response.msg, "", { "toastClass": "toast-red" });
                                                                    }
                                                                    GetSupplierOpen();
                                                                },
                                                                error: function (xhr, status, error) {
                                                                    console.error(xhr.responseText);
                                                                    toastr.error("Error during batch delete.", "", { "toastClass": "toast-red" });
                                                                }
                                                            });
                                                        }
                                                    });
                                                }
                                                    $("#supplier-email").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var emailsToRedirect = selectedRows.map(row => row.Email).join(','); // Join emails with comma
                                                            window.location.href = "mailto:" + emailsToRedirect;
                                                        } else {
                                                            alert("No rows selected for mail.");
                                                        }
                                                    });
                                                    // Function to perform the batch delete operation for supplier ends-------------------




                                                });
                                                $("#suppliers-rows").on("change", function () {
                                                    var selectedRows = $(this).val();
                                                    if (selectedRows !== null) {
                                                        // Convert the selected value to an integer
                                                        var pageSize = parseInt(selectedRows);
                                                        if (!isNaN(pageSize)) {
                                                            suppliersTable.setPageSize(pageSize);
                                                        }
                                                    }
                                                });



                                            };

                                            //GetSupplierOpen();



                                               function GetSupplierPaid() {
                                                   function fetchPaidDataFromServer() {
                                                    var MyAppUrlSettings = {
                                                    MyUsefulUrl: '@Url.Action("GetAllSupplierDataWithPurchase", "Accounts")'
                                                    };
                                                    return $.ajax({
                                                        url: MyAppUrlSettings.MyUsefulUrl,
                                                        dataType: "json",
                                                    });
                                                }

                                                   fetchPaidDataFromServer().done(function (response) {

                                                    //console.log("normal response:", response);
                                                      var dataTableFilter = response.data.Table3;


                                               var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';

                                              //==================suppliers tabulator functionalties starts=============
                                                var supplierApiUrl = '@Url.Action("GetSupplierList", "Purchase")';
                                              suppliersTable = new Tabulator("#supplier-table", {
                                                        data: dataTableFilter,
                                                        dataTree: true,
                                                        dataTreeStartExpanded: true ,
                                                        dataTreeChildField: "children",
                                                        layout: "fitColumns",                                                     
                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: 5,
                                                        paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                                        paginationCounter: "rows",
                                                        ajaxURL: supplierApiUrl,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                            ajaxResponse: function (url, params, response) {
                                                                suppliersTable.setMaxPage(response.last_page);
                                                            //console.log("response.last_page", response.last_page);

                                                            dataLoadExpense = response.data;
                                                           /* //console.log("dataLoadExpense:", dataLoadExpense);*/

                                                            return {

                                                                data: dataLoadExpense,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: [
                                                            {
                                                                title: "", // Title for the checkbox column
                                                                field: "selected", // Field for the checkbox value in your data
                                                                headerSort: false, // Disable sorting for the checkbox column
                                                                formatter: "rowSelection", // Use the built-in row selection formatter
                                                                
                                                                width: 30, // Adjust the width as needed
                                                                vertAlign:"middle",
                                                            },
                                                            {
                                                                title: "SUPPLIER/COMPANY",
                                                                headerHozAlign: "left",
                                                                field: "SupplierNames",
                                                                vertAlign: "middle",
                                                                hozAlign: "left",
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the data for the current row
                                                                    var rowData = cell.getRow().getData();

                                                                    // Create a div to hold the content
                                                                    var container = document.createElement("div");
                                                                    container.style.display = "flex";
                                                                    container.style.flexDirection = "column"; // Display content in a column

                                                                    // Create a span for the SupplierName
                                                                    var supplierSpan = document.createElement("span");
                                                                    supplierSpan.textContent = rowData.SupplierNames;
                                                                    supplierSpan.style.marginBottom = "5px"; // Adjust the margin as needed
                                                                    supplierSpan.style.color = "black";
                                                                    supplierSpan.style.fontWeight = "bold";
                                                                    supplierSpan.setAttribute("onclick", `GetCustomerDetails(${rowData.Id})`);

                                                                    // Create a span for the CompanyName
                                                                    var companySpan = document.createElement("span");
                                                                    companySpan.textContent = rowData.CompanyName;
                                                                    companySpan.style.color = "#727272"; // Adjust the color as needed

                                                                    // Append the spans to the container
                                                                    container.appendChild(supplierSpan);
                                                                    container.appendChild(companySpan);

                                                                    return container;
                                                                },
                                                                    },
                                                                    { title: "Supplier Code",vertAlign:"middle", headerHozAlign: "left", field: "SupplierCode"/*, width: "30px"*/, hozAlign: "center", },
                                                            { title: "ADDRESS", headerHozAlign: "left", field: "Address",vertAlign:"middle", hozAlign: "left", },
                                                            { title: "PHONE", field: "Phone", headerSort: false, frozen: false,vertAlign:"middle", hozAlign: "left", headerHozAlign: "left" },
                                                            { title: "EMAIL", headerHozAlign: "left", field: "Email",vertAlign:"middle", hozAlign: "left", },
                                                            { title: "Currency", headerHozAlign: "left", field: "Currency",vertAlign:"middle", hozAlign: "center", },

                                                            { title: "OPEN BALANCE", field: "NetAmount",hozAlign: "right", movable: false,vertAlign:"middle", headerSort: false, visible: true },
                                                                            {
                                                        title: "ACTIONS", field: "button", headerHozAlign: "left",vertAlign:"middle", headerSort: false, hozAlign: "left", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                                                                                    var data = cell.getData();
                                                                                    ////console.log("see data::", data);
                                                                                    //var myUrlGet = `editAccountHead(${data.Id})`;
                                                                                    var myUrlGet = '@Url.Action("Editsupplier", "Admin")?SupplierId=' + data.Id;

                                                                                    var CreateExpenseVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Expense&' + 'SupplierId=' + data.Id;
                                                                                     var CreateBillVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Bill&' + 'SupplierId=' + data.Id;
                                                                                    var CreateChequeVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Cheque&' + 'SupplierId=' + data.Id;
                                                                                    var CreatePOVar = '@Url.Action("EditBillByType", "Accounts")' + '?Type=Purchase Order&' + 'SupplierId=' + data.Id;
                                                                                    var PaymentVar = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=Payment&FromSupplier=1&' + 'SupplierId=' + data.Id;
                                                                                    var Edit = `editSupplier(${data.Id})`;
                                                                                    var Delete = `setDeleteUrl(${data.Id})`
                                                                                    var active = `setActiveUrl(${data.Id}) `
                                                                                    var viewEdit = `
                                                                           <a onclick=${Edit} href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;


                                                                                    var deleteHtml = `
                                                            <a onclick='${Delete}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                                <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                            </a>
                                                                     <div class='dropdown-divider m-0'></div>
                                                        `;
                                                                                    var createBill = `
                                                                        <a href='${CreateBillVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create bill</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createExpense = `
                                                                        <a href='${CreateExpenseVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>Create expense</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var writeCheque = `
                                                                        <a href='${CreateChequeVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>write Cheque</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;

                                                                                    var createPurchaseOrder = `
                                                                        <a href='${CreatePOVar}' class='text-decoration-none text-black ms-3 mt-1'>
                                                                            <i class='bi bi-receipt pe-1'></i> <span>create Purchase Order</span>  <br />
                                                                        </a>
                                                                        <div class='dropdown-divider m-0'></div>
                                                                    `;
                                                                                    var makeInactive = `
                                                                           <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                                               <i class='bi bi-pencil-square pe-1'></i> <span>make Inactive</span>  <br />
                                                                           </a>
                                                                                   <div class='dropdown-divider m-0'></div>
                                                                       `;
                                                                                    var statusDependentHtml = viewEdit + createExpense + writeCheque + createPurchaseOrder + makeInactive;
                                                                                    var statusDependentHtmlAnother = viewEdit + deleteHtml + createBill + createExpense

                                                                                    var html;
                                                                                    if (data.ClBalance == 0) {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a  href='${CreateBillVar}' class='fw-bolder mt-2'>Create Bill</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' >
                                                                                  ${statusDependentHtml}

                                                                              </ul>
                                                                          </div>
                                                                      `;
                                                                                    }
                                                                                    else {
                                                                                        html = `
                                                                          <div class='dropdown ms-1'>
                                                                              <a href='${PaymentVar}' class='fw-bolder mt-2'>Make Payment</a>
                                                                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                             <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' >
                                                                                  ${statusDependentHtmlAnother}

                                                                              </ul>
                                                                          </div>
                                                                      `;

                                                                                    }

                                                            return html;
                                                         },
                                                         visible: true,cellClick: function(e, cell) {
                                                        // Add a custom class to the cell when it's clicked
                                                        cell.getElement().classList.add('active-cell');
                                                      },
                                                    },
                                                        ],
                                                        dataBound: function () {
                                                            // Freeze the top 1 row (index 0) after the table is created
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });
                                              //==================suppliers tabulator functionalties ends=============

                                               // Function to perform the batch delete operation for supplier starts-------------------
                                                    //------------------supplier batch delete starts----------------
                                                    suppliersTable.on("rowSelectionChanged", function (data) {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("Selected Rows:", selectedRows);

                                                        // You can perform actions with the selected rows here
                                                    });
                                                    $("#supplier-batch-delete").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var dataToBeDeleted = selectedRows.map(row => row.Id);
                                                            supplierBatchDeleteData(dataToBeDeleted);
                                                        } else {
                                                            alert("No rows selected for deletion.");
                                                        }
                                                    });
                                                        //------------------supplier batch delete ends----------------
                                                  function supplierBatchDeleteData(dataToBeDeleted) {
                                                    Swal.fire({
                                                        title: "Are you sure?",
                                                        text: "You won't be able to revert this!",
                                                        icon: "warning",
                                                        showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Yes, delete it!"
                                                    }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            $.ajax({
                                                                url: '@Url.Action("BatchDeleteSupplier", "Admin")',
                                                                type: "POST",
                                                                data: { ids: dataToBeDeleted }, // Pass the array of ids
                                                                traditional: true, // Ensures proper serialization of the array
                                                                success: function (response) {
                                                                    if (response.success) {
                                                                        toastr.success(response.msg, "", { "toastClass": "toast-green" });
                                                                    } else {
                                                                        toastr.error(response.msg, "", { "toastClass": "toast-red" });
                                                                    }
                                                                    GetSupplierOpen();
                                                                },
                                                                error: function (xhr, status, error) {
                                                                    console.error(xhr.responseText);
                                                                    toastr.error("Error during batch delete.", "", { "toastClass": "toast-red" });
                                                                }
                                                            });
                                                        }
                                                    });
                                                }
                                                    $("#supplier-email").click(function () {
                                                        var selectedRows = suppliersTable.getSelectedData();
                                                        //console.log("selectedRowssss", selectedRows);
                                                        if (selectedRows.length > 0) {
                                                            var emailsToRedirect = selectedRows.map(row => row.Email).join(','); // Join emails with comma
                                                            window.location.href = "mailto:" + emailsToRedirect;
                                                        } else {
                                                            alert("No rows selected for mail.");
                                                        }
                                                    });
                                                    // Function to perform the batch delete operation for supplier ends-------------------

                                                });
                                                $("#suppliers-rows").on("change", function () {
                                                    var selectedRows = $(this).val();
                                                    if (selectedRows !== null) {
                                                        // Convert the selected value to an integer
                                                        var pageSize = parseInt(selectedRows);
                                                        if (!isNaN(pageSize)) {
                                                            suppliersTable.setPageSize(pageSize);
                                                        }
                                                    }
                                                });



                                            };


                                            getPoBillStatus();
                                            function getPoBillStatus() {
                                                 $.ajax({
                                                type: "get",
                                                url: '@Url.Action("GetAllPurchaseData", "Accounts")',
                                                success: function (response) {
                                                    //console.log("mahin bhai", response);
                                                    var TableZero = response.data.Table;
                                                    var TableOne = response.data.Table1;
                                                    var TableThree = response.data.Table2;
                                                    var TableFour = response.data.Table3;
                                                    //console.log("sasasa", TableZero);

                                                    $("#unbilled-amount").text(`TK ${TableZero[0].Amount.toLocaleString('en-US', {
                                                        minimumFractionDigits: 2,
                                                        maximumFractionDigits: 2
                                                    })}`);
                                                    $("#unbilled-count").text(TableZero[0].Caption);

                                                    $("#overdue-amount").text(`TK ${TableOne[0].Amount.toLocaleString('en-US', {
                                                        minimumFractionDigits: 2,
                                                        maximumFractionDigits: 2
                                                    })}`);
                                                    $("#overdue-count").text(TableOne[0].Caption);
                                                    var Amount;
                                                    if (TableThree[0].TotalAmount != 0) {
                                                        Amount = TableThree[0].TotalAmount;
                                                    }
                                                    else {
                                                        Amount = 0;
                                                    }
                                                    $("#paid-amount").text(`TK ${Amount.toLocaleString('en-US', {
                                                        minimumFractionDigits: 2,
                                                        maximumFractionDigits: 2
                                                    })}`);
                                                    $("#paid-count").text(TableThree[0].Caption);

                                                    $("#open-amount").text(`TK ${TableFour[0].Amount.toLocaleString('en-US', {
                                                        minimumFractionDigits: 2,
                                                        maximumFractionDigits: 2
                                                    })}`);

                                                    $("#open-count").text(TableFour[0].Caption);
                                                }
                                            });
                                            }
                                          


                                            $(".btn-unbilled-amount").on("click", function () {
                                                $(".unbilledbtn").addClass("clicked");
                                                $(".overduebtn").removeClass("clicked");
                                                $(".openbtn").removeClass("clicked");
                                                $(".paidbtn").removeClass("clicked");
                                                GetSupplierUnbilled();
                                            });

                                            $(".btn-overdue-amount").on("click", function () {
                                                $(".overduebtn").addClass("clicked");
                                                $(".unbilledbtn").removeClass("clicked");
                                                $(".openbtn").removeClass("clicked");
                                                $(".paidbtn").removeClass("clicked");
                                                GetSupplierOverDue();
                                            });

                                            $(".btn-open-amount").on("click", function () {
                                                $(".openbtn").addClass("clicked");
                                                $(".unbilledbtn").removeClass("clicked");
                                                $(".overduebtn").removeClass("clicked");
                                                $(".paidbtn").removeClass("clicked");
                                                GetSupplierOpen();
                                            });

                                            $(".btn-paid-amount").on("click", function () {
                                                $(".paidbtn").addClass("clicked");
                                                $(".unbilledbtn").removeClass("clicked");
                                                $(".overduebtn").removeClass("clicked");
                                                $(".openbtn").removeClass("clicked");
                                                GetSupplierPaid();
                                            });
                                            $("#supplier-div").on("click", function (event) {
                                                var target = $(event.target);

                                                // Check if the clicked element is not one of the specified buttons
                                                if (
                                                    !target.is(".btn-unbilled-amount") &&
                                                    !target.is(".btn-overdue-amount") &&
                                                    !target.is(".btn-open-amount") &&
                                                    !target.is(".btn-paid-amount")
                                                ) {
                                                    // Remove the 'clicked' class from specific elements
                                                    $(".paidbtn").removeClass("clicked");
                                                    $(".unbilledbtn").removeClass("clicked");
                                                    $(".overduebtn").removeClass("clicked");
                                                    $(".openbtn").removeClass("clicked");

                                                    // Call the GetSupplier function
                                                    GetSupplier();
                                                }
                                            });

                                            // Assuming you have an input element with the class .search_box for the search box
                                            // var searchBox = document.querySelector('.search_box');

                                            // // Add an event listener to the search box
                                            // searchBox.addEventListener('input', function () {
                                            //     var searchText = this.value.toLowerCase();

                                            //     // Use the setFilter function to filter the table
                                            //     suppliersTable.setFilter(function (data) {
                                            //         // Check if the SupplierName or Phone contains the searchText
                                            //         return (
                                            //             data.SupplierName.toLowerCase().includes(searchText) ||
                                            //             data.Phone.toLowerCase().includes(searchText)
                                            //         );
                                            //     });
                                            // });

                                            // // Reset the filter when the search box is cleared
                                            // searchBox.addEventListener('blur', function () {
                                            //     if (this.value === '') {
                                            //         suppliersTable.clearFilter();
                                            //     }
                                            // });

                                            //supplier list ends========================





                                            function reloadTableData(FromDate, ToDate, SupplierId, DocTypeId, StatusId) {
                                                    var MyAppUrlSettings = {
                                                        MyUsefulUrl: '@Url.Action("GetPurchaseListTabulator", "Purchase")'
                                                    };

                                                    // Prepare the data object based on provided parameters
                                                    var requestData = {
                                                        FromDate: FromDate || $('#start-date').val(),
                                                        ToDate: ToDate || $('#end-date').val(),
                                                        SupplierId: SupplierId || $("#payeeDropdown").val(),
                                                        DocTypeId: DocTypeId || $("#typeDropdown").val(),
                                                        StatusId: StatusId || $("#statusDropdown").val()
                                                    };
                                                $.ajax({
                                                    url: MyAppUrlSettings.MyUsefulUrl,
                                                    data: requestData,
                                                    dataType: "json",
                                                    success: function (response) {
                                                        // Check for success before accessing the data
                                                        if (response.Success === 1) {
                                                            const data = response.data;

                                                            // Log the data to the console for inspection
                                                            //console.log("Received data:", data);

                                                            // Assuming 'expenseTable' is your Tabulator instance
                                                            expenseTable.setData(data);
                                                        } else {
                                                            // Handle the case where the response indicates an error
                                                            console.error("Error in response:", response);
                                                        }
                                                    },
                                                    error: function (xhr, status, error) {
                                                        console.error(error);
                                                    }
                                                });


                                            }

                                            function reloadPaymentTableData(FromDate, ToDate, SupplierId, DocTypeId) {
                                                    var MyAppUrlSettings = {
                                                        MyUsefulUrl: '@Url.Action("GetPaymentList", "Purchase")'
                                                    };

                                                    // Prepare the data object based on provided parameters
                                                    var requestData = {
                                                        FromDate: FromDate || $('#payment-start-date').val(),
                                                        ToDate: ToDate || $('#payment-end-date').val(),
                                                        SupplierId: SupplierId || $("#payment-payeeDropdown").val(),
                                                    };
                                                $.ajax({
                                                    url: MyAppUrlSettings.MyUsefulUrl,
                                                    data: requestData,
                                                    dataType: "json",
                                                    success: function (response) {
                                                        // Check for success before accessing the data
                                                        if (response.Success === 1) {
                                                            const data = response.data;

                                                            // Log the data to the console for inspection
                                                            //console.log("Received data:", data);

                                                            // Assuming 'expenseTable' is your Tabulator instance
                                                            paymentsTable.setData(data);
                                                        } else {
                                                            // Handle the case where the response indicates an error
                                                            console.error("Error in response:", response);
                                                        }
                                                    },
                                                    error: function (xhr, status, error) {
                                                        console.error(error);
                                                    }
                                                });


                                    }

                                            function resetForm(event) {
                                                event.preventDefault();
                                                event.stopPropagation();
                                                document.getElementById('typeDropdown').selectedIndex = 0; // Reset the select to the first option
                                                document.getElementById('statusDropdown').selectedIndex = 0;
                                                document.getElementById('deliveryMethodDropdown').selectedIndex = 0;
                                                document.getElementById('start-date').value = ''; // Clear the input value
                                                document.getElementById('end-date').value = '';
                                                document.getElementById('payeeDropdown').selectedIndex = 0;
                                                document.getElementById('select2').selectedIndex = 0;
                                                $("#deliveryMethodDropdownParent").removeClass("d-none");
                                                $("#statusDropdownParent").removeClass("d-none");
                                                $("#fromToDateParent").removeClass("d-none");
                                                $("#payeeDropdownParent").removeClass("d-none");
                                                return false;
                                            }
                                            function resetPaymentForm(event) {
                                                event.preventDefault();
                                                event.stopPropagation();
                                                document.getElementById('payment-start-date').value = ''; // Clear the input value
                                                document.getElementById('payment-end-date').value = '';
                                                document.getElementById('payment-payeeDropdown').selectedIndex = 0;
                                                //document.getElementById('payment-select2').selectedIndex = 0;
                                                return false;
                                            }

                                            function dropDownKeepOpen(event) {
                                                event.preventDefault;
                                                event.stopPropagation;
                                            }
                                            function keepDropdownOpened(event) {
                                                event.preventDefault;
                                                event.stopPropagation;
                                            }

        @*function reloadTableData() {
            var MyAppUrlSettings = {
                MyUsefulUrl: '@Url.Action("GetPurchaseListTabulator", "Purchase")'
            };

            $.ajax({
                url: MyAppUrlSettings.MyUsefulUrl,
                data: { FromDate: $('#start-date').val(), ToDate: $('#end-date').val(), SupplierId: $("#payeeDropdown option:selected").val() ,DocTypeId: $("#typeDropdown option:selected").val(),},
                dataType: "json",
                success: function (data) {
                    expenseTable.setData(data);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        }*@


                                            //=============Tabulator function ends==========

                                              //==========inactive functionaloties starts=========

        @*function setInactiveUrl(data) {
                var myUrlInactive = '@Url.Action("InactiveBill", "Admin")';
                alert("Are You Sure Want To Delete?")
            $.ajax({
                type: "get",
                data: { BillId: data },
                url: myUrlInactive,
                success: function (response) {
                    if (response.success == "1") {
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-green",
                        });
                        GetExpense();
                    }
                    else if (response.success == "0") {
                        //alert()
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-red",
                        });
                        GetExpense();
                    }
                }
            });
        };*@
                                                function setInactiveUrl(data) {
                                                   Swal.fire({
                                                        title: "Are you sure?",
                                                        text: "You won't be able to revert this!",
                                                        icon: "warning",
                                                        showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Yes"
                                                    }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            $.ajax({
                                                                url: '@Url.Action("InactiveBill", "Accounts")',
                                                                type: "get",
                                                                data: { BillId: data }, // Pass the array of ids
                                                                traditional: true, // Ensures proper serialization of the array
                                                                success: function (response) {
                                                                    if (response.success == "1") {
                                                                        toastr.success(response.msg, "", {
                                                                            "toastClass": "toast-green",
                                                                        });
                                                                        GetExpense();
                                                                    }
                                                                    else if (response.success == "0") {
                                                                        //alert()
                                                                        toastr.success(response.msg, "", {
                                                                            "toastClass": "toast-red",
                                                                        });
                                                                        GetExpense();
                                                                    }
                                                                            else{
                                                                    //alert()
                                                                    toastr.success("Access denied.", "", {
                                                                        "toastClass": "toast-red",
                                                                    });
                                                                }
                                                                },
                                                                error: function (xhr, status, error) {
                                                                    console.error(xhr.responseText);
                                                                    toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                                                                }
                                                            });
                                                        }
                                                    });
                                            };
                                                function setActiveUrl(data) {
                                                    var myUrlInactive = '@Url.Action("InactiveBill", "Admin")';
                                                    alert("Are You Sure Want To Restore?")
                                                $.ajax({
                                                    type: "get",
                                                    data: { BillId: data },
                                                    url: myUrlInactive,
                                                    success: function (response) {
                                                        if (response.success == "1") {
                                                            toastr.success(response.msg, "", {
                                                                "toastClass": "toast-green",
                                                            });
                                                            GetExpense();
                                                        }
                                                        else if (response.success == "0") {
                                                            //alert()
                                                            toastr.success(response.msg, "", {
                                                                "toastClass": "toast-red",
                                                            });
                                                            GetExpense();
                                                        }
                                                        else{
                                                            //alert()
                                                            toastr.success("Access denied.", "", {
                                                                "toastClass": "toast-red",
                                                            });
                                                        }
                                                    }
                                                });
                                            };
                                            //========inactive functionaloties ends============




                                            //==========delete payment starts=========
        @*function deletePaymentUrl(data) {
                var myUrlInactive = '@Url.Action("DeleteTransaction", "Admin")';
                alert("Are You Sure Want To Delete?")
            $.ajax({
                type: "get",
                data: { TransactionId: data },
                url: myUrlInactive,
                success: function (response) {
                    if (response.success == "1") {
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-green",
                        });
                        getPayment();
                    }
                    else if (response.success == "0") {
                        //alert()
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-red",
                        });
                        getPayment();
                    }
                }
            });
        };*@
                                            function deletePaymentUrl(data) {
                                                   Swal.fire({
                                                        title: "Are you sure?",
                                                        text: "You won't be able to revert this!",
                                                        icon: "warning",
                                                        showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Yes"
                                                    }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            $.ajax({
                                                                url: '@Url.Action("DeleteTransactionPurchase", "Admin")',
                                                                type: "get",
                                                                data: { TransactionId: data }, // Pass the array of ids
                                                                traditional: true, // Ensures proper serialization of the array
                                                                success: function (response) {
                                                                    if (response.success == "1") {
                                                                        toastr.success(response.msg, "", {
                                                                            "toastClass": "toast-green",
                                                                        });
                                                                        getPayment();
                                                                    }
                                                                    else if (response.success == "0") {
                                                                        //alert()
                                                                        toastr.success(response.msg, "", {
                                                                            "toastClass": "toast-red",
                                                                        });
                                                                        getPayment();
                                                                    }
                                                                    else{
                                                                        toastr.success("Access denied.", "", {
                                                                            "toastClass": "toast-red",
                                                                        });
                                                                    }
                                                                },
                                                                error: function (xhr, status, error) {
                                                                    console.error(xhr.responseText);
                                                                    toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                                                                }
                                                            });
                                                        }
                                                    });
                                            };
                                                function setActiveUrl(data) {
                                                    var myUrlInactive = '@Url.Action("InactiveBill", "Admin")';
                                                    alert("Are You Sure Want To Restore?")
                                                $.ajax({
                                                    type: "get",
                                                    data: { BillId: data },
                                                    url: myUrlInactive,
                                                    success: function (response) {
                                                        if (response.success == "1") {
                                                            toastr.success(response.msg, "", {
                                                                "toastClass": "toast-green",
                                                            });
                                                            GetExpense();
                                                        }
                                                        else if (response.success == "0") {
                                                            //alert()
                                                            toastr.success(response.msg, "", {
                                                                "toastClass": "toast-red",
                                                            });
                                                            GetExpense();
                                                        }
                                                        else{
                                                            //alert()
                                                            toastr.success("Access denied.", "", {
                                                                "toastClass": "toast-red",
                                                            });
                                                        }
                                                    }
                                                });
                                            };
                                            //==========delete payment ends===========



                                            //delete Supplierlist function
                                                function deleteSuppliereUrl(data) {
                                                    var myUrldelete = '@Url.Action("DeleteSupplier", "Admin")';
        @*var myUrldelete = '@Url.Action("DeleteCOA", "Admin")?SupplierId=' + data;*@
                                                        //e.preventDefault();
                                                        //e.stopPropagation();
                                                        alert('Are you sure want to delete?');
                                                    $.ajax({
                                                        type: "get",
                                                        data: { Id: data },
                                                        url: myUrldelete,
                                                        success: function (response) {
                                                            if (response.success == "1") {
                                                                toastr.success(response.msg, "", {
                                                                    "toastClass": "toast-green",
                                                                });
                                                                alert('deletedd');
                                                                GetSupplier();
                                                            }
                                                            else if (response.success == "0") {
                                                                //alert()
                                                                toastr.success(response.msg, "", {
                                                                    "toastClass": "toast-red",
                                                                });
                                                                //initjsGrid();
                                                            }
                                                        }
                                                    });
                                            };


        @*$.ajax({
            type: "get",
            url: '@Url.Action("GetSupplierList", "Purchase")',
            success: function (response) {
                var Data = response.data;
                //console.log("see Data", Data);
                var table = new Tabulator("#supplier-table", {
                    data: Data,
                    layout: "fitColumns",
                    columns: [
                        {
                            title: "", field: "CheckBox", hozAlign: "center",
                            formatter: function () {
                                return '<input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">';
                            }
                        },
                        { title: "Name", field: "SupplierName", headerFilter: "input" },
                        { title: "OpBalance", field: "OpBalance", headerHozAlign: "center" },
                    ],
                });
            }
        })*@



            //---Supplier details information dropdown----//
                   function getTransactionDropdown() {
                                            $.ajax({
                                                url: '@Url.Action("GetDoctypeListFoExpense", "Admin")',
                                                success: function (data) {
                                                    ////console.log("term ajax data::", data);
                                                    const ul = document.querySelector('#ul-id');
                                                    const ulForExpenses = document.querySelector('#ul-id-for-expensesdetail');
                                                    ////console.log("payment bad dibo", data);
                                                    for (var i = 0; i < data.length; i++) {
                                                        const li = document.createElement('li');
                                                        li.className = 'dropdown-item';
                                                        const Type = data[i].DocTypeValue;
                                                        const DocType = data[i].DocType;
                                                        const a = document.createElement('a');
                                                        let linkUrl = '';

                                                        if (DocType == "Payment") {

                                                            a.href = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=' + encodeURIComponent(Type);
                                                            ////console.log(linkUrl);
                                                            //a.href = '/Accounts/AddPaymentTypeQB?Type=' + Type;
                                                        }
                                                        else {
                                                            a.href = '@Url.Action("AddBillbyType", "Accounts")' + '?Type=' + encodeURIComponent(Type);
                                                            ////console.log(linkUrl);
                                                            //a.href = '/Accounts/AddBillbyType?Type=' + Type;
                                                        }
                                                        a.className = 'dropdown-link';
                                                        a.style.color = 'black';
                                                        a.setAttribute('data-id', data[i].Id);

                                                        a.textContent = data[i].DocTypeValue;

                                                        li.addEventListener('click', function () {
                                                            window.location.href = linkUrl;
                                                        });

                                                        li.appendChild(a);
                                                        ul.appendChild(li);
                                                    }
                                                    for (var i = 0; i < data.length; i++) {
                                                        const li = document.createElement('li');
                                                        li.className = 'dropdown-item';
                                                        const Type = data[i].DocTypeValue;
                                                        const a = document.createElement('a');
                                                        const DocType = data[i].DocType;
                                                        let linkUrl = '';

                                                        if (DocType == "Payment") {

                                                            a.href = '@Url.Action("AddPaymentTypeQB", "Accounts")' + '?Type=' + encodeURIComponent(Type) + '&PurchaseId=' + encodeURIComponent(0)+ '&SupplierId=' + encodeURIComponent(0);
                                                            ////console.log(linkUrl);
                                                            // a.href = '/Admin/AddPaymentTypeQB?Type=' + Type +'&PurchaseId=0&SupplierId=0';
                                                        }
                                                        else {
                                                            a.href = '@Url.Action("EditBillByType", "Accounts")' + '?Type=' + encodeURIComponent(Type);
                                                                    ////console.log(linkUrl);
                                                            // a.href = '/Accounts/AddBillbyType?Type=' + Type;
                                                        }
                                                        a.className = 'dropdown-link';
                                                        a.style.color = 'black';
                                                        a.setAttribute('data-id', data[i].Id);

                                                        a.textContent = data[i].DocTypeValue;

                                                        li.addEventListener('click', function () {
                                                            window.location.href = linkUrl;
                                                        });

                                                        li.appendChild(a);
                                                        ulForExpenses.appendChild(li);
                                                    }

                                                    //const selectForType = document.querySelector('#typeDropdown');
                                                    //for (var i = 0; i < data.length; i++) {
                                                    //    const option = document.createElement('option');
                                                    //    option.value = data[i].Id; // Use an appropriate property from your data as the value
                                                    //    option.textContent = data[i].DocTypeValue; // Use an appropriate property from your data as the text content
                                                    //    selectForType.appendChild(option);
                                                    //}

                                                }
                                            });
                                            }
                                            getTransactionDropdown();



             function ReportPrintSupplier(btnvalue) {
            var selectedData = suppliersTable.getSelectedData();


            //console.log(selectedData);
            //var Id = selectedData[0].Id;
            var Id = selectedData;

            var reporttype = $("input[name=RptType]:checked").val();
            var FromDate = $(".FromDate").val();
            var ToDate = $(".ToDate").val();





            var productidlist = [];
            var pid = 0;
            var type = "Supplier";


            //if (rows.length > 0) {
            //    pid = rows[0]["Id"];
            //    //type = rows[0]["AccountCategory"];

            //}

            if (Id.length > 0) {
                pid = Id[0].Id;
            }
            //console.log(pid);
            //alert(WarehouseId);
            //alert(btnvalue);

            var isViewPageReport = 1;

            if (btnvalue == "PrintLedger" || btnvalue == "SupplierNotPosted" || btnvalue == "SupplierRewardPointNotPosted" || btnvalue == "AllSupplierBalance_AllSalesQty" || btnvalue == "SupplierPerformanceIMEI" || btnvalue == "SupplierPerformanceALL") {

                if (btnvalue == "PrintLedger") {
                    isViewPageReport = 0;

                }
                else {
                    type = btnvalue;
                }


                if ((pid == null) || (pid == "")) {
                    toastr.error("Please Select Supplier from the List.");
                    return true;
                }
                //alert('Wait');
            }
            else if (btnvalue == "AllSupplierBalance" || btnvalue == "AllSupplierBalance_AllSales" || btnvalue == "RewardPointSummary" || btnvalue == "AllSupplierAgingBalance") {
                type = btnvalue;
            }
            //else
            //{
            //    type = btnvalue;
            //}



            $.ajax({
                type: 'POST',
                url: '@Url.Action("SubsidiaryLedger", "Admin")',
                dataType: 'json',
                async: true,
                data: { rptFormat: reporttype, action: btnvalue, Id: pid, Type: type, FromDate: FromDate, ToDate: ToDate, isViewPageReport: isViewPageReport },
                success: function (response) {

                    //setTimeout(function () {
                    //    window.open(response.Url, '_blank')
                    //}, 1000);

                    window.open(response.Url, '_blank')

                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        }


                 CurrentDate();

        $(".FromDate").datepicker({

            dateFormat: "dd-M-y",
            changeMonth: true,
            changeYear: true

        });
        $(".ToDate").datepicker({

            dateFormat: "dd-M-y",
            changeMonth: true,
            changeYear: true

        });

        function CurrentDate() {
            var date = new Date();
            var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
                "Aug", "Sep", "Oct", "Nov", "Dec"];
            var val = date.getDate() + "-" + months[date.getMonth()] + "-" + date.getFullYear().toString().substr(-2);


            if ($(".FromDate").val() == '') {
                $(".FromDate").val(val);
            }
            if ($(".ToDate").val() == '') {
                $(".ToDate").val(val);
            }


        }

            var supplierSearchTable;
        @*------------------------- Start Supplier Details-------------------------- *@
                                var expenseTable;
                                    function GetCustomerDetails(Id){
                                            $("#bills-view-id").addClass("d-none");
                                                $("#expenses-view-id").addClass("d-none");
                                                $("#payments-view-id").addClass("d-none");
                                                $("#purchase-view-id").addClass("d-none");
                                                $("#suppliers-view-id").addClass("d-none");
                                                $("#Supplier-Details-view").removeClass("d-none");
                                                GetDetailsData(Id);
                                                //GetSupplierAllForSideBar();
                                                GetSupplierDetailsList();
                                    }
                                    var expenseDetailsData;

                                    function GetDetailsData(Id){
                                                GetSupplierDetails(Id);
                                        function linkFormatter(cell, formatterParams, onRendered) {
                                                            var filePath = cell.getValue();
                                                            var anchor = document.createElement("a");
                                                            anchor.href = filePath;
                                                            anchor.target = "_blank";
                                                            if (!filePath) {
                                                                var paragraph = document.createElement("p");
                                                                paragraph.textContent = "No file uploaded";
                                                                paragraph.classList.add("text-black-50");
                                                                return paragraph;
                                                            }
                                                            else {
                                                                anchor.textContent = "File";
                                                            }
                                                            return anchor;
                                                        }
                                   var expenseDetailsUr=`@Url.Action("GetPurchaseListTabulator", "Purchase")?SupplierId=${Id}`
                                   expenseTable = new Tabulator("#expense-details-table-review", {

                                                         layout: "fitColumns",

                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: 5,
                                                        paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                                        paginationCounter: "rows",
                                                        ajaxURL: expenseDetailsUr,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                        ajaxResponse: function (url, params, response) {
                                                            expenseTable.setMaxPage(response.last_page);
                                                            //console.log("response.last_page", response.last_page);

                                                            dataLoadExpense = response.data;


                                                            return {

                                                                data: response.data,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: [

                                                            {
                                                                title: "", // Title for the checkbox column
                                                                field: "selected", // Field for the checkbox value in your data
                                                                headerSort: false, // Disable sorting for the checkbox column
                                                                formatter: "rowSelection", // Use the built-in row selection formatter
                                                                
                                                                width: 30, // Adjust the width as needed
                                                            },
                                                            {
                                                                title: "DATE", headerHozAlign: "left", field: "PurchaseDateString", hozAlign: "left", width: 100,
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the original date value from the cell
                                                                    const originalDate = cell.getValue();

                                                                    // Check if the originalDate is a valid date
                                                                    if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                                        // Format the date as "YYYY-MM-DD"
                                                                        const formattedDate = originalDate.toISOString().split('T')[0];
                                                                        return formattedDate;
                                                                    } else {
                                                                        // Return the original value if it's not a valid date
                                                                        return originalDate;
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                title: "DUE DATE", headerHozAlign: "left", field: "DueDate", hozAlign: "left", visible:false,
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the original date value from the cell
                                                                    const originalDate = cell.getValue();

                                                                    // Check if the originalDate is a valid date
                                                                    if (originalDate instanceof Date && !isNaN(originalDate)) {
                                                                        // Format the date as "YYYY-MM-DD"
                                                                        const formattedDate = originalDate.toISOString().split('T')[0];
                                                                        return formattedDate;
                                                                    } else {
                                                                        // Return the original value if it's not a valid date
                                                                        return originalDate;
                                                                    }
                                                                }
                                                            },
                                                            { title: "BALANCE", headerHozAlign: "left", field: "NetAmount",  hozAlign: "left", visible: false, },
                                                            { title: "STATUS", headerHozAlign: "left", field: "DocStatus",  hozAlign: "left", visible: false, },
                                                            { title: "TYPE", headerHozAlign: "left", field: "DocType",  hozAlign: "left",width: 100 },
                                                            { title: "NO.", field: "PurchaseCode",width: 200, headerSort: false, frozen: false,  hozAlign: "left", headerHozAlign: "left" },
                                                            { title: "PAYEE", headerHozAlign: "left", field: "SupplierName",  hozAlign: "left", visible:false},
                                                            { title: "MEMO", headerHozAlign: "left", field: "Remarks",  hozAlign: "left",visible:true,width: 100 },
                                    {
                                        title: "TOTAL", headerHozAlign: "right", field: "NetAmount", hozAlign: "right",width: 100, bottomCalc: "sum", formatter: "money", // Use a custom money formatter
                                        formatterParams: {
                                            precision: 2, // Number of decimal places
                                            symbol: "",   // Currency symbol (change as needed)
                                            thousand: ",", // Thousands separator
                                            decimal: ".",  // Decimal point
                                        },
                                        bottomCalcFormatter: "money", // Use a custom money formatter for the sum
                                        bottomCalcFormatterParams: {
                                            precision: 2, // Number of decimal places
                                            symbol: "",   // Currency symbol (change as needed)
                                            thousand: ",", // Thousands separator
                                            decimal: ".",  // Decimal point
                                        },
                                    },
                                { title: "STATUS", headerHozAlign: "left", field: "StatusPosted", width: 100, hozAlign: "left", },
                                { title: '<i class="bi bi-paperclip"></i>', headerHozAlign: "center",width: 80, field: "FilePath",  hozAlign: "left", visible: true, formatter: linkFormatter },
                                {
                            title: "ACTIONS", field: "button", headerHozAlign: "left", headerSort: false, hozAlign: "left", resizable: false,  formatter: function (cell, formatterParams, onRendered) {
                                                        var data = cell.getData();
                                                        //console.log("see data::", data);
                                                        //var myUrlGet = `editAccountHead(${data.Id})`;
                                        var myUrlGet = `@Url.Action("EditBillByType", "Accounts")?Type=${data.DocType}&PurchaseId=${data.Id}`;
                                        var makePayment =  '/Accounts/AddPaymentTypeQB?Type=Payment' + '&PurchaseId=' + data.Id + '&SupplierId=' + data.SupplierId;


                                                var copyBill = '/Accounts/EditBillByType?Type=Purchase Order' + '&PurchaseId=' + data.Id + '&CopyBill=1';
                                                        var inActive = `setInactiveUrl(${data.Id}) `
                                                        var active = `setActiveUrl(${data.Id}) ` //&ReportType=Purchase Invoice
                                var viewReport = `
                                                <a href='@Url.Action("PurchaseInvoiceViewReport", "Purchase")?PurchaseId=${data.Id}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>View report</span>
                                                </a>
                                                        <div class='dropdown-divider m-0'></div>
                                            `;

                                var printHtml = `
                                                <a href='@Url.Action("PurchaseReport", "Purchase")?PurchaseId=${data.Id}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Print</span>
                                                </a>
                                                        <div class='dropdown-divider m-0'></div>
                                            `;
                                var copyHtml = `
                                                <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Copy</span>
                                                </a>
                                                        <div class='dropdown-divider m-0'></div>
                                            `;

                                var viewHtml = `
                                                        <a href='' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                                        <i class='bi bi-eye pe-1'></i> <span>View</span>
                                                        </a>

                                            `;
                                        var deleteHtml = `
                                <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                    <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span>
                                </a>
                                        <div class='dropdown-divider m-0'></div>
                            `;
                                                        var voidHtml = `
                                                <a href='#' class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Void</span>
                                                </a>

                                            `;

                                        var edit = `
                                                <a href='${myUrlGet}'  target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                    <i class='bi bi-pencil-square pe-1'></i><span class='ms-1 mt-2'>Edit</span>
                                </a>
                                        <div class='dropdown-divider m-0'></div>
                                            `;

                                                        //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                                        var statusDependentHtml = data.isPosted ? viewHtml : viewReport + printHtml + copyHtml + edit + deleteHtml + voidHtml;
                                        var html;
                                        if (data.DocType === "Bill") {
                                            html = `
                                                <div class='dropdown ms-1'>
                                                    <a  href='${makePayment}' target='_blank' class='fw-bolder mt-2'>Make payment</a>
                                                    <button class='btn dropdown-toggle' type='button' id='dropdown-menu' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                    <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                        ${statusDependentHtml}

                                                    </ul>
                                                </div>
                                            `;
                                        }
                                        if (data.DocType === "Purchase Order") {
                                            html = `
                                                <div class='dropdown ms-1'>
                                                    <a  href='${copyBill}' target='_blank' class='fw-bolder mt-2'>Copy Bill</a>
                                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                    <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                        ${statusDependentHtml}

                                                    </ul>
                                                </div>
                                            `;
                                        }
                                        //if (data.DocType === "Purchase Payment" || data.DocType === "Expense") {
                                        //    html = `
                                        //      <div class='dropdown ms-1'>
                                        //          <a  href='${copyBill}' target='_blank' class='fw-bolder mt-2'>Copy Bill</a>
                                        //          <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                        //         <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                        //              ${statusDependentHtml}

                                        //          </ul>
                                        //      </div>
                                        //  `;
                                        //}
                                        if (data.DocType === "Supplier credit" || data.DocType === "Purchase Payment" || data.DocType === "Expense" || data.DocType === "GRR") {
                                            html = `
                                                <div class='dropdown ms-1'>
                                                    <a href='${myUrlGet}' target='_blank' class='fw-bolder mt-2'>View/Edit</a>
                                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                    <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                                        ${statusDependentHtml}

                                                    </ul>
                                                </div>
                                            `;
                                        }


                                return html;
                                },
                                visible: true,cellClick: function(e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                            },
                        },
                            ],
                            dataBound: function () {
                                // Freeze the top 1 row (index 0) after the table is created
                                var rows = table.getRows();
                                if (rows.length > 0) {
                                    var cells = rows[0].getCells();
                                    cells.forEach(cell => {
                                        cell.freeze();
                                    });
                                }
                            },
                        });
                                    }

                                     function GetSupplierAllForSideBar() {

                                          $.get(`@Url.Action("GetSupplierListAll", "Purchase")`, function (res) {
                                    //console.log("sourav",res.data);
                                    var ditem = [];
                                    var lditem =res.data.map(m => {
                                        return `<li class="list-group-item">
                                        <a href="javascript:void(0)" onclick="GetDetailsData(${m.Id})">${m.SupplierName}</a>
                                                <p>${m.OpBalance}</p>
                                        </li>`
                                    });
                                           ditem= ditem.concat(lditem);
                                    $("#Splist").html(ditem);

                                }).fail(function (xhr, status, error) {
                                    console.error("Error:", error);
                                });

                                                }

                                                function GetSupplierAllForSideBarSearch() {
                                        var searchtext= $('#searchBox').val();
                                        if(searchtext.length<2){
                                            return false;
                                        }
                                          $.get(`@Url.Action("GetSupplierListAll", "Purchase")?searchquery=${searchtext}`, function (res) {
                                    //console.log("sourav",res.data);
                                    var ditem = [];
                                    var lditem =res.data.map(m => {
                                        return `<li class="list-group-item">
                                        <a href="javascript:void(0)" onclick="GetDetailsData(${m.Id})">${m.SupplierName}</a>
                                                <p>${m.OpBalance}</p>
                                        </li>`
                                    });
                                           ditem= ditem.concat(lditem);
                                    $("#Splist").html(ditem);

                                }).fail(function (xhr, status, error) {
                                    console.error("Error:", error);
                                });

                                                }

                               function addCommasToNumber(number) {
    if (typeof number !== 'undefined' && number !== null) {
        return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
    return '0'; // Return empty string if the number is undefined or null
}
                                function GetSupplierDetails(Id){
                                     $.get(`@Url.Action("GetSingleSupplier", "Purchase")?SupplierId=${Id}`, function (res) {
                                   let visupName= $('#vi-sup-Name');
                                   let hometab= $('#home-tab');
                                   hometab.click();
                                   let vicomname= $('#vi-sup-comname');
                                   let viaddress= $('#vi-sup-address');
                                   let edtbtn= $('.vi-supplier-editbtn');
                                   let visupopenBanlance= $('#vi-sup-openBanlance');
                                   let visupmail= $('#vi-sup-mail');
                                   let visupmob= $('#vi-sup-mob');
                                   let visupoverdue= $('#vi-sup-overdue');

                                   visupName.html(res.Name);
                                   viaddress.html(res.StreetAddress ? res.StreetAddress : 'No PrimaryAddress available');
                                           vicomname.html(res.CompanyName);
                                           visupopenBanlance.html(addCommasToNumber(res.ClBalance));
                                           visupoverdue.html(addCommasToNumber(res.OverDueBalance));

                                edtbtn.attr('onclick', `editSupplier(${res.Id})`);
                                visupmail.attr('href', `mailto:${res.Email}`);
                                visupmob.attr('href', `tel:${res.Phone}`);

                                // Selectors for elements using jQuery
                                var diName = $('#di-Name');
                                var diEmail = $('#di-Email');
                                var diPhone = $('#di-Phone');
                                var diMobile = $('#di-Mobile');
                                var diFax = $('#di-Fax');
                                var diOther = $('#di-Other');
                                var diWebsite = $('#di-Website');
                                var diBilling = $('#di-Billing');
                                var diTerms = $('#di-Terms');
                                var diCompany = $('#di-Company');
                                var diNotes = $('#di-Notes');

                                diName.html(res.Name ? res.Name : 'No Name available');
                                diEmail.html(res.Email ? res.Email : 'No Email available');
                                diPhone.html(res.Phone ? res.Phone : 'No Phone available');
                                diMobile.html(res.Phone ? res.Phone : 'No Phone available');
                                diFax.html('xxxxx');
                                diOther.html('Other Information');
                                diWebsite.html('www.example.com');
                                diBilling.html(res.StreetAddress ? res.StreetAddress : 'No PrimaryAddress available');
                                diTerms.html('Terms Information' );
                                diCompany.html(res.CompanyName ? res.CompanyName : 'No CompanyName available');
                                diNotes.html(res.Notes ? res.Notes : 'No notes available');

                                         //console.log("single Supplier",res);


                                }).fail(function (xhr, status, error) {
                                    console.error("Error:", error);
                                });
                                }


                                 $('#supplierInput').on('input', function() {
                                   var inputValue = $(this).val();
                                   var url = '@Url.Action("GetSupplierList", "Purchase")' + '?searchquery=' + inputValue;
                                   supplierSearchTable.setData(url);

                               });

                                function GetSupplierDetailsList() {
                                                function fetchDataFromServerAll() {
                                                    var MyAppUrlSettings = {
                                                        MyUsefulUrl: '@Url.Action("GetSupplierListAll", "Purchase")'
                                                    };
                                                    return $.ajax({
                                                        url: MyAppUrlSettings.MyUsefulUrl,
                                                        dataType: "json",
                                                    });
                                                }

                                                fetchDataFromServerAll().done(function (response) {

                                                    //console.log("normal response:", response);
                                                    var dataTableFilter = response.data;

                                                    //console.log("dataTableFilter::", dataTableFilter);


                                              // var apiUrl = '@Url.Action("GetPurchaseListTabulator", "Purchase")';

                                              //==================suppliers tabulator functionalties starts=============
                                                var supplierApiUrl = '@Url.Action("GetSupplierListAll", "Purchase")';

                                                 supplierSearchTable = new Tabulator("#supplier-details-supplierName", {
                                                        data: dataTableFilter,
                                                        layout: "fitColumns",
                                                        selectable:1,
                                                        height:"450px",
                                                        pagination: true,
                                                        paginationMode: "remote",
                                                        paginationSize: 10,
                                                        //paginationInitialPage: 1,
                                                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                                                        //paginationCounter: "rows",
                                                        ajaxURL: supplierApiUrl,
                                                        ajaxConfig: "get",
                                                        ajaxContentType: "json",

                                                            ajaxResponse: function (url, params, response) {
                                                            supplierSearchTable.setMaxPage(response.last_page);
                                                            //console.log("response.last_page", response.last_page);

                                                            dataLoadExpense = response.data;
                                                           /* //console.log("dataLoadExpense:", dataLoadExpense);*/

                                                            return {

                                                                data: dataLoadExpense,
                                                                last_page: response.last_page,

                                                            };
                                                        },

                                                        columns: [

                                                            {
                                                                title: "SUPPLIER/COMPANY",
                                                                headerHozAlign: "left",
                                                                field: "SupplierName",
                                                                vertAlign: "middle",
                                                                hozAlign: "left",
                                                                formatter: function (cell, formatterParams, onRendered) {
                                                                    // Get the data for the current row
                                                                    var rowData = cell.getRow().getData();

                                                                    // Create a div to hold the content
                                                                    var container = document.createElement("div");
                                                                    container.style.display = "flex";
                                                                    container.style.flexDirection = "column"; // Display content in a column

                                                                    // Create a span for the SupplierName
                                                                    var supplierSpan = document.createElement("span");
                                                                    supplierSpan.textContent = rowData.SupplierName;
                                                                    supplierSpan.style.marginBottom = "5px"; // Adjust the margin as needed
                                                                    supplierSpan.style.color = "Blue";
                                                                    //supplierSpan.style.fontWeight = "bold";
                                                                    supplierSpan.setAttribute("onclick", `GetCustomerDetails(${rowData.Id})`);

                                                                    // Create a span for the CompanyName
                                                                    var companySpan = document.createElement("span");
                                                                    companySpan.textContent = rowData.CompanyName;
                                                                    companySpan.style.color = "#727272"; // Adjust the color as needed

                                                                    // Append the spans to the container
                                                                    container.appendChild(supplierSpan);
                                                                    container.appendChild(companySpan);

                                                                    return container;
                                                                },
                                                            },
                                                            { title: "OPEN BALANCE", field: "OpBalance", movable: false, headerSort: false, visible: false }
                                                        ],
                                                        dataBound: function () {
                                                            var rows = table.getRows();
                                                            if (rows.length > 0) {
                                                                var cells = rows[0].getCells();
                                                                cells.forEach(cell => {
                                                                    cell.freeze();
                                                                });
                                                            }
                                                        },
                                                    });
                                               });
                                               }

                                                       getCurrencyDropdown();
           function getCurrencyDropdown() {
           $.ajax({
               url: '@Url.Action("GetCurrencyDropdowForCurrencyCenter", "Admin")',
               success: function (data) {
                   console.log("see currency",data);
                   const select = document.querySelector('#currency');
                   for (var i = 0; i < data.length; i++) {
                       const option = document.createElement('option');
                       option.value = data[i].Value;
                       option.text = data[i].Text;
                       select.appendChild(option);
                   }
               }
           });
        };
        $("#currency").on("change", function () {
            var selectedText = $(this).find("option:selected").text();
            if (selectedText != "BDT") {
                $(".opBalanceParentDiv").addClass("d-none");
            }
            else {
                $(".opBalanceParentDiv").removeClass("d-none");
            }
        //    alert(selectedText);
        });


         document.addEventListener("DOMContentLoaded", function () {
            var POLNameHandle = document.getElementById("supplier_code");
            var BtnSave = document.querySelector('#SupplierSaveBtn');
            var supplierId = $("#Id").val();

            function getAllCodes(callback) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetSupplierCodes", "Accounts")',
                    dataType: "json",
                    success: function (data) {
                        var CustCodeGetArray = [];
                        data.forEach(function (item) {
                            var SupplierCode = item.Text;
                            var CustomerId = item.Value;
                            var SizeData = {
                                SupplierCode: SupplierCode,
                                Id: CustomerId
                            };
                            CustCodeGetArray.push(SizeData);
                        });
                        if (typeof callback === "function") {
                            callback(CustCodeGetArray);
                        }
                    },
                    error: function (error) {
                        console.error("Error:", error);
                    }
                });
            }

            function checkSupplierCodeExists(code) {
                getAllCodes(function (data) {
                    var lowercasedSizeName = code.toLowerCase();
                    var sizeExists = data.some(function (item) {
                        if (supplierId && supplierId === item.Id) {
                            return false;
                        }
                        return item.SupplierCode.trim().toLowerCase() === lowercasedSizeName;
                    });

                    console.log("Size exists:", sizeExists);
                    if (sizeExists) {
                        $("#SupplierCodeValidation").html("Already Exist.!");
                        BtnSave.disabled = true;
                        console.log("Button disabled");
                    } else {
                        $("#SupplierCodeValidation").html("");
                        BtnSave.disabled = false;
                        console.log("Button enabled");
                    }
                });
            }

            POLNameHandle.addEventListener("input", function () {
                console.log("Input value:", POLNameHandle.value);
                var enteredSizeName = POLNameHandle.value;
                checkSupplierCodeExists(enteredSizeName);
            });
        });
    </script>
}


