@using Microsoft.AspNetCore.Http
@*@using Microsoft.AspNetCore.Antiforgery
    @inject IAntiforgery AntiForgery*@
@inject IHttpContextAccessor HttpContextAccessor
@*@model IEnumerable<Atrai.Model.Core.Entity.Acc_PurchaseMainModel>
    @{
        List<Atrai.Model.Core.Entity.Acc_PurchaseCodePrefixModel> PurchaseTypes = ViewBag.Acc_PurchaseCodePrefix;
    }*@
@model int

@{
    ViewData["Title"] = "Purchase Entry";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var DocTypeValue = ViewBag.DocTypeValue;

    //var PurchaseTypeId = ViewBag.PurchaseTypeId;
    //var PurchaseTypeName = ViewBag.PurchaseTypeName;
    var PurchaseId = ViewBag.PurchaseId;
    var ProductId = ViewBag.ProductId;
    var SupplierId = ViewBag.SupplierId;
    var MakePayment = ViewBag.MakePayment;
    //var purchaItemsId = ViewBag.purchaItemsId;
    //var purchaItemsCategoryId = ViewBag.purchaItemsCategoryId;

    //var DocTypeId = ViewBag.DocTypeId;
    //var DocTypeName = ViewBag.DocTypeName;
    List<SelectListItem> recurringTypeList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Scheduled", Value = "Scheduled" },
        new SelectListItem { Text = "Reminder", Value = "Reminder" },
        new SelectListItem { Text = "Unscheduled", Value = "Unscheduled" },
    };
    List<SelectListItem> IntervalList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Daily", Value = "Daily" },
        new SelectListItem { Text = "Weekly", Value = "Weekly" },
        new SelectListItem { Text = "Monthly", Value = "Monthly" },
        new SelectListItem { Text = "Yearly", Value = "Yearly" },
    };
    List<SelectListItem> weekList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Monday", Value = "Monday" },
        new SelectListItem { Text = "Tuesday", Value = "Tuesday" },
        new SelectListItem { Text = "Wednesday", Value = "Wednesday" },
        new SelectListItem { Text = "Thursday", Value = "Thursday" },
        new SelectListItem { Text = "Friday", Value = "Friday" },
        new SelectListItem { Text = "Saturday", Value = "Saturday" },
        new SelectListItem { Text = "Sunday", Value = "Sunday" },
    };
    List<SelectListItem> countList = new List<SelectListItem>
    {
        new SelectListItem { Text = "day", Value = "day" },
        new SelectListItem { Text = "first", Value = "first" },
        new SelectListItem { Text = "second", Value = "second" },
        new SelectListItem { Text = "third", Value = "third" },
        new SelectListItem { Text = "fourth", Value = "fourth" },
        new SelectListItem { Text = "last", Value = "last" },
    };
    List<SelectListItem> intergerList = new List<SelectListItem>
    {
        new SelectListItem { Text = "1st", Value = "1st" },
        new SelectListItem { Text = "2nd", Value = "2nd" },
        new SelectListItem { Text = "3rd", Value = "3rd" },
    };
    for (int i = 4; i <= 28; i++)
    {
        intergerList.Add(new SelectListItem { Text = $"{i}th", Value = $"{i}th" });
    }
    intergerList.Add(new SelectListItem { Text = "Last", Value = "Last" });

    List<SelectListItem> monthList = new List<SelectListItem>
    {
        new SelectListItem { Text = "January", Value = "January" },
        new SelectListItem { Text = "February", Value = "February" },
        new SelectListItem { Text = "March", Value = "March" },
        new SelectListItem { Text = "April", Value = "April" },
        new SelectListItem { Text = "May", Value = "May" },
        new SelectListItem { Text = "June", Value = "June" },
        new SelectListItem { Text = "July", Value = "July" },
        new SelectListItem { Text = "August", Value = "August" },
        new SelectListItem { Text = "September", Value = "September" },
        new SelectListItem { Text = "October", Value = "October" },
        new SelectListItem { Text = "November", Value = "November" },
        new SelectListItem { Text = "December", Value = "December" }
    };
    List<SelectListItem> EndList = new List<SelectListItem>
    {
        new SelectListItem { Text = "None", Value = "None" },
        new SelectListItem { Text = "By", Value = "By" },
        new SelectListItem { Text = "After", Value = "After" },
    };

}

<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<link href="~/css/custom_QBStyle.css" rel="stylesheet" />

<style>

    /* CSS for the arrow icon */
    span.arrow-icon {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        font-weight: bold;
    }



    .footerButton {
        margin-top: 40px;
    }



    .italic-text {
        font-style: italic;
    }

    .custom-btn {
        border-radius: 10px;
        padding: 0.2rem 1rem;
        height: 2rem;
        line-height: 1.5;
    }

    .tabulator .tabulator-header .tabulator-col {
        display: inline-flex;
        position: relative;
        box-sizing: border-box;
        flex-direction: column;
        justify-content: flex-start;
        border-right: 1px solid #aaa;
        background: #ffffff !important;
        text-align: left;
        vertical-align: bottom;
        overflow: hidden;
    }

    .tabulator-row .tabulator-cell {
        display: inline-block;
        position: relative;
        box-sizing: border-box;
        padding: 8px;
        border: 0.3px solid #d4d4d4;
        vertical-align: middle;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .tabulator .tabulator-footer .tabulator-calcs-holder {
        box-sizing: border-box;
        width: 100%;
        text-align: left;
        background: #f3f3f3 !important;
        border-bottom: 1px;
        border-top: 1px;
        overflow: hidden;
    }

    .tabulator {
        position: relative;
        border: 1px #999;
        background-color: #ffffff;
        font-size: 14px;
        text-align: left;
        overflow: hidden;
        -webkit-transform: translateZ(0);
        -moz-transform: translateZ(0);
        -ms-transform: translateZ(0);
        -o-transform: translateZ(0);
        transform: translateZ(0);
    }

    .loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        /*background: url('~/assets/loading-load.gif') 50% 50% no-repeat rgb(249, 249, 249);*/
        opacity: .6;
    }
    /* Customize the Select2 container */
    .select2-container {
        font-size: 16px;
    }

    .select2-container--default .select2-selection--single {
        border: 1px solid #aaaaaa94;
    }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 23px;
        }
    /* Customize the Select2 selection box */
    .select2-selection {
        background-color: #f2f2f2;
        border-radius: 5px;
        height: 30px;
        padding-bottom: 37px;
        border: 1px solid #ced4da
    }

    .select2-selection__rendered, .select2-selection__arrow {
        margin-top: 8px;
    }



    .tabulator-row .tabulator-cell.tabulator-editing input {
        margin-top: 6px;
    }

    .tabulator-row .tabulator-cell.tabulator-editing {
        padding-bottom: 10px;
    }

    .bootstrap-tagsinput {
        height: 45px;
        /* width: 485px; */
    }

    .move-right {
        margin-left: 160px;
    }

    .hidden {
        display: none;
    }

    .customize-btn {
        background: #e9ecef6b;
        border: 1px solid black;
        border-radius: 20px;
    }

    .customize-btn-another {
        background: #2CA01C;
        border: 1px solid black;
        border-radius: 20px;
        color: #FFFFFF;
        border: 1px solid #2CA01C;
    }

        .customize-btn-another:hover {
            background: #2CA01C;
            border: 1px solid black;
            border-radius: 20px;
            color: #FFFFFF;
            border: 1px solid #2CA01C;
        }

    .customize-btn:hover {
        background: #ffffff;
        border: 1px solid black;
        color: black;
        border-radius: 20px;
    }

    input[type="checkbox"] {
        width: 20px; /* Set the width */
        height: 20px; /* Set the height */
    }

    .collapse-icon {
        cursor: pointer;
    }

    input::placeholder {
        font-style: italic;
        font-size: 15px;
    }

 

    .content {
        /* Add some content to create space for the bottom bar */
        height: 1500px;
    }



    /* .bottom-bar button {
                    background-color: #007bff;
                    color: #fff;
                    border: none;
                    padding: 10px 20px;
                    margin: 0 5px;
                    cursor: pointer;
                }

                    .bottom-bar button:hover {
                        background-color: #0056b3;
                    }*/

    .icon-container {
        position: absolute;
        top: 0;
        right: 0;
    }

    .tabulator .tabulator-row .active-cell {
        overflow: visible;
        /* Add any other styles you need for the active cell */
    }


    #file-drop-area {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
    }

    #image-uploadify {
        display: none;
    }

    #offcanvasRight {
        width: 30%;
    }

    .tabulator-row:nth-child(odd) .tabulator-cell {
        border-right-color: transparent;
    }

    .tabulator-row:nth-child(even) .tabulator-cell {
        border-right-color: transparent;
    }

    .tabulator .tabulator-header .tabulator-col {
        border-right-color: transparent;
    }

    .tabulator-row:nth-child(even) .tabulator-cell {
        background-color: #ffffff;
    }

    .select2-container--default.select2-container--focus .select2-selection--multiple {
        height: 40px;
    }

    .select2-container--default .select2-selection--multiple {
        height: 40px;
    }

    .tabulator .tabulator-tableholder {
        overflow-x: hidden !important;
    }

    .file-wrapper {
        position: relative;
        margin-bottom: 20px;
    }

    .remove-button {
        position: absolute;
        top: 5px;
        right: 5px;
        z-index: 10;
    }

    .file-iframe {
        width: 50%;
        height: auto;
        border: 1px solid #ccc;
        overflow: hidden;
    }
</style>


<div class="page-wrapper">

    <div class="container-fluid">
        @*<div class="col-md-12 row mt-5" >*@

        <div class="hiddenSector">
            <div class="row">
                <input type="hidden" id="CountryIdLocal" name="CountryIdLocal" value="" />
                <input type="hidden" id="Id" name="Id" value="" />
                <input type="hidden" id="open-id" name="open-id" value="1" />
                <input type="hidden" id="PurchaseSerialId" name="PurchaseSerialId" value="" />
                <input type="hidden" id="LuserId" name="LuserId" value="" />
                <input type="hidden" id="ComId" name="ComId" value="" />
                <input type="hidden" id="LuserIdUpdate" name="LuserIdUpdate" value="" />
                <input type="hidden" id="CreateDate" name="CreateDate" value="" />
                <input type="hidden" id="UpdateDate" name="UpdateDate" value="" />
                <input type="hidden" id="isPosted" name="isPosted" value="" />
                <input type="hidden" id="IsCash" name="IsCash" value="" />
                <input type="hidden" id="LuserIdApprove" name="LuserIdApprove" value="" />
                <input type="hidden" id="LuserIdCheck" name="LuserIdCheck" value="" />
                <input type="hidden" id="vAmountInWords" name="vAmountInWords" value="" />
                <input type="hidden" id="PurchaseFilePath" name="PurchaseFilePath" value="" />



            </div>

        </div>

        <div>
            <div class="upperSection" id="top-row">
                <div class="row">
                    <div class="col-lg col-12">
                        <button type="button" id="modal-btn-id" class="btn text-center border" data-bs-toggle="modal" data-bs-target="#historyModal">
                            <i class="bi bi-clock-history fw-bold"></i>
                        </button>
                        <!---Modal start-->
                        <div class="modal fade modal-lg" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="historyModalLabel">Purchase History</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">

                                        <div class="card rounded-10">
                                            <div id="jsClockHistory"></div>

                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        @*<button type="button" class="btn btn-primary">Save changes</button>*@
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!---Modal ends-->
                        @if (ViewBag.DocTypeValue == "Bill" && (ViewBag.CopyBill == 0 || ViewBag.CopyBill == 1 || ViewBag.PaymentSignal == 0 || ViewBag.PaymentSignal == 1))
                        {
                            <span class="ms-2 fs-5 fw-bold">Bill <span id="bill-cocde"></span></span>
                        }
                        @if (ViewBag.DocTypeValue == "Payment")
                        {
                            <span class="ms-2 fs-5 fw-bold">Bill Payment No.<span id="bill-payment-cocde"></span></span>
                        }
                        @if (ViewBag.DocTypeValue == "Supplier PO" && ViewBag.CopyBill == 0)
                        {
                            <span class="ms-2 fs-5 fw-bold">Supplier PO</span>
                        }
                        @if (ViewBag.DocTypeValue == "Purchase Order" && ViewBag.CopyBill == 0)
                        {
                            <span class="ms-2 fs-5 fw-bold">Purchase Order </span>
                        }
                        @if (ViewBag.DocTypeValue == "Purchase Order" && ViewBag.CopyBill == 1 && ViewBag.IsRecurring == 1)
                        {
                            <span class="ms-2 fs-5 fw-bold">Purchase Order </span>
                        }
                        @if (ViewBag.DocTypeValue == "Purchase Order" && ViewBag.CopyBill == 1 && ViewBag.IsRecurring == 0)
                        {
                            <span class="ms-2 fs-5 fw-bold">Bill</span>
                        }
                        @if (ViewBag.DocTypeValue == "Purchase Payment")
                        {
                            <span class="ms-2 fs-5 fw-bold">Purchase payment no.</span>

                            <span id="purchase-payment-code"></span>
                        }
                        @if (ViewBag.DocTypeValue == "Supplier credit")
                        {
                            <span class="ms-2 fs-5 fw-bold">Supplier Credit</span>

                            <span id="purchase-payment-code"></span>
                        }
                        @if (ViewBag.DocTypeValue == "Expense")
                        {
                            <span class="ms-2 fs-5 fw-bold">Expense</span>

                            <span id="purchase-payment-code"></span>
                        }
                        @if (ViewBag.DocTypeValue == "Cheque")
                        {
                            <span class="ms-2 fs-5 fw-bold">Cheque</span>

                            <span id="purchase-payment-code"></span>
                        }
                        @if (ViewBag.DocTypeValue == "Opening Stock")
                        {
                            <span class="ms-2 fs-5 fw-bold">Inventory Starting Value</span>

                            <span id="purchase-payment-code"></span>
                        }
                        @if (ViewBag.DocTypeValue == "Stock Adjustment")
                        {
                            <span class="ms-2 fs-5 fw-bold">Inventory Quantity Adjustment</span>

                            <span id="purchase-payment-code"></span>
                        }
                        @if (ViewBag.DocTypeValue == "GRR")
                        {
                            <span class="ms-2 fs-5 fw-bold">GRR/MR</span>

                            <span id="purchase-payment-code"></span>
                        }

                    </div>

                    <div class="col-lg" style="padding: 5px; position: fixed; right: 0px; top: 7%; border-top-right-radius: 0; border-bottom-right-radius: 0; ">
                        <button class="btn btn-primary float-end" id="showoffcanvas"><i class="bi bi-chevron-double-right"></i></button>
                    </div>
                </div>
            </div>
            <div style="padding: 18px;" id="First-row-Recurring">
                <input id="recurr-id" type="text" value="0" hidden />
                @if (ViewBag.DocTypeValue == "Bill")
                {
                    <h5><p>Recurring Bill</p></h5>
                }
                @if (ViewBag.DocTypeValue == "Payment")
                {
                    <h5><p>Recurring Payment</p> </h5>
                }
                @if (ViewBag.DocTypeValue == "Purchase Order")
                {
                    <h5><p>Recurring Purchase Order</p> </h5>
                }
                @if (ViewBag.DocTypeValue == "Supplier PO")
                {
                    <h5><p>Recurring Supplier PO</p> </h5>
                }
                @if (ViewBag.DocTypeValue == "Purchase Payment")
                {
                    <h5><p>Recurring Purchase Payment</p> </h5>
                }
                @if (ViewBag.DocTypeValue == "Supplier credit")
                {
                    <h5><p>Recurring Supplier credit</p> </h5>
                }
                @if (ViewBag.DocTypeValue == "Expense")
                {
                    <h5><p>Recurring Expense</p> </h5>
                }
                @if (ViewBag.DocTypeValue == "Cheque")
                {
                    <h5><p>Recurring Cheque</p> </h5>
                }
                @if (ViewBag.DocTypeValue == "GRR")
                {
                    <h5><p>Recurring GRR/MR</p> </h5>
                }
                <div class="d-flex justify-content-start" style=" border-bottom: 1px solid #e0e0d1">
                    <div class="mb-3">
                        <label class="form-label">Template name</label>
                        <input class="form-control custom-xy" id="temp-name" autocomplete="off" />
                    </div>
                    <div class="mb-3" style="margin-left: 40px;">
                        <label class="form-label ">
                            Type
                        </label>
                        @Html.DropDownList("RecurringType", recurringTypeList as List<SelectListItem>, new { id = "RecurringType", @class = "wide-dropdown form-select form-select-sm", onchange = "recurringTypeCriteria()" })
                    </div>
                    <div id="date-duration" class="d-flex">
                        <div style="margin-top: 26px;margin-left: 10px;">
                            <p id="before-create-days">Create</p>
                        </div>
                        <div style="margin-top: 26px; ">
                            <div class="mb-3">
                                <input class="form-control" id="create-days" autocomplete="off" style="width: 50px; height: 30px;" />
                            </div>
                        </div>
                        <div style="margin-top: 26px;">
                            <p id="after-create-days">days in advance</p>
                        </div>
                    </div>


                </div>
            </div>
            <div class="row">
                @if ((ViewBag.DocTypeValue == "Bill" || ViewBag.CopyBill == 1) && ViewBag.PaymentSignal == 0 && ViewBag.IsRecurring == 0)
                {
                    <div class="col-lg-2 my-auto" id="divLocation">
                        <div class="mb-2 mt-4">
                            <div id="lis-of-po">
                                <div class="dropdown" id="list-of-po">
                                    @*<a class="" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
                                linked purchase order
                                </a>
                                <div class="dropdown-menu px-2" aria-labelledby="dropdownMenuLink" style="width: 200%;">
                                <div class="row">
                                <div class="col-lg-3">
                                <strong>Type</strong><br />
                                <span>PO</span>
                                </div>
                                <div class="col-lg-3">
                                <strong>Date</strong><br />
                                <span>Today</span>
                                </div>
                                <div class="col-lg-3">
                                <strong>Amount</strong><br />
                                <span>1212</span>
                                </div>
                                <div class="col-lg-3">
                                <strong></strong><br />
                                <span>Remove btn</span>
                                </div>
                                </div>
                                </div>*@
                                </div>
                            </div>
                            <label class="form-label fw-semibold">
                                Vendor<span class="text-danger"> *</span>
                            </label>
                            <select id="Supplier" class="form-control">
                                <option value="">Select Vendor</option>
                            </select>
                            <span class="text-danger" id="supplier-id-validation"></span>
                            <div class="d-flex mt-3" id="yourRateParent" style="width: 300px; display: none !important">
                                <label style="margin-top: 0.5rem">1 <span class="rate"></span><span class="flag"></span> = </label>
                                <input type="text" class="form-control h-100 ms-2 me-2 text-end" id="CurrencyRate" style="border-radius:0px; width: 40%;">
                                <input type="text" class="form-control w-50 h-100 ms-2 me-2" id="MultiiCurrencyId" style="border-radius:0px;" hidden>
                                <label style="margin-top: 0.5rem">BDT</label>  <i class="flag-icon flag-icon-bd"></i>
                            </div>
                        </div>
                    </div>
                }

                @if (ViewBag.DocTypeValue == "Purchase Payment" || ViewBag.DocTypeValue == "Expense" || ViewBag.DocTypeValue == "Cheque" || ViewBag.DocTypeValue == "Supplier credit" || ViewBag.DocTypeValue == "GRR")
                {
                    //to be d none
                    <div id="termsContainer" class="d-none">
                        <select class="form-select select2me" id="terms" aria-label="Floating label select example">
                            <option value="">Select an option</option>
                            <option id="addNewOption" value="add-new" data-icon="bi bi-plus-lg">Add New</option>
                        </select>
                        <span class="text-danger" id="terms-id-validation"></span>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12 mt-3 d-none">
                        <div class="mb-2">
                            <label class="form-label">
                                Bank/Credit account
                            </label>
                            <select id="ship-to-customer" class="form-control">
                                <option value="">Cash and cash equivalents</option>
                            </select>
                            <span class="text-danger" id="ship-to-validation"></span>
                        </div>
                    </div>
                    //to be d none

                    <div class="row">
                        <div class="col-lg-2 mt-3" id="divLocation">
                            <div class="mb-2">
                                <label class="form-label fw-semibold">
                                    Payee
                                </label>
                                <select id="Supplier" class="form-control">
                                    <option value="">Select Payee</option>
                                </select>
                                <span class="text-danger" id="supplier-id-validation"></span>
                                <div class="d-flex mt-3" id="yourRateParent" style="width: 300px; display: none !important">
                                    <label style="margin-top: 0.5rem">1 <span class="rate"></span><span class="flag"></span> = </label>
                                    <input type="text" class="form-control h-100 ms-2 me-2 text-end" id="CurrencyRate" style="border-radius:0px; width: 40%;">
                                    <input type="text" class="form-control w-50 h-100 ms-2 me-2" id="MultiiCurrencyId" style="border-radius:0px;" hidden>
                                    <label style="margin-top: 0.5rem">BDT</label>  <i class="flag-icon flag-icon-bd"></i>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-2 mt-3" id="divLocation">
                            <div class="mt-4">
                                <span class="fw-bolder">Balance </span><span id="balance-due-another">0.00</span>
                            </div>
                        </div>
                        <div class="col-lg">
                            <span class="float-lg-end">BALANCE DUE</span> <br />
                            <span class="float-lg-end fs-1 fw-bold"><span class="rate"></span>&nbsp;<span id="balance-due">0.00</span></span>
                        </div>
                    </div>
                }




                @*@if (ViewBag.DocTypeValue == "Supplier credit")
                {
                //to be d none
                <div id="termsContainer" class="d-none">
                <select class="form-select select2me" id="terms" aria-label="Floating label select example">
                <option value="">Select an option</option>
                <option id="addNewOption" value="add-new" data-icon="bi bi-plus-lg">Add New</option>
                </select>
                <span class="text-danger" id="terms-id-validation"></span>
                </div>
                <div class="col-lg-2 col-12 col-md-12 mt-3 d-none">
                <div class="mb-2">
                <label class="form-label">
                Bank/Credit account
                </label>
                <select id="ship-to-customer" class="form-control">
                <option value="">Cash and cash equivalents</option>
                </select>
                <span class="text-danger" id="ship-to-validation"></span>
                </div>
                </div>
                //to be d none

                <div class="row">
                <div class="col-lg-2 mt-3" id="divLocation">
                <div class="mb-2">
                <label class="form-label fw-semibold">
                Payee
                </label>
                <select id="Supplier" class="form-control">
                <option value="">Supplier</option>
                </select>
                <span class="text-danger" id="supplier-id-validation"></span>
                </div>
                </div>
                <div class="col-lg-2 mt-3 d-none" id="divLocation">
                <div class="mt-4">
                <span class="fw-bolder">Balance </span><span id="balance-due-another">0.00</span>
                </div>
                </div>
                <div class="col-lg">
                <span class="float-lg-end">BALANCE DUE</span> <br />
                <span class="float-lg-end fs-1 fw-bold">$<span id="balance-due">0.00</span></span>
                </div>
                </div>
                }*@







                @if (ViewBag.DocTypeValue == "Payment")
                {
                    <div class="col-lg-2 mt-3" id="divLocation">
                        <div class="mb-2">
                            <label class="form-label fw-semibold">
                                Payee
                            </label>
                            <select id="Supplier" class="form-control">
                                <option value="">Select Payee</option>
                            </select>
                            <span class="text-danger" id="supplier-id-validation"></span>
                            <div class="d-flex mt-3" id="yourRateParent" style="width: 300px; display: none !important">
                                <label style="margin-top: 0.5rem">1 <span class="rate"></span><span class="flag"></span> = </label>
                                <input type="text" class="form-control h-100 ms-2 me-2 text-end" id="CurrencyRate" style="border-radius:0px; width: 40%;">
                                <input type="text" class="form-control w-50 h-100 ms-2 me-2" id="MultiiCurrencyId" style="border-radius:0px;" hidden>
                                <label style="margin-top: 0.5rem">BDT</label>  <i class="flag-icon flag-icon-bd"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-2 mt-4">
                        @*<label class="form-label d-flex justify-content-between">Email <span id="cc-bcc-id" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span></label>*@
                        <div class="dropdown d-flex justify-content-between">
                            Email
                            <span class="dropdown-toggle" data-bs-toggle="dropdown" id="dropdownMenuButton1" aria-expanded="false" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span>
                            <div class="dropdown-menu dropdown-of" aria-labelledby="filter-btn" id="filter-dropdown-id" style="width:350px;">
                                <div class="ms-3">
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Cc</label>
                                            <input id="cc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Bcc</label>
                                            <input id="bcc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mt-2">
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4" onclick="resetForm(event)">Cancel</button>
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4">Done</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input class="form-control" id="purchase-mail-address" />
                    </div>

                    <div class="col-lg-2 col-12 col-md-12 mt-3">
                        <div class="mb-2">
                            <label class="form-label">
                                Bank/Credit account
                            </label>
                            <select id="ship-to-customer" class="form-control">
                                <option value="">Cash and cash equivalents</option>
                            </select>
                            <span class="text-danger" id="ship-to-validation"></span>
                        </div>
                    </div>


                    <div class="col-lg">
                        <span class="float-lg-end">BALANCE DUE</span> <br />
                        <span class="float-lg-end fs-1 fw-bold"><span class="rate"></span>&nbsp;<span id="balance-due">0.00</span></span>
                    </div>
                }

                @if (ViewBag.DocTypeValue == "Purchase Order" && (ViewBag.CopyBill != 1 || ViewBag.IsRecurring == 1))
                {
                    <div class="col-lg-2 my-auto" id="divLocation">
                        <div class="mb-2 mt-4">
                            <label class="form-label fw-semibold">
                                Supplier<span class="text-danger"> *</span>
                            </label>
                            <select id="Supplier" class="form-control">
                                <option value="">Select Supplier</option>
                            </select>
                            <span class="text-danger" id="vendor-id-validation"></span>
                            <div class="d-flex mt-3" id="yourRateParent" style="width: 300px; display: none !important">
                                <label style="margin-top: 0.5rem">1 <span class="rate"></span><span class="flag"></span> = </label>
                                <input type="text" class="form-control h-100 ms-2 me-2 text-end" id="CurrencyRate" style="border-radius:0px; width: 40%;">
                                <input type="text" class="form-control w-50 h-100 ms-2 me-2" id="MultiiCurrencyId" style="border-radius:0px;" hidden>
                                <label style="margin-top: 0.5rem">BDT</label>  <i class="flag-icon flag-icon-bd"></i>
                            </div>
                        </div>
                    </div>
                }

                @if (ViewBag.DocTypeValue == "Supplier PO" && (ViewBag.CopyBill != 1 || ViewBag.IsRecurring == 0))
                {
                    <div class="col-lg-2 my-auto" id="divLocation">
                        <div class="mb-2 mt-4">
                            <label class="form-label fw-semibold" style="margin-bottom:0px;">
                                Supplier<span class="text-danger"> *</span>
                            </label>
                            <select id="Supplier" class="form-control">
                                <option value="">Select Supplier</option>
                            </select>
                            <span class="text-danger" id="vendor-id-validation"></span>
                            <div class="d-flex mt-3" id="yourRateParent" style="width: 300px; display: none !important">
                                <label style="margin-top: 0.5rem">1 <span class="rate"></span><span class="flag"></span> = </label>
                                <input type="text" class="form-control h-100 ms-2 me-2 text-end" id="CurrencyRate" style="border-radius:0px; width: 40%;">
                                <input type="text" class="form-control w-50 h-100 ms-2 me-2" id="MultiiCurrencyId" style="border-radius:0px;" hidden>
                                <label style="margin-top: 0.5rem">BDT</label>  <i class="flag-icon flag-icon-bd"></i>
                            </div>
                        </div>
                    </div>
                }

                @if (ViewBag.DocTypeValue == "Purchase Order" && ViewBag.ActionType != "Edit" && (ViewBag.CopyBill != 1 || ViewBag.IsRecurring == 1))
                {
                    <div class="col-lg-2 mt-4">
                        @*<label class="form-label d-flex justify-content-between">Email <span id="cc-bcc-id" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span></label>*@
                        <div class="dropdown d-flex justify-content-between">
                            Email
                            @*<button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                        Dropdown button
                        </button>*@
                            <span class="dropdown-toggle" data-bs-toggle="dropdown" id="dropdownMenuButton1" aria-expanded="false" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span>
                            <div class="dropdown-menu dropdown-of" aria-labelledby="filter-btn" id="filter-dropdown-id" style="width:350px;">
                                <div class="ms-3">
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Cc</label>
                                            <input id="cc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Bcc</label>
                                            <input id="bcc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mt-2">
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4" onclick="resetForm(event)">Cancel</button>
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4">Done</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input class="form-control" id="purchase-mail-address" />
                    </div>

                    <div class="col-lg-8">
                        <span class="float-lg-end">BALANCE DUE</span> <br />
                        <span class="float-lg-end fs-1 fw-bold"><span class="rate"></span>&nbsp;<span id="balance-due">0.00</span></span>
                    </div>
                }

                @if (ViewBag.DocTypeValue == "Supplier PO" && ViewBag.ActionType != "Edit" && (ViewBag.CopyBill != 1 || ViewBag.IsRecurring == 1))
                {
                    <div class="col-lg-2 mt-4">
                        @*<label class="form-label d-flex justify-content-between">Email <span id="cc-bcc-id" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span></label>*@
                        <div class="dropdown d-flex justify-content-between">
                            Email
                            @*<button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                        Dropdown button
                        </button>*@
                            <span class="dropdown-toggle" data-bs-toggle="dropdown" id="dropdownMenuButton1" aria-expanded="false" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span>
                            <div class="dropdown-menu dropdown-of" aria-labelledby="filter-btn" id="filter-dropdown-id" style="width:350px;">
                                <div class="ms-3">
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Cc</label>
                                            <input id="cc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Bcc</label>
                                            <input id="bcc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mt-2">
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4" onclick="resetForm(event)">Cancel</button>
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4">Done</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input class="form-control" id="purchase-mail-address" />
                    </div>

                     <div class="col-lg-2 mt-4" id="divLocation">
                        <label class="form-label fw-semibold" style="margin-bottom:0px;">
                            Master PO<span class="text-danger"> *</span>
                        </label>
                        @Html.DropDownList("MasterPO", ViewBag.MasterPO as List<SelectListItem>, "Select a Maste PO", new { id = "MasterPOId", @class = "wide-dropdown form-select form-select-sm" })
                    </div>

                    <div class="col-lg-6">
                        <span class="float-lg-end">BALANCE DUE</span> <br />
                        <span class="float-lg-end fs-1 fw-bold"><span class="rate"></span>&nbsp;<span id="balance-due">0.00</span></span>
                    </div>
                }
                @if (ViewBag.DocTypeValue == "Purchase Order" && ViewBag.ActionType == "Edit" && (ViewBag.CopyBill != 1 || ViewBag.IsRecurring == 1))
                {
                    <div class="col-lg-2 mt-4">
                        <div class="dropdown d-flex justify-content-between">
                            Email
                            <span class="dropdown-toggle" data-bs-toggle="dropdown" id="dropdownMenuButton1" aria-expanded="false" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span>
                            <div class="dropdown-menu dropdown-of" aria-labelledby="filter-btn" id="filter-dropdown-id" style="width:350px;">
                                <div class="ms-3">
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Cc</label>
                                            <input id="cc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Bcc</label>
                                            <input id="bcc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mt-2">
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4" onclick="resetForm(event)">Cancel</button>
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4">Done</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <input class="form-control" id="purchase-mail-address" />
                    </div>

                    <div class="col-lg-8">
                        <span class="float-lg-end">BALANCE DUE</span> <br />
                        <span class="float-lg-end fs-1 fw-bold"><span> <button id="run-report-btn" type="button" class="btn customize-btn fw-bold" onclick="CopyBill()" style="">Copy Bill</button></span> <span class="rate"></span>&nbsp;<span id="balance-due">0.00</span></span>
                    </div>
                }

                @if (ViewBag.DocTypeValue == "Supplier PO" && ViewBag.ActionType == "Edit" && (ViewBag.CopyBill != 1 || ViewBag.IsRecurring == 1))
                {
                    <div class="col-lg-2 mt-4">
                        <div class="dropdown d-flex justify-content-between">
                            Email
                            <span class="dropdown-toggle" data-bs-toggle="dropdown" id="dropdownMenuButton1" aria-expanded="false" style="color: #0077c5;cursor:pointer;">Cc/Bcc</span>
                            <div class="dropdown-menu dropdown-of" aria-labelledby="filter-btn" id="filter-dropdown-id" style="width:350px;">
                                <div class="ms-3">
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Cc</label>
                                            <input id="cc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="mb-3 col-lg-5">
                                            <label for="typeDropdown" class="form-label fw-bold">Bcc</label>
                                            <input id="bcc-id" placeholder="Emai(Separate emails with a comma)" style="width: 315px; border: 1px solid #808080a6" />
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between mt-2">
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4" onclick="resetForm(event)">Cancel</button>
                                        <button type="reset" class="btn customize-btn radius-30 fw-bold px-4">Done</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <input class="form-control" id="purchase-mail-address" />
                    </div>
                     <div class="col-lg-2 mt-4" id="divLocation">
                        <label class="form-label fw-semibold" style="margin-bottom:0px;">
                            Master PO<span class="text-danger"> *</span>
                        </label>
                        @Html.DropDownList("MasterPO", ViewBag.MasterPO as List<SelectListItem>, "Select a Master PO", new { id = "MasterPOId", @class = "wide-dropdown form-select form-select-sm" })
                    </div>
                    <div class="col-lg-6">
                        <span class="float-lg-end">BALANCE DUE</span> <br />
                        <span class="float-lg-end fs-1 fw-bold"><span> <button id="run-report-btn" type="button" class="btn customize-btn fw-bold" onclick="CopyBill()" style="">Copy Bill</button></span> <span class="rate"></span>&nbsp;<span id="balance-due">0.00</span></span>
                    </div>
                }

                @if ((ViewBag.DocTypeValue == "Bill" || ViewBag.CopyBill == 1) && ViewBag.ActionType != "Edit" && ViewBag.PaymentSignal == 0 && ViewBag.IsRecurring == 0)
                {
                    <div class="col-lg-10">
                        <span class="float-lg-end">BALANCE DUE</span> <br />
                        <span class="float-lg-end fs-1 fw-bold"><span class="rate"></span>&nbsp;<span id="balance-due">0.00</span></span>
                    </div>
                }
                @if ((ViewBag.DocTypeValue == "Bill" || ViewBag.CopyBill == 1) && ViewBag.ActionType == "Edit")
                {
                    <div class="col-lg-10">
                        <span class="float-lg-end">BALANCE DUE</span> <br />
                        <span class="float-lg-end fs-1 fw-bold"><span> <button id="run-report-btn" type="button" class="btn customize-btn fw-bold" onclick="MakePayment()" style="">make Payment</button></span> <span class="rate"></span>&nbsp;<span id="balance-due">0.00</span></span>
                    </div>
                }
                @*<div class="icon-container">
                <i class="bi bi-caret-left"></i>
                </div>*@
            </div>

            <div class="row" id="IntervalDiv">
                <div class="d-flex justify-content-start" style=" border-bottom: 1px solid #e0e0d1; border-top: 1px solid #e0e0d1;">
                    <div style="margin-bottom: 10px;">
                        <div class="mb-3">
                            <label class="form-label ">
                                Interval
                            </label>
                            @Html.DropDownList("Interval", IntervalList as List<SelectListItem>, new { id = "Interval", @class = "wide-dropdown form-select form-select-sm", onchange = "intervalCriteria()" })
                        </div>
                    </div>
                    <div id="date-duration" class="d-flex">
                        <div style="margin-top: 41px;margin-left: 10px;">
                            <p id="before-every">every</p>
                        </div>
                        <div style="margin-top: 35px; ">
                            <div class="mb-3">
                                <input class="form-control" id="every" autocomplete="off" style="width: 50px;" />
                            </div>
                        </div>
                        <div style="margin-top: 41px;">
                            <p id="after-interval">day(s) on</p>
                        </div>
                        <div class="d-flex" style="margin-top: 35px; margin-bottom: 10px; ">
                            <div id="_Count" class="d-none">
                                @Html.DropDownList("Count", countList as List<SelectListItem>, new { id = "Count", @class = "wide-dropdown form-select form-select-sm d-none", onchange = "changeListForMonth()" })
                            </div>
                            <div id="_Week" class="d-none">
                                @Html.DropDownList("Week", weekList as List<SelectListItem>, new { id = "Week", @class = "wide-dropdown form-select form-select-sm d-none" })
                            </div>
                            <div id="_Integer" class="d-none">
                                @Html.DropDownList("Integer", intergerList as List<SelectListItem>, new { id = "Integer", @class = "wide-dropdown form-select form-select-sm d-none" })
                            </div>
                            <div id="_Month" class="d-none">
                                @Html.DropDownList("Month", monthList as List<SelectListItem>, new { id = "Month", @class = "wide-dropdown form-select form-select-sm d-none" })
                            </div>
                        </div>
                    </div>
                    <div class="d-flex" style="margin-top: 10px;">
                        <div style="width: 120px; margin-left: 10px;">
                            <label style="margin-bottom: 3px;">Start date</label>
                            <input class="form-control custom-height" id="recurring-start-date" autocomplete="off" />
                        </div>
                        <div style="margin-left: 10px;">
                            <label style="margin-bottom: 3px; ">End</label>
                            @Html.DropDownList("End", EndList as List<SelectListItem>, new { id = "End", @class = "wide-dropdown form-select form-select-sm", onchange = "limitCriteria()" })
                        </div>
                        <div style="width: 120px; margin-left: 10px;" id="recurringEndDiv" class="d-none">
                            <label style="margin-bottom: 3px;">End date</label>
                            <input class="form-control custom-height" id="recurring-end-date" autocomplete="off" />
                        </div>
                        <div style="margin-top: 26px; margin-left: 10px;" class="d-none" id="occurencesDiv">
                            <div class="mb-3">
                                <input class="form-control" id="occurences" autocomplete="off" style="width: 50px; height: 30px;" />
                            </div>
                        </div>
                        <div style="margin-top: 26px;margin-left: 10px;" id="occurencesSpan" class="d-none">
                            occurences
                        </div>
                        
                    </div>
                </div>
            </div>

            @if ((ViewBag.DocTypeValue == "Bill" || ViewBag.CopyBill == 1) && ViewBag.PaymentSignal == 0 && ViewBag.IsRecurring == 0)
            {
                <div class="row">
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">

                            <label class="form-label d-flex justify-content-between">Mailing address </label>
                            <textarea class="form-control" id="mail-address"></textarea>
                        </div>
                    </div>
                    <div class="mb-2 d-none">
                        <label class="form-label fw-semibold">
                            Ship to<span class="text-danger"> *</span>
                        </label>
                        <select id="ship-to-customer" class="form-control">
                            <option value="">Select a customer for address</option>
                        </select>
                        <span class="text-danger" id="ship-to-validation"></span>
                    </div>
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label fw-semibold">
                                Terms<span class="text-danger"> *</span>

                            </label>
                            <div id="termsContainer">
                                <select class="form-select select2me" id="terms" aria-label="Floating label select example">
                                    <option value="">Select an option</option>
                                    <option id="addNewOption" value="add-new" data-icon="bi bi-plus-lg">Add New</option>
                                </select>
                                <span class="text-danger" id="terms-id-validation"></span>
                            </div>
                        </div>
                        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content mx-auto">
                                    <div>
                                        <button onclick="modalClear()" type="button" class="btn-close float-lg-end me-2 mt-2" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div>
                                        <h5 class="modal-title ms-5 fw-bold text-dark" id="exampleModalLabel">New Term</h5>
                                    </div>
                                    <div class="modal-body px-5">
                                        <!-- Inside the modal-body -->
                                        <form id="termForm">
                                            <input type="hidden" id="Id" value="0" />

                                            <div class="mb-3">
                                                <label for="termName" class="form-label fw-bold"><span class="text-danger">*</span>Name</label>
                                                <input type="text" class="form-control w-50" id="termName" name="TermName" style="border-radius:0px;">
                                                <div id="termNameValidation" class="text-danger"></div>
                                            </div>
                                            <div class="mb-3">
                                                <input checked id="dueInDaysRadio" type="radio" />
                                                <label for="dueInDaysRadio" class="form-label fw-bold">Due in fixed number of days</label>
                                            </div>
                                            <div class="mb-3 d-flex ms-3">
                                                <input type="text" class="form-control" id="dueInDays" name="DueInFixedDays" style="width: 45px; border-radius: 0px;">
                                                <label for="dueInDays" class="form-label ms-1 my-auto">days</label>
                                            </div>
                                            <div class="mb-3">
                                                <input id="dueByDaysRadio" type="radio" />
                                                <label for="dueByDaysRadio" class="form-label fw-bold">Due by certain day of the month</label>
                                            </div>
                                            <div class="mb-3 d-flex ms-3">
                                                <input type="text" class="form-control" id="dueByDay" name="DueByDayOfMonth" style="width: 45px; border-radius: 0px;" disabled>
                                                <label for="dueByDay" class="form-label ms-1 my-auto">day of month</label>
                                            </div>
                                            <div class="mb-3 ms-3">
                                                <label class="form-label fw-bold">Due the next month if issued within</label>
                                            </div>
                                            <div class="mb-3 d-flex ms-3">
                                                <input type="text" class="form-control" id="dueNextMonthDays" name="DueNextMonthWithinDays" style="width: 45px; border-radius: 0px;" disabled>
                                                <label for="dueNextMonthDays" class="form-label ms-1 my-auto">days of due date</label>
                                            </div>
                                        </form>

                                    </div>
                                    <!-- At the bottom of the modal content, before the closing </div> -->
                                    <hr class="w-75 mx-auto" />
                                    <div class="d-flex justify-content-around mb-4">
                                        <button onclick="modalClear()" type="button" class="btn customize-btn fw-bold" data-bs-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn customize-btn-another fw-bold" id="saveTermButton">Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label">Bill Date</label>

                            <input class="form-control" id="start-date" />
                            <span class="text-danger" id="bill-date-validation"></span>

                        </div>
                    </div>
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label">Due Date</label>

                            <input class="form-control" id="end-date" />
                            <span class="text-danger" id="due-date-validation"></span>

                        </div>
                    </div>
                    <div class="col-md-2 col-12">
                        <div class="d-none" id="FiscalMonthDiv">
                            <label class="form-label fw-semibold">Fiscal month</label>
                            <select class="wide-dropdown form-select form-select-sm" id="FiscalMonthId"
                                    aria-label="Floating label select example">
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label">Bill No</label>

                            <input id="bill-no" class="form-control" />
                            <span class="text-danger" id="bill-no-validation"></span>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label">Permit No</label>

                            <input id="permit-no" class="form-control" />

                        </div>
                    </div>
                    @*<div class="col-lg-2 col-12">
                <div class="mb-2">
                <label class="form-label fw-semibold">
                Type
                </label>
                <div>
                @Html.DropDownList("DocType", ViewBag.DocType as List<SelectListItem>, new { id = "DocType", @class = "form-control " })
                </div>
                </div>
                </div>*@
                </div>
            }


            @if (ViewBag.DocTypeValue == "Purchase Payment" || ViewBag.DocTypeValue == "Expense" || ViewBag.DocTypeValue == "Cheque" || ViewBag.DocTypeValue == "Supplier credit" || ViewBag.DocTypeValue == "GRR")
            {
                <div class="row">
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">

                            <label class="form-label d-flex justify-content-between">Mailing address </label>
                            <textarea class="form-control" id="mail-address"></textarea>
                        </div>
                    </div>

                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label">Payment Date</label><span class="text-danger"> *</span>

                            <input class="form-control" id="purchase-order-date" />
                            <span class="text-danger" id="payment-date-validation"></span>

                        </div>
                    </div>
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label">Cheque No</label>

                            <input id="bill-no" class="form-control" />
                            <span class="text-danger" id="bill-no-validation"></span>
                        </div>
                    </div>
                    <div class="col-md-2 col-12">
                        <div class="d-none" id="FiscalMonthDiv">
                            <label class="form-label fw-semibold">Fiscal month</label>
                            <select class="wide-dropdown form-select form-select-sm" id="FiscalMonthId"
                                    aria-label="Floating label select example">
                            </select>
                        </div>
                    </div>
                </div>
            }



            @*@if (ViewBag.DocTypeValue == "Supplier credit")
            {
            <div class="row">
            <div class="col-lg-2 col-12">
            <div class="mb-2">

            <label class="form-label d-flex justify-content-between">Mailing address </label>
            <textarea class="form-control" id="mail-address"></textarea>
            </div>
            </div>

            <div class="col-lg-2 col-12">
            <div class="mb-2">
            <label class="form-label">Payment Date</label>

            <input class="form-control" id="purchase-order-date" />
            <span class="text-danger" id="payment-date-validation"></span>

            </div>
            </div>
            <div class="col-lg-2 col-12">
            <div class="mb-2">
            <label class="form-label">Ref No</label><span class="text-danger"> *</span>

            <input id="bill-no" class="form-control" />
            <span class="text-danger" id="bill-no-validation"></span>
            </div>
            </div>
            </div>
            }*@




            @if ((ViewBag.DocTypeValue == "Payment" || ViewBag.CopyBill == 1) && ViewBag.PaymentSignal == 1)
            {
                //tags to be d none starts
                <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content mx-auto">
                            <div>
                                <button onclick="modalClear()" type="button" class="btn-close float-lg-end me-2 mt-2" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div>
                                <h5 class="modal-title ms-5 fw-bold text-dark" id="exampleModalLabel">New Term</h5>
                            </div>
                            <div class="modal-body px-5">
                                <!-- Inside the modal-body -->
                                <form id="termForm">
                                    <input type="hidden" id="Id" value="0" />

                                    <div class="mb-3">
                                        <label for="termName" class="form-label fw-bold"><span class="text-danger">*</span>Name</label>
                                        <input type="text" class="form-control w-50" id="termName" name="TermName" style="border-radius:0px;">
                                        <div id="termNameValidation" class="text-danger"></div>
                                    </div>
                                    <div class="mb-3">
                                        <input checked id="dueInDaysRadio" type="radio" />
                                        <label for="dueInDaysRadio" class="form-label fw-bold">Due in fixed number of days</label>
                                    </div>
                                    <div class="mb-3 d-flex ms-3">
                                        <input type="text" class="form-control" id="dueInDays" name="DueInFixedDays" style="width: 45px; border-radius: 0px;">
                                        <label for="dueInDays" class="form-label ms-1 my-auto">days</label>
                                    </div>
                                    <div class="mb-3">
                                        <input id="dueByDaysRadio" type="radio" />
                                        <label for="dueByDaysRadio" class="form-label fw-bold">Due by certain day of the month</label>
                                    </div>
                                    <div class="mb-3 d-flex ms-3">
                                        <input type="text" class="form-control" id="dueByDay" name="DueByDayOfMonth" style="width: 45px; border-radius: 0px;" disabled>
                                        <label for="dueByDay" class="form-label ms-1 my-auto">day of month</label>
                                    </div>
                                    <div class="mb-3 ms-3">
                                        <label class="form-label fw-bold">Due the next month if issued within</label>
                                    </div>
                                    <div class="mb-3 d-flex ms-3">
                                        <input type="text" class="form-control" id="dueNextMonthDays" name="DueNextMonthWithinDays" style="width: 45px; border-radius: 0px;" disabled>
                                        <label for="dueNextMonthDays" class="form-label ms-1 my-auto">days of due date</label>
                                    </div>
                                </form>

                            </div>
                            <!-- At the bottom of the modal content, before the closing </div> -->
                            <hr class="w-75 mx-auto" />
                            <div class="d-flex justify-content-around mb-4">
                                <button onclick="modalClear()" type="button" class="btn customize-btn fw-bold" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn customize-btn-another fw-bold" id="saveTermButton">Save</button>
                            </div>
                        </div>
                    </div>
                </div>
                //tags to be d none ends



                <div class="row">
                    <div class="mb-2 d-none">
                        <label class="form-label fw-semibold">
                            Terms
                        </label>
                        <div id="termsContainer">
                            <select class="form-select select2me" id="terms" aria-label="Floating label select example">
                                <option value="">Select an option</option>
                                <option id="addNewOption" value="add-new" data-icon="bi bi-plus-lg">Add New</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">

                            <label class="form-label d-flex justify-content-between">Mailing address </label>
                            <textarea class="form-control" id="mail-address"></textarea>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">
                            <label class="form-label">Payment date</label>

                            <input class="form-control" id="paymentt-date" />
                            <span class="text-danger" id="paymentt-date-validation"></span>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">
                            <label class="form-label">Ref No.</label>
                            <input id="ref-no" class="form-control" />
                        </div>
                    </div>
                </div>
            }

            @if (ViewBag.DocTypeValue == "Purchase Order" && (ViewBag.CopyBill != 1 || ViewBag.IsRecurring == 1))
            {
                <div class="row">
                    <div class="mb-2 d-none">
                        <label class="form-label fw-semibold">
                            Terms
                        </label>
                        <div id="termsContainer">
                            <select class="form-select select2me" id="terms" aria-label="Floating label select example">
                                <option value="">Select an option</option>
                                <option id="addNewOption" value="add-new" data-icon="bi bi-plus-lg">Add New</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">

                            <label class="form-label d-flex justify-content-between">Mailing address </label>
                            <textarea class="form-control" id="mail-address"></textarea>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">
                            <label class="form-label fw-semibold">
                                Ship to
                            </label>
                            <select id="ship-to-customer" class="form-control">
                                <option value="">Select a customer for address</option>
                            </select>
                            <span class="text-danger" id="ship-to-validation"></span>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">
                            <label class="form-label">Purchase Order date</label><span class="text-danger"> *</span>

                            <input class="form-control" id="purchase-order-date" />
                            <span class="text-danger" id="bill-date-validation"></span>
                        </div>
                    </div>
                    <div class="col-md-2 col-12">
                        <div class="d-none" id="FiscalMonthDiv">
                            <label class="form-label fw-semibold">Fiscal month</label>
                            <select class="wide-dropdown form-select form-select-sm" id="FiscalMonthId"
                                    aria-label="Floating label select example">
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">

                            <label class="form-label d-flex justify-content-between">Shipping address </label>
                            <textarea class="form-control" id="shipping-mail-address"></textarea>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">
                            <label class="form-label">Ship via</label>
                            <input id="ship-via" class="form-control" />

                        </div>
                    </div>
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label">PO No</label>

                            <input id="bill-no" class="form-control" />
                            <span class="text-danger" id="bill-no-validation"></span>
                        </div>
                    </div>
                </div>
            }

            @if (ViewBag.DocTypeValue == "Supplier PO" && (ViewBag.CopyBill != 1 || ViewBag.IsRecurring == 1))
            {
                <div class="row">
                    <div class="mb-2 d-none">
                        <label class="form-label fw-semibold">
                            Terms
                        </label>
                        <div id="termsContainer">
                            <select class="form-select select2me" id="terms" aria-label="Floating label select example">
                                <option value="">Select an option</option>
                                <option id="addNewOption" value="add-new" data-icon="bi bi-plus-lg">Add New</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">

                            <label class="form-label d-flex justify-content-between">Mailing address </label>
                            <textarea class="form-control" id="mail-address"></textarea>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">
                            <label class="form-label fw-semibold">
                                Ship to
                            </label>
                            <select id="ship-to-customer" class="form-control">
                                <option value="">Select a customer for address</option>
                            </select>
                            <span class="text-danger" id="ship-to-validation"></span>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">
                            <label class="form-label">Purchase Order date</label><span class="text-danger"> *</span>

                            <input class="form-control" id="purchase-order-date" />
                            <span class="text-danger" id="bill-date-validation"></span>
                        </div>
                    </div>
                    <div class="col-md-2 col-12">
                        <div class="d-none" id="FiscalMonthDiv">
                            <label class="form-label fw-semibold">Fiscal month</label>
                            <select class="wide-dropdown form-select form-select-sm" id="FiscalMonthId"
                                    aria-label="Floating label select example">
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">

                            <label class="form-label d-flex justify-content-between">Shipping address </label>
                            <textarea class="form-control" id="shipping-mail-address"></textarea>
                        </div>
                    </div>
                    <div class="col-lg-2 col-12 col-md-12">
                        <div class="mb-2">
                            <label class="form-label">Ship via</label>
                            <input id="ship-via" class="form-control" />

                        </div>
                    </div>
                    <div class="col-lg-2 col-12">
                        <div class="mb-2">
                            <label class="form-label">PO No</label>

                            <input id="bill-no" class="form-control" />
                            <span class="text-danger" id="bill-no-validation"></span>
                        </div>
                    </div>
                </div>
            }


            @if (ViewBag.DocTypeValue == "Stock Adjustment")
            {
                <div class="row">
                    <div class="col-md-2 col-2 mb-2">
                        <label class="form-label">Payment Date</label>
                        <input class="form-control" id="inventory-adjustment-date" />
                    </div>
                </div>
                <div class="row">
                    <label class="form-label">
                        Inventory adjustment account
                    </label>
                    <div class="col-md-2 col-2 mb-2">

                        <select id="inventory-adjustment-acc-id" class="form-control">
                            <option value="">Select Account</option>
                        </select>
                        <span class="text-danger" id="supplier-id-validation"></span>
                    </div>
                </div>


            }

            <div class="row">
                <div class="col-lg-7">
                    <div class="">
                        @* <label class="form-label fw-semibold">Tags</label> *@
                        <label class="d-flex justify-content-between align-items-center">
                            <span>Tags</span>
                            @* <span><a href="#" data-toggle="offcanvas" data-target="#offcanvasRight">Manage tags</a></span> *@
                            <span><button type="button" class="btn btn-link" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="">Manage tags</button></span>
                        </label>

                        @* <input id="MultiTags" type="text" value="" data-role="tagsinput" class="d-none"/> *@
                        <select id="tagDropdown" class="js-example-tags" multiple="multiple"></select>

                        <!-- Display selected tags -->
                        <div class="d-none" id="selectedTags"></div>
                    </div>
                </div>
                <div class="col-lg-3 col-3"></div>
                <div class="col-lg-2 mt-3">
                    <div class="mb-2">
                        <label class="form-label fw-semibold">
                            Location
                        </label><span class="text-danger"> *</span>
                        <select id="WarehouseIdMain" class="form-control">
                        </select>
                        <span class="text-danger" id="locationError"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" >
            <div class="col-lg-6 col-6">
                <div class="mb-3">
                    @if (ViewBag.DocTypeValue == "Purchase Payment" || ViewBag.DocTypeValue == "Expense" || ViewBag.DocTypeValue == "Cheque" || ViewBag.DocTypeValue == "Supplier credit" || ViewBag.DocTypeValue == "GRR")
                    {
                        <p>Transaction Method</p>

                        <div id="transaction-method"></div>
                        <span class="text-danger" id="SalesReceiptAmount-validation"></span>
                        <div class="row" style="margin-top: 10px">
                            <div class="col-md-1 col-12" >
                                <div class="mb-3">
                                    <button id="add-obj" class="btn btn-outline-dark">Add</button>
                                </div>
                            </div>
                            <div class="col-md-2 col-12" >
                                <div class="mb-3">
                                    <button id="del-obj" class="btn btn-outline-dark">Clear</button>
                                </div>
                            </div>
                            @if (ViewBag.DocTypeValue == "Purchase Payment")
                            {
                                <div class="col-md-4 col-4"></div>
                                <div class="col-md-4 col-4 d-flex justify-content-end">
                                    <input id="isRecognition" type="checkbox" />
                                    <label class="form-label f-label d-flex">Is Recognition<i class="bi bi-question-circle text-secondary px-2" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-title="If you are paying for a fixed number of months in advance then checked the checkbox."></i></label>
                                </div>  
                            }
                        </div>
                    }
                    @if (ViewBag.DocTypeValue == "Purchase Payment" || ViewBag.DocTypeValue == "Expense" || ViewBag.DocTypeValue == "Supplier credit" || ViewBag.DocTypeValue == "GRR")
                    {
                        <div id="transaction-method" class="d-none"></div>
                    }
                </div>
            </div>
        </div>

        <div class="d-none" id="BDPODiv">
            <div class="form-check form-switch">
                 <input class="form-check-input" type="checkbox" id="showBDPOItem">
            </div>
            <div class="d-flex justify-content-end">
                <div id="paginationexternalDiv" style="width: 6%;">
                    <select id="paginationexternal" class="form-control" onchange="paginationexternalFunc()">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                    </select>
                </div>
            </div>
            
            <div id="BDPO-table" class=d"-none"></div>
        </div>
        <input id="adv-trxn-id" type="text" value="0" hidden />
        <div class="row">
            <div class="col-md-12 col-12">
                <div class="mb-3">
                    @if (ViewBag.DocTypeValue == "Purchase Payment")
                    {
                        <div class="row" id="adv-trxn-div">
                            <div class="col-md-12 col-12">
                                <div id="adv_details" class="d-none d-flex justify-content-start" style=" border-bottom: 1px solid #e0e0d1; border-top: 1px solid #e0e0d1;">
                                    <div style="margin-bottom: 10px;">
                                        <div style="margin-top: 26px;margin-left: 10px;">
                                            <p>Every</p>
                                        </div>
                                    </div>
                                    <div id="date-duration" class="d-flex">

                                        <div style="margin-top: 21px; ">
                                            <div class="mb-3 ms-2">
                                                <input class="form-control" id="every_adv" autocomplete="off" style="width: 50px; height: 30px;" value="1" />
                                            </div>
                                        </div>
                                        <div style="margin-top: 26px;">
                                            <p class="ms-2">month's on day</p>
                                        </div>
                                        <div class="d-flex" style="margin-top: 21px; margin-bottom: 26px; ">
                                            @Html.DropDownList("Integer", intergerList as List<SelectListItem>, new { id = "adv_Integer", @class = "form-select form-select-sm ms-2" })
                                        </div>
                                    </div>
                                    <div class="d-flex">
                                        <div style="width: 150px; margin-left: 10px;">
                                            <label>Start date</label>
                                            <input class="form-control custom-height" id="adv-start-date" autocomplete="off" />
                                        </div>
                                        <div style="margin-top: 26px;margin-left: 10px;">
                                            after
                                        </div>
                                        <div style="margin-top: 21px; margin-left: 10px;">
                                            <div class="mb-3">
                                                <input class="form-control" id="adv_occurences" autocomplete="off" style="width: 50px; height: 30px;" value="1" />
                                            </div>
                                        </div>
                                        <div style="margin-top: 26px;margin-left: 10px;">
                                            occurences
                                        </div>
                                        <div class="mb-2" style="  margin-left: 10px;">
                                            <label class="form-label mb-0">
                                                Expense Head<span style="color: red;">*</span>
                                            </label>
                                            <select id="expenseHead" class="form-control">
                                                <option value="">Please select</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>

                    }
                </div>
            </div>
        </div>

        
        @if (ViewBag.DocTypeValue != "Opening Stock")
        {
            <div class="row" style="margin-bottom: 10px;">
                <div class="col-lg-10 col-10"></div>
                <div class="col-lg-2 col-2">
                    <label class="form-label">
                        Amounts are
                    </label>
                    @Html.DropDownList("AmountsAre", ViewBag.AmountsAre as List<SelectListItem>, new { id = "AmountsAre", @class = "form-select form-select-sm" })

                    @* <div class="row">
                <div class="col-lg-4" style="padding: 0px; margin-top: 8px; text-align: right;">
                <label class="form-label">
                Amounts are
                </label>
                </div>
                <div class="col-lg-8" style="max-width: 100%!important">
                <label class="form-label">
                Amounts are
                </label>
                @Html.DropDownList("AmountsAre", ViewBag.AmountsAre as List<SelectListItem>, new { id = "AmountsAre", @class = "form-select form-select-sm", onchange = "taxDropdownChange(this.value)" })
                </div>
                </div> *@
                </div>
            </div>
            <div class="row mt-1">
                <div class="col-12 col-md-12">
                    <h3 id="catgeoryDetails">
                        <span id="toggle-category-details" class="collapse-icon">&#x25B6;</span> Category Details
                    </h3>
                    <div id="category-details-content" style="display: none;">
                        <div id="tabulatorCategoryGrid"></div>
                        <span class="text-danger" id="category-table-validation"></span>
                    </div>
                </div>
            </div>
            <div class="row mt-5 d-none" id="parent-payment-table">
                <div class="col-12 col-md-12">
                    <h4 id="PaymentsDetails" class="mb-5">
                        Outstanding Transactions
                    </h4>
                    <div id="payment-list-content">
                        <div id="tabulatorPaymentGrid"></div>
                        <span class="text-danger" id="payment-table-validation"></span>
                    </div>
                </div>
            </div>
            <div style="margin-top: 50px;margin-bottom:30px;" id="add-clear-row-main">
                @if (ViewBag.IsCopy != 2)
                {
                    <button id="add-row" class="btn" style="border: 1px solid;margin-right: 30px;">Add Row</button>
                    <button id="clear" class="btn" style="border: 1px solid;margin-right: 30px;">Clear All Rows</button>
                }
                else
                {
                    <button id="add-row" class="btn d-none" style="border: 1px solid;margin-right: 30px;">Add Row</button>
                    <button id="clear" class="btn d-none" style="border: 1px solid;margin-right: 30px;">Clear All Rows</button>
                }
            </div>
        }



        <div class="row mt-5">
            <div class="col-12 col-md-12">
                <h3 id="ItemDetails">
                    <span id="toggle-item-details" class="collapse-icon">&#x25BC;</span> Item Details
                </h3>
                <div id="item-details-content">
                    <div id="tabulatorItemsGrid"></div>
                    <span class="text-danger" id="item-table-validation"></span>
                </div>
            </div>
            @*<div class="col-12 col-md-12">
            <h3>Item Details</h3>
            <div id="tabulatorItemsGrid"></div>
            <span class="text-danger" id="item-table-validation"></span>
            </div>*@
        </div>
        @if (ViewBag.DocTypeValue != "Opening Stock")
        {
            <div style="margin-top: 50px;margin-bottom:30px;" id="add-clear-row-second">
                @if (ViewBag.IsCopy != 2)
                {
                    <button id="add-row-second-table" class="btn" style="border: 1px solid;margin-right: 30px;">Add Row</button>
                    <button id="clear-second-table" class="btn" style="border: 1px solid;margin-right: 30px;">Clear All Rows</button>
                }
                else
                {
                    <button id="add-row-second-table" class="btn d-none" style="border: 1px solid;margin-right: 30px;">Add Row</button>
                    <button id="clear-second-table" class="btn d-none" style="border: 1px solid;margin-right: 30px;">Clear All Rows</button>
                }
            </div>
        }

        <div style="margin-top: 50px; text-align: center;" class="row">
            <div class="col-md-8 col-8">
            </div>
            <div class="col-md-4 col-4">
                <h6>Tax Amount</h6>
                <div id="seperate-tax" style="text-align: right;"></div>
                <input id="total-tax" class="d-none" />
            </div>
        </div>
        <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="offcanvasRightLabel" style="margin-top: 20px;">Manage your tags</h5>
                <button type="button" id="backToTaglist" class="btn btn-link d-none" style="border-radius: 10px;">Back</button>
                <button onclick="clearModalData()" type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body mx-2">
                <div id="tagList">
                    <div class="row">
                        <div class="col-md-6 d-flex align-items-center justify-content-center">
                            <button type="button" id="createTagBtn" class="btn btn-outline-secondary custom-btn">Create tag</button>
                        </div>
                        <div class="col-md-6 d-flex align-items-center justify-content-center">
                            <button type="button" id="crateGroupBtn" class="btn btn-outline-secondary custom-btn">Create group</button>
                        </div>
                    </div>
                    <div id="tagListTable"></div>
                </div>
                <div id="createTag" class="d-none">
                    <input type="hidden" id="TagId" value="0" />
                    <h5 style="margin-top: 10px;">Create new tag</h5>
                    <div class="mt-3">
                        <label class="account-head-name">Tag name</label>
                        <input class="form-control" id="new-tag-name" />
                    </div>

                    <div class="mt-3">
                        <label class="account-head-name">Group</label>
                        @* @Html.DropDownList("GroupList", ViewBag.GroupList as SelectList, "Select group", new { @id = "GroupList", @class = "form-control" }) *@
                        <select id="GroupList" class="form-control"></select>
                    </div>
                    <div class="my-2 d-flex justify-content-end">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas" id="cancelTag">Cancel</button>
                        <button id="tagSaveBtn" type="button" class="btn btn-success" style="margin-left: 10px;">Save</button>
                    </div>

                </div>
                <div id="createGroup" class="d-none">
                    <input type="hidden" id="GroupId" value="0" />
                    <h5 style="margin-top: 10px;">Create new group</h5>
                    <div class="mt-3">
                        <label class="account-head-name">Group name</label>
                        <input class="form-control" id="new-group-name" />
                    </div>

                    <div class="my-2 d-flex justify-content-end">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="offcanvas" id="cancelTag">Cancel</button>
                        <button id="groupSaveBtn" type="button" class="btn btn-success" style="margin-left: 10px;">Save</button>
                    </div>

                </div>
            </div>
            @* <div class="modal-footer my-2">
            <button type="button" class="btn btn-outline-danger" data-bs-dismiss="offcanvas" id="cancelAgent">Cancel</button>
            <button id="agencySaveBtn" type="button" class="btn btn-success" style="margin-left: 10px;">Save</button>
            </div> *@
        </div>
    </div>


</div>



    <div class="d-flex float-lg-end mt-5 me-3" id="totalCalculation">
        <div class="me-4">
            <p style="font-weight: bold; font-size: 16px; text-align: right;">Subtotal</p>
            <p style="font-weight: bold; font-size: 16px; text-align: right;">TDS</p>
            <p style="font-weight: bold; font-size: 16px; text-align: right;">Total(<span class="rate">BDT</span>)</p>
            <p style="font-weight: bold; font-size: 16px; text-align: right; display: none !important;" class="totalspan">Total<span>(BDT)</span></p>
        </div>
        <br />
        <div>
            <p id="subtotal" style="font-weight: bold; font-size: 16px;">0.00</p>
            <p id="tds" style="font-weight: bold; font-size: 16px;">0.00</p>
            <p class="mt-3 text-end" id="total" style="font-weight: bold; font-size: 16px;">0.00</p>
            <p class="totalspan" id="totalInBDT" style="display: none !important; float: right;">0.00</p>
        </div>
        <br />
    </div>

    <div class="row">
        <div class="col-md-4 col-12">
            <div class="mb-2">
                <label class="form-label fw-bold">
                    Memo
                </label>

                <textarea class="form-control text-box multi-line" id="memo" name="PurchaseDesc" rows="4"></textarea>
            </div>
        </div>
    </div>
    <div class="offcanvas-class">
        <div class="col-12 col-md-12">
            <div class="row account_offcanvas">

                <div class="offcanvas offcanvas-end overflow-scroll" style="width: 400px" tabindex="-1" id="offcanvasRightRate" aria-labelledby="offcanvasRightLabelRate">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="offcanvasRightLabelRate">To Link Purchase Order</h5>
                        <button @*onclick="clearModalData()"*@ type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <div id="invoice-table"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-3" id="term-div">
        <div class="col-md-10">
            <div style="width: 50%;">
                <label>Terms & Condition</label>
                <select id="TermsId" class="form-control">
                        <option value="">Select..</option>
                </select>
            </div>
            
            <div id="termTable" class="mt-2"></div>
            <div class="btn-group  float-end">
                <button type="button" class="btn btn-primary btn-sm" id="add-term">Add</button>
                <button type="button" class="btn btn-warning btn-sm" id="del-term">Clear</button>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-4 col-12 mt-4 pt-1">
            @*<input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf" multiple>*@
            <div class="mb-3">
                <label class="form-label">
                    <i class="fas fa-link"></i> <span>Attachments Maximum size: 20MB</span>
                </label>
                <div id="file-drop-area">
                    <p>Drag and drop files here or click to select files.</p>
                    <ul id="selected-files-list"></ul> <!-- List to display selected file names -->
                </div>
                @* <input id="message-statement" type="text" class="wide-dropdown2" placeholder="If you send statements to customers, this will show up as the description for this invoice" /> *@
                <input id="image-uploadify" type="file" accept=".xlsx,.xls,image/*,.doc,audio/*,.docx,video/*,.ppt,.pptx,.txt,.pdf" multiple>
            </div>
        </div>
        <div class="footerButton">
            <button class="btn btn-outline-dark fw-bolder btn-sm mt-4 d-none" id="view-image-or-pdf">Full view <i class="bi bi-eye-fill"></i></button>
            <button class="btn btn-outline-dark fw-bolder btn-sm mt-4 bg-danger text-white d-none" id="remove-image-or-pdf">X</button>
        </div>
        <div class="col-lg-12">
            <iframe id="pdf-iframe" class="d-none" style="width: 66%; height: 500px;"></iframe>
        </div>
    <div class="col-lg-12 row" id="file-container">
        <!-- Placeholder for dynamically added iframes and buttons -->
    </div>

        <div class="bottom-bar">
            <div class="container-fluid">
                <div class="row px-4">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-outline-secondary text-white btn-sm rounded-pill " onclick="window.location.href = '@Url.Action("billlistqb", "Accounts")';">Cancel</button>
                    </div>
                    <div class="col-md-6 d-flex justify-content-center">
                        @if (ViewBag.ActionType == "Edit" && ViewBag.DocTypeValue != "Opening Stock")
                        {
                            <ul class="list-group list-group-horizontal">
                                <li class="list-group-item" id="printButton">Print</li>
                            </ul>
                        }

                        else if (ViewBag.ActionType == "Create")
                        {
                            <ul class="list-group list-group-horizontal">
                                <li class="list-group-item" id="printButton" disabled>Print</li>
                                <li class="list-group-item" id="makeRecurringDiv"> <a href="#" class="text-white" onclick="makeRecurring();"><span>Make recurring</span></a></li>

                           </ul>
                        }
                        else
                        {
                            <ul class="list-group list-group-horizontal">
                                <li class="list-group-item" id="printButton">Print</li>
                            </ul>
                        }

                    </div>
                    <div class="col-md-3 d-flex justify-content-end">
                        @if (ViewBag.ActionType == "Edit" && ViewBag.DocTypeValue != "Opening Stock")
                        {                             
                            <button id="BtnSave" class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" data-purchase-Id="@Model">Update</button>
                           
                            <div class="btn-group">
                                <button id="BtnSaveAndClose" class="btn btn-success btn-sm" type="button" data-purchase-Id="@Model">
                                    Update and close
                                </button>
                                <button type="button" id="ul-id-for-toggle" class="btn btn-success btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="visually-hidden">Toggle Dropdown</span>
                                </button>
                                <ul class="dropdown-menu" id="ul-id-for-expenses">
                                    <li><a class="dropdown-item" href="/Accounts/ImportTransaction">Time activity</a></li>
                                </ul>
                            </div>
                        }
                        else if (ViewBag.ActionType == "Create")
                        {
                                <button id="BtnSave" class="btn btn-outline-secondary text-white btn-sm rounded-pill me-1" data-purchase-Id="@Model">Save</button>
                            <div class="btn-group">
                                <button id="BtnSaveAndClose" class="btn btn-sm btn-success" type="button" data-purchase-Id="@Model">
                                    Save and close
                                </button>
                                <button type="button" class="btn btn-success btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="visually-hidden">Toggle Dropdown</span>
                                </button>
                             <ul class="dropdown-menu" id="ul-id-for-expenses">
                                    <li><a class="dropdown-item" href="/Accounts/ImportTransaction">Time activity</a></li>
                                </ul>
                            </div>
                        }
                        else
                        {
                                <button id="BtnSave" class="btn btn-sm rounded-pill btn-success" data-purchase-Id="@Model">Update</button>

                            <div class="btn-group">

                                <button id="BtnSaveAndClose" class="btn btn-sm btn-success" type="button" data-purchase-Id="@Model">
                                    Update and close
                                </button>
                                    <button type="button" class="btn btn-success btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="visually-hidden">Toggle Dropdown</span>
                                </button>
                               <ul class="dropdown-menu" id="ul-id-for-expenses">
                                    <li><a class="dropdown-item" href="/Accounts/ImportTransaction">Time activity</a></li>
                                </ul>
                            </div>
                        }
                    </div>

                </div>
            </div>
            <input type="button" id="unknown" class="btn  btn-md" value="" />
            <div class="dropdown" id="unknown1" style="display: inline-block;">
            </div>
        </div>
    </div>

<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this file?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>

    @section Scripts {

        <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsPurchaseReport.js" asp-append-version="true"></script>


        <script type="text/javascript">

            var table1;

             var IsCopy = '@ViewBag.IsCopy';
             if (IsCopy == 2)
             {
                // If ViewBag.IsCopy is 2, hide the buttons
                document.getElementById("BtnSave").style.display = "none";
                document.getElementById("BtnSaveAndClose").style.display = "none";
                document.getElementById("ul-id-for-toggle").style.display = "none";
             
             }

            var today = new Date();
            var day = today.getDate();
            var month = today.toLocaleString('default', { month: 'short' });
            var year = today.getFullYear();
            var formattedDate = day + '-' + month + '-' + year;
            //$('#purchase-order-date').val(formattedDate);

            var selectedSupplierId = '@ViewBag.SupplierId';
            $(document).ready(function () {
                $('#Supplier option').each(function () {
                    if ($(this).val() === selectedSupplierId) {
                        $(this).prop('selected', true);
                    }
                });


                if ('@ViewBag.DocTypeValue' == "Supplier PO")
                {
                    $("#term-div").removeClass('d-none');
                }
                else
                {
                    $("#term-div").addClass('d-none');
                }
                if ('@ViewBag.DocTypeValue' == "GRR")
                {
                    $("#BDPODiv").removeClass('d-none');
                }
                else
                {
                $("#BDPODiv").addClass('d-none');
                }
            });

        function deleteFile(filename) {
            $.ajax({
                url: '@Url.Action("DeleteFileName", "Purchase")',
                type: 'Post',
                data: { fileName: filename },
                success: function (result) {

                },
                error: function (error) {
                    console.log('Error fetching group list:', error);
                }
            });
        }

        // Function to determine file type based on extension
        function getFileType(fileName) {
            var extension = fileName.split('.').pop().toLowerCase();
            if (extension === 'pdf') {
                return 'pdf';
            } else if (extension === 'xls' || extension === 'xlsx') {
                return 'excel';
            } else if (extension === 'jpg' || extension === 'jpeg' || extension === 'png' || extension === 'gif') {
                return 'image';
            } else {
                return 'unknown';
            }
        }

            function GetDueDate() {
                var startDateValue = $("#start-date").val();
                var id = $("#terms").val();

                $.ajax({
                    url: '@Url.Action("GetDueDate", "Sales")',
                    method: "GET",
                    data: {
                        termsId: id
                    },
                    success: function (response) {
                        if (response.data !== null && response.success != "0") {
                            const billDate = new Date(startDateValue);

                            const dueDate = new Date(billDate.getTime() + (response.data * 24 * 60 * 60 * 1000));

                            const day = dueDate.getDate().toString().padStart(2, '0');
                            const month = dueDate.toLocaleString('default', { month: 'short' });
                            const year = dueDate.getFullYear();

                            const formattedDueDate = `${day}-${month}-${year}`;
                            $('#end-date').val(formattedDueDate);
                        }
                    },
                    error: function (error) {
                        // Handle the error
                        console.error(error);
                    }
                });

            }
            $("#end-date").on("change", function () {
                    var endDateValue = $(this).val();

                    var startDateValue = $("#start-date").val();

                    var id = $("#terms").val();

                    if (new Date(endDateValue) < new Date(startDateValue)) {
                        $.ajax({
                            url: '@Url.Action("GetDueDate", "Sales")',
                            method: "GET",
                            data: {
                                termsId: id
                            },
                            success: function (response) {
                                if (response.data !== null) {
                                    const billDate = new Date(startDateValue);
                                    const dueDate = new Date(billDate.getTime() + (response.data * 24 * 60 * 60 * 1000));

                                    const day = dueDate.getDate().toString().padStart(2, '0');
                                    const month = dueDate.toLocaleString('default', { month: 'short' });
                                    const year = dueDate.getFullYear();

                                    const formattedDueDate = `${day}-${month}-${year}`;
                                    $('#end-date').val(formattedDueDate);
                                }
                            },
                            error: function (error) {
                                // Handle the error
                                console.error(error);
                            }
                        });
                    }

                });

            function updateSelectedFilesList(files) {
                var filesList = $('#selected-files-list');
                filesList.empty();

                if (files.length > 0) {
                    for (var i = 0; i < files.length; i++) {
                        var listItem = $('<li>').text(files[i].name);
                        filesList.append(listItem);
                    }

                    $('#file-drop-area p').text(''); // Clear the original message
                } else {
                    $('#file-drop-area p').text('Drag and drop files here or click to select files.');
                }
            }

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetExpenseHead", "Purchase")',
            datatype: "Json",
            success: function (data) {
                $.each(data, function (index, value) {
                    $('#expenseHead').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetTermsList", "Purchase")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    $('#TermsId').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                });
            }
        });

            $('#file-drop-area').on('click', function (e) {
                e.preventDefault();
                $('#image-uploadify').click();
            });
            $('#image-uploadify').on('change', function () {
                var files = $(this)[0].files;

                updateSelectedFilesList(files);

                for (var i = 0; i < files.length; i++) {
                    var file = files[i];

                    if (file.size > 20 * 1024 * 1024) {
                        alert('File "' + file.name + '" exceeds the maximum allowed size of 20MB.');
                        $(this).val('');
                        updateSelectedFilesList([]);
                        return;
                    }

                }
            });
            /*======Purchase Payment Transaction method table functionalities starts===== */
            var TransactionMethodTable;
            if ('@ViewBag.DocTypeValue' == "Purchase Payment" || '@ViewBag.DocTypeValue' == "Expense" || '@ViewBag.DocTypeValue' == "Cheque" || '@ViewBag.DocTypeValue' == "Supplier credit" || '@ViewBag.DocTypeValue' == "GRR" ) {
                //var selectPaymentMethod = @Html.Raw(Json.Serialize(ViewBag.PaymentMethod));
                var selectedCategory = @Html.Raw(Json.Serialize(ViewBag.CategoryList));

                //console.log("ViewBag.PurchaseId",'@ViewBag.PurchaseId');

                //console.log("selectedCategory,selectedCategory", selectedCategory);
                var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                var initData = [
                    {
                        "Id": "0",
                        "ComId": ComId,
                        "PurchaseId": '@ViewBag.PurchaseId',
                        "Reference No": "",
                        "Deposit to": "",
                        "Deposit Id": "",
                        "Amount": "0",
                    }
                ];
                var TransactionMethodTableColumns = [
                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
                    { title: "ComId", field: "ComId", movable: false, headerSort: false, visible: false },

                    {
                        title: "Payment by",
                        field: "DepositTo",
                        hozAlign: "center",
                        sorter: "number",
                        editor: "select",
                        editorParams: {
                            values: selectedCategory.map(option => option.Text),
                        },
                        cellEdited: function (cell) {
                            // Update the hidden column ("HiddenValue") with the selected value
                            var selectedText = cell.getValue();
                            var selectedValue = selectedCategory.find(option => option.Text === selectedText);
                            if (selectedValue) {
                                cell.getRow().update({ AccountHeadId: selectedValue.Value });

                            }
                        },
                    },
                    {
                        title: "Payment Id",
                        field: "AccountHeadId",
                        visible: false,
                        editor: "input",
                    },

                    { title: "Reference No", field: "PaymentCardNo", editor: "input" },

                    {
                        title: "Amount", field: "Amount", editor: "input", headerHozAlign: "right",
                        hozAlign: "right",
                    },
                ];

                var deleteColumn = {
                    title: "",
                    field: "Delete",
                    movable: false,
                    formatter: function (cell, formatterParams) {
                        return "<i class='fas fa-trash-alt delete-icon'></i>";
                    },
                    width: 30,
                    headerSort: false,
                    cellClick: function (e, cell) {
                        var rowData = cell.getRow().getData();
                        var row = cell.getRow();
                        deleteRow(row);
                    }
                };

                TransactionMethodTableColumns.push(deleteColumn);

                TransactionMethodTable = new Tabulator("#transaction-method", {
                    layout: "fitColumns",
                    addRowPos: "bottom",
                    columns: TransactionMethodTableColumns,
                    //data: initData,
                });


                document.getElementById("add-obj").addEventListener("click", function () {
                    TransactionMethodTable.addRow({});

                    var data = TransactionMethodTable.getData();

                    var sumOfAmounts = data.reduce(function (total, row) {
                        return total + parseFloat(row.Amount || 0);
                    }, 0);


                    var totalValue = $('#total').text().replace('$', '').replace(',', '');

                    var lastIndex = data.length - 1;

                    data[lastIndex].PurchaseId = '@ViewBag.PurchaseId';
                    data[lastIndex].DepositTo = selectedCategory.length > 0 ? selectedCategory[0].Text : '';
                    data[lastIndex].AccountHeadId = selectedCategory.length > 0 ? selectedCategory[0].Value : '';

                    data[lastIndex].Amount = parseFloat(totalValue) - sumOfAmounts;

                    TransactionMethodTable.clearData();

                    TransactionMethodTable.setData(data);
                });


                document.getElementById("del-obj").addEventListener("click", function () {
                    TransactionMethodTable.clearData();
                });


                function deleteRow(row) {
                    // Show a confirmation dialog and delete the row if confirmed
                    if (confirm("Are you sure you want to delete this row?")) {
                        var rowData = [row.getData()]; // Store the data of the deleted row

                        // Delete the row from the tableCategory
                        TransactionMethodTable.deleteRow(row);
                    }
                }


            }
            /*======Transaction method table functionalities ends======= */

            document.getElementById("printButton").addEventListener("click", function () {
                window.open('@Url.Action("PurchaseReport", "Purchase")?PurchaseId=@ViewBag.PurchaseId', '_blank');
            });
            /* =====Clear table on supplier chose starts==== */
            function CommonInitToZero() {
                var data = tableItems.getData();
                var currencyRate = $("#CurrencyRate").val();
                data = data.map(function (row) {
                    const defaultPrice = row.DefaultPrice / currencyRate;
                    row.Rate = defaultPrice.toFixed(4);
                    if (row.DefaultPrice == undefined) {
                        row.Rate = 0;
                    }
                    return row;
                });

                tableItems.setData(data);

                var initvalue = 0
                document.getElementById("total").textContent = initvalue.toFixed(4);
                document.getElementById("subtotal").textContent = initvalue.toFixed(4);
                document.getElementById("totalInBDT").textContent = initvalue.toFixed(4);

            }
        

            function populateItemsTable()
            {
                var supplierid = $("#Supplier").val();
                var masterpoid = $("#MasterPOId").val();
                var PurchaseId = '@ViewBag.PurchaseId'; 
            if (supplierid != "" && masterpoid != "") {
                $.ajax({
                    url: '@Url.Action("GetMasterPOConsumption", "BuyerOrder")' + '?SupplierId=' + supplierid + '&MasterId=' + masterpoid + '&PurchaseId=' + PurchaseId,
                    success: function (response) {
                        if(response.success === '1') {
                            console.log("see currency", response.data);
                            tableItems.setData(response.data);
                        }
                        
                    }
                });
                }
            }
            $("#MasterPOId").on("select2:select", function () {
                populateItemsTable();
            });
            // abcdefgh
            if ('@ViewBag.ActionType' === "Edit" || '@ViewBag.ActionType' === "Create") {
                $("#Supplier").on("select2:select", function () {
                    var selectedOption = $(this).find("option:selected");
                    var currencyId = selectedOption.data('currency-id');
                    console.log('Selected Currency ID:', currencyId);

                    populateItemsTable();

                    $.ajax({
                        url: '@Url.Action("GetCurrencyRateForExpense", "Admin")' + '?CurrencyId=' + currencyId + '&purchaseDate=' + $("#purchase-order-date").val(),
                        success: function (data) {
                            if (data.length == 0) {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var previousRate = $("#CurrencyRate").val();
                                $("#CurrencyRate").val(1);
                                CommonInitToZero();
                            } else
                                if (data[0].CurrencyShortName == "BDT") {
                                    $("#yourRateParent").css("display", "none !important");
                                    $(".totalspan").css("display", "none !important");
                                     var flag = '<i class="flag-icon ' + data[0].FlagClass + '"></i>';
                                     $(".flag").html(flag);
                                     $(".rate").text(data[0].CurrencyShortName);
                                    var previousRate = $("#CurrencyRate").val();
                                     $("#MultiiCurrencyId").val(data[0].CurrencyId);
                                    $("#CurrencyRate").val(data[0].CurrencyRate);
                                     if ('@ViewBag.ActionType' === "Create") {
                                        if (previousRate != data[0].CurrencyRate) {
                                            CommonInitToZero();
                                        }
                                    }
                                    else {
                                        CommonInitToZero();
                                    }

                                    //CommonInitToZero();
                                }
                                else {
                                    $("#yourRateParent").css("display", "");
                                    $(".totalspan").css("display", "");
                                    //$(".rate").text(data[0].CurrencyShortName);
                                    var flag = '<i class="flag-icon ' + data[0].FlagClass + '"></i>';
                                    $(".flag").html(flag);
                                    $(".rate").text(data[0].CurrencyShortName);
                                    var previousRate = $("#CurrencyRate").val();
                                    $("#CurrencyRate").val(data[0].CurrencyRate);
                                    $("#MultiiCurrencyId").val(data[0].CurrencyId);
                                    if ('@ViewBag.ActionType' === "Create") {
                                        if (previousRate != data[0].CurrencyRate) {
                                            CommonInitToZero();
                                        }
                                    }
                                    else {
                                        CommonInitToZero();
                                    }
                                }
                            console.log("see currency", data);

                        }
                    });



                    $("#dropdownMenuLink").empty();
                    // var categoryTablerows = tableCategory.getRows();
                    // var itemTablerows = tableItems.getRows();
                    // categoryTablerows.forEach(function (row, index) {
                    //         row.delete();
                    // });
                    // itemTablerows.forEach(function (row, index) {
                    //         row.delete();
                    // });
                });
            }

            if ('@ViewBag.ActionType' == "Edit") {
                $("#Supplier").on("change", function () {
                    var selectedOption = $(this).find("option:selected");
                    var currencyId = selectedOption.data('currency-id');
                    console.log('Selected Currency ID:', currencyId);

                    $.ajax({
                        url: '@Url.Action("GetCurrencyRateForExpense", "Admin")' + '?CurrencyId=' + currencyId + '&purchaseDate=' + $("#purchase-order-date").val(),
                        success: function (data) {
                            if (data[0].CurrencyShortName == "BDT") {
                                $("#yourRateParent").css("display", "none !important");
                                $(".totalspan").css("display", "none !important");
                                var flag = '<i class="flag-icon ' + data[0].FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data[0].CurrencyShortName);
                                //$("#CurrencyRate").val(data[0].CurrencyRate);
                                $("#MultiiCurrencyId").val(data[0].CurrencyId);

                            }
                            else {
                                $("#yourRateParent").css("display", "");
                                $(".totalspan").css("display", "");
                                //$(".rate").text(data[0].CurrencyShortName);
                                var flag = '<i class="flag-icon ' + data[0].FlagClass + '"></i>';
                                $(".flag").html(flag);
                                $(".rate").text(data[0].CurrencyShortName);
                                // $("#CurrencyRate").val(data[0].CurrencyRate);
                                $("#MultiiCurrencyId").val(data[0].CurrencyId);
                                var totalText = document.getElementById("total").textContent;
                                var totalAmount = parseFloat(totalText.replace(",", ""));
                                var currencyRate = $("#CurrencyRate").val();
                                const amountTotalInBDT = document.getElementById("totalInBDT");
                                amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);

                            }
                            console.log("see currency", data);

                        }
                    });



                    $("#dropdownMenuLink").empty();
                    // var categoryTablerows = tableCategory.getRows();
                    // var itemTablerows = tableItems.getRows();
                    // categoryTablerows.forEach(function (row, index) {
                    //         row.delete();
                    // });
                    // itemTablerows.forEach(function (row, index) {
                    //         row.delete();
                    // });
                });
            }



            /* =====Clear table on supplier chose ends==== */



            //custom formatter function for attachment starts===============================
            var showoffcanvas = document.getElementById('showoffcanvas');
            showoffcanvas.addEventListener('click', function () {
                var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
                offcanvas.show();
            });
            function formatDate(dateStr) {
                const date = new Date(dateStr);
                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                const day = date.getDate();
                const month = monthNames[date.getMonth()];
                const year = date.getFullYear();
                return `${day} ${month} ${year}`;
            }
            var countOfPO;
            function generateUniqueId() {
                const length = 8; // Length of the unique ID
                const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                let uniqueId = '';

                for (let i = 0; i < length; i++) {
                    const randomIndex = Math.floor(Math.random() * characters.length);
                    uniqueId += characters.charAt(randomIndex);
                }

                return uniqueId;
            }
            function customAttachmentFormatter(cell, formatterParams, onRendered) {
                var data = cell.getData();
                var dataArrayItem = tableItems.getData();
                var dataArrayCategory = tableCategory.getData();
                countOfPO = dataArrayItem.length + dataArrayCategory.length;
                ////console.log("cell data dekhi aaaaaaaaaaaaaaaaaaaa", data);
                ////console.log("Number of data objects:", countOfPO);

                var formattedDate = formatDate(data.PurchaseDate);

                // Generate the URL using the PurchaseId and DocType
                var purchaseId = data.PurchaseId;
                var docType = data.DocType;
                var purchaseCode = data.PurchaseCode;
                var url = '@Url.Action("AddBillByType", "Accounts")?Type=' + encodeURIComponent(docType) + '&PurchaseId=' + purchaseId;
                var UniqueColumData = data.UniqueColumData;
                ////console.log("uniqueColumn", UniqueColumData);
                var attachmentIcon = '';

                // Check if PurchaseItemsId is not null, and only then include the attachment icon
                if (data.PurchaseItemsId !== null && data.PurchaseItemsCategoryId !== null) {
                    attachmentIcon = '<i data-bs-placement="left" title="Tooltip on left" data-bs-toggle="dropdown" aria-expanded="false" id="attachment-id" class="bi bi-paperclip"></i>';
                }

                // Use the formatted date to set the Date value
                return '<div class="dropdown">' +
                    attachmentIcon +
                    '<ul class="dropdown-menu" aria-labelledby="attachment-id" style="width: 320%;">' +
                    '<li>' +
                    '<div class="row px-2" style="width: 550px;">' +
                    '<div class="col-lg-3">' +
                    '<strong>Type</strong><br>' +  // Make "Type" text bold
                    '<a href="' + url + '"><span>' + docType + '</span></a><br>' +
                    '<span>' + purchaseCode + '</span>' +
                    '</div>' +
                    '<div class="col-lg-3">' +
                    "<strong class='ms-2'>Date</strong><br>" +  // Make "Date" text bold
                    "<span class='ms-2'>" + formattedDate + '</span>' +  // Use the formatted date
                    '</div>' +
                    '<div class="col-lg-3">' +
                    '<strong>Amount</strong><br>' +  // Make "Amount" text bold
                    '<span>' + data.NetAmount + '</span>' +
                    '</div>' +
                    '<div class="col-lg-3">' +
                    '<span><button id="remove-button" onclick="handleDeleteRow(\'' + data.UniqueColumData + '\')" class="btn my-3" style="border: 1px solid black;border-radius: 23px;">Remove</button></span>' +
                    '</div>' +
                    '</div>' +
                    '</li>' +
                    '</ul>' +
                    '</div>';

            }




            function handleDeleteRow(uniqueData) {
                if (confirm("Are you sure you want to delete this row?")) {
                    var itemTableData = tableItems.getData();
                    var categoryTableData = tableCategory.getData();
                    var CombinedTableData = itemTableData.concat(categoryTableData);

                    const rowIndex = CombinedTableData.findIndex(row => row.UniqueColumData === uniqueData);
                    if (rowIndex !== -1) {
                        // Remove the row from the CombinedTableData array
                        var deletedRow = CombinedTableData.splice(rowIndex, 1)[0];

                        // Update your Tabulator tables with the new data
                        tableItems.setData(CombinedTableData.filter(row => row.PurchaseItemsId !== undefined));
                        tableCategory.setData(CombinedTableData.filter(row => row.PurchaseItemsCategoryId !== undefined));

                        // Create an array to store the unique PurchaseId and Description data for table2
                        var table2Data = table2.getData();

                        // Check if an entry with the same PurchaseId already exists in table2Data
                        var existingEntryIndex = table2Data.findIndex(entry => entry.PurchaseId === deletedRow.PurchaseId);

                        if (existingEntryIndex === -1) {
                            // Entry with the same PurchaseId doesn't exist, so create a new one
                            var salesDate = new Date(deletedRow.PurchaseDate);
                            var formattedSalesDate = salesDate.getDate() + '-' +
                                salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                salesDate.getFullYear();

                            var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                                'Total:  ' + 'TK' + deletedRow.NetAmount + '<br/>' +
                                'Balance:  ' + 'TK' + deletedRow.NetAmount + '<br/>' +
                                formattedSalesDate + '<br>' +
                                '<div style="display: flex; justify-content: space-between;">' +
                                '<a href="#" onclick="handleAddClick(' + deletedRow.PurchaseId + ')"><p style="font-weight: bold">Add</p></a>' +
                                '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                '</div>';

                            table2Data.push({
                                PurchaseId: deletedRow.PurchaseId,
                                Description: description
                            });
                        } else {
                            // Entry with the same PurchaseId already exists, so update its Description
                            var salesDate = new Date(deletedRow.PurchaseDate);
                            var formattedSalesDate = salesDate.getDate() + '-' +
                                salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                salesDate.getFullYear();

                            var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                                'Total:  ' + 'TK' + deletedRow.NetAmount + '<br/>' +
                                'Balance:  ' + 'TK' + deletedRow.NetAmount + '<br/>' +
                                formattedSalesDate + '<br>' +
                                '<div style="display: flex; justify-content: space-between;">' +
                                '<a href="#" onclick="handleAddClick(' + deletedRow.PurchaseId + ')"><p style="font-weight: bold">Add</p></a>' +
                                '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                '</div>';

                            table2Data[existingEntryIndex].Description = description;
                        }

                        // Update the off-canvas (table2) with the combined data
                        table2.setData(table2Data);
                    }
                }
            }




            function handleDeleteRowAndDropDown(PurchaseId) {
                if (confirm("Are you sure you want to delete this row?")) {
                    // Remove the dropdown content elements associated with the PurchaseId
                    $(`#${PurchaseId}`).remove();
                    var itemTableData = tableItems.getData();
                    var categoryTableData = tableCategory.getData();
                    var CombinedTableData = itemTableData.concat(categoryTableData);

                    // Create a Set to store unique PurchaseIds
                    const uniquePurchaseIds = new Set();

                    // Filter and populate the tableData array with unique PurchaseIds
                    var tableData = CombinedTableData
                        .filter(item => {
                            if (item.PurchaseId && !uniquePurchaseIds.has(item.PurchaseId)) {
                                uniquePurchaseIds.add(item.PurchaseId);
                                return true;
                            }
                            return false;
                        })
                        .map(function (item) {
                            var salesDate = new Date(item.PurchaseDate);
                            var formattedSalesDate = salesDate.getDate() + '-' +
                                salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                salesDate.getFullYear();

                            var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                                'Total:  ' + 'TK' + item.NetAmount + '<br/>' +
                                'Balanace:  ' + 'TK' + item.NetAmount + '<br/>' +
                                formattedSalesDate + '<br>' +
                                '<div style="display: flex; justify-content: space-between;">' +
                                '<a href="#" onclick="handleAddClick(' + item.PurchaseId + ')"><p style="font-weight: bold">Add</p></a>' +
                                '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                '</div>';

                            return {
                                PurchaseId: item.PurchaseId,
                                Description: description
                            };
                        });

                    // Find all indices in CombinedTableData where PurchaseId matches
                    const indicesToDelete = [];
                    CombinedTableData.forEach((item, index) => {
                        if (item.PurchaseId === PurchaseId) {
                            indicesToDelete.push(index);
                        }
                    });

                    // Remove rows with matching PurchaseId from CombinedTableData
                    indicesToDelete.reverse().forEach(index => {
                        CombinedTableData.splice(index, 1);
                    });

                    // Update your Tabulator tables with the new data
                    tableItems.setData(CombinedTableData.filter(row => row.PurchaseItemsId !== undefined));
                    tableCategory.setData(CombinedTableData.filter(row => row.PurchaseItemsCategoryId !== undefined));

                    // Populate the off-canvas (table2) with the data
                    table2.setData(tableData);
                }
            }










            //function handleDeleteRow(uniqueData) {
            //    if (confirm("Are you sure you want to delete this row?")) {
            //        var itemTableData = tableItems.getData();
            //        var categoryTableData = tableCategory.getData();
            //        var CombinedTableData = itemTableData.concat(categoryTableData);
            //        //console.log("CombinedTableData", CombinedTableData);

            //        const rowIndex = CombinedTableData.findIndex(row => row.UniqueColumData === uniqueData);

            //        if (rowIndex !== -1) {
            //            // Remove the row from the CombinedTableData array
            //            CombinedTableData.splice(rowIndex, 1);

            //            // Update your Tabulator tables with the new data
            //            tableItems.setData(CombinedTableData.filter(row => row.PurchaseItemsId !== undefined));
            //            tableCategory.setData(CombinedTableData.filter(row => row.PurchaseItemsCategoryId !== undefined));

            //            // Create a Set to store unique uniqueData values
            //            const uniqueUniqueData = new Set();

            //            // Filter and populate the off-canvas data uniquely based on uniqueData
            //            var tableData = CombinedTableData
            //                .filter(item => !uniqueUniqueData.has(item.uniqueData))
            //                .map(function (item) {
            //                    uniqueUniqueData.add(item.uniqueData);

            //                    var salesDate = new Date(item.PurchaseDate);
            //                    var formattedSalesDate = salesDate.getDate() + '-' +
            //                        salesDate.toLocaleString('default', { month: 'short' }) + '-' +
            //                        salesDate.getFullYear();

            //                    var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
            //                        'Total:  ' + 'TK' + item.NetAmount + '<br/>' +
            //                        'Balanace:  ' + 'TK' + item.NetAmount + '<br/>' +
            //                        formattedSalesDate + '<br>' +
            //                        '<div style="display: flex; justify-content: space-between;">' +
            //                        '<a href="#" onclick="handleAddClick(' + item.PurchaseId + ')"><p style="font-weight: bold">Add</p></a>' +
            //                        '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
            //                        '</div>';

            //                    return {
            //                        PurchaseId: item.PurchaseId,  // Use uniqueData field
            //                        Description: description
            //                    };
            //                });

            //            // Populate the off-canvas (table2) with the data
            //            table2.setData(tableData);
            //        }
            //    }
            //}





            //document.getElementById("del-row").addEventListener("click", function () {
            //    table.deleteRow(1);
            //});


            //'<span><button id="remove-button" class="btn btn-danger">Remove</button></span>' +  '<div class="col-lg-3">' +
            //'<br>' +
            //    '</div>' +

            //custom formatter function for attachment ends=================================

            var tableItems;
            var tableCategory


            //console.log("@ViewBag.supplSupplierId:::", @ViewBag.supplSupplierId);

            //resert cc.bcc email input
            function resetForm(event) {
                event.preventDefault();
                event.stopPropagation();
                document.getElementById('cc-id').value = ''; // Clear the input value
                document.getElementById('bcc-id').value = '';
                return false;
            }

            //=====category table collapsed,expanded funcionalities starts=======
            var toKeepOpenTable;
            document.addEventListener("DOMContentLoaded", function () {
                const toggleButton = document.getElementById('toggle-category-details');
                const categoryDetailsContent = document.getElementById('category-details-content');
                const addClearRowMain = document.getElementById('add-clear-row-main');
                const addClearRowSecond = document.getElementById('add-clear-row-second');

                // Initially, keep it expanded
                categoryDetailsContent.style.display = 'block';
                toggleButton.innerHTML = '&#x25BC;';

                toggleButton.addEventListener('click', () => {
                    if (categoryDetailsContent.style.display === 'none' || categoryDetailsContent.style.display === '') {
                        categoryDetailsContent.style.display = 'block';
                        toggleButton.innerHTML = '&#x25BC;'; // Down arrow for expanded
                        addClearRowMain.style.display = 'block'; // Show the add-clear-row-main
                    } else {
                        categoryDetailsContent.style.display = 'none';
                        toggleButton.innerHTML = '&#x25B6;'; // Right arrow for collapsed
                        addClearRowMain.style.display = 'none'; // Hide the add-clear-row-main
                    }
                });

                setTimeout(() => {
                    if ('@ViewBag.ActionType' === 'Edit' || @ViewBag.CopyBill== 1) {
                        categoryDetailsContent.style.display = 'block'; // Show the categoryDetailsContent for "Edit"
                        toggleButton.innerHTML = '&#x25BC;'; // Down arrow for expanded
                        addClearRowMain.style.display = 'block'; // Show the add-clear-row-main for "Edit"
                    } else {
                        categoryDetailsContent.style.display = 'none'; // Hide the categoryDetailsContent for other actions
                        toggleButton.innerHTML = '&#x25B6;'; // Right arrow for collapsed
                        addClearRowMain.style.display = 'none'; // Hide the add-clear-row-main for other actions
                    }
                }, 3000);


                const toggleItemButton = document.getElementById('toggle-item-details');
                const itemDetailsContent = document.getElementById('item-details-content');

                // Initially, keep it expanded
                itemDetailsContent.style.display = 'block';
                toggleItemButton.innerHTML = '&#x25BC;';

                toggleItemButton.addEventListener('click', () => {
                    if (itemDetailsContent.style.display === 'none' || itemDetailsContent.style.display === '') {
                        itemDetailsContent.style.display = 'block';
                        toggleItemButton.innerHTML = '&#x25BC;'; // Down arrow for expanded
                        addClearRowSecond.style.display = 'block';
                    } else {
                        itemDetailsContent.style.display = 'none';
                        toggleItemButton.innerHTML = '&#x25B6;'; // Right arrow for collapsed
                        addClearRowSecond.style.display = 'none';
                    }
                });
            });
            //=====category table collapsed,expanded funcionalities ends=======


            //====function to get all saved purchases starts=====

            //======set start date and end datecurrent date strats======
            // Get the current date
            var currentDate = new Date();

            // Define an array of month names
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            // Create the formatted date string
            var formattedDate = currentDate.getDate() + "-" + monthNames[currentDate.getMonth()] + "-" + currentDate.getFullYear();

            // Set the formatted date as the value of the input field
             $("#start-date").val(formattedDate);
            // $("#end-date").val(formattedDate);
            $("#inventory-adjustment-date").val(formattedDate);
            //======set start date and end datecurrent date ends======
            //====function to get all saved purchases ends=====


            //====copy bill funcationalities starts=======
            function CopyBill() {
                var docTypeId = @ViewBag.DocTypeId;;
                var docTypeValue = '@ViewBag.DocTypeValue';
                var PurchaseId = @ViewBag.PurchaseId;

                //var url = '/Accounts/AddBillByType?Type=' + encodeURIComponent(docTypeValue) + '&PurchaseId=' + PurchaseId + '&CopyBill=1';
                var url = '@Url.Action("AddBillByType", "Accounts")?Type=' + encodeURIComponent(docTypeValue) + '&PurchaseId=' + PurchaseId + '&CopyBill=1';
                window.open(url, '_blank')
            }
            //====copy bill funcationalities end=======

            //====MakePayment funcationalities starts=======



            function MakePayment() {
                var docTypeValue = '@ViewBag.DocTypeValue';
                var PurchaseId = '@ViewBag.PurchaseId';
                var SupplierId = '@ViewBag.SupplierId';


                // Check if the ViewBag values are not empty or null
                if (docTypeValue && PurchaseId && SupplierId) {
                    //var url = '/Admin/AddPayment?Type=' + encodeURIComponent("Payment") + '&TransactionId=' + PurchaseId + '&SupplierId=' + SupplierId;
                    //var url = '/Admin/AddPaymentTypeQB?Type=' + encodeURIComponent("Payment") + '&PurchaseId=' + PurchaseId +'&SupplierId=' + SupplierId;
                    var url = '@Url.Action("AddPaymentTypeQB", "Admin")?Type=' + encodeURIComponent("Payment") + '&PurchaseId=' + PurchaseId + '&SupplierId=' + SupplierId;
                    //var url = '/Admin/AddPayment';
                    window.open(url, '_blank');
                } else {
                    // Handle the case where one or more ViewBag values are empty or null.
                    // You can show an alert or perform some other action.
                    //console.log('One or more values are missing.');
                }
            }

            //====MakePayment funcationalities end=======

            //get supplier starts
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetSuppliers", "Purchase")',/* "../Atrai/Purchase/GetSuppliers", */
                datatype: "Json",
                success: function (data) {

                    $.each(data, function (index, value) {
                        
                        $('#Supplier').append('<option value="' + value.Id + '" data-currency-id="' + value.SupplierCurrencyId + '" >' + value.SupplierName + '-' + value.CurrencyShortName + '</option>');
                    });
                }
            });

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetInventoryShrinkage", "Accounts")',
                datatype: "Json",
                success: function (data) {
                    $.each(data, function (index, value) {
                        $('#inventory-adjustment-acc-id').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                    });
                }
            });
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetWarehouse", "Purchase")',
                datatype: "Json",
                success: function (data) {
                    $('#WarehouseIdMain').append('<option value="">' + 'Please Select' + '</option>');
                    $.each(data, function (index, value) {
                        $('#WarehouseIdMain').append('<option value="' + value.Id + '">' + value.WhName + '</option>');
                    });
                }
            });
            

            //function blankme(id) {

            //    var val = document.getElementById(id).value;
            //    var error_id = "error_" + id;

            //    if (val == "" || val === 0.00) {

            //        document.getElementById(error_id).style.display = "block";
            //    }
            //    //else {
            //    //    document.getElementById(error_id).style.display = "none";
            //    //}
            //}
            //get supplier ends

            if ('@ViewBag.DocTypeValue' == "Bill") {
                //modal radio check uncheck functionalities starts
                const dueInDaysRadio = document.getElementById("dueInDaysRadio");
                const dueByDaysRadio = document.getElementById("dueByDaysRadio");

                dueInDaysRadio.addEventListener("change", () => {
                    if (dueInDaysRadio.checked) {
                        $("#dueInDays").prop("disabled", false)
                        $("#dueByDay").prop("disabled", true)
                        $("#dueNextMonthDays").prop("disabled", true)
                        dueByDaysRadio.checked = false;
                    }
                });

                dueByDaysRadio.addEventListener("change", () => {
                    if (dueByDaysRadio.checked) {
                        $("#dueInDays").prop("disabled", true)
                        $("#dueByDay").prop("disabled", false)
                        $("#dueNextMonthDays").prop("disabled", false)
                        dueInDaysRadio.checked = false;
                    }
                });
                //modal radio check uncheck functionalities ends
            }


            //modal close and clear data function starts
            function modalClear() {
                $("#termName").val('');
                $("#dueInDays").val('');
                $("#dueByDay").val('');
                $("#dueNextMonthDays").val('');
                $("#dueByDaysRadio").val('');
                $("#dueInDaysRadio").val('');
            }
            //modal close and clear data function ends




            $(document).ready(function () {

                $("#top-row").removeClass("d-none");
                $("#makeRecurringDiv").removeClass("d-none");
                $("#First-row-Recurring").addClass("d-none");
                $("#IntervalDiv").addClass("d-none");

                $('.js-example-tags').select2({
                    tags: true,
                    tokenSeparators: [',', ' ']
                });

                $('#tagDropdown').on('change', function () {
                    // Get selected tags
                    var selectedTags = $(this).val();

                    // Display selected tags
                    $('#selectedTags').html('');
                    if (selectedTags) {
                        selectedTags.forEach(function (tag) {
                            $('#selectedTags').append('<span class="badge badge-primary">' + tag + '</span> ');
                        });

                    }
                });

                if ('@ViewBag.DocTypeValue' == "Purchase Payment")
                {
                    const isRecognition = document.getElementById("isRecognition");

                    isRecognition.addEventListener("change", () => {
                        if (isRecognition.checked) {
                            $("#adv_details").removeClass("d-none");

                        }
                        else {
                            $("#adv_details").addClass("d-none");
                        }
                    });
                }
                function checkTotalValue() {
                    var totalValue = $('#total').text().replace('$', '').replace(',', '');
                    return parseFloat(totalValue) > 0;
                }

                $('#total').on('DOMSubtreeModified', function () {
                    $('#add-obj').prop('disabled', !checkTotalValue());
                });

                function GetTagsList() {
                    $.ajax({
                        url: '@Url.Action("GetTagsList", "Accounts")',
                        type: 'GET',
                        success: function (result) {

                            $('#tagDropdown').empty();

                            var groupOptions = result.data.map(function (item) {
                                return '<option value="' + item.Id + '">' + item.TagName + '</option>';
                            });

                            // Append the options to the dropdown
                            $('#tagDropdown').append(groupOptions.join(''));

                        },
                        error: function (error) {
                            //console.log('Error fetching group list:', error);
                        }
                    });
                }

                GetTagsList();
                $('#tagDropdown').on('change', function () {
                    var selectedTags = $(this).val();

                    //console.log('Selected Tags:', selectedTags);

                });
                // Function to get and populate the "Terms" dropdown
                function getTermsDropdown() {
                    $.ajax({
                        url: '@Url.Action("GetTermsWithAttr", "Admin")',
                        success: function (data) {
                            /*console.log("term ajax data::", data);*/
                            const select = document.querySelector('#terms');
                            for (var i = 0; i < data.length; i++) {
                                const option = document.createElement('option');
                                option.value = data[i].Id;
                                option.text = data[i].TermName;
                                option.setAttribute('DueInFixedDays', data[i].DueInFixedDays);
                                select.appendChild(option);
                            }
                        }
                    });
                }

                function EditTagsOrGroup(id) {
                    $.ajax({
                        url: '@Url.Action("GetTagsOrGroup", "Accounts")',
                        data: { Id: id },
                        success: function (response) {
                            if (response.success == "1") {
                                //console.log(response.data);

                                var value = response.data;
                                if (value.TagsType === 'L') {
                                    $('#TagId').val(value.Id);
                                    $('#new-tag-name').val(value.TagName);
                                    $('#GroupList').val(value.ParentId);
                                    $('#GroupList').trigger('change');

                                    $('#createTag').removeClass('d-none');
                                    $('#tagList').addClass('d-none');
                                    $('#backToTaglist').removeClass('d-none');
                                    $('#offcanvasRightLabel').addClass('d-none');
                                    $('#createGroup').addClass('d-none');
                                }
                                else {
                                    $('#GroupId').val(value.Id);
                                    $('#new-group-name').val(value.TagName);

                                    $('#createTag').addClass('d-none');
                                    $('#tagList').addClass('d-none');
                                    $('#backToTaglist').removeClass('d-none');
                                    $('#offcanvasRightLabel').addClass('d-none');
                                    $('#createGroup').removeClass('d-none');
                                }
                            }

                        }
                    });
                }

                function GroupList() {
                    $.ajax({
                        url: '@Url.Action("GetGroupList", "Accounts")',
                        type: 'GET',
                        success: function (result) {

                            $('#GroupList').empty();

                            var groupOptions = result.data.map(function (item) {
                                return '<option value="' + item.Id + '">' + item.TagName + '</option>';
                            });

                            // Append the options to the dropdown
                            $('#GroupList').append(groupOptions.join(''));

                        },
                        error: function (error) {
                            //console.log('Error fetching group list:', error);
                        }
                    });
                }
                function initTagTabulator() {
                    GroupList();
                    function buildTree(dataArray) {
                        const tree = [];
                        const parentMap = {};

                        // Check if dataArray is an array before iterating
                        if (Array.isArray(dataArray)) {
                            dataArray.forEach(item => {
                                item.TagName = item.TagName.trim();

                                if (item.ParentId === null) {
                                    tree.push(item);
                                } else {
                                    const parent = parentMap[item.ParentId];
                                    if (parent) {
                                        if (!parent.children) {
                                            parent.children = [];
                                        }
                                        parent.children.push(item);
                                    }
                                }

                                parentMap[item.Id] = item;
                            });
                        }

                        return tree;
                    }


                    // Function to fetch data from the server
                    function fetchDataFromServer() {
                        var MyAppUrlSettings = {
                            MyUsefulUrl: '@Url.Action("GetTags", "Accounts")'
                        };
                        return $.ajax({
                            url: MyAppUrlSettings.MyUsefulUrl,
                            dataType: "json",
                        });
                    }

                    // Fetch data and build the tree
                    fetchDataFromServer().done(function (response) {
                        var dataTable = buildTree(response.data);

                        // Create the Tabulator table
                        var table = new Tabulator("#tagListTable", {
                            data: dataTable,
                            dataTree: true,
                            dataTreeStartExpanded: true,
                            dataTreeChildField: "children",
                            layout: "fitColumns",
                            columns: [
                                { title: "Tags", field: "TagName", headerSort: false },
                                { title: "ID", field: "Id", visible: false },
                                {
                                    title: "",
                                    formatter: function (cell, formatterParams, onRendered) {
                                        return '<button class="btn btn-link text-right" style="width: 100%; text-align: right;">Edit</button>';
                                    },
                                    cellClick: function (e, cell) {
                                        var id = cell.getRow().getData().Id;
                                        EditTagsOrGroup(id);
                                    },
                                    headerSort: false,
                                },
                            ],
                        });
                    });
                }


                initTagTabulator();
                $('#backToTaglist').on('click', function () {
                    $('#createTag').addClass('d-none');
                    $('#tagList').removeClass('d-none');
                    $('#backToTaglist').addClass('d-none');
                    $('#createGroup').addClass('d-none');
                    $('#offcanvasRightLabel').removeClass('d-none');
                    initTagTabulator();
                });
                // Add an event listener to the "Terms" dropdown
                $('#terms').change(function () {
                    if ($(this).val() !== "add-new") {
                        // Get the selected option's value, text, and data attributes
                        const selectedOption = $(this).find('option:selected');
                        const selectedValue = selectedOption.val();
                        const selectedText = selectedOption.text();
                        // Retrieve the DueInFixedDays attribute value
                        const dueInFixedDays = selectedOption.attr('DueInFixedDays');

                        // You can now use these values as needed
                        ////console.log('Selected Value:', selectedValue);
                        ////console.log('Selected Text:', selectedText);
                        ////console.log('DueInFixedDays Attribute:', dueInFixedDays);

                        //alert('hi');
                    }
                });

                // Add an event listener to the "Terms" dropdown
                $('#terms').change(function () {
                    const selectedOption = $(this).find('option:selected');
                    const dueInFixedDays = selectedOption.attr('DueInFixedDays');

                    if ($(this).find('option:selected').text() == 'Select an option') {
                        const billDateValue = $('#start-date').val();
                        $('#end-date').val(billDateValue);
                    }


                    if (dueInFixedDays !== undefined) {
                        // Calculate the due date based on the selected option's DueInFixedDays value
                        const billDateValue = $('#start-date').val(); // Get the "Bill Date" value
                        if(billDateValue != "")
                        {
                            const billDate = new Date(billDateValue); // Convert it to a Date object

                            // Calculate the due date by adding the DueInFixedDays to the Bill Date
                            const dueDate = new Date(billDate.getTime() + (dueInFixedDays * 24 * 60 * 60 * 1000));

                            // Format the due date as "dd-MMM-yyyy" (e.g., 01-Sep-2023)
                            const day = dueDate.getDate().toString().padStart(2, '0');
                            const month = dueDate.toLocaleString('default', { month: 'short' });
                            const year = dueDate.getFullYear();

                            const formattedDueDate = `${day}-${month}-${year}`;

                            // Set the "Due Date" input value to the calculated due date
                            $('#end-date').val(formattedDueDate);
                        }
                    }
                });


                // Call the getTermsDropdown function to populate the dropdown initially
                getTermsDropdown();
                function Saveproductinfo() {
                    var TermName = $("#termName").val();
                    var DueInFixedDays = $("#dueInDays").val();
                    var DueByDayOfMonth = $("#dueByDay").val();
                    var DueNextMonthWithinDays = $("#dueNextMonthDays").val();


                    var AccountHead = {
                        TermName: TermName,
                        DueInFixedDays: DueInFixedDays,
                        DueByDayOfMonth: DueByDayOfMonth,
                        DueNextMonthWithinDays: DueNextMonthWithinDays

                    }
                    //console.log(AccountHead);
                    $.ajax({
                        url: '@Url.Action("AddTerms", "Admin")',
                        data: { model: AccountHead }, //use id here
                        //data: JSON.stringify(purchasesmain),
                        type: 'POST',
                        async: true,
                        //contentType: 'application/json;',
                        dataType: 'json',
                        success: function (result) {
                            if (result.success == "1") {
                                alert("Saved");
                                $('#exampleModal').modal('hide');
                                $('#terms').val("0");
                                getTermsDropdown();

                            }
                            if (result.success == "2") {
                                $('#termNameValidation').text("Name Must Be Unique");
                            }

                        },
                        error: function () {
                            alert("Failed");

                        }
                    });
                }


                $("#terms").on("change", function () {
                    // Check if the selected option is the "Add New" option
                    if ($(this).val() === "add-new") {
                        $("#exampleModal").modal("show");
                    }
                });

                $("#saveTermButton").click(function () {
                    Saveproductinfo();
                    modalClear()
                });
            });





            $(document).ready(function () {


                $(function () {
                    $("#start-date").removeClass("hasDatepicker").datepicker({
                        dateFormat: "dd-M-yy",
                        todayHighlight: true,
                        autoclose: true,
                        onSelect: function (dateText, inst) {
                            getverifyFiscalMonth(dateText);
                        }
                    }).attr('readonly', 'readonly');
                    $("#purchase-order-date").removeClass("hasDatepicker").datepicker({
                        dateFormat: "dd-M-yy",
                        todayHighlight: true,
                        autoclose: true,
                        onSelect: function (dateText, inst) {
                            getverifyFiscalMonthPO(dateText);
                        }
                }).attr('readonly', 'readonly');
                    $("#inventory-adjustment-date").removeClass("hasDatepicker").datepicker({
                        dateFormat: "dd-M-yy"
                    });
                    $("#end-date").removeClass("hasDatepicker").datepicker({
                        dateFormat: "dd-M-yy"
                    });
                    $("#payment-date").removeClass("hasDatepicker").datepicker({
                        dateFormat: "dd-M-yy"
                    });
                    $("#recurring-start-date").removeClass("hasDatepicker").datepicker({
                        dateFormat: "dd-M-yy"
                    });
                    $("#recurring-end-date").removeClass("hasDatepicker").datepicker({
                        dateFormat: "dd-M-yy"
                    });
                    if('@ViewBag.DocTypeValue' === 'Purchase Payment')
                    {
                        $("#adv-start-date").removeClass("hasDatepicker").datepicker({
                            dateFormat: "dd-M-yy"
                        });
                    }
                    
                    $("#start-date").attr("autocomplete", "off");
                    $("#end-date").attr("autocomplete", "off");
                    $("#purchase-order-date").attr("autocomplete", "off");
                    $("#inventory-adjustment-date").attr("autocomplete", "off");
                    $("#payment-date").attr("autocomplete", "off");
                });

            function initializeFiscalMonth(date) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetFiscalMonthDateWise", "Accounts")',
                    data: { fiscalDate: date },
                    datatype: "Json",
                    success: function (data) {

                        if (data.length > 1) {
                            $("#FiscalMonthDiv").removeClass('d-none');
                        }
                        else {
                            $("#FiscalMonthDiv").addClass('d-none');
                        }
                        $('#FiscalMonthId').empty();
                        $.each(data, function (index, value) {
                            $('#FiscalMonthId').append('<option value="' + value.Id + '" >' + value.MonthName + '</option>');
                        });
                        console.log($('#FiscalMonthId').val());
                    }
                });
            }

            function getverifyFiscalMonth(selectedDate) {

                $.ajax({
                    url: '@Url.Action("VerifyFiscalMonth", "Accounts")',
                    data: { fiscalDate: selectedDate },
                    type: 'GET',
                    success: function (result) {

                        if (result.IsLocked == true) {
                            //$('#VoucherDate').val(result.data);
                            // var formattedDate = moment(result.data).format('DD-MMM-YYYY');
                            // $('#start-date').val(formattedDate);
                            // $('#bill-date-validation').text('The fiscal month you choosed is closed');

                            if (result.data == null) {
                                $('#bill-date-validation').text('Open a fiscal month.');
                                $('#start-date').val('');
                            }
                            else {
                                //$('#VoucherDate').val(result.data);
                                var formattedDate = moment(result.data).format('DD-MMM-YY');
                                $('#start-date').val(formattedDate);
                                $('#bill-date-validation').text('The fiscal month you choosed is closed');
                                initializeFiscalMonth(result.data);
                            }
                        }
                        else {
                            $('#bill-date-validation').text('');
                            initializeFiscalMonth($('#start-date').val());
                        }
                        
                        GetDueDate();
                    },
                    error: function (error) {
                        console.log('Error fetching group list:', error);
                    }
                });
            }

            function getverifyFiscalMonthPO(selectedDate) {

                $.ajax({
                    url: '@Url.Action("VerifyFiscalMonth", "Accounts")',
                    data: { fiscalDate: selectedDate },
                    type: 'GET',
                    success: function (result) {

                        if (result.IsLocked == true) {
                            //$('#VoucherDate').val(result.data);
                            // var formattedDate = moment(result.data).format('DD-MMM-YYYY');
                            // $('#purchase-order-date').val(formattedDate);

                            if ('@ViewBag.DocTypeValue' === "Expense" || '@ViewBag.DocTypeValue' === "Cheque"|| '@ViewBag.DocTypeValue' === "GRR"|| 
                                '@ViewBag.DocTypeValue' === "Supplier credit" || '@ViewBag.DocTypeValue' === "Purchase Payment") {

                                // var formattedDate = moment(result.data).format('DD-MMM-YY');
                                // $('#purchase-order-date').val(formattedDate);
                                // $('#payment-date-validation').text('The fiscal month you choosed is closed');

                                if (result.data == null) {
                                    $('#payment-date-validation').text('Open a fiscal month.');
                                    $('#purchase-order-date').val('');
                                }
                                else {
                                    //$('#VoucherDate').val(result.data);
                                    var formattedDate = moment(result.data).format('DD-MMM-YY');
                                    $('#purchase-order-date').val(formattedDate);
                                    $('#payment-date-validation').text('The fiscal month you choosed is closed');
                                    initializeFiscalMonth(result.data);
                                }

                            }
                            else
                            {
                                // var formattedDate = moment(result.data).format('DD-MMM-YY');
                                // $('#purchase-order-date').val(formattedDate);
                                // $('#bill-date-validation').text('The fiscal month you choosed is closed');

                                if (result.data == null) {
                                    $('#bill-date-validation').text('Open a fiscal month.');
                                    $('#purchase-order-date').val('');
                                }
                                else {
                                    //$('#VoucherDate').val(result.data);
                                    var formattedDate = moment(result.data).format('DD-MMM-YY');
                                    $('#purchase-order-date').val(formattedDate);
                                    $('#bill-date-validation').text('The fiscal month you choosed is closed');
                                    initializeFiscalMonth(result.data);
                                }
                            }
                        }
                        else {
                            if ('@ViewBag.DocTypeValue' === "Expense" || '@ViewBag.DocTypeValue' === "Cheque"|| '@ViewBag.DocTypeValue' === "GRR"|| 
                                '@ViewBag.DocTypeValue' === "Supplier credit" || '@ViewBag.DocTypeValue' === "Purchase Payment")
                            {
                                $('#payment-date-validation').text('');
                                initializeFiscalMonth($('#purchase-order-date').val());
                            }
                            else
                            {
                                $('#bill-date-validation').text('');
                                initializeFiscalMonth($('#purchase-order-date').val());
                            }
                            
                        }
                        
                    },
                    error: function (error) {
                        console.log('Error fetching group list:', error);
                    }
                });
            }

                $('#tagSaveBtn').on('click', function () {
                    var tagName = $('#new-tag-name').val();
                    var group = $('#GroupList').val();
                    var id = $('#TagId').val();

                    var TagsModel =
                    {
                        Id: id,
                        TagName: tagName,
                        TagShortName: tagName,
                        ParentId: group,
                        TagsType: 'L'
                    }
                    //console.log(TagsModel);
                    $.ajax({
                        url: '@Url.Action("TagsCreation", "Accounts")',
                        type: 'POST',
                        async: true,
                        dataType: 'json',
                        data: { model: TagsModel },
                        success: function (response) {
                            if (response.success == "1") {
                                $('#new-tag-name').val('');
                                $('#GroupList').val('');
                                $('#TagId').val('0');
                                $('#createTag').addClass('d-none');
                                $('#tagList').removeClass('d-none');
                                $('#backToTaglist').addClass('d-none');
                                $('#createGroup').addClass('d-none');
                                $('#offcanvasRightLabel').removeClass('d-none');
                                initTagTabulator();
                                GetTagsList();
                                toastr.success(response.message, "", {
                                    "toastClass": "toast-green",
                                });
                            }
                        },
                        error: function (error) {
                            console.error(error);
                        }
                    });
                });

                $('#groupSaveBtn').on('click', function () {
                    var tagName = $('#new-group-name').val();
                    var id = $('#GroupId').val();

                    var TagsModel =
                    {
                        Id: id,
                        TagName: tagName,
                        TagShortName: tagName,
                        TagsType: 'G'
                    }
                    //console.log(TagsModel);
                    $.ajax({
                        url: '@Url.Action("TagsCreation", "Accounts")',
                        type: 'POST',
                        async: true,
                        dataType: 'json',
                        data: { model: TagsModel },
                        success: function (response) {
                            if (response.success == "1") {
                                $('#new-group-name').val('');
                                $('#GroupId').val('0');
                                $('#createTag').addClass('d-none');
                                $('#tagList').removeClass('d-none');
                                $('#backToTaglist').addClass('d-none');
                                $('#createGroup').addClass('d-none');
                                $('#offcanvasRightLabel').removeClass('d-none');
                                initTagTabulator();
                                GetTagsList();
                                toastr.success(response.message, "", {
                                    "toastClass": "toast-green",
                                });
                            }
                        },
                        error: function (error) {
                            console.error(error);
                        }
                    });
                });



                $('#createTagBtn').on('click', function () {
                    $('#createTag').removeClass('d-none');
                    $('#tagList').addClass('d-none');
                    $('#backToTaglist').removeClass('d-none');
                    $('#offcanvasRightLabel').addClass('d-none');
                    $('#createGroup').addClass('d-none');
                });

                $('#crateGroupBtn').on('click', function () {
                    $('#createTag').addClass('d-none');
                    $('#createGroup').removeClass('d-none');
                    $('#tagList').addClass('d-none');
                    $('#backToTaglist').removeClass('d-none');
                    $('#offcanvasRightLabel').addClass('d-none');
                });



                if ('@ViewBag.ActionType' === 'Create' && '@ViewBag.DocTypeValue' === 'Stock Adjustment') {
                    //console.log('Working');
                    $("#bill-no").val('1');
                }
                if ('@ViewBag.DocTypeValue' === 'Stock Adjustment') {
                    $("#add-clear-row-main").addClass("d-none");
                    $("#add-clear-row-second").addClass("d-none");
                }
                else {
                    $("#add-clear-row-main").removeClass("d-none");
                    $("#add-clear-row-second").removeClass("d-none");
                }
                if ('@ViewBag.DocTypeValue' === 'Opening Stock') {
                    document.getElementById('BtnSaveAndClose').disabled = true;
                    $("#totalCalculation").addClass("d-none");
                }
                else {
                    document.getElementById('BtnSaveAndClose').disabled = false;
                    $("#totalCalculation").removeClass("d-none");
                }
                var editingModeTrigger = 1;
                var currencyrate;
                var AccountCategory = '';
                var currencyId;
                var isMultiCurrency = '@HttpContextAccessor.HttpContext.Session.GetInt32("isMultiCurrency")';
                var DefaultCurrencyId = '@HttpContextAccessor.HttpContext.Session.GetInt32("defaultcurrencyid").ToString()';

                var isMultiDebitCredit = '@HttpContextAccessor.HttpContext.Session.GetString("isMultiDebitCredit").ToLower()' == 'true';
                if ((isMultiDebitCredit == false) && ($('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 3)) {
                    var amountInputs = `
                                            <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                                                        <input type="text" style="text-align:right;font-weight:bold; padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                                             border-radius: 8px;" id="VAmount-debit" readonly>
                                            `
                    $("#total-amount-id").append(amountInputs);

                }
                else if ((isMultiDebitCredit == false) && ($('#PurchaseTypeId').val() == 2 || $('#PurchaseTypeId').val() == 4)) {
                    var amountInputs = `
                                            <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                                                        <input type="text" style="text-align:right;ont-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                                             border-radius: 8px;" id="VAmount-credit" readonly>
                                            `
                    $("#total-amount-id").append(amountInputs);

                }
                else if ((isMultiDebitCredit == false) && ($('#PurchaseTypeId').val() == 5 || $('#PurchaseTypeId').val() == 6)) {
                    var amountInputs = `
                                            <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                                                        <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                                             border-radius: 8px;" id="VAmount-debit" readonly>

                                            <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                                                        <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                                             border-radius: 8px;" id="VAmount-credit" readonly>

                                                        <label style="font-weight:bold;color: red;" for="total" class="ms-5">Diffrenece &nbsp;: &nbsp;</label>
                                                        <input type="text" style="text-align:right;font-weight:bold;color: red;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                                             border-radius: 8px;" id="difference" readonly>
                                                        <input type="hidden" class="d-none" id="VAmount" readonly>
                                            `
                    $("#total-amount-id").append(amountInputs);
                }
                else {
                    var amountInputs = `
                                                                <label style="font-weight:bold;for="total">Total Debit &nbsp;: &nbsp;</label>
                                                                <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                                                        border-radius: 8px;" id="VAmount-debit" readonly>

                                                                <label style="font-weight:bold;for="total" class="ms-5">Total Credit &nbsp;: &nbsp;</label>
                                                                <input type="text" style="text-align:right;font-weight:bold;padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                                                        border-radius: 8px;" id="VAmount-credit" readonly>

                                                                <label style="font-weight:bold;color: red;" for="total" class="ms-5">Diffrenece &nbsp;: &nbsp;</label>
                                                                <input type="text" style="text-align:right;font-weight:bold; color: red; padding: 10px 20px; width: 180px; border: 0.5px solid lightgrey;
                                                                        border-radius: 8px;" id="difference" readonly>
                                                                <input type="hidden" class="d-none" id="VAmount" readonly>
                                            `
                    $("#total-amount-id").append(amountInputs);

                }

                if (isMultiDebitCredit == true) {
                    let balance = `
                                                                              <div class="mb-2">
                                                                                <p class="fw-bold" id="balance">Balance</p>
                                                                            </div>
                                                                                `
                    $("#divBalanceMultiDrCr").append(balance);

                    $("#total-rate-label-main").addClass("d-none");
                }
                ////////////////////////////// *********** upper section field *********///////////////////////////////////

                document.getElementById("remove-image-or-pdf").addEventListener("click", function () {
                    document.getElementById("pdf-iframe").classList.add("d-none");
                    document.getElementById("view-image-or-pdf").classList.add("d-none");
                    document.getElementById("remove-image-or-pdf").classList.add("d-none");
                    document.getElementById("PurchaseFilePath").value = "";
                });
                var fileInput = $('input[type=file]')[0];
                $('#PurchaseDate').datepicker({
                    dateFormat: 'dd-M-y',
                    todayHighlight: true,
                    autoclose: true
                });

                var PurchaseDate;
                var PurchaseCode;
                var PurchaseList = [];

                $.ajax({
                    method: "get",
                    async: false,
                    url: '@Url.Action("LastPurchase", "Accounts")',//url: "https://www.pqstec.com/InvoiceApps/values/GetSupplierDropdown",
                    data: { DocTypeId: @ViewBag.DocTypeId, CopyBill: @ViewBag.CopyBill, purchasetypesearch: " " },

                    success: function (data) {
                        ////console.log("modal data::", data);
                        PurchaseDate = data.LastPurchaseDate;
                        PurchaseCode = data.LastPurchaseCode;
                        PurchaseList = data.PrevVoucherList;
                    }
                });

                $('#PurchaseDate').val(PurchaseDate);
                $('#PurchaseCode').val(PurchaseCode);

                $('#jsClockHistory').jsGrid({
                    width: '100%',
                    data: PurchaseList,
                    fields: [
                        { name: "Id", title: 'Id', type: "label", visible: false },
                        { name: "DocNo", title: 'DOC NO.', type: "label" },
                        { name: "PurchaseType", title: 'Type', type: "label", visible: false },
                        { name: "DocType", title: 'PREVIOUS TRANSACTION', type: "label" },
                        { name: "Supplier", title: 'SUPPLIER', type: "label" },
                        { name: "Amount", title: 'AMOUNT', type: "label" }
                    ]


                });

                $('#CountryId').select2({})
                    .on("select2:select", function (e) {
                        GetCultureInfo($("#VAmount").val());
                    });





            @*$.ajax({
                method: "get",
                async: false,
                //    url: '@Url.Action("GetCurrencyDropdown", "Admin")',
                //  data: { PurchaseType: "Cash Payment" },

                success: function (data) {



                const select = document.querySelector('#CountryId');
                for (var i = 0; i < data.length; i++) {
                const option = document.createElement('option');
                option.value = data[i].Value;
                option.text = data[i].Text;
                select.appendChild(option);
                }
                }
                });*@





                    function LedgerBalance(AccountId) {
                        //alert(AccountId);
                        //alert($("#Customer").val());
                        //tblaccountList.rows().remove().draw(false);
                        var MyAppUrlSettings = {
                            MyUsefulUrl: '@Url.Action("GetLedgerBalance", "Values")'
                        }
                        //alert('test');
                        $.ajax({
                            type: 'Get',
                            // data: { PurchaseType: "Cash Payment" },
                            url: MyAppUrlSettings.MyUsefulUrl,
                            dataType: 'json',
                            data: { AccountId: AccountId, TransactionId: 0 }, //, $("#Id").val()
                            success: function (result) {

                                $("#balance").text(result.toLocaleString());
                                $("#balance").val(result.toLocaleString());
                            },
                            error: function (ex) {
                                alert('Failed.' + ex);
                            }
                        });
                        return false;
                    };

                $('#AccountMainId').select2({})
                    .on("select2:select", function (e) {
                        LedgerBalance($('#AccountMainId').val());
                    });

                //$.ajax({
                //    method: "get",
                //    async: false,
                //    url: '@Url.Action("GetWarehouseDropdown", "Admin")',//url: "https://www.pqstec.com/InvoiceApps/values/GetSupplierDropdown",
                //    //headers: {
                //    //    contentType: "application/json; charset=utf-8",
                //    //    Authorization: token
                //    //},
                //    success: function (data) {
                //        const select = document.querySelector('#location');
                //        for (var i = 0; i < data.length; i++) {
                //            const option = document.createElement('option');
                //            option.value = data[i].Value;
                //            option.text = data[i].Text;
                //            select.appendChild(option);
                //        }
                //    }
                //});




                function GetCultureInfo() {
                    let VamountVis = $('#VAmount').val();
                    var MyAppUrlSettings = {
                        MyUsefulUrl: '@Url.Action("GetCultureInfo", "Admin")'
                    }
                    //alert('test');
                    $.ajax({
                        type: 'Get',
                        // data: { PurchaseType: "Cash Payment" },
                        url: MyAppUrlSettings.MyUsefulUrl,
                        dataType: 'json',
                        data: { CurrencyId: $('#CountryId').val() }, //, $("#Id").val()
                        success: function (result) {

                            ////console.log(result);
                            let CultureInfo = result.CultureInfo;
                            let CurrencySymbol = result.CurrencySymbol;
                            let currencyshortname = result.CurrencyShortName;

                            if (VamountVis > 0) {

                                //ar ---> OMR, AED
                                //en---> USD,EUR
                                // bn--> BDT

                                //alert(CultureInfo.substr(3,2));
                                $('#VAmountvisible').val(Number(VamountVis).toLocaleString(CultureInfo.substr(0, 2), { style: 'currency', currency: currencyshortname }));
                            }



                        },
                        error: function (ex) {
                            alert('Failed.' + ex);
                        }
                    });
                }




                /////////***** condition based div hide and show **** ///////

                $('#cpSection').hide();
                $('#crSection').hide();
                if ($('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 3) {
                    $('#cpSection').show();
                }

                else if ($('#PurchaseTypeId').val() == 2 || $('#PurchaseTypeId').val() == 4) {
                    $('#cpSection').show();


                    ///customer
                    $.ajax({
                        method: "get",
                        async: false,
                        url: '@Url.Action("GetCustomersDropDown", "Admin")',
                        //data: { PurchaseType: "Cash Receipt" },
                        success: function (data) {
                            //console.log("customer::",data);
                            const select = document.querySelector('#Supplierr');
                            for (var i = 0; i < data.length; i++) {
                                const option = document.createElement('option');
                                option.value = data[i].Value;
                                option.text = data[i].Text;
                                select.appendChild(option);
                            }

                        }
                    });



                }

                else if ($('#PurchaseTypeId').val() == 5 || $('#PurchaseTypeId').val() == 6) {


                    $('#cpSection').show();

                    $.ajax({
                        method: "get",
                        async: false,
                        url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                        data: { PurchaseType: "Cash Receipt" },

                        success: function (data) {



                            const select = document.querySelector('#AccountMainId');
                            for (var i = 0; i < data.length; i++) {
                                const option = document.createElement('option');
                                option.value = data[i].Value;
                                option.text = data[i].Text;
                                select.appendChild(option);
                            }

                        }
                    });

                }
                else {

                    $('#cpSection').show();

                }

                function getCustomerForDropdown() {
                    $.ajax({
                        url: "@Url.Action("GetCustomer", "Admin")",
                        dataType: "json",
                        method: "get",
                        success: function (data) {
                            //console.log("Console for customer List:", data);
                            $('#ship-to-customer').empty(); // Clear existing options
                            $.each(data, function (i, item) {
                                $('#ship-to-customer').append($('<option>', {
                                    value: item.Id,
                                    text: item.DisplayName
                                }));
                            });
                        }

                    });
                }
                getCustomerForDropdown();


                if ($('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 2) {



                    $.ajax({
                        method: "get",
                        async: false,
                        url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                        data: { PurchaseType: "Cash" },

                        success: function (data) {



                            const select = document.querySelector('#AccountMainId');
                            for (var i = 0; i < data.length; i++) {
                                const option = document.createElement('option');
                                option.value = data[i].Value;
                                option.text = data[i].Text;
                                select.appendChild(option);
                            }
                        }
                    });


                }
                else if ($('#PurchaseTypeId').val() == 3 || $('#PurchaseTypeId').val() == 4) {
                    ///main account
                    $.ajax({
                        method: "get",
                        async: false,
                        url: '@Url.Action("GetAccountHeadDropdown", "Admin")',
                        data: { PurchaseType: "Bank" },

                        success: function (data) {



                            const select = document.querySelector('#AccountMainId');
                            for (var i = 0; i < data.length; i++) {
                                const option = document.createElement('option');
                                option.value = data[i].Value;
                                option.text = data[i].Text;
                                select.appendChild(option);
                            }
                        }
                    });

                }

                var flag = 0;

                function customCheckBoxFormatter(cell, formatterParams, onRendered) {
                    const isChecked = cell.getValue() === 1;
                    const checkboxHtml = `<input type="checkbox" class="custom-checkbox" ${isChecked ? 'checked' : ''}>`;
                    return checkboxHtml;
                }
                // Define global variables to store the sums
                var totalAmountCategory = 0;
                var totalAmountItems = 0;

                let currentActiveInput = null;
                var selectedTax = @Html.Raw(Json.Serialize(ViewBag.TaxList));
                var selectedLocation = @Html.Raw(Json.Serialize(ViewBag.WarehouseIdMain));
                var localFieldsForFirstTable = [

                    {
                        headerSort: false,
                        field: "drag",
                        frozen: true,
                        formatter: function (cell, formatterParams) {
                            return "<i class='fas fa-bars drag-icon'></i>";
                        },
                        width: 30,
                        headerSort: false,
                        rowHandle: true,


                    },
                    {
                        title: "Unique Column",
                        field: "UniqueColumData", // Use a unique field name
                        headerSort: false,
                        //formatter: generateUniqueId,
                        width: 100, // Adjust the width as needed
                        movable: false,
                        editor: false, // You may want to disable editing for this column
                        visible: false, // Set the visibility as needed
                    },
                    { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '3px', bottomCalc: "count", hozAlign: "right" },
                    { title: "ComId", field: "ComId", movable: false, headerSort: false, visible: false },
                    {
                        title: "CATEGORY",
                        field: "AccName",
                        frozen: true,
                        editable: true,
                        headerSort: false,

                        formatter: "html",
                        editor: categoryEditor,
                        editorParams: {
                            listOnEmpty: true,
                            autocomplete: true,
                        },
                    },





                    { title: "AccCategory", field: "AccountCategory", movable: false, headerSort: false, visible: false },
                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                    { title: "ParentId", field: "PurchaseItemsCategoryId", movable: false, headerSort: false, visible: false, width: '5px' },
                    { title: "Account Id", field: "AccId", movable: false, headerSort: false, visible: false },
                    { title: "Name", field: "Name", editor: "input", headerSort: false, editable: true, movable: false, visible: false },
                    {
                        title: "isTransaction",
                        field: "isTransaction",
                        headerSort: false,
                        editable: true,
                        movable: false,
                        visible: false,
                        formatter: "tickCross",
                        editor: true,
                        formatterParams: { crossElement: true }, // Set the default value to true (tick)
                    },


                    { title: "DESCRIPTION", field: "Description", headerHozAlign: "center", headerSort: false, editor: "input", movable: false, editable: true, },
                    {
                        title: "AMOUNT",
                        field: "Amount",
                        editable: true,
                        headerHozAlign: "center",
                        hozAlign: "right",
                        headerSort: false,
                        bottomCalc: "sum",
                        movable: false,
                        editor: "input",
                        cellEditing: function (cell) {
                            // Display the current value while editing
                            cell.setValue(cell.getValue());
                        },
                        cellEdited: function (cell) {
                            // Log the edited value to the console
                            var editedValue = cell.getValue();
                            ////console.log("Edited Value:", editedValue);

                            // Calculate the sum of "Amount" column values
                            var tableData = tableCategory.getData(); // Replace 'yourTable' with your table instance
                            var totalAmount = 0;
                            totalAmountCategory = 0;
                            tableData.forEach(function (row) {
                                if (!isNaN(row.Amount)) {
                                    totalAmount += parseFloat(row.Amount);
                                    totalAmountCategory += parseFloat(row.Amount);
                                }
                            });
                            // Update the "balance-due" HTML element with the summed value
                            const amountDisplay = document.getElementById("balance-due");
                            amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toLocaleString('en-US', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            });

                            const amountSubTotal = document.getElementById("subtotal");
                            amountSubTotal.textContent = isNaN(totalAmount) ? "" : '$' + totalAmount.toLocaleString('en-US', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            });
                            const amountTotal = document.getElementById("total");
                            amountTotal.textContent = isNaN(totalAmount) ? "" : totalAmount.toFixed(4);
                            var currencyRate = $("#CurrencyRate").val();
                            const amountTotalInBDT = document.getElementById("totalInBDT");
                            amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);
                            calculateTotalSum();
                        },
                    },

                    //{
                    //    title: "AMOUNT",
                    //    field: "Amount",
                    //    editable: true,
                    //    hozAlign: "right",
                    //    width: '10px',
                    //    headerSort: false,
                    //    bottomCalc: "sum",
                    //    movable: false,
                    //    editor: "input",
                    //},

                    {
                        title: "BILLABLE",
                        field: "IsBillable",
                        hozAlign: "center",
                        editor: true,
                        formatter: "tickCross",
                        width: '13px',
                        visible: false

                    },
                    {
                        title: "TAX",
                        field: "IsTax",
                        hozAlign: "center",
                        headerHozAlign: "center",
                        editor: true,
                        formatter: "tickCross",
                        width: '13px',
                        visible: false
                    },
                    {
                        title: '', headerHozAlign: "center", field: "FilePath", width: "10px", hozAlign: "left", visible: false, formatter: customAttachmentFormatter, visible: false, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            //cell.getElement().classList.add('active-cell');
                            if (cell.getElement()) {
                                cell.getElement().classList.add('active-cell');
                            }
                        },
                    },
                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
                    { title: "DocType", field: "DocType", movable: false, headerSort: false, visible: false },
                    { title: "PurchaseDate", field: "PurchaseDate", movable: false, headerSort: false, visible: false },
                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
                    { title: "NetAmount", field: "NetAmount", movable: false, headerSort: false, visible: false },
                    { title: "CurrencyRate", field: "CurrencyRate", movable: false, headerSort: false, visible: false },
                    { title: "Customer Id", field: "CustomerId", movable: false, headerSort: false, visible: false },
                    {
                        title: "CUSTOMER",
                        field: "Name",
                        frozen: false,
                        headerHozAlign: "center",
                        editable: true,
                        headerSort: false,

                        formatter: "html",
                        editor: customerEditor,
                        editorParams: {
                            listOnEmpty: true,
                            autocomplete: true,
                        },
                    },
                    {
                        title: "Tax",
                        field: "VAT",
                        visible: false,
                        editor: "input",
                    },
                    {
                        title: "TDS",
                        field: "TDS",
                        visible: false,
                        editor: "input",
                    },
                    {
                        title: "VDS",
                        field: "VDS",
                        visible: false,
                        editor: "input",
                    },
                    {
                        title: "TAX",
                        field: "MasterTaxName",
                        hozAlign: "center",
                        headerHozAlign: "center",
                        sorter: "number",
                        editor: "select",
                        headerSort: false,
                        editorParams: {
                            values: selectedTax.map(option => option.Text),
                        },
                        cellEdited: function (cell) {
                            // Update the hidden column ("HiddenValue") with the selected value
                            var selectedText = cell.getValue();
                            var selectedValue = selectedTax.find(option => option.Text === selectedText);
                            if (selectedValue) {
                                cell.getRow().update({ MasterTaxId: selectedValue.Value });

                                // var taxId = selectedValue.Value;
                                // setTaxAmount(taxId);
                            }
                        },
                    },
                    {
                        title: "Hidden Tax",
                        field: "MasterTaxId",
                        visible: false,
                        editor: "input",
                    }
                ];
                // Custom editor for RATE column  
                function rateEditor(cell, onRendered, success, cancel, editorParams) {
                    var input = document.createElement("input");
                    input.type = "number";
                    input.className = "editor-input";
                    input.style.padding = "4px";
                    input.style.width = "100%";
                    input.value = cell.getValue();

                    // Set a placeholder text
                    input.placeholder = "Enter Rate"; // Replace with your desired placeholder text
                    cell.getRow().getCell("Rate").setValue(input.value);
                    // Listen for "change" event
                    input.addEventListener("change", function () {
                        var rate = parseFloat(input.value);
                        var qty = parseFloat(cell.getRow().getCell("InputQuantity").getValue());
                        var currencyRate = parseFloat($("#CurrencyRate").val());

                        if (!isNaN(rate) && !isNaN(qty)) {
                            // Corrected: Use the "Amount" field name
                            var amount = (qty * rate).toFixed(4);
                            var defaultamount = (rate * currencyRate).toFixed(4);
                             cell.getRow().getCell("Amount").setValue(amount);
                            //cell.getRow().getCell("DefaultPrice").setValue(defaultamount);
                            success(rate);
                            calculateTotalSum();
                        } else {
                            cancel();
                        }
                    });
                    input.addEventListener("blur", function () {
                        cancel();
                    });
                    return input;
                }
                function qtyEditor(cell, onRendered, success, cancel, editorParams) {
                    var input = document.createElement("input");
                    input.type = "number";
                    input.className = "editor-input";
                    input.style.padding = "4px";
                    input.style.width = "100%";
                    input.value = cell.getValue();

                    // Set placeholder text
                    input.placeholder = "Enter Quantity"; // Replace with your desired placeholder text

                    // Listen for "change" event on both RATE and QTY fields
                    var rateCell = cell.getRow().getCell("Rate");

                    input.addEventListener("change", function () {
                        var newValue = parseFloat(input.value);
                        var rowData = cell.getRow().getData();
                        var totalQty = rowData.Quantity; // Assuming you have the TotalQty in your data
                        var QTYData = 0; // Assuming you have the TotalQty in your data
                        var UsedQty = rowData.UsedQty; // Assuming you have the TotalQty in your data

                        var toBeInputValue = newValue + UsedQty;

                        if (@ViewBag.CopyBill== 1 && toBeInputValue > totalQty) {
                            // Show a popup or display an error message here
                            alert(`Quantity cannot be greater than Total Quantity and must be at least as much as Used Quantity.
                                                        Your Total Quantity is: ${totalQty}
                                                        Your Used Quantity is: ${UsedQty}
                                                        `);
                            return QTYData;
                        }
                        else {
                            var qty = parseFloat(input.value);
                            var rate = parseFloat(rateCell.getValue());

                            if (!isNaN(qty) && !isNaN(rate)) {
                                var amount = qty * rate;
                                cell.getRow().getCell("Amount").setValue(amount);
                                success(qty);
                            }
                            else {
                                cancel();
                            }
                            //success(newValue); // Update the cell value
                        }

                    });
                    input.addEventListener("blur", function () {
                        cancel();
                    });
                    return input;
                }

            // function SingletaxDropdownChange(masterTaxId, amount, productId, criteria, callback) {
            //     $.ajax({
            //         url: '@Url.Action("ProductWiseChangeRate", "Sales")',
            //         type: 'GET',
            //         data: { taxes: masterTaxId, amounts: amount, products: productId, criteria: criteria },
            //         success: function (response) {
            //             if (response.Success === 1) {

            //                 callback(response.Data[0]);
            //             } else {
            //                 console.error('Error updating rates:', response.Ex);
            //             }
            //         }
                    
            //     });
            // }

            var docTypeValue = '@ViewBag.DocTypeValue';

                //product table local fileds
                var localFieldsForSecondTable = [
                    {
                        headerSort: false,
                        field: "drag",
                        frozen: true,
                        formatter: function (cell, formatterParams) {
                            return "<i class='fas fa-bars drag-icon'></i>";
                        },
                        width: 30,
                        headerSort: false,
                        rowHandle: true,


                    },
                    {
                        title: "Unique Column",
                        field: "UniqueColumData", // Use a unique field name
                        headerSort: false,
                        //formatter: generateUniqueId,
                        width: 100, // Adjust the width as needed
                        movable: false,
                        editor: false, // You may want to disable editing for this column
                        visible: false, // Set the visibility as needed
                    },
                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                    { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '3px', bottomCalc: "count", hozAlign: "right" },
                    { title: "ComId", field: "ComId", movable: false, headerSort: false, visible: false },
                    { title: "ProductId", field: "ProductId", movable: false, headerSort: false, visible: false },
                    { title: "ColorId", field: "ColorId", movable: false, headerSort: false, visible: false },
                    
                    { title: "SizeId", field: "SizeId", movable: false, headerSort: false, visible: false },
                    { title: "StyleId", field: "StyleId", movable: false, headerSort: false, visible: false },
                    { title: "BuyerPOId", field: "BuyerPOId", movable: false, headerSort: false, visible: false },
                    {
                        title: "isTransaction",
                        field: "isTransaction",
                        headerSort: false,
                        editable: true,
                        movable: false,
                        visible: false,
                        formatter: "tickCross",
                        editor: true,
                        formatterParams: { crossElement: true }, // Set the default value to true (tick)
                    },

                    {
                        title: "PRODUCT/SERVICE",
                        field: "ProductName",
                        frozen: false,
                        editable: docTypeValue !== "Supplier PO",
                        headerSort: false,

                        headerHozAlign: "center",
                        formatter: "html",
                        width: 250,
                        editor: productEditor,
                        editorParams: {
                            listOnEmpty: true,
                            autocomplete: true,
                        },
                        cellEdited: function (cell) {
                            // Log the edited value to the console
                            var editedValue = cell.getValue();
                            ////console.log("Edited Value:", editedValue);

                            // Calculate the sum of "Amount" column values
                            var tableData = tableItems.getData(); // Replace 'yourTable' with your table instance
                            var totalAmount = 0;
                            totalAmountItems = 0;
                            tableData.forEach(function (row) {
                                if (!isNaN(row.Amount)) {
                                    totalAmount += parseFloat(row.Amount);
                                    totalAmountItems += parseFloat(row.Amount);
                                }
                            });
                           
                            // Update the "balance-due" HTML element with the summed value
                            const amountDisplay = document.getElementById("balance-due");
                            amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toFixed(4); // Format as needed

                            const amountSubTotal = document.getElementById("subtotal");
                            amountSubTotal.textContent = "$ " + (isNaN(totalAmount) ? "" : totalAmount.toFixed(4));

                            const amountTotal = document.getElementById("total");
                            amountTotal.textContent = (isNaN(totalAmount) ? "" : totalAmount.toFixed(4));
                            calculateTotalSum();

                            var currencyRate = $("#CurrencyRate").val();
                            const amountTotalInBDT = document.getElementById("totalInBDT");
                            amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toLocaleString('en-US', {
                                minimumFractionDigits: 4,
                                maximumFractionDigits: 4
                            });
                        },
                    },
                {
                    title: "ColorName",
                    field: "ColorName",
                    visible: false
                },
                {
                    title: "SizeName",
                    field: "SizeName",
                    visible: false
                },
                {
                    title: "BuyerPO",
                    field: "BuyerPO",
                    visible: false
                },
                { title: "SKU", field: "SKU", headerSort: false, movable: false, editable: true, },

                {
                   title: "DESCRIPTION", headerSort: false, field: "Description", movable: false, editor: "input", editable: true,
                   headerHozAlign: "center"
                },
                {
                    title: "Primary Unit Id",
                    field: "PrimaryUnitId",
                    visible: false,
                    editor: "input",
                },
                {
                    title: "Unit",
                    field: "Unit",
                    headerHozAlign: "center",
                    hozAlign: "center",
                    sorter: "number",
                    editor: unitEditor,
                },
                {
                    title: "Secondary Unit Id",
                    field: "SecondaryUnitId",
                    visible: false,
                    editor: "input",
                },
                {
                    title: "ConversionRate",
                    field: "ConversionRate",
                    visible: false,
                    editor: "input",
                },
                    { title: "ParentId", field: "PurchaseItemsId", movable: false, headerSort: false, visible: false },
                    {
                        title: "Location<span style=\"color: red; \">*</span>",
                        titleFormatter: "html",
                        field: "WHName",
                        width: 200,
                        hozAlign: "center",
                        headerHozAlign: "center",
                        sorter: "number",
                        visible: docTypeValue !== "Supplier PO",
                        editor: "select",
                        editorParams: {
                            values: selectedLocation.map(option => option.Text),
                        },
                        cellEdited: function (cell) {
                            var selectedText = cell.getValue();
                            var selectedValue = selectedLocation.find(option => option.Text === selectedText);
                            if (selectedValue) {
                                cell.getRow().update({ WarehouseId: selectedValue.Value });

                            }
                            cell.navigateRight();
                        },
                    },
                    {
                        title: "Hidden Value",
                        field: "WarehouseId",
                        visible: false,
                        editor: "input",
                    },
                    {
                        title: "Quantity",
                        field: "Quantity",
                        editable: true,
                        hozAlign: "right",
                        headerSort: false,
                        movable: false,
                        editor: "input",
                        default: 1,
                        headerHozAlign: "center",
                        editor: qtyEditor,
                        visible: false
                    },
                    {
                        title: "Quantity",
                        field: "InputQuantity",
                        visible: true,
                        editor: "input", bottomCalc: "sum", hozAlign: "center", headerHozAlign: "center",
                        cellEdited: function (cell, formatterParams) {
                            var rowData = cell.getRow().getData();
                            if ((rowData.PrimaryUnitId === rowData.SecondaryUnitId) || (rowData.SecondaryUnitId === undefined)) {
                                var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(4);
                                cell.getRow().update({ Quantity: rowData.InputQuantity, Amount: amount });
                            }
                            else {
                                var conversionRate = rowData.ConversionRate;
                                var costprice = (rowData.CostPrice / conversionRate).toFixed(2);
                                //var price = (rowData.Price/ conversionRate).toFixed(2);
                                //var defaultPrice = (rowData.DefaultPrice/ conversionRate).toFixed(4);
                                var qty = (rowData.InputQuantity / conversionRate).toFixed(2);
                                var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(2);
                                cell.getRow().update({ Quantity: qty, CostPrice: costprice, Amount: amount });
                            }
                            
                            calculateTotalSum();
                        },
                    },
                    {
                        title: "RATE",
                        field: "Rate", // Corrected: Use the correct field name from your data
                        editable: true,
                        hozAlign: "right",
                        headerSort: false,
                        movable: false,
                        headerHozAlign: "center",
                        editor: "input",
                        bottomCalcFormatter: "money",    
                        formatter: "money",  
                        formatterParams: {
                            decimal: ".",
                            thousand: ",",
                            precision: 2,
                        },
                        cellEdited: function (cell) {
                            var rate = parseFloat(cell.getValue());
                            var row = cell.getRow();
                            var qty = parseFloat(row.getCell("InputQuantity").getValue());
                            var currencyRate = parseFloat($("#CurrencyRate").val());

                            if (!isNaN(rate) && !isNaN(qty)) {
                                var amount = (qty * rate).toFixed(4);
                                var defaultAmount = (rate * currencyRate).toFixed(4);

                                // Set new values for "Amount" and other relevant cells
                                row.getCell("Amount").setValue(amount);
                                row.getCell("DefaultPrice").setValue(defaultAmount);

                                // Call success function or any other additional function
                                calculateTotalSum();
                            } 
                            else {
                                console.error("Invalid Rate or Quantity");
                            }
                        }
                    },
                    {
                        title: "SecondaryPrice",
                        field: "SecondaryPrice", // Corrected: Use the correct field name from your data
                        editable: true,
                        hozAlign: "right",
                        headerSort: false,
                        movable: false,
                        visible: false,
                        headerHozAlign: "center"
                    },
                    {
                        title: "Price",
                        field: "Price", // Corrected: Use the correct field name from your data
                        editable: true,
                        hozAlign: "right",
                        headerSort: false,
                        movable: false,
                        visible: false,
                        headerHozAlign: "center",
                        //editor: rateEditor
                    },
                    {
                        title: "",
                        field: "DefaultPrice", // Corrected: Use the correct field name from your data
                        editable: true,
                        hozAlign: "right",
                        headerSort: false,
                        movable: false,
                        visible: false,
                        headerHozAlign: "center"
                    },
                    {
                        title: "AMOUNT",
                        field: "Amount",
                        editable: false,
                        bottomCalc: "sum",
                        hozAlign: "right",
                        headerSort: false,
                        headerHozAlign: "right",
                        movable: false,
                        editor: "input",
                        headerHozAlign: "right",
                        bottomCalcFormatter: "money",    
                        formatter: "money",  
                          formatterParams: {
                            decimal: ".",
                            thousand: ",",
                            precision: 2,
                          },
                        cellEdited: function (cell) {
                            // Log the edited value to the console
                            var editedValue = cell.getValue();
                            ////console.log("Edited Value:", editedValue);

                            // Calculate the sum of "Amount" column values
                            var tableData = tableItems.getData(); // Replace 'yourTable' with your table instance
                            var totalAmount = 0;
                            totalAmountItems = 0;
                            tableData.forEach(function (row) {
                                if (!isNaN(row.Amount)) {
                                    totalAmount += parseFloat(row.Amount);
                                    totalAmountItems += parseFloat(row.Amount);
                                }
                            });

                            // Update the "balance-due" HTML element with the summed value 
                            const amountDisplay = document.getElementById("balance-due");
                            amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toFixed(4); // Format as needed

                            const amountSubTotal = document.getElementById("subtotal");
                            amountSubTotal.textContent = "$ " + (isNaN(totalAmount) ? "" : totalAmount.toFixed(4));

                            const amountTotal = document.getElementById("total");
                            amountTotal.textContent = (isNaN(totalAmount) ? "" : totalAmount.toFixed(4));

                            var currencyRate = $("#CurrencyRate").val();
                            const amountTotalInBDT = document.getElementById("totalInBDT");
                            amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toLocaleString('en-US', {
                                minimumFractionDigits: 4,
                                maximumFractionDigits: 4
                            });

                            calculateTotalSum();
                        },
                    },
                    {
                        title: '', headerHozAlign: "center", field: "FilePath", width: 10, hozAlign: "left", visible: false, formatter: customAttachmentFormatter, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            //cell.getElement().classList.add('active-cell');
                            if (cell.getElement()) {
                                cell.getElement().classList.add('active-cell');
                            }
                        },
                    },
                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
                    { title: "DocType", field: "DocType", movable: false, headerSort: false, visible: false },
                    { title: "PurchaseDate", field: "PurchaseDate", movable: false, headerSort: false, visible: false },
                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
                    { title: "NetAmount", field: "NetAmount", movable: false, headerSort: false, visible: false },
                    { title: "CurrencyRate", field: "CurrencyRate", movable: false, headerSort: false, visible: false },

                    { title: "Customer Id", field: "CustomerId", movable: false, headerSort: false, visible: false },
                    {
                        title: "CUSTOMER<span style=\"color: red; \"></span>",
                        field: "Name",
                        frozen: false,
                        editable: true,
                        headerSort: false,
                        headerHozAlign: "center",

                        formatter: "html",
                        editor: customerEditor,
                        editorParams: {
                            listOnEmpty: true,
                            autocomplete: true,
                        },
                    },
                    {
                        title: "TAX",
                        field: "MasterTaxName",
                        hozAlign: "center",
                        headerHozAlign: "center",
                        sorter: "number",
                        editor: "select",
                        headerSort: false,
                        headerHozAlign: "center",
                        visible: docTypeValue !== "Supplier PO",
                        editorParams: {
                            values: selectedTax.map(option => option.Text),
                        },
                        cellEdited: async function (cell) {
                            // Update the hidden column ("HiddenValue") with the selected value
                            var selectedText = cell.getValue();
                            var selectedValue = selectedTax.find(option => option.Text === selectedText);

                            if (selectedValue) {
                                cell.getRow().update({ MasterTaxId: selectedValue.Value });
                                var rowData = cell.getRow().getData();

                                var amount = rowData.Amount;
                                var taxId = selectedValue.Value;

                                // setTaxAmount(taxId);
                            }
                        },
                    },
                    {
                        title: "Hidden Tax",
                        field: "MasterTaxId",
                        visible: false,
                        editor: "input",
                    },
                    {
                        title: "Tax",
                        field: "VAT",
                        visible: false,
                        editor: "input",
                    },
                    {
                        title: "TDS",
                        field: "TDS",
                        visible: false,
                        editor: "input",
                    },
                    {
                        title: "VDS",
                        field: "VDS",
                        visible: false,
                        editor: "input",
                },
                {
                    title: "",
                    field: "Delete",
                    movable: false,

                    formatter: function (cell, formatterParams) {
                        return "<i class='fas fa-trash-alt delete-icon'></i>";
                    },
                    width: "6px",
                    headerSort: false,
                    cellClick: function (e, cell) {
                        var rowData = cell.getRow().getData();
                        var row = cell.getRow();
                        deleteRow(row);


                    }
                }
                // {
                //     title: "IsInclusive",
                //     field: "IsInclusive",
                //     headerSort: false,
                //     editable: true,
                //     hozAlign: "center",
                //     headerHozAlign: "center",
                //     movable: false,
                //     formatter: "tickCross",
                //     editor: true,
                //     formatterParams: { crossElement: false },
                //     cellEdited: function(cell) {
                //         var isChecked = cell.getValue();
                //         var rowData = cell.getRow().getData();
                //         var criteria = 'exclusive';

                //         var amount = rowData.Rate * rowData.Quantity; 

                //         if(isChecked) {
                //             criteria = 'inclusive'; 
                //         }
                //         SingletaxDropdownChange(rowData.MasterTaxId, amount, rowData.ProductId, criteria, function (functionamount) {
                //             setTimeout(function () {
                //                 cell.getRow().update({ Rate: functionamount / rowData.Quantity, Amount: functionamount });

                //                 calculateTotalSum();
                //             }, 500);
                //             //setTaxAmountForTaxFilter();
                //         });
                //     }
                // }


                ];
            if ('@ViewBag.DocTypeValue' === "Supplier PO") {
                localFieldsForSecondTable.forEach(function (column) {
                    if (column.field === "ColorName" || column.field === "SizeName" || column.field === "BuyerPO") {
                        column.visible = true;
                    }
                });
            }

                var difference;

                var sampletableCategoryData = [
                    { SLNo: 1, PurchaseId: @ViewBag.PurchaseId }
                ];
                var sampletablItemeData = [
                    { SLNo: 1, PurchaseId: @ViewBag.PurchaseId }
                ];


                //if (isMultiCurrency == 0) { //
                //    $('#CountryId').prop("disabled", true);

                //}
                tableCategory = new Tabulator("#tabulatorCategoryGrid", {
                    height: "auto",
                    layout: "fitColumns",
                    data: sampletableCategoryData,
                    columns: [
                        ...localFieldsForFirstTable,
                        {
                            title: "",
                            field: "Delete",
                            movable: false,
                            
                            formatter: function (cell, formatterParams) {
                                return "<i class='fas fa-trash-alt delete-icon'></i>";
                            },
                            width: "6px",
                            headerSort: false,
                            cellClick: function (e, cell) {
                                var rowData = cell.getRow().getData();
                                var row = cell.getRow();
                                deleteRow(row);
                                table1.clearData();
                                setTaxAmount();
                            }
                        }
                    ],
                    cellEdited: function (cell) {
                        // Check if the "Amount" cell is empty (value is not provided)
                        if (cell.getColumn().getField() === "Amount" && cell.getValue() === null) {
                            // Display an error message in the specified <span> element
                            $("#category-table-validation").text("Please enter an amount.");
                        } else {
                            // Clear the error message if the "Amount" cell has a value
                            $("#category-table-validation").text("");
                        }
                    },

                    movableRows: true,
                    movableColumns: true,

                    responsiveLayout: true

                });

                tableItems = new Tabulator("#tabulatorItemsGrid", {
                    height: "auto",
                    layout: "fitColumns",
                    data: sampletablItemeData,
                    columns: [
                        ...localFieldsForSecondTable,
                        {
                            title: "",
                            field: "Delete",
                            movable: false,

                            formatter: function (cell, formatterParams) {
                                return "<i id='delete-row' class='fas fa-trash-alt delete-icon'></i>";
                            },
                            width: "6px",
                            headerSort: false,
                            cellClick: function (e, cell) {
                                var rowData = cell.getRow().getData();
                                var row = cell.getRow();
                                deleteRowForItem(row);
                                table1.clearData();
                                setTaxAmount();
                            }
                        }
                    ],
                    cellEdited: function (cell) {
                        // Check if the "Amount" cell is empty (value is not provided)
                        if (cell.getColumn().getField() === "Amount" && cell.getValue() === null) {
                            // Display an error message in the specified <span> element
                            $("#item-table-validation").text("Please enter an amount.");
                        }
                        if (cell.getColumn().getField() === "Quantity" && cell.getValue() === null) {
                            // Display an error message in the specified <span> element
                            $("#item-table-validation").text("Please enter an quantity.");
                        }
                        if (cell.getColumn().getField() === "Rate" && cell.getValue() === null) {
                            // Display an error message in the specified <span> element
                            $("#item-table-validation").text("Please enter an rate.");
                        }
                        else if(cell.getColumn().getField() === "Rates" && cell.getValue() !== null)
                        {
                            var rate = parseFloat(cell.getValue());
                            var row = cell.getRow();
                            var qty = parseFloat(row.getCell("InputQuantity").getValue());
                            var currencyRate = parseFloat($("#CurrencyRate").val());

                            if (!isNaN(rate) && !isNaN(qty)) {
                                var amount = (qty * rate).toFixed(4);
                                var defaultAmount = (rate * currencyRate).toFixed(4);

                                // Set new values for "Amount" and other relevant cells
                                row.getCell("Amount").setValue(amount);
                                row.getCell("DefaultPrice").setValue(defaultAmount);

                                // Call success function or any other additional function
                                calculateTotalSum();
                            } else {
                                console.error("Invalid Rate or Quantity");
                            }
                        }
                        else {
                            // Clear the error message if the "Amount" cell has a value
                            $("#item-table-validation").text("");
                        }
                    },

                    movableRows: true,
                    movableColumns: true,

                    responsiveLayout: true

                });


                var columns1 = [
                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                    { title: "TaxId", field: "TaxId", movable: false, headerSort: false, visible: false },
                    { title: "", field: "Nickname", headerSort: false, width: 200 },
                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
                    { title: "IsSum", field: "IsSum", movable: false, headerSort: false, visible: false },
                    {
                        title: "",
                        field: "Amount",
                        hozAlign: "center",
                        headerSort: false,
                        editor: "input",
                        bottomCalc: "sum",
                        bottomCalcFormatter: "money",
                        bottomCalcFormatterParams: {
                            decimal: ".",
                            thousand: ",",
                            precision: 2
                        },

                    }
                ];

                table1 = new Tabulator("#seperate-tax", {
                    layout: "fitColumns",
                    addRowPos: "bottom",
                    headerVisible: false,
                    columns: columns1
                });

            var termcolumns = [
                {
                    headerSort: false,
                    field: "drag",
                    frozen: true,
                    formatter: function (cell, formatterParams) {
                        return "<i class='fas fa-bars drag-icon'></i>";
                    },
                    width: 30,
                    headerSort: false,
                    rowHandle: true,


                },
                { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                { title: "Terms Name", field: "TermsName", headerSort: false, frozen: true, editor: 'input' },
                { title: "Description", field: "TermsDescription", headerSort: false, frozen: true, editor: 'input' }
            ];



            var deleteColumn = {
                title: "",
                field: "Delete",
                movable: false,
                formatter: function (cell, formatterParams) {
                    return "<i class='fas fa-trash-alt delete-icon'></i>";
                },
                width: 30,
                headerSort: false,
                cellClick: function (e, cell) {
                    var rowData = cell.getRow().getData();
                    var row = cell.getRow();
                    deleteRow(row);
                }
            };

            termcolumns.push(deleteColumn);

            var termtable = new Tabulator("#termTable", {
                layout: "datafir",
                addRowPos: "bottom",
                columns: termcolumns,
            });

            document.getElementById("add-term").addEventListener("click", function () {
                termtable.addRow({});
            });

            document.getElementById("del-term").addEventListener("click", function () {
                termtable.clearData();
            });

            $('#TermsId').on('select2:select', function (e) {
                var selectedValue = $(this).val();

                $.ajax({
                    type: "GET",
                    url: '@Url.Action("getsubTerms", "Purchase")',
                    data: { id: selectedValue },
                    dataType: "json",
                    success: function (data) {
                        // Handle the response data here
                        console.log(data);
                        termtable.setData(data.data);
                    },
                    error: function (xhr, status, error) {
                        // Handle errors here
                        console.error("An error occurred: " + status + "\n" + error);
                    }
                });
            });

            function initializeFiscalMonthForEdit(date, FiscalMonthId) {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetFiscalMonthDateWise", "Accounts")',
                    data: { fiscalDate: date },
                    datatype: "Json",
                    success: function (data) {

                        if (data.length > 1) {
                            $("#FiscalMonthDiv").removeClass('d-none');
                        }
                        else {
                            $("#FiscalMonthDiv").addClass('d-none');
                        }
                        $('#FiscalMonthId').empty();
                        $.each(data, function (index, value) {
                            $('#FiscalMonthId').append('<option value="' + value.Id + '" >' + value.MonthName + '</option>');
                        });
                        console.log($('#FiscalMonthId').val());
                        $("#FiscalMonthId").val(FiscalMonthId).trigger('change');
                    }
                });
            }

                function initializeTaxData(data) {


                    if (table1) {
                        table1.setData(data);
                    } else {
                        table1 = new Tabulator("#seperate-tax", {
                            layout: "fitColumns",
                            addRowPos: "bottom",
                            columns: columns1,
                            data: data,
                        });

                    }
                }

                var customerDropdown = $("#Supplier");

                customerDropdown.on("select2:select", function () {

                    table1.clearData();
                var initvalue = 0
                document.getElementById("total").textContent = initvalue.toFixed(4);
                document.getElementById("subtotal").textContent = initvalue.toFixed(4);
                document.getElementById("totalInBDT").textContent = initvalue.toFixed(4);
                });

                function setSingleTaxAmount(taxId, Amount, callback) {
                    
                    var value;
                    $.ajax({
                            url: '@Url.Action("ProductWiseTax", "Sales")',
                            type: 'GET',
                            data: { taxes: taxId, amounts: Amount },
                            success: function (response) {
                                if (response.Data.length > 0) {
                                    var tds = response.tds.toFixed(2);
                                    var vds = response.vds.toFixed(2);
                                    var data = response.VAT;

                                    value = response;
                            callback(data, tds, vds);
                                } 
                                
                            },
                            error: function (error) {
                                reject(error);
                            }
                    });
                }


                function setTaxAmount() {
                    const masterTaxIds = [];
                    const masterAmounts = [];
                    const rows = tableCategory.getRows();
                    const rows1 = tableItems.getData();

                    rows.forEach(function (row) {
                        const masterTaxId = row.getData().MasterTaxId;
                        const masterAmount = row.getData().Amount;
                        //console.log(masterQTY);
                        if (masterTaxId != undefined) {
                            masterTaxIds.push(masterTaxId);
                            //masterAmounts.push(masterAmount);
                            masterAmounts.push(masterAmount);

                        setSingleTaxAmount(masterTaxId, masterAmount, function (data, tds, vds) {

                            // row.VAT = data[0]?.Amount || 0; // Use optional chaining and default value
                            // row.TDS = tds;
                            // row.VDS = vds;
                            row.getCell("VAT").setValue(data || 0); // Update VAT column
                            row.getCell("TDS").setValue(tds);                  // Update TDS column
                            row.getCell("VDS").setValue(vds);
                        });
                        }
                    });
                    //tableCategory.setData(rows);

                    rows1.forEach(function (row) {
                        const masterTaxId = row.MasterTaxId;
                        const masterAmount = row.Amount;
                        const masterQTY = row.InputQuantity;
                        const masterRate = row.Rate;
                        if (masterTaxId != undefined) {
                            masterTaxIds.push(masterTaxId);
                            masterAmounts.push(masterQTY * masterRate);

                            setSingleTaxAmount(masterTaxId, masterAmount, function (data, tds, vds) {

                                    row.VAT = data || 0; // Use optional chaining and default value
                                    row.TDS = tds;
                                    row.VDS = vds;
                            });
                        }
                    });

                    tableItems.setData(rows1);


                    if (masterTaxIds.length > 0) {
                        ////console.log(masterTaxIds);
                        const taxString = masterTaxIds.join(',');
                        const amountString = masterAmounts.join(',');
                        ////console.log(taxString);

                        $.ajax({
                            url: '@Url.Action("ProductWiseTax", "Sales")',
                            type: 'GET',
                            data: { taxes: taxString, amounts: amountString },
                            success: function (response) {

                                if (response.Data.length > 0) {
                                    // Load data into the table
                                    document.getElementById("tds").textContent = response.tds.toFixed(2);
                                    table1.setData(response.Data);
                                    calculateTotalSum();
                                }
                            },
                            error: function (error) {
                                // Handle errors here
                                console.error(error);
                            }
                        });
                    }

                }
                if ('@ViewBag.DocTypeValue' !== 'Opening Stock') {
                    tableCategory.on("cellEdited", function (cell) {

                        setTaxAmount();
                    });
                }

                tableItems.on("cellEdited", function (cell) {

                    setTaxAmount();
                });


                function setTaxAmountForTaxFilter() {
                    const masterTaxIds = [];
                    const masterAmounts = [];
                    const rows = tableItems.getRows();
                    var currentData = tableItems.getData();

                    const rows1 = tableCategory.getRows();
                    var currentData1 = tableCategory.getData();

                    currentData.forEach(function (row) {
                        const masterTaxId = row.MasterTaxId;
                        const masterQTY = row.Quantity;
                        const masterRate = row.Rate;
                        const masterAmount = row.Amount;
                        if (masterTaxId != undefined) {
                            masterTaxIds.push(masterTaxId);
                            masterAmounts.push(masterQTY * masterRate);
                        }
                    });

                    currentData1.forEach(function (row) {
                        const masterTaxId = row.MasterTaxId;
                        const masterAmount = row.Amount;
                        if (masterTaxId != undefined) {
                            masterTaxIds.push(masterTaxId);
                            masterAmounts.push(masterAmount);
                        }
                    });


                    if (masterTaxIds.length > 0) {
                        ////console.log(masterTaxIds);
                        const taxString = masterTaxIds.join(',');
                        const amountString = masterAmounts.join(',');
                        const selectedValue = $("#AmountsAre").val();
                        //console.log(selectedValue);

                        $.ajax({
                            url: '@Url.Action("ProductWiseTax", "Sales")',
                            type: 'GET',
                            data: { taxes: taxString, amounts: amountString, criteria: selectedValue },
                            success: function (response) {

                                if (response.Data.length > 0) {
                                    document.getElementById("tds").textContent = response.tds.toFixed(2);
                                    table1.setData(response.Data);
                                    calculateTotalSum();
                                    //calculateTaxAmount();
                                }
                            },
                            error: function (error) {
                                // Handle errors here
                                console.error(error);
                            }
                        });
                    }
                }

               

                function taxDropdownChange(selectedValue) {
                    const masterTaxIds = [];
                    const masterAmounts = [];
                    const masterProducts = [];
                    const rows = tableItems.getRows(); // Assuming you have a reference to the Tabulator table

                    rows.forEach(function (row) {

                        const masterTaxId = row.getData().MasterTaxId;
                        const masterQTY = row.getData().Quantity ?? 1;
                        const masterRate = row.getData().Rate;
                        const masterProduct = row.getData().ProductId;
                        if (masterTaxId != undefined) {
                            masterTaxIds.push(masterTaxId);
                            masterAmounts.push(masterQTY * masterRate);
                            masterProducts.push(masterProduct);
                        }
                    });

                    if (masterTaxIds.length > 0) {
                        const taxString = masterTaxIds.join(',');
                        const amountString = masterAmounts.join(',');
                        const productString = masterProducts.join(',');
                        var currentData = tableItems.getData();

                        if (selectedValue !== 'outscope') {
                            $.ajax({
                                url: '@Url.Action("ProductWiseChangeRate", "Sales")',
                                type: 'GET',
                                data: { taxes: taxString, amounts: amountString, products: productString, criteria: selectedValue },
                                success: function (response) {
                                    if (response.Success === 1) {
                                        var updatedData = currentData.map(function (row, index) {
                                            return {
                                                ...row,
                                                Rate: response.Data[index] / row.Quantity,
                                                Amount: response.Data[index] 
                                            };
                                        });

                                        tableItems.setData(updatedData);
                                        tableItems.redraw(true);
                                        calculateTotalSum();
                                        //setTaxAmountForTaxFilter();
                                    } else {
                                        console.error('Error updating rates:', response.Ex);
                                    }
                                },
                                error: function (error) {
                                    console.error(error);
                                }
                            });
                        }
                        else {
                            var updatedData = currentData.map(function (row, index) {
                                return {
                                    ...row,
                                    MasterTaxId: undefined,
                                    MasterTaxName: undefined
                                };
                            });

                            tableItems.setData(updatedData);
                            tableItems.redraw(true);
                            //setTaxAmountForTaxFilter();
                        }

                    }


                    ////////////// For category table *****************??

                    const masterTaxIds1 = [];
                    const masterAmounts1 = [];
                    const rows1 = tableCategory.getRows(); // Assuming you have a reference to the Tabulator table

                    rows1.forEach(function (row) {

                        const masterTaxId = row.getData().MasterTaxId;
                        const masterAmount = row.getData().Amount;
                        if (masterTaxId != undefined) {
                            masterTaxIds1.push(masterTaxId);
                            masterAmounts1.push(masterAmount);
                        }
                    });


                    if (masterTaxIds1.length > 0) {
                        const taxString = masterTaxIds1.join(',');
                        const amountString = masterAmounts1.join(',');
                        var currentData = tableCategory.getData();

                        if (selectedValue !== 'outscope') {
                            $.ajax({
                                url: '@Url.Action("CategoryWiseChangeRate", "Sales")',
                                type: 'GET',
                                data: { taxes: taxString, amounts: amountString, criteria: selectedValue },
                                success: function (response) {
                                    if (response.Success === 1) {
                                        var updatedData = currentData.map(function (row, index) {
                                            return {
                                                ...row,
                                                Amount: response.Data[index]
                                            };
                                        });

                                        tableCategory.setData(updatedData);
                                        tableCategory.redraw(true);
                                        //setTaxAmountForTaxFilter();
                                    } else {
                                        console.error('Error updating rates:', response.Ex);
                                    }
                                },
                                error: function (error) {
                                    console.error(error);
                                }
                            });
                        }
                        else {
                            var updatedData = currentData.map(function (row, index) {
                                return {
                                    ...row,
                                    MasterTaxId: undefined,
                                    MasterTaxName: undefined
                                };
                            });

                            tableCategory.setData(updatedData);
                            tableCategory.redraw(true);
                            //setTaxAmountForTaxFilter();
                        }

                    }

                    if (masterTaxIds.length > 0 || masterTaxIds1.length > 0) {
                        setTaxAmountForTaxFilter();
                    }
                }

                $("#AmountsAre").on("change", function () {
                    var selectedValue = $(this).val();
                    taxDropdownChange(selectedValue);
                });



                calculateTotalSum();

                // Function to calculate the total sum
                function calculateTotalSum() {
                    ////console.log("totalAmountCategory", totalAmountCategory);
                    var rows = table1.getRows();

                    var rows2 = tableItems.getRows();
                    var rows1 = tableCategory.getRows();

                    var sumAmount = 0;
                    var sumAmount1 = 0;
                    var sumAmount2 = 0;

                    rows.forEach(function (row) {
                        if(row.getData().IsSum === true)
                        {
                            sumAmount += parseFloat(row.getData().Amount) || 0;
                        }
                    });

                    rows1.forEach(function (row) {
                        sumAmount1 += parseFloat(row.getData().Amount) || 0;
                    });

                    rows2.forEach(function (row) {
                        sumAmount2 += parseFloat(row.getData().Amount) || 0;
                    });
                    var totalAmount = sumAmount1 + sumAmount2 + sumAmount;
                    var totalAmount1 = sumAmount1 + sumAmount2;
                    ////console.log("totalAmount dekhi", totalAmount);
                    // Update the "balance-due" HTML element with the summed value
                    const amountDisplay = document.getElementById("balance-due") == null ? 0 : document.getElementById("balance-due")
                    amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });

                    const amountSubTotal = document.getElementById("subtotal");
                    amountSubTotal.textContent = isNaN(totalAmount1) ? "" : '$' + totalAmount1.toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });

                    const amountTotal = document.getElementById("total");
                    amountTotal.textContent = isNaN(totalAmount) ? "" : totalAmount.toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });

                    var currencyRate = $("#CurrencyRate").val();
                    const amountTotalInBDT = document.getElementById("totalInBDT");
                    amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toLocaleString('en-US', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                }

                ////////////////// ****** editing mode ********//////////////

                var parent = [];
                var tabulatorData = [];
                var secondTabulatorData = [];
                var transactionMethodData = [];
                function formatDateToCustomString(inputDate) {
                    const months = [
                        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                    ];

                    if (inputDate instanceof Date && !isNaN(inputDate)) {
                        const day = inputDate.getDate();
                        const monthIndex = inputDate.getMonth();
                        const year = inputDate.getFullYear();

                        const formattedDate = `${day}-${months[monthIndex]}-${year}`;
                        return formattedDate;
                    } else {
                        return inputDate;
                    }
                }
                

                function GetRecurringDetails(TrxnId) {
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetRecurringDetails", "Accounts")',
                        data: { id: TrxnId },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#recurr-id").val(model.Id);
                            $("#temp-name").val(model.TemplateName);
                            $("#RecurringType").val(model.TemplateType);
                            $("#create-days").val(model.CreateDays);
                            $("#Interval").val(model.Interval).trigger('change');
                            $("#Week").val(model.Week_);
                            $("#Month").val(model.Month_);
                            $("#Integer").val(model.Integer_);
                            $("#Count").val(model.Count_).trigger('change');
                            $("#every").val(model.Every_);
                            $("#End").val(model.End_);
                            $("#occurences").val(model.occurences);
                            $("#occurences").val(model.occurences);
                            $("#recurring-start-date").val(formatDateToCustomString(new Date(model.RecurringStartDate)));
                            $("#recurring-end-date").val(formatDateToCustomString(new Date(model.RecurringEndDate)));

                            if (model.TemplateType === "Scheduled") {
                                document.getElementById("before-create-days").innerText = "Create";
                                $("#create-days").removeClass("d-none");
                                $("#after-create-days").removeClass("d-none");
                                $("#IntervalDiv").removeClass("d-none");
                            }
                            if (model.TemplateType === "Reminder") {
                                document.getElementById("before-create-days").innerText = "Remind";
                                $("#create-days").removeClass("d-none");
                                $("#after-create-days").removeClass("d-none");
                                $("#IntervalDiv").removeClass("d-none");
                            }
                            if (model.TemplateType === "Unscheduled") {
                                document.getElementById("before-create-days").innerText = "Unscheduled transactions don’t have timetables.";

                                $("#create-days").addClass("d-none");
                                $("#after-create-days").addClass("d-none");
                                $("#IntervalDiv").addClass("d-none");
                            }
                            if (model.Interval === 'Daily') {
                                document.getElementById("before-every").innerText = "every";
                                document.getElementById("after-interval").innerText = "day(s)";
                                $("#every").removeClass("d-none");
                                $("#Week").addClass("d-none");
                                $("#Count").addClass("d-none");
                                $("#Integer").addClass("d-none");
                                $("#Month").addClass("d-none");
                            }
                            if (model.Interval === 'Weekly') {
                                document.getElementById("before-every").innerText = "every";
                                document.getElementById("after-interval").innerText = "week(s) on";
                                $("#every").removeClass("d-none");
                                $("#Week").removeClass("d-none");
                                $("#Count").addClass("d-none");
                                $("#Integer").addClass("d-none");
                                $("#Month").addClass("d-none");

                            }
                            if (model.Interval === 'Monthly') {
                                document.getElementById("before-every").innerText = "of every";
                                document.getElementById("after-interval").innerText = "month(s) on";
                                $("#every").removeClass("d-none");
                                $("#Week").addClass("d-none");
                                $("#Count").removeClass("d-none");
                                $("#Integer").removeClass("d-none");
                                $("#Month").addClass("d-none");
                            }
                            if (model.Interval === 'Yearly') {
                                document.getElementById("before-every").innerText = "every";
                                document.getElementById("after-interval").innerText = "";
                                $("#every").addClass("d-none");
                                $("#Week").addClass("d-none");
                                $("#Count").addClass("d-none");
                                $("#Integer").removeClass("d-none");
                                $("#Month").removeClass("d-none");
                            }
                            if (model.End_ === 'None') {
                                $("#recurringEndDiv").addClass("d-none");
                                $("#occurencesDiv").addClass("d-none");
                                $("#occurencesSpan").addClass("d-none");
                            }
                            if (model.End_ === 'By') {
                                $("#recurringEndDiv").removeClass("d-none");
                                $("#occurencesDiv").addClass("d-none");
                                $("#occurencesSpan").addClass("d-none");
                            }
                            if (model.End_ === 'After') {
                                $("#recurringEndDiv").addClass("d-none");
                                $("#occurencesDiv").removeClass("d-none");
                                $("#occurencesSpan").removeClass("d-none");
                            }
                            if (model.Count_ === 'day') {
                                $("#Week").addClass("d-none");
                                $("#Count").removeClass("d-none");
                                $("#Integer").removeClass("d-none");
                                $("#Month").addClass("d-none");
                            }
                            else {
                                $("#Week").removeClass("d-none");
                                $("#Count").removeClass("d-none");
                                $("#Integer").addClass("d-none");
                                $("#Month").addClass("d-none");
                            }
                            $("#top-row").addClass("d-none");
                            $("#makeRecurringDiv").addClass("d-none");
                            $("#First-row-Recurring").removeClass("d-none");
                            $("#IntervalDiv").removeClass("d-none");
                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }
                function AdvPurchasePaymentDetails() {
                var id = @ViewBag.PurchaseId;
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetAdvanceTrxDetails", "Accounts")',
                        data: { id: id },
                        dataType: "json",
                        success: function (response) {
                            console.log(response.data);
                            var model = response.data;
                            $("#adv_details").removeClass("d-none");
                            $("#adv-trxn-id").val(model.Id);
                            $("#every_adv").val(model.Duration);
                            $("#adv_occurences").val(model.Occurence);
                            $("#expenseHead").val(model.ExpenseHeadId).change();
                            $("#adv-start-date").val(formatDateToCustomString(new Date(model.StartDate)));
                            $("#adv_Integer").val(model.OccuringDate).trigger('change');
                            const IsRecogni = document.getElementById("isRecognition");
                            IsRecogni.checked = true;

                        },
                        error: function (error) {
                            console.error("Error fetching data: " + error);
                        }
                    });
                }
                function getPurchase(id) {
                    return $.ajax({
                        type: 'GET',
                        datatype: "Json",
                        /* url: "../Accounts/GetPurchase",*/
                        url: "@Url.Action("GetPurchase", "Accounts")",
                        data: { "PurchaseId": id, isCopy: @ViewBag.IsCopy, CopyBill: '@ViewBag.CopyBill', ProductId: @ViewBag.ProductId }
                    });
                }

                var PurchaseIddata = $("#BtnSave").attr("data-purchase-Id");
                var ProductId = '@ViewBag.ProductId';
                // alert("sasa");
                if (('@ViewBag.DocTypeValue' === 'Stock Adjustment' && '@ViewBag.ActionType' !== 'Edit') || '@ViewBag.DocTypeValue' === 'Opening Stock') {
                    PurchaseIddata = 1;
                }



                if (PurchaseIddata > 0) {
                    var button = document.getElementById("unknown");
                    var button1 = document.getElementById("unknown1");
                    button1.style.display = "inline-block";
                    button.style.display = "none";
                    button.value = "New";
                    button.classList.remove("btn-warning"); // Remove the orange color class
                    button.classList.add("btn-danger"); // Add the red color class
                    button.onclick = function () {
                        var link = $(this).attr("href");

                    };
                    //console.log(getPurchase(PurchaseIddata));
                    if ('@ViewBag.DocTypeValue' === 'Stock Adjustment') {
                        $.when(getPurchase(PurchaseIddata)).then(function (response) {

                            //console.log("ajke abar response dekhi::", response);


                            res = response.purchase;
                            let items = res.Items;
                            if ('@ViewBag.ActionType' === 'Create') {
                                items.forEach((item) => {
                                    const tempQuantity = item.Quantity;
                                    item.Quantity = item.QTYOnHand;
                                    item.QTYOnHand = tempQuantity;
                                });
                            }

                            $("#Id").val(res.Id);
                            tableItems = new Tabulator("#tabulatorItemsGrid", {
                                height: "auto",
                                layout: "fitColumns",
                                headerSort: false,
                                data: items,
                                columns: [
                                    {
                                        headerSort: false,
                                        field: "drag",
                                        frozen: true,
                                        width: "3px",
                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-bars drag-icon'></i>";
                                        },
                                        headerSort: false,
                                        rowHandle: true,


                                    },
                                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false, editor: true, },
                                    {
                                        title: "isTransaction",
                                        field: "isTransaction",
                                        headerSort: false,
                                        editable: true,
                                        movable: false,
                                        visible: false,
                                        formatter: "tickCross",
                                        editor: true,
                                        formatterParams: { crossElement: true }, // Set the default value to true (tick)
                                    },
                                    { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '3px', bottomCalc: "count", hozAlign: "right" },
                                    { title: "ProductId", field: "ProductId", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false, editor: false, },

                                    {
                                        title: "PRODUCT/SERVICE",
                                        field: "ProductName",
                                        frozen: true,
                                        editable: true,
                                        headerSort: false,

                                        formatter: "html",
                                        editor: productEditor,
                                        editorParams: {
                                            listOnEmpty: true,
                                            autocomplete: true,
                                        },
                                    },

                                    { title: "SKU", field: "SKU", headerSort: false, movable: false, editable: true },
                                    {
                                        title: "Primary Unit Id",
                                        field: "PrimaryUnitId",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "Unit",
                                        field: "Unit",
                                        headerHozAlign: "center",
                                        hozAlign: "center",
                                        sorter: "number",
                                        editor: unitEditor,
                                    },
                                    {
                                        title: "Secondary Unit Id",
                                        field: "SecondaryUnitId",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "ConversionRate",
                                        field: "ConversionRate",
                                        visible: false,
                                        editor: "input",
                                    },
                                    { title: "DESCRIPTION", headerSort: false, field: "Description", movable: false, editor: "input", editable: true },
                                    { title: "ParentId", field: "PurchaseItemsId", movable: false, headerSort: false, visible: false },
                                    {
                                        title: "Unique Column",
                                        field: "UniqueColumData", // Use a unique field name
                                        headerSort: false,
                                        //formatter: generateUniqueId,
                                        movable: false,
                                        editor: false, // You may want to disable editing for this column
                                        visible: false, // Set the visibility as needed
                                    },


                                    {
                                        title: "TotalQty",
                                        field: "Quantity",
                                        editable: false,
                                        bottomCalc: "sum",
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        editor: "input",
                                        default: 1,
                                        editor: qtyEditor
                                    },
                                    {
                                        title: "Quantity",
                                        field: "InputQuantity",
                                        visible: false,
                                        editor: "input", bottomCalc: "sum", hozAlign: "center", headerHozAlign: "center",
                                        cellEdited: function (cell, formatterParams) {
                                            var rowData = cell.getRow().getData();
                                            if ((rowData.PrimaryUnitId === rowData.SecondaryUnitId) || (rowData.SecondaryUnitId === undefined)) {
                                                var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(4);
                                                cell.getRow().update({ Quantity: rowData.InputQuantity, Amount: amount });
                                            }
                                            else {
                                                var conversionRate = rowData.ConversionRate;
                                                var costprice = (rowData.CostPrice / conversionRate).toFixed(2);
                                                //var price = (rowData.Price/ conversionRate).toFixed(2);
                                                //var defaultPrice = (rowData.DefaultPrice/ conversionRate).toFixed(4);
                                                var qty = (rowData.InputQuantity / conversionRate).toFixed(2);
                                            var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(2);
                                                cell.getRow().update({ Quantity: qty, CostPrice: costprice, Amount: amount });
                                            }
                                            
                                            calculateTotalSum();
                                        },
                                    },
                                    {
                                        title: "UsedQty",
                                        field: "UsedQty",
                                        editable: false,
                                        bottomCalc: "sum",
                                        hozAlign: "right",
                                        headerSort: false,
                                        visible: false,
                                        movable: false,
                                        editor: "input",
                                        default: 1,
                                        editor: qtyEditor
                                    },
                                    {
                                        title: "Quantity On Hand",
                                        field: "QTYOnHand",
                                        editable: true,
                                        bottomCalc: "sum",
                                        headerHozAlign: "center",
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        default: 1,
                                        editor: qtyEditor
                                    },
                                    {
                                        title: "RATE",
                                        field: "Rate", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        bottomCalc: "sum",
                                        headerHozAlign: "center",
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        cellEdited: function (cell) {
                                            var rate = parseFloat(cell.getValue());
                                            var row = cell.getRow();
                                            var qty = parseFloat(row.getCell("InputQuantity").getValue());
                                            var currencyRate = parseFloat($("#CurrencyRate").val());

                                            if (!isNaN(rate) && !isNaN(qty)) {
                                                var amount = (qty * rate).toFixed(4);
                                                var defaultAmount = (rate * currencyRate).toFixed(4);

                                                // Set new values for "Amount" and other relevant cells
                                                row.getCell("Amount").setValue(amount);
                                                row.getCell("DefaultPrice").setValue(defaultAmount);

                                                // Call success function or any other additional function
                                                calculateTotalSum();
                                            }
                                            else {
                                                console.error("Invalid Rate or Quantity");
                                            }
                                        }
                                    },

                                    {
                                        title: "SecondaryPrice",
                                        field: "SecondaryPrice", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center"
                                    },
                                    {
                                        title: "Price",
                                        field: "Price", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center",
                                        //editor: rateEditor
                                    },
                                    {
                                        title: "",
                                        field: "DefaultPrice", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center"
                                    },
                                    {
                                        title: "AMOUNT",
                                        field: "Amount", // Corrected: Use the correct field name from your data
                                        editable: false,
                                        bottomCalc: "sum",
                                        headerHozAlign: "right",
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        editor: "input"
                                    },
                                    {
                                        title: '', headerHozAlign: "center", field: "FilePath", hozAlign: "left", visible: false, formatter: customAttachmentFormatter, cellClick: function (e, cell) {
                                            // Add a custom class to the cell when it's clicked
                                            //cell.getElement().classList.add('active-cell');
                                            if (cell.getElement()) {
                                                cell.getElement().classList.add('active-cell');
                                            }
                                        },
                                    },
                                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
                                    { title: "DocType", field: "DocType", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseDate", field: "PurchaseDate", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
                                    { title: "NetAmount", field: "NetAmount", movable: false, headerSort: false, visible: false },
                                    { title: "CurrencyRate", field: "CurrencyRate", movable: false, headerSort: false, visible: false },
                                    { title: "Customer Id", field: "CustomerId", movable: false, headerSort: false, visible: false },
                                    {
                                        title: "CUSTOMER",
                                        field: "Name",
                                        headerHozAlign: "center",
                                        frozen: false,
                                        editable: true,
                                        headerSort: false,

                                        formatter: "html",
                                        editor: customerEditor,
                                        editorParams: {
                                            listOnEmpty: true,
                                            autocomplete: true,
                                        },
                                    },
                                    {
                                        title: "New QTY", field: "NewQTY", editable: true, headerHozAlign: "center", hozAlign: "right", headerSort: false, editor: "input", default: 0,
                                        formatter: function (cell, formatterParams) {
                                            var rowData = cell.getRow().getData();
                                            var qty = rowData.QTYOnHand || 0;
                                            var newqty = rowData.NewQTY || 0;
                                            var amount = newqty - qty;

                                            if ('@ViewBag.ActionType' === 'Create') {
                                                cell.getRow().update({ Quantity: amount });
                                            }


                                            return rowData.NewQTY;
                                        }
                                    },
                                    {
                                        title: "Change in QTY", field: "Quantity", editable: true, headerHozAlign: "center", hozAlign: "right", headerSort: false, editor: "input",
                                        formatter: function (cell, formatterParams) {
                                            var rowData = cell.getRow().getData();
                                            var qty = parseInt(rowData.Quantity) || 0;
                                            var newqty = parseInt(rowData.QTYOnHand) || 0;
                                            var amount = newqty + qty;

                                            if ('@ViewBag.ActionType' === 'Edit') {
                                                cell.getRow().update({ NewQTY: amount });
                                            }


                                            return rowData.Quantity;
                                        }
                                    },
                                    {
                                        title: "",
                                        field: "Delete",
                                        movable: false,

                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-trash-alt delete-icon'></i>";
                                        },
                                        width: "6px",
                                        headerSort: false,
                                        cellClick: function (e, cell) {
                                            var rowData = cell.getRow().getData();
                                            var row = cell.getRow();
                                            deleteRowForItem(row);


                                        }
                                    }
                                ],

                                movableRows: true,
                                movableColumns: true,

                                responsiveLayout: true

                            });
                        });
                    }
                    else if ('@ViewBag.DocTypeValue' === 'Opening Stock') {
                        $.when(getPurchase(PurchaseIddata)).then(function (response) {
                            res = response.purchase;
                            $("#Id").val(res.Id);
                            tableItems = new Tabulator("#tabulatorItemsGrid", {
                                height: "auto",
                                layout: "fitColumns",
                                headerSort: false,
                                data: res.Items,
                                columns: [
                                    {
                                        headerSort: false,
                                        field: "drag",
                                        frozen: true,
                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-bars drag-icon'></i>";
                                        },
                                        width: 30,
                                        headerSort: false,
                                        rowHandle: true,


                                    },
                                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false, editor: true, },
                                    {
                                        title: "isTransaction",
                                        field: "isTransaction",
                                        headerSort: false,
                                        editable: true,
                                        movable: false,
                                        visible: false,
                                        formatter: "tickCross",
                                        editor: true,
                                        formatterParams: { crossElement: true }, // Set the default value to true (tick)
                                    },
                                    { title: "SL.", field: "SLNo", headerSort: false, frozen: true, bottomCalc: "count", hozAlign: "right", headerHozAlign: "center" },
                                    { title: "ProductId", field: "ProductId", movable: false, headerSort: false, visible: false },

                                    {
                                        title: "PRODUCT/SERVICE",
                                        field: "ProductName",
                                        frozen: true,
                                        editable: true,
                                        headerSort: false,
                                        headerHozAlign: "center",
                                        formatter: "html",
                                        editor: productEditor,
                                        editorParams: {
                                            listOnEmpty: true,
                                            autocomplete: true,
                                        },
                                    },

                                    { title: "SKU", field: "SKU", headerSort: false, headerHozAlign: "center", movable: false, editable: true },
                                    {
                                        title: "Primary Unit Id",
                                        field: "PrimaryUnitId",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "Unit",
                                        field: "Unit",
                                        headerHozAlign: "center",
                                        hozAlign: "center",
                                        sorter: "number",
                                        editor: unitEditor,
                                    },
                                    {
                                        title: "Secondary Unit Id",
                                        field: "SecondaryUnitId",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "ConversionRate",
                                        field: "ConversionRate",
                                        visible: false,
                                        editor: "input",
                                    },
                                    { title: "DESCRIPTION", headerSort: false, headerHozAlign: "center", field: "Description", movable: false, editor: "input", editable: true },
                                    {
                                        title: "As of",
                                        field: "PurchaseDate",
                                        cssClass: "text-center",
                                        headerHozAlign: "center",
                                        formatter: function (cell, formatterParams, onRendered) {
                                            var date = new Date(cell.getValue());
                                            var day = date.getDate();
                                            var monthNames = [
                                                "Jan", "Feb", "Mar",
                                                "Apr", "May", "Jun",
                                                "Jul", "Aug", "Sep",
                                                "Oct", "Nov", "Dec"
                                            ];
                                            var monthIndex = date.getMonth();
                                            var year = date.getFullYear().toString().substr(-2); // Extract last 2 digits of year

                                            return day + '-' + monthNames[monthIndex] + '-' + year;
                                        }
                                    },
                                    {
                                        title: "Quantity",
                                        field: "Quantity",
                                        bottomCalc: "sum",
                                        hozAlign: "center",
                                        headerHozAlign: "center",
                                        headerSort: false,
                                        movable: false,
                                        default: 1,
                                        editor: qtyEditor,
                                        visible: false
                                    },
                                    {
                                        title: "Quantity",
                                        field: "InputQuantity",
                                        visible: true,
                                        editor: "input", bottomCalc: "sum", hozAlign: "center", headerHozAlign: "center",
                                        cellEdited: function (cell, formatterParams) {
                                            var rowData = cell.getRow().getData();
                                            if ((rowData.PrimaryUnitId === rowData.SecondaryUnitId) || (rowData.SecondaryUnitId === undefined)) {
                                                var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(4);
                                                cell.getRow().update({ Quantity: rowData.InputQuantity, Amount: amount });
                                            }
                                            else {
                                                var conversionRate = rowData.ConversionRate;
                                                var costprice = (rowData.CostPrice / conversionRate).toFixed(2);
                                                //var price = (rowData.Price/ conversionRate).toFixed(2);
                                                //var defaultPrice = (rowData.DefaultPrice/ conversionRate).toFixed(4);
                                                var qty = (rowData.InputQuantity / conversionRate).toFixed(2);
                                                var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(2);
                                                cell.getRow().update({ Quantity: qty, CostPrice: costprice, Amount: amount });
                                            }
                                            
                                            calculateTotalSum();
                                        },
                                    },
                                    {
                                        title: "RATE",
                                        field: "Rate",
                                        bottomCalc: "sum",
                                        hozAlign: "center",
                                        headerHozAlign: "center",
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        cellEdited: function (cell) {
                                            var rate = parseFloat(cell.getValue());
                                            var row = cell.getRow();
                                            var qty = parseFloat(row.getCell("InputQuantity").getValue());
                                            var currencyRate = parseFloat($("#CurrencyRate").val());

                                            if (!isNaN(rate) && !isNaN(qty)) {
                                                var amount = (qty * rate).toFixed(4);
                                                var defaultAmount = (rate * currencyRate).toFixed(4);

                                                // Set new values for "Amount" and other relevant cells
                                                row.getCell("Amount").setValue(amount);
                                                row.getCell("DefaultPrice").setValue(defaultAmount);

                                                // Call success function or any other additional function
                                                calculateTotalSum();
                                            }
                                            else {
                                                console.error("Invalid Rate or Quantity");
                                            }
                                        }
                                    },

                                    {
                                        title: "SecondaryPrice",
                                        field: "SecondaryPrice", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center"
                                    },
                                    {
                                        title: "Price",
                                        field: "Price", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center",
                                        //editor: rateEditor
                                    },
                                    {
                                        title: "",
                                        field: "DefaultPrice", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center"
                                    },
                                    {
                                        title: "AMOUNT",
                                        field: "Amount", // Corrected: Use the correct field name from your data
                                        hozAlign: "right",
                                        headerHozAlign: "right",
                                        editable: false,
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        formatter: function (cell, formatterParams) {
                                            var rowData = cell.getRow().getData();
                                            var qty = rowData.Quantity || 1;
                                            var newqty = rowData.Rate || 1;
                                            var amount = newqty * qty;

                                            return amount;
                                        }
                                    },

                                    {
                                        title: "",
                                        field: "Delete",
                                        movable: false,

                                        hozAlign: "center",
                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-trash-alt delete-icon'></i>";
                                        },
                                        headerSort: false,
                                        cellClick: function (e, cell) {
                                            var rowData = cell.getRow().getData();
                                            var row = cell.getRow();
                                            deleteRowForItem(row);


                                        }
                                    }
                                ],

                                movableRows: true,
                                movableColumns: true,

                                responsiveLayout: true

                            });
                        });
                    }
                    else {
                        $.when(getPurchase(PurchaseIddata)).then(function (response) {
                            //console.log(response.purchase);
                            if (response.Success == 0) {
                                //alert(res.ex);
                                toastr.success(response.ex, "", {
                                    "toastClass": "toast-red",
                                });

                                // setTimeout(function () {
                                //     window.location.href = '@Url.Action("GetPurchase", "Accounts")';
                                // }, 1000);

                                return true;
                            }
                            parent = response.purchase;
                            res = response.purchase;
                            if (res.IsRecurring == true) {
                                GetRecurringDetails(res.Id)
                            }

                            if (res.IsRecognition == true) {
                                AdvPurchasePaymentDetails(res.Id)
                            }
                            //console.log("see res", res);
                            initializeTaxData(res.PurchaseProductTax);

                            termtable.setData(res.PurchaseTerms);

                            // Initialize the sum to zero
                            let totalAmount = 0;

                            // Iterate through the 'Items' array and accumulate the sum of 'Amount'
                            for (const item of res.Items) {
                                if (item.Amount) {
                                    totalAmount += item.Amount;
                                }
                            }

                            ////console.log("Total Amount:", totalAmount)

                            var balanceDue = res.NetAmount - (res.TotalVat);

                            $("#balance-due").text(balanceDue.toLocaleString('en-US', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            }));
                            $("#subtotal").text('$' + balanceDue.toLocaleString('en-US', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            }));
                            $("#total").text(res.NetAmount.toLocaleString('en-US', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            }));

                            editingModeTrigger = 0;
                            //console.log("Category table Data::", res.ItemsCategory);
                            //console.log("item table Data::", res.Items);
                            //console.log("PurchasePayments table Data::", res.PurchasePayments);

                            //tableCategory.setData(res.ItemsCategory);
                            //tableItems.setData(res.Items);

                            if (@ViewBag.IsCopy == "2") {
                                //let idGencopy = new Generator();
                                $("#BtnSave").attr("data-purchase-Id", "0");
                                $('#PurchaseCode').val("Auto Generated");
                                //$('#PurchaseDate').val(ret);
                            }
                            else {
                                $("#PurchaseCode").val(res.PurchaseCode);

                            }

                            // $('#jsFilterGrid').hide();

                            $("#jsGridItems").jsGrid({
                                data: res.PurchaseSubs
                            })

                            // var $tagInput = $("#MultiTags");

                            // var values = res.PurchaseTags;
                            // //Iterate over each value and add it as a tag
                            // $.each(values, function (i, value) {
                            //     //console.log(value, i);
                            //     setTimeout(function () {
                            //         $tagInput.tagsinput('add', values[i].tag);
                            //     }, 100);
                            // });

                            var tagValues = res.PurchaseTags.map(function (purchaseTag) {
                                // Assuming you want to use the TagsId as the tag value
                                return purchaseTag.TagsId;
                            });

                            // Set the values in the #tagDropdown
                            $('#tagDropdown').val(tagValues).trigger('change');
                            $('#TermsId').val(res.TermsMainId).trigger('change');
                        $('#AmountsAre').val(res.AmountsAre).trigger('change');

                            ////console.log(res.PurchaseSubs.filter(item => item.SRowNo === '-1'));
                            function formatDateToCustom(dateString) {
                                const date = new Date(dateString);
                                const year = date.getFullYear();
                                const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                                const monthIndex = date.getMonth();
                                const monthName = monthNames[monthIndex];
                                const day = date.getDate();
                                return `${day}-${monthName}-${year}`;
                            }


                            $("#Id").val(res.Id);
                            $("#bill-cocde").html("#" + res.PurchaseCode ? res.PurchaseCode : "");
                            Number($('#Supplier').val(res.SupplierId).change());
                            Number($('#WarehouseIdMain').val(res.WarehouseIdMain).change());

                            //@ViewBag.DocTypeId==22 && @ViewBag.CopyBill== 1 ? null : Number($('#ship-to-customer').val(res.CustomerId).change());
                            if (@ViewBag.DocTypeId == 22 || @ViewBag.CopyBill == 1) {
                                if (@ViewBag.IsRecurring != 1) {
                                    $('#ship-to-customer').val(null);
                                }
                            }
                            else {
                                $('#ship-to-customer').val(res.CustomerId).change();
                            }
                            if('@ViewBag.DocTypeValue' == "Supplier PO")
                            {
                                $('#MasterPOId').val(res.MasterPOId).change();
                            }
                            /*Number($('#ship-to-customer').val(res.CustomerId).change());*/
                            $('#mail-address').val(res.PrimaryAddress);
                            $('#purchase-mail-address').val(res.EmailId);
                            /* $('#terms').val(res.TermsId);*/
            // @ViewBag.DocTypeId== 22 ? $('#terms').val(res.TermsId) : null;
            //                 $('#terms').change();
                        $('#terms').val(res.PaymentTermsId).change();
                            const newBillDate = new Date(res.PurchaseDate);
                            const formattedDate = formatDateToCustom(newBillDate);
                            //$('#start-date').val(formattedDate);
                            const newDueDate = new Date(res.DueDate);
                            const formattedDueDate = formatDateToCustom(newDueDate);
                            ////console.log("prochur console eta dekhi ", formattedDueDate);
                            formattedDueDate == "1970-Jan-1" ? $('#end-date').val() : $('#end-date').val(formattedDueDate);
                            const purchaseOrderDate = new Date(res.PurchaseDate);
                        initializeFiscalMonthForEdit(res.PurchaseDate, res.FiscalMonthId);
                            const formattedPurchaseOrderDate = formatDateToCustom(purchaseOrderDate);
            @ViewBag.DocTypeId== 22 ? $('#start-date').val(formattedDate) : $('#purchase-order-date').val(formattedPurchaseOrderDate);
                            ;
                            //$('#purchase-order-date').val(formattedPurchaseOrderDate);
            @ViewBag.CopyBill == 1 ? $('#bill-no').val() : $('#bill-no').val(res.PurchaseCode)
                            /*$('#bill-no').val(res.PurchaseCode);*/
                            $('#PurchaseFilePath').val(res.FilePath);
                            $('#permit-no').val(res.PermitNo);
                            Number($('#DocType').val(res.DocTypeId).change());
                            $('#memo').val(res.Remarks);
                            $('#shipping-mail-address').val(res.ShippingAddress);
                            $('#ship-via').val(res.ShipVia);
                            $('#cc-id').val(res.Cc);
                            $('#bcc-id').val(res.Bcc);
                            $('#CurrencyRate').val(res.CurrencyRate);
                            $('#MultiiCurrencyId').val(res.CurrencyId);

                            $("#tds").text(res.TDS.toLocaleString('en-US', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            }));
                            ////console.log('at before');
                            ////console.log(table.getData());
                            var selectedValue;
                            ////console.log(table);

                            ////console.log('at now');
                            ////console.log(table.getData());
                            ////console.log("see tabulator",tabulatorData);

                            //category table
                            /*if (isMultiCurrency == 1 && selectedValue != DefaultCurrencyId) {*/
                            if ('@ViewBag.DocTypeValue' == "Purchase Payment" || '@ViewBag.DocTypeValue' == "Expense" || '@ViewBag.DocTypeValue' == "Cheque" || '@ViewBag.DocTypeValue' == "Supplier credit" || '@ViewBag.DocTypeValue' == "GRR") {
                                TransactionMethodTable = new Tabulator("#transaction-method", {
                                    /*height: "300px",*/
                                    layout: "fitColumns",
                                    headerSort: false,
                                    data: res.PurchasePayments,
                                    columns: [
                                        { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                                        { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
                                        { title: "ComId", field: "ComId", movable: false, headerSort: false, visible: false },

                                        {
                                            title: "Payment by",
                                            field: "DepositTo",
                                            hozAlign: "center",
                                            sorter: "number",
                                            editor: "select",
                                            editorParams: {
                                                values: selectedCategory.map(option => option.Text),
                                            },
                                            cellEdited: function (cell) {
                                                // Update the hidden column ("HiddenValue") with the selected value
                                                var selectedText = cell.getValue();
                                                var selectedValue = selectedCategory.find(option => option.Text === selectedText);
                                                if (selectedValue) {
                                                    cell.getRow().update({ AccountHeadId: selectedValue.Value });

                                                }
                                            },
                                        },
                                        {
                                            title: "Payment Id",
                                            field: "AccountHeadId",
                                            visible: false,
                                            editor: "input",
                                        },

                                        { title: "Reference No", field: "PaymentCardNo", editor: "input" },

                                        {
                                            title: "Amount", field: "Amount", editor: "input", headerHozAlign: "right",
                                            hozAlign: "right",
                                        },
                                        {
                                            title: "",
                                            field: "Delete",
                                            movable: false,
                                            formatter: function (cell, formatterParams) {
                                                return "<i class='fas fa-trash-alt delete-icon'></i>";
                                            },
                                            width: 30,
                                            headerSort: false,
                                            cellClick: function (e, cell) {
                                                var rowData = cell.getRow().getData();
                                                var row = cell.getRow();
                                                deleteRow(row);
                                            }
                                        }
                                    ],

                                    movableRows: true,
                                    movableColumns: true,

                                    responsiveLayout: true

                                });

                            }




                            tableCategory = new Tabulator("#tabulatorCategoryGrid", { 
                                height: "auto",
                                layout: "fitColumns",
                                headerSort: false,
                                data: res.ItemsCategory,
                                columns: [
                                    {
                                        headerSort: false,
                                        field: "drag",
                                        frozen: true,
                                        width: 30,
                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-bars drag-icon'></i>";
                                        },
                                        headerSort: false,
                                        rowHandle: true,


                                    },
                                    {
                                        title: "isTransaction",
                                        field: "isTransaction",
                                        headerSort: false,
                                        editable: true,
                                        movable: false,
                                        visible: false,
                                        formatter: "tickCross",
                                        editor: true,
                                        formatterParams: { crossElement: true }, // Set the default value to true (tick)
                                    },
                                    { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '3px', bottomCalc: "count", hozAlign: "right" },
                                    {
                                        title: "CATEGORY",
                                        field: "AccName",
                                        width: 300,
                                        frozen: true,
                                        editable: true,
                                        headerSort: false,

                                        formatter: "html",
                                        editor: categoryEditor,
                                        editorParams: {
                                            listOnEmpty: true,
                                            autocomplete: true,
                                        }
                                    },





                                    { title: "AccCategory", field: "AccountCategory", movable: false, headerSort: false, visible: false },
                                    { title: "ComId", field: "ComId", movable: false, headerSort: false, visible: false },

                                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false, editor: false, },
                                    { title: "ParentId", field: "PurchaseItemsCategoryId", movable: false, headerSort: false, visible: false, width: '5px' },
                                    { title: "PurchaseId", field: "TransactionId", movable: false, headerSort: false, visible: false, editor: false, },
                                    { title: "Account Id", field: "AccId", movable: false, headerSort: false, visible: false },
                                    { title: "Name", field: "Name", editor: "input", headerSort: false, editable: true, movable: false, visible: false },


                                    { title: "DESCRIPTION", field: "Description", headerSort: false, editor: "input", movable: false, editable: true, width: 300 },
                                    {
                                        title: "AMOUNT",
                                        field: "Amount",
                                        width: 150,
                                        editable: true,
                                        headerHozAlign: "right",
                                        hozAlign: "right",
                                        headerSort: false,
                                        bottomCalc: "sum",
                                        movable: false,
                                        // bottomCalc: "sum",
                                        editor: "input",
                                        cellEdited: function (cell) {
                                        // Log the edited value to the console
                                        var editedValue = cell.getValue();
                                        ////console.log("Edited Value:", editedValue);

                                        // Calculate the sum of "Amount" column values
                                        var tableData = tableCategory.getData(); // Replace 'yourTable' with your table instance
                                        var totalAmount = 0;
                                        totalAmountCategory = 0;
                                        tableData.forEach(function (row) {
                                            if (!isNaN(row.Amount)) {
                                                totalAmount += parseFloat(row.Amount);
                                                totalAmountCategory += parseFloat(row.Amount);
                                            }
                                        });
                                        // Update the "balance-due" HTML element with the summed value
                                        const amountDisplay = document.getElementById("balance-due");
                                        amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toLocaleString('en-US', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        });

                                        const amountSubTotal = document.getElementById("subtotal");
                                        amountSubTotal.textContent = isNaN(totalAmount) ? "" : '$' + totalAmount.toLocaleString('en-US', {
                                            minimumFractionDigits: 2,
                                            maximumFractionDigits: 2
                                        });
                                        const amountTotal = document.getElementById("total");
                                        amountTotal.textContent = isNaN(totalAmount) ? "" : totalAmount.toFixed(4);
                                        var currencyRate = $("#CurrencyRate").val();
                                        const amountTotalInBDT = document.getElementById("totalInBDT");
                                        amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toFixed(4);
                                        calculateTotalSum();
                                    },
                                    },

                                    {
                                        title: "BILLABLE",
                                        field: "IsBillable",
                                        hozAlign: "center",
                                        editor: true,
                                        formatter: "tickCross",
                                        width: '13px',
                                        visible: false
                                    },
                                    {
                                        title: "TAX",
                                        field: "IsTax",
                                        hozAlign: "center",
                                        headerHozAlign: "center",
                                        editor: true,
                                        formatter: "tickCross",
                                        visible: false

                                    },
                                    {
                                        title: '', headerHozAlign: "center", field: "FilePath", width: "10px", hozAlign: "left", visible: false, formatter: customAttachmentFormatter, cellClick: function (e, cell) {
                                            // Add a custom class to the cell when it's clicked
                                            //cell.getElement().classList.add('active-cell');
                                            if (cell.getElement()) {
                                                cell.getElement().classList.add('active-cell');
                                            }
                                        },
                                    },
                                    {
                                        title: "Unique Column",
                                        field: "UniqueColumData", // Use a unique field name
                                        headerSort: false,
                                        //formatter: generateUniqueId,
                                        width: 100, // Adjust the width as needed
                                        movable: false,
                                        editor: false, // You may want to disable editing for this column
                                        visible: false, // Set the visibility as needed
                                    },
                                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
                                    { title: "DocType", field: "DocType", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseDate", field: "PurchaseDate", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
                                    { title: "NetAmount", field: "NetAmount", movable: false, headerSort: false, visible: false },
                                    { title: "CurrencyRate", field: "CurrencyRate", movable: false, headerSort: false, visible: false },
                                    { title: "Customer Id", field: "CustomerId", movable: false, headerSort: false, visible: false },
                                    {
                                        title: "CUSTOMER",
                                        field: "Name",
                                        width: 150,
                                        frozen: false,
                                        editable: true,
                                        headerSort: false,

                                        formatter: "html",
                                        editor: customerEditor,
                                        editorParams: {
                                            listOnEmpty: true,
                                            autocomplete: true,
                                        },
                                    },
                                    {
                                        title: "TAX",
                                        field: "MasterTaxName",
                                        hozAlign: "center",
                                        headerHozAlign: "center",
                                        width: 150,
                                        sorter: "number",
                                        editor: "select",
                                        headerSort: false,
                                        editorParams: {
                                            values: selectedTax.map(option => option.Text),
                                        },
                                        cellEdited: function (cell) {
                                            // Update the hidden column ("HiddenValue") with the selected value
                                            var selectedText = cell.getValue();
                                            var selectedValue = selectedTax.find(option => option.Text === selectedText);
                                            if (selectedValue) {
                                                cell.getRow().update({ MasterTaxId: selectedValue.Value });

                                                var taxId = selectedValue.Value;
                                                setTaxAmount(taxId);
                                            }
                                        },
                                    },
                                    {
                                        title: "Tax",
                                        field: "VAT",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "TDS",
                                        field: "TDS",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "VDS",
                                        field: "VDS",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "Hidden Tax",
                                        field: "MasterTaxId",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "",
                                        field: "Delete",
                                        movable: false,
                                        
                                        visible: true,
                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-trash-alt delete-icon'></i>";
                                        },
                                        width: "6px",
                                        headerSort: false,
                                        cellClick: function (e, cell) {
                                            var rowData = cell.getRow().getData();
                                            var row = cell.getRow();
                                            deleteRow(row);


                                        }
                                    }
                                ],

                                movableRows: true,
                                movableColumns: true,

                                responsiveLayout: true

                            });

                            /*  }*/
                            var docTypeValue = '@ViewBag.DocTypeValue';
                            // ITEM TABLE EDITING MODE
                            //if (isMultiCurrency == 1 && selectedValue != DefaultCurrencyId) {
                            tableItems = new Tabulator("#tabulatorItemsGrid", {
                                height: "auto",
                                layout: "fitColumns",
                                headerSort: false,
                                data: res.Items,
                                columns: [
                                    {
                                        headerSort: false,
                                        field: "drag",
                                        frozen: true,
                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-bars drag-icon'></i>";
                                        },
                                        width: 30,
                                        headerSort: false,
                                        rowHandle: true,


                                    },
                                    { title: "ComId", field: "ComId", movable: false, headerSort: false, visible: false },
                                    { title: "Id", field: "Id", movable: false, headerSort: false, visible: false, editor: true, },
                                    {
                                        title: "isTransaction",
                                        field: "isTransaction",
                                        headerSort: false,
                                        editable: true,
                                        movable: false,
                                        visible: false,
                                        formatter: "tickCross",
                                        editor: true,
                                        formatterParams: { crossElement: true }, // Set the default value to true (tick)
                                    },
                                    { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '3px', bottomCalc: "count", hozAlign: "right" },
                                    { title: "ProductId", field: "ProductId", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false, editor: false, },

                                    {
                                        title: "PRODUCT/SERVICE",
                                        field: "ProductName",
                                        frozen: true,
                                        editable: docTypeValue !== "Supplier PO",
                                        headerSort: false,

                                        formatter: "html",
                                        editor: productEditor,
                                        editorParams: {
                                            listOnEmpty: true,
                                            autocomplete: true,
                                        },
                                    },
                                {
                                    title: "ColorName",
                                    field: "ColorName",
                                    visible: '@ViewBag.DocTypeValue' === "Supplier PO"
                                },
                                {
                                    title: "SizeName",
                                    field: "SizeName",
                                    visible: '@ViewBag.DocTypeValue' === "Supplier PO"
                                },
                                {
                                    title: "BuyerPO",
                                    field: "BuyerPO",
                                    visible: '@ViewBag.DocTypeValue' === "Supplier PO"
                                },
                                    { title: "SKU", field: "SKU", headerSort: false, movable: false, editable: true, },
                                    {
                                    title: "Primary Unit Id",
                                    field: "PrimaryUnitId",
                                    visible: false,
                                    editor: "input",
                                },
                                {
                                    title: "Unit",
                                    field: "Unit",
                                    headerHozAlign: "center",
                                    hozAlign: "center",
                                    sorter: "number",
                                    editor: unitEditor,
                                },
                                {
                                    title: "Secondary Unit Id",
                                    field: "SecondaryUnitId",
                                    visible: false,
                                    editor: "input",
                                },
                                {
                                    title: "ConversionRate",
                                    field: "ConversionRate",
                                    visible: false,
                                    editor: "input",
                                },
                                    { title: "DESCRIPTION", headerSort: false, field: "Description", movable: false, editor: "input", editable: true, },
                                    { title: "ParentId", field: "PurchaseItemsId", movable: false, headerSort: false, visible: false },
                                    {
                                        title: "Unique Column",
                                        field: "UniqueColumData", // Use a unique field name
                                        headerSort: false,
                                        //formatter: generateUniqueId,
                                        width: 100, // Adjust the width as needed
                                        movable: false,
                                        editor: false, // You may want to disable editing for this column
                                        visible: false, // Set the visibility as needed
                                    },


                                    {
                                        title: "TotalQty",
                                        field: "Quantity",
                                        editable: false,
                                        bottomCalc: "sum",
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        editor: "input",
                                        default: 1,
                                        editor: qtyEditor
                                    },
                                    {
                                        title: "Quantity",
                                        field: "InputQuantity",
                                        visible: true,
                                        editor: "input", bottomCalc: "sum", hozAlign: "center", headerHozAlign: "center",
                                        cellEdited: function (cell, formatterParams) {
                                            var rowData = cell.getRow().getData();
                                            if ((rowData.PrimaryUnitId === rowData.SecondaryUnitId) || (rowData.SecondaryUnitId === undefined)) {
                                                var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(4);
                                                cell.getRow().update({ Quantity: rowData.InputQuantity, Amount: amount });
                                            }
                                            else {
                                                var conversionRate = rowData.ConversionRate;
                                                var costprice = (rowData.CostPrice / conversionRate).toFixed(2);
                                                //var price = (rowData.Price/ conversionRate).toFixed(2);
                                                //var defaultPrice = (rowData.DefaultPrice/ conversionRate).toFixed(4);
                                                var qty = (rowData.InputQuantity / conversionRate).toFixed(2);
                                            var amount = (rowData.InputQuantity * rowData.SecondaryPrice).toFixed(2);
                                                cell.getRow().update({ Quantity: qty, CostPrice: costprice, Amount: amount });
                                            }
                                            
                                            calculateTotalSum();
                                        },

                                    },
                                    {
                                        title: "UsedQty",
                                        field: "UsedQty",
                                        editable: false,
                                        bottomCalc: "sum",
                                        hozAlign: "right",
                                        width: '10px',
                                        headerSort: false,
                                        visible: false,
                                        movable: false,
                                        editor: "input",
                                        default: 1,
                                        editor: qtyEditor
                                    },
                                    {
                                        title: "Location<span style=\"color: red; \">*</span>",
                                        titleFormatter: "html",
                                        field: "WHName",
                                        width: 200,
                                        hozAlign: "left",
                                        sorter: "number",
                                        editor: "select",
                                        headerHozAlign: "center",
                                        visible: docTypeValue !== "Supplier PO",
                                        editorParams: {
                                            values: selectedLocation.map(option => option.Text),
                                        },
                                        cellEdited: function (cell) {
                                            var selectedText = cell.getValue();
                                            var selectedValue = selectedLocation.find(option => option.Text === selectedText);
                                            if (selectedValue) {
                                                cell.getRow().update({ WarehouseId: selectedValue.Value });
                                            }
                                            cell.navigateRight();
                                        },
                                    },
                                    {
                                        title: "Hidden Value",
                                        field: "WarehouseId",
                                        visible: false,
                                        editor: "input",
                                    },
                                    // {
                                    //     title: "Quantity",
                                    //     field: "Quantity",
                                    //     editable: true,
                                    //     bottomCalc: "sum",
                                    //     hozAlign: "right",
                                    //     headerSort: false,
                                    //     movable: false,
                                    //     editor: "input",
                                    //     default: 1,
                                    //     editor: qtyEditor
                                    // },
                                    {
                                        title: "RATE",
                                        field: "Rate", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        bottomCalc: "sum",
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        bottomCalcFormatter: "money",    
                                        formatter: "money",  
                                        formatterParams: {
                                            decimal: ".",
                                            thousand: ",",
                                            precision: 2,
                                        },
                                        cellEdited: function (cell) {
                                            var rate = parseFloat(cell.getValue());
                                            var row = cell.getRow();
                                            var qty = parseFloat(row.getCell("InputQuantity").getValue());
                                            var currencyRate = parseFloat($("#CurrencyRate").val());

                                            if (!isNaN(rate) && !isNaN(qty)) {
                                                var amount = (qty * rate).toFixed(4);
                                                var defaultAmount = (rate * currencyRate).toFixed(4);

                                                // Set new values for "Amount" and other relevant cells
                                                row.getCell("Amount").setValue(amount);
                                                row.getCell("DefaultPrice").setValue(defaultAmount);

                                                // Call success function or any other additional function
                                                calculateTotalSum();
                                            } 
                                            else {
                                                console.error("Invalid Rate or Quantity");
                                            }
                                        }
                                    },
                                    
                                    {
                                        title: "SecondaryPrice",
                                        field: "SecondaryPrice", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center"
                                    },
                                    {
                                        title: "Price",
                                        field: "Price", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center",
                                        editor: rateEditor
                                    },
                                    {
                                        title: "",
                                        field: "DefaultPrice", // Corrected: Use the correct field name from your data
                                        editable: true,
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        visible: false,
                                        headerHozAlign: "center"
                                    },
                                    {
                                        title: "AMOUNT",  
                                        field: "Amount", // Corrected: Use the correct field name from your data
                                        editable: false,
                                        headerHozAlign: "right",
                                        hozAlign: "right",
                                        bottomCalc: "sum",
                                        hozAlign: "right",
                                        headerSort: false,
                                        movable: false,
                                        editor: "input",
                                        bottomCalcFormatter: "money",    
                                        formatter: "money",  
                                          formatterParams: {
                                            decimal: ".",
                                            thousand: ",",
                                            precision: 2,
                                          },
                                        cellEdited: function (cell) {
                                        // Log the edited value to the console
                                        var editedValue = cell.getValue();
                                        ////console.log("Edited Value:", editedValue);

                                        // Calculate the sum of "Amount" column values
                                        var tableData = tableItems.getData(); // Replace 'yourTable' with your table instance
                                        var totalAmount = 0;
                                        totalAmountItems = 0;
                                        tableData.forEach(function (row) {
                                            if (!isNaN(row.Amount)) {
                                                totalAmount += parseFloat(row.Amount.toFixed(4));
                                                totalAmountItems += parseFloat(row.Amount.toFixed(4));
                                            }
                                        });

                                        // Update the "balance-due" HTML element with the summed value 
                                        const amountDisplay = document.getElementById("balance-due");
                                        amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toFixed(4); // Format as needed

                                        const amountSubTotal = document.getElementById("subtotal");
                                        amountSubTotal.textContent = "$ " + (isNaN(totalAmount) ? "" : totalAmount.toFixed(4));

                                        const amountTotal = document.getElementById("total");
                                        amountTotal.textContent = (isNaN(totalAmount) ? "" : totalAmount.toFixed(4));

                                        var currencyRate = $("#CurrencyRate").val();
                                        const amountTotalInBDT = document.getElementById("totalInBDT");
                                        amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toLocaleString('en-US', {
                                            minimumFractionDigits: 4,
                                            maximumFractionDigits: 4
                                        });

                                        calculateTotalSum();
                                    },
                                    },
                                    {
                                        title: '', headerHozAlign: "center", field: "FilePath", width: "10px", hozAlign: "left", visible: false, formatter: customAttachmentFormatter, cellClick: function (e, cell) {
                                            // Add a custom class to the cell when it's clicked
                                            //cell.getElement().classList.add('active-cell');
                                            if (cell.getElement()) {
                                                cell.getElement().classList.add('active-cell');
                                            }
                                        },
                                    },
                                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
                                    { title: "DocType", field: "DocType", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseDate", field: "PurchaseDate", movable: false, headerSort: false, visible: false },
                                    { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
                                    { title: "NetAmount", field: "NetAmount", movable: false, headerSort: false, visible: false },
                                    { title: "CurrencyRate", field: "CurrencyRate", movable: false, headerSort: false, visible: false },
                                    { title: "Customer Id", field: "CustomerId", movable: false, headerSort: false, visible: false },
                                    { title: "ColorId", field: "ColorId", movable: false, headerSort: false, visible: false },
                                    { title: "SizeId", field: "SizeId", movable: false, headerSort: false, visible: false },
                                    { title: "StyleId", field: "StyleId", movable: false, headerSort: false, visible: false },
                                    { title: "BuyerPOId", field: "BuyerPOId", movable: false, headerSort: false, visible: false },
                                    
                                    {
                                        title: "CUSTOMER<span style=\"color: red; \"></span>",
                                        field: "Name",
                                        frozen: false,
                                        editable: true,
                                        headerSort: false,

                                        formatter: "html",
                                        editor: customerEditor,
                                        editorParams: {
                                            listOnEmpty: true,
                                            autocomplete: true,
                                        },
                                    },
                                    {
                                        title: "TAX",
                                        field: "MasterTaxName",
                                        hozAlign: "center",
                                        headerHozAlign: "center",
                                        sorter: "number",
                                        editor: "select",
                                        headerSort: false,
                                        visible: docTypeValue !== "Supplier PO",
                                        editorParams: {
                                            values: selectedTax.map(option => option.Text),
                                        },
                                        cellEdited: function (cell) {
                                            // Update the hidden column ("HiddenValue") with the selected value
                                            var selectedText = cell.getValue();
                                            var selectedValue = selectedTax.find(option => option.Text === selectedText);
                                            if (selectedValue) {
                                                cell.getRow().update({ MasterTaxId: selectedValue.Value });

                                                var taxId = selectedValue.Value;
                                                setTaxAmount(taxId);
                                            }
                                        },
                                    },
                                    {
                                        title: "Hidden Tax",
                                        field: "MasterTaxId",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "Tax",
                                        field: "VAT",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "TDS",
                                        field: "TDS",
                                        visible: false,
                                        editor: "input",
                                    },
                                    {
                                        title: "VDS",
                                        field: "VDS",
                                        visible: false,
                                        editor: "input",
                                },
                                    {
                                        title: "",
                                        field: "Delete",
                                        movable: false,

                                        formatter: function (cell, formatterParams) {
                                            return "<i class='fas fa-trash-alt delete-icon'></i>";
                                        },
                                        width: "6px",
                                        headerSort: false,
                                        cellClick: function (e, cell) {
                                            var rowData = cell.getRow().getData();
                                            var row = cell.getRow();
                                            deleteRowForItem(row);


                                        }
                                    }
                                ],

                                movableRows: true,
                                movableColumns: true,

                                responsiveLayout: true

                            });

                        
                            //}


            @*//Purchase payment table editing mode
                            if (isMultiCurrency == 1 && selectedValue != DefaultCurrencyId) {
                            var selectPaymentMethod = @Html.Raw(Json.Serialize(ViewBag.PaymentMethod));
                            var selectedCategory = @Html.Raw(Json.Serialize(ViewBag.CategoryList));
                            tableItems = new Tabulator("#transaction-method", {
                            height: "300px",
                            layout: "fitColumns",
                            headerSort: false,
                            data: transactionMethodData.PurchasePayments,
                            columns: [
                            { title: "Id", field: "Id", movable: false, headerSort: false, visible: true },
                            { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },

                            {
                            title: "Deposit to",
                            field: "DepositTo",
                            hozAlign: "center",
                            sorter: "number",
                            editor: "select",
                            editorParams: {
                            values: selectedCategory.map(option => option.Text),
                            },
                            cellEdited: function (cell) {
                            // Update the hidden column ("HiddenValue") with the selected value
                            var selectedText = cell.getValue();
                            var selectedValue = selectedCategory.find(option => option.Text === selectedText);
                            if (selectedValue) {
                            cell.getRow().update({ AccountHeadId: selectedValue.Value });

                            }
                            },
                            },
                            {
                            title: "Payment Id",
                            field: "AccountHeadId",
                            visible: false,
                            editor: "input",
                            },

                            { title: "Reference No", field: "PaymentCardNo", editor: "input" },

                            { title: "Amount", field: "Amount", editor: "input" },
                            ],

                            movableRows: true,
                            movableColumns: true,

                            responsiveLayout: true

                            });

                            }*@


                                //alert(res.VAmount);
                                $("#VAmount").val(res.VAmount);
                            $("#VAmount").text(res.VAmount);
                            // if (document.getElementById("PurchaseFilePath").value !== "") {
                            //     $('#pdf-iframe').toggleClass("d-none");
                            //     $('#view-image-or-pdf').toggleClass("d-none");
                            //     $('#remove-image-or-pdf').toggleClass("d-none");
                            // }
                            ////console.log("see res::",res);
                            ////console.log("res.FilePath::", "../" + res.FilePath);


                            //$('#pdf-iframe').attr('src', "../" + res.FilePath);


                            //$('#pdf-iframe').attr('src', res.FilePath);
                            //$('#pdf-iframe').on('load', function () {
                            //    $('#pdf-iframe').contents().find('img').css('max-width', '50%');
                            //    $('#pdf-iframe').contents().find('img').css('max-height', '70%');
                            //});

                            // document.getElementById("view-image-or-pdf").addEventListener("click", function () {
                            //     var url = res.FilePath;
                            //     window.open(url, '_blank');
                            // });

                            //$("#ConvRate").val(res.ConvRate);
                            //$("#CreateDate").val(res.CreateDate);

                        var fileNames = res.FilePath ? res.FilePath.split(';') : [];

                        var fileContainer = $('#file-container');

                        // Clear any existing elements
                        fileContainer.empty();

                        fileNames.forEach(function (fileName, index) {
                            if (fileName) {
                                // Determine file type based on extension
                                var fileType = getFileType(fileName);
                                var fileName2 = fileName.split('/').pop();

                                var actualFileName = fileName2.match(/[^_]+$/)[0];

                                // Wrapper div
                                var fileWrapper = $('<div>', {
                                    class: 'file-wrapper col-md-2',
                                    css: {
                                        position: 'relative',
                                        marginBottom: '20px' // space between files
                                    }
                                });

                                // Create iframe for PDF and Excel files
                                var iframe;
                                if (fileType === 'pdf' || fileType === 'excel') {
                                    iframe = $('<iframe>', {
                                        id: 'pdf-iframe-' + index,
                                        class: 'file-iframe',
                                        css: {
                                            width: '100%',
                                            height: '0',
                                            border: '1px solid #ccc',
                                            overflow: 'hidden'
                                        },
                                        //src: "../" + fileName
                                    });

                                    // Display filename as text overlay
                                    var filenameOverlay = $('<div>', {
                                        class: 'filename-overlay',
                                        css: {
                                            position: 'absolute',
                                            top: '0',
                                            left: '0',
                                            width: '100%',
                                            background: 'rgba(0, 0, 0, 0.5)',
                                            color: '#fff',
                                            padding: '5px',
                                            boxSizing: 'border-box',
                                            zIndex: '5'
                                        },
                                        text: fileName.split('/').pop() // Extract filename from path
                                    });

                                    // Append filename overlay to iframe container
                                    iframe.append(filenameOverlay);
                                } else if (fileType === 'image') {
                                    // Create img element for image files
                                    iframe = $('<img>', {
                                        class: 'file-img',
                                        css: {
                                            width: '100%',
                                            height: 'auto',
                                            border: '1px solid #ccc',
                                            objectFit: 'contain' // Adjust as needed for image display
                                        },
                                        src: "../" + fileName
                                    });
                                } else {
                                    // Handle unknown file types (optional)
                                    console.log("Unknown file type for fileName: " + fileName);
                                    return; // Skip processing this file
                                }

                                // Create download button for PDF and Excel files
                                var downloadButton;
                                if (fileType === 'pdf' || fileType === 'excel') {
                                    downloadButton = $('<a>', {
                                        class: 'btn btn-primary btn-sm download-button',
                                        text: actualFileName,
                                        href: "../" + fileName,
                                        download: fileName.split('/').pop() // Extract filename for download
                                    });
                                }

                                // Create remove button
                                var removeButton = $('<button>', {
                                    class: 'btn btn-danger btn-sm remove-button',
                                    text: 'X',
                                    css: {
                                        position: 'absolute',
                                        top: '5px',
                                        right: '5px',
                                        zIndex: 10
                                    },
                                    click: function () {
                                        $('#confirmDeleteModal').modal('show');

                                        // Handle click on confirmation button
                                        $('#confirmDeleteBtn').on('click', function () {
                                            // Close modal
                                            $('#confirmDeleteModal').modal('hide');
                                            fileWrapper.remove();
                                            deleteFile(fileName);
                                        });
                                    }
                                });

                                // Append iframe (or img) and buttons to the wrapper
                                fileWrapper.append(iframe);
                                fileWrapper.append(removeButton);
                                if (downloadButton) {
                                    fileWrapper.append(downloadButton);
                                }

                                // Append the wrapper to the container
                                fileContainer.append(fileWrapper);

                                // Show initial elements if necessary
                                if (fileType === 'pdf' || fileType === 'excel' || fileType === 'image') {
                                    iframe.removeClass('d-none');
                                    removeButton.removeClass('d-none');
                                    if (downloadButton) {
                                        downloadButton.removeClass('d-none');
                                    }
                                }
                            }
                        });

                            calculation();

                            GetCultureInfo();


                            //var value = new Date(res.SalesDate);

                            //var ret = value.getDate() + "-" + months[value.getMonth()] + "-" + value.getFullYear(); //value.getMonth() + 1 + "/" + value.getDate() + "/" + value.getFullYear();




                            //$("#CreateDate").val(res.CreateDate);
                            //$("#LuserId").val(res.LuserId);
                            //$("#OrderId").val(res.OrderId);

                        }).fail(function (err) {
                            //console.log(err);
                        });
                    }


                }


                //else {

                //    var button = document.getElementById("unknown");
                //    var button1 = document.getElementById("unknown1");

                //    button.style.display = "inline-block";
                //    button.value = "Reset";
                //    button.classList.remove("btn-danger"); // Remove the red color class
                //    button.classList.add("btn-warning");
                //    button.onclick = function () {
                //        window.location.reload();
                //    };

                //}


                ///////////////////////// **** editing mode end **** /////////////


                ///////////////////////*********** GRID SECTION **********////////////
                $("#flexSwitchCheckChecked").click(function () {
                    // $('select').select2();
                    $('#jsFilterGrid').toggle();


                });

                $('#jsFilterGrid').hide();
                var filterSearchUrl = '@Url.Action("GetCOAList", "Admin")';

                var filterSearchDb = {
                    loadData: function (filter) {

                        var d = $.Deferred();
                        $.ajax({
                            type: "GET",
                            url: filterSearchUrl,

                            data: { AccType: "L", searchquery: JSON.stringify(filter) },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json"
                        })
                            .done(function (result) {

                                d.resolve(result);


                            });
                        return d.promise().then(function (q) {

                            ////console.log(q);
                            return {

                                data: q.AccountHeadList,
                                itemsCount: parseInt(q.PageInfo.TotalRecordCount)
                            }
                        });

                    }

                }

                var customNativeSelect = function (cell, onRendered, success, cancel) {
                    var cellRealValue = cell.getElement().dataset.loginName;
                    cellRealValue = (typeof cellRealValue === "undefined") ? "none" : cellRealValue;

                    // Create and append select list
                    var selectList = document.createElement("select");

                    selectList.style.width = "100%";
                    selectList.style.boxSizing = "border-box";

                    // Populate select options
                    for (var i = 0; i < userData.length; i++) {
                        var option = document.createElement("option");
                        option.value = userData[i].LoginName.toString();
                        option.text = userData[i].FullName;
                        if (userData[i].LoginName === parseInt(cellRealValue)) {
                            option.selected = "selected";
                        }
                        selectList.appendChild(option);
                    }

                    // Attach event listeners
                    onRendered(function () {
                        selectList.focus();
                        selectList.style.height = "100%";
                    });

                    selectList.addEventListener("blur", function () {
                        onChange();
                    });

                    selectList.addEventListener("keydown", function (e) {
                        if (e.keyCode === 13) {
                            onChange();
                        }
                        if (e.keyCode === 27) {
                            cancel();
                        }
                    });

                    function onChange() {
                        if (selectList.selectedOptions[0].value !== cellRealValue) {
                            success(selectList.selectedOptions[0].value);
                            alert("Here is what the actual looks like: " + JSON.stringify(cell.getTable().getData()));
                        } else {
                            cancel();
                        }
                    }

                    return selectList;
                };


                var userData = [
                    {
                        "FullName": "",
                        "LoginName": "none"
                    }, {
                        "FullName": "AED",
                        "LoginName": "229"
                    }, {
                        "FullName": "BDT",
                        "LoginName": "18"
                    }, {
                        "FullName": "OMR",
                        "LoginName": "165"
                    }, {
                        "FullName": "USD",
                        "LoginName": "231"
                    }];


                setTimeout(function () {
                    tableCategory.redraw();
                }, 10);



                tableCategory.on("rowClick", function (e, row) {
                    var clickedRowData = row.getData();

                    // Iterate through all rows and update data except the clicked row
                    tableCategory.getRows().forEach(function (rowToUpdate) {
                        if (rowToUpdate !== row) {
                            var rowDataToUpdate = rowToUpdate.getData();

                            // Update the data for rows other than the clicked row
                            // For example, you can copy properties from the clicked row's data
                            rowDataToUpdate.property1 = clickedRowData.property1;
                            rowDataToUpdate.property2 = clickedRowData.property2;

                            // Call the update method to refresh the row with updated data
                            rowToUpdate.update(rowDataToUpdate);
                        }
                    });
                });

                var controlSignal = 0;
                var serial = 0;
                $("#jsFilterGrid").jsGrid({

                    width: "100%",
                    height: 'auto',
                    filtering: true,
                    autoload: true,
                    pageSize: 5,
                    pageLoading: true,
                    pageIndex: 1,
                    paging: true,
                    controller: filterSearchDb,
                    fields: [

                        { name: "AccType", title: 'Type', type: "text", width: 220, visible: false },
                        { name: "AccountCategory", title: 'Category', type: "text" },
                        { name: "AccCode", title: 'Code', type: "text" },
                        { name: "AccName", title: 'Account Head', type: "text" },
                        { name: "ParentName", title: 'Group Head', type: "text" },
                        { name: "AccountBalance", title: 'Balance', type: "text" }
                        // { name: "Currency", title: 'Currency', type: "text" },



                    ],
                    rowDoubleClick: function (args) {

                        var args = args.item;
                        //console.log('args.....?/////');
                        //console.log(args);
                        var parentValue = $('#jsGridItems').jsGrid('option', 'data');
                        serial = parentValue.length + 1;

                        // //console.log(renumberRows());
                        controlSignal = 1;
                        Entry(args, serial);

                    }
                })
                function Entry(args, serial) {



                    if ($('#PurchaseTypeId').val() == 5 || $('#PurchaseTypeId').val() == 6) {

                        var newData = {

                            "CurrencyId": '18',
                            "CurrencyForeignId": '18',
                            "AccId": args.Id,
                            //"DisplayName": "<b>" + Name + "</b>" + "-" + productCode + "<br>" + "<i><p style='font-size:11px; margin-bottom:0px'>" + CategoryName + Color + Size + Brand + "</p></i>",
                            "AccName": args.AccName,//args.item.Description,
                            "EmpId": 1,
                            "Note1": " ",
                            "Note2": " ",
                            // "account":'1',
                            "CustomerId": 1,
                            "SupplierId": 1,
                            "TKDebit": 0.00,
                            "TKCredit": 0.00,
                        }
                    }
                    else {

                        var newData = {

                            "CurrencyId": '18',
                            "CurrencyForeignId": '18',
                            "AccId": args.Id,
                            //"DisplayName": "<b>" + Name + "</b>" + "-" + productCode + "<br>" + "<i><p style='font-size:11px; margin-bottom:0px'>" + CategoryName + Color + Size + Brand + "</p></i>",
                            "AccName": args.AccName,//args.item.Description,
                            "EmpId": 1,
                            "Note1": " ",
                            "Note2": " ",
                            // "account":'1',
                            "CustomerId": 1,
                            "SupplierId": 1,
                            "TKDebit": 1.00,
                            "TKCredit": 1.00,
                        }
                    }

                    //$("#jsGridItems").jsGrid("insertItem", newData).done(function () {

                    //    //  $(".jsgrid-update-button").trigger( "click" );
                    //    // toastr.success('Items Added..');
                    //    $("#jsGridItems").jsGrid("editItem", newData);

                    //});

                    table.addRow(newData);
                    renumberRows();
                    //console.log(table);

                }

                ///////////////////////////// ****filterGrid ends****////////////////

                function PurchaseTypeName() {

                    if ($('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 3) {
                        tableCategory.toggleColumn("TKDebit", true);
                        tableCategory.toggleColumn("TKCredit", false);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", true);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", false);

                    }
                    else if ($('#PurchaseTypeId').val() == 2 || $('#PurchaseTypeId').val() == 4) {
                        tableCategory.toggleColumn("TKDebit", false);
                        tableCategory.toggleColumn("TKCredit", true);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", false);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", true);
                    }

                    else if ($('#PurchaseTypeId').val() == 5 || $('#PurchaseTypeId').val() == 6) {
                        tableCategory.toggleColumn("TKDebit", true);
                        tableCategory.toggleColumn("TKCredit", true);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", true);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", true);

                    }


                    else {
                        tableCategory.toggleColumn("TKDebit", true);
                        tableCategory.toggleColumn("TKCredit", false);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", true);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", false);
                    }





                    if (isMultiDebitCredit == true) {
                        tableCategory.toggleColumn("TKDebit", true);
                        tableCategory.toggleColumn("TKCredit", true);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKDebit", "visible", true);
                        //$("#jsGridItems").jsGrid("fieldOption", "TKCredit", "visible", true);
                    }

                }

                ////////////////////////////// ********JsGridItems grid ********////////
                var autocompleteId = 0;
                var autoCompleteField = function (config) {
                    jsGrid.Field.call(this, config);
                };

                autoCompleteField.prototype = new jsGrid.Field({


                    itemTemplate: function (value) {


                        return value;
                    },

                    _createSelect: function (selected, callback) {

                        var $input = $("<input>").attr("type", "text").attr("name", this.name).attr('autocomplete', 'off').autocomplete({

                            source: function (request, response) {
                                //console.log(request.term);
                                $.ajax({
                                    url: "@Url.Action("GetCOAList", "Admin")",
                                    dataType: "json",
                                    data: {
                                        dropdownSearch: request.term,
                                        type: "public",
                                        pageSize: 5,
                                        minimumInputLength: 0
                                    },
                                    success: function (data) {
                                        var results = [];
                                        var categoryNames = $.unique($.map(data.AccountHeadList, function (item) {
                                            return item.AccName;
                                        }));

                                        $.each(categoryNames, function (index, categoryName) {
                                            var group = {
                                                label: categoryName,
                                                children: []
                                            };

                                            group.children = $.grep(data.AccountHeadList, function (item) {
                                                return item.AccName == group.label;
                                            });

                                            group.children = $.map(group.children, function (item) {
                                                //console.log(item);
                                                return {
                                                    label: item.AccName + ' - ' + item.AccCode,
                                                    value: item.Id,

                                                };
                                            });

                                            results.push(group);
                                        });

                                        response(results);
                                    }
                                });
                            },
                            select: function (event, ui) {
                                // var selectedId = ui;
                                // //console.log(ui);
                                if (ui.item.children) {
                                    autocompleteId = ui.item.children[0].value;
                                    //countryIDfunc(countryId);
                                    ////console.log(ui.item.children);
                                    return true;
                                } else {
                                    // handle selection of item here
                                }
                            },
                            focus: function (event, ui) {
                                if (ui.item.children) {
                                    return true;
                                } else {
                                    // handle focus on item here
                                }
                            },

                            minLength: 0,
                            autoFocus: true,
                            allowCustomValue: false,
                            delay: 0,
                            //cacheLength: 0,
                            open: function () {
                                $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                            },
                            close: function () {
                                $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                            },
                            change: function (event, ui) {
                                if (ui.item === null) {
                                    $(this).val('');
                                    autocompleteId = 0;
                                    //  $('#field_id').val('');
                                }
                            },
                            create: function () {
                                $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                                    if (item.children) {

                                        return $("<li><table style='font-size:11px;' class='table table-sm table-bordered'><thead><tr><th style='width:30%;' scope='col'> " + item.label + " </th></tr></thead></table></li>")
                                            .data("ui-autocomplete-item", item)
                                            .appendTo(ul);
                                    } else {
                                        return $("<li><table style='font-size:10px;' class='table table-sm table-bordered'><tbody><tr><td style='width:30%;'><i class='p-0 m-0'> &nbsp;" + item.label + "</i></td></tr><tbody></table></li>")
                                            .data("ui-autocomplete-item", item)
                                            .appendTo(ul);
                                    }
                                };
                            }


                        }).focus(function () {
                            $(this).autocomplete("search", $(this).val());
                            $(this).select();


                        });

                        // Set the value of the input element to the current field value
                        $input.val(selected);
                        //$input.click(function () {
                        //    if ($input.val().length === 0) {
                        //        $input.autocomplete("search", "");
                        //    }
                        //});   ///// fahad

                        return $input;
                    },

                    insertTemplate: function () {
                        var insertControl = this._insertControl = this._createSelect(null, function (id) {

                            insertControl.val(id);
                        });

                        return insertControl;
                    },

                    editTemplate: function (value) {
                        var editControl = this._editControl = this._createSelect(value, function (id) {
                            editControl.val(id);
                        });

                        return editControl;
                    },

                    insertValue: function () {
                        return this._insertControl.val();
                    },

                    editValue: function () {
                        return this._editControl.val();
                    }

                });

                jsGrid.fields.autocomplete = jsGrid.autoCompleteField = autoCompleteField;
                $('select').select2();


                // categoryeditor function for category table starts
                function categoryEditor(cell, onRendered, success, cancel, editorParams) {

                    var selected = cell.getValue();
                    if (typeof selected === "undefined") {
                        selected = null;
                    }

                    // Handle the null value and set an empty string
                    if (selected === null) {
                        selected = "";
                    }
                    var arrowIcon = document.createElement("span");

                    arrowIcon.innerHTML = '<i class="fas fa-chevron-down"></i>';
                    arrowIcon.className = "arrow-icon";
                    //arrowIcon.style.position = "absolute";
                    //arrowIcon.style.right = "5px";
                    //arrowIcon.style.top = "70%";
                    //arrowIcon.style.transform = "translateY(-50%)";
                    arrowIcon.style.cursor = "pointer";
                    arrowIcon.style.fontWeight = "bold";

                    // Update the CSS to vertically align the text and the arrow icon
                    var inputContainer = document.createElement("div");
                    //inputContainer.style.position = "relative";
                    inputContainer.style.display = "flex";
                    inputContainer.style.alignItems = "center";

                    var input = document.createElement("input");
                    input.type = "text";
                    input.setAttribute("name", cell.getField());
                    input.setAttribute("autocomplete", "off");
                    input.style.flex = "1"; // Take up the remaining space in the container

                    inputContainer.appendChild(input);
                    inputContainer.appendChild(arrowIcon);

                    arrowIcon.addEventListener("click", function () {
                        $(input).autocomplete("search", $(input).val());
                        $(input).select();
                    });
                    onRendered(function () {
                        $(input).autocomplete("search", $(input).val());
                    });
                    input.addEventListener("focus", function () {
                        currentActiveInput = this;
                        // Add keydown event listener to the input field to prevent default behavior of arrow keys
                        this.addEventListener("keydown", function (e) {
                            if (e.keyCode === 40 || e.keyCode === 38) {
                                e.preventDefault();
                            }
                        });
                    });

                    $(input).autocomplete({

                        source: function (request, response) {

                            setTimeout(function () {
                                //console.log(request.term);
                                $.ajax({
                                    url: "@Url.Action("GetCOAList", "Admin")",
                                    dataType: "json",
                                    data: {
                                        dropdownSearch: request.term,
                                        type: "public",
                                        pageSize: 5,
                                        minimumInputLength: 0
                                    },
                                    success: function (data) {
                                        //console.log("auto:", data);
                                        var results = [];
                                        var categoryNames = $.unique($.map(data.AccountHeadList, function (item) {
                                            return item.AccName;
                                        }));

                                        $.each(categoryNames, function (index, categoryName) {

                                            var group = {
                                                label: categoryName,
                                                children: []
                                            };

                                            group.children = $.grep(data.AccountHeadList, function (item) {
                                                return item.AccName == group.label;
                                            });

                                            group.children = $.map(group.children, function (item) {

                                                //currencyrate='';

                                                //currencyId=item.CurrencyShortName;
                                                return {
                                                    label: item,
                                                    // label: item.AccName + ' - ' + item.AccCode + '  -----  ' + item.AccountCategory+ ',' + item.AccountBalance,
                                                    value: item.Id,

                                                };
                                            });

                                            results.push(group);
                                        });

                                        response(results);
                                    }
                                });

                            }, 200);

                        },
                        select: function (event, ui) {
                            // var selectedId = ui;
                            // //console.log(ui);
                            if (ui.item.children) {

                                var matchingChild = ui.item.children.find(function (child) {
                                    //console.log("child dekhi", child);
                                    currencyId = child.label.CurrencyId;
                                    autocompleteId = child.value;
                                    currencyrate = child.label.CurrencyRate;
                                    AccountCategory = child.label.AccountCategory;
                                    return ui.item.Id === child.value;
                                });

                                //console.log("matchingChild,", matchingChild);

                                //autocompleteId = ui.item.children[0].value;
                                // autocompleteId = matchingChild.value;
                                ////console.log(ui.item.children);
                                //currencyId = ui.item.children[0].label.CurrencyId.toString();

                                //currencyrate = ui.item.children[0].label.CurrencyRate;
                                //currencyrate = ui.item.children[0].label.CurrencyRate;
                                //AccountCategory = ui.item.children[0].label.AccountCategory;
                                //AccountCategory = ui.item.children[0].label.AccountCategory;

                                // currencyrate=item.CurrencyRate; ui.item.children[0].value

                                // currencyId=item.CurrencyId.toString();
                                var currencyRateField = "CurrencyRate"; // Replace with the actual field name
                                var currencyRateValue = currencyrate;
                                var CurrencyForeignId = "CurrencyForeignId"; // Replace with the actual field name

                                var CurrencyIdvalue = currencyId;
                                var Amount = 0;

                                var accIdField = "AccId";
                                var accIdValue = autocompleteId; /* Get the corresponding AccId based on the selected AccName */
                                var row = cell.getRow();
                                row.update({ [accIdField]: accIdValue, [currencyRateField]: currencyRateValue, [CurrencyForeignId]: CurrencyIdvalue, AccountCategory: AccountCategory, Amount: Amount });
                                //console.log(row);
                                success(ui.item.value);
                            } else {
                                // handle selection of item here
                            }
                        },
                        focus: function (event, ui) {
                            if (ui.item.children) {
                                return true;
                            } else {
                                // handle focus on item here
                            }
                        },

                        minLength: 0,
                        autoFocus: true,
                        allowCustomValue: false,
                        delay: 0,
                        //cacheLength: 0,
                        open: function () {
                            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        },
                        close: function () {
                            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                            cancel();
                        },
                        change: function (event, ui) {
                            if (ui.item === null) {
                                $(this).val('');
                                autocompleteId = 0;
                                //  $('#field_id').val('');
                            }
                        },
                        create: function () {
                            $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                                var trs = '';

                                if (item) {
                                    trs = '<p class="text-sm-left" style="font-size:12px"> Category : '; // Remove the font-italic class from here
                                    $.each($(item), function (key, value) {


                                        // Determine the balance value
                                        const balance = value.children[0].label.AccountBalance;

                                        // Add class based on balance value
                                        const balanceClass = balance <= 0 ? 'red-text' : 'green-text';

                                        // Append the entire category text with the corresponding class (including the italic style)
                                        trs += '<span class="italic-text">[ ' + value.children[0].label.AccName + ' - ' + value.children[0].label.AccountCategory + ' ]</span>   - <span class="' + balanceClass + '">Balance :' + balance + '</span>  ';
                                    })
                                    trs += '</p>';
                                }




                                return $("<li>")
                                    .append("<div class=m-0>" + item.label + trs + "</div>")
                                    .appendTo(ul);
                            };
                        },
                        focus: function () {
                            return false; // Prevent default focus behavior
                        }



                    }).focus(function () {
                        $(this).autocomplete("search", $(this).val());
                        $(this).select();


                    });

                    input.addEventListener("keydown", function (e) {
                        // Prevent default behavior of arrow keys (40 for down, 38 for up)
                        if (e.keyCode === 40 || e.keyCode === 38) {
                            e.preventDefault();
                        }
                    });



                    if (currentActiveInput !== null) {
                        currentActiveInput.focus();
                    }

                    // Set the value of the input element to the current field value
                    input.value = selected;


                    return inputContainer;



                }

            function unitEditor(cell, onRendered, success, cancel, editorParams) {
                var editor = document.createElement("select");
                editor.setAttribute("class", "select2");
                editor.style.width = "100%";

                var rowData = cell.getRow().getData();

                onRendered(function () {
                    $(editor).select2({
                        closeOnSelect: false,
                        ajax: {
                            url: '@Url.Action("GetUnitConversion", "Sales")',
                            dataType: 'json',
                            data: function (params) {
                                return {
                                    primaryUnitId: rowData.PrimaryUnitId,
                                    productId: rowData.ProductId,
                                    dropdownSearch: params.term,
                                    pageNo: params.page || 1
                                };
                            },
                            processResults: function (data) {
                                var options = data.map(function (item) {
                                    return {
                                        id: item.Value,
                                        text: item.Text,
                                        ConversionRate: item.ConversionRate
                                    };
                                });
                                return { results: options };
                            },
                            cache: false
                        }
                    });
                    editor.style.css = "100%";
                    $(editor).select2('open');
                });

                function successFunc(e) {
                    var data = e.params.data;
                    var currencyrate = $("#CurrencyRate").val();
                    cell.getRow().update({
                        "SecondaryUnitId": data.id,
                        "Unit": data.text,
                        "ConversionRate": data.ConversionRate,
                        "Price": rowData.DefaultPrice / currencyrate,
                        "SecondaryPrice": (rowData.PrimaryUnitId !== data.id) ? (rowData.DefaultPrice / (data.ConversionRate*currencyrate)).toFixed(6) : rowData.DefaultPrice,
                        "Rate": (rowData.PrimaryUnitId !== data.id) ? (rowData.DefaultPrice / (data.ConversionRate * currencyrate)).toFixed(4) : rowData.DefaultPrice,
                        "Amount": (rowData.PrimaryUnitId !== data.id) ? (rowData.DefaultPrice / (data.ConversionRate * currencyrate)).toFixed(4) : rowData.DefaultPrice,
                        "Quantity": (rowData.PrimaryUnitId !== data.id) ? (1 / data.ConversionRate).toFixed(5) : 1,
                    });
                    success(data.text);
                    $(editor).select2('close');
                }

                function DestroyFunc() {
                    cancel();
                    cell.navigateRight();
                }

                $(editor).on("select2:select", successFunc);
                $(editor).on("select2:close", DestroyFunc);

                return editor;
            }

                function productEditor(cell, onRendered, success, cancel, editorParams) {

                    //create and style editor
                    var editor = document.createElement("select");

                    editor.setAttribute("class", "select2");
                    //editor.setAttribute("name", "favcolor[]");
                    //editor.setAttribute("onchange", "successFunc()");
                    editor.setAttribute("id", "p-" + cell.getRow().getPosition());

                    //create and style input
                    editor.style.width = "100%";
                    var warehouseId = $("#WarehouseIdMain").val();


                    onRendered(function () {
                        $(editor).select2({
                            closeOnSelect: false,
                            // data: colorsToAccessSelect,
                            ajax: {
                                delay: 500,
                                // url: '@Url.Action("ProductSearch", "Accounts")',
                                url: '@Url.Action("GetProductSearchList", "Admin")',
                                dataType: 'json',
                                data: function (params) {
                                    var query = {
                                        dropdownSearch: params.term,
                                        pageNo: params.page || 1,
                                        pageSize: 20,
                                        Warehouse: warehouseId
                                    }

                                    // Query parameters will be ?search=[term]&page=[page]
                                    return query;
                                },
                                processResults: function (data) {

                                    let gropus = [];
                                    let option = []
                                    for (let i in data.ProductList) {
                                        if (!gropus.includes(data.ProductList[i].CategoryName)) {
                                            gropus.push(data.ProductList[i].CategoryName);
                                            let child = data.ProductList.filter(f => f.CategoryName == data.ProductList[i].CategoryName).map(m => {
                                                return {
                                                    id: m.Id,
                                                    text: m.ProductName,
                                                    costPrice: m.CostPrice,
                                                    UnitId: m.UnitId,
                                                    Unit: m.Unit,
                                                    ProductCode: m.ProductCode
                                                }
                                            });
                                            option.push({
                                                text: data.ProductList[i].CategoryName,
                                                children: child
                                            });



                                        }
                                    }



                                    return {
                                        results: option
                                    };
                                },
                                cache: false
                            },


                        });
                        //editor.focus();
                        editor.style.css = "100%";
                        $(editor).select2('open');
                        // $(".select2-search__field").focus();
                        var ll = $("[aria-controls='select2-p-" + cell.getRow().getPosition() + "-results']");
                        ll[0].focus();
                    });
                    function successFunc(e) {
                        var data = e.params.data;
                        var DefaultPrice = data.costPrice;
                        var currencyRate = $("#CurrencyRate").val();
                        if (currencyRate != 1 && currencyRate != "") {
                            data.costPrice = data.costPrice / currencyRate;
                        }
                        console.log(data);
                    cell.getRow().update({ "ProductId": editor.value, "productname": data.text, "Rate": data.costPrice.toFixed(4), "Price": data.costPrice, "SecondaryPrice": data.costPrice, "DefaultPrice": DefaultPrice.toFixed(4), "PurchaseAmount": data.costPrice, "Amount": data.costPrice.toFixed(4), "Quantity": 1, "PrimaryUnitId": data.UnitId, "InputQuantity": 1, "SecondaryUnitId": data.UnitId, "Unit": data.Unit, "SKU": data.ProductCode });

                        success(data.text);
                        $(editor).select2('close');
                        //$(editor).trigger('select2:close');
                        //cell.getRow().update({ "Productid": editor.value });

                        // console.log(table.getData());
                        //cancel();

                    }
                    $(editor).on("select2:select", successFunc);
                    $(editor).on("select2:close", DestroyFunc);

                    function DestroyFunc() {

                        cancel();
                        cell.navigateRight();


                    }
                    return editor;
                }

                // product editor with select 2



                //customer function for product table starts
                function customerEditor(cell, onRendered, success, cancel, editorParams) {

                    var selected = cell.getValue();
                    if (typeof selected === "undefined") {
                        selected = null;
                    }

                    // Handle the null value and set an empty string
                    if (selected === null) {
                        selected = "";
                    }
                    var arrowIcon = document.createElement("span");
                    arrowIcon.innerHTML = '<i class="fas fa-chevron-down"></i>';
                    arrowIcon.className = "arrow-icon";
                    //arrowIcon.style.position = "absolute";
                    //arrowIcon.style.right = "5px";
                    //arrowIcon.style.top = "70%";
                    //arrowIcon.style.transform = "translateY(-50%)";
                    arrowIcon.style.cursor = "pointer";
                    arrowIcon.style.fontWeight = "bold";

                    // Update the CSS to vertically align the text and the arrow icon
                    var inputContainer = document.createElement("div");
                    //inputContainer.style.position = "relative";
                    inputContainer.style.display = "flex";
                    inputContainer.style.alignItems = "center";

                    var input = document.createElement("input");
                    input.type = "text";
                    input.setAttribute("name", cell.getField());
                    input.setAttribute("autocomplete", "off");
                    input.style.flex = "1"; // Take up the remaining space in the container

                    inputContainer.appendChild(input);
                    inputContainer.appendChild(arrowIcon);

                    arrowIcon.addEventListener("click", function () {
                        $(input).autocomplete("search", $(input).val());
                        $(input).select();
                    });

                    input.addEventListener("focus", function () {
                        currentActiveInput = this;
                        // Add keydown event listener to the input field to prevent default behavior of arrow keys
                        this.addEventListener("keydown", function (e) {
                            if (e.keyCode === 40 || e.keyCode === 38) {
                                e.preventDefault();
                            }
                        });
                    });
                    onRendered(function () {
                        $(input).autocomplete("search", $(input).val());
                    });
                    $(input).autocomplete({

                        source: function (request, response) {

                            setTimeout(function () {
                                //console.log(request.term);
                                $.ajax({
                                    url: "@Url.Action("GetCustomer", "Admin")",
                                    dataType: "json",
                                    data: {
                                        dropdownSearch: request.term,
                                        type: "public",
                                        pageSize: 5,
                                        minimumInputLength: 0
                                    },
                                    success: function (data) {
                                        ////console.log("Console for customer List:", data);
                                        ////console.log("data item Name::", data);
                                        var results = [];
                                        var categoryNames = $.unique($.map(data, function (item) {
                                            ////console.log("customer item Name::", item);
                                            return item;
                                        }));

                                        $.each(categoryNames, function (index, categoryName) {
                                            ////console.log("categoryName::", categoryName);
                                            var group = {
                                                label: categoryName.Name,
                                                children: []
                                            };

                                            group.children = $.grep(data, function (item) {
                                                ////console.log("item::", item);
                                                return item.Name == group.label;
                                            });

                                            group.children = $.map(group.children, function (item) {

                                                //currencyrate='';

                                                //currencyId=item.CurrencyShortName;
                                                return {
                                                    // label: item.Name,
                                                    label: item.ClBalance,//item.Name + ' - ' /*+ item.AccCode + '  -----  ' + item.AccountCategory+ ','*/ + item.ClBalance,
                                                    value: item.Id,

                                                };
                                            });

                                            results.push(group);
                                        });

                                        response(results);
                                    }
                                });

                            }, 200);

                        },
                        select: function (event, ui) {
                            // var selectedId = ui;
                            // //console.log(ui);
                            if (ui.item.children) {

                                autocompleteId = ui.item.children[0].value;
                                //console.log(ui.item.children);
                                ////currencyId = ui.item.children[0].label.CurrencyId.toString();
                                //currencyrate = ui.item.children[0].label.CurrencyRate;
                                //AccountCategory = ui.item.children[0].label.AccountCategory;

                                //// currencyrate=item.CurrencyRate; ui.item.children[0].value

                                //// currencyId=item.CurrencyId.toString();
                                //var currencyRateField = "CurrencyRate"; // Replace with the actual field name
                                //var currencyRateValue = currencyrate;
                                //var CurrencyForeignId = "CurrencyForeignId"; // Replace with the actual field name

                                //var CurrencyIdvalue = currencyId;

                                var accIdField = "CustomerId";
                                var accIdValue = autocompleteId; /* Get the corresponding AccId based on the selected AccName */
                                var row = cell.getRow();
                                row.update({ [accIdField]: accIdValue });
                                //console.log(row);
                                success(ui.item.value);
                                cell.navigateRight();
                            } else {
                                // handle selection of item here
                            }
                        },
                        focus: function (event, ui) {
                            if (ui.item.children) {
                                return true;
                            } else {
                                // handle focus on item here
                            }
                        },

                        minLength: 0,
                        autoFocus: true,
                        allowCustomValue: false,
                        delay: 0,
                        //cacheLength: 0,
                        open: function () {
                            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        },
                        close: function () {
                            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                            cancel();
                        },
                        change: function (event, ui) {
                            if (ui.item === null) {
                                $(this).val('');
                                autocompleteId = 0;
                                //  $('#field_id').val('');
                            }
                        },
                        create: function () {
                            $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                                var trs = '';

                                if (item) {
                                    trs = '<p class="text-sm-left" style="font-size:12px">  '; // Remove the font-italic class from here   category :
                                    $.each($(item), function (key, value) {

                                        ////console.log(value);
                                        // Determine the balance value
                                        const balance = value.children[0].label;

                                        // Add class based on balance value
                                        //const balanceClass = balance <= 0 ? 'red-text' : 'green-text';

                                        // Append the entire category text with the corresponding class (including the italic style)
                                        trs += '<span class="italic-text"> ' + /*value.children[0].label.AccName + ' - ' +*/ /*value.children[0].label.AccountCategory +*/ ' </span>   - <span class="">Balance :' + balance + '</span>  ';
                                    })
                                    trs += '</p>';
                                }


                                return $("<li>")
                                    .append("<div class=m-0>" + item.label + trs + "</div>")
                                    .appendTo(ul);
                            };
                            $(this).data('ui-autocomplete').menu.element.css({
                                'max-height': '200px', // Set your desired maximum height
                                'overflow-y': 'auto',
                            });
                        },
                        focus: function () {
                            return false; // Prevent default focus behavior
                        }



                    }).focus(function () {
                        $(this).autocomplete("search", $(this).val());
                        $(this).select();


                    });

                    input.addEventListener("keydown", function (e) {
                        // Prevent default behavior of arrow keys (40 for down, 38 for up)
                        if (e.keyCode === 40 || e.keyCode === 38) {
                            e.preventDefault();
                        }
                    });



                    if (currentActiveInput !== null) {
                        currentActiveInput.focus();
                    }

                    // Set the value of the input element to the current field value
                    input.value = selected;


                    return inputContainer;



                }
                //customer function for product table ends

                document.getElementById("add-row").addEventListener("click", function () {
                    editingModeTrigger = 1;
                    tableCategory.addRow();
                    renumberRows();
                    // calculation();
                });
                document.getElementById("add-row-second-table").addEventListener("click", function () {
                    editingModeTrigger = 1;
                    tableItems.addRow();
                    renumberRowsItem();
                    // calculation();
                });



                tableCategory.on("rowMoved", function (row) {
                    renumberRows();
                    calculation();
                });
                tableItems.on("rowMoved", function (row) {
                    renumberRowsItem();
                    calculation();
                });
                document.getElementById("clear").addEventListener("click", function () {
                    tableCategory.clearData()
                });

                document.getElementById("clear-second-table").addEventListener("click", function () {
                    tableItems.clearData()
                });
            @*var seeData = @ViewBag.purchaItemsCategoryId;*@
                    /* //console.log("seeData", seeData);*/
                    function renumberRowsItem() {
                        var rowsSecondTable = tableItems.getRows();
                        rowsSecondTable.forEach(function (row, index) {
                            if (!row.getData().Id && !row.getData().Quantity) {
                                row.update({ SLNo: index + 1, PurchaseId: @ViewBag.PurchaseId, Id: 0, Quantity: 1 });
                            }
                        });
                    }
                function renumberRows() {
                    var rows = tableCategory.getRows();
                    rows.forEach(function (row, index) {
                        if (!row.getData().Id) {
                            row.update({ SLNo: index + 1, PurchaseId: @ViewBag.PurchaseId, Id: 0 });
                        }
                    });
                }

                function updateSLNoForRemainingRows(table, deletedSLNo) {
                    var rows = table.getRows();
                    rows.forEach(function (remainingRow) {
                        var remainingRowData = remainingRow.getData();
                        if (remainingRowData.SLNo > deletedSLNo) {
                            remainingRow.update({ SLNo: remainingRowData.SLNo - 1 });
                        }
                    });
                }

                function deleteRow(row) {
                    // Show a confirmation dialog and delete the row if confirmed
                    if (confirm("Are you sure you want to delete this row?")) {
                        var deletedSLNo = row.getData().SLNo; // Store the SLNo of the deleted row

                        //console.log("cat deletedSLNo,", deletedSLNo);
                        var rowData = [row.getData()]; // Store the data of the deleted row

                        // Delete the row from the tableCategory
                        tableCategory.deleteRow(row);

                        //console.log("Row deleted successfully.", rowData);
                        var tableData = table2.getData(); // Get the existing data in table2

                        rowData.forEach(function (item) {
                            var PurchaseId = item.PurchaseId;
                            var salesDate = new Date(item.PurchaseDate);
                            var formattedSalesDate = salesDate.getDate() + '-' +
                                salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                salesDate.getFullYear();

                            var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                                'Total:  ' + 'TK' + item.NetAmount + '<br/>' +
                                'Balance:  ' + 'TK' + item.NetAmount + '<br/>' +
                                formattedSalesDate + '<br>' +
                                '<div style="display: flex; justify-content: space-between;">' +
                                '<a href="#" onclick="handleAddClick(' + PurchaseId + ')"><p style="font-weight: bold">Add</p></a>' +
                                '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                '</div';

                            // Check if data for the same PurchaseId already exists in tableData
                            var existingDataIndex = tableData.findIndex(item => item.PurchaseId === PurchaseId);
                            if (existingDataIndex !== -1) {
                                // Update the existing data for that PurchaseId
                                tableData[existingDataIndex].Description = description;
                            } else {
                                // Add a new entry for the unique PurchaseId
                                tableData.push({
                                    PurchaseId: PurchaseId,
                                    Description: description
                                });
                            }
                        });

                        // Update the off-canvas (table2) with the combined data
                        table2.setData(tableData);

                        // After deletion, update SLNo for the remaining rows in tableItems
                        updateSLNoForRemainingRows(tableCategory, deletedSLNo);

                        calculation();
                    }
                }

                function deleteRowForItem(row) {
                    // Show a confirmation dialog and delete the row if confirmed
                    if (confirm("Are you sure you want to delete this row?")) {
                        var deletedSLNo = row.getData().SLNo; // Store the SLNo of the deleted row
                        var rowData = [row.getData()]; // Store the data of the deleted row

                        // Delete the row from the tableCategory
                        tableItems.deleteRow(row);

                        //console.log("Row deleted successfully.", rowData);
                        var tableData = table2.getData(); // Get the existing data in table2

                        rowData.forEach(function (item) {
                            var PurchaseId = item.PurchaseId;
                            var salesDate = new Date(item.PurchaseDate);
                            var formattedSalesDate = salesDate.getDate() + '-' +
                                salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                salesDate.getFullYear();

                            var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                                'Total:  ' + 'TK' + item.NetAmount + '<br/>' +
                                'Balance:  ' + 'TK' + item.NetAmount + '<br/>' +
                                formattedSalesDate + '<br>' +
                                '<div style="display: flex; justify-content: space-between;">' +
                                '<a href="#" onclick="handleAddClick(' + PurchaseId + ')"><p style="font-weight: bold">Add</p></a>' +
                                '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                '</div';

                            // Check if data for the same PurchaseId already exists in tableData
                            var existingDataIndex = tableData.findIndex(item => item.PurchaseId === PurchaseId);
                            if (existingDataIndex !== -1) {
                                // Update the existing data for that PurchaseId
                                tableData[existingDataIndex].Description = description;
                            } else {
                                // Add a new entry for the unique PurchaseId
                                tableData.push({
                                    PurchaseId: PurchaseId,
                                    Description: description
                                });
                            }
                        });

                        // Update the off-canvas (table2) with the combined data
                        table2.setData(tableData);

                        // After deletion, update SLNo for the remaining rows in tableItems
                        updateSLNoForRemainingRows(tableItems, deletedSLNo);

                        calculation();
                    }
                }

                //previous ok code
                //function deleteRow(row) {
                //    // Show a confirmation dialog and delete the row if confirmed
                //    if (confirm("Are you sure you want to delete this row?")) {
                //        var rowData = [row.getData()]; // Store the data of the deleted row

                //        // Delete the row from the tableCategory
                //        tableCategory.deleteRow(row);


                //        //console.log("Row deleted successfully.", rowData);
                //        var tableData = table2.getData(); // Get the existing data in table2

                //        rowData.forEach(function (item) {
                //            var PurchaseId = item.PurchaseId;
                //            var salesDate = new Date(item.PurchaseDate);
                //            var formattedSalesDate = salesDate.getDate() + '-' +
                //                salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                //                salesDate.getFullYear();

                //            var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                //                'Total:  ' + 'TK' + item.NetAmount + '<br/>' +
                //                'Balance:  ' + 'TK' + item.NetAmount + '<br/>' +
                //                formattedSalesDate + '<br>' +
                //                '<div style="display: flex; justify-content: space-between;">' +
                //                '<a href="#" onclick="handleAddClick(' + PurchaseId + ')"><p style="font-weight: bold">Add</p></a>' +
                //                '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                //                '</div';

                //            // Check if data for the same PurchaseId already exists in tableData
                //            var existingDataIndex = tableData.findIndex(item => item.PurchaseId === PurchaseId);
                //            if (existingDataIndex !== -1) {
                //                // Update the existing data for that PurchaseId
                //                tableData[existingDataIndex].Description = description;
                //            } else {
                //                // Add a new entry for the unique PurchaseId
                //                tableData.push({
                //                    PurchaseId: PurchaseId,
                //                    Description: description
                //                });
                //            }
                //        });

                //        // Update the off-canvas (table2) with the combined data
                //        table2.setData(tableData);
                //    }
                //    calculation();
                //}




                //function deleteRow(row) {
                //    // Show a confirmation dialog and delete the row if confirmed
                //    if (confirm("Are you sure you want to delete this row?")) {

                //        var rowData = [row.getData()]; // Store the data of the deleted row

                //        // Delete the row from the table
                //        tableCategory.deleteRow(row);

                //        //console.log("Row deleted successfully.", rowData);
                //        $(`#${PurchaseId}`).remove();
                //        // Create a tableData array for populating the offcanvas
                //        var tableData = [];

                //        rowData.forEach(function (item) {
                //            var salesDate = new Date(item.PurchaseDate);
                //            var formattedSalesDate = salesDate.getDate() + '-' +
                //                salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                //                salesDate.getFullYear();

                //            var description = '<div class="border border-dark rounded" style="padding: 5px;">' +
                //                'Total:  ' + 'TK' + item.NetAmount + '<br/>' +
                //                'Balanace:  ' + 'TK' + item.NetAmount + '<br/>' +
                //                formattedSalesDate + '<br>' +
                //                '<div style="display: flex; justify-content: space-between;">' +
                //                '<a href="#" onclick="handleAddClick(' + item.PurchaseId + ')"><p style="font-weight: bold">Add</p></a>' +
                //                '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                //                '</div>';

                //            tableData.push({
                //                PurchaseId: item.PurchaseId,
                //                Description: description
                //            });
                //        });

                //        // Populate the offcanvas (table2) with the data
                //        table2.setData(tableData);
                //    }
                //    calculation();
                //}

                function startEditing(row) {
                    var rowData = row.getData();
                    row.update(rowData);
                    //row.getElement().classList.add("tabulator-editing");
                }
                PurchaseTypeName();


                function calculation() {
                    var DefaultCurrencyId = '@HttpContextAccessor.HttpContext.Session.GetInt32("defaultcurrencyid").ToString()';
                    var SelectedCurrencyId = $('#CountryId').val();

                    let TotalDebit = 0.00;
                    let TotalCredit = 0.00;
                    // let difference = 0.00;
                    let TotalAmount = 0.00;
                    // const items = ($("#jsGridItems").jsGrid('option', 'data'));
                    const items = tableCategory.getData();

                    if (isMultiCurrency == 1 && $('#CountryId').val() != DefaultCurrencyId) {
                        items.forEach(function (item) {

                            // TotalDebit += parseFloat(item.TKDebit);
                            TotalDebit += parseFloat(item.TKDebitLocal);
                            /*//console.log('jishaansmrity');*/
                            ////console.log(TotalDebit);
                            TotalCredit += parseFloat(item.TKCreditLocal);
                            /* //console.log('jishaansmrityMiqdaad');*/
                            ////console.log(TotalCredit);

                        });

                    }
                    else if ((isMultiCurrency == 0) || (isMultiCurrency == 1 && $('#CountryId').val() == DefaultCurrencyId)) {
                        items.forEach(function (item) {

                            // TotalDebit += parseFloat(item.TKDebit);
                            TotalDebit += parseFloat(item.TKDebit);
                            /*//console.log('jishaansmrity');*/
                            ////console.log(TotalDebit);
                            TotalCredit += parseFloat(item.TKCredit);
                            /* //console.log('jishaansmrityMiqdaad');*/
                            ////console.log(TotalCredit);

                        });

                    }

                    //if (isMultiDebitCredit == true && difference > 0) {
                    //    alert("debit credit amount is not same");
                    //}
                    /*alert(TotalDebit, TotalCredit)*/
                    TotalAmount = TotalDebit + TotalCredit;
                    //  difference = TotalDebit - TotalCredit;
                    ////console.log(TotalAmount);
                    //if (isMultiDebitCredit == true & $('#PurchaseTypeId').val() == 1 || $('#PurchaseTypeId').val() == 3) {
                    //    $('#VAmount-debit').val(TotalDebit);

                    //}

                    $('#VAmount').val(TotalAmount);

                    $('#VAmount-debit').val(TotalDebit);
                    $('#VAmount-debit').text(TotalDebit);

                    $('#VAmount-credit').val(TotalCredit);
                    $('#VAmount-credit').text(TotalCredit);

                    if (DefaultCurrencyId == SelectedCurrencyId) {

                        const value = 1; // Replace this with your calculation

                        // Update the text content of the p element with the label and the calculated value
                        const convertRateLabel = document.getElementById('convert-rate-label');
                        //convertRateLabel.textContent = 'Convert Rate: ' + value;

                        const totalRateLabel = document.getElementById('total-rate-label');
                        //totalRateLabel.textContent = 'Amount: ' + value * TotalAmount;



                    }
                    else {
                        const value = 0; // Replace this with your calculation

                        // Update the text content of the p element with the label and the calculated value
                        const convertRateLabel = document.getElementById('convert-rate-label');
                        //    convertRateLabel.textContent = 'Convert Rate: ' + value;
                    }

                }



                if (isMultiDebitCredit == true) {
                    //$("#divAccountMainId").addClass("d-none");
                    //$("#divBalance").addClass("d-none");
                    $("#AccountMainIdDropdown").addClass("d-none");
                }
                else {
                    //$("#divAccountMainId").toggleClass("d-none");
                    //$("#divBalance").toggleClass("d-none");
                    $("#AccountMainIdDropdown").toggleClass("d-none");

                }


                var purchaseCodeGet;

                function getAllPurchase(callback) {
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetPurchaseList", "Admin")', //"../Admin/GetPurchaseList",
                        dataType: "json",
                        success: function (data) {
                            //console.log("data::", data);
                            var purchaseCodeGetArray = [];

                            data.forEach(function (item) {
                                var purchaseCodeGet = item.PurchaseCode;
                                var purchaseIdGet = item.Id;
                                var purchaseData = {
                                    PurchaseCode: purchaseCodeGet,
                                    Id: purchaseIdGet
                                };
                                purchaseCodeGetArray.push(purchaseData);
                            });

                            if (typeof callback === "function") {
                                callback(purchaseCodeGetArray);
                            }
                        },
                        error: function (error) {
                            console.error("Error:", error);
                        }
                    });
                }


                //previous ok code
                var billNoHandle = document.getElementById("bill-no");
                var PurchaseCode = $('#bill-no').val();
                var PurchaseId = @ViewBag.PurchaseId;
                ////console.log("purchase id dekhi", PurchaseId);
                var btnSave = document.querySelector('#BtnSave');

                if (billNoHandle !== null) {
                    billNoHandle.addEventListener("input", function () {
                        var PurchaseCode = $('#bill-no').val();
                        if (PurchaseCode) {
                            getAllPurchase(function (purchaseCodeGetArray) {
                                // Filter the purchaseCodeGetArray to exclude entries with the same PurchaseId
                                var filteredPurchaseCodes = purchaseCodeGetArray.filter(function (item) {
                                    return item.Id !== PurchaseId;
                                });

                                var existingPurchaseCodes = filteredPurchaseCodes.map(function (item) {
                                    return item.PurchaseCode;
                                });

                                //if (existingPurchaseCodes.includes(PurchaseCode)) {
                                //    $("#bill-no-validation").html("Already has the same bill no!");
                                //    btnSave.disabled = true;
                                //} else {
                                //    $("#bill-no-validation").html("");
                                //    btnSave.disabled = false;
                                //}
                            });
                        } else {
                            $("#bill-no-validation").html(""); // Clear any previous validation message
                            btnSave.disabled = false; // Enable the button when the input is empty
                        }
                    });
                }



                //function getAllPurchase(callback) {
                //    $.ajax({
                //        type: "GET",
                //        url: "../Admin/GetPurchaseList",
                //        dataType: "json",
                //        success: function (data) {
                //            //console.log("data::", data);
                //            var purchaseCodeGetArray = [];
                //            data.forEach(function (item) {
                //                var purchaseCodeGet = item.PurchaseCode;
                //                var purchaseIdGet = item.Id;
                //                ////console.log("purchaseCodeGet", purchaseCodeGet);
                //                purchaseCodeGetArray.push(data);//{ PurchaseCode: purchaseCodeGet, purchaseIdGet: purchaseIdGet }
                //            });
                //            if (typeof callback === "function") {
                //                callback(purchaseCodeGetArray);
                //            }
                //        },
                //        error: function (error) {
                //            console.error("Error:", error);
                //        }
                //    });
                //}





                //billNoHandle.addEventListener("input", function () {
                //    var PurchaseCode = $('#bill-no').val();
                //    if (PurchaseCode) {
                //        getAllPurchase(function (purchaseCodeGetArray) {
                //            if (purchaseCodeGetArray.includes(PurchaseCode)) {
                //                $("#bill-no-validation").html("Already has the same bill no!");
                //                btnSave.disabled = true;
                //            } else {
                //                $("#bill-no-validation").html("");
                //                btnSave.disabled = false;
                //            }
                //        });
                //    } else {
                //        $("#bill-no-validation").html(""); // Clear any previous validation message
                //        btnSave.disabled = false; // Enable the button when the input is empty
                //    }
                //});
                function getRecurringValues(PurchaseId) {
                    var values = {};

                    values.Id = parseInt(document.getElementById("recurr-id").value);

                    values.TemplateName = document.getElementById("temp-name").value;

                    values.TemplateType = document.getElementById("RecurringType").value;

                    values.CreateDays = parseInt(document.getElementById("create-days").value ? document.getElementById("create-days").value : 0);

                    values.Interval = document.getElementById("Interval").value;

                    values.Week_ = document.getElementById("Week").value;

                    values.Month_ = document.getElementById("Month").value;

                    values.Integer_ = document.getElementById("Integer").value;

                    values.Count_ = document.getElementById("Count").value;

                    values.Every_ = parseInt(document.getElementById("every").value ? document.getElementById("every").value : 0);

                    values.RecurringStartDate = document.getElementById("recurring-start-date").value;

                    values.End_ = document.getElementById("End").value;

                    values.RecurringEndDate = document.getElementById("recurring-end-date").value;

                    values.occurences = parseInt(document.getElementById("occurences").value ? document.getElementById("occurences").value : 0);

                    values.PurchaseId = PurchaseId;

                    return values;
                }

                function gatherAdvTrxn(PurchaseId) {
                    var advtrxn = {
                        Id: $("#adv-trxn-id").val(),
                        PurchaseId: PurchaseId,
                        Duration: parseInt($("#every_adv").val()),
                        OccuringDate: $("#adv_Integer").val(), 
                        Occurence: $("#adv_occurences").val(),
                    ExpenseHeadId: $("#expenseHead").val(),
                        StartDate: $("#adv-start-date").val()
                    };
                    return advtrxn;
                }
                function parseDateTime(dateTimeString) {
                    return new Date(dateTimeString);
                }

            

                $('#BtnSave').click(function () {
                    var loaderinAajx = `<div class="loader"></div>`;


                    var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                    var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                    $("#ComId").val(ComId);
                    $("#LuserId").val(UserId);
                    var PurchasePayments;
                    if ('@ViewBag.DocTypeValue' == "Purchase Payment" || '@ViewBag.DocTypeValue' == "Expense" || '@ViewBag.DocTypeValue' == "Supplier credit" || '@ViewBag.DocTypeValue' == "Cheque" || '@ViewBag.DocTypeValue' == "GRR") {
                        PurchasePayments = TransactionMethodTable.getData();
                    }
                    else {
                        PurchasePayments = [];
                    }
                    let Items = tableCategory.getData();
                    let ItemsOfProductTable = tableItems.getData();

                    let PurchaseProductTaxTable = table1.getData();

                    for (let i = 0; i < PurchaseProductTaxTable.length; i++) {
                        PurchaseProductTaxTable[i].ComId = ComId;
                    }

                    //let ItemsOfPurchasePaymentTable = TransactionMethodTable.getData();
                    //console.log("Items::", Items);
                    //console.log("ItemsOfProductTable::", ItemsOfProductTable);
                    ////console.log("ItemsOfPurchasePaymentTable::", ItemsOfPurchasePaymentTable);
                    let categoryTable = Items;


                    // Calculate the sum of Items' PurchaseAmount
                    var itemSum = ItemsOfProductTable.reduce(function (total, item) {
                        return total + parseFloat(item.Amount || 0);
                    }, 0);

                    // Calculate the sum of ItemsCategory's Amount
                    var categorySum = categoryTable.reduce(function (total, category) {
                        return total + parseFloat(category.Amount || 0);
                    }, 0);

                    // var TaxSum = PurchaseProductTaxTable.reduce(function (total, tax) {
                    //     return total + parseFloat(tax.Amount || 0);
                    // }, 0);
                    var TaxSum = PurchaseProductTaxTable.reduce(function (total, tax) {
                        return tax.IsSum ? total + parseFloat(tax.Amount || 0) : total;
                    }, 0);

                    // Calculate the total Amount by adding both sums
                    var totalAmount = itemSum + categorySum;

                    //console.log("Total Amount:", totalAmount);


                    //let productTableData = tableDataabc;
                    //alert('wait');
                    var PurchaseId = $('#Id').val() || 0;   //$('#Id').val() ||
                    var SupplierId = Number($('#Supplier option:selected').val());
                    var SupplierName = $('#Supplier option:selected').text()
                    var CustomerId = Number($('#ship-to-customer option:selected').val());
                    var MasterPOId = null;

                    

                    let termtableData = termtable.getData();
                for (let i = 0; i < termtableData.length; i++) {
                        termtableData[i].ComId = ComId;
                        termtableData[i].PurchaseId = '@ViewBag.PurchaseId';
                    }


                    if ('@ViewBag.DocTypeValue' == "Supplier PO" ) {
                         MasterPOId = parseInt($("#MasterPOId").val());
                    }
                   
                    var newCustomerId;
                    if (@ViewBag.DocTypeId == 41 || @ViewBag.DocTypeId == 28) {  //hardcoded for test purpose. must be changed in future development
                        newCustomerId = null;
                    }
                    else {
                        newCustomerId = ((@ViewBag.DocTypeId == 22 || @ViewBag.CopyBill == 1) && @ViewBag.IsRecurring == 0) ? null : CustomerId;
                    }

                    var isSystem = false;
                    if ('@ViewBag.DocTypeValue' == "Stock Adjustment" && '@ViewBag.ProductId' != "0") {
                        isSystem = true;
                    }
                    //var CustomerName = $('#ship-to-customer option:selected').text()
                    var PrimaryAddress = $('#mail-address').val();
                    var EmailId = $('#purchase-mail-address').val();
                    var PaymentTermsId = Number($('#terms option:selected').val()) || null;
                    var newPaymentTermsId = (@ViewBag.DocTypeId== 22 || @ViewBag.CopyBill == 1) ? PaymentTermsId : null;
                    var TermName = $('#terms option:selected').text();
                    var newTermName = @ViewBag.DocTypeId== 22 ? TermName : null;
                    var PurchaseDate = $('#start-date').val() || $('#purchase-order-date').val() || $("#payment-date").val();
                    //var PurchaseDate = $('#purchase-order-date').val();
                    var DueDate = $('#end-date').val();
                    var PurchaseCode = $('#bill-no').val();
                    var PermitNo = $('#permit-no').val();
                    var NetAmount = TaxSum + totalAmount;
                    var CurrencyRate = $('#CurrencyRate').val();
                    //var DocTypeId = Number($('#DocType option:selected').val());
                    //var DocTypeId = @ViewBag.DocTypeId;
                    var DocTypeId = @ViewBag.CopyBill != 1 ? @ViewBag.DocTypeId : @ViewBag.BillId;
                    if (@ViewBag.IsRecurring == 1) {
                        DocTypeId = @ViewBag.DocTypeId;
                    }
                    //var CopyBillSignalForSaveFinally = @ViewBag.CopyBill != 1 ? 0 : 1;
                    //console.log("DocTypeId::", DocTypeId);
                    var Remarks = $('#memo').val();
                    var FilePath = $('#PurchaseFilePath').val();
                    var ShippingAddress = $('#shipping-mail-address').val();
                    var ShipVia = $('#ship-via').val();
                    var Cc = $('#cc-id').val();
                    var Bcc = $('#bcc-id').val();
                    //var multipleTag = $("#MultiTags").tagsinput('items');
                    var selectedTags = $('#tagDropdown').val();
                    var multipleTag = selectedTags;
                    var WarehouseIdMain = $('#WarehouseIdMain').val();
                    var AmountsAre = $("#AmountsAre").val();
                    var CurrencyId = $("#MultiiCurrencyId").val();
                    var TDS = $("#tds").text();

                    var StatusId;
                    if (PurchaseId == 0) {
                        StatusId = 1;
                    }
                    var TotalVat = NetAmount - totalAmount;

                    var SubTotal = NetAmount - TotalVat;;
                    //====validation handle starts======
                    if (!PurchaseDate) {
                        $("#bill-date-validation").html("Please enter bill date");
                        $("#bill-date-validation").html("Please enter purchase order date");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }
                    if (!DueDate) {
                        $("#due-date-validation").html("Please enter due date");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }
                    //if (!PurchaseCode) {
                    //    $("#bill-no-validation").html("Please enter bill no");
                    //    $("html, body").animate({
                    //        scrollTop: $("#modal-btn-id").offset().top
                    //    }, 100);
                    //}
                    var isValid = true;
                    if (SupplierId == 0) {
                        $("#supplier-id-validation").html("Please choose a supplier");
                        $("#vendor-id-validation").html("Please choose a vendor");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                        isValid = false;
                    }
                    if (CustomerId == 0) {
                        $("#ship-to-validation").html("Please choose a customer");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }
                    if (newPaymentTermsId == 0) {
                        $("#terms-id-validation").html("Please choose a customer");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }

                     
                    //clearing validation messages starts
                    // Add event listeners to the input fields
                    $("#purchase-order-date").on("focus", function () {
                        $("#bill-date-validation").html(""); // Clear the validation message
                    });

                    $("#end-date").on("focus", function () {
                        $("#due-date-validation").html(""); // Clear the validation message
                    });

                    $("#bill-no").on("focus", function () {
                        $("#bill-no-validation").html(""); // Clear the validation message
                    });

                    $("#Supplier").on("change", function () {
                        $("#supplier-id-validation").html(""); // Clear the validation message
                    });

                    $("#terms").on("change", function () {
                        $("#terms-id-validation").html(""); // Clear the validation message
                    });

                    var IsRecurring = 0;
                    var myDiv = document.getElementById("top-row");

                    if (myDiv.classList.contains("d-none")) {
                        IsRecurring = 1;
                    }
                    var IsRecognition = false;

                    if ('@ViewBag.DocTypeValue' == "Purchase Payment" ) {
                        const isRecogn = document.getElementById("isRecognition");

                        if (isRecogn.checked) {
                            IsRecognition = true;
                        }
                    }

                    //clearing validation messages ends
                    var fiscalMonthId = $("#FiscalMonthId").val();
                    var TermsMainId = $("#TermsId").val();

                     var isValid = true;
                 if (!WarehouseIdMain || WarehouseIdMain.length === 0) {
                     $('#locationError').text('Please select the Location');
                     isValid = false;
                 }

                  $('#WarehouseIdMain').on('change', function() {
                        $('#locationError').text('');
                    });

                     if (!PurchaseDate || PurchaseDate.length === 0) {
                     $('#payment-date-validation').text('Please select the Date');
                     isValid = false;
                   }

                   $('#purchase-order-date').on('change', function() {
                        $('#payment-date-validation').text('');
                    });

                   if (!isValid) {
                      return;
                  }                  

                    //====validation handle ends======

                    var vouchermodel =
                    {
                        ComId: ComId,
                        LuserId: UserId,
                        Id: PurchaseId,
                        SupplierId: SupplierId,
                        CustomerId: newCustomerId,
                        //CustomerName: CustomerName,
                        SupplierName: SupplierName,
                        PrimaryAddress: PrimaryAddress,
                        ShippingAddress: ShippingAddress,
                        ShipVia: ShipVia,
                        EmailId: EmailId,
                        PurchaseDate: PurchaseDate,
                        FilePath: FilePath,
                        DueDate: DueDate,
                        PurchaseCode: PurchaseCode,
                        PermitNo: PermitNo,
                        PaymentTermsId: PaymentTermsId,
                        TermName: newTermName,
                        DocTypeId: DocTypeId,
                        Remarks: Remarks,
                        AmountsAre: AmountsAre,
                        NetAmount: NetAmount,
                        CurrencyRate: CurrencyRate,
                        IsRecurring: IsRecurring,
                        TotalVat: TotalVat,
                        Cc: Cc,
                        Bcc: Bcc,
                        TermsMainId: TermsMainId,
                        StatusId: 1,
                        VoucherTags: multipleTag,
                        WarehouseIdMain: WarehouseIdMain,
                        Total: SubTotal,
                        GrandTotal: SubTotal,
                        ItemsCategory: categoryTable,
                    PurchaseTerms: termtableData,
                        PurchaseProductTax: PurchaseProductTaxTable,
                        Items: ItemsOfProductTable,
                        IsSystem: isSystem,
                        PurchasePayments: PurchasePayments,
                        CurrencyId: CurrencyId,
                    FiscalMonthId: fiscalMonthId,
                        MasterPOId : MasterPOId,
                        TDS : TDS,
                        IsRecognition: IsRecognition
                        //PurchasePayments: ItemsOfPurchasePaymentTable,
                    };



                    //console.log(vouchermodel)
                    var PurchaseIdAbc = 0;


                    $.ajax({
                        async: false,
                        type: "POST",
                        url: "@Url.Action("AddPurchase", "Purchase")",
                        data: JSON.stringify(vouchermodel),//{ model: JSON.stringify(vouchermodel), doctype: '@ViewBag.DocTypeValue' }, //JSON.stringify(vouchermodel),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            //console.log("after save console::", response);
                            PurchaseIdAbc = response.Id;
                            Doctype = response.Doctype;
                            ////console.log(response);
                            //console.log("response.message::", response.message);
                            if (response.message == "Purchase updated successfully") {
                                $("#bill-no").on("focus", function () {
                                    $("#bill-no-validation").html(""); // Clear the validation message
                                });
                            }
                            setTimeout(function () {
                                toastr.success(response.message, "", {
                                    "toastClass": "toast-green"
                                });
                                 if (IsRecurring == 1) {
                                    window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                                 }
                            }, 1500);
                            //alert(" Data Saved");

                        },
                        error: function (response) {
                            $("supplier-id-validation").innerHTML(response.message);
                        }
                    });
                    if ('@ViewBag.DocTypeValue' == "Purchase Payment" ) 
                    {
                        const isRecognition = document.getElementById("isRecognition");

                        if (isRecognition.checked) {
                            var advTrasaction = JSON.stringify(gatherAdvTrxn(PurchaseIdAbc));
                            $.ajax({

                                url: '@Url.Action("AdvanceSalesCreation", "Sales")',
                                type: 'POST',
                                data: advTrasaction,
                                async: false,
                                contentType: "application/json; charset=utf-8",
                                dataType: 'json',
                                success: function (response) {

                                    console.log("Done");
                                },
                                error: function (error) {
                                    console.log("Error");
                                }
                            });
                        }
                    }
                    

                    if (vouchermodel.IsRecurring === 1) {
                        var recdata = getRecurringValues(PurchaseIdAbc);
                        var data = JSON.stringify(recdata);
                        $.ajax({

                            url: '@Url.Action("RecurringDetailsCreation", "Sales")',
                            type: 'POST',
                            data: data,
                            async: false,
                            contentType: "application/json; charset=utf-8",
                            dataType: 'json',
                            success: function (response) {

                                console.log("Done");
                            },
                            error: function (error) {
                                console.log("Error");
                            }
                        });
                    }
                    if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                        var formData = new FormData();
                        //formData.append("file", fileInput.files[0]);
                    for (var i = 0; i < fileInput.files.length; i++) {
                        formData.append("files", fileInput.files[i]);
                    }
                        formData.append("PurchaseIdAbc", PurchaseIdAbc);

                        $.ajax({
                            async: false,
                            type: "POST",
                            url: "@Url.Action("UploadImage", "Purchase")",
                            data: formData,
                            contentType: false,
                            processData: false,
                            success: function (response) {
                                // Handle the response
                            }
                        });
                    } else {
                        // Handle the case where no file was selected
                    }

                    if (PurchaseIdAbc > 0) {
                        setTimeout(function () {
                            window.location.href = '@Url.Action("AddBillByType", "Accounts")?Type=' + '@ViewBag.DocTypeValue' + '&PurchaseId=' + PurchaseIdAbc;
                        }, 3000)
                    }


                });



                $('#BtnSaveAndClose').click(function () {
                    var loaderinAajx = `<div class="loader"></div>`;


                    var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';
                    var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
                    $("#ComId").val(ComId);
                    $("#LuserId").val(UserId);
                    var PurchasePayments;
                    if ('@ViewBag.DocTypeValue' == "Purchase Payment" || '@ViewBag.DocTypeValue' == "Expense" || '@ViewBag.DocTypeValue' == "Supplier credit" || '@ViewBag.DocTypeValue' == "Cheque" || '@ViewBag.DocTypeValue' == "GRR") {
                        PurchasePayments = TransactionMethodTable.getData();
                    }
                    else {
                        PurchasePayments = [];
                    }
                    let Items = tableCategory.getData();
                    let ItemsOfProductTable = tableItems.getData();

                    let PurchaseProductTaxTable = table1.getData();

                    for (let i = 0; i < PurchaseProductTaxTable.length; i++) {
                        PurchaseProductTaxTable[i].ComId = ComId;
                    }

                    //let ItemsOfPurchasePaymentTable = TransactionMethodTable.getData();
                    //console.log("Items::", Items);
                    //console.log("ItemsOfProductTable::", ItemsOfProductTable);
                    ////console.log("ItemsOfPurchasePaymentTable::", ItemsOfPurchasePaymentTable);
                    let categoryTable = Items;


                    // Calculate the sum of Items' PurchaseAmount
                    var itemSum = ItemsOfProductTable.reduce(function (total, item) {
                        return total + parseFloat(item.Amount || 0);
                    }, 0);

                    // Calculate the sum of ItemsCategory's Amount
                    var categorySum = categoryTable.reduce(function (total, category) {
                        return total + parseFloat(category.Amount || 0);
                    }, 0);

                    // var TaxSum = PurchaseProductTaxTable.reduce(function (total, tax) {
                    //     return total + parseFloat(tax.Amount || 0);
                    // }, 0);
                    var TaxSum = PurchaseProductTaxTable.reduce(function (total, tax) {
                        return tax.IsSum ? total + parseFloat(tax.Amount || 0) : total;
                    }, 0);

                    // Calculate the total Amount by adding both sums
                    var totalAmount = itemSum + categorySum;

                    //console.log("Total Amount:", totalAmount);

                var MasterPOId = null;
                if ('@ViewBag.DocTypeValue' == "Supplier PO") {
                    MasterPOId = parseInt($("#MasterPOId").val());
                }
                    //let productTableData = tableDataabc;
                    //alert('wait');
                    var PurchaseId = $('#Id').val() || 0;   //$('#Id').val() ||
                    var SupplierId = Number($('#Supplier option:selected').val());
                    var SupplierName = $('#Supplier option:selected').text()
                    var CustomerId = Number($('#ship-to-customer option:selected').val());
                    var newCustomerId;
                    if (@ViewBag.DocTypeId == 41 || @ViewBag.DocTypeId == 28) {  //hardcoded for test purpose. must be changed in future development
                        newCustomerId = null;
                    }
                    else {
                        //newCustomerId = (@ViewBag.DocTypeId == 22 || @ViewBag.CopyBill == 1) ? null : CustomerId;
                        newCustomerId = ((@ViewBag.DocTypeId == 22 || @ViewBag.CopyBill == 1) && @ViewBag.IsRecurring == 0) ? null : CustomerId;
                    }

                    var isSystem = false;
                    if ('@ViewBag.DocTypeValue' == "Stock Adjustment" && '@ViewBag.ProductId' != "0") {
                        isSystem = true;
                    }
                    //var CustomerName = $('#ship-to-customer option:selected').text()
                    var PrimaryAddress = $('#mail-address').val();
                    var EmailId = $('#purchase-mail-address').val();
                    var PaymentTermsId = Number($('#terms option:selected').val()) || null;
                    var newPaymentTermsId = (@ViewBag.DocTypeId== 22 || @ViewBag.CopyBill == 1) ? PaymentTermsId : null;
                    var TermName = $('#terms option:selected').text();
                    var newTermName = @ViewBag.DocTypeId== 22 ? TermName : null;
                    var PurchaseDate = $('#start-date').val() || $('#purchase-order-date').val() || $("#payment-date").val();
                    //var PurchaseDate = $('#purchase-order-date').val();
                    var DueDate = $('#end-date').val();
                    var PurchaseCode = $('#bill-no').val();
                    var PermitNo = $('#permit-no').val();
                    var NetAmount = TaxSum + totalAmount;
                    var CurrencyRate = $('#CurrencyRate').val();
                    //var DocTypeId = Number($('#DocType option:selected').val());
                    //var DocTypeId = @ViewBag.DocTypeId;
                    var DocTypeId = @ViewBag.CopyBill != 1 ? @ViewBag.DocTypeId : @ViewBag.BillId;
                    if (@ViewBag.IsRecurring == 1) {
                        DocTypeId = @ViewBag.DocTypeId;
                    }
                    //var CopyBillSignalForSaveFinally = @ViewBag.CopyBill != 1 ? 0 : 1;
                    //console.log("DocTypeId::", DocTypeId);
                    var Remarks = $('#memo').val();
                    var FilePath = $('#PurchaseFilePath').val();
                    var ShippingAddress = $('#shipping-mail-address').val();
                    var ShipVia = $('#ship-via').val();
                    var Cc = $('#cc-id').val();
                    var Bcc = $('#bcc-id').val();
                    //var multipleTag = $("#MultiTags").tagsinput('items');
                    var selectedTags = $('#tagDropdown').val();
                    var multipleTag = selectedTags;
                    var WarehouseIdMain = $('#WarehouseIdMain').val();
                    var AmountsAre = $("#AmountsAre").val();
                    var CurrencyId = $("#MultiiCurrencyId").val();

                var TDS = $("#tds").text();

                    var StatusId;
                    if (PurchaseId == 0) {
                        StatusId = 1;
                    }
                    var TotalVat = NetAmount - totalAmount;
                    //====validation handle starts======
                    if (!PurchaseDate) {
                        $("#bill-date-validation").html("Please enter bill date");
                        $("#bill-date-validation").html("Please enter purchase order date");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }
                    if (!DueDate) {
                        $("#due-date-validation").html("Please enter due date");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }
                    //if (!PurchaseCode) {
                    //    $("#bill-no-validation").html("Please enter bill no");
                    //    $("html, body").animate({
                    //        scrollTop: $("#modal-btn-id").offset().top
                    //    }, 100);
                    //}
                    var isValid = true;
                    if (SupplierId == 0) {
                        $("#supplier-id-validation").html("Please choose a supplier");
                        $("#vendor-id-validation").html("Please choose a vendor");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                        isValid = false;
                    }
                    if (CustomerId == 0) {
                        $("#ship-to-validation").html("Please choose a customer");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }
                    if (newPaymentTermsId == 0) {
                        $("#terms-id-validation").html("Please choose a customer");
                        $("html, body").animate({
                            scrollTop: $("#modal-btn-id").offset().top
                        }, 100);
                    }
                   

                    //clearing validation messages starts
                    // Add event listeners to the input fields
                    $("#purchase-order-date").on("focus", function () {
                        $("#bill-date-validation").html(""); // Clear the validation message
                    });

                    $("#end-date").on("focus", function () {
                        $("#due-date-validation").html(""); // Clear the validation message
                    });

                    $("#bill-no").on("focus", function () {
                        $("#bill-no-validation").html(""); // Clear the validation message
                    });

                    $("#Supplier").on("change", function () {
                        $("#supplier-id-validation").html(""); // Clear the validation message
                    });

                    $("#terms").on("change", function () {
                        $("#terms-id-validation").html(""); // Clear the validation message
                    });

                    var IsRecurring = 0;
                    var myDiv = document.getElementById("top-row");

                    if (myDiv.classList.contains("d-none")) {
                        IsRecurring = 1;
                    }
                    var IsRecognition = false;

                    if ('@ViewBag.DocTypeValue' == "Purchase Payment" ) {
                        const isRecogn = document.getElementById("isRecognition");

                        if (isRecogn.checked) {
                            IsRecognition = true;
                        }
                    }

                let termtableData = termtable.getData();
                for (let i = 0; i < termtableData.length; i++) {
                    termtableData[i].ComId = ComId;
                    termtableData[i].PurchaseId = '@ViewBag.PurchaseId';
                }

                    var fiscalMonthId = $("#FiscalMonthId").val();

                var TermsMainId = $("#TermsId").val();
                 
                 var isValid = true;
                 if (!WarehouseIdMain || WarehouseIdMain.length === 0) {
                     $('#locationError').text('Please select the Location');
                     isValid = false;
                 }

                   $('#WarehouseIdMain').on('change', function() {
                        $('#locationError').text('');
                    });

                    if (!PurchaseDate || PurchaseDate.length === 0) {
                     $('#payment-date-validation').text('Please select the Date');
                     isValid = false;
                   }

                   $('#purchase-order-date').on('change', function() {
                        $('#payment-date-validation').text('');
                    });

                   if (!isValid) {
                      return;
                  }                 

                    //clearing validation messages ends

                    //====validation handle ends======

                     var vouchermodel =
                        {
                            ComId: ComId,
                            LuserId: UserId,
                            Id: PurchaseId,
                            SupplierId: SupplierId,
                            CustomerId: newCustomerId,
                            //CustomerName: CustomerName,
                            SupplierName: SupplierName,
                            PrimaryAddress: PrimaryAddress,
                            ShippingAddress: ShippingAddress,
                            ShipVia: ShipVia,
                            EmailId: EmailId,
                            PurchaseDate: PurchaseDate,
                            FilePath: FilePath,
                            DueDate: DueDate,
                            PurchaseCode: PurchaseCode,
                            PermitNo: PermitNo,
                            PaymentTermsId: PaymentTermsId,
                            TermName: newTermName,
                            DocTypeId: DocTypeId,
                            Remarks: Remarks,
                            AmountsAre: AmountsAre,
                            NetAmount: NetAmount,
                            CurrencyRate: CurrencyRate,
                            TotalVat: TotalVat,
                            IsRecurring: IsRecurring,
                            Cc: Cc,
                            Bcc: Bcc,
                            StatusId: 1,
                            VoucherTags: multipleTag,
                            WarehouseIdMain : WarehouseIdMain,
                            ItemsCategory: categoryTable,
                            PurchaseProductTax: PurchaseProductTaxTable,
                            TDS : TDS,
                            Items: ItemsOfProductTable,
                            IsSystem : isSystem,
                            PurchasePayments: PurchasePayments,

                    TermsMainId: TermsMainId,
                    PurchaseTerms: termtableData,
                            CurrencyId: CurrencyId,
                            MasterPOId: MasterPOId,
                            FiscalMonthId: fiscalMonthId,
                            IsRecognition: IsRecognition,
                            //PurchasePayments: ItemsOfPurchasePaymentTable,,
                        };



                    //console.log(vouchermodel)
                    var PurchaseIdAbc = 0;


                    $.ajax({
                        async: false,
                        type: "POST",
                        url: "@Url.Action("AddPurchase", "Purchase")",
                        data: JSON.stringify(vouchermodel), //{ model: vouchermodel, CopyBill: 1 }, //
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            //console.log("after save console::", response);
                            PurchaseIdAbc = response.Id;
                            ////console.log(response);
                            //console.log("response.message::", response.message);
                            if (response.message == "Purchase updated successfully") {
                                $("#bill-no").on("focus", function () {
                                    $("#bill-no-validation").html(""); // Clear the validation message
                                });
                            }
                            setTimeout(function () {
                                toastr.success(response.message, "", {
                                    "toastClass": "toast-green"
                                });

                                 if (IsRecurring == 1) {
                                    window.location.href = '@Url.Action("RecurringTransactionList", "Sales")';
                                 }

                            }, 1500);
                            //alert(" Data Saved");

                        },
                        error: function (response) {
                            $("supplier-id-validation").innerHTML(response.message);
                        }
                    });

                if ('@ViewBag.DocTypeValue' == "Purchase Payment") {
                    const isRecognition = document.getElementById("isRecognition");

                    if (isRecognition.checked) {
                        var advTrasaction = JSON.stringify(gatherAdvTrxn(PurchaseIdAbc));
                        $.ajax({

                            url: '@Url.Action("AdvanceSalesCreation", "Sales")',
                            type: 'POST',
                            data: advTrasaction,
                            async: false,
                            contentType: "application/json; charset=utf-8",
                            dataType: 'json',
                            success: function (response) {

                                console.log("Done");
                            },
                            error: function (error) {
                                console.log("Error");
                            }
                        });
                    }
                }

                    if (vouchermodel.IsRecurring === 1) {
                        var recdata = getRecurringValues(PurchaseIdAbc);
                        var data = JSON.stringify(recdata);
                        $.ajax({

                            url: '@Url.Action("RecurringDetailsCreation", "Sales")',
                            type: 'POST',
                            data: data,
                            async: false,
                            contentType: "application/json; charset=utf-8",
                            dataType: 'json',
                            success: function (response) {

                                console.log("Done");
                            },
                            error: function (error) {
                                console.log("Error");
                            }
                        });
                    }
                    if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                        var formData = new FormData();
                        //formData.append("file", fileInput.files[0]);
                    for (var i = 0; i < fileInput.files.length; i++) {
                        formData.append("files", fileInput.files[i]);
                    }
                        formData.append("PurchaseIdAbc", PurchaseIdAbc);

                        $.ajax({
                            async: false,
                            type: "POST",
                            url: "@Url.Action("UploadImage", "Purchase")",
                            data: formData,
                            contentType: false,
                            processData: false,
                            success: function (response) {
                                // Handle the response
                            }
                        });
                    } else {
                        // Handle the case where no file was selected
                    }

                    if (PurchaseIdAbc > 0) {
                        setTimeout(function () {
                            window.location.href = '@Url.Action("billlistqb", "Accounts")';
                        }, 3000)
                    }


                });

            });
            // Get all elements with the "tabulator-field" attribute equal to "AccName"
            var elements = document.querySelectorAll('[tabulator-field="AccName"]');

            // Add a click event listener to each element
            elements.forEach(function (element) {
                element.addEventListener('click', function () {
                    alert('Element with tabulator-field="AccName" clicked!');
                });
            });

            function saveAndClose() {
            }


            /* make payment all code satrts*/
            if (@ViewBag.PaymentSignal== 1) {
                $("#tabulatorCategoryGrid").addClass("d-none");
                $("#tabulatorItemsGrid").addClass("d-none");
                $("#toggle-category-details").addClass("d-none");
                $("#toggle-item-details").addClass("d-none");
                $("#add-row").addClass("d-none");
                $("#add-row-second-table").addClass("d-none");
                $("#clear-second-table").addClass("d-none");
                $("#clear-second-table").addClass("d-none");
                $("#clear").addClass("d-none");
                $("#catgeoryDetails").addClass("d-none");
                $("#ItemDetails").addClass("d-none");
                $("#parent-payment-table").removeClass("d-none");
            }

            var localFieldsForPaymentTable = [

                {
                    headerSort: false,
                    field: "drag",
                    frozen: true,
                    formatter: function (cell, formatterParams) {
                        return "<i class='fas fa-bars drag-icon'></i>";
                    },
                    width: 30,
                    headerSort: false,
                    rowHandle: true,


                },
                {
                    title: "DESCRIPTION",
                    field: "AccName",
                    frozen: true,
                    editable: true,
                    headerSort: false,
                    width: '30px',

                    formatter: "html",
                    /*editor: categoryEditor,*/
                    editorParams: {
                        listOnEmpty: true,
                        autocomplete: true,
                    }
                },





                { title: "AccCategory", field: "AccountCategory", movable: false, headerSort: false, visible: false },
                { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
                { title: "Account Id", field: "AccId", movable: false, headerSort: false, visible: false },
                { title: "Name", field: "Name", editor: "input", headerSort: false, editable: true, movable: false, visible: false },
                {
                    title: "DUE DATE",
                    field: "Amount",
                    editable: true,
                    hozAlign: "right",
                    width: '20px',
                    headerSort: false,
                    bottomCalc: "sum",
                    movable: false,
                    editor: "input",
                },
                {
                    title: "ORIGINAL AMOUNT",
                    field: "Amount",
                    editable: true,
                    hozAlign: "right",
                    width: '10px',
                    headerSort: false,
                    bottomCalc: "sum",
                    movable: false,
                    editor: "input",
                },
                {
                    title: "OPEN BALANCE",
                    field: "Amount",
                    editable: true,
                    hozAlign: "right",
                    width: '10px',
                    headerSort: false,
                    bottomCalc: "sum",
                    movable: false,
                    editor: "input",
                },
                {
                    title: "PAYMENT",
                    field: "Amount",
                    editable: true,
                    hozAlign: "right",
                    width: '10px',
                    headerSort: false,
                    bottomCalc: "sum",
                    movable: false,
                    editor: "input",
                },
            ];


            var tablePayment = new Tabulator("#tabulatorPaymentGrid", {
                height: "auto",
                layout: "fitDataStretch",
                columns: [
                    ...localFieldsForPaymentTable,
                    {
                        title: "",
                        field: "Delete",
                        movable: false,

                        formatter: function (cell, formatterParams) {
                            return "<i class='fas fa-trash-alt delete-icon'></i>";
                        },
                        width: "6px",
                        headerSort: false,
                        cellClick: function (e, cell) {
                            var rowData = cell.getRow().getData();
                            var row = cell.getRow();
                            deleteRow(row);


                        }
                    }
                ],
                cellEdited: function (cell) {
                    // Check if the "Amount" cell is empty (value is not provided)
                    if (cell.getColumn().getField() === "Amount" && cell.getValue() === null) {
                        // Display an error message in the specified <span> element
                        $("#category-table-validation").text("Please enter an amount.");
                    } else {
                        // Clear the error message if the "Amount" cell has a value
                        $("#category-table-validation").text("");
                    }
                },

                movableRows: true,
                movableColumns: true,

                responsiveLayout: true

            });
            /*  make payment all code ends*/



            /*offcanvas functionalities starts*/

            var columns2 = [
                { title: "Id", field: "PurchaseId", visible: false },
                { title: "Transactions", field: "Description", formatter: "html" }
            ];

            var table2 = new Tabulator("#invoice-table", {
                layout: "fitColumns",
                addRowPos: "bottom",
                columns: columns2
            });

        document.addEventListener("DOMContentLoaded", function () {
            const checkbox = document.getElementById("showBDPOItem");
            const bdpoTable = document.getElementById("BDPO-table");
            const paginationexternal = document.getElementById("paginationexternalDiv");

            // Function to toggle the d-none class
            function toggleBDPOVisibility() {
                if (checkbox.checked) {
                    bdpoTable.classList.remove("d-none");
                    paginationexternal.classList.remove("d-none");
                } else {
                    bdpoTable.classList.add("d-none");
                    paginationexternal.classList.add("d-none");
                }
            }

            // Initial check
            toggleBDPOVisibility();

            // Add event listener to the checkbox
            checkbox.addEventListener("change", toggleBDPOVisibility);
        });

        var docTypeValue = '@ViewBag.DocTypeValue';

        var supplierPOItem = [
            
            {
                title: "Unique Column",
                field: "UniqueColumData", // Use a unique field name
                headerSort: false,
                //formatter: generateUniqueId,
                width: 100, // Adjust the width as needed
                movable: false,
                editor: false, // You may want to disable editing for this column
                visible: false, // Set the visibility as needed
            },
            { title: "Id", field: "Id", movable: false, headerSort: false, visible: false },
            { title: "SL.", field: "SLNo", headerSort: false, frozen: true, width: '3px',  hozAlign: "right" },
            { title: "ComId", field: "ComId", movable: false, headerSort: false, visible: false },
            { title: "ProductId", field: "ProductId", movable: false, headerSort: false, visible: false },
            { title: "ColorId", field: "ColorId", movable: false, headerSort: false, visible: false },

            { title: "SizeId", field: "SizeId", movable: false, headerSort: false, visible: false },
            { title: "StyleId", field: "StyleId", movable: false, headerSort: false, visible: false },
            { title: "BuyerPOId", field: "BuyerPOId", movable: false, headerSort: false, visible: false },
            {
                title: "isTransaction",
                field: "isTransaction",
                headerSort: false,
                editable: true,
                movable: false,
                visible: false,
                formatter: "tickCross",
                editor: true,
                formatterParams: { crossElement: true }, // Set the default value to true (tick)
            },
            
            {
                title: "PRODUCT",
                field: "ProductName",
                frozen: false, headerFilter: "input" ,

                editable: docTypeValue !== "Supplier PO",
                headerSort: false,

                headerHozAlign: "center",
                formatter: "html",
                editorParams: {
                    listOnEmpty: true,
                    autocomplete: true,
                },
            },
            { title: "CategoryName", field: "CategoryName", movable: false, headerSort: false, visible: true, headerFilter: "input" },
            {
                title: "DESCRIPTION", headerSort: false, field: "Description", movable: false, editor: "input", editable: true,
                headerHozAlign: "center", headerFilter: "input"
            },
            {
                title: "Color",
                field: "ColorName",
                visible: true, headerFilter: "input"
            },
            {
                title: "Size",
                field: "SizeName",
                visible: true, headerFilter: "input"
            },
            {
                title: "RATE",
                field: "Rate", 
                hozAlign: "right",
                headerSort: false,
                movable: false,
                headerHozAlign: "center", headerFilter: "input"
            },
            { title: "BDPO", field: "PurchaseCode", movable: false, headerSort: false, visible: true, headerFilter: "input" },
            {
                title: "BuyerName",
                field: "Name",
                frozen: false,
                editable: true,
                headerSort: false,
                headerHozAlign: "center",

                formatter: "html", headerFilter: "input",
            },
            { title: "StyleNo", field: "Style", movable: false, headerSort: false, visible: true },
            {
                title: "BuyerPO",
                field: "BuyerPO",
                visible: true, headerFilter: "input"
            },
            
            
            {
                title: "PO Quantity",
                field: "Quantity",
                hozAlign: "right",
                headerSort: false,
                movable: false,
                editor: "input",
                default: 1,
                headerHozAlign: "center", headerFilter: "input"
            },
            { title: "PO Date", field: "PurchaseDate", movable: false, headerSort: false, visible: true, headerFilter: "input" },
            {
                title: "Remaining Qty",
                field: "Quantity",
                hozAlign: "right",
                headerSort: false,
                movable: false,
                editor: "input",
                default: 1,
                headerHozAlign: "center", headerFilter: "input"
            },
            { title: "SKU", field: "SKU", headerSort: false, visible: false, editable: true, },

            
            { title: "ParentId", field: "PurchaseItemsId", movable: false, headerSort: false, visible: false },
            {
                title: "Location",
                titleFormatter: "html",
                field: "WHName",
                width: 200,
                hozAlign: "center",
                headerHozAlign: "center",
                sorter: "number",
                visible: false,
            },
            {
                title: "Hidden Value",
                field: "WarehouseId",
                visible: false,
                editor: "input",
            },
            
            
            {
                title: "Price",
                field: "Price", 
                hozAlign: "right",
                headerSort: false,
                movable: false,
                visible: false,
                headerHozAlign: "center"
            },
            {
                title: "",
                field: "DefaultPrice", 
                hozAlign: "right",
                headerSort: false,
                movable: false,
                visible: false,
                headerHozAlign: "center"
            },
            {
                title: "AMOUNT",
                field: "Amount",
                editable: false,
                hozAlign: "right",
                headerSort: false,
                headerHozAlign: "right",
                visible: false,
                headerHozAlign: "right",
            },
            {
                title: '', headerHozAlign: "center", field: "FilePath", width: 10, hozAlign: "left", visible: false
            },
            
            { title: "PurchaseId", field: "PurchaseId", movable: false, headerSort: false, visible: false },
            { title: "DocType", field: "DocType", movable: false, headerSort: false, visible: false },
            
            { title: "PurchaseCode", field: "PurchaseCode", movable: false, headerSort: false, visible: false },
            { title: "NetAmount", field: "NetAmount", movable: false, headerSort: false, visible: false },
            { title: "CurrencyRate", field: "CurrencyRate", movable: false, headerSort: false, visible: false },

            { title: "Customer Id", field: "CustomerId", movable: false, headerSort: false, visible: false },
            
            {
                title: "TAX",
                field: "MasterTaxName",
                hozAlign: "center",
                headerHozAlign: "center",
                sorter: "number",
                visible: false,
                headerHozAlign: "center",
                
            },
            {
                title: "Hidden Tax",
                field: "MasterTaxId",
                visible: false,
            }


        ];

            var bdpoTable = new Tabulator("#BDPO-table", {
                layout: "fitColumns",
                columns: supplierPOItem,
                selectable: 1,
                pagination: true,
                scrollHorizontal: true,
                paginationMode: "local",
                filterMode: "local",
                paginationSize: 5,
                paginationInitialPage: 1,
                //paginationSizeSelector: [5, 10, 25, 50, 100, true],
                paginationCounter: "rows",
                columnDefaults: {
                    resizable: true,
                },
            });

            function paginationexternalFunc()
            {
                var newSize = parseInt($("#paginationexternal").val());
                bdpoTable.setPageSize(newSize);
            }

            bdpoTable.on("rowDblClick", function (e, row) {

                var rowData = row.getData();

                tableItems.addData(rowData);

                // renumberRowsItem();
                // calculation();
                bdpoTable.deleteRow(row);
                calculateTotalSum();
            });

            @*if('@transactionType' ==="Credit-note")
            {*@
            var customerDropdown = $("#Supplier");

            customerDropdown.on("change", function () {
                // Get the selected value
                var selectedValue = $(this).val();
                tablePayment.clearData();
                LoadCustomerWiseData(selectedValue);
            });


            function LoadCustomerWiseData(selectedValue) {
                if ('@ViewBag.DocTypeValue' == "Purchase Order" || '@ViewBag.DocTypeValue' == "Supplier PO"|| '@ViewBag.DocTypeValue' == "GRR") {
                    var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
                    offcanvas.hide();
                }
                else {
                    var offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasRightRate'));
                    offcanvas.show();
                }

                if ('@ViewBag.DocTypeValue' == "GRR") {
                    $.ajax({
                        //url: '@Url.Action("CustomerWiseSupplierPO", "Accounts")',
                        url: '@Url.Action("GetProductListByBDPO", "Accounts")',
                        data: { SupplierId: selectedValue },
                        type: 'GET',
                        async: true,
                        dataType: 'json',
                        success: function (result) {
                            if (result.Success == 1) {
                                

                                var baseUrl = window.location.origin;
                                var tableData = [];

                                result.ProductList.forEach(function (item) {

                                    var salesDate = new Date(item.PurchaseDate);
                                    item.PurchaseDate = salesDate.getDate() + '-' +
                                        salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                        salesDate.getFullYear();

                                });


                            bdpoTable.setData(result.ProductList);
                            }
                        },
                        error: function () {
                            toastr.error('Unable to Save');
                            //alert('Unable to Save');
                        }
                    });
                }
                else
                {
                    $.ajax({
                        url: '@Url.Action("CustomerWiseBillData", "Accounts")',
                        data: { SupplierId: selectedValue },
                        type: 'GET',
                        async: true,
                        dataType: 'json',
                        success: function (result) {
                            if (result.Success == "1") {
                                toastr.success(result.ex, "", {
                                    "toastClass": "toast-green",
                                });
                                //populateTableWithData(result.Data);
                                //console.log("CustomerWiseBillData", result.Data);
                                var baseUrl = window.location.origin;
                                var tableData = [];

                                result.Data.forEach(function (item) {

                                    var salesDate = new Date(item.PurchaseDate);
                                    var formattedSalesDate = salesDate.getDate() + '-' +
                                        salesDate.toLocaleString('default', { month: 'short' }) + '-' +
                                        salesDate.getFullYear();

                                    ////console.log("item.Id ,", item.Id)
                                    var description = '<div class="border border-dark rounded" style="padding: 5px;">' + 'Total:  ' + 'TK' + item.NetAmount + '<br/>' +
                                        'Balanace:  ' + 'TK' + item.NetAmount + '<br/>' +
                                        formattedSalesDate + '<br>' +
                                        item.Doctype + '<br>' +
                                        '<div style="display: flex; justify-content: space-between;">' +
                                        '<a href="#" onclick="handleAddClick(' + item.Id + ')"><p style="font-weight: bold">Add</p></a>' +
                                        '<a href="#"><p style="font-weight: bold">Open</p></a>' + '</div>' +
                                        '</div>';

                                    tableData.push({
                                        PurchaseId: item.Id,
                                        Description: description
                                    });
                                });


                                table2.setData(tableData);
                            }
                        },
                        error: function () {
                            toastr.error('Unable to Save');
                            //alert('Unable to Save');
                        }
                    });
                }
                
            }
            /*   }*/

            function formatDate(dateStr) {
                const date = new Date(dateStr);
                const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                const day = date.getDate();
                const month = monthNames[date.getMonth()];
                const year = date.getFullYear();
                return `${day} ${month} ${year}`;
            }

            function handleAddClick(PurchaseId) {
                var itemTableData = tableItems.getData();
                var categoryTableData = tableCategory.getData();
                var CombinedTableData = itemTableData.concat(categoryTableData);
                //console.log("CombinedTableData check di new kore jokhon add dicchi", CombinedTableData);

                $('#list-of-po').empty();
                const uniquePurchaseData = [];
                const uniquePurchaseIds = new Set();

                CombinedTableData.forEach(function (item) {
                    if (!uniquePurchaseIds.has(item.PurchaseId)) {
                        uniquePurchaseData.push(item);
                        uniquePurchaseIds.add(item.PurchaseId);
                    }
                });
                //console.log("dekhi unique purchaseid pacchi kina check di new kore jokhon add dicchi", uniquePurchaseData)
                //$('#dropdownMenuLink').empty();

                /*            setTimeout(function () {*/
                $('#dropdownMenuLink').empty();
                // Create a string to hold the dynamic dropdown content
                var dropdownContent = '';
                var DropDownData = '';
                // Create the main dropdown element  data-bs-toggle="dropdown" aria-expanded="false"
                DropDownData = `
                                    <a class="" href="#" role="button" id="dropdownMenuLink">
                                        ${uniquePurchaseData.length} linked purchase order
                                    </a>
                                    <div class="dropdown-menu px-2" aria-labelledby="dropdownMenuLink" style="width: 204%;">
                                        <div class="row">
                                            <div class="col-lg-3">
                                                <strong>Type</strong><br />
                                            </div>
                                            <div class="col-lg-3">
                                                <strong>Date</strong><br />
                                            </div>
                                            <div class="col-lg-3">
                                                <strong>Amount</strong><br />
                                            </div>
                                            <div class="col-lg-3">
                                                <strong></strong><br />
                                            </div>

                                        </div>
                                `;

                 // Iterate over the itemTableData array and add content for each item
                uniquePurchaseData.forEach(function (item) {
                    var url = '@Url.Action("AddBillByType", "Accounts")?Type=' + item.DocType + '&PurchaseId=' + item.PurchaseId;
                    dropdownContent += `
                                        <div class="row mt-3" id="${item.PurchaseId}">
                                            <div class="col-lg-3">
                                            <a href="${url}"><span>${item.DocType}</span></a>
                                            </div>
                                            <div class="col-lg-3">
                                                <span>${formatDate(item.PurchaseDate)}</span>
                                            </div>
                                            <div class="col-lg-3">
                                                <span>${item.NetAmount}</span>
                                            </div>
                                             <div class="col-lg-3">
                                                <span><button id="remove-button" onclick="handleDeleteRowAndDropDown(${item.PurchaseId})" class="btn btn-danger">Remove</button></span>
                                            </div>
                                        </div>
                                    `;
                });

                //<div class="col-lg-3">
                //    <span><button class="btn btn-danger" onclick="">Remove</button></span>
                //</div>
                //<div class="col-lg-3">
                //    <strong></strong><br />
                //</div>

                // Close the dropdown content and append it to the "#list-of-po" element
                DropDownData += dropdownContent + '</div>';
                $("#list-of-po").append(DropDownData);
                /*           }, 1000);*/





                ////console.log("PurchaseId in handleclick", PurchaseId);
                var rows = table2.getRows();
                var categoryTablerows = tableCategory.getRows();
                var itemTablerows = tableItems.getRows();
                rows.forEach(function (row, index) {
                    ////console.log('Row SalesId:', row.getData().PurchaseId);
                    if (row.getData().PurchaseId === PurchaseId) {
                        ////console.log('Deleting row with SalesId:', PurchaseId);
                        row.delete();
                    }
                });
                categoryTablerows.forEach(function (row, index) {
                    ////console.log('Row SalesId:', row.getData().PurchaseId);
                    if (row.getData().PurchaseId === PurchaseId) {
                        ////console.log('Deleting row with SalesId:', PurchaseId);
                        row.delete();
                    }
                });
                itemTablerows.forEach(function (row, index) {
                    ////console.log('Row SalesId:', row.getData().PurchaseId);
                    if (row.getData().PurchaseId === PurchaseId) {
                        ////console.log('Deleting row with SalesId:', PurchaseId);
                        row.delete();
                    }
                });
                // Change the visibility of the column to true
                tableItems.updateColumnDefinition("FilePath", { visible: true });
                tableCategory.updateColumnDefinition("FilePath", { visible: true });
                // Handle the click event and use invoiceId
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetPurchaseOrderDetailsForCredit", "Accounts")',
                    data: {
                            id: PurchaseId,
                            //CopyBill: 1
                    },
                    dataType: "json",
                    success: function (response) {
                        //console.log("sassasaa", response);
                       if (response.Success === 1) {
                            //console.log("sasas",response.Data);
                            /* mergeTabulator(response.data.Items);*/
                            loadDataIntoTabulator(response.data);
                            setTaxAmount();
                           calculateTotalSum();
                       }
                    },
                    error: function (error) {
                        console.error("Error fetching data: " + error);
                    }
                });
            }
            // Function to load data into the Tabulator table
            function loadDataIntoTabulator(data) {
                // Update the data source of your Tabulator instance
                //tableItems.setData(data);
                console.log(data);
                tableItems.setData(data.Items);
                tableCategory.setData(data.ItemsCategory);
              
                // Re-render the table if needed
                //tableItems.redraw(true);
            }
            /*offcanvas functionalities ends*/


            // function setTaxAmount() {
            //     const masterTaxIds = [];
            //     const masterAmounts = [];
            //     const rows = tableCategory.getRows();
            //     const rows1 = tableItems.getRows();

            //     rows.forEach(function (row) {
            //         const masterTaxId = row.getData().MasterTaxId;
            //         const masterAmount = row.getData().Amount;
            //         const masterQTY = row.getData().Quantity;
            //         const masterRate = row.getData().Price;
            //         //console.log(masterQTY);
            //         if (masterTaxId != undefined) {
            //             masterTaxIds.push(masterTaxId);
            //             //masterAmounts.push(masterAmount);
            //         masterAmounts.push(masterQTY * masterRate);
            //         }
            //     });

            //     rows1.forEach(function (row) {
            //         const masterTaxId = row.getData().MasterTaxId;
            //         const masterAmount = row.getData().Amount;
            //         const masterQTY = row.getData().Quantity;
            //         const masterRate = row.getData().Rate;
            //         if (masterTaxId != undefined) {
            //             masterTaxIds.push(masterTaxId);
            //             masterAmounts.push(masterQTY * masterRate);
            //         }
            //     });


            //     if (masterTaxIds.length > 0) {
            //         ////console.log(masterTaxIds);
            //         const taxString = masterTaxIds.join(',');
            //         const amountString = masterAmounts.join(',');
            //         ////console.log(taxString);

            //         $.ajax({
            //             url: '@Url.Action("ProductWiseTax", "Sales")',
            //             type: 'GET',
            //             data: { taxes: taxString, amounts: amountString },
            //             success: function (response) {

            //                 if (response.Data.length > 0) {
            //                     // Load data into the table
            //                     table1.setData(response.Data);
            //                     calculateTotalSum();
            //                 }
            //             },
            //             error: function (error) {
            //                 // Handle errors here
            //                 console.error(error);
            //             }
            //         });
            //     }

            // }

            function calculateTotalSum() {
                ////console.log("totalAmountCategory", totalAmountCategory);
                var rows = table1.getRows();

                var rows2 = tableItems.getRows();
                var rows1 = tableCategory.getRows();

                var sumAmount = 0;
                var sumAmount1 = 0;
                var sumAmount2 = 0;

                rows.forEach(function (row) {
                    if(row.getData().IsSum === true)
                    {
                        sumAmount += parseFloat(row.getData().Amount) || 0;
                    }
                });

                rows1.forEach(function (row) {
                    sumAmount1 += parseFloat(row.getData().Amount) || 0;
                });

                rows2.forEach(function (row) {
                    sumAmount2 += parseFloat(row.getData().Amount) || 0;
                });
                var totalAmount = sumAmount1 + sumAmount2 + sumAmount;
                var totalAmount1 = sumAmount1 + sumAmount2;
                ////console.log("totalAmount dekhi", totalAmount);
                // Update the "balance-due" HTML element with the summed value
                const amountDisplay = document.getElementById("balance-due") == null ? 0 : document.getElementById("balance-due")
                amountDisplay.textContent = isNaN(totalAmount) ? "" : totalAmount.toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });

                const amountSubTotal = document.getElementById("subtotal");
                amountSubTotal.textContent = isNaN(totalAmount1) ? "" : '$' + totalAmount1.toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });

                const amountTotal = document.getElementById("total");
                amountTotal.textContent = isNaN(totalAmount) ? "" : totalAmount.toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });

                var currencyRate = $("#CurrencyRate").val();
                const amountTotalInBDT = document.getElementById("totalInBDT");
                amountTotalInBDT.textContent = isNaN(totalAmount) ? "" : (totalAmount * currencyRate).toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }

           



        </script>

        @* --------------------- recurring purpose ------------------- *@
        <script>
            function recurringTypeCriteria() {
                var selectedValue = document.getElementById("RecurringType").value;

                if (selectedValue === "Scheduled") {
                    document.getElementById("before-create-days").innerText = "Create";
                    $("#create-days").removeClass("d-none");
                    $("#after-create-days").removeClass("d-none");
                    $("#IntervalDiv").removeClass("d-none");
                }
                if (selectedValue === "Reminder") {
                    document.getElementById("before-create-days").innerText = "Remind";
                    $("#create-days").removeClass("d-none");
                    $("#after-create-days").removeClass("d-none");
                    $("#IntervalDiv").removeClass("d-none");
                }
                if (selectedValue === "Unscheduled") {
                    document.getElementById("before-create-days").innerText = "Unscheduled transactions don’t have timetables.";

                    $("#create-days").addClass("d-none");
                    $("#after-create-days").addClass("d-none");
                    $("#IntervalDiv").addClass("d-none");
                }

            }

            function intervalCriteria() {
                var selectedValue = document.getElementById("Interval").value;

                if (selectedValue === 'Daily') {
                    document.getElementById("before-every").innerText = "every";
                    document.getElementById("after-interval").innerText = "day(s)";
                    $("#every").removeClass("d-none");
                    $("#_Week").addClass("d-none");
                    $("#_Count").addClass("d-none");
                    $("#_Integer").addClass("d-none");
                    $("#_Month").addClass("d-none");
                }
                if (selectedValue === 'Weekly') {
                    document.getElementById("before-every").innerText = "every";
                    document.getElementById("after-interval").innerText = "week(s) on";
                    $("#every").removeClass("d-none");
                    $("#_Week").removeClass("d-none");
                    $("#_Count").addClass("d-none");
                    $("#_Integer").addClass("d-none");
                    $("#_Month").addClass("d-none");

                }
                if (selectedValue === 'Monthly') {
                    document.getElementById("before-every").innerText = "of every";
                    document.getElementById("after-interval").innerText = "month(s) on";
                    $("#every").removeClass("d-none");
                    $("#_Week").addClass("d-none");
                    $("#_Count").removeClass("d-none");
                    $("#_Integer").removeClass("d-none");
                    $("#_Month").addClass("d-none");
                }
                if (selectedValue === 'Yearly') {
                    document.getElementById("before-every").innerText = "every";
                    document.getElementById("after-interval").innerText = "";
                    $("#every").addClass("d-none");
                    $("#_Week").addClass("d-none");
                    $("#_Count").addClass("d-none");
                    $("#_Integer").removeClass("d-none");
                    $("#_Month").removeClass("d-none");
                }
            }

            function limitCriteria() {
                var selectedValue = document.getElementById("End").value;

                if (selectedValue === 'None') {
                    $("#recurringEndDiv").addClass("d-none");
                    $("#occurencesDiv").addClass("d-none");
                    $("#occurencesSpan").addClass("d-none");
                }
                if (selectedValue === 'By') {
                    $("#recurringEndDiv").removeClass("d-none");
                    $("#occurencesDiv").addClass("d-none");
                    $("#occurencesSpan").addClass("d-none");
                }
                if (selectedValue === 'After') {
                    $("#recurringEndDiv").addClass("d-none");
                    $("#occurencesDiv").removeClass("d-none");
                    $("#occurencesSpan").removeClass("d-none");
                }
            }

            function changeListForMonth() {
                var selectedValue = document.getElementById("Count").value;
                if (selectedValue === 'day') {
                    $("#_Week").addClass("d-none");
                    $("#_Count").removeClass("d-none");
                    $("#_Integer").removeClass("d-none");
                    $("#_Month").addClass("d-none");
                }
                else {
                    $("#_Week").removeClass("d-none");
                    $("#_Count").removeClass("d-none");
                    $("#_Integer").addClass("d-none");
                    $("#_Month").addClass("d-none");
                }
            }

            function makeRecurring() {
                $("#top-row").addClass("d-none");
                $("#makeRecurringDiv").addClass("d-none");
                $("#First-row-Recurring").removeClass("d-none");
                $("#IntervalDiv").removeClass("d-none");

            }
            
        </script>
    }


