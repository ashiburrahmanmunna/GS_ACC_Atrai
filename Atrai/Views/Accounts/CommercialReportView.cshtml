@model ReportrequestDto
@{
    ViewData["Title"] = "Voucher Created Type";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}

<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet">


<style>
    .table > :not(:first-child) {
        border-top: 0;
    }

    #treegridTable th {
        text-align: center;
        font-weight: 600;
        border: 1px solid #BABEC5;
        /*font-size: 14px;*/
    }

    .table > tbody > tr > td {
        line-height: 15px !important;
        border: 1px solid #c9c9c9;
    }


    .table tbody tr td {
        /* border: 1px solid #c9c9c9;*/
        font: 14px;
        color: #8A8A8A;
        line-height: 15px;
    }

    /*    .table>:not(caption)>*>* {

                 border-bottom-width: 0px;

            }*/
    .text-red {
        color: #FF0000 !important;
    }

    #body td:not(:first-child) {
        text-align: center;
    }

    .root-node {
        font-weight: 500;
    }

    .tabulator-table .tabulator-row {
        background-color: white;
    }

    .upper-form-style {
        background: #e9ecef6b;
        /*padding-top: 62px*/
    }

    .report-text-style {
        color: #0000ce;
    }

    .company-and-other-text-style {
        margin-top: 40px;
    }

    .customize-btn {
        background: #e9ecef6b;
        border: 1px solid black;
    }

    .customize-btn-another {
        background: #2CA01C;
        border: 1px solid black;
        border-radius: 20px;
        color: #FFFFFF;
        border: 1px solid #2CA01C;
    }

        .customize-btn-another:hover {
            background: #2CA01C;
            border: 1px solid black;
            border-radius: 20px;
            color: #FFFFFF;
            border: 1px solid #2CA01C;
        }

    .customize-btn:hover {
        background: #e9ecef6b;
        border: 1px solid black;
    }

    .customization-btn {
        background: #2CA01C;
        color: white;
        /*border: 1px solid black;*/
        border-radius: 20px;
    }

        .customization-btn:hover {
            background: #235d1b;
            color: white;
            border-radius: 20px;
        }

    .dropdown-button-style {
        border: 1px solid #ced4da;
        background: white;
    }

        .dropdown-button-style:hover {
            border: 1px solid #ced4da;
            background: white;
        }

    .gear-dropdown.show {
        width: 360px;
    }

    .modal-dialog {
        max-width: 90%;
        margin: 2rem auto;
    }

    .report-print-setting-style {
        background: #e9ecef6b;
    }

    .total-accname {
        border-bottom: 5px double black !important;
    }

    #loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        background: url('/assets/loading-load.gif') 50% 50% no-repeat rgb(249, 249, 249);
        opacity: .6;
    }

    .tabulator {
        border: none;
    }

    .tabulator-col .tabulator-col-title {
        text-align: center;
    }

    .tabulator-tableholder {
        background-color: white;
    }

    .tabulator[tabulator-layout=fitDataTable] {
        display: inherit;
    }

    .tabulator .tabulator-header .tabulator-col .tabulator-col-content {
        margin-top: 7px;
    }

    .tabulator .tabulator-header .tabulator-col,
    .tabulator .tabulator-header {
        background-color: white;
        height: 50px;
        border-bottom: 1px solid #aaaaaa38;
        border-right: 1px solid #aaaaaa38;
        /*border-left: 1px solid #aaaaaa38;*/
        /* padding-left: 2px;*/
    }

    /*    .tabulator-row .tabulator-cell, .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
            border-right: none;
            border-left: none;
        }*/
    .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
        border-right: 2px solid #aaaaaa38;
    }

    .tabulator-row .tabulator-cell {
        border-right: none;
        border-left: none;
        padding-left: 10px;
        border: 1px solid #aaaaaa29;
        padding-top: 16px;
    }

    .tabulator-cell {
        padding-top: 10px;
        padding-bottom: 10px;
        /*margin-top: 27px;*/
    }

    .tabulator .tabulator-row .active-cell {
        overflow: visible;
        /* Add any other styles you need for the active cell */
    }

    .tabulator-row {
        /*   border: 1px solid #aaaaaa38;*/
        border-left: none;
        border-right: none;
    }

    input[type="checkbox"] {
        width: 20px;
        /* Set the width */
        height: 20px;
        /* Set the height */
    }

    .nav-tabs .nav-item.show .nav-link,
    .nav-tabs .nav-link.active {
        border-top-color: transparent !important;
        border-left-color: transparent !important;
        border-right-color: transparent !important;
        border-bottom: 4px solid green;
    }

        .nav-tabs .nav-item.show .nav-link,
        .nav-tabs .nav-link.active:hover {
            background-color: #F8F8F8;
            border-top-color: transparent !important;
            border-left-color: transparent !important;
            border-right-color: transparent !important;
        }

    .nav-tabs .nav-item.show .nav-link,
    .nav-tabs .nav-link:hover {
        background-color: #F8F8F8;
        border-top-color: transparent !important;
        border-left-color: transparent !important;
        border-right-color: transparent !important;
    }

    .customize-btnew {
        background: transparent;
        border: 1px solid black;
        border-radius: 20px;
    }

        .customize-btnew:hover {
            background: #ffffff;
            border: 1px solid black;
            color: black;
            border-radius: 20px;
        }

    .tabulator-row .tabulator-cell.tabulator-editing {
        border: 1px solid #404c5d;
        outline: none;
        padding: 0;
    }

    .tabulator-cell.tabulator-editable[tabulator-field="AccName"] {
        border: 1px solid #0003;
        margin-bottom: 10px;
    }

    .filter-dropdown > .filter-dropdown-class.show {
        width: 580px;
    }

    p {
        margin: 1em 0;
    }

    .button {
        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
        position: relative;
        background: #aa0000;
        padding: 10px 15px;
        color: white;
        box-shadow: 0 2px black;
        text-decoration: none;
        border-radius: 5px;
        /*text-shadow: 0 1px 1px black;*/
    }

        .button:hover {
            top: -2px;
            box-shadow: 0 7px #000000b8;
        }

        .button:active {
            top: 1px;
            box-shadow: 0 7px #000000b8;
        }

    .unbilledbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000b8;
    }

    .overduebtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000b8;
    }

    .openbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000b8;
    }

    .paidbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000b8;
    }

    .scrollable-offcanvas {
        /* max-height: 80vh;*/
        /* Adjust the maximum height as needed */
        overflow-y: auto;
    }

    .SortingDiv {
        border: #cccccc solid 1px;
        background-color: #f4f5f8;
        overflow-y: auto;
        padding: 10px;
    }

    .editicon {
        display: none;
        cursor: pointer;
    }

    .showonhover {
        margin-left: 50px;
        padding: 1px;
    }

    .highlight {
        border: 5px solid green;
    }

    #ReportNameTextbox {
        margin-left: 50px;
        margin-top: 23px;
    }

    .showonhover:hover .editicon {
        display: inline-block;
    }

    .chart-height {
        height: 400px;
    }
</style>

@*Expenses all html tags starts*@
<div class="" style="background: #e9ecef6b; ">
    @*expenses tag and buttons starts*@
    <div class="row">
        <div class="col-4">
            <p class="fs-4 fw-bold ml-3 showonhover" id="ReportNameViewer"> <span id="rptname">@Model.ReportName</span> <i class="bi bi-pencil fs-4 editicon" onclick="EditReportName()"></i></p>
            <input type="text" class="ml-3" style="display:none" placeholder="Report Name" id="ReportNameTextbox" value="@Model.ReportName" onblur="ReplaceFormName()">
            <input type="hidden" id="ReportType" value="@Model.Type">
        </div>

    </div>
    @*expenses tag and buttons ends*@

    <div class="row mb-3">
        <div class="col-md-5">
        </div>
        <div class="col-md-6 text-right">
            <div class="btn-group btn-group-sm">
                @* <a class="btn btn-outline-secondary text-bold" asp-action="InvoicelistReport" asp-controller="Accounts">Classic View</a> *@
                @if (Model.Id != Model.ParentId)
                {
                    <form asp-action="DeleteReport" asp-controller="Accounts" style="display:none" id="Dlt_@Model.Id">
                        <input type="hidden" name="rptId" value="@Model.Id" />
                    </form>
                    <button class="btn btn-outline-danger text-bold" onclick="DeleteCustomReport('Dlt_@Model.Id')">Delete</button>
                }

                <div class="btn-group">
                    <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                        More actions
                    </button>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="#">Email Report</a>
                        @if (Model.Id != Model.ParentId)
                        {
                            <a class="dropdown-item" href="javascript:void()" onclick="AddtoManagment()">Add to management report</a>
                        }

                    </div>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-secondary  dropdown-toggle" data-bs-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                        Exports
                    </button>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="javascript:void()" id="download-csv">Download CSV</a>
                        <a class="dropdown-item" href="javascript:void()" id="download-json">json</a>
                        <a class="dropdown-item" href="javascript:void()" id="download-xlsx">excel</a>
                        <a class="dropdown-item" href="javascript:void()" id="download-pdf">pdf</a>
                        <a class="dropdown-item" href="javascript:void()" id="download-html">html</a>

                    </div>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-secondary  dropdown-toggle" data-bs-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                        Releted Report
                    </button>
                    <div class="dropdown-menu" id="ChildReport">
                        <a class="dropdown-item" href="javascript:void()" id="download-csv">Download CSV</a>
                    </div>
                </div>
                <button type="button" class="btn btn-success" onclick="SaveReport()">Save</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="d-flex justify-content-end bd-highlight">
            <div class="p-2" style=" width: 175px; "> 
                <div class="form-group d-flex align-items-center">
                    <label for="dtFrom" class="mr-2">From</label>
                   <input id="dtFrom" class="form-control" style="padding:6px;" autocomplete="off" readonly>
                </div>
            </div>
            <div class="p-2" style=" width: 175px; ">
                <div class="form-group d-flex align-items-center">
                    <label for="dtTo" class="mr-2">To</label>
                   <input id="dtTo" class="form-control" style="padding:6px;" autocomplete="off" readonly>
                </div>
            </div>
            <div class="col-md-2" style=" margin-top: 8px; ">               
                @Html.DropDownList("ReportsName", ViewBag.ReportName as List<SelectListItem>, "Select a report", new { id = "ReportsName", @class = "form-select form-select" })
            </div>
            <div class="p-2 bd-highlight">
                <select onchange="LoadData()" id="DateRangeDropdown" class="form-select">
                    @*<option selected="selected" disabled="disabled">Select an Option</option>*@
                    @* <option value="1"> All Dates</option> *@
                    <option value="2">Custom</option>
                    <option value="3">Today</option>
                    <option value="4">This Week</option>
                    <option value="5">This Week-to-date</option>
                    <option value="6" selected>This Month</option>
                    <option value="7">This Month-to-date</option>
                    <option value="8">This Quarter</option>
                    <option value="9">This Quarter-to-date</option>
                    <option value="10">This Year</option>
                    <option value="11">This Year-to-date</option>
                    <option value="12">This Year-to-last-month</option>
                    <option value="13">Yesterday</option>
                    <option value="14">Recent</option>
                    <option value="15">Last Week</option>
                    <option value="16">Last Week-to-date</option>
                    <option value="17">Last Month</option>
                    <option value="18">Last Month-to-date</option>
                    <option value="19">Last Quarter</option>
                    <option value="20">Last Quarter-to-date</option>
                    <option value="21">Last Year</option>
                    <option value="22">Last Year-to-date</option>
                    <option value="23">Since 30 days ago</option>
                    <option value="24">Since 60 days ago</option>
                    <option value="25">Since 90 days ago</option>
                    <option value="26">Since 365 days ago</option>
                    <option value="27">Next Week</option>
                    <option value="28">Next 4 Weeks</option>
                    <option value="29">Next Month</option>
                    <option value="30">Next Quarter</option>
                    <option value="30">Next Year</option>
                </select>
            </div>
            <div class="p-2 bd-highlight">
                <button type="button" class="btn btn-sm btn-outline-secondary"
                        onclick="showoffcanvas('GroupDiv')">
                    <i class="bi bi-bounding-box-circles"></i> Group
                </button>
            </div>
            <div class="p-2 bd-highlight">
                <button type="button" class="btn btn-sm btn-outline-secondary"
                        onclick="showoffcanvas('Filter')">
                    <i class="bi bi-funnel"></i> Filter
                </button>
            </div>
            <div class="p-2 bd-highlight">
                <button type="button" class="btn btn-sm btn-outline-secondary"
                        onclick="showoffcanvas('General')">
                    <i class="bi bi-sliders2-vertical"></i> General Option
                </button>
            </div>
            <div class="p-2 bd-highlight">
                <button type="button" class="btn btn-sm btn-outline-secondary"
                        onclick="showoffcanvas('Columns')">
                    <i class="bi bi-layout-three-columns"></i> Columns
                </button>
            </div>

        </div>



        @*expenses tabulators starts*@
        <div id="tableContainer" class="mt-4" style="width: 100%;">
            <div id="Report_table"></div>
        </div>
        <div class="SortingDiv mt-4" id="CustomCanvas" style="display: none;">
            <div id="GroupDiv" style="display: none;">
                <h4>Grouping</h4>
                <p>Select your column for grouping</p>
                <select class="form-select groupColumn" multiple="multiple" onchange="GroupBy()">
                </select>
                <div id="datasetdiv">
                    @*  <div class="d-lg-inline-flex justify-content-between mt-2">
                    <div style="width:200px">
                    <select  onchange="UpdateChart()" class="mx-2 calculationType">
                    <option value="sum">sum</option>
                    <option value="count">count</option>
                    <option value="average">average</option>
                    </select>
                    </div>
                    <div style="width:200px">
                    <select  onchange="UpdateChart()" class="calculationColumn">
                    </select>
                    </div>
                    </div> *@

                </div>
                <button type="button" class="btn btn-primary btn-sm mt-1" onclick="addnewdataset()"> Add new set</button>
            </div>
            <div id="Filter" style="display: none;">
                <h4>Filter</h4>
                Select how you want to filter your data.
                <button id="filter-clear" class="btn btn-danger btn-sm" onclick="ClearFirlter()">Clear Filter</button>
                @* <div class="d-flex justify-content-center"> *@

                <div id="filter-element">
                    @*   <div class="filter-child">
                    <div class="d-lg-inline-flex justify-content-between mt-2">
                    <div style="width:200px">
                    <select class="form-select groupColumn filter-field" onchange="Filtering()">
                    </select>
                    </div>
                    <div style="width:100px">
                    <select class="form-select filter-type" onchange="Filtering()">
                    <option value="=">=</option>
                    <option value="<">
                    < </option>
                    <option value="<=">
                    <= </option>
                    <option value=">">></option>
                    <option value=">=">>=</option>
                    <option value="!=">!=</option>
                    <option value="like">like</option>
                    </select>
                    </div>
                    <div >
                    <input class="filter-value form-control" style="width:130px" type="text" placeholder="value to filter" oninput="Filtering()">

                    </div>
                    </div>
                    </div> *@
                </div>


                <button type="button" class="btn btn-primary btn-sm" onclick="addFilter()"> add filter</button>
            </div>
            <div id="Columns" style="display: none;">
                <h4>Columns</h4>
                Move column to re-order column


                <ul id="TableColumnList" class="list-group fst-italic fs-6">
                </ul>



            </div>
        </div>
    </div>



    <div class="row mt-2">
        <div class="col-2">
            <div class="form-check  ms-3">
                <input class="form-check-input" type="radio" name="SwitchCheckChart" value="bar" id="SwitchCheckBarChart" onchange="switchchange()" checked>
                <label class="form-check-label text-success" for="SwitchCheckBarChart">Bar <i class="bi bi-bar-chart-fill"></i></label>
            </div>
            <div class="form-check ms-3">
                <input class="form-check-input" type="radio" name="SwitchCheckChart" value="pie" id="SwitchCheckPieChart" onchange="switchchange()">
                <label class="form-check-label text-warning" for="SwitchCheckPieChart">Pie <i class="bi bi-pie-chart-fill"></i></label>
            </div>
            <div class="form-check ms-3">
                <input class="form-check-input" type="radio" name="SwitchCheckChart" value="line" id="SwitchCheckLineChart" onchange="switchchange()">
                <label class="form-check-label text-info" for="SwitchCheckLineChart">Line <i class="bi bi-bar-chart-line"></i></label>
            </div>
            <div class="form-check ms-3">
                <input class="form-check-input" type="radio" name="SwitchCheckChart" value="doughnut" id="SwitchCheckdoughnutChart" onchange="switchchange()">
                <label class="form-check-label text-danger" for="SwitchCheckdoughnutChart">doughnut <i class="bi bi-pie-chart"></i></label>
            </div>
        </div>
        <div class="col-8">
            <div class="card">

                <div class="card-body">
                    <canvas id="modernchartView"></canvas>
                </div>
            </div>

        </div>
        <div class="col-2"></div>
    </div>
</div>
@*expenses tabulators ends*@





@section Scripts {

    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsVoucherReport.js"
            asp-append-version="true"></script>






    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.3.0/js/tabulator.min.js"></script>
    <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="~/admin_theme_gtr/assets/js/shortable.js"></script>
    @* <script src="https://raw.githack.com/SortableJS/Sortable/master/Sortable.js"></script> *@

    <script type="text/javascript">
        var table;
        var invoicelist = [];
        var Groupvalue = [];
        var Columns = [];
        var NumberColumns = [];
        var FilterArray = [];
        var chartData = [];
        var $select;
        var $NumberColumnsselect;
        var previous;
        var ColumnsVisibily;
        var customReportData;
        var previewchart;
        var HiddenColumn = [];
        // sortable column initializer
        var initialItemTexts = [];

        $(document).ready(function () {
            var today = new Date();
            var day = today.getDate();
            var month = today.toLocaleString('default', { month: 'short' });
            var year = today.getFullYear();

            var formattedDay = (day < 10 ? '0' : '') + day;

            var formattedDate = formattedDay + '-' + month + '-' + year;

            document.getElementById('dtFrom').value = formattedDate;
            document.getElementById('dtTo').value = formattedDate;

            $(function () {
                $("#dtFrom").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy"
                });
                $("#dtTo").removeClass("hasDatepicker").datepicker({
                    dateFormat: "dd-M-yy"
                });
            });
        });

        $(document).ready(function () {


            customReportData = JSON.parse('@Html.Raw(string.IsNullOrEmpty(Model.Value) ? "{}" : Model.Value)');


            LoadReport();

            if (Object.keys(customReportData).length > 0) {
                $("#DateRangeDropdown").val(customReportData.Period);

                if (customReportData.HiddenColumn != undefined) {
                    HiddenColumn = customReportData.HiddenColumn;
                }
                if (customReportData.chartType != undefined) {
                    let charttype = $(`input[name="SwitchCheckChart"][value="${customReportData.chartType}"]`);
                    charttype.prop('checked', true);
                }

            }
            LoadData();
            InitChart();
            // $("#calculationType").selectize();
        })
        function generateRandomColors(context) {
            //console.log(context);
            // console.log(context.index);
            const predefinedColors = [
                'rgb(255, 99, 132)',
                'rgb(54, 162, 235)',
                'rgb(255, 206, 86)',
                'rgb(75, 192, 192)',
                'rgb(153, 102, 255)',
                'rgb(255, 159, 64)',
                'rgb(0, 128, 0)',
                'rgb(255, 0, 255)',
            ];
            const randomIndex = Math.floor(Math.random() * predefinedColors.length);
            return predefinedColors[context.index];
        }
        function switchchange() {
            InitChart();
            UpdateChart();
        }

        function InitChart() {
            // console.log("preview chart", previewchart);
            var chartTypeValue = $('input[name="SwitchCheckChart"]:checked').val();
            if (previewchart) {
                previewchart.destroy();
            }
            var yourChartData1 = {
                labels: [],
                datasets: [{
                    label: '@Model.ReportName',
                    data: [],
                    backgroundColor: function (context) {
                        return generateRandomColors(context);
                    },
                    borderColor: function (context) {
                        return generateRandomColors(context);
                    },
                    borderWidth: 3
                }]
            };
            var ctx = document.getElementById("modernchartView").getContext('2d');
            // var chartType = $("#Charttype").val();
            previewchart = new Chart(ctx, {
                type: chartTypeValue,
                data: yourChartData1,
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: '@Model.ReportName',
                        }
                    }
                }
            });
        }
        function UpdateChart() {
            const groups = table.getGroups();
            const lables = groups.map(group => group.getKey());
            let datasetdiv = document.querySelector('#datasetdiv');
            let calculationTypes = document.querySelectorAll('.calculationType');
            let calculationColumns = document.querySelectorAll('select.calculationColumn');
            let Datasetstype = document.querySelectorAll('select.bartype');
            let datasets = [];
            chartData = [];
            datasetdiv.children.forEach(function (element, index) {

                // console.log("calculationTypes", calculationTypes[index].value);
                // console.log("calculationColumns", calculationColumns[index].value);
                let calctype = calculationTypes[index].value;
                let calcColumns = calculationColumns[index].value;
                let Dataset = Datasetstype[index].value;
                const Datas = groups.map(group => {
                    const rows = group.getRows();
                    let calculated = 0;
                    if (calctype == "sum") {
                        var fielddata = rows.map(row => row.getData()[calcColumns]);
                        calculated = fielddata.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
                    }
                    if (calctype == "count") {
                        var fielddata = rows.map(row => row.getData()[calcColumns]);
                        calculated = fielddata.length;
                    }
                    if (calctype == "average") {
                        var fielddata = rows.map(row => row.getData()[calcColumns]);
                        calculated = fielddata.reduce((accumulator, currentValue) => accumulator + currentValue, 0) / fielddata.length;
                    }
                    return calculated;

                });
                var chartTypeValue = $('input[name="SwitchCheckChart"]:checked').val();
                if (chartTypeValue == 'bar' || chartTypeValue == 'line') {
                    datasets.push({
                        label: calcColumns,
                        data: Datas,
                        type: Dataset,
                        backgroundColor: function (context) {
                            return generateRandomColors(context);
                        },
                        borderColor: function (context) {
                            return generateRandomColors(context);
                        },
                        borderWidth: 3
                    });
                } else {
                    datasets.push({
                        label: calcColumns,
                        data: Datas,
                        //type: Dataset,
                        backgroundColor: function (context) {
                            return generateRandomColors(context);
                        },
                        borderColor: function (context) {
                            return generateRandomColors(context);
                        },
                        borderWidth: 3
                    });
                }


                chartData.push({
                    calculationType: calctype,
                    calculationColumn: calcColumns,
                    type: Dataset
                })
            });


            // const Datas = groups.map(group => {
            //     const rows = group.getRows();
            //     let calculated = 0; // Get rows for each group
            //     if (calculationType == "sum") {
            //         var fielddata= rows.map(row => row.getData()[calculationColumn]); // Extract value from each row by selected value;
            //          calculated= fielddata.reduce((accumulator, currentValue) => accumulator + currentValue, 0); // sum calculation
            //     }
            //     if (calculationType == "count"){
            //         var fielddata = rows.map(row => row.getData()[calculationColumn]); // Extract value from each row by selected value;
            //         calculated = fielddata.length; //count calculation
            //     }
            //     if (calculationType == "average") {
            //         var fielddata = rows.map(row => row.getData()[calculationColumn]); // Extract value from each row by selected value;
            //         calculated = fielddata.reduce((accumulator, currentValue) => accumulator + currentValue, 0)/ fielddata.length; //avarage of value
            //     }
            //     return calculated;

            // });

            // Log the amounts
            // console.log("Amounts:", Datas);

            // console.log("groupKeys:", lables);
            previewchart.data.labels = lables;
            previewchart.data.datasets = datasets;
            previewchart.options.plugins.title.text = '@Model.ReportName';
            previewchart.update();
        }
        function LoadReport() {
            $.get(`@Url.Action("LoadReport", "Accounts")?ParentId=@Model.ParentId`, function (data) {
                var url = '@Url.Action("CommercialReportView", "Accounts")?reportid=';
                var ditem = [`<a class="dropdown-item" href="${url + '@Model.ParentId'}"> Main report </a>`];
                var lditem = data.map(m => {
                    return `<a class="dropdown-item" href="${url + m.Id}">${m.ReportName}</a>`
                });
                ditem = ditem.concat(lditem);
                $("#ChildReport").html(ditem);

            }).fail(function (xhr, status, error) {
                console.error("Error:", error);
            });
        }
        function DeleteCustomReport(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $("#" + id).submit();
                }
            })
        }
        function AddtoManagment() {

            $.post(`@Url.Action("AddtoMangementReport", "Accounts")`, { Id: @Model.Id }, function (data) {
                Swal.fire({
                    position: 'top-end',
                    icon: 'success',
                    title: data,
                    showConfirmButton: false,
                    timer: 5000
                })
            }).fail(function (xhr, status, error) {
                Swal.fire({
                    position: 'top-end',
                    icon: 'error',
                    title: error,
                    showConfirmButton: false,
                    timer: 5000
                })
            });
        }

        function SaveReport() {
            var SavedValue = {
                ReportName: $('#ReportNameTextbox').val(),
                Type: $('#ReportType').val(),
                Period: $("#DateRangeDropdown option:selected").val(),
                GroupbyValue: Groupvalue,
                FilterValue: FilterArray,
                SortedColumn: initialItemTexts,
                chartData: chartData,
                Id: '@Model.Id',
                ParentId: '@Model.ParentId',
                HiddenColumn: HiddenColumn,
                chartType: $('input[name="SwitchCheckChart"]:checked').val()
            };

            console.log(SavedValue);
            var jsonString = JSON.stringify(SavedValue);
            console.log(jsonString);
            $.post(`@Url.Action("SaveCustomReport", "Accounts")`, { model: jsonString }, function (data) {
                Swal.fire({
                    position: 'top-end',
                    icon: 'success',
                    title: data,
                    showConfirmButton: false,
                    timer: 5000
                })
                LoadReport();
            }).fail(function (xhr, status, error) {
                Swal.fire({
                    position: 'top-end',
                    icon: 'error',
                    title: error,
                    showConfirmButton: false,
                    timer: 5000
                })
            });
        }


        function TabulatorInitializer() {

            table = new Tabulator("#Report_table", {
                data: invoicelist, //set initial table data
                layout: "fitDataTable",
                columns: CustomColumn(),
                movableColumns: true,
                pagination: true,
                paginationSize: 10,
                paginationSizeSelector: [10, 25, 50, 100, true],
                groupStartOpen: true,
            });
            table.on("dataProcessed", applyFiltering);
        }

        function applyFiltering() {
            if (Object.keys(customReportData).length > 0) {
                var control = $select[0].selectize;
                control.setValue(customReportData.GroupbyValue);

                table.setFilter(customReportData.FilterValue);
                // var numbercontrol = $NumberColumnsselect[0].selectize;
                // if (customReportData.chartData != undefined) {
                //     numbercontrol.setValue(customReportData.chartData.calculationColumn);
                // }
                if (customReportData.FilterValue != undefined) {
                    FilterArray = customReportData.FilterValue;
                    RanderSaveFilter(customReportData.FilterValue);
                }
                if (customReportData.chartData != undefined) {
                    chartData = customReportData.chartData;
                    Renderdatasets(customReportData.chartData);
                }
            }

        }

        function LoadData() {

            $.get(`@Url.Action("GetReportData", "Accounts")?startDt=${GetDateRangeByCriteria().startDate}&enddt=${GetDateRangeByCriteria().endDate}&reportName=@Model.ReportName&Type=@Model.Type`, function (data) {

                invoicelist = JSON.parse(data).Table;
                GetColumns();
                SetForGroupDropDown('select.groupColumn');

                TabulatorInitializer();

                GenerateColumnList();
                PrintInit();


            }).fail(function (xhr, status, error) {
                console.error("Error:", error);
            });


        }
        function CustomColumn() {
            if (Columns.length == 0) {

                return [{
                    title: "Report Data Not Available",
                    field: "fieldName",
                    formatter: function (cell, formatterParams, onRendered) {
                        return "No Data available";
                    }

                }];

            }
            // if (customReportData.SortedColumn.length > 0) {
            //     let columns = customReportData.SortedColumn.map(fieldName => {
            //         return {
            //             title: fieldName,
            //             field: fieldName
            //         };
            //     });
            //     return columns;
            // }

            let columns = Columns.map(fieldName => {
                if (HiddenColumn.includes(fieldName)) {
                    return {
                        title: fieldName,
                        field: fieldName,
                        visible: false
                    };
                }
                if (NumberColumns.includes(fieldName)) {
                    if (fieldName === "Id") {
                        return {
                            title: fieldName,
                            field: fieldName,
                            bottomCalc: 'count'
                        };
                    } else {
                        return {
                            title: fieldName,
                            field: fieldName,
                            //bottomCalc: 'sum'
                            bottomCalc: (values, data, calcParams) => {
                                // Calculate the sum
                                let sum = values.reduce((acc, val) => acc + val, 0);
                                // Format to two decimal places
                                return sum.toFixed(2);
                            }
                        };
                    }

                }

                return {
                    title: fieldName,
                    field: fieldName
                };
            });
            return columns;
        }


        function showoffcanvas(opento) {


            if (opento == previous) {
                Closecanvas();

                previous = '';
                $(`#${opento}`).hide();
                return false;
            }
            if (opento != previous) {
                if (previous != '' && previous != null) {
                    $(`#${previous}`).hide();
                }
                previous = opento;
                ShowCanvas();

                $(`#${opento}`).show();
            }

        }
        function ShowCanvas() {
            let canvas = document.getElementById("CustomCanvas");
            let tableContainer = document.getElementById("tableContainer");

            canvas.style.width = '30%';
            tableContainer.style.width = '70%';
            canvas.style.display = 'block';
        }
        function Closecanvas() {
            let canvas = document.getElementById("CustomCanvas");
            let tableContainer = document.getElementById("tableContainer");
            canvas.style.width = '0%';
            tableContainer.style.width = '100%';
            canvas.style.display = 'none';
        }
        function GetDateRangeByCriteria() {
            var txt = $("#DateRangeDropdown option:selected").text();
            return GetDateRange(txt)
        }

        function GetColumns() {
            if (Object.keys(customReportData).length > 0 && customReportData.SortedColumn.length > 0) {
                Columns = customReportData.SortedColumn;
                for (let i in invoicelist[0]) {

                    console.log("key datatype", typeof invoicelist[0][i]);
                    if (typeof invoicelist[0][i] == 'number') {

                        NumberColumns.push(i);
                        // console.log("key datatype", i);
                        // console.log("NumberColumns", NumberColumns);

                    }
                }
                return;
            }
            Columns = invoicelist.length > 0 ? Object.keys(invoicelist[0]) : [];
            for (let i in invoicelist[0]) {

                console.log("key datatype", typeof invoicelist[0][i]);
                if (typeof invoicelist[0][i] == 'number') {

                    NumberColumns.push(i);
                    // console.log("key datatype", i);
                    // console.log("NumberColumns", NumberColumns);

                }
            }


        }
        function GenerateColumnList() {
            // <i class="bi bi-eye my-handle " aria - hidden="true" onclick = "ShowColumn(this)" > </i>
            //     < i class="bi bi-eye-slash-fill my-handle" aria - hidden="true" onclick = "hideCloumn(this)" > </i>

            let items = Columns.map(fieldName => {
                if (HiddenColumn.includes(fieldName)) {
                    return `
                                        <li class="list-group-item text-bold my-1 p-2">
                                                    <i class="bi bi-arrows-move my-handle cursor-pointer" aria-hidden="true"></i>   ${fieldName}
                                                                      <i class="bi bi-eye-slash-fill  cursor-pointer" aria-hidden="true" id="${fieldName}" onclick="showHideColumn('${fieldName}',this)"></i>
                                                    </li>
                                           `
                } else {
                    return ` <li class="list-group-item text-bold my-1 p-2">
                                       <i class="bi bi-arrows-move my-handle cursor-pointer" aria-hidden="true"></i>   ${fieldName}
                                        <i class="bi bi-eye-fill  cursor-pointer" aria-hidden="true" id="${fieldName}" onclick="showHideColumn('${fieldName}',this)"></i>
                                       </li>`
                }

            });
            const listWithHandle = document.getElementById('TableColumnList');
            listWithHandle.innerHTML = items.join('');
        }
        function SetForGroupDropDown(selector) {

            var groupColumn = $(selector);
            for (let i = 0; groupColumn.length > i; i++) {
                var todestroy = groupColumn[i];
                if (todestroy.selectize != undefined) {
                    todestroy.selectize.destroy();
                }

            }

            groupColumn.empty();
            Columns.forEach(key => {
                groupColumn.append(`<option value="${key}">${key}</option>`);
            });
            $select = $(selector).selectize(

                {
                    plugins: ["drag_drop", "clear_button", "remove_button"],
                }
            );

        }
        function GenerateNumberColumns(selector) {

            let groupColumn = $(selector);
            for (let i = 0; groupColumn.length > i; i++) {
                var todestroy = groupColumn[i];
                if (todestroy.selectize != undefined) {
                    todestroy.selectize.destroy();
                }

            }

            groupColumn.empty();
            NumberColumns.forEach(key => {
                groupColumn.append(`<option value="${key}">${key}</option>`);
            });
            $NumberColumnsselect = $(selector).selectize(

                {
                    plugins: ["drag_drop", "clear_button", "remove_button"],
                }
            );
        }
        function GroupBy() {
            table.setGroupBy(false);
            var selectize = $select[0].selectize;
            Groupvalue = selectize.items;
            table.setGroupBy(Groupvalue);
            // for (let i in Groupvalue) {
            //     table.hideColumn(Groupvalue[i]);
            // }
            // var show = Columns.filter(i => !Groupvalue.includes(i));
            // for (let i in show) {
            //     table.showColumn(show[i]);
            // }
            UpdateChart();

        }
        function Filtering() {

            var filterElements = document.querySelectorAll('.filter-child');

            FilterArray = [];

            filterElements.forEach(function (element) {
                var field = element.querySelector('.filter-field').value;
                var type = element.querySelector('.filter-type').value;
                var value = element.querySelector('.filter-value').value;

                // Check if all values are available before adding to the array
                if (field && type && value) {
                    var data = {
                        field: field,
                        type: type,
                        value: value
                    };
                    FilterArray.push(data);
                }
            });
            //console.log(dataArray);

            table.setFilter(FilterArray);
            UpdateChart();
        }
        function showHideColumn(colName, element) {

            element.classList.toggle('bi-eye-fill');
            element.classList.toggle('bi-eye-slash-fill');
            table.toggleColumn(colName);

            if (!HiddenColumn.includes(colName)) {
                HiddenColumn.push(colName);

            } else {
                const index = HiddenColumn.indexOf(colName);
                HiddenColumn.splice(index, 1);
            }
            console.log(HiddenColumn);

        }
        function addnewdataset() {

            let filterContainer = document.getElementById('datasetdiv');
            let childDiv = document.createElement("div");
            childDiv.setAttribute("class", "d-lg-inline-flex justify-content-between mt-2");
            var childelemrntid = filterContainer.children.length + 1;
            childDiv.setAttribute("Id", `datasetId-${childelemrntid}`);
            //childDiv.setAttribute("onclick", `removeDatasets(${childelemrntid})`);
            //selectDiv input
            let selectDiv = document.createElement("div");
            selectDiv.style.width = "100px";
            selectDiv.setAttribute("class", "me-2");
            selectDiv.innerHTML = `<select onchange="UpdateChart()" class="calculationType form-select" id="calculationType-${childelemrntid}">
                                        <option value="sum"> sum </option>
                                            <option value="count"> count </option>
                                                 <option value = "average"> average </option>
                                                     </select>`;
            //dataset type input
            let datasetDiv = document.createElement("div");
            datasetDiv.style.width = "100px";
            datasetDiv.setAttribute("class", "me-2");
            datasetDiv.innerHTML = `<select onchange="UpdateChart()" class="bartype form-select" id="dataset-${childelemrntid}">
                                             <option value="bar"> bar </option>
                                              <option value="line"> line </option>
                                              </select>`;
            //column div
            let columnDiv = document.createElement("div");
            columnDiv.style.width = "150px";
            columnDiv.innerHTML = `<select onchange="UpdateChart()" id="calculationColumn-${childelemrntid}" class="calculationColumn" ></select>`;
            childDiv.appendChild(selectDiv);
            childDiv.appendChild(columnDiv);
            childDiv.appendChild(datasetDiv);
            childDiv.innerHTML += `<i class="bi bi-trash3 cursor-pointer text-danger" onclick="removeDatasets('datasetId-${childelemrntid}')"></i>`;
            filterContainer.appendChild(childDiv);
            GenerateNumberColumns(`#calculationColumn-${childelemrntid}`);
        }
        function Renderdatasets(data) {
            var filterContainer = document.getElementById('datasetdiv');

            filterContainer.innerHTML = '';


            for (let i = 0; data.length > i; i++) {

                let childDiv = document.createElement("div");
                childDiv.setAttribute("class", "d-lg-inline-flex justify-content-between mt-2");
                var childelemrntid = i;
                childDiv.setAttribute("Id", `datasetId-${childelemrntid}`);
                //childDiv.setAttribute("onclick", `removeDatasets(${childelemrntid})`);
                //selectDiv input
                let selectDiv = document.createElement("div");
                selectDiv.style.width = "100px";
                selectDiv.setAttribute("class", "me-2");
                selectDiv.innerHTML = `<select onchange="UpdateChart()" class="calculationType form-select" id="calculationType-${childelemrntid}">
                                                <option value="sum"> sum </option>
                                                    <option value = "count"> count </option>
                                                         <option value = "average"> average </option>
                                                             </select>`;
                //dataset type input
                let datasetDiv = document.createElement("div");
                datasetDiv.style.width = "100px";
                datasetDiv.setAttribute("class", "me-2");
                datasetDiv.innerHTML = `<select onchange="UpdateChart()" class="bartype form-select" id="dataset-${childelemrntid}">
                                                     <option value="bar"> bar </option>
                                                      <option value="line"> line </option>
                                                      </select>`;
                //column div
                let columnDiv = document.createElement("div");
                columnDiv.style.width = "150px";
                columnDiv.innerHTML = `<select onchange="UpdateChart()" id="calculationColumn-${childelemrntid}" class="calculationColumn" ></select>`;
                childDiv.appendChild(selectDiv);
                childDiv.appendChild(columnDiv);
                childDiv.appendChild(datasetDiv);
                childDiv.innerHTML += `<i class="bi bi-trash3 cursor-pointer text-danger" onclick="removeDatasets('datasetId-${childelemrntid}')"></i>`;
                filterContainer.appendChild(childDiv);
                GenerateNumberColumns(`#calculationColumn-${childelemrntid}`);
                //$(`#calculationColumn-${childelemrntid}`).val(data[i].calculationColumn);
                $(`#calculationType-${childelemrntid}`).val(data[i].calculationType);
                $(`#dataset-${childelemrntid}`).val(data[i].type);

                let datacalc = $(`#calculationColumn-${childelemrntid}`);
                datacalc[0].selectize.setValue([data[i].calculationColumn]);
            }
        }
        function removeDatasets(elementid) {
            let toRemove = document.getElementById(elementid);
            toRemove.remove();
            Filtering();
            UpdateChart();
        }

        function addFilter() {
            //filter container
            let filterContainer = document.getElementById('filter-element');
            let childcount = filterContainer.children.length + 1;
            var childDiv = document.createElement("div");
            childDiv.setAttribute("class", "filter-child");
            childDiv.setAttribute("id", `fileterelement-${childcount}`);
            var childbodyDiv = document.createElement("div");
            childbodyDiv.setAttribute("class", "d-lg-inline-flex justify-content-between mt-2");


            //column div
            let columnDiv = document.createElement("div");
            //condition div
            let ConditionDiv = document.createElement("div");
            //condition input
            let inputDiv = document.createElement("div");
            columnDiv.style.width = "200px";
            ConditionDiv.style.width = "100px";

            columnDiv.appendChild(createColumn(`fileterColumnelement-${childcount}`));
            ConditionDiv.appendChild(createSelectCondition());
            inputDiv.appendChild(createInputElement());

            childbodyDiv.appendChild(columnDiv);
            childbodyDiv.appendChild(ConditionDiv);
            childbodyDiv.appendChild(inputDiv);
            childbodyDiv.innerHTML += `<i class="bi bi-trash3 cursor-pointer text-danger" onclick="removeDatasets('fileterelement-${childcount}')"></i>`;
            childDiv.appendChild(childbodyDiv);

            filterContainer.appendChild(childDiv);
            SetForGroupDropDown(`#fileterColumnelement-${childcount}`);
        }
        function RanderSaveFilter(data) {
            for (let i = 0; data.length > i; i++) {
                //filter container
                let filterContainer = document.getElementById('filter-element');
                let childcount = i;
                var childDiv = document.createElement("div");
                childDiv.setAttribute("class", "filter-child");
                childDiv.setAttribute("id", `fileterelement-${childcount}`);
                var childbodyDiv = document.createElement("div");
                childbodyDiv.setAttribute("class", "d-lg-inline-flex justify-content-between mt-2");


                //column div
                let columnDiv = document.createElement("div");
                //condition div
                let ConditionDiv = document.createElement("div");
                //condition input
                let inputDiv = document.createElement("div");
                columnDiv.style.width = "200px";
                ConditionDiv.style.width = "100px";

                columnDiv.appendChild(createColumn(`fileterColumnelement-${childcount}`));
                ConditionDiv.appendChild(createSelectCondition(`filetertypeelement-${childcount}`));
                inputDiv.appendChild(createInputElement(`fileterValueelement-${childcount}`));

                childbodyDiv.appendChild(columnDiv);
                childbodyDiv.appendChild(ConditionDiv);
                childbodyDiv.appendChild(inputDiv);
                childbodyDiv.innerHTML += `<i class="bi bi-trash3 cursor-pointer text-danger" onclick="removeDatasets('fileterelement-${childcount}')"></i>`;
                childDiv.appendChild(childbodyDiv);

                filterContainer.appendChild(childDiv);
                SetForGroupDropDown(`#fileterColumnelement-${childcount}`);

                $(`#filetertypeelement-${childcount}`).val(data[i].type);
                $(`#fileterValueelement-${childcount}`).val(data[i].value);

                let fileterl = $(`#fileterColumnelement-${childcount}`);
                fileterl[0].selectize.setValue([data[i].field]);

            }

        }
        function createColumn(filtercolumnid) {

            var selectElement = document.createElement("select");
            selectElement.setAttribute("class", "form-select groupColumn filter-field");
            //  selectElement.setAttribute("multiple", "multiple");
            selectElement.setAttribute("id", filtercolumnid);
            selectElement.setAttribute("onchange", "Filtering()");
            return selectElement;
        }
        function createSelectCondition(elementid) {

            var selectElement = document.createElement("select");
            // selectElement.setAttribute("id", "filter-type");
            selectElement.setAttribute("class", "form-select filter-type");
            selectElement.setAttribute("onchange", "Filtering()");
            selectElement.setAttribute("id", elementid);

            // Define options for the select element
            var options = [
                { value: "=", text: "=" },
                { value: "<", text: "<" },
                { value: "<=", text: "<=" },
                { value: ">", text: ">" },
                { value: ">=", text: ">=" },
                { value: "!=", text: "!=" },
                { value: "like", text: "like" }
            ];
            options.forEach(function (optionData) {
                var option = document.createElement("option");
                option.setAttribute("value", optionData.value);
                option.text = optionData.text;
                selectElement.appendChild(option);
            });

            // Return the created select element
            return selectElement;
        }
        function createInputElement(eleemntId) {
            var inputElement = document.createElement("input");
            inputElement.setAttribute("class", "filter-value form-control");
            inputElement.style.width = "width:130px";
            inputElement.setAttribute("type", "text");
            inputElement.setAttribute("placeholder", "value to filter");
            inputElement.setAttribute("oninput", "Filtering()");
            inputElement.setAttribute("id", eleemntId);
            //inputElement.value = value;
            return inputElement;
        }
        function ClearFirlter() {
            table.clearFilter();
            let filterContainer = document.getElementById('filter-element');
            filterContainer.innerHTML = '';
            // let children = filterContainer.children;
            // for (let i = children.length - 1; i > 0; i--) {
            //     filterContainer.removeChild(children[i]);
            // }
            UpdateChart();
        }


        Sortable.create(TableColumnList, {
            // swap: true,
            // swapClass: 'highlight',
            handle: '.my-handle',
            animation: 150,
            onStart: function (evt) {
                initialItemTexts = Array.from(TableColumnList.getElementsByTagName('li')).map(item => item.textContent.trim());
                console.log(evt);
            },
            onEnd: function (evt) {
                const oldIndex = evt.oldIndex;
                const newIndex = evt.newIndex;

                const oldItemText = initialItemTexts[oldIndex].trim();
                const newItemText = initialItemTexts[newIndex].trim();
                if (newIndex == 0) {
                    table.moveColumn(oldItemText, newItemText, false);
                } else {
                    table.moveColumn(oldItemText, newItemText, true);
                }

                //console.log(`from: ${oldIndex}, from: ${oldItemText}`);
                //console.log(`to: ${newIndex}, to: ${newItemText}`);
            },
        });
        function PrintInit() {
            let fileName = '@Model.ReportName-@DateTime.Now.ToShortDateString()'
            document.getElementById("download-csv").addEventListener("click", function () {
                table.download("csv", `${fileName}.csv`);
            });

            //trigger download of data.json file
            document.getElementById("download-json").addEventListener("click", function () {
                table.download("json", `${fileName}.json`);
            });

            //trigger download of data.xlsx file
            document.getElementById("download-xlsx").addEventListener("click", function () {
                table.download("xlsx", `${fileName}.xlsx`, { sheetName: "@Model.ReportName" });
            });

            //trigger download of data.pdf file
            document.getElementById("download-pdf").addEventListener("click", function () {
                table.download("pdf", `${fileName}.pdf`, {
                    orientation: "portrait", //set page orientation to portrait
                    title: "@Model.ReportName", //add title to report
                });
            });

            //trigger download of data.html file
            document.getElementById("download-html").addEventListener("click", function () {
                table.download("html", `${fileName}.html`, { style: true });
            });
        }
        function EditReportName() {
            var ReportNameTextbox = $('#ReportNameTextbox');
            var ReportNameViewer = $('#ReportNameViewer');

            ReportNameViewer.hide();
            ReportNameTextbox.show();
            ReportNameTextbox.focus();


        }
        function ReplaceFormName() {
            var ReportNameTextbox = $('#ReportNameTextbox');
            var ReportNameViewer = $('#ReportNameViewer');
            var rptname = $('#rptname');
            rptname.text(ReportNameTextbox.val());
            ReportNameTextbox.hide();
            ReportNameViewer.show();
        }
    </script>
}
