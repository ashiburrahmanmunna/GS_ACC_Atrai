@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@using Atrai.Model.Core.Entity;
@using Atrai.Model.Core.Common;
@{
    ViewData["Title"] = "Export List";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var ListType = ViewBag.ListType as string;

}
<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<style>
    .tabulator {
        border: none;
    }

    .tabulator-col .tabulator-col-title {
        text-align: center;
    }

    .tabulator-tableholder {
        background-color: white;
    }

    .tabulator[tabulator-layout=fitDataTable] {
        display: inherit;
    }

    .tabulator .tabulator-header .tabulator-col, .tabulator .tabulator-header {
        background-color: white;
        border-right: 1px solid #dee2e6;
    }

    .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
        border-right: 2px solid #aaaaaa38;
    }

    .tabulator-row .tabulator-cell {
        border-right: 1px solid #aaaaaa38;
        border-left: 1px solid #aaaaaa38;
    }

    .tabulator-cell {
        padding-top: 10px;
        padding-bottom: 10px;
    }

    .tabulator .tabulator-row .active-cell {
        overflow: visible;
        z-index: 13;
    }

    .tabulator-row:nth-child(even) {
        background-color: white;
    }

    .tabulator-row {
        border: none;
    }

    #modal-content2 {
        background-color: #fefefe;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #888;
        width: 30%;
    }

    .input-group-text{
        background-color: white;
        border: 1px solid white;
    }
    
    .tabulator-row.tabulator-selected {
       background-color: #9abcea !important;
    }

    .gear-dropdown1.show {
        width: 585px;
    }

    .gear-dropdown2.show {
        width: 735px;
    }

    .gear-dropdown3.show {
        width: 580px;
    }

    .gear-dropdown4.show {
        width: 595px;
    }

    .custom-grid {
        display: grid;
        grid-template-columns: repeat(3, 180px);
        background-color: white;
            
    } 

</style>

<div class="col-lg-4">
    <p class="fs-4 fw-bold">Master LC List</p>
</div>
<ul class="nav nav-tabs mt-5">
    <li class="nav-item">
        @{
            var AllChildMenu = HttpContextAccessor.HttpContext.Session.GetObject<List<UserMenuPermissionViewModel>>("UserChildMenu");
            
            var filterparentmenu = AllChildMenu.Where(x => x.ControllerName == "BuyerOrder" && x.ActionName == "Export" && x.IsView == true).ToList();
            var i = 0;
            foreach (var childitem in filterparentmenu)
            {

                if (childitem.FirstParameter != null)
                {

                    if (i == 0)
                    {
                                        <li class="nav-item">
                                            <a class="nav-link  fw-semibold active" href="#" id=@childitem.FirstValue>@childitem.MenuName</a>
                                        </li>

                    }
                    else
                    {
                                        <li class="nav-item">
                                            <a class="nav-link  fw-semibold" href="#" id=@childitem.FirstValue>@childitem.MenuName</a>
                                        </li>

                    }


                }

                i++;
            }
        }

    </li>
    @* <li class="nav-item">
        <a class="nav-link active fw-semibold" aria-current="page" href="#" id="MasterLC">Master LC</a>
    </li>
    <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="ExportInvoice">Export Invoice</a>
    </li>
     <li class="nav-item">
        <a class="nav-link fw-semibold" href="#" id="Realization">Realization Entry</a>
    </li> *@
</ul>

<div id="masterLC_view_id" class="d-none">
    <div class="row p-2" style="border-bottom: 1px solid #dee2e6;">
        <div class="col-md-3 col-3">
            <button class="btn btn-success fw-bold ms-3 mt-3 h-70 my-2" type="button" data-bs-toggle="dropdown" onclick="gotoCreateMasterLC()">
                New Master LC
            </button>
        </div>
        <div class="col-md-2 col-2"></div>
        <div class="col-md-2 col-2">
            @* <div class="input-group mt-3">
                <input type="file" class="form-control" id="inputGroupFile02">
                <button type="button" class="btn btn-primary h-70">Upload</button>
            </div> *@
            

        </div>
        <div class="col-md-3 col-3 d-flex justify-content-end h-70" style=" margin-left: 150px;">
            <button type="button" class="btn btn-primary mt-3" id="buyerPOSample">Download Sample Format</button>
        </div>
        <div class="col-md-7 col-7 d-flex">
            
        </div>
        
    </div>
    
    <div class="row mt-3">
        <div class="col-md-7 col-7 d-flex">
            <div class="input-group flex-nowrap" style="width: 30%;height: fit-content;">
              <span class="input-group-text" id="addon-wrapping">From</span>
              <input id="fromDate" class="form-control" >
            </div>
            <div class="input-group flex-nowrap" style="width: 30%;height: fit-content;">
                <span class="input-group-text" id="addon-wrapping">To</span>
                <input id="toDate" class="form-control" >
            </div>
            
        </div>
        <div class="col-md-3 col-3">
            <div class="input-group">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType" value="pdf" checked="checked">
                    <label style=" margin-left: 5px; ">PDF</label>
                </div>
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType" value="excel">
                    <label style=" margin-left: 5px; ">Excel</label>
                </div>
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType" value="word">
                    <label style=" margin-left: 5px; ">Word</label>
                </div>
            </div>
        </div>
        <div class="col-md-2 col-2">
            <div class="d-flex justify-content-end">
                <button title="Print" class="btn btn-white border-0" type="button" id="masterLCPrint-pdf" style="padding: 0px;padding-bottom: 10px;margin-right: 8px;"
                        aria-expanded="false">
                    <i class="bi bi-printer fs-5" style=" margin-right: 0px; "></i>
                </button>
                <button title="Export to excel" class="btn btn-white border-0" type="button" id="masterLCPrint-excel" style="padding: 0px;padding-bottom: 10px;margin-right: 8px;"
                        aria-expanded="false">
                    <i class="bi bi-file-earmark-excel fs-5" style=" margin-right: 0px; "></i>
                </button>

                   <div title="Settings" class="dropdown1 custom-grid" style="display:inline-block;">
                       <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                          aria-expanded="false">
                           <i class="bi bi-gear fs-5"></i>
                       </a>
                       <div class="dropdown-menu gear-dropdown1" aria-labelledby="dropdownMenuButton-expense">
                           <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                               <div class="col">
                                   <span class="fw-bold ms-3">Columns</span>
                                   <hr class="m-0 w-75 ms-3 w-sm-50 " />
                                   <ul class="list-unstyled">
                                       <li>
                                           <div id="POLColumnList" class="custom-grid">
                                           </div>
                                       </li>
                                   </ul>

                               </div>

                               <div class="d-flex">
                               <div class="ms-3">
                                   <label>Rows</label> <br />
                                   <select name="rows" id="POLRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                       <option value="0" disabled selected>Rows</option>
                                       <option value="5" selected>5</option>
                                       <option value="10">10</option>
                                       <option value="20">20</option>
                                       <option value="50">50</option>
                                       <option value="100">100</option>
                                       <option value="1000">1000</option>
                                   </select>
                               </div>
                              
                                    <div class=" p-4">
                                        <button id="saveMasterLC" class="btn btn-success btn-sm">Save Filter</button>
                                    </div> 

                                    <div style=" padding-top: 24px; ">
                                        <button id="deleteMasterLC" class="btn btn-danger btn-sm" onclick="DeleteFilter1('MasterLC')">Remove Filter</button>
                                    </div> 
                                </div>

                           </div>
                       </div>


                   </div>

            </div>
        </div>
    </div>
    
    <br />
    <div id="example-table"></div>
</div>


<div id="GroupLC_view_id" class="d-none">
    <div class="row p-2" style="border-bottom: 1px solid #dee2e6;">
        <div class="col-md-3 col-3">
            <button class="btn btn-success fw-bold ms-3 mt-3 h-70 my-2" type="button" data-bs-toggle="dropdown" onclick="gotoCreateGroupLC()">
                New Group LC
            </button>
        </div>
        <div class="col-md-2 col-2"></div>
        <div class="col-md-2 col-2">
           
            

        </div>
        <div class="col-md-3 col-3 d-flex justify-content-end h-70" style=" margin-left: 150px;">
            
        </div>
        <div class="col-md-7 col-7 d-flex">
            
        </div>
        
    </div>  
    
    <div class="row mt-3">
        <div class="col-md-7 col-7 d-flex">
            <div class="input-group flex-nowrap" style="width: 30%;height: fit-content;">
              <span class="input-group-text" id="addon-wrapping">From</span>
              <input id="fromDateGLC" class="form-control" >
            </div>
            <div class="input-group flex-nowrap" style="width: 30%;height: fit-content;">
                <span class="input-group-text" id="addon-wrapping">To</span>
                <input id="toDateGLC" class="form-control" >
            </div>
            
        </div>
        <div class="col-md-3 col-3">
            <div class="input-group">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType3" value="pdf" checked="checked">
                    <label>PDF</label>
                </div>
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType3" value="excel">
                    <label>Excel</label>
                </div>
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType3" value="word">
                    <label>Word</label>
                </div>
            </div>
        </div>
        <div class="col-md-2 col-2">
            <div class="d-flex justify-content-end">
                <button title="Print" class="btn btn-white border-0" type="button" id="groupLCPrint-pdf" style="padding: 0px;padding-bottom: 10px;margin-right: 8px;"
                        aria-expanded="false">
                    <i class="bi bi-printer fs-5" style=" margin-right: 0px; "></i>
                </button>
                <button title="Export to excel" class="btn btn-white border-0" type="button" id="groupLCPrint-excel" style="padding: 0px;padding-bottom: 10px;margin-right: 8px;"
                        aria-expanded="false">
                    <i class="bi bi-file-earmark-excel fs-5" style=" margin-right: 0px; "></i>
                </button>

                <div title="Settings" class="dropdown1 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown2" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="GroupLCColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                            <div class="ms-3">
                                <label>Rows</label> <br />
                                <select name="rows" id="GroupLCRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                    <option value="0" disabled selected>Rows</option>
                                    <option value="5" selected>5</option>
                                    <option value="10">10</option>
                                    <option value="20">20</option>
                                    <option value="50">50</option>
                                    <option value="100">100</option>
                                    <option value="1000">1000</option>
                                </select>
                            </div>

                            <div class=" p-4">
                                <button id="saveGroupLC" class="btn btn-success btn-sm">Save Filter</button>
                            </div> 

                            <div style=" padding-top: 24px; ">
                                <button id="deleteGroupLC" class="btn btn-danger btn-sm" onclick="DeleteFilter2('GroupLC')">Remove Filter</button>
                            </div> 
                        </div>

                    </div>
                </div>


            </div>

            </div>
        </div>
    </div>
      
    <br />
    <div id="grouplc-table"></div>
</div>

<div id="exportInvoice_view_id" class="d-none">

    <div class="row p-2" style="border-bottom: 1px solid #dee2e6;">
        <div class="col-md-3 col-3" style="height: fit-content;">
            <button class="btn btn-success fw-bold ms-3 mt-3 h-70 my-2" type="button" data-bs-toggle="dropdown" onclick="gotoCreateExportInvoice()">
                New Export Invoice
            </button>
        </div>
        <div class="col-md-3 col-3"></div>
        <div class="col-md-3 col-3"></div>
        <div class="col-md-3 col-3 d-flex justify-content-end h-70" style="height: fit-content;">
            
        </div>
        <div class="col-md-7 col-7 d-flex">
          
        </div>
        
    </div>

    <div class="row mt-3">
        <div class="col-md-7 col-7 d-flex">
            <div class="input-group flex-nowrap" style="width: 30%;height: fit-content;">
              <span class="input-group-text" id="addon-wrapping">From</span>
              <input id="fromDateExI" class="form-control" >
            </div>
            <div class="input-group flex-nowrap" style="width: 30%;height: fit-content;">
                <span class="input-group-text" id="addon-wrapping">To</span>
                <input id="toDateExI" class="form-control" >
            </div>
            @* <button class="btn btn-success fw-bold ms-3" style="height: fit-content;" type="button" data-bs-toggle="dropdown" >
                Invoice Report
            </button> *@
        </div>
        <div class="col-md-3 col-3">
            <div class="input-group">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType1" value="pdf" checked="checked">
                    <label>PDF</label>
                </div>
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType1" value="excel">
                    <label>Excel</label>
                </div>
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType1" value="word">
                    <label>Word</label>
                </div>
            </div>
        </div>
        <div class="col-md-2 col-2">
            <div class="d-flex justify-content-end">
                <button title="Print" class="btn btn-white border-0" type="button" id="exportInvoicePrint-pdf" style="padding: 0px;padding-bottom: 10px;margin-right: 8px;"
                        aria-expanded="false">
                    <i class="bi bi-printer fs-5" style=" margin-right: 0px; "></i>
                </button>
                <button title="Export to excel" class="btn btn-white border-0" type="button" id="exportInvoicePrint-excel" style="padding: 0px;padding-bottom: 10px;margin-right: 8px;"
                        aria-expanded="false">
                    <i class="bi bi-file-earmark-excel fs-5" style=" margin-right: 0px; "></i>
                </button>
                   <div title="Settings" class="dropdown1 custom-grid" style="display:inline-block;">
                       <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                          aria-expanded="false">
                           <i class="bi bi-gear fs-5"></i>
                       </a>
                       <div class="dropdown-menu gear-dropdown3" aria-labelledby="dropdownMenuButton-expense">
                           <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                               <div class="col">
                                   <span class="fw-bold ms-3">Columns</span>
                                   <hr class="m-0 w-75 ms-3 w-sm-50 " />
                                   <ul class="list-unstyled">
                                       <li>
                                           <div id="ExportColumnList" class="custom-grid">
                                           </div>
                                       </li>
                                   </ul>

                               </div>

                               <div class="d-flex">
                                   <div class="ms-3">
                                       <label>Rows</label> <br />
                                       <select name="rows" id="ExportRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                           <option value="0" disabled selected>Rows</option>
                                           <option value="5" selected>5</option>
                                           <option value="10">10</option>
                                           <option value="20">20</option>
                                           <option value="50">50</option>
                                           <option value="100">100</option>
                                           <option value="1000">1000</option>
                                       </select>
                                   </div>

                                   <div class=" p-4">
                                        <button id="saveExport" class="btn btn-success btn-sm">Save Filter</button>
                                   </div> 

                                   <div style=" padding-top: 24px; ">
                                        <button id="deleteExport" class="btn btn-danger btn-sm" onclick="DeleteFilter3('Export_Invoice')">Remove Filter</button>
                                   </div> 
                               </div>

                           </div>
                       </div>


                   </div>
            </div>
        </div>
    </div>
    <br />
    <div id="exportInvoice-table"></div>
</div>

<div id="Realization_view_id" class="d-none">

    <div class="row p-2" style="border-bottom: 1px solid #dee2e6;">
        <div class="col-md-3 col-3">
            <button class="btn btn-success fw-bold ms-3 mt-3 h-70 my-2" type="button" data-bs-toggle="dropdown" onclick="gotoCreateRealization()">
                New Realization
            </button>
        </div>
        <div class="col-md-2 col-2"></div>
        <div class="col-md-2 col-2"></div>
        <div class="col-md-3 col-3 d-flex justify-content-end h-70" style=" margin-left: 150px;">
            
        </div>
        <div class="col-md-7 col-7 d-flex">
           
        </div>
      
    </div>

    <div class="row mt-3">
        <div class="col-md-7 col-7 d-flex">
            <div class="input-group flex-nowrap" style="width: 30%;height: fit-content;">
              <span class="input-group-text" id="addon-wrapping">From</span>
              <input id="fromDateRE" class="form-control" >
            </div>
            <div class="input-group flex-nowrap" style="width: 30%;height: fit-content;">
                <span class="input-group-text" id="addon-wrapping">To</span>
                <input id="toDateRE" class="form-control" >
            </div>
            
        </div>
          <div class="col-md-3 col-3">
            <div class="input-group">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType2" value="pdf" checked="checked">
                    <label>PDF</label>
                </div>
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType2" value="excel">
                    <label>Excel</label>
                </div>
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" name="fileType2" value="word">
                    <label>Word</label>
                </div>
            </div>
        </div>
        <div class="col-md-2 col-2">
            <div class="d-flex justify-content-end">
                <button title="Print" class="btn btn-white border-0" type="button" id="realizationPrint-pdf" style="padding: 0px;padding-bottom: 10px;margin-right: 8px;"
                        aria-expanded="false">
                    <i class="bi bi-printer fs-5" style=" margin-right: 0px; "></i>
                </button>
                <button title="Export to excel" class="btn btn-white border-0" type="button" id="realizationPrint-excel" style="padding: 0px;padding-bottom: 10px;margin-right: 8px;"
                        aria-expanded="false">
                    <i class="bi bi-file-earmark-excel fs-5" style=" margin-right: 0px; "></i>
                </button>

                  <div title="Settings" class="dropdown1 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown4" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="RealizationColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                            <div class="ms-3">
                                <label>Rows</label> <br />
                                <select name="rows" id="realizationRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                    <option value="0" disabled selected>Rows</option>
                                    <option value="5" selected>5</option>
                                    <option value="10">10</option>
                                    <option value="20">20</option>
                                    <option value="50">50</option>
                                    <option value="100">100</option>
                                    <option value="1000">1000</option>
                                </select>
                            </div>

                             <div class=" p-4">
                                <button id="saveRealization" class="btn btn-success btn-sm">Save Filter</button>
                             </div> 

                            <div style=" padding-top: 24px; ">
                                <button id="deleteRealization" class="btn btn-danger btn-sm" onclick="DeleteFilter4('Realization')">Remove Filter</button>
                            </div> 
                        </div>

                    </div>
                </div>


            </div>

            </div>
        </div>
    </div>
    <br />
    <div id="realization-table"></div>
</div>


<div class="col-md-2  col-2">
    <div id="customModal" class="modal">
        <div class="modal-content" id="modal-content2">
            <p>Are you sure you want to delete?</p>
            <div class="row">
                <div class="col-md-6 col-6">
                    <button id="confirmBtn" class="btn btn-success" style="width: 100px">OK</button>
                </div>
                <div class="col-md-6 col-6 d-flex justify-content-end">
                    <button id="cancelBtn" class="btn btn-danger" style="width: 100px">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsVoucherReport.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>
    <script>


         $(document).ready(function () {
             MasterLCGear();
             GroupLCGear();
             ExportInvoiceGear();
             RealizationGear();
         });
         

         var MasterLColumn = [
            { title: "", field: "CheckBox", headerHozAlign: "left", headerSort: false, formatter: customCheckBoxFormatter, visible: true, width: 50 },
            {
                title: "Sales Contract No", field: "LCRefNo", hozAlign: "left",frozen: true, vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false
            },
            {
                title: "Company", field: "Company", hozAlign: "left", vertAlign: "middle", headerFilter: "input",visible: true, headerFilterLiveFilter: false
            },
            {
                title: "Buyer Group", field: "BuyerGroup", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false
            },
            {
                title: "Buyer", field: "Buyer", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false
            },
            {
                title: "Concern Bank", field: "ConcernBank", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false
            },
            {
                title: "Buyer Bank", field: "BuyerBank", hozAlign: "left", vertAlign: "middle", headerFilter: "input",visible: true, headerFilterLiveFilter: false
            },
            {
                title: "Actions", field: "button", headerHozAlign: "center", vertAlign: "middle",frozen: true, headerSort: false, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    var myUrlGetforInvoice = `@Url.Action("EditMasterLC", "BuyerOrder")?id=${data.Id}`;
                    var myreport = `@Url.Action("PrintMLCSC", "BuyerOrder")?id=${data.Id}&type=pdf`;

                    var inActive = `setInactiveUrl(${data.Id}) `


                    var editHtml;

                    editHtml = `
                                        <a href='${myUrlGetforInvoice}' class='text-decoration-none text-black ms-3 mt-1' target="_blank">
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtml;

                    reportHtml = `
                                        <a href='${myreport}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;



                    var deleteHtml;
                    deleteHtml = `
                                             <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                 <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                             </a>
                                         `;

                    var statusDependentHtml = data.isPosted ? deleteHtml : editHtml + reportHtml + deleteHtml;
                    var html = `
                                <div class='dropdown ms-1'>

                                    <a href='${myUrlGetforInvoice}' class='fw-bolder text-decoration-none  ms-3 mt-1' target="_blank">
                                            Edit
                                        </a>
                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                    <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                        ${statusDependentHtml}

                                    </ul>
                                </div>
                            `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    cell.getElement().classList.add('active-cell');
                },
            },

        ]


        var grouplcFields = [
                    { title: "Group LC Ref", field: "GroupLCRefName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Group LC Rev. Amd. No.", field: "GroupLCAmdNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Buyer", field: "Name", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Concern", field: "CompanyName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Group LC Qty", field: "TotalGroupLCQty", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Group LC Value [Final Export Value]", field: "TotalGroupLCValue", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Group LC Value [LC Opening Value]", field: "TotalGroupLCValueManual", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    {
                        title: "Actions", field: "bblcAction", headerHozAlign: "center", headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `@Url.Action("UpdateGroupLC", "BuyerOrder")?grouplcid=` + data.Id;
                            var PrintBBLCMargin = `@Url.Action("PrintBBLCMargin", "BuyerOrder")?id=${data.Id}&type=pdf`;

                            var PrintMLCEX = `@Url.Action("PrintMLCEX", "BuyerOrder")?id=${data.Id}&type=pdf`;

                            var inActive = `InactiveGroupLC(${data.Id}) `;

                            var deleteHtml = `
                      <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                      <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                      </a>
                      `;

                            var PrintBBLCMarginlink = `
                                 <a href='${PrintBBLCMargin}' target='_blank' class='text-decoration-none text-black ms-3 mt-1 full-width' id='inactive'>
                                         <i class="bi bi-file-earmark-pdf"></i><span class='ms-1 mt-2'>BBLC Margin Analysis / Summary</span><br />
                                 </a>
                             `;
                            var PrintMLCEXlink = `
                                <a href='${PrintMLCEX}' target='_blank' class='text-decoration-none text-black ms-3 mt-1 full-width' id='inactive'>
                                      <i class="bi bi-file-earmark-pdf-fill"></i><span class='ms-1 mt-2'>Master LC Wise Export</span><br />
                                 </a>
                            `;
                      

                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = deleteHtml + PrintBBLCMarginlink + PrintMLCEXlink;

                            var html = `
                      <div class='dropdown ms-1'>
                      <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                          ${statusDependentHtml}

                      </ul>
                      </div>
                      `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },

        ]


        var exportcolumn = [
            { title: "", field: "CheckBox1", headerHozAlign: "left",visible: true, headerSort: false, formatter: customCheckBoxFormatter, width: 50 },
            { title: "Id", field: "Id", hozAlign: "left", vertAlign: "middle", visible: false },
            { title: "Invoice No", field: "InvoiceNo", hozAlign: "left", vertAlign: "middle",visible: true,frozen: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Buyer Name", field: "BuyerName", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Destination", field: "Destination", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Invoice Date", field: "InvoiceDate", hozAlign: "left",visible: true, vertAlign: "middle" },
            { title: "Exp No", field: "ExpNo", hozAlign: "left", vertAlign: "middle", headerFilter: "input",visible: true, headerFilterLiveFilter: false },
            { title: "Exp Date", field: "ExpDate", hozAlign: "left",visible: true, vertAlign: "middle" },
            { title: "BL No", field: "BLNo", hozAlign: "left", vertAlign: "middle", headerFilter: "input",visible: true, headerFilterLiveFilter: false },
            { title: "BL Date", field: "BLDate", hozAlign: "left",visible: true, vertAlign: "middle" },
            { title: "Total Value", field: "TotalValue", hozAlign: "right", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Notify Party", field: "NotifyParty", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "TotalCartonQty", field: "TotalCartonQty", hozAlign: "right", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Net Weight", field: "NetWeight", hozAlign: "right", vertAlign: "middle", headerFilter: "input",visible: true, headerFilterLiveFilter: false },
            { title: "Gross Weight", field: "GrossWeight", hozAlign: "right", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            {
                title: "Actions", field: "ExportAction", headerHozAlign: "center", vertAlign: "middle",frozen: true,visible: true, headerSort: false, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    var myUrlGetforInvoice = `@Url.Action("UpdateExportInvoice", "BuyerOrder")?id=${data.Id}`;
                    var myUrlGetforInvoicereport = `@Url.Action("PrintExportInvoice", "BuyerOrder")?id=${data.Id}`;
                    var myUrlGetforPackingList = `@Url.Action("PrintExportInvoice", "BuyerOrder")?id=${data.Id}&value=Packing List`;
                    var myUrlGetforDetPackingList = `@Url.Action("DetailsPackingList", "BuyerOrder")?id=${data.Id}&value=D.Packing List`;
                    var myUrlGetforDetPackingList1 = `@Url.Action("PrintPackingList", "BuyerOrder")?id=${data.Id}&value=De_Packing List`;
                    var myUrlGetforOutPass = `@Url.Action("PrintExportInvoice", "BuyerOrder")?id=${data.Id}&value=Out Pass`;
                    var myUrlGetforOutPassEng = `@Url.Action("PrintExportInvoice", "BuyerOrder")?id=${data.Id}&value=Out PassEng`;

                    var inActive = `setInactiveExportInvoice(${data.Id}) `


                    var editHtml;

                    editHtml = `
                                        <a href='${myUrlGetforInvoice}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtml;

                    reportHtml = `
                                        <a href='${myUrlGetforInvoicereport}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlPL;

                    reportHtmlPL = `
                                        <a href='${myUrlGetforPackingList}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Packing List</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlDPL;

                    reportHtmlDPL = `
                                        <a href='${myUrlGetforDetPackingList}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>D. Packing List</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlDPL1;

                    reportHtmlDPL1 = `
                                        <a href='${myUrlGetforDetPackingList1}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Details Packing List</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlOutPass;

                    reportHtmlOutPass = `
                                        <a href='${myUrlGetforOutPass}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Out Pass Bn.</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlOutPassEng;

                    reportHtmlOutPassEng = `
                                        <a href='${myUrlGetforOutPassEng}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Out Pass En.</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var deleteHtml;
                    deleteHtml = `
                                             <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                 <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                             </a>
                                         `;

                    var statusDependentHtml = data.isPosted ? deleteHtml : editHtml + reportHtmlPL + reportHtmlDPL1 + deleteHtml;
                    var html = `
                                <div class='dropdown ms-1'>

                                    <a href='${myUrlGetforInvoicereport}' target="_blank" class='fw-bolder text-decoration-none  ms-3 mt-1'>
                                            Report
                                        </a>
                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                    <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                        ${statusDependentHtml}

                                    </ul>
                                </div>
                            `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    cell.getElement().classList.add('active-cell');
                },
            },

        ]


        var realizationcolumn = [
            { title: "", field: "CheckBox2", headerHozAlign: "left", headerSort: false, formatter: customCheckBoxFormatter, visible: true, width: 50 },
            { title: "Id", field: "Id", hozAlign: "left", vertAlign: "middle", visible: false },
            { title: "File Number", field: "FileNumber", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "FBP Number", field: "FBPNo", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "FBPDate", field: "FBPDate", hozAlign: "left",visible: true, vertAlign: "middle" },
            { title: "Bank Reference", field: "BankRef", hozAlign: "left", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Courier No", field: "CourierNo", hozAlign: "right", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Total Value", field: "TotalValue", hozAlign: "right", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Receiving Value", field: "ReceivingValue", hozAlign: "right", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Bank Charge", field: "BankCharge", hozAlign: "right", vertAlign: "middle",visible: true, headerFilter: "input", headerFilterLiveFilter: false },
            { title: "Remarks", field: "Remarks", hozAlign: "left", vertAlign: "middle", headerFilter: "input",visible: true, headerFilterLiveFilter: false },
            {
                title: "Actions", field: "ReAction", headerHozAlign: "center", vertAlign: "middle",visible: true, headerSort: false, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    var myUrlGetforInvoice = `@Url.Action("UpdateRealization", "BuyerOrder")?id=${data.Id}`;

                    var inActive = `setInactiveRealization(${data.Id}) `


                    var editHtml;

                    editHtml = `
                                        <a href='${myUrlGetforInvoice}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtml;

                    reportHtml = `
                                        <a href='${myUrlGetforInvoice}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;



                    var deleteHtml;
                    deleteHtml = `
                                             <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                 <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                             </a>
                                         `;

                    var statusDependentHtml = data.isPosted ? deleteHtml : editHtml + deleteHtml;
                    var html = `
                                                                              <div class='dropdown ms-1'>

                                                                         <a href='${myUrlGetforInvoice}' class='fw-bolder text-decoration-none  ms-3 mt-1'>
                                                                                           Edit
                                                                                       </a>
                                                                                  <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                                                                 <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                                                                      ${statusDependentHtml}

                                                                                  </ul>
                                                                              </div>
                                                                          `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    cell.getElement().classList.add('active-cell');
                },
            },

        ]


        var masterlcTable;

         $('#fromDate').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDate').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

         $('#fromDateGLC').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDateGLC').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

          $('#fromDateExI').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDateExI').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        
        $('#fromDateRE').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDateRE').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        if ('@ListType' === "MasterLC") {
            $("#MasterLC").addClass("active");
            $("#GroupLC").removeClass("active");
            $("#ExportInvoice").removeClass("active");
            $("#Realization").removeClass("active");

            $("#masterLC_view_id").removeClass("d-none");
            $("#GroupLC_view_id").addClass("d-none");
            $("#exportInvoice_view_id").addClass("d-none");
            $("#Realization_view_id").addClass("d-none");

            //initTabulator();
            MasterLCGear();
        }

        $("#MasterLC").on("click", function () {
            $("#MasterLC").addClass("active");
            $("#GroupLC").removeClass("active");
            $("#ExportInvoice").removeClass("active");
            $("#Realization").removeClass("active");

            $("#masterLC_view_id").removeClass("d-none");
            $("#GroupLC_view_id").addClass("d-none");
            $("#exportInvoice_view_id").addClass("d-none");
            $("#Realization_view_id").addClass("d-none");

            
             // Check if POLTable is initialized and has rows
            if (masterlcTable && masterlcTable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                initTabulator();
            }
        })

        $('input[name=fileType1]').click(function () {
            var reporttypeind = $("input[name=fileType1]:checked").val();
            //alert(reporttype);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionReportType", "Accounts")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttypeind },
                success: function (response) {
                    //  window.location.href = response.Url;

                    //window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        });

        $('input[name=fileType]').click(function () {
            var reporttypeind = $("input[name=fileType]:checked").val();
            //alert(reporttype);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionReportType", "Accounts")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttypeind },
                success: function (response) {
                    //  window.location.href = response.Url;

                    //window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        });

        $('input[name=fileType3]').click(function () {
            var reporttypeind = $("input[name=fileType3]:checked").val();
            //alert(reporttype);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionReportType", "Accounts")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttypeind },
                success: function (response) {
                    //  window.location.href = response.Url;

                    //window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        });

        $('input[name=fileType2]').click(function () {
            var reporttypeind = $("input[name=fileType2]:checked").val();
            //alert(reporttype);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionReportType", "Accounts")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttypeind },
                success: function (response) {
                    //  window.location.href = response.Url;

                    //window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        });

        function gotoCreateMasterLC() {
            var editUrl = '@Url.Action("AddMasterLC", "BuyerOrder")';
            //window.location.href = editUrl;
            window.open(editUrl, '_blank');
        }
        
        function gotoCreateExportInvoice() {
            var editUrl = '@Url.Action("AddExportInvoice", "BuyerOrder")';
            //window.location.href = editUrl;
            window.open(editUrl, '_blank');
        }
        function gotoCreateRealization() {
            var editUrl = '@Url.Action("AddRealization", "BuyerOrder")';
            //window.location.href = editUrl;
            window.open(editUrl, '_blank');
        }

        function setInactiveUrl(data) {
            var myUrlInactive = '@Url.Action("DeleteMasterLC", "BuyerOrder")';

            var modal = document.getElementById("customModal");
            modal.style.display = "block";

            document.getElementById("confirmBtn").onclick = function () {
                $.ajax({
                    type: "get",
                    data: { Id: data },
                    url: myUrlInactive,
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                            initTabulator();
                        }
                        else if (response.success == "0") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else { 
                             toastr.success(response.message, "", {
                                "toastClass": "toast-red",
                            });
                        }
                    }
                });
                modal.style.display = "none";
            };

            document.getElementById("cancelBtn").onclick = function () {
                modal.style.display = "none";
            };
        }

        function customCheckBoxFormatter(cell, formatterParams, onRendered) {
            return '<input type="checkbox" class="custom-checkbox mt-2">';
        }


        var checkBox = [ { title: "", field: "CheckBox", headerHozAlign: "left", headerSort: false, formatter: customCheckBoxFormatter, visible: true, width: 50 }]

        var Actions = [
            {
                title: "Actions", field: "button", headerHozAlign: "center", vertAlign: "middle",frozen: true, headerSort: false, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    var myUrlGetforInvoice = `@Url.Action("EditMasterLC", "BuyerOrder")?id=${data.Id}`;
                    var myreport = `@Url.Action("PrintMLCSC", "BuyerOrder")?id=${data.Id}&type=pdf`;

                    var inActive = `setInactiveUrl(${data.Id}) `


                    var editHtml;

                    editHtml = `
                                        <a href='${myUrlGetforInvoice}' class='text-decoration-none text-black ms-3 mt-1' target="_blank">
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtml;

                    reportHtml = `
                                        <a href='${myreport}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;



                    var deleteHtml;
                    deleteHtml = `
                                             <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                 <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                             </a>
                                         `;

                    var statusDependentHtml = data.isPosted ? deleteHtml : editHtml + reportHtml + deleteHtml;
                    var html = `
                                <div class='dropdown ms-1'>

                                    <a href='${myUrlGetforInvoice}' class='fw-bolder text-decoration-none  ms-3 mt-1' target="_blank">
                                            Edit
                                        </a>
                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                    <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                        ${statusDependentHtml}

                                    </ul>
                                </div>
                            `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    cell.getElement().classList.add('active-cell');
                },
            },
        ]

        var pageSize = 10;
        function MasterLCGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'MasterLC' },
                success: function (response) {
            
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             MasterLColumn = JSON.parse(response.data.KeyValue);
                             pageSize = Number(MasterLColumn.pageSize);
                             $('#POLRows').val(pageSize);
                             MasterLColumn = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "CheckBox" && column.field !== "button";
                            });

                            // Prepend the checkBox array at the start of MasterLColumn
                            MasterLColumn = checkBox.concat(MasterLColumn);
                    
                            // Append the Actions array at the end of MasterLColumn
                            MasterLColumn = MasterLColumn.concat(Actions);

                       }
                    }
                                         
                        populateCheckbox1();
                         initTabulator();
                    },
                    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideColumn(colName) {
                       
            masterlcTable.toggleColumn(colName);           
            
        }


          function populateCheckbox1(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = MasterLColumn.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideColumn('${x.field}')" class="custom-control-input title-input masterlc-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
                            
              });


                const columnListMasterLC = document.getElementById('POLColumnList');
                columnListMasterLC.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#POLRows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            masterlcTable.setPageSize(pageSize);
                        }
                    }
                });
                   

          }


       
        function initTabulator() {
            function fetchDataFromServer() {
                var MyAppUrlSettings = {
                    MyUsefulUrl: '@Url.Action("GetMasterLCList", "BuyerOrder")'
                };
                return $.ajax({
                    url: MyAppUrlSettings.MyUsefulUrl,

                    dataType: "json",
                });
            }

            fetchDataFromServer().done(function (response) {

                console.log("notrmal response:", response.data);
                var dataTable = response.data;

                var fromDate = $("#fromDate").val();
                var toDate = $("#toDate").val();   

                salesApiUrl = '@Url.Action("GetMasterLCList", "BuyerOrder")'+ '?fromDate=' + fromDate + '&toDate=' + toDate,
                    masterlcTable = new Tabulator("#example-table", {

                        layout: "fitDataTable",  
                        minHeight: 400,
                        pagination: true,
                        movableColumns: true,
                        selectable: 1,
                        paginationMode: "remote",
                        filterMode: "remote",
                        paginationSize: pageSize,
                        paginationInitialPage: 1,
                        paginationSizeSelector: [5, 10, 25, 50, 100, true],
                        paginationCounter: "rows",
                        ajaxURL: salesApiUrl,
                        ajaxConfig: "get",
                        ajaxContentType: "json",
                        ajaxResponse: function (url, params, response) {
                            masterlcTable.setMaxPage(response.last_page);
                            // //console.log("response.last_page", response.last_page);

                            dataLoad = response.data;
                            // console.log("dataLoadExpense abc:", dataLoadExpense);

                            return {

                                data: dataLoad,
                                last_page: response.last_page,

                            };
                        },
                        columns: MasterLColumn,
                        ajaxURLGenerator: function (url, config, params) {
                            //return request url
                            return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                        },                        
                    });                                                      
                    document.getElementById("masterLCPrint-pdf").addEventListener("click", function () {
                    masterlcTable.print(false, true);
                });
                document.getElementById("masterLCPrint-excel").addEventListener("click", function () {
                    masterlcTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
                });
            });
        }

        function reloadTableData() {
            var fromDate = $("#fromDate").val();
            var toDate = $("#toDate").val();           
            // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
            var apiUrl = '@Url.Action("GetMasterLCList", "BuyerOrder")' + '?fromDate=' + fromDate + '&toDate=' + toDate;
            masterlcTable.setData(apiUrl);
        }        

        // Add event listeners to the From Date and To Date input fields
        $("#fromDate, #toDate").on("change", function () {
            reloadTableData();
        });
       
        //MasterLC gear functionalities starts=============
        

          // console.log("globalFieldsForSalesList::", MasterLColumn);
          //   let columnListMasterLC = $("#POLColumnList");
          //       columnListMasterLC.empty();
        
            // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'MasterLC' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {  
            //             $.each(MasterLColumn, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var Sizetitles = `<li>
            //                             <a class="dropdown-item" href="#">
            //                             <div class="custom-control custom-checkbox" >
            //                             <input type="checkbox" class="custom-control-input title-input masterlc-column" id="${name}" value="${name}">
            //                             <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                             </div>
            //                             </a>
            //                             </li>`;
            //                 columnListMasterLC.append(Sizetitles);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         masterlcTable.showColumn(name);
            //                     } else {
            //                         masterlcTable.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });

            //                 //Add event listener to the rows select input
            //                 $("#POLRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             masterlcTable.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(MasterLColumn, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     masterlcTable.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     masterlcTable.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input masterlc-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListMasterLC.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         masterlcTable.showColumn(name);
            //                     } else {
            //                         masterlcTable.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#POLRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         masterlcTable.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            

        $("#saveMasterLC").on("click", function () {
            var columnData = [];

            var colDefs = masterlcTable.getColumnDefinitions();

            var selectElement = document.getElementById("POLRows");
            var selectedValue = selectElement.value;      

            $(".masterlc-column").each(function () {            
                var field = $(this).val();
                var title = $(`label[for='${field}']`).text();
                var isVisible = $(this).is(":checked");

                colDefs.forEach(function(colDef) {
                if (colDef.field === field) {
                    colDef.visible = isVisible;  // Set visibility based on checkbox state                
                }
              });

            console.log("munna::",colDefs);
                // columnData.push({
                //     Title: title,
                //     Field: field,
                //     IsVisible: isVisible
                // });
            });
            var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
            };
            //colDefs.push(key);
        

            var jsonData = JSON.stringify(finaldata);

            // Send data via AJAX
            $.ajax({
                url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ keyValue: jsonData, type: 'MasterLC' }),
                success: function (response) {
                    toastr.success(response.ex, "", {
                        "toastClass": "toast-green",
                    });
                },
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });
        });

     
        function DeleteFilter1(data) {
            
            $.ajax({
                url: '@Url.Action("DeleteColumnFilter", "Sales")',
                type: "get",
                data: { type: data },               
                success: function (response) {
                    if (response.success == "1") {
                        toastr.success(response.msg, "", {
                            "toastClass": "toast-green",
                        });
                        initTabulator();
                    }
                    
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                    toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                }
            });

                
            
        };

   
    //gear functionalities ends===============

        document.getElementById('buyerPOSample').addEventListener('click', function() {

            var fileUrl = '/Content/Sample/buyerpocontact.xlsx';  
             
            var downloadLink = document.createElement('a');
            downloadLink.href = fileUrl;
             
            downloadLink.download = 'sample.xlsx';  
             
            document.body.appendChild(downloadLink); 
            downloadLink.click();

            document.body.removeChild(downloadLink);
        });
    </script>


    <script>

        var GroupLCTable;

        if ('@ListType' === "GroupLC") {
            $("#MasterLC").removeClass("active");
            $("#GroupLC").addClass("active");
            $("#ExportInvoice").removeClass("active");
            $("#Realization").removeClass("active");

            $("#masterLC_view_id").addClass("d-none");
            $("#GroupLC_view_id").removeClass("d-none");
            $("#exportInvoice_view_id").addClass("d-none");
            $("#Realization_view_id").addClass("d-none");

            //initTabulatorforGrouplc();
            GroupLCGear();
        }

        $("#GroupLC").on("click", function () {
            $("#MasterLC").removeClass("active");
            $("#GroupLC").addClass("active");
            $("#ExportInvoice").removeClass("active");
            $("#Realization").removeClass("active");

            $("#masterLC_view_id").addClass("d-none");
            $("#GroupLC_view_id").removeClass("d-none");
            $("#exportInvoice_view_id").addClass("d-none");
            $("#Realization_view_id").addClass("d-none");

            
            // Check if POLTable is initialized and has rows
            if (GroupLCTable && GroupLCTable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                initTabulatorforGrouplc();
            }
        })    
        
        function gotoCreateGroupLC() {
            var editUrl = '@Url.Action("AddGroupLC", "BuyerOrder")';
            //window.location.href = editUrl;
            window.open(editUrl, '_blank');
        }
        

        var Actions1 = [
             {
                    title: "Actions", field: "bblcAction", headerHozAlign: "center", headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                        var data = cell.getData();
                        //console.log("seeeee data::", data);
                        var Edit = `@Url.Action("UpdateGroupLC", "BuyerOrder")?grouplcid=` + data.Id;
                        var PrintBBLCMargin = `@Url.Action("PrintBBLCMargin", "BuyerOrder")?id=${data.Id}&type=pdf`;

                        var PrintMLCEX = `@Url.Action("PrintMLCEX", "BuyerOrder")?id=${data.Id}&type=pdf`;

                        var inActive = `InactiveGroupLC(${data.Id}) `;

                        var deleteHtml = `
                        <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                        <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                        </a>
                        `;

                        var PrintBBLCMarginlink = `
                                <a href='${PrintBBLCMargin}' target='_blank' class='text-decoration-none text-black ms-3 mt-1 full-width' id='inactive'>
                                        <i class="bi bi-file-earmark-pdf"></i><span class='ms-1 mt-2'>BBLC Margin Analysis / Summary</span><br />
                                </a>
                            `;
                        var PrintMLCEXlink = `
                            <a href='${PrintMLCEX}' target='_blank' class='text-decoration-none text-black ms-3 mt-1 full-width' id='inactive'>
                                    <i class="bi bi-file-earmark-pdf-fill"></i><span class='ms-1 mt-2'>Master LC Wise Export</span><br />
                                </a>
                        `;
                      

                        //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                        var statusDependentHtml = deleteHtml + PrintBBLCMarginlink + PrintMLCEXlink;

                        var html = `
                        <div class='dropdown ms-1'>
                        <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                        <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                            ${statusDependentHtml}

                        </ul>
                        </div>
                        `;

                        return html;
                    },
                    visible: true, cellClick: function (e, cell) {
                        // Add a custom class to the cell when it's clicked
                        cell.getElement().classList.add('active-cell');
                    },
                },
        ]

        var pageSize = 10;
        function GroupLCGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'GroupLC' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             grouplcFields = JSON.parse(response.data.KeyValue);
                             pageSize = Number(grouplcFields.pageSize);
                             $('#GroupLCRows').val(pageSize);
                             grouplcFields = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "bblcAction";
                            });

                                       
                            // Append the Actions array at the end of grouplcFields
                            grouplcFields = grouplcFields.concat(Actions1);

                       }
                    }
                                 
                        populateCheckbox2();
                        initTabulatorforGrouplc();
                    },
            
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideGroupLC(colName) {
               
            GroupLCTable.toggleColumn(colName);           
    
        }


          function populateCheckbox2(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = grouplcFields.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideGroupLC('${x.field}')" class="custom-control-input title-input grouplc-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
                    
              });


                const columnListGroupLC = document.getElementById('GroupLCColumnList');
                columnListGroupLC.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#GroupLCRows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            GroupLCTable.setPageSize(pageSize);
                        }
                    }
                });
           

          }



        function initTabulatorforGrouplc() {

            var fromDateGLC = $("#fromDateGLC").val();
            var toDateGLC = $("#toDateGLC").val();            

            var POLAPIURL = '@Url.Action("GetGroupLCist", "BuyerOrder")' + '?fromDate=' + fromDateGLC + '&toDate=' + toDateGLC;
            GroupLCTable = new Tabulator("#grouplc-table", {
                // data: dataTableFilter,
                dataTree: true,
                height: "350px",
                movableColumns: true,
                dataTreeStartExpanded: true,
                dataTreeChildField: "children",
                layout: "fitColumns",
                selectable: 1,
                pagination: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000],
                paginationCounter: "rows",
                ajaxURL: POLAPIURL,
                ajaxConfig: "get",
                ajaxContentType: "json",

                ajaxResponse: function (url, params, response) {
                    GroupLCTable.setMaxPage(response.last_page);
                    // //console.log("response.last_page", response.last_page);

                    dataLoadExpense = response.data;
                    console.log("dataLoadExpense abc:", dataLoadExpense);

                    return {

                        data: dataLoadExpense,
                        last_page: response.last_page,

                    };
                },

                columns: grouplcFields,
                ajaxURLGenerator: function (url, config, params) {
                    //return request url
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                },
                dataBound: function () {
                    // Freeze the top 1 row (index 0) after the table is created
                    var rows = table.getRows();
                    if (rows.length > 0) {
                        var cells = rows[0].getCells();
                        cells.forEach(cell => {
                            cell.freeze();
                        });
                    }
                },
            });


            function reloadTableData3() {
                var fromDateGLC = $("#fromDateGLC").val();
                var toDateGLC = $("#toDateGLC").val();               
                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetGroupLCist", "BuyerOrder")' + '?fromDate=' + fromDateGLC + '&toDate=' + toDateGLC;
                GroupLCTable.setData(apiUrl);
            }

            // Add event listeners to the From Date and To Date input fields
            $("#fromDateGLC, #toDateGLC").on("change", function () {
                reloadTableData3();
            });


            //grouplc gear functionalities starts=============
            

            // console.log("globalFieldsForSalesList::", grouplcFields);
            // let columnListGroupLC = $("#GroupLCColumnList");
            //     columnListGroupLC.empty();
        
            // // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'GroupLC' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {                          
            //             $.each(grouplcFields, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var BBLCLIST = `<li>
            //                                  <a class="dropdown-item" href="#">
            //                                  <div class="custom-control custom-checkbox" >
            //                                  <input type="checkbox" class="custom-control-input title-input grouplc-column" id="${name}" value="${name}">
            //                                  <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                                  </div>
            //                                  </a>
            //                                  </li>`;
            //                 columnListGroupLC.append(BBLCLIST);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         GroupLCTable.showColumn(name);
            //                     } else {
            //                         GroupLCTable.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });

            //                 //Add event listener to the rows select input
            //                 $("#GroupLCRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             GroupLCTable.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(grouplcFields, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     GroupLCTable.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     GroupLCTable.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input grouplc-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListGroupLC.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         GroupLCTable.showColumn(name);
            //                     } else {
            //                         GroupLCTable.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#GroupLCRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         GroupLCTable.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            

            $("#saveGroupLC").on("click", function () {
                var columnData = [];

                var colDefs = GroupLCTable.getColumnDefinitions();

                var selectElement = document.getElementById("GroupLCRows");
                var selectedValue = selectElement.value;    

                $(".grouplc-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                    colDefs.forEach(function(colDef) {
                    if (colDef.field === field) {
                        colDef.visible = isVisible;  // Set visibility based on checkbox state                
                    }
                  });
                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                 var finaldata = {
                         colDefs:colDefs,
                         pageSize: selectedValue 
                 };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'GroupLC' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

           
            function DeleteFilter2(data) {
            
                $.ajax({
                    url: '@Url.Action("DeleteColumnFilter", "Sales")',
                    type: "get",
                    data: { type: data },               
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                            initTabulatorforGrouplc();
                        }
                    
                    },
                    error: function (xhr, status, error) {
                        console.error(xhr.responseText);
                        toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                    }
                });
               
            
           };


            //gear functionalities ends===============

        };
        function InactiveGroupLC(data) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteGroupLc", "BuyerOrder")',
                        type: "get",
                        data: { id: data },
                        traditional: true,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                GroupLCGetData();
                            }
                            else if (response.success == "0") {
                                //alert()
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                GroupLCGetData();
                            }
                            else {
                                toastr.success("Access Denied.", "", {
                                    "toastClass": "toast-red",
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                            toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                        }
                    });
                }
            });
        };
        document.getElementById("groupLCPrint-pdf").addEventListener("click", function () {
            GroupLCTable.print(false, true);
        });
        document.getElementById("groupLCPrint-excel").addEventListener("click", function () {
            GroupLCTable.download("xlsx", "GROUP_LC.xlsx", { sheetName: "GROUP_LC" });
        });

        
    </Script>

    <script>
        if ('@ListType' === "ExportInvoice") {
            $("#MasterLC").removeClass("active");
            $("#GroupLC").removeClass("active");
            $("#ExportInvoice").addClass("active");
            $("#Realization").removeClass("active");

            $("#masterLC_view_id").addClass("d-none");
            $("#GroupLC_view_id").addClass("d-none");
            $("#exportInvoice_view_id").removeClass("d-none");
            $("#Realization_view_id").addClass("d-none");

            //initTabulatorforExportInvoice();
            ExportInvoiceGear();
        }

        $("#ExportInvoice").on("click", function () {
            $("#MasterLC").removeClass("active");
            $("#GroupLC").removeClass("active");
            $("#ExportInvoice").addClass("active");
            $("#Realization").removeClass("active");

            $("#masterLC_view_id").addClass("d-none");
            $("#GroupLC_view_id").addClass("d-none");
            $("#exportInvoice_view_id").removeClass("d-none");
            $("#Realization_view_id").addClass("d-none");

            
            // Check if POLTable is initialized and has rows
            if (previousInvoiceTable && previousInvoiceTable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                initTabulatorforExportInvoice();
            }
        })

        function setInactiveExportInvoice(data) {
            var myUrlInactive = '@Url.Action("DeleteExportInvoice", "BuyerOrder")';

            var modal = document.getElementById("customModal");
            modal.style.display = "block";

            document.getElementById("confirmBtn").onclick = function () {
                $.ajax({
                    type: "get",
                    data: { Id: data },
                    url: myUrlInactive,
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                            initTabulatorforExportInvoice();
                        }
                        else if (response.success == "0") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else
                        {
                            toastr.success("Access Denied.", "", {
                                "toastClass": "toast-red",
                            });
                        }
                    }
                });
                modal.style.display = "none";
            };

            document.getElementById("cancelBtn").onclick = function () {
                modal.style.display = "none";
            };
        }

        

        function formatDateToCustomStringForDate(inputDate) {
            const months = [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ];

            if (inputDate instanceof Date && !isNaN(inputDate)) {
                const day = inputDate.getDate();
                const monthIndex = inputDate.getMonth();
                const year = inputDate.getFullYear();
                const formattedDay = day < 10 ? `0${day}` : day;

                const formattedDate = `${formattedDay}-${months[monthIndex]}-${year}`;
                return formattedDate;
            } else {
                return inputDate;
            }
        }

        var previousInvoiceTable;
        var pageSize = 10;

        var checkBox1 = [
            { title: "", field: "CheckBox1", headerHozAlign: "left",visible: true, headerSort: false, formatter: customCheckBoxFormatter, width: 50 },
        ]

        var Actions2 = [
            {
                title: "Actions", field: "ExportAction", headerHozAlign: "center", vertAlign: "middle",frozen: true,visible: true, headerSort: false, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    var myUrlGetforInvoice = `@Url.Action("UpdateExportInvoice", "BuyerOrder")?id=${data.Id}`;
                    var myUrlGetforInvoicereport = `@Url.Action("PrintExportInvoice", "BuyerOrder")?id=${data.Id}`;
                    var myUrlGetforPackingList = `@Url.Action("PrintExportInvoice", "BuyerOrder")?id=${data.Id}&value=Packing List`;
                    var myUrlGetforDetPackingList = `@Url.Action("DetailsPackingList", "BuyerOrder")?id=${data.Id}&value=D.Packing List`;
                    var myUrlGetforDetPackingList1 = `@Url.Action("PrintPackingList", "BuyerOrder")?id=${data.Id}&value=De_Packing List`;
                    var myUrlGetforOutPass = `@Url.Action("PrintExportInvoice", "BuyerOrder")?id=${data.Id}&value=Out Pass`;
                    var myUrlGetforOutPassEng = `@Url.Action("PrintExportInvoice", "BuyerOrder")?id=${data.Id}&value=Out PassEng`;

                    var inActive = `setInactiveExportInvoice(${data.Id}) `


                    var editHtml;

                    editHtml = `
                                        <a href='${myUrlGetforInvoice}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtml;

                    reportHtml = `
                                        <a href='${myUrlGetforInvoicereport}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlPL;

                    reportHtmlPL = `
                                        <a href='${myUrlGetforPackingList}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Packing List</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlDPL;

                    reportHtmlDPL = `
                                        <a href='${myUrlGetforDetPackingList}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>D. Packing List</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlDPL1;

                    reportHtmlDPL1 = `
                                        <a href='${myUrlGetforDetPackingList1}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Details Packing List</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlOutPass;

                    reportHtmlOutPass = `
                                        <a href='${myUrlGetforOutPass}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Out Pass Bn.</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtmlOutPassEng;

                    reportHtmlOutPassEng = `
                                        <a href='${myUrlGetforOutPassEng}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Out Pass En.</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var deleteHtml;
                    deleteHtml = `
                                             <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                 <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                             </a>
                                         `;

                    var statusDependentHtml = data.isPosted ? deleteHtml : editHtml + reportHtml + reportHtmlPL + reportHtmlDPL1 + deleteHtml;
                    var html = `
                                <div class='dropdown ms-1'>

                                    <a href='${myUrlGetforInvoicereport}' target="_blank" class='fw-bolder text-decoration-none  ms-3 mt-1'>
                                            Report
                                        </a>
                                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                    <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                        ${statusDependentHtml}

                                    </ul>
                                </div>
                            `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    cell.getElement().classList.add('active-cell');
                },
            },
        ]
         
        function ExportInvoiceGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Export_Invoice' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             exportcolumn = JSON.parse(response.data.KeyValue);
                             pageSize = Number(exportcolumn.pageSize);
                             $('#ExportRows').val(pageSize);
                             exportcolumn = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "CheckBox1" && column.field !== "ExportAction";
                            });

                            // Prepend the checkBox array at the start of exportcolumn
                            exportcolumn = checkBox1.concat(exportcolumn);
                            
                            // Append the Actions array at the end of exportcolumn
                            exportcolumn = exportcolumn.concat(Actions2);

                       }
                    }
                         
                        populateCheckbox3();
                        initTabulatorforExportInvoice();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideExpInvoice(colName) {
       
            previousInvoiceTable.toggleColumn(colName);           
    
        }


          function populateCheckbox3(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = exportcolumn.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideExpInvoice('${x.field}')" class="custom-control-input title-input export-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListExpInvoice = document.getElementById('ExportColumnList');
                columnListExpInvoice.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#ExportRows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            previousInvoiceTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }


        function initTabulatorforExportInvoice() {

            var fromDateExI = $("#fromDateExI").val();
            var toDateExI = $("#toDateExI").val();   

            setTimeout(function () {
                previousInvoiceTable = new Tabulator("#exportInvoice-table", {
                layout: "fitDataTable",
                height: "fitDataFill",
                selectable: 1,
                pagination: true,
                scrollHorizontal: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, true],  
                paginationCounter: "rows",
                columnDefaults: {
                    resizable: true,
                },
                ajaxURL: '@Url.Action("GetExpInvoiceList", "BuyerOrder")'+ '?fromDate=' + fromDateExI + '&toDate=' + toDateExI,
                ajaxConfig: "get",
                ajaxContentType: "json",
                ajaxResponse: function (url, params, response) {
                    previousInvoiceTable.setMaxPage(response.last_page);
                    console.log("response.last_page", response.last_page);

                    dataLoad = response.data || [];
                    totalValue = response.total;

                    dataLoad.forEach(function (item) {
                        if (item.InvoiceDate) {
                            const dateObject = new Date(item.InvoiceDate);
                            item.InvoiceDate = formatDateToCustomStringForDate(dateObject);
                        }
                        if (item.ExpDate) {
                            const dateObject = new Date(item.ExpDate);
                            item.ExpDate = formatDateToCustomStringForDate(dateObject);
                        }
                        if (item.BLDate) {
                            const dateObject = new Date(item.BLDate);
                            item.BLDate = formatDateToCustomStringForDate(dateObject);
                        }
                    });
                    return {
                        data: response.data,
                        last_page: response.last_page,
                        total: response.total
                    };
                },
                columns: exportcolumn,
                height: "400px",
                ajaxURLGenerator: function (url, config, params) {
                    //return request url
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params));//encode parameters as a json object
                },
            });
            }, 100);

            
             function reloadTableData1() {
                 var fromDateExI = $("#fromDateExI").val();
                 var toDateExI = $("#toDateExI").val();           
                 // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                 var apiUrl = '@Url.Action("GetExpInvoiceList", "BuyerOrder")' + '?fromDate=' + fromDateExI + '&toDate=' + toDateExI;
                 previousInvoiceTable.setData(apiUrl);
             }        

             // Add event listeners to the From Date and To Date input fields
             $("#fromDateExI, #toDateExI").on("change", function () {
                 reloadTableData1();
             });

              //Export Invoice gear functionalities starts=============
            
            // console.log("globalFieldsForSalesList::", exportcolumn);
            // let columnListExportInvoice = $("#ExportColumnList");
            //     columnListExportInvoice.empty();
        
            // // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'Export_Invoice' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {                                                  
            //             $.each(exportcolumn, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var BBLCLIST = `<li>
            //                          <a class="dropdown-item" href="#">
            //                          <div class="custom-control custom-checkbox" >
            //                          <input type="checkbox" class="custom-control-input title-input export-column" id="${name}" value="${name}">
            //                          <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                          </div>
            //                          </a>
            //                          </li>`;
            //                 columnListExportInvoice.append(BBLCLIST);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         previousInvoiceTable.showColumn(name);
            //                     } else {
            //                         previousInvoiceTable.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });

            //                 //Add event listener to the rows select input
            //                 $("#ExportRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             previousInvoiceTable.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(exportcolumn, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     previousInvoiceTable.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     previousInvoiceTable.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input export-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListExportInvoice.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         previousInvoiceTable.showColumn(name);
            //                     } else {
            //                         previousInvoiceTable.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#ExportRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         previousInvoiceTable.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            

            $("#saveExport").on("click", function () {
                var columnData = [];

                var colDefs = previousInvoiceTable.getColumnDefinitions();

                var selectElement = document.getElementById("ExportRows");
                var selectedValue = selectElement.value;  

                $(".export-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                      colDefs.forEach(function(colDef) {
                      if (colDef.field === field) {
                          colDef.visible = isVisible;  // Set visibility based on checkbox state                
                      }
                    });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'Export_Invoice' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

             function DeleteFilter3(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             initTabulatorforExportInvoice();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };

            
            //gear functionalities ends===============


            document.getElementById("exportInvoicePrint-pdf").addEventListener("click", function () {
                    previousInvoiceTable.print(false, true);
            });

            document.getElementById("exportInvoicePrint-excel").addEventListener("click", function () {
                    previousInvoiceTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
            });
        }
    </Script>

    <script>
        if ('@ListType' === "Realization") {
            $("#MasterLC").removeClass("active");
            $("#GroupLC").removeClass("active");
            $("#ExportInvoice").removeClass("active");
            $("#Realization").addClass("active");

            $("#masterLC_view_id").addClass("d-none");
            $("#GroupLC_view_id").addClass("d-none");
            $("#exportInvoice_view_id").addClass("d-none");
            $("#Realization_view_id").removeClass("d-none");

            //initTabulatorforRealization();
            RealizationGear();
        }

        $("#Realization").on("click", function () {
            $("#MasterLC").removeClass("active");
            $("#GroupLC").removeClass("active");
            $("#ExportInvoice").removeClass("active");
            $("#Realization").addClass("active");
            
            $("#masterLC_view_id").addClass("d-none");
            $("#GroupLC_view_id").addClass("d-none");
            $("#exportInvoice_view_id").addClass("d-none");
            $("#Realization_view_id").removeClass("d-none");

           
            // Check if POLTable is initialized and has rows
            if (realizationTable && realizationTable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                initTabulatorforRealization();
            }
        })

        function setInactiveRealization(data) {
            var myUrlInactive = '@Url.Action("DeleteRealization", "BuyerOrder")';

            var modal = document.getElementById("customModal");
            modal.style.display = "block";

            document.getElementById("confirmBtn").onclick = function () {
                $.ajax({
                    type: "get",
                    data: { Id: data },
                    url: myUrlInactive,
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                            initTabulatorforRealization();
                        }
                        else if (response.success == "0") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-red",
                            });
                        }
                        else
                        {
                            toastr.success("Access denied.", "", {
                                "toastClass": "toast-red",
                            });
                        }
                    }
                });
                modal.style.display = "none";
            };

            document.getElementById("cancelBtn").onclick = function () {
                modal.style.display = "none";
            };
        }

        

        function formatDateToCustomStringForRealization(inputDate) {
            const months = [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ];

            if (inputDate instanceof Date && !isNaN(inputDate)) {
                const day = inputDate.getDate();
                const monthIndex = inputDate.getMonth();
                const year = inputDate.getFullYear();
                const formattedDay = day < 10 ? `0${day}` : day;

                const formattedDate = `${formattedDay}-${months[monthIndex]}-${year}`;
                return formattedDate;
            } else {
                return inputDate;
            }
        }

        var realizationTable;
        var pageSize = 10;

        var checkBox3 = [
            { title: "", field: "CheckBox2", headerHozAlign: "left", headerSort: false, formatter: customCheckBoxFormatter, visible: true, width: 50 },
        ]

        var Actions3 = [
            {
                title: "Actions", field: "ReAction", headerHozAlign: "center", vertAlign: "middle",visible: true, headerSort: false, hozAlign: "right", resizable: false, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    console.log("see data::", data);
                    var myUrlGetforInvoice = `@Url.Action("UpdateRealization", "BuyerOrder")?id=${data.Id}`;

                    var inActive = `setInactiveRealization(${data.Id}) `


                    var editHtml;

                    editHtml = `
                                        <a href='${myUrlGetforInvoice}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                            <i class='bi bi-pencil-square pe-1'></i> <span>Edit</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;

                    var reportHtml;

                    reportHtml = `
                                        <a href='${myUrlGetforInvoice}' target="_blank" class='text-decoration-none text-black ms-3 mt-1'>
                                                    <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                                        </a>
                                        <div class='dropdown-divider m-0'></div>`;



                    var deleteHtml;
                    deleteHtml = `
                                                <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1' href='#' id='InActive'>
                                                    <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                                </a>
                                            `;

                    var statusDependentHtml = data.isPosted ? deleteHtml : editHtml + deleteHtml;
                    var html = `
                                  <div class='dropdown ms-1'>

                                <a href='${myUrlGetforInvoice}' class='fw-bolder text-decoration-none  ms-3 mt-1'>
                                                Edit
                                            </a>
                                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                        <ul class='dropdown-menu item-menu' aria-labelledby='dropdownMenuButton1'>
                                            ${statusDependentHtml}

                                        </ul>
                                    </div>
                                `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    cell.getElement().classList.add('active-cell');
                },
            },
        ]

        function RealizationGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Realization' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             realizationcolumn = JSON.parse(response.data.KeyValue);
                             pageSize = Number(realizationcolumn.pageSize);
                             $('#ExportRows').val(pageSize);
                             realizationcolumn = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "CheckBox2" && column.field !== "ReAction";
                            });

                            // Prepend the checkBox array at the start of realizationcolumn
                            realizationcolumn = checkBox3.concat(realizationcolumn);
                            
                            // Append the Actions array at the end of realizationcolumn
                            realizationcolumn = realizationcolumn.concat(Actions3);

                       }
                    }
                         
                        populateCheckbox4();
                        initTabulatorforRealization();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideRealization(colName) {
       
            realizationTable.toggleColumn(colName);           
    
        }


          function populateCheckbox4(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = realizationcolumn.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideRealization('${x.field}')" class="custom-control-input title-input realization-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListRealization = document.getElementById('RealizationColumnList');
                columnListRealization.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#realizationRows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            realizationTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }


        function initTabulatorforRealization() {

            var fromDateRE = $("#fromDateRE").val();
            var toDateRE = $("#toDateRE").val(); 

            setTimeout(function () {
                    realizationTable = new Tabulator("#realization-table", {
                    layout: "fitColumns",
                    height: "fitDataFill",
                    selectable: 1,
                    pagination: true,
                    scrollHorizontal: true,
                    paginationMode: "remote",
                    filterMode: "remote",
                    paginationSize: pageSize,
                    paginationInitialPage: 1,
                    paginationSizeSelector: [5, 10, 25, 50, 100, true],
                    paginationCounter: "rows",
                    columnDefaults: {
                        resizable: true,
                    },
                    ajaxURL: '@Url.Action("GetRealizationList", "BuyerOrder")' + '?fromDate=' + fromDateRE + '&toDate=' + toDateRE,
                    ajaxConfig: "get",
                    ajaxContentType: "json",
                    ajaxResponse: function (url, params, response) {
                        realizationTable.setMaxPage(response.last_page);
                        console.log("response.last_page", response.last_page);
                        
                        dataLoad = response.data || [];
                        totalValue = response.total;

                        dataLoad.forEach(function (item) {
                            if (item.FBPDate) {
                                const dateObject = new Date(item.FBPDate);
                                item.FBPDate = formatDateToCustomStringForRealization(dateObject);
                            }
                            
                        });
                    
                        return {
                            data: response.data,
                            last_page: response.last_page,
                            total: response.total
                        };
                    },
                    columns: realizationcolumn,
                    height: "311px",
                    ajaxURLGenerator: function (url, config, params) {
                       //return request url
                       return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                    },
                });
                document.getElementById("realizationPrint-pdf").addEventListener("click", function () {
                        realizationTable.print(false, true);
                });

                document.getElementById("realizationPrint-excel").addEventListener("click", function () {
                        realizationTable.download("xlsx", "data.xlsx", { sheetName: "Table Data" });
                });
            }, 100);           
            
        }

        function reloadTableData2() {
            var fromDateRE = $("#fromDateRE").val();
            var toDateRE = $("#toDateRE").val();           
            // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
            var apiUrl = '@Url.Action("GetRealizationList", "BuyerOrder")' + '?fromDate=' + fromDateRE + '&toDate=' + toDateRE;
            realizationTable.setData(apiUrl);
        }        

        // Add event listeners to the From Date and To Date input fields
        $("#fromDateRE, #toDateRE").on("change", function () {
            reloadTableData2();
        });


         //Realization gear functionalities starts=============
            
           // console.log("globalFieldsForSalesList::", realizationcolumn);
           //  let columnListRealization = $("#RealizationColumnList");
           //      columnListRealization.empty();
        
           //  // Initialize columns page load
           //  $.ajax({
           //      url: '@Url.Action("GetFilteredColumn", "Sales")', 
           //      type: 'GET',
           //      contentType: 'application/json',
           //      data: {type: 'Realization' },
           //      success: function (response) {
            
           //          if(response.Success == 0)
           //          {                                                                           
           //              $.each(realizationcolumn, function (index, field) {
           //                  //console.log("GLOBAL 2::",field);
           //                  var title = field.title;
           //                  var name = field.field;
           //                  var visible = true;
           //                  if (field.visible == false) {
           //                      visible = false;
           //                  }
           //                  var DALIST = `<li>
           //                                  <a class="dropdown-item" href="#">
           //                                  <div class="custom-control custom-checkbox" >
           //                                  <input type="checkbox" class="custom-control-input title-input realization-column" id="${name}" value="${name}">
           //                                  <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
           //                                  </div>
           //                                  </a>
           //                                  </li>`;
           //                  columnListRealization.append(DALIST);

           //                  document.querySelector(`#${name}`).addEventListener('click', function (event) {
           //                      var checkbox = event.target;
           //                      var isChecked = checkbox.checked;

           //                      if (isChecked) {
           //                          realizationTable.showColumn(name);
           //                      } else {
           //                          realizationTable.hideColumn(name);
           //                      }
           //                  });


           //                  $(`${'#' + name}`).prop('checked', visible);


           //                  $('.custom-control-label').on('click', function (e) {
           //                      e.stopPropagation();
           //                  });
           //                  $('#dropdown-titles').on('click', function (e) {
           //                      e.stopPropagation();
           //                  });

           //                  //Add event listener to the rows select input
           //                  $("#realizationRows").on("change", function () {
           //                      var selectedRows = $(this).val();
           //                      if (selectedRows !== null) {
           //                          var pageSize = parseInt(selectedRows);
           //                          if (!isNaN(pageSize)) {
           //                              realizationTable.setPageSize(pageSize);
           //                          }
           //                      }
           //                  });

           //              });
           //          }
           //          else
           //          {
           //              var jsonData = response.data.KeyValue;
           //              var columnData = JSON.parse(jsonData);

                   
           //              $.each(realizationcolumn, function (index, globalField) {
           //                  var matchedField = columnData.find(function (fieldData) {
           //                      return fieldData.Field === globalField.field;
           //                  });

           //                  // If a match is found, update the visibility
           //                  if (matchedField) {
           //                      globalField.visible = matchedField.IsVisible;
           //                  } else {
           //                      globalField.visible = false; // Default to false if not found
           //                  }

           //                  if (matchedField.IsVisible == false) {
           //                      setTimeout(function() {
           //                      realizationTable.hideColumn(matchedField.Field);
           //                      }, 1000);
           //                  }
           //                  else
           //                  {
           //                      setTimeout(function() {
           //                      realizationTable.showColumn(matchedField.Field);
           //                      }, 1000);
           //                  }
           //                  var title = globalField.title;
           //                  var name = globalField.field;
           //                  var visible = globalField.visible;

           //                  var titles = `<li>
           //                  <a class="dropdown-item" href="#">
           //                      <div class="custom-control custom-checkboxs">
           //                          <input type="checkbox" class="custom-control-input title-input realization-column" id="${name}" value="${name}">
           //                          <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
           //                      </div>
           //                  </a>
           //                  </li>`;

           //                  // Append the generated HTML to your column list
           //                  columnListRealization.append(titles);

           //                  // Set the checkbox state based on visibility
           //                  $(`#${name}`).prop('checked', visible);

           //                  // Add event listener to the checkbox to show/hide columns
           //                  document.querySelector(`#${name}`).addEventListener('click', function (event) {
           //                      var checkbox = event.target;
           //                      var isChecked = checkbox.checked;

           //                      if (isChecked) {
           //                          realizationTable.showColumn(name);
           //                      } else {
           //                          realizationTable.hideColumn(name);
           //                      }
           //                  });
           //              });

           //              // Prevent the dropdown from closing when clicking on a checkbox or label
           //              $('.custom-control-label').on('click', function (e) {
           //                  e.stopPropagation();
           //              });
           //              $('#dropdown-titles').on('click', function (e) {
           //                  e.stopPropagation();
           //              });

           //              // Handle change event for #customer-rows
           //              $("#realizationRows").on("change", function () {
           //                  var selectedRows = $(this).val();
           //                  if (selectedRows !== null) {
           //                      var pageSize = parseInt(selectedRows);
           //                      if (!isNaN(pageSize)) {
           //                          realizationTable.setPageSize(pageSize);
           //                      }
           //                  }
           //              });

           //          }
           //      },
           //      error: function (error) {
           //          // Handle error
           //          console.error("Error saving settings:", error);
           //      }
           //  });

            

            $("#saveRealization").on("click", function () {
                var columnData = [];

                var colDefs = realizationTable.getColumnDefinitions();

                var selectElement = document.getElementById("realizationRows");
                var selectedValue = selectElement.value;

                $(".realization-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                      colDefs.forEach(function(colDef) {
                      if (colDef.field === field) {
                          colDef.visible = isVisible;  // Set visibility based on checkbox state                
                      }
                    });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'Realization' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });


             function DeleteFilter4(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             initTabulatorforRealization();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };

           
            //gear functionalities ends===============

    </Script>
}