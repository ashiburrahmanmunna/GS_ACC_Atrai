@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@using Atrai.Model.Core.Entity;
@using Atrai.Model.Core.Common;
@{
    ViewData["Title"] = "Variable";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
    var ListType = ViewBag.ListType as string;
}

<link href="~/css/accountHeadListGearDropdown.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">


<style>
    /*li {
        cursor: pointer;
        padding: 10px;
        margin: 5px;
        border: 1px solid #ccc; .. 
    }*/

    /* Set the anchor tag to have full width */
    li a {
        display: block;
        width: 100%;
    }

    .full-width {
        display: block;
        width: 100%;
    }

    .table > :not(:first-child) {
        border-top: 0;
    }

    #treegridTable th {
        text-align: center;
        font-weight: 600;
        border: 1px solid #BABEC5;
        /*font-size: 14px;*/
    }

    .table > tbody > tr > td {
        line-height: 15px !important;
        border: 1px solid #c9c9c9;
    }


    .table tbody tr td {
        /* border: 1px solid #c9c9c9;*/
        font: 14px;
        color: #8A8A8A;
        line-height: 15px;
    }
    /*    .table>:not(caption)>*>* {

                     border-bottom-width: 0px;

                }*/
    .text-red {
        color: #FF0000 !important;
    }

    #body td:not(:first-child) {
        text-align: center;
    }

    .root-node {
        font-weight: 500;
    }

    /*   .tabulator-table .tabulator-row {
        background-color: white;
    } */

    .upper-form-style {
        background: #e9ecef6b;
        /*padding-top: 62px*/
    }

    .report-text-style {
        color: #0000ce;
    }

    .company-and-other-text-style {
        margin-top: 40px;
    }

    .customize-btn {
        background: #e9ecef6b;
        border: 1px solid black;
    }

    .customize-btn-another {
        background: #2CA01C;
        border: 1px solid black;
        border-radius: 20px;
        color: #FFFFFF;
        border: 1px solid #2CA01C;
    }

        .customize-btn-another:hover {
            background: #2CA01C;
            border: 1px solid black;
            border-radius: 20px;
            color: #FFFFFF;
            border: 1px solid #2CA01C;
        }

    .customize-btn:hover {
        background: #e9ecef6b;
        border: 1px solid black;
    }

    .customization-btn {
        background: #2CA01C;
        color: white;
        /*border: 1px solid black;*/
        border-radius: 20px;
    }

        .customization-btn:hover {
            background: #235d1b;
            color: white;
            border-radius: 20px;
        }

    .dropdown-button-style {
        border: 1px solid #ced4da;
        background: white;
    }

        .dropdown-button-style:hover {
            border: 1px solid #ced4da;
            background: white;
        }

    .gear-dropdown1.show {
        width: 595px;
    }

    .gear-dropdown2.show {
        width: 610px;
    }

    .gear-dropdown3.show {
        width: 615px;
    }

    .gear-dropdown4.show {
        width: 595px;
    }

    .gear-dropdown5.show {
        width: 535px;
    }

    .gear-dropdown6.show {
        width: 595px;
    }

    .gear-dropdown7.show {
        width: 595px;
    }

    .modal-dialog {
        max-width: 90%;
        margin: 2rem auto;
    }

    .report-print-setting-style {
        background: #e9ecef6b;
    }

    .total-accname {
        border-bottom: 5px double black !important;
    }

    /* #loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        background: url('/assets/loading-load.gif') 50% 50% no-repeat rgb(249, 249, 249);
        opacity: .6;
    } */

    .tabulator {
        border: none;
    }

    .tabulator-col .tabulator-col-title {
        text-align: center;
    }

    .tabulator-tableholder {
        background-color: white;
    }

    .tabulator[tabulator-layout=fitDataTable] {
        display: inherit;
    }

    .tabulator .tabulator-header .tabulator-col .tabulator-col-content {
        margin-top: 7px;
    }

    .tabulator .tabulator-header .tabulator-col, .tabulator .tabulator-header {
        background-color: white;
        border-bottom: 1px solid #aaaaaa38;
        border-right: 1px solid #aaaaaa38;
        /*border-left: 1px solid #aaaaaa38;*/
        /* padding-left: 2px;*/
    }
    /*    .tabulator-row .tabulator-cell, .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
                border-right: none;
                border-left: none;
            }*/
    .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {
        border-right: 2px solid #aaaaaa38;
    }

    .tabulator-row .tabulator-cell {
        border-right: none;
        border-left: none;
        padding-left: 10px;
        border: 1px solid #aaaaaa29;
    }

    .tabulator-cell {
        padding-top: 10px;
        padding-bottom: 10px;
        /*margin-top: 27px;*/
    }

    .tabulator .tabulator-row .active-cell {
        overflow: visible;
        z-index: 13;
        /* Add any other styles you need for the active cell */
    }

    .tabulator-row {
        /*   border: 1px solid #aaaaaa38;*/
        border-left: none;
        border-right: none;
    }

    input[type="checkbox"] {
        width: 15px; /* Set the width */
        height: 20px; /* Set the height */
    }

    .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active {
        border-top-color: transparent !important;
        border-left-color: transparent !important;
        border-right-color: transparent !important;
        border-bottom: 4px solid green;
    }

        .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active:hover {
            background-color: #F8F8F8;
            border-top-color: transparent !important;
            border-left-color: transparent !important;
            border-right-color: transparent !important;
        }

    .nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link:hover {
        background-color: #F8F8F8;
        border-top-color: transparent !important;
        border-left-color: transparent !important;
        border-right-color: transparent !important;
    }

    .customize-btnew {
        background: transparent;
        border: 1px solid black;
        border-radius: 20px;
    }

        .customize-btnew:hover {
            background: #ffffff;
            border: 1px solid black;
            color: black;
            border-radius: 20px;
        }

    .tabulator-row .tabulator-cell.tabulator-editing {
        border: 1px solid #404c5d;
        outline: none;
        padding: 0;
    }

    .tabulator-cell.tabulator-editable[tabulator-field="AccName"] {
        border: 1px solid #0003;
        margin-bottom: 10px;
    }

    .filter-dropdown > .filter-dropdown-class.show {
        width: 580px;
    }

    p {
        margin: 1em 0;
    }

    .button {
        -webkit-tap-highlight-color: rgba(0,0,0,0);
        position: relative;
        background: #aa0000;
        padding: 10px 15px;
        color: white;
        box-shadow: 0 2px black;
        text-decoration: none;
        border-radius: 5px;
        /*text-shadow: 0 1px 1px black;*/
    }

        .button:hover {
            top: -2px;
            box-shadow: 0 7px #000000a3;
        }

        .button:active {
            top: 1px;
            box-shadow: 0 7px #000000a3;
        }

    .unbilledbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000a3;
    }

    .overduebtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000a3;
    }

    .openbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000a3;
    }

    .paidbtn.clicked {
        top: -2px;
        box-shadow: 0 7px #000000a3;
    }

    .scrollable-offcanvas {
        /* max-height: 80vh;*/ /* Adjust the maximum height as needed */
        overflow-y: auto;
    }

    .tabulator .tabulator-footer .tabulator-paginator .tabulator-page:hover {
        background-color: deepskyblue;
    }

    .tabulator .tabulator-footer {
        background-color: #fff;
        color: black;
    }

        .tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {
            background: white !important;
        }


    .offcanvas {
        /* Add position relative to its parent */
        display: flex;
        flex-direction: column;
        height: 100vh; /* Ensure offcanvas takes full viewport height */
    }

    .offcanvas-footer {
        margin-top: auto; /* Push footer to the bottom */
        width: 100%; /* Occupy full width */
    }

    .modal-footer {
        width: 100%; /* Ensure buttons occupy full width */
        padding: 10px; /* Add padding for better appearance */
    }

    .w-15 {
        width: fit-content !important;
    }

    .tabulator-row:nth-child(even) {
        background-color: white;
    }

    .separator {
        display: flex;
        align-items: center;
        text-align: center;
        color: #999;
        font-size: 12px;
    }

        .separator::before,
        .separator::after {
            content: '';
            flex: 1;
            border-bottom: 1px solid #999;
        }

        .separator:not(:empty)::before {
            margin-right: .25em;
        }

        .separator:not(:empty)::after {
            margin-left: .25em;
        }

    .tabulator-row.tabulator-selected {
        background-color: #9abcea !important;
    }

    .rating {
        display: flex;
        flex-direction: row-reverse;
        justify-content: center;
        align-items: center;
    }

        .rating input {
            display: none;
        }

        .rating label {
            cursor: pointer;
            padding: 5px;
            font-size: 24px;
        }

            .rating label:before {
                content: '\2605'; /* Unicode star character */
            }

        .rating input:checked ~ label:before {
            color: gold; /* Change color of selected stars */
        }

    .child-table-hidden {
        display: none;
    }

    .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {
        background: #fff !important;
    }

    .tabulator .tabulator-footer {
        border-top: 1px solid #fff;
    }

    #file-drop-area {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
    }

    #image-uploadify {
        display: none;
    }

    .footerButton {
        margin-top: 40px;
    }

    .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {
        border-right: 2px solid #dee2e6;
    }

    .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {
        border-left: 2px solid #f8f9fa;
    }

    .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {
        border-left: 2px solid #f8f9fa;
    }

    /* Custom styles for the select2 element with id supplierID */
    #supplierID + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #supplierID + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #supplierID + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id supplierIDbblc */
    #supplierIDbblc + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #supplierIDbblc + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #supplierIDbblc + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }


    /* Custom styles for the select2 element with id concernbblc */
    #concernbblc + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #concernbblc + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #concernbblc + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id THead */
    #THead + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #THead + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #THead + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id supplierIDrlc */
    #supplierIDrlc + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #supplierIDrlc + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #supplierIDrlc + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id concernrlc */
    #concernrlc + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #concernrlc + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #concernrlc + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id THead1 */
    #THead1 + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #THead1 + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #THead1 + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id itemgrpname1 */
    #itemgrpname1 + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #itemgrpname1 + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #itemgrpname1 + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id supplierci */
    #supplierci + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #supplierci + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #supplierci + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id THead2 */
    #THead2 + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #THead2 + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #THead2 + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id supplierDA */
    #supplierDA + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #supplierDA + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #supplierDA + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    /* Custom styles for the select2 element with id supplierWO */
    #supplierWO + .select2-container .select2-selection--single {
        height: 37px !important;
        line-height: 36px !important;
    }

    #supplierWO + .select2-container .select2-selection__rendered {
        line-height: 36px !important;
    }

    #supplierWO + .select2-container .select2-selection__arrow {
        height: 36px !important;
    }

    .custom-grid {
        display: grid;
        grid-template-columns: repeat(3, 180px);
        background-color: white;
            
    } 

</style>
@*expenses tag and navs starts*@
<div class="col-lg-2">
    <p class="fs-4 fw-bold">IMPORT</p>
</div>
<ul class="nav nav-tabs mt-5">

    <li class="nav-item">
        @{
            var AllChildMenu = HttpContextAccessor.HttpContext.Session.GetObject<List<UserMenuPermissionViewModel>>("UserChildMenu");

            var filterparentmenu = AllChildMenu.Where(x => x.ControllerName == "Variable" && x.ActionName == "Import" && x.IsView == true).ToList();
            var i = 0;
            foreach (var childitem in filterparentmenu)
            {

                if (childitem.FirstParameter != null)
                {

                    if (i == 0)
                    {
                        <li class="nav-item">
                            <a class="nav-link  fw-semibold active" href="#" id=@childitem.FirstValue>@childitem.MenuName</a>
                        </li>

                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link  fw-semibold" href="#" id=@childitem.FirstValue>@childitem.MenuName</a>
                        </li>

                    }


                }

                i++;
            }
        }

    </li>
    @* <li class="nav-item">
        <a class="nav-link  fw-semibold active" href="#" id="proformaInvoice">PROFORMA INVOICE</a>
    </li>
    <li class="nav-item">
        <a class="nav-link  fw-semibold" href="#" id="bblc">BACK TO BACK LC</a>
    </li>
    <li class="nav-item">
        <a class="nav-link  fw-semibold" href="#" id="rlc">REGULAR LC</a>
    </li>
    <li class="nav-item">
        <a class="nav-link  fw-semibold" href="#" id="importInvoiceCi">COM. INVOICE CI</a>
    </li>
    <li class="nav-item">
        <a class="nav-link  fw-semibold" href="#" id="documentAcceptance">DOCUMENT ACCEPTANCE</a>
    </li>
    <li class="nav-item">
        <a class="nav-link  fw-semibold" href="#" id="workOrder">WORK ORDER</a>
    </li> *@
</ul>
@*expenses tag and navs ends*@


@*-------------proforma invoice all html tags starts--------------*@
<div id="ProformaView" @*class="d-none"*@>
    @*suppliers tag and buttons starts*@
    <div id="PortOFLoadingDiv" class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-3">
            <p class="fs-4 fw-bold">PROFORMA INVOICE</p>
        </div>
        <div class="col-lg">
            <div class="float-end">
                <button class="btn btn-success fw-bold ms-3 h-100 radius-30" type="button" tabindex="-1" data-bs-toggle="offcanvas" data-bs-target="#POLOffcanvas">
                    New
                </button>
            </div>
            @*offcanvas for add colors starts*@
            <div class="offcanvas offcanvas-end  w-50" id="POLOffcanvas" data-bs-backdrop="false">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title">Add New</h5>
                    <button onclick="clearOffCanvasPOL()" id="offcanvasCloseBtn" type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <input type="hidden" id="POLId" name="Id" value="" />
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">PI No.</label>
                            <input id="pino" class="form-control" />
                            <span class="text-danger" id="pinoValidation"></span>
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">Rev No.</label>
                            <input id="revno" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">PI Date</label>
                            <input id="pidate" class="form-control" />
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">PI Receiving Date</label>
                            <input id="pireceivingdate" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">Concern</label>
                            <select id="concern" class="form-control select2">
                                <option value="">Select Concern</option>
                            </select>
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">Currency</label>
                            <select id="currency" class="form-control select2">
                                <option value="">Select Currency</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg-8">
                            <label class="fw-bold">Supplier</label>
                            <select id="supplier" class="form-control select2">
                                <option value="">Select Supplier</option>
                            </select>
                        </div>
                        <div class="col-lg-4">
                            <label class="fw-bold">Import PO No.</label>
                            <input id="importno" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">File No.</label>
                            <input id="fileno" class="form-control" />
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">LCAF</label>
                            <input id="lcaf" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">Employee</label>
                            <select id="employeeid" class="form-control select2">
                                <option value="">Select Employee</option>
                            </select>
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">HSCode</label>
                            <input id="hscode" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-l-4">
                            <label class="fw-bold">Concern Bank Account</label>
                            <select id="concernbankAccount" class="form-control select2">
                                <option value="">Select Concern Bank Account</option>
                            </select>
                        </div>
                        <div class="col-lg-4">
                            <label class="fw-bold">Concern Bank</label>
                            <select id="concernbank" class="form-control select2">
                                <option value="">Select Concern Bank</option>
                            </select>
                        </div>
                        <div class="col-lg-4">
                            <label class="fw-bold">Suppiler Bank Account </label>
                            <select id="supplierbankaccount" class="form-control select2">
                                <option value="">Select Bank No</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg-8">
                            <label class="fw-bold">Item Group Name </label>
                            <select id="itemgrpname" class="form-control select2">
                                <option value="">Select Item Group</option>
                            </select>
                        </div>
                        <div class="col-lg-4 d-none">
                            <label class="fw-bold">PI Type </label>
                            <select id="pitype" class="form-control select2">
                                <option value="">Select PI</option>
                            </select>
                        </div>
                        <div class="col-md-4 col-4">
                            <label class="fw-bold">PINature </label>
                            <select id="PINature" class="form-control select2">
                                <option value="">Select Day</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg-9">
                            <label class="fw-bold">Item Description </label>
                            <select multiple="multiple" id="itemdesc" class="form-control select2">
                            </select>
                        </div>
                        <div class="col-lg-3">
                            <label class="fw-bold">Size</label>
                            <input id="size" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">Group LC </label>
                            <input type="text" placeholder="Search Group LC" name="Search" id="SearchGroupLC" class="form-control">
                            <div id="suggestion-box"></div>
                            <input type="text" placeholder="Search Product" name="Search" id="grouplc" class="form-control" hidden>
                           @*  <select id="grouplc" class="form-control select2">
                            </select> *@
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">Merchandiser</label>
                            <input id="merchandiser" class="form-control" />
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">Remarks</label>
                            <input id="remarks" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">Primary Unit</label>
                            <select id="unit" class="form-control select2">
                                <option value="">Select Unit</option>
                            </select>
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">Qty</label>
                            <input id="qty" class="form-control" />
                        </div>
                        
                        <div class="col-lg">
                            <label class="fw-bold">Import Rate</label>
                            <input id="importrate" class="form-control" />
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">Total Value</label>
                            <input id="totalvalue" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-3 col-3">
                            <label class="fw-bold">Secondary Unit</label>
                            <select id="Secondaryunit" class="form-control select2">
                                <option value="">Select Unit</option>
                            </select>
                        </div>
                        <div class="col-md-3 col-3">
                            <label class="fw-bold">Carton/Roll Qty.</label>
                            <input id="rollqty" class="form-control" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-5 col-4">
                            <label class="fw-bold">Payment Terms </label>
                            <select id="paymentterms" class="form-control select2">
                                <option value="">Select Payment Terms</option>
                            </select>
                        </div>
                        <div class="col-md-5 col-4">
                            <label class="fw-bold">Day </label>
                            <select id="day" class="form-control select2">
                                <option value="">Select Day</option>
                            </select>
                        </div>
                        
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg">
                            <label class="fw-bold">Country Of Origin</label>
                            <select id="countryoforigin" class="form-control select2">
                                <option value="">Select Country of Origin</option>
                            </select>
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">Port Of Loading </label>
                            <select id="portofloading" class="form-control select2">
                                <option value="">Select Port of Loading</option>
                            </select>
                        </div>
                        <div class="col-lg">
                            <label class="fw-bold">Port Of Destination</label>
                            <select id="portofdestination" class="form-control select2">
                                <option value="">Select Port of Destination</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="offcanvas-footer">
                    <div class="modal-footer my-2">
                        <button id="closePOLffcanvasBtn" type="submit" class="btn float-lg-end px-5 py-2 text-white fw-bolder" style="background: #949494; margin-right: 15px;">Cancel</button>
                        <button id="SavePOLBtn" type="submit" class="btn float-lg-end px-5 py-2 text-white fw-bolder" style="background: #2ca01c;margin-right: 15px;">Save</button>
                    </div>
                </div>
            </div>

            @*offcanvas for add por of discharge ends*@
        </div>

    </div>
    @*suppliers tag and buttons ends*@

    <div class="row">
     <div class="col-lg">
     <label class="form-label fw-bold">Supplier</label>
       <select id="supplierID" class="form-control select2">
         <option value="">Select Supplier</option>
       </select>
     </div>
 
    <div class="col-lg">
        <label class="form-label fw-bold">From Date</label>
        <input id="fromDate" class="form-control" />
    </div>
    <div class="col-lg">
        <label class="form-label fw-bold">To Date</label>
        <input id="toDate" class="form-control" />
    </div>
    </div>

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex mt-3">
                @* <input type="text" class="textbox search_box ms-3 mt-3" id="searchInputProforma" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d;height: 40px; border-radius: 25px;padding-left: 15px;" /> *@
            </div>
        </div>

        <div>
        </div>

        <div>
            <a href="#" id="print-table-pol" class="text-decoration-none text-black me-1">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-xlsx-pol" class="text-decoration-none text-black me-1">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown1" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="POLColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="POLRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                         <div class=" p-4">
                             <button id="saveProforma" class="btn btn-success">Save Filter</button>
                         </div> 

                         <div style=" padding-top: 24px; ">
                                <button class="btn btn-danger btn-sm" onclick="DeleteFilter1('Proforma_Invoice')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>

    </div>

    @*gear icon and other two buttons ends*@
    @*suppliers tabulators starts*@
    <div id="supplierTaableContainer" class="mt-4">
        <div id="PortOFLoadingTable" style="min-height:100%"></div>
    </div>
    @*suppliers tabulators ends*@
</div>



@*-------------bblc invoice all html tags starts--------------*@
<div id="BBLCView" class="d-none">
    <div id="PortOFLoadingDiv" class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-3">
            <p class="fs-4 fw-bold">BACK TO BACK LC</p>
        </div>
        <div class="col-lg">
            <div class="float-end">
               <a asp-controller="Variable" asp-action="AddBackToBackLC" class="btn btn-success fw-bold ms-3 h-100 radius-30" target="_blank">
                 New
               </a>
            </div>
        </div>

    </div>
    <div class="row">
         <div class="col-lg">
     <label class="form-label fw-bold">Supplier</label>
            <select id="supplierIDbblc" class="form-control select2">
         <option value="">Select Supplier</option>
     </select>
 </div>
         <div class="col-lg">
     <label class="form-label fw-bold">Concern</label>
     <select id="concernbblc" class="form-control select2">
         <option value="">Select Concern</option>
     </select>
 </div>
 
    <div class="col-lg">
        <label class="form-label fw-bold">From Date</label>
        <input id="fromDatebblc" class="form-control" />
    </div>
    <div class="col-lg">
        <label class="form-label fw-bold">To Date</label>
        <input id="toDatebblc" class="form-control" />
    </div>
    </div>

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex mt-3">
                @* <input type="text" class="textbox search_box ms-3 mt-3" id="searchInputBBLC" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d;height: 40px; border-radius: 25px;padding-left: 15px;" /> *@

               <div class="mb-2" style=" width: 305px; ">
                <label class="form-label fw-semibold">
                    User List
                </label>
                <select class="form-select select2me thead select2" id="THead"
                        aria-label="Floating label select example">
                </select>

               </div>
               
            
            </div>
        </div>

        <div class="mt-5">
            <button class="btn btn-primary  radius-30" type="button" onclick="ReportPrint('PrintBBLCReport')" >
                <i class="fa fa-floppy-o "></i><span style=" padding-right: 8px; ">Reports</span>
            </button>
        </div>
        
        <div>

            <label class="ps-1"><input type="radio" name="RptType3" value="PDF" checked="checked" /> PDF  </label>
            <label class="ps-1"><input type="radio" name="RptType3" value="EXCEL" /> EXCEL  </label>
            <label class="ps-1" style=" padding-right: 50px; "><input type="radio" name="RptType3" value="WORD" /> WORD  </label>

            <a href="#" id="print-table-bblc" class="text-decoration-none text-black me-1">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-xlsx-bblc" class="text-decoration-none text-black me-1">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown2" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="BBLCColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="BBLCRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                        <div class=" p-4">
                             <button id="saveBBLC" class="btn btn-success">Save Filter</button>
                        </div> 

                         <div style=" padding-top: 24px; ">
                                <button class="btn btn-danger btn-sm" onclick="DeleteFilter2('BBLC')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>

    </div>

    @*gear icon and other two buttons ends*@
    @*suppliers tabulators starts*@
    <div id="supplierTaableContainer" class="mt-4">
        <div id="bblcTable" style="min-height:100%"></div>
    </div>
    @*suppliers tabulators ends*@
</div>

@*-------------rlc invoice all html tags starts--------------*@
<div id="RLCView" class="d-none">
    <div id="PortOFLoadingDiv" class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-3">
            <p class="fs-4 fw-bold">Regular LC</p>
        </div>
        <div class="col-lg">
            <div class="float-end">
                <a asp-controller="Variable" asp-action="AddRegularLC" class="btn btn-success fw-bold ms-3 h-100 radius-30" target="_blank">
                    New
                </a>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-lg">
            <label class="form-label fw-bold">Supplier</label>
            <select id="supplierIDrlc" class="form-control select2">
                <option value="">Select Supplier</option>
            </select>
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">Concern</label>
            <select id="concernrlc" class="form-control select2">
                <option value="">Select Concern</option>
            </select>
        </div>

        <div class="col-lg">
            <label class="form-label fw-bold">From Date</label>
            <input id="fromDaterlc" class="form-control" />
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">To Date</label>
            <input id="toDaterlc" class="form-control" />
        </div>
    </div>

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div class="row">
            <div class="col-lg">             
                <div class="mb-2" style=" width: 305px; ">
                    <label class="form-label fw-semibold">
                        User List
                    </label>
                    <select class="form-select select2me thead select2" id="THead1"
                            aria-label="Floating label select example">
                    </select>

                </div>
            
            </div>
        

        <div class="col-lg">
            <div class="mb-2" style=" width: 305px; ">
                <label class="form-label fw-semibold">
                    LC Type
                </label>
                    <select id="itemgrpname1" class="form-control select2">
                    <option value="">Select LC Type</option>
                </select>

            </div>

        </div>
        </div>

        <div class="mt-5">
            <button class="btn btn-primary  radius-30" type="button" onclick="ReportPrintRlc('PrintRegularLCReport')">
                <i class="fa fa-floppy-o "></i><span style=" padding-right: 8px; ">Reports</span>
            </button>
        </div>
                      
        <div>

            <label class="ps-1"><input type="radio" name="RptType1" value="PDF" checked="checked" /> PDF  </label>
            <label class="ps-1"><input type="radio" name="RptType1" value="EXCEL" /> EXCEL  </label>
            <label class="ps-1" style=" padding-right: 50px; "><input type="radio" name="RptType1" value="WORD" /> WORD  </label>

            <a href="#" id="print-table-rlc" class="text-decoration-none text-black me-1">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-xlsx-rlc" class="text-decoration-none text-black me-1">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown3" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="RLCColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="RLCRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                        <div class=" p-4">
                             <button id="saveRLC" class="btn btn-success">Save Filter</button>
                        </div> 

                         <div style=" padding-top: 24px; ">
                                <button class="btn btn-danger btn-sm" onclick="DeleteFilter3('RLC')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>

    </div>

    @*gear icon and other two buttons ends*@
    @*suppliers tabulators starts*@
    <div id="supplierTaableContainer" class="mt-4">
        <div id="rlcTable" style="min-height:100%"></div>
    </div>
    @*suppliers tabulators ends*@
</div>

@*-------------import commercial invoice invoice all html tags starts--------------*@
<div id="CommercialInvoiceView" class="d-none">
    <div id="PortOFLoadingDiv" class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-4">
            <p class="fs-4 fw-bold">COMMERCIAL INVOICE CI</p>
        </div>
        <div class="col-lg">
            <div class="float-end">
                <a asp-controller="Variable" asp-action="AddCommercialInvoice" class="btn btn-success fw-bold ms-3 h-100 radius-30" target="_blank">
                    New
                </a>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-lg">
            <label class="form-label fw-bold">Supplier</label>
            <select id="supplierci" class="form-control select2">
                <option value="">Select Supplier</option>
            </select>
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">User List</label>
            <select id="THead2" class="form-control select2">
                <option value="">Select User</option>
            </select>
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">From Date</label>
            <input id="fromDateci" class="form-control" />
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">To Date</label>
            <input id="toDateci" class="form-control" />
        </div>
    </div>

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex mt-3">
                <label class="ps-1"><input type="radio" name="LoadType" value="cidate" checked="checked" />  Com. Inv. Date Wise </label>
                <label class="ps-1"><input type="radio" name="LoadType" value="bldate" />  BL Date Wise </label>

            </div>
        </div>
       
        
        <div>

            <label class="ps-1"><input type="radio" name="RptType2" value="PDF" checked="checked" /> PDF  </label>
            <label class="ps-1"><input type="radio" name="RptType2" value="EXCEL" /> EXCEL  </label>
            <label class="ps-1" style=" padding-right: 50px; "><input type="radio" name="RptType2" value="WORD" /> WORD  </label>

            <a href="#" id="print-table-ci" class="text-decoration-none text-black me-1">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-xlsx-ci" class="text-decoration-none text-black me-1">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown4" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="ciColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="ciRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                        <div class=" p-4">
                             <button id="saveCI" class="btn btn-success">Save Filter</button>
                        </div>

                         <div style=" padding-top: 24px; ">
                              <button class="btn btn-danger btn-sm" onclick="DeleteFilter4('Commercial_Invoice')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>

    </div>

    @*gear icon and other two buttons ends*@
    @*suppliers tabulators starts*@
    <div id="supplierTaableContainer" class="mt-4">
        <div id="ciTable" style="min-height:100%"></div>
    </div>
    @*suppliers tabulators ends*@
</div>




@*-------------document acceptance all html tags starts--------------*@
<div id="DocumentAcceptanceView" class="d-none">
    <div id="PortOFLoadingDiv" class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-4">
            <p class="fs-4 fw-bold">DOCUMENT ACCEPTANCE</p>
        </div>
        <div class="col-lg">
            <div class="float-end">
                <a asp-controller="Variable" asp-action="AddDocumentAcceptance" class="btn btn-success fw-bold ms-3 h-100 radius-30" target="_blank">
                    New
                </a>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-lg">
            <label class="form-label fw-bold">Supplier</label>
            <select id="supplierDA" class="form-control select2">
                <option value="">Select Supplier</option>
            </select>
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">From Date</label>
            <input id="fromDateDA" class="form-control" />
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">To Date</label>
            <input id="toDateDA" class="form-control" />
        </div>
    </div>

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex mt-3">
                @* <input type="text" class="textbox search_box ms-3 mt-3" id="searchInputDI" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d;height: 40px; border-radius: 25px;padding-left: 15px;" /> *@
            </div>
        </div>

        <div class="mt-5">
        </div>
        <div class="mt-4">
        </div>       
        <div>
            <a href="#" id="print-table-di" class="text-decoration-none text-black me-1">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-xlsx-di" class="text-decoration-none text-black me-1">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown5" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="diColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="diRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                        <div class=" p-4">
                             <button id="saveDA" class="btn btn-success">Save Filter</button>
                        </div>

                         <div style=" padding-top: 24px; ">
                              <button class="btn btn-danger btn-sm" onclick="DeleteFilter5('Doc_Acceptance')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>

    </div>

    @*gear icon and other two buttons ends*@
    @*suppliers tabulators starts*@
    <div id="supplierTaableContainer" class="mt-4">
        <div id="DATable" style="min-height:100%"></div>
    </div>
    @*suppliers tabulators ends*@
</div>



@*-------------work order all html tags starts--------------*@
<div id="WorkOrderView" class="d-none">
    <div id="PortOFLoadingDiv" class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-2">
            <p class="fs-4 fw-bold">WORK ORDER</p>
        </div>
        <div class="col-lg">
            <div class="float-end">
                <a asp-controller="Variable" asp-action="AddWorkOrder" class="btn btn-success fw-bold ms-3 h-100 radius-30" target="_blank">
                    New
                </a>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-lg">
            <label class="form-label fw-bold">Supplier</label>
            <select id="supplierWO" class="form-control select2">
                <option value="">Select Supplier</option>
            </select>
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">From Date</label>
            <input id="fromDateWO" class="form-control" />
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">To Date</label>
            <input id="toDateWO" class="form-control" />
        </div>
    </div>

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex mt-3">
                @* <input type="text" class="textbox search_box ms-3 mt-3" id="searchInputDI" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d;height: 40px; border-radius: 25px;padding-left: 15px;" /> *@
            </div>
        </div>

        <div class="mt-5">
        </div>
        <div class="mt-4">
        </div>
        <div>
            <a href="#" id="print-table-WorkOrder" class="text-decoration-none text-black me-1">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-xlsx-WorkOrder" class="text-decoration-none text-black me-1">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown6" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="WorkOrderColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="d-flex">
                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="WorkOrderRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>

                        <div class=" p-4">
                             <button id="saveWO" class="btn btn-success">Save Filter</button>
                        </div>

                         <div style=" padding-top: 24px; ">
                              <button class="btn btn-danger btn-sm" onclick="DeleteFilter6('Work_Order')">Remove Filter</button>
                         </div> 
                        </div>

                    </div>
                </div>


            </div>

        </div>

    </div>

    @*gear icon and other two buttons ends*@
    @*suppliers tabulators starts*@
    <div id="supplierTaableContainer" class="mt-4">
        <div id="WorkOrderTable" style="min-height:100%"></div>
    </div>
    @*suppliers tabulators ends*@
</div>



@*-------------import document all html tags starts--------------*@
<div id="ImportDocumentView" class="d-none">
    <div id="ImportDocDiv" class="row py-3" style="background: #e9ecef6b;">
        <div class="col-lg-4">
            <p class="fs-4 fw-bold">Import Document</p>
        </div>
        <div class="col-lg">
            <div class="float-end">
                <a asp-controller="Variable" asp-action="AddImportDocument" class="btn btn-success fw-bold ms-3 h-100 radius-30" target="_blank">
                    New
                </a>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-lg">
            <label class="form-label fw-bold">Commercial Company</label>
            <select id="CommercialCompanyId" class="form-control select2">
                <option value="">Select Company</option>
            </select>
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">From Date</label>
            <input id="fromDateID" class="form-control" />
        </div>
        <div class="col-lg">
            <label class="form-label fw-bold">To Date</label>
            <input id="toDateID" class="form-control" />
        </div>
    </div>

    @*gear icon and other two buttons starts*@
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex mt-3">
                @* <input type="text" class="textbox search_box ms-3 mt-3" id="searchInputDI" name="keywords" autocomplete="off" placeholder="Search" style="width: 350px; border: 1px solid #8080807d;height: 40px; border-radius: 25px;padding-left: 15px;" /> *@
            </div>
        </div>

        <div class="mt-5">
        </div>
        <div class="mt-4">
        </div>
        <div>
            <a href="#" id="print-table-ImportDoc" class="text-decoration-none text-black me-1">
                <i class="bi bi-printer fs-5"></i>
            </a>
            <a href="#" id="download-xlsx-ImportDoc" class="text-decoration-none text-black me-1">
                <i class="bi bi-file-earmark-excel fs-5"></i>
            </a>
            <div title="Settings" class="dropdown1 mt-3 custom-grid" style="display:inline-block;">
                <a href="#" class="text-decoration-none text-black me-1" id="dropdownMenuButton1" data-bs-toggle="dropdown"
                   aria-expanded="false">
                    <i class="bi bi-gear fs-5"></i>
                </a>
                <div class="dropdown-menu gear-dropdown7" aria-labelledby="dropdownMenuButton-expense">
                    <div class="row p-4 main-dropdown-size" style="overflow:hidden;">
                        <div class="col">
                            <span class="fw-bold ms-3">Columns</span>
                            <hr class="m-0 w-75 ms-3 w-sm-50 " />
                            <ul class="list-unstyled">
                                <li>
                                    <div id="ImportDocColumnList" class="custom-grid">
                                    </div>
                                </li>
                            </ul>

                        </div>

                        <div class="ms-3">
                            <label>Rows</label> <br />
                            <select name="rows" id="ImportDocumentRows" class="cursor-pointer" style="padding: 10px 0 10px 5px; width: 70px;">
                                <option value="0" disabled selected>Rows</option>
                                <option value="5" selected>5</option>
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                                <option value="1000">1000</option>
                            </select>
                        </div>
                    </div>
                </div>


            </div>

        </div>

    </div>

    <div id="supplierTaableContainer" class="mt-4">
        <div id="ImportDocumentTable" style="min-height:100%"></div>
    </div>
</div>


@section scripts{
    <script src="~/admin_theme_gtr/assets/js/dateRangeMultipleFunctionForAccountsVoucherReport.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>    
    <script type="text/javascript">

        var pageSize = 10;
        $(document).ready(function () {
            PIGear();
            bblcGear();
            RlcGear();
            CIGear();
            DAGear();
            WOGear();            
        });

        var ProformaFields = [
                    { title: "PI NO", field: "PINo", hozAlign: "left", frozen: true, headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },                                      
                    { title: "LC Type", field: "LCType", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "LC NO", field: "LCNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    //{ title: "GroupLCAmdNo", field: "GroupLCAmdNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Group LC Ref", field: "GroupLCRefName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },                   
                    { title: "Company Name", field: "CompanyName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "PI Date", field: "PIDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Currency", field: "CurrencyShortName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Supplier Name", field: "SupplierName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Import No", field: "ImportPONo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "File No", field: "FileNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Lcaf", field: "LCAF", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Item Group Name", field: "ItemGroupName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    //{ title: "ITEM DESC NAME", field: "ItemDescName", width: 140, hozAlign: "center", headerHozAlign: "center", visible: true },
                    { title: "Import Qty", field: "ImportQty", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Unit Master", field: "UnitName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Import Rate", field: "ImportRate", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Total Value", field: "TotalValue", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    {
                        title: "Actions", field: "polAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `editPOLs(${data.Id})`;
                            var inActive = `setInactiveUrlOfPOLs(${data.Id}) `

                            var deleteHtml = `
                      <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                      <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                      </a>
                      `;


                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = deleteHtml;

                            var html = `
                      <div class='dropdown ms-1'>
                      <a onclick='${Edit}' class='fw-bolder mt-2'>View/Edit</a>
                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                          ${statusDependentHtml}

                      </ul>
                      </div>
                      `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },

                ]

        var bblcFields = [
                    { title: "BBLC NO", field: "BBLCNo", hozAlign: "left", frozen: true, headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "LC Type", field: "ItemGroupName1", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "BBLC Amend No", field: "BBLCAmdNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "PI No", field: "bblcPINo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Company Name", field: "bblcCompanyName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Supplier Name", field: "SupplierName1", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "GroupLC Ref Name", field: "GroupLCRefName1", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "BBLC Qty", field: "BBLCQty", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "BBLC Value", field: "BBLCValue", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "LC Opening Date", field: "LcOpeningDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                       formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2); 

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    { title: "Currency", field: "CurrencyName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Destination", field: "DestinationName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Port Of Loading", field: "PortOfLoadingName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Ship Mode", field: "ShipModeName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Tenor", field: "Tenor", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Payment Terms", field: "PaymentTermsName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Expiry Date", field: "ExpiryDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                       formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2); 

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    { title: "First Shipment Date", field: "FirstShipmentDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                       formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2); 

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    { title: "Last Shipment Date", field: "LastShipmentDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                       formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2); 

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    { title: "Convert Rate", field: "ConvertRate", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Balance", field: "Balance", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Insurance", field: "Insurance", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "UDNo", field: "UDNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "UD Date", field: "UDDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                       formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2); 

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    { title: "UD Amend No", field: "AmdNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    {
                        title: "Actions", field: "bblcAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `@Url.Action("UpdateBackToBackLC","Variable")?backtobacklcid=`+data.Id;
                            var inActive = `InactiveBBLC(${data.Id}) `

                            var deleteHtml = `
              <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
              <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
              </a>
              `;


                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = deleteHtml;

                            var html = `
              <div class='dropdown ms-1'>
              <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
              <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                  ${statusDependentHtml}

              </ul>
              </div>
              `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },

        ]


        var RlcFields = [
                    { title: "RLC NO", field: "BBLCNo", hozAlign: "left", frozen: true, headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "LC Type", field: "ItemGroupName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "RLC AMEND NO", field: "BBLCAmdNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "PI NO", field: "bblcPINo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "COMPANY NAME", field: "bblcCompanyName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "SUPPLIER NAME", field: "SupplierName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    //{ title: "GroupLC Ref Name", field: "GroupLCRefName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "RLC Qty", field: "BBLCQty", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "RLC Value", field: "BBLCValue", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    {
                        title: "LC Opening Date", field: "LcOpeningDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                        formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2);

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    { title: "Currency", field: "CurrencyName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Destination", field: "DestinationName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Port Of Loading", field: "PortOfLoadingName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Ship Mode", field: "ShipModeName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Tenor", field: "Tenor", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Payment Terms", field: "PaymentTermsName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    {
                        title: "Expiry Date", field: "ExpiryDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                        formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2);

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    {
                        title: "First Shipment Date", field: "FirstShipmentDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                        formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2);

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    {
                        title: "Last Shipment Date", field: "LastShipmentDate", hozAlign: "left", headerHozAlign: "center", visible: true,
                        formatter: function (cell, formatterParams, onRendered) {
                            var date = new Date(cell.getValue());
                            var day = date.getDate();
                            var monthNames = [
                                "Jan", "Feb", "Mar",
                                "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep",
                                "Oct", "Nov", "Dec"
                            ];
                            var monthIndex = date.getMonth();
                            var year = date.getFullYear().toString().substr(-2);

                            return day + '-' + monthNames[monthIndex] + '-' + year;
                        },
                    },
                    { title: "Convert Rate", field: "ConvertRate", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Balance", field: "Balance", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Insurance", field: "Insurance", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    {
                        title: "ACTIONS", field: "rlcAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `@Url.Action("EditRegularLC", "Variable")?Id=` + data.Id;
                            var inActive = `InactiveRLC(${data.Id}) `

                            var deleteHtml = `
                      <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                      <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                      </a>
                      `;

                            var statusDependentHtml = deleteHtml;

                            var html = `
                      <div class='dropdown ms-1'>
                      <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                          ${statusDependentHtml}

                      </ul>
                      </div>
                      `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            cell.getElement().classList.add('active-cell');
                        },
                    },

        ]


        var CIFields = [
                    { title: "Com. Invoice No", field: "CommercialInvoiceNo", hozAlign: "left", frozen: true, headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Com. Invoice Date", field: "CommercialInvoiceDate", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "LC Type", field: "CommercialLCTypeShortName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "BBLC No", field: "BBLCNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Company Name", field: "CompanyName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Supplier Name", field: "SupplierName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Currency", field: "CurrencyShortName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Quantity", field: "Quantity", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Unit", field: "UnitShortName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Total Value", field: "TotalValue", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Item Group Name", field: "ItemGroupName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Item Des.", field: "ItemDescName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "BL No", field: "BLNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "BL Date", field: "BLDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Document Status", field: "DocumentStatusShortName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Mother Vessel", field: "MotherVassel", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Vessel Eta Date", field: "VasselETADate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Bill Of Entry No", field: "BillOfEntryNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Bill Of Entry Date", field: "BillOfEntryDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Good In House Date", field: "GoodsInhouseDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    {
                        title: "Actions", field: "ciAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `@Url.Action("UpdateCommercialInvoice", "Variable")?commercialInvoiceId=` + data.Id;
                            var cireport = `@Url.Action("PrintComInvoice", "Variable")?id=${data.Id}&type=pdf`;

                            var inActive = `InactiveCI(${data.Id}) `

                            var deleteHtml = `
                          <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                          <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                          </a>
                          `;

                            var reportHtml;

                            reportHtml = `
                                <a href='${cireport}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                    <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                                </a>
                                <div class='dropdown-divider m-0'></div>`;

                            
                           //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = reportHtml + deleteHtml;

                            var html = `
                      <div class='dropdown ms-1'>
                      <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                          ${statusDependentHtml}

                      </ul>
                      </div>
                      `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },

                ]


        var DAFields = [
                    { title: "DA NO", field: "BillOfExchangeRef", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Bill Date", field: "BillDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Supplier", field: "SupplierName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "BBLC No", field: "BBLCNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Payable Amount", field: "TotalBBLCAmount", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    {
                        title: "Actions", field: "DAAction", headerHozAlign: "center", headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `@Url.Action("UpdateDocumentAcceptance", "Variable")?DocumentAcceptanceid=` + data.Id;
                            var inActive = `InactiveDA(${data.Id}) `

                            var deleteHtml = `
                              <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                              <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                              </a>
                              `;


                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = deleteHtml;

                            var html = `
                              <div class='dropdown ms-1'>
                              <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                              <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                              <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                  ${statusDependentHtml}

                              </ul>
                              </div>
                              `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },

                ]


        var WOFields = [
                    { title: "CONCERN", field: "woconcrn", hozAlign: "left", headerHozAlign: "center", frozen: true, visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Status", field: "woWorkorderStatus", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Work Order No.", field: "woWorkOrderNo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Work Order Date", field: "woWorkOrderDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Supplier", field: "woSupplierName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "To Person", field: "woToPerson", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Agreement Date", field: "woAgreementDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Delivary Date", field: "woDeliveryDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Service Start", field: "woServiceContractStartDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Service End", field: "woServiceContractEndDate", hozAlign: "left", headerHozAlign: "center", visible: true },
                    { title: "Currency", field: "woCountryShortName", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Conv. Rate", field: "woConversionRate", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Work Order Type", field: "woWorkOrderType", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Subject", field: "woSubject", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Pay Terms", field: "woPaymentTerms", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Other Terms", field: "woOtherTerms", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Work Order Qty", field: "woWorkOrderQty", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Work Order Rate", field: "woWorkOrderRate", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Total Amount", field: "woSubTotal", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Sales Tax", field: "woSalesTax", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Other Exp", field: "woOtherExp", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Work Order Amt", field: "woWorkOrderAmt", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Advance Pay", field: "woAdvancePayment", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Net Payable", field: "woTotal", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Remarks", field: "Remarks", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "IsLocked", field: "IsLocked", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "WO Details", field: "WODetails", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Ship To", field: "woShipTo", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Shipping", field: "woShipping", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Total", field: "Total", hozAlign: "right", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },

                    {
                        title: "Actions", field: "WOAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `@Url.Action("UpdateWorkOrder", "Variable")?WorkOrderId=` + data.Id;
                            var Woreport = `@Url.Action("PrintWorkOrder", "Variable")?id=${data.Id}&type=pdf`;

                            var inActive = `InactiveWO(${data.Id}) `

                            var deleteHtml = `
                                      <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                                      <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                      </a>
                                      `;

                            var reportHtml;

                            reportHtml = `
                              <a href='${Woreport}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                         <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                              </a>
                             <div class='dropdown-divider m-0'></div>`;



                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = reportHtml + deleteHtml;

                            var html = `
                                      <div class='dropdown ms-1'>
                                      <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                          ${statusDependentHtml}

                                      </ul>
                                      </div>
                                      `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },

        ]


        var globalFieldsImport = [
                    { title: "Document No", field: "CICode", hozAlign: "left", headerHozAlign: "center", frozen: true, visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Date", field: "CIDate", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Port Of Loading", field: "PortOfLoadingId", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    { title: "Port of Discharge", field: "PortOfDischargeId", hozAlign: "left", headerHozAlign: "center", visible: true, headerFilter: "input", headerFilterLiveFilter: false },
                    {
                        title: "Actions", field: "IDAction", headerHozAlign: "center", frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            var Edit = `@Url.Action("UpdateImportDocument", "Variable")?Id=` + data.Id;
                            var inActive = `InactiveID(${data.Id}) `;
                            var deleteHtml = `<a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'><i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br /></a>`;
                            var reportHtml = `<a href='${Edit}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'><i class='bi bi-pencil-square pe-1'></i> <span>Edit</span><br /></a><div class='dropdown-divider m-0'></div>`;
                            var statusDependentHtml = reportHtml + deleteHtml;
                            var html = `<div class='dropdown ms-1'><a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a><button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button><ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">${statusDependentHtml}</ul></div>`;
                            return html;
                        },
                        visible: true,
                        cellClick: function (e, cell) {
                            cell.getElement().classList.add('active-cell');
                        },
                    },
                ]


        $('#fromDate').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDate').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#fromDatebblc').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDatebblc').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#fromDateci').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDateci').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#fromDaterlc').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDaterlc').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#fromDateDA').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDateDA').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#fromDateWO').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDateWO').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#fromDateID').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        $('#toDateID').datepicker({
            dateFormat: 'dd-M-yy',
            todayHighlight: true,
            autoclose: true
        }).datepicker("setDate", new Date());

        // $('#THead').select2({
        //     theme: 'bootstrap-5'
        // });

        function ReportPrint(btnvalue) {

            var fromDatebblc = $('#fromDatebblc').val();
            var toDatebblc = $('#toDatebblc').val();
            var supplierIDbblc = $('#supplierIDbblc').val();
            var concernbblc = $('#concernbblc').val();

            //if (CommercialCompanyId == '') {
            //    alert('Please Select Concern From List');
            //    return;
            //}
            var reporttype = $("input[name=RptType3]:checked").val();


            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionbblc", "Variable")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttype, action: btnvalue, fromDatebblc: fromDatebblc, toDatebblc: toDatebblc, supplierIDbblc: supplierIDbblc, concernbblc: concernbblc },
                success: function (response) {
                    //  window.location.href = response.Url;

                    window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        }


        function ReportPrintRlc(btnvalue) {

            var fromDaterlc = $('#fromDaterlc').val();
            var toDaterlc = $('#toDaterlc').val();
            var supplierIDrlc = $('#supplierIDrlc').val();
            var concernrlc = $('#concernrlc').val();
            var itemgrpname1 = $('#itemgrpname1').val();                      

            
            var reporttype = $("input[name=RptType1]:checked").val();


            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSessionRegularLCReport", "Variable")',
                dataType: 'json',
                async: true,
                data: { reporttype: reporttype, action: btnvalue, fromDaterlc: fromDaterlc, toDaterlc: toDaterlc, supplierIDrlc: supplierIDrlc, concernrlc: concernrlc, itemgrpname1: itemgrpname1 },
                success: function (response) {
                    //  window.location.href = response.Url;

                    window.open(response.Url, '_blank')
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }

            });

        }


        $.ajax({
            method: "get",
            async: false,
            url: '@Url.Action("GetUserDropdown", "Admin")',            
            success: function (data) {

                console.log(data);

                const select = document.querySelector('#THead');
                for (var i = 0; i < data.length; i++) {
                    const option = document.createElement('option');
                    option.value = data[i].Value;
                    option.text = data[i].Text;
                    select.appendChild(option);
                }
            }
        });

        $.ajax({
            method: "get",
            async: false,
            url: '@Url.Action("GetUserDropdown", "Admin")',
            success: function (data) {

                console.log(data);

                const select = document.querySelector('#THead1');
                for (var i = 0; i < data.length; i++) {
                    const option = document.createElement('option');
                    option.value = data[i].Value;
                    option.text = data[i].Text;
                    select.appendChild(option);
                }
            }
        });

        $.ajax({
            method: "get",
            async: false,
            url: '@Url.Action("GetUserDropdown", "Admin")',
            success: function (data) {

                console.log(data);

                const select = document.querySelector('#THead2');
                for (var i = 0; i < data.length; i++) {
                    const option = document.createElement('option');
                    option.value = data[i].Value;
                    option.text = data[i].Text;
                    select.appendChild(option);
                }
            }
        });

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetComercialCompany", "BuyerOrder")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    $('#CommercialCompanyId').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                });
            }
        });

        //======nav functionalities starts========
        $(".nav-link").click(function () {
            // Remove the "active" class from all nav links
            $(".nav-link").removeClass("active");

            // Add the "active" class to the clicked nav link
            $(this).addClass("active");
        });

        $("#PINature").select2();

         if ('@ListType' === "ProformaInvoice") {
            $("#ProformaInvoice").addClass("active");
            $("#BacktoBackLC").removeClass("active");
            $("#RegularLC").removeClass("active");
            $("#ImportInvoiceCI").removeClass("active");
            $("#DocumentAcceptance").removeClass("active");
            $("#WorkOrder").removeClass("active");
            $("#ImportDocument").removeClass("active");

            $("#ProformaView").removeClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");

            //POLGetData();
            PIGear();
        }

        $("#ProformaInvoice").on("click", function () {
            $("#ProformaView").removeClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            // Check if POLTable is initialized and has rows
            if (POLTable && POLTable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                POLGetData();
            }
        });

        if ('@ListType' === "BacktoBackLC") {
            $("#BacktoBackLC").addClass("active");
            $("#RegularLC").removeClass("active");
            $("#ProformaInvoice").removeClass("active");
            $("#ImportInvoiceCI").removeClass("active");
            $("#DocumentAcceptance").removeClass("active");
            $("#WorkOrder").removeClass("active");
            $("#ImportDocument").removeClass("active");

            $("#ProformaView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");
            $("#BBLCView").removeClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");

            //BBLCGetData();
            bblcGear();
        }

        $("#BacktoBackLC").on("click", function () {
            $("#ProformaView").addClass("d-none");
            $("#BBLCView").removeClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            
            // Check if POLTable is initialized and has rows
            if (BBLCTable && BBLCTable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                BBLCGetData();
            }
        });

        if ('@ListType' === "RegularLC") {
            $("#BacktoBackLC").removeClass("active");
            $("#RegularLC").addClass("active");
            $("#ProformaInvoice").removeClass("active");
            $("#ImportInvoiceCI").removeClass("active");
            $("#DocumentAcceptance").removeClass("active");
            $("#WorkOrder").removeClass("active");
            $("#ImportDocument").removeClass("active");

            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").removeClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            //RLCGetData();
            RlcGear();
        }

        $("#RegularLC").on("click", function () {
            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").removeClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            
            // Check if POLTable is initialized and has rows
            if (RLCTable && RLCTable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                RLCGetData();
            }
        });

        if ('@ListType' === "ImportInvoiceCI") {
            $("#BacktoBackLC").removeClass("active");
            $("#RegularLC").removeClass("active");
            $("#ProformaInvoice").removeClass("active");
            $("#ImportInvoiceCI").addClass("active");
            $("#DocumentAcceptance").removeClass("active");
            $("#WorkOrder").removeClass("active");
            $("#ImportDocument").removeClass("active");     
            
            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").removeClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            //CIGetData();
            CIGear();
        }

        $("#ImportInvoiceCI").on("click", function () {
            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").removeClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            
            // Check if POLTable is initialized and has rows
            if (CITable && CITable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                CIGetData();
            }
        });

         if ('@ListType' === "DocumentAcceptance") {
            $("#BacktoBackLC").removeClass("active");
            $("#RegularLC").removeClass("active");
            $("#ProformaInvoice").removeClass("active");
            $("#ImportInvoiceCI").removeClass("active");
            $("#DocumentAcceptance").addClass("active");
            $("#WorkOrder").removeClass("active");
            $("#ImportDocument").removeClass("active");  
            
            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").removeClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            //DAGetData();
            DAGear();
        }

        $("#DocumentAcceptance").on("click", function () {
            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").removeClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").addClass("d-none");
            
            // Check if POLTable is initialized and has rows
            if (DATable && DATable.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                DAGetData();
            }
        });

         if ('@ListType' === "WorkOrder") {
            $("#BacktoBackLC").removeClass("active");
            $("#RegularLC").removeClass("active");
            $("#ProformaInvoice").removeClass("active");
            $("#ImportInvoiceCI").removeClass("active");
            $("#DocumentAcceptance").removeClass("active");
            $("#WorkOrder").addClass("active");
            $("#ImportDocument").removeClass("active");

            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").removeClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            //WorkOrderGetData();
            WOGear();
        }

        $("#WorkOrder").on("click", function () {
            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").removeClass("d-none");
            $("#ImportDocumentView").addClass("d-none");

            
            // Check if POLTable is initialized and has rows
            if (WorkOrder && WorkOrder.getRows().length > 0) {
                // POLTable exists and has rows, do not call POLGetData
                return;
            } else {
                // POLTable does not exist or has no rows, call POLGetData
                WorkOrderGetData();
            }
        });


        if ('@ListType' === "ImportDocument") {
            $("#BacktoBackLC").removeClass("active");
            $("#RegularLC").removeClass("active");
            $("#ProformaInvoice").removeClass("active");
            $("#ImportInvoiceCI").removeClass("active");
            $("#DocumentAcceptance").removeClass("active");
            $("#WorkOrder").removeClass("active");
            $("#ImportDocument").addClass("active");

            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").removeClass("d-none");

            ImportDocumentGetData();
        }

        $("#ImportDocument").on("click", function () {
            $("#ProformaView").addClass("d-none");
            $("#BBLCView").addClass("d-none");
            $("#RLCView").addClass("d-none");
            $("#CommercialInvoiceView").addClass("d-none");
            $("#DocumentAcceptanceView").addClass("d-none");
            $("#WorkOrderView").addClass("d-none");
            $("#ImportDocumentView").removeClass("d-none");

            ImportDocumentGetData();
        });
        //======nav functionalities ends========

        //===========================proforma invoice functionalities starts=====================
        var POLTable;
        var currentPOLId;
        //POLGetData();

        var Action1 = [
             {
                        title: "Actions", field: "polAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `editPOLs(${data.Id})`;
                            var inActive = `setInactiveUrlOfPOLs(${data.Id}) `

                            var deleteHtml = `
                      <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                      <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                      </a>
                      `;


                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = deleteHtml;

                            var html = `
                      <div class='dropdown ms-1'>
                      <a onclick='${Edit}' class='fw-bolder mt-2'>View/Edit</a>
                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                          ${statusDependentHtml}

                      </ul>
                      </div>
                      `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },
        ]

        
        function PIGear() {
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")',
                type: 'GET',
                contentType: 'application/json',
                data: { type: 'Proforma_Invoice' },
                success: function (response) {

                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if (response.Success == 1) {
                        if (response.data.KeyValue != null || response.data.KeyValue != "") {
                            ProformaFields = JSON.parse(response.data.KeyValue);
                            pageSize = Number(ProformaFields.pageSize);
                            $('#POLRows').val(pageSize);
                            ProformaFields = JSON.parse(response.data.KeyValue).colDefs.filter(function (column) {
                                return  column.field !== "polAction";
                            });

                            

                            // Append the Actions array at the end of ProformaFields
                            ProformaFields = ProformaFields.concat(Action1);

                        }
                    }

                    populateCheckbox1();
                    POLGetData();
                },

                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHidePI(colName) {

            POLTable.toggleColumn(colName);

        }


        function populateCheckbox1() {
            //let columnListMasterLC = $("#POLColumnList");
            let items = ProformaFields.map(x => {
                var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHidePI('${x.field}')" class="custom-control-input title-input proforma-column" id="${x.field}" value="${x.field}" ${x.visible ? 'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                return titles;

            });


            const columnListPI = document.getElementById('POLColumnList');
            columnListPI.innerHTML = items.join('');
            $('.custom-control-label').on('click', function (e) {
                e.stopPropagation();
            });
            $('#dropdown-titles').on('click', function (e) {
                e.stopPropagation();
            });

            // Handle change event for #customer-rows
            $("#POLRows").on("change", function () {
                var selectedRows = $(this).val();
                if (selectedRows !== null) {
                    var pageSize = parseInt(selectedRows);
                    if (!isNaN(pageSize)) {
                        POLTable.setPageSize(pageSize);
                    }
                }
            });


        }

        function POLGetData() {

            var fromDate = $("#fromDate").val();
            var toDate = $("#toDate").val();
            var supplierID = $("#supplierID").val();

            var POLAPIURL = '@Url.Action("GetProformaList1", "Variable")' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&supplierID=' + supplierID;
            POLTable = new Tabulator("#PortOFLoadingTable", {
                // data: dataTableFilter,
                dataTree: true,
                height: "350px",
                movableColumns: true,
                dataTreeStartExpanded: true,
                dataTreeChildField: "children",
                layout: "fitDataTable",
                selectable: 1,
                pagination: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000],
                paginationCounter: "rows",
                ajaxURL: POLAPIURL,
                ajaxConfig: "get",
                ajaxContentType: "json",

                ajaxResponse: function (url, params, response) {
                    POLTable.setMaxPage(response.last_page);
                    // //console.log("response.last_page", response.last_page);

                    dataLoadExpense = response.data;
                    ////console.log("dataLoadExpense abc:", dataLoadExpense);

                    return {

                        data: dataLoadExpense,
                        last_page: response.last_page,

                    };
                },

                columns: ProformaFields,
                ajaxURLGenerator: function (url, config, params) {
                    //return request url
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                },
                dataBound: function () {
                    // Freeze the top 1 row (index 0) after the table is created
                    var rows = table.getRows();
                    if (rows.length > 0) {
                        var cells = rows[0].getCells();
                        cells.forEach(cell => {
                            cell.freeze();
                        });
                    }
                },
            });


            function reloadTableData() {
                var fromDate = $("#fromDate").val();
                var toDate = $("#toDate").val();
                var supplierID = $("#supplierID").val();
                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetProformaList1", "Variable")' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&supplierID=' + supplierID;
                POLTable.setData(apiUrl);
            }        

            // Add event listeners to the From Date and To Date input fields
            $("#fromDate, #toDate, #supplierID").on("change", function () {
                reloadTableData();
            });


            //Proforma Invoice gear functionalities starts=============
                
            // console.log("globalFieldsForSalesList::", ProformaFields);
            // let columnListProforma = $("#POLColumnList");
            //     columnListProforma.empty();
        
            // // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'Proforma Invoice' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {   
            //             $.each(ProformaFields, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var Sizetitles = `<li>
            //                                  <a class="dropdown-item" href="#">
            //                                  <div class="custom-control custom-checkbox" >
            //                                  <input type="checkbox" class="custom-control-input title-input proforma-column" id="${name}" value="${name}">
            //                                  <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                                  </div>
            //                                  </a>
            //                                  </li>`;
            //                 columnListProforma.append(Sizetitles);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         POLTable.showColumn(name);
            //                     } else {
            //                         POLTable.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });

            //                 //Add event listener to the rows select input
            //                 $("#POLRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             POLTable.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(ProformaFields, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     POLTable.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     POLTable.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input proforma-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListProforma.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         POLTable.showColumn(name);
            //                     } else {
            //                         POLTable.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#POLRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         POLTable.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            

            $("#saveProforma").on("click", function () {
                var columnData = [];

                var colDefs = realizationTable.getColumnDefinitions();

                var selectElement = document.getElementById("realizationRows");
                var selectedValue = selectElement.value;

                $(".proforma-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                      colDefs.forEach(function(colDef) {
                      if (colDef.field === field) {
                          colDef.visible = isVisible;  // Set visibility based on checkbox state                
                      }
                    });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'Proforma_Invoice' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

          
            function DeleteFilter1(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             POLGetData();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };

            //gear functionalities ends===============

        };


        $("#concernbankAccount").on("change", function () {
            var val = $(this).val();

            $.ajax({
                type: "POST",
                url: '@Url.Action("GetBankAccountNameByBankAccNo", "Variable")?BankAccountNoId=' + val,
                datatype: "Json",
                success: function (data) {
                    // console.log("data for bank acc no chose", data);
                    if (data != null) {
                        $("#concernbank").val(data.Id).change();
                    };
                }
            });

        });


        $("#SavePOLBtn").click(function () {
            // SavePOL();

            var itemdescs = $("#itemdesc").val();
            console.log("itemdescs", itemdescs);
            // var dataArray = itemdescs.match(/\d+/g);
            var formattedArray = [];
            itemdescs.forEach(function (item, index) {
                formattedArray.push({ ItemDescId: parseInt(item) });
            });
            console.log(formattedArray);

            var ComId = '@HttpContextAccessor.HttpContext.Session.GetInt32("ComId").ToString()';
            var UserId = '@HttpContextAccessor.HttpContext.Session.GetInt32("UserId").ToString()';

            var model = {
                ComId: ComId,
                LuserId: UserId,
                Id: $("#POLId").val() || 0,
                PINo: $("#pino").val(),
                PIDate: $("#pidate").val(),
                PIReceivingDate: $("#pireceivingdate").val(),
                CommercialCompanyId: $("#concern option:selected").val(),
                CurrencyId: $("#currency option:selected").val(),
                SupplierId: $("#supplier option:selected").val(),
                ImportPONo: $("#importno").val(),
                FileNo: $("#fileno").val(),
                ItemGroupId: $("#itemgrpname option:selected").val(),
                GroupLCId: $("#grouplc").val(),
                // ItemDescId: $("#itemdesc option:selected").val(),
                Size: $("#size").val(),
                Remarks: $("#remarks").val(),
                ImportQty: $("#qty").val(),
                UnitId: $("#unit option:selected").val(),
                SecondaryUnitId: $("#Secondaryunit option:selected").val(),
                ImportRate: $("#importrate").val(),
                CartonRollQty: $("#rollqty").val(),
                TotalValue: $("#totalvalue").val(),
                HSCode: $("#hscode").val(),
                EmployeeId: $("#employeeid option:selected").val(),
                MerchandiserName: $("#merchandiser").val(),
                RevNo: $("#revno").val(),
                PaymentTermsId: $("#paymentterms option:selected").val(),
                DayListId: $("#day option:selected").val(),
                OpeningBankId: $("#concernbank option:selected").val(),
                BankAccountId: $("#concernbankAccount option:selected").val(),
                BankAccountNoLienBankId: $("#supplierbankaccount option:selected").val(),
                PITypeId: $("#pitype option:selected").val(),
                PortOfLoadingId: $("#portofloading option:selected").val(),
                PortOfDestinationId: $("#portofdestination option:selected").val(),
                PINatureId: $("#PINature option:selected").val(),
                PortOfLoadingCountryOfOriginId: $("#countryoforigin option:selected").val(),
                LCAF: $("#lcaf").val(),
                COM_ProformaInvoice_Subs: formattedArray,
            };
            console.log("pol  model", model);
            $.ajax({
                async: false,
                type: "POST",
                url: '@Url.Action("AddUpdateProforma", "Variable")',
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    console.log("after save result", result);
                    var PODId = result.Id;

                    if (result.success == "1") {
                        toastr.success(result.message, "", {
                            "toastClass": "toast-green",
                        });
                        $("#POLOffcanvas").offcanvas('hide');
                        clearOffCanvasPOL();
                        POLGetData();
                    } else {
                        toastr.success(result.message, "", {
                            "toastClass": "toast-red",
                        });
                        POLGetData();
                    }
                },
                error: function () {
                    toastr.success(result.message, "", {
                        "toastClass": "toast-red",
                    });
                    POLGetData();
                }
            });
        });


     


        function SavePOL() {
        }
        function clearOffCanvasPOL() {
            $("#POLOffcanvas .offcanvas-title").html("Add New");
            $("#POLId").val("");
            $("#pino").val("");
            $("#pidate").val("");
            $("#pireceivingdate").val("");
            $("#concern").val("").change();
            $("#currency").val("").change();
            $("#supplier").val("").change();
            $("#importno").val("");
            $("#fileno").val("");
            $("#itemgrpname").val("").change();
            $("#grouplc").val("");
            $("#SearchGroupLC").val("");
            $("#itemdesc").val("");
            $("#size").val("");
            $("#remarks").val("");
            $("#qty").val("");
            $("#unit").val("").change();
            $("#Secondaryunit").val("").change();
            $("#PINature").val("").change();
            $("#importrate").val("");
            $("#rollqty").val("");
            $("#totalvalue").val("");
            $("#hscode").val("");
            $("#employeeid").val("").change();
            $("#merchandiser").val("");
            $("#revno").val("");
            $("#paymentterms").val("").change();
            $("#day").val("").change();
            $("#concernbank").val("");
            $("#concernbankAccount").val("").change();
            $("#supplierbankaccount").val("").change();
            $("#pitype").val("").change();
            $("#portofloading").val("").change();
            $("#portofdestination").val("").change();
            $("#countryoforigin").val("").change();
            $("#lcaf").val("");
            // $("#itemdesc").html("");
            $('#SavePOLBtn').text("Save");
            $('#pinoValidation').html("");
        }


        $("#closePOLffcanvasBtn").on("click", function () {
            $("#POLOffcanvas").offcanvas('hide');
            clearOffCanvasPOL()
        });


        function editPOLs(data) {
            currentPOLId = data;
            var myUrlGet = '@Url.Action("GetProformaEdit", "Variable")?id=' + data;
            $.ajax({
                type: "GET",
                url: myUrlGet,
                success: function (result) {
                    console.log("edit data of proforma", result);

                    if (result.Success == "1" && result.editable == true) {
                        $("#POLOffcanvas .offcanvas-title").html("Edit");
                        $("#POLOffcanvas").offcanvas("show");
                        $("#SavePOLBtn").text('Update');
                        $("#POLId").val(result.data.Id);
                        $("#pino").val(result.data.PINo);
                        $("#pidate").val(result.data.PIDate);
                        $("#pireceivingdate").val(result.data.PIReceivingDate);
                        $("#importno").val(result.data.ImportPONo);
                        $("#fileno").val(result.data.FileNo);
                        $("#itemgrpname").val(result.data.ItemGroupId).change();
                        $("#grouplc").val(result.data.GroupLCId);
                        $("#SearchGroupLC").val(result.data.GroupLCRefName);
                        // $("#itemdesc").val(result.data.ItemDescId);
                        $("#size").val(result.data.Size);
                        $("#remarks").val(result.data.Remarks);
                        $("#qty").val(result.data.ImportQty);
                        $("#unit").val(result.data.UnitId).change();
                        $("#Secondaryunit").val(result.data.SecondaryUnitId).change();
                        $("#PINature").val(result.data.PINatureId).change();
                        $("#importrate").val(result.data.ImportRate);
                        $("#rollqty").val(result.data.CartonRollQty);
                        $("#totalvalue").val(result.data.TotalValue);
                        $("#hscode").val(result.data.HSCode);
                        $("#employeeid").val(result.data.EmployeeId).change();
                        $("#merchandiser").val(result.data.MerchandiserName);
                        $("#revno").val(result.data.RevNo);
                        $("#paymentterms").val(result.data.PaymentTermsId).change();
                        $("#day").val(result.data.DayListId).change();
                        $("#concernbank").val(result.data.OpeningBankId).change();
                        $("#concernbankAccount").val(result.data.BankAccountId).change();
                        $("#supplierbankaccount").val(result.data.BankAccountNoLienBankId).change();
                        $("#lcaf").val(result.data.LCAF);
                        $("#pitype").val(result.data.PITypeId).change();
                        $("#portofloading").val(result.data.PortOfLoadingId).change();
                        $("#portofdestination").val(result.data.PortOfDestinationId).change();
                        $("#countryoforigin").val(result.data.PortOfLoadingCountryOfOriginId).change();
                        $("#lcaf").val(result.data.LCAF);


                        $("#concern").val(result.data.CommercialCompanyId).change();
                        $("#currency").val(result.data.CurrencyId).change();
                        $("#supplier").val(result.data.SupplierId).change();

                        var itemDescription = result.data.COM_ProformaInvoice_Subs;

                        // var selectedIds = itemDescription.map(function (item) {
                        //     return item.ItemDescId.toString();
                        // });
                        // $('#itemdesc').val(selectedIds).trigger('change');

                        var tagValues = (itemDescription ?? []).map(function (salesTag) {
                            return salesTag.ItemDescId;
                        });
                        $('#itemdesc').val(tagValues).trigger('change');



                    }
                    else {

                        toastr.success(result.message, "Access Denied", {
                            "toastClass": "toast-red",
                        });
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("Error: " + xhr.status);
                }
            });
        }


        function setInactiveUrlOfPOLs(data) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteProformas", "Variable")',
                        type: "get",
                        data: { id: data },
                        traditional: true,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                POLGetData();
                            }
                            else if (response.success == "0") {
                                //alert()
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                POLGetData();
                            }
                            else {

                                toastr.success(response.message, "Access Denied", {
                                    "toastClass": "toast-red",
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                            toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                        }
                    });
                }
            });
        };
        document.getElementById("print-table-pol").addEventListener("click", function () {
            POLTable.print(false, true);
        });
        document.getElementById("download-xlsx-pol").addEventListener("click", function () {
            POLTable.download("xlsx", "Proforma Invoice.xlsx", { sheetName: "Proforma Invoice" });
        });



        var POLSave = document.querySelector('#SavePOLBtn');
        function getAllPOLs(callback) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetProformaList1", "Variable")',
                dataType: "json",
                success: function (data) {
                    // console.log("data::", data.data);
                    var SizeCodeGetArray = [];

                    data.data.forEach(function (item) {
                        var SizeName = item.PINo;
                        var SizeIdGet = item.Id;
                        var SizeData = {
                            SizeName: SizeName,
                            Id: SizeIdGet
                        };
                        SizeCodeGetArray.push(SizeData);
                    });

                    if (typeof callback === "function") {
                        callback(SizeCodeGetArray);
                    }
                },
                error: function (error) {
                    console.error("Error:", error);
                }
            });
        }

        function checkPOLExists(sizeName) {
            getAllPOLs(function (data) {
                var lowercasedSizeName = sizeName.toLowerCase();

                var sizeExists = data.some(function (item) {
                    // console.log("item.Id", item.Id);
                    //console.log("currentSizeIdd", currentSizeIdd);

                    if (currentPOLId && currentPOLId === item.Id) {
                        return false;
                    }

                    return item.SizeName.trim().toLowerCase() === lowercasedSizeName;
                });

                console.log("sizeExists", sizeExists);

                if (sizeExists) {
                    $("#pinoValidation").html("Already has the same PINO!");
                    POLSave.disabled = true;
                } else {
                    $("#pinoValidation").html("");
                    POLSave.disabled = false;

                }
            });
        }

        var POLNameHandle = document.getElementById("pino");
        POLNameHandle.addEventListener("input", function () {
            //console.log("currentSizeId", currentSizeIdd);

            var enteredSizeName = POLNameHandle.value;
            checkPOLExists(enteredSizeName);
        });
        //======dropdown created==========
        //populate concern drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("concernDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#concern').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate currency drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("currencyDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#currency').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate supplier drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("supplierDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#supplier').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate employeeid drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("employeeDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#employeeid').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate concernbankAccount drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("concernBankAccountDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#concernbankAccount').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate concernbank drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("concernBankDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#concernbank').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate supplierbankaccount drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("supplierBankNoDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi lien bank er er", value);
                    $('#supplierbankaccount').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate itemgrpname drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("itemGroupDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#itemgrpname').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate itemgrpname1 drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("itemGroupDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#itemgrpname1').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate pitype drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("piTypeDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#pitype').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate itemdesc drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("itemDescriptionDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {


                // $('#itemdesc').empty();

                // var groupOptions =data.map(function (item) {
                //     console.log("item", item);
                //     return '<option value="' + item.Value + '">' + item.Text + '</option>';
                // });

                // $('#itemdesc').append(groupOptions.join(''));


                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#itemdesc').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate grouplc drodpdown
        // $.ajax({
        //     type: "GET",
        //     url: '@Url.Action("groupLCMainDrodpdown", "Variable")',
        //     datatype: "Json",
        //     success: function (data) {

        //         $.each(data, function (index, value) {
        //             // console.log("value dekhi country er", value);
        //             $('#grouplc').append('<option value="' + value.Value + '">' + value.Text + '</option>');
        //         });
        //     }
        // });
        //populate qty drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("qtyDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi unitttttttttt er", value);
                    $('#unit').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                    $('#Secondaryunit').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate paymentterms drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("paymentTermsDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#paymentterms').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        $.ajax({
            type: "GET",
            url: '@Url.Action("piNatureDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#PINature').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate day drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("dayListDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#day').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        //populate portofloading drodpdown
        $.ajax({
            type: "GET",
            url: '@Url.Action("portOFLoadingDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#countryoforigin').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                    $('#portofloading').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        $.ajax({
            type: "GET",
            url: '@Url.Action("destinationnDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#portofdestination').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });
        $(function () {
            $("#pidate").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            })
            $("#pireceivingdate").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#fromDateci").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#toDateci").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#pidate").attr("autocomplete", "off");
            $("#pireceivingdate").attr("autocomplete", "off");
            $("#fromDateci").attr("autocomplete", "off");
            $("#toDateci").attr("autocomplete", "off");
        });
        


        //====search functionality==========
        // $('#searchInputProforma').on('input', function() {
        // var inputValue = $(this).val();
        // var url = '@Url.Action("GetProformaList1", "Variable")' + '?searchquery=' + inputValue;
        // POLTable.setData(url);
        // });

        //===========================proforma functionalities ends=======================

    


        autocompletefunction();
        function autocompletefunction() {
            $("#SearchGroupLC").autocomplete({
                appendTo: "#suggestion-box",
                source: function (request, response) {
                    $.ajax({
                        url: '@Url.Action("GroupLCSearch", "Variable")',
                        dataType: "json",
                        data: { query: $("#SearchGroupLC").val() },
                        success: function (data) {
                            console.log(data);
                            response($.map(data, function (item) {
                                return { label: item.GroupLCRefName, value: item.Id };
                            }));
                        },
                        error: function (xhr, status, error) {
                            alert("Error");
                        },
                    });
                },
                autoFocus: true,
                minLength: 1,
                select: function (event, ui) {
                    console.log("ui", ui.item);
                    // $('#Search').val(ui.item.value);
                    $('#SearchGroupLC').val(ui.item.label);
                    $('#grouplc').val(ui.item.value);
                    return false;
                }

            });
        }
        $(document).ready(function () {
            $(".select2").select2({
                //dropdownParent: $("#POLOffcanvas")
            });
            $("#POLOffcanvas .select2").select2({
                dropdownParent: $("#POLOffcanvas")
            });
        });
                 $.ajax({
             type: "GET",
            url: '@Url.Action("supplierDrodpdown", "Variable")',
             datatype: "Json",
             success: function (data) {

                 $.each(data, function (index, value) {
                     //console.log("value dekhi buyer er",value);
                     $('#supplierID').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                 });
             }
                 });


                 
        //     $('#supplierID').on('change', function() {
        // var inputValue = $(this).val();
        //     var url = '@Url.Action("GetProformaList1", "Variable")' + '?supplierid=' + inputValue;
        // POLTable.setData(url);
        //     });
        //     $('#fromDate').on('change', function() {
        // var inputValue = $(this).val();
        //     var url = '@Url.Action("GetProformaList1", "Variable")' + '?fromDate=' + inputValue;
        // POLTable.setData(url);
        //     });
        //     $('#toDate').on('change', function() {
        // var inputValue = $(this).val();
        //     var url = '@Url.Action("GetProformaList1", "Variable")' + '?toDate=' + inputValue;
        // POLTable.setData(url);
        //     });

       
                $(function () {
            $("#fromDate").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            })
            $("#toDate").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#fromDatebblc").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#toDatebblc").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#fromDaterlc").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#toDaterlc").removeClass("hasDatepicker").datepicker({
                dateFormat: "dd-M-yy"
            });
            $("#fromDate").attr("autocomplete", "off");
            $("#toDate").attr("autocomplete", "off");
            $("#fromDatebblc").attr("autocomplete", "off");
            $("#toDatebblc").attr("autocomplete", "off");
            $("#fromDaterlc").attr("autocomplete", "off");
            $("#toDaterlc").attr("autocomplete", "off");
        });


     //===========================bblc functionalities starts=====================

        var BBLCTable; 
        //BBLCGetData();

        var Actions2 = [
            {
                title: "Actions", field: "bblcAction", headerHozAlign: "center", frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    //console.log("seeeee data::", data);
                    var Edit = `@Url.Action("UpdateBackToBackLC", "Variable")?backtobacklcid=` + data.Id;
                    var inActive = `InactiveBBLC(${data.Id}) `

                    var deleteHtml = `
                      <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                      <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                      </a>
                      `;


                    //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                    var statusDependentHtml = deleteHtml;

                    var html = `
                      <div class='dropdown ms-1'>
                      <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                          ${statusDependentHtml}

                      </ul>
                      </div>
                      `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                },
            },
        ]

        function bblcGear() {
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")',
                type: 'GET',
                contentType: 'application/json',
                data: { type: 'BBLC' },
                success: function (response) {

                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if (response.Success == 1) {
                        if (response.data.KeyValue != null || response.data.KeyValue != "") {
                            bblcFields = JSON.parse(response.data.KeyValue);
                            pageSize = Number(bblcFields.pageSize);
                            $('#BBLCRows').val(pageSize);
                            bblcFields = JSON.parse(response.data.KeyValue).colDefs.filter(function (column) {
                                return column.field !== "bblcAction";
                            });

                            

                            // Append the Actions array at the end of bblcFields
                            bblcFields = bblcFields.concat(Actions2);

                        }
                    }

                    populateCheckbox2();
                    BBLCGetData();
                },

                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHidebblc(colName) {

            BBLCTable.toggleColumn(colName);

        }


        function populateCheckbox2() {
            //let columnListMasterLC = $("#POLColumnList");
            let items = bblcFields.map(x => {
                var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHidebblc('${x.field}')" class="custom-control-input title-input bblc-column" id="${x.field}" value="${x.field}" ${x.visible ? 'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                return titles;

            });


            const columnListbblc = document.getElementById('BBLCColumnList');
            columnListbblc.innerHTML = items.join('');
            $('.custom-control-label').on('click', function (e) {
                e.stopPropagation();
            });
            $('#dropdown-titles').on('click', function (e) {
                e.stopPropagation();
            });

            // Handle change event for #customer-rows
            $("#BBLCRows").on("change", function () {
                var selectedRows = $(this).val();
                if (selectedRows !== null) {
                    var pageSize = parseInt(selectedRows);
                    if (!isNaN(pageSize)) {
                        BBLCTable.setPageSize(pageSize);
                    }
                }
            });


        }


        function BBLCGetData() {

            var fromDatebblc = $("#fromDatebblc").val();
            var toDatebblc = $("#toDatebblc").val();
            var supplierIDbblc = $("#supplierIDbblc").val();
            var concernbblc = $("#concernbblc").val();
            var THead = $("#THead").val();

            var POLAPIURL = '@Url.Action("GetBBLCList1", "Variable")' + '?fromDate=' + fromDatebblc + '&toDate=' + toDatebblc + '&supplierid=' + supplierIDbblc + '&concernid=' + concernbblc + '&userId=' + THead;
            BBLCTable = new Tabulator("#bblcTable", {
                // data: dataTableFilter,
                dataTree: true,
                height: "350px",
                movableColumns: true,
                dataTreeStartExpanded: true,
                dataTreeChildField: "children",
                layout: "fitDataTable",
                selectable: 1,
                pagination: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000],
                paginationCounter: "rows",
                ajaxURL: POLAPIURL,
                ajaxConfig: "get",
                ajaxContentType: "json",

                ajaxResponse: function (url, params, response) {
                    BBLCTable.setMaxPage(response.last_page);
                    // //console.log("response.last_page", response.last_page);

                    dataLoadExpense = response.data;
                    // console.log("dataLoadExpense abc:", dataLoadExpense);

                    return {

                        data: dataLoadExpense,
                        last_page: response.last_page,

                    };
                },

                columns: bblcFields,
                ajaxURLGenerator: function (url, config, params) {
                    //return request url
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                },
                dataBound: function () {
                    // Freeze the top 1 row (index 0) after the table is created
                    var rows = table.getRows();
                    if (rows.length > 0) {
                        var cells = rows[0].getCells();
                        cells.forEach(cell => {
                            cell.freeze();
                        });
                    }
                },
            });


            function reloadTableData1() {
                var fromDatebblc = $("#fromDatebblc").val();
                var toDatebblc = $("#toDatebblc").val();
                var supplierIDbblc = $("#supplierIDbblc").val();
                var concernbblc = $("#concernbblc").val();
                var THead = $("#THead").val();
                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetBBLCList1", "Variable")' + '?fromDate=' + fromDatebblc + '&toDate=' + toDatebblc + '&supplierid=' + supplierIDbblc + '&concernid=' + concernbblc + '&userId=' + THead;
                BBLCTable.setData(apiUrl);
            }

            // Add event listeners to the From Date and To Date input fields
            $("#fromDatebblc, #toDatebblc, #supplierIDbblc, #concernbblc, #THead").on("change", function () {
                reloadTableData1();
            });


            //BBLC gear functionalities starts=============
            
            // console.log("globalFieldsForSalesList::", bblcFields);
            // let columnListBBLC = $("#BBLCColumnList");
            //     columnListBBLC.empty();
        
            // // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'BBLC' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {                          
            //             $.each(bblcFields, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var BBLCLIST = `<li>
            //                          <a class="dropdown-item" href="#">
            //                          <div class="custom-control custom-checkbox" >
            //                          <input type="checkbox" class="custom-control-input title-input bblc-column" id="${name}" value="${name}">
            //                          <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                          </div>
            //                          </a>
            //                          </li>`;
            //                 columnListBBLC.append(BBLCLIST);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         BBLCTable.showColumn(name);
            //                     } else {
            //                         BBLCTable.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });

            //                 //Add event listener to the rows select input
            //                 $("#BBLCRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             BBLCTable.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(bblcFields, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     BBLCTable.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     BBLCTable.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input bblc-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListBBLC.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         BBLCTable.showColumn(name);
            //                     } else {
            //                         BBLCTable.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#BBLCRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         BBLCTable.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            

            $("#saveBBLC").on("click", function () {
                var columnData = [];

                var colDefs = BBLCTable.getColumnDefinitions();

                var selectElement = document.getElementById("BBLCRows");
                var selectedValue = selectElement.value; 

                $(".bblc-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                    colDefs.forEach(function(colDef) {
                      if (colDef.field === field) {
                          colDef.visible = isVisible;  // Set visibility based on checkbox state                
                      }
                    });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'BBLC' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });


            function DeleteFilter2(data) {

                $.ajax({
                    url: '@Url.Action("DeleteColumnFilter", "Sales")',
                    type: "get",
                    data: { type: data },
                    success: function (response) {
                        if (response.success == "1") {
                            toastr.success(response.msg, "", {
                                "toastClass": "toast-green",
                            });
                            BBLCGetData();
                        }

                    },
                    error: function (xhr, status, error) {
                        console.error(xhr.responseText);
                        toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                    }
                });


            };
           
            //gear functionalities ends===============

        };
        function InactiveBBLC(data) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteBBLC", "Variable")',
                        type: "get",
                        data: { id: data },
                        traditional: true,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                BBLCGetData();
                            }
                            else if (response.success == "0") {
                                //alert()
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                BBLCGetData();
                            }
                            else
                            {
                                toastr.success("Access denied.", "", {
                                    "toastClass": "toast-red",
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                            toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                        }
                    });
                }
            });
        };
        document.getElementById("print-table-bblc").addEventListener("click", function () {
            BBLCTable.print(false, true);
        });
        document.getElementById("download-xlsx-bblc").addEventListener("click", function () {
            BBLCTable.download("xlsx", "BBLC.xlsx", { sheetName: "BBLC" });
        });
        
        //====search functionality==========
        // $('#searchInputBBLC').on('input', function() {
        // var inputValue = $(this).val();
        // var url = '@Url.Action("GetBBLCList1", "Variable")' + '?searchquery=' + inputValue;
        // BBLCTable.setData(url);
        // });
       //===========================bblc functionalities ends=======================
        //===========================rlc functionalities ends=======================
        var RLCTable;

        var Actions3 = [
            {
                    title: "ACTIONS", field: "rlcAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                        var data = cell.getData();
                        //console.log("seeeee data::", data);
                        var Edit = `@Url.Action("EditRegularLC", "Variable")?Id=` + data.Id;
                        var inActive = `InactiveRLC(${data.Id}) `

                        var deleteHtml = `
                    <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                    <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                    </a>
                    `;

                        var statusDependentHtml = deleteHtml;

                        var html = `
                    <div class='dropdown ms-1'>
                    <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                    <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                    <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                        ${statusDependentHtml}

                    </ul>
                    </div>
                    `;

                        return html;
                    },
                    visible: true, cellClick: function (e, cell) {
                        cell.getElement().classList.add('active-cell');
                    },
                },
        ]

        function RlcGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'RLC' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             RlcFields = JSON.parse(response.data.KeyValue);
                             pageSize = Number(RlcFields.pageSize);
                             $('#RLCRows').val(pageSize);
                            RlcFields = JSON.parse(response.data.KeyValue).colDefs.filter(function (column) {
                                return column.field !== "rlcAction";
                            });

                            
                            
                            // Append the Actions array at the end of exportcolumn
                            RlcFields = RlcFields.concat(Actions3);

                       }
                    }
                         
                        populateCheckbox3();
                        RLCGetData();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideRlc(colName) {
       
            RLCTable.toggleColumn(colName);           
    
        }


          function populateCheckbox3(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = RlcFields.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideRlc('${x.field}')" class="custom-control-input title-input rlc-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });

               
                const columnListRlc = document.getElementById('RLCColumnList');
                columnListRlc.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#RLCRows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            RLCTable.setPageSize(pageSize);
                        }
                    }
                });
   

          }


        //RLCGetData();
        function RLCGetData() {

            var fromDaterlc = $("#fromDaterlc").val();
            var toDaterlc = $("#toDaterlc").val();
            var supplierIDrlc = $("#supplierIDrlc").val();
            var concernrlc = $("#concernrlc").val();
            var THead1 = $("#THead1").val();
            var itemgrpname1 = $("#itemgrpname1").val();

            var POLAPIURL = '@Url.Action("GetBBLCList2", "Variable")' + '?fromDate=' + fromDaterlc + '&toDate=' + toDaterlc + '&supplierid=' + supplierIDrlc + '&concernid=' + concernrlc + '&userId=' + THead1 + '&LCTypesId=' + itemgrpname1;
            RLCTable = new Tabulator("#rlcTable", {
                // data: dataTableFilter,
                dataTree: true,
                height: "350px",
                movableColumns: true,
                dataTreeStartExpanded: true,
                dataTreeChildField: "children",
                layout: "fitDataTable",
                selectable: 1,
                pagination: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000],
                paginationCounter: "rows",
                ajaxURL: POLAPIURL,
                ajaxConfig: "get",
                ajaxContentType: "json",

                ajaxResponse: function (url, params, response) {
                    RLCTable.setMaxPage(response.last_page);

                    dataLoadExpense = response.data; 

                    return {

                        data: dataLoadExpense,
                        last_page: response.last_page,

                    };
                },

                columns: RlcFields,
                ajaxURLGenerator: function (url, config, params) {
                    //return request url
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                },
                dataBound: function () {
                    // Freeze the top 1 row (index 0) after the table is created
                    var rows = table.getRows();
                    if (rows.length > 0) {
                        var cells = rows[0].getCells();
                        cells.forEach(cell => {
                            cell.freeze();
                        });
                    }
                },
            });

            
            function reloadTableData3() {
                var fromDaterlc = $("#fromDaterlc").val();
                var toDaterlc = $("#toDaterlc").val();
                var supplierIDrlc = $("#supplierIDrlc").val();
                var concernrlc = $("#concernrlc").val();
                var THead1 = $("#THead1").val();
                var itemgrpname1 = $("#itemgrpname1").val();
                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetBBLCList2", "Variable")' + '?fromDate=' + fromDaterlc + '&toDate=' + toDaterlc + '&supplierid=' + supplierIDrlc + '&concernid=' + concernrlc + '&userId=' + THead1 + '&LCTypesId=' + itemgrpname1;
                RLCTable.setData(apiUrl);
            }

            // Add event listeners to the From Date and To Date input fields
            $("#fromDaterlc, #toDaterlc, #supplierIDrlc, #concernrlc, #THead1, #itemgrpname1").on("change", function () {
                reloadTableData3();
            });


            //RLC gear functionalities starts=============
            
            // console.log("globalFieldsForSalesList::", RlcFields);
            // let columnListRLC = $("#RLCColumnList");
            //     columnListRLC.empty();
        
            // // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'RLC' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {                                                 
            //             $.each(RlcFields, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var BBLCLIST = `<li>
            //                                  <a class="dropdown-item" href="#">
            //                                  <div class="custom-control custom-checkbox" >
            //                                  <input type="checkbox" class="custom-control-input title-input rlc-column" id="${name}" value="${name}">
            //                                  <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                                  </div>
            //                                  </a>
            //                                  </li>`;
            //                 columnListRLC.append(BBLCLIST);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         RLCTable.showColumn(name);
            //                     } else {
            //                         RLCTable.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });

            //                 //Add event listener to the rows select input
            //                 $("#RLCRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             RLCTable.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(RlcFields, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     RLCTable.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     RLCTable.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input rlc-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListRLC.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         RLCTable.showColumn(name);
            //                     } else {
            //                         RLCTable.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#RLCRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         RLCTable.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            

            $("#saveRLC").on("click", function () {
                var columnData = [];

                var colDefs = RLCTable.getColumnDefinitions();

                var selectElement = document.getElementById("RLCRows");
                var selectedValue = selectElement.value; 

                $(".rlc-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                      colDefs.forEach(function(colDef) {
                      if (colDef.field === field) {
                          colDef.visible = isVisible;  // Set visibility based on checkbox state                
                      }
                    });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'RLC' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

            function DeleteFilter3(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             RLCGetData();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };
            
            //gear functionalities ends===============

        };
        function InactiveRLC(data) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteRBBLC", "Variable")',
                        type: "get",
                        data: { id: data },
                        traditional: true,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                RLCGetData();
                            }
                            else if (response.success == "0") {
                                //alert()
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                RLCGetData();
                            }
                            else
                            {
                                toastr.success("Access denied.", "", {
                                    "toastClass": "toast-red",
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                            toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                        }
                    });
                }
            });
        };
        document.getElementById("print-table-rlc").addEventListener("click", function () {
            RLCTable.print(false, true);
        });
        document.getElementById("download-xlsx-rlc").addEventListener("click", function () {
            RLCTable.download("xlsx", "RLC.xlsx", { sheetName: "RLC" });
        });

        
        //===========================rlc functionalities ends=======================

         $.ajax({
            type: "GET",
            url: '@Url.Action("concernDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#concernbblc').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });

        $.ajax({
            type: "GET",
            url: '@Url.Action("concernDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    // console.log("value dekhi country er", value);
                    $('#concernrlc').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                });
            }
        });

         $.ajax({
             type: "GET",
            url: '@Url.Action("supplierDrodpdown", "Variable")',
             datatype: "Json",
             success: function (data) {

                 $.each(data, function (index, value) {
                     //console.log("value dekhi buyer er",value);
                     $('#supplierIDbblc').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                 });
             }
                 });

        $.ajax({
             type: "GET",
            url: '@Url.Action("supplierDrodpdown", "Variable")',
             datatype: "Json",
             success: function (data) {

                 $.each(data, function (index, value) {
                     //console.log("value dekhi buyer er",value);
                     $('#supplierIDrlc').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                 });
             }
        });

        // $('#concernbblc').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetBBLCList1", "Variable")' + '?concernid=' + inputValue;
        //     BBLCTable.setData(url);
        // });
        $('#concernrlc').on('change', function () {
            var inputValue = $(this).val();
            var url = '@Url.Action("GetBBLCList2", "Variable")';
            var params = { concernid: inputValue };

            $.ajax({
                url: url,
                type: 'GET',
                data: params,
                dataType: 'json',
                success: function (response) {
                    RLCTable.setData(response.data);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });

        // $('#supplierIDbblc').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetBBLCList1", "Variable")' + '?supplierid=' + inputValue;
        //     BBLCTable.setData(url);
        // });
        $('#supplierIDrlc').on('change', function () {
            var inputValue = parseInt($(this).val());
            var url = '@Url.Action("GetBBLCList2", "Variable")'; // Base URL
            var params = { supplierid: inputValue }; // Parameters object

            $.ajax({
                url: url,
                type: 'GET',
                data: params, 
                dataType: 'json',
                success: function (response) {
                    RLCTable.setData(response.data);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        });

        // $('#fromDatebblc').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetBBLCList1", "Variable")' + '?fromDate=' + inputValue;
        //     BBLCTable.setData(url);
        // });
        // $('#toDatebblc').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetBBLCList1", "Variable")' + '?toDate=' + inputValue;
        //     BBLCTable.setData(url);
        // });
        // $('#fromDaterlc').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetBBLCList2", "Variable")'; 
        //     var params = { fromDate: inputValue }; 

        //     $.ajax({
        //         url: url,
        //         type: 'GET',
        //         data: params,
        //         dataType: 'json',
        //         success: function (response) {
        //             RLCTable.setData(response.data);
        //         },
        //         error: function (xhr, status, error) {
        //             console.error(error);
        //         }
        //     });
        // });
        // $('#toDaterlc').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetBBLCList2", "Variable")'; 
        //     var params = { toDate: inputValue }; 

        //     $.ajax({
        //         url: url,
        //         type: 'GET',
        //         data: params,
        //         dataType: 'json',
        //         success: function (response) {
        //             RLCTable.setData(response.data);
        //         },
        //         error: function (xhr, status, error) {
        //             console.error(error);
        //         }
        //     });
        // });









        //===========================import commercial invoice functionalities starts=====================

        var CITable;
        //CIGetData();


        var Actions4 = [
            {
                        title: "Actions", field: "ciAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `@Url.Action("UpdateCommercialInvoice", "Variable")?commercialInvoiceId=` + data.Id;
                            var cireport = `@Url.Action("PrintComInvoice", "Variable")?id=${data.Id}&type=pdf`;

                            var inActive = `InactiveCI(${data.Id}) `

                            var deleteHtml = `
                          <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                          <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                          </a>
                          `;

                            var reportHtml;

                            reportHtml = `
                                <a href='${cireport}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                    <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                                </a>
                                <div class='dropdown-divider m-0'></div>`;

                            
                           //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = reportHtml + deleteHtml;

                            var html = `
                      <div class='dropdown ms-1'>
                      <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                          ${statusDependentHtml}

                      </ul>
                      </div>
                      `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },
        ]


        function CIGear() {
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")',
                type: 'GET',
                contentType: 'application/json',
                data: { type: 'Commercial_Invoice' },
                success: function (response) {

                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if (response.Success == 1) {
                        if (response.data.KeyValue != null || response.data.KeyValue != "") {
                            CIFields = JSON.parse(response.data.KeyValue);
                            pageSize = Number(CIFields.pageSize);
                            $('#ciRows').val(pageSize);
                            CIFields = JSON.parse(response.data.KeyValue).colDefs.filter(function (column) {
                                return column.field !== "ciAction";
                            });
                          

                            // Append the Actions array at the end of realizationcolumn
                            CIFields = CIFields.concat(Actions4);

                        }
                    }

                    populateCheckbox4();
                    CIGetData();
                },

                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideCI(colName) {

            CITable.toggleColumn(colName);

        }


        function populateCheckbox4() {
            //let columnListMasterLC = $("#POLColumnList");
            let items = CIFields.map(x => {
                var titles = `<li>
                                    <a class="dropdown-item" href="#">
                                        <div class="custom-control custom-checkboxs">
                                            <input type="checkbox" onclick = "showHideCI('${x.field}')" class="custom-control-input title-input ci-column" id="${x.field}" value="${x.field}" ${x.visible ? 'checked' : ''}>
                                            <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                        </div>
                                    </a>
                                    </li>`;
                return titles;

            });


            const columnListCI = document.getElementById('ciColumnList');
            columnListCI.innerHTML = items.join('');
            $('.custom-control-label').on('click', function (e) {
                e.stopPropagation();
            });
            $('#dropdown-titles').on('click', function (e) {
                e.stopPropagation();
            });

            // Handle change event for #customer-rows
            $("#ciRows").on("change", function () {
                var selectedRows = $(this).val();
                if (selectedRows !== null) {
                    var pageSize = parseInt(selectedRows);
                    if (!isNaN(pageSize)) {
                        CITable.setPageSize(pageSize);
                    }
                }
            });


        }


        function CIGetData() {

            var fromDateci = $("#fromDateci").val();
            var toDateci = $("#toDateci").val();
            var supplierci = $("#supplierci").val();
            var LoadType = $("input[name=LoadType]:checked").val();
            var THead2 = $("#THead2").val();

            var POLAPIURL = '@Url.Action("GetCommercialInvoiceList1", "Variable")' + '?fromDate=' + fromDateci + '&toDate=' + toDateci + '&supplierId=' + supplierci + '&LoadType=' + LoadType + '&userId=' + THead2;
            CITable = new Tabulator("#ciTable", {
                // data: dataTableFilter,
                dataTree: true,
                height: "350px",
                movableColumns: true,
                dataTreeStartExpanded: true,
                dataTreeChildField: "children",
                layout: "fitDataTable",
                selectable: 1,
                pagination: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000],
                paginationCounter: "rows",
                ajaxURL: POLAPIURL,
                ajaxConfig: "get",
                ajaxContentType: "json",

                ajaxResponse: function (url, params, response) {
                    CITable.setMaxPage(response.last_page);
                    // //console.log("response.last_page", response.last_page);

                    dataLoadExpense = response.data;
                    // console.log("dataLoadExpense abc:", dataLoadExpense);

                    return {

                        data: dataLoadExpense,
                        last_page: response.last_page,

                    };
                },

                columns: CIFields,
                ajaxURLGenerator: function (url, config, params) {
                    //return request url
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                },
                dataBound: function () {
                    // Freeze the top 1 row (index 0) after the table is created
                    var rows = table.getRows();
                    if (rows.length > 0) {
                        var cells = rows[0].getCells();
                        cells.forEach(cell => {
                            cell.freeze();
                        });
                    }
                },
            });


            function reloadTableData2() {
                var fromDateci = $("#fromDateci").val();
                var toDateci = $("#toDateci").val();
                var supplierci = $("#supplierci").val();
                var LoadType = $("input[name=LoadType]:checked").val();
                var THead2 = $("#THead2").val();
                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetCommercialInvoiceList1", "Variable")' + '?fromDate=' + fromDateci + '&toDate=' + toDateci + '&supplierId=' + supplierci + '&LoadType=' + LoadType + '&userId=' + THead2;
                CITable.setData(apiUrl);
            }

            // Add event listeners to the From Date and To Date input fields
            $("#fromDateci, #toDateci, #supplierci, input[name=LoadType], #THead2").on("change", function () {
                reloadTableData2();
            });


            //Commercial Invoice gear functionalities starts=============
            
            // console.log("globalFieldsForSalesList::", CIFields);
            // let columnListCI = $("#ciColumnList");
            //     columnListCI.empty();
        
            // // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'Commercial Invoice' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {                                                   
            //             $.each(CIFields, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var BBLCLIST = `<li>
            //                                  <a class="dropdown-item" href="#">
            //                                  <div class="custom-control custom-checkbox" >
            //                                  <input type="checkbox" class="custom-control-input title-input ci-column" id="${name}" value="${name}">
            //                                  <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                                  </div>
            //                                  </a>
            //                                  </li>`;
            //                 columnListCI.append(BBLCLIST);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         CITable.showColumn(name);
            //                     } else {
            //                         CITable.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });

            //                 //Add event listener to the rows select input
            //                 $("#ciRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             CITable.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(CIFields, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     CITable.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     CITable.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input ci-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListCI.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         CITable.showColumn(name);
            //                     } else {
            //                         CITable.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#ciRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         CITable.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            

            $("#saveCI").on("click", function () {
                var columnData = [];

                var colDefs = CITable.getColumnDefinitions();

                var selectElement = document.getElementById("ciRows");
                var selectedValue = selectElement.value;

                $(".ci-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                      colDefs.forEach(function(colDef) {
                      if (colDef.field === field) {
                          colDef.visible = isVisible;  // Set visibility based on checkbox state                
                      }
                    });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'Commercial_Invoice' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

             function DeleteFilter4(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             CIGetData();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };
          
            //gear functionalities ends===============

        };
        function InactiveCI(data) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteCommercialInvoice", "Variable")',
                        type: "get",
                        data: { id: data },
                        traditional: true,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                CIGetData();
                            }
                            else if (response.success == "0") {
                                //alert()
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                CIGetData();
                            }
                            else
                            {
                                toastr.success("Access denied.", "", {
                                    "toastClass": "toast-red",
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                            toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                        }
                    });
                }
            });
        };
        document.getElementById("print-table-bblc").addEventListener("click", function () {
            CITable.print(false, true);
        });
        document.getElementById("download-xlsx-bblc").addEventListener("click", function () {
            CITable.download("xlsx", "Commercial Invoice.xlsx", { sheetName: "Commercial Invoice" });
        });

        //====search functionality==========
        // $('#searchInputci').on('input', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetCommercialInvoiceList", "Variable")' + '?searchquery=' + inputValue;
        //     CITable.setData(url);
        // });
        //===========================import commercial invoice functionalities ends=======================

        $.ajax({
            type: "GET",
            url: '@Url.Action("supplierDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    //console.log("value dekhi buyer er",value);
                    $('#supplierci').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                });
            }
        });


        $.ajax({
            type: "GET",
            url: '@Url.Action("supplierDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    //console.log("value dekhi buyer er",value);
                    $('#supplierDA').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                });
            }
        });

        $.ajax({
            type: "GET",
            url: '@Url.Action("supplierDrodpdown", "Variable")',
            datatype: "Json",
            success: function (data) {

                $.each(data, function (index, value) {
                    //console.log("value dekhi buyer er",value);
                    $('#supplierWO').append('<option value="' + value.Value + '" >' + value.Text + '</option>');
                });
            }
        });

        // $('#supplierci').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetCommercialInvoiceList1", "Variable")' + '?supplierId=' + inputValue;
        //     CITable.setData(url);
        // });
        // $('#fromDateci').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetCommercialInvoiceList1", "Variable")' + '?fromDate=' + inputValue;
        //     CITable.setData(url);
        // });
        // $('#toDateci').on('change', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetCommercialInvoiceList1", "Variable")' + '?toDate=' + inputValue;
        //     CITable.setData(url);
        // });









        //===========================document acceptance functionalities starts=====================

        var DATable;
        //DAGetData();

        var Actions5 = [
            {
               title: "Actions", field: "DAAction", headerHozAlign: "center", headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                    var data = cell.getData();
                    //console.log("seeeee data::", data);
                    var Edit = `@Url.Action("UpdateDocumentAcceptance", "Variable")?DocumentAcceptanceid=` + data.Id;
                    var inActive = `InactiveDA(${data.Id}) `

                    var deleteHtml = `
                        <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                        <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                        </a>
                        `;


                    //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                    var statusDependentHtml = deleteHtml;

                    var html = `
                        <div class='dropdown ms-1'>
                        <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                        <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                        <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                            ${statusDependentHtml}

                        </ul>
                        </div>
                        `;

                    return html;
                },
                visible: true, cellClick: function (e, cell) {
                    // Add a custom class to the cell when it's clicked
                    cell.getElement().classList.add('active-cell');
                },
            },
        ]


        function DAGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Doc_Acceptance' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             DAFields = JSON.parse(response.data.KeyValue);
                             pageSize = Number(DAFields.pageSize);
                             $('#diRows').val(pageSize);
                             DAFields = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "DAAction";
                            });
                            
                            
                            // Append the Actions array at the end of realizationcolumn
                            DAFields = DAFields.concat(Actions5);

                       }
                    }
                         
                        populateCheckbox5();
                        DAGetData();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideDA(colName) {
       
            DATable.toggleColumn(colName);           
    
        }


          function populateCheckbox5(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = DAFields.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideDA('${x.field}')" class="custom-control-input title-input da-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListDA = document.getElementById('diColumnList');
                columnListDA.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#diRows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            DATable.setPageSize(pageSize);
                        }
                    }
                });
   

          }


        function DAGetData() {

            var fromDateDA = $("#fromDateDA").val();
            var toDateDA = $("#toDateDA").val();
            var supplierDA = $("#supplierDA").val();

            var POLAPIURL = '@Url.Action("GetDocumentAcceptanceList1", "Variable")' + '?fromDate=' + fromDateDA + '&toDate=' + toDateDA + '&supplierId=' + supplierDA;
            DATable = new Tabulator("#DATable", {
                // data: dataTableFilter,
                dataTree: true,
                height: "350px",
                movableColumns: true,
                dataTreeStartExpanded: true,
                dataTreeChildField: "children",
                layout: "fitColumns",
                selectable: 1,
                pagination: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000],
                paginationCounter: "rows",
                ajaxURL: POLAPIURL,
                ajaxConfig: "get",
                ajaxContentType: "json",

                ajaxResponse: function (url, params, response) {
                    DATable.setMaxPage(response.last_page);
                    // //console.log("response.last_page", response.last_page);

                    dataLoadExpense = response.data;
                    // console.log("dataLoadExpense abc:", dataLoadExpense);

                    return {

                        data: dataLoadExpense,
                        last_page: response.last_page,

                    };
                },

                columns: DAFields,
                ajaxURLGenerator: function (url, config, params) {
                    //return request url
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                },
                dataBound: function () {
                    // Freeze the top 1 row (index 0) after the table is created
                    var rows = table.getRows();
                    if (rows.length > 0) {
                        var cells = rows[0].getCells();
                        cells.forEach(cell => {
                            cell.freeze();
                        });
                    }
                },
            });

           
            function reloadTableData4() {
                var fromDateDA = $("#fromDateDA").val();
                var toDateDA = $("#toDateDA").val();
                var supplierDA = $("#supplierDA").val();
                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetDocumentAcceptanceList1", "Variable")' + '?fromDate=' + fromDateDA + '&toDate=' + toDateDA + '&supplierId=' + supplierDA;
                DATable.setData(apiUrl);
            }

            // Add event listeners to the From Date and To Date input fields
            $("#fromDateDA, #toDateDA, #supplierDA").on("change", function () {
                reloadTableData4();
            });


            //DA gear functionalities starts=============
            
            // console.log("globalFieldsForSalesList::", DAFields);
            // let columnListDA = $("#diColumnList");
            //     columnListDA.empty();
        
            // // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'Doc. Acceptance' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {                                       
            //             $.each(DAFields, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var DALIST = `<li>
            //                                 <a class="dropdown-item" href="#">
            //                                 <div class="custom-control custom-checkbox" >
            //                                 <input type="checkbox" class="custom-control-input title-input da-column" id="${name}" value="${name}">
            //                                 <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                                 </div>
            //                                 </a>
            //                                 </li>`;
            //                 columnListDA.append(DALIST);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         DATable.showColumn(name);
            //                     } else {
            //                         DATable.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });

            //                 //Add event listener to the rows select input
            //                 $("#diRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             DATable.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(DAFields, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     DATable.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     DATable.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input da-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListDA.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         DATable.showColumn(name);
            //                     } else {
            //                         DATable.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#diRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         DATable.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            
             
            $("#saveDA").on("click", function () {
                var columnData = [];

                var colDefs = DATable.getColumnDefinitions();

                var selectElement = document.getElementById("diRows");
                var selectedValue = selectElement.value;

                $(".da-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                      colDefs.forEach(function(colDef) {
                          if (colDef.field === field) {
                             colDef.visible = isVisible;  // Set visibility based on checkbox state                
                          }
                      });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs:colDefs,
                    pageSize: selectedValue 
                };

                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'Doc_Acceptance' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

            function DeleteFilter5(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             DAGetData();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };
           
            //gear functionalities ends===============

        };
        function InactiveDA(data) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteDocumentAcceptance", "Variable")',
                        type: "get",
                        data: { id: data },
                        traditional: true,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                DAGetData();
                            }
                            else if (response.success == "0") {
                                //alert()
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                DAGetData();
                            }
                            else
                            {
                                toastr.success("Access denied.", "", {
                                    "toastClass": "toast-red",
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                            toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                        }
                    });
                }
            });
        };
        document.getElementById("print-table-ci").addEventListener("click", function () {
            DATable.print(false, true);
        });
        document.getElementById("download-xlsx-ci").addEventListener("click", function () {
            DATable.download("xlsx", "Document Acceptance.xlsx", { sheetName: "Document Acceptance" });
        });

        //====search functionality==========
        // $('#searchInputDI').on('input', function () {
        //     var inputValue = $(this).val();
        //     var url = '@Url.Action("GetDocumentAcceptanceList", "Variable")' + '?searchquery=' + inputValue;
        //     DATable.setData(url);
        // });
        //===========================document acceptance functionalities ends=======================



        //===========================work order functionalities starts=====================

        var WorkOrder;

        var Actions6 = [
             {
                        title: "Actions", field: "WOAction", headerHozAlign: "center",frozen: true, headerSort: false, hozAlign: "center", resizable: false, width: 170, visible: true, formatter: function (cell, formatterParams, onRendered) {
                            var data = cell.getData();
                            //console.log("seeeee data::", data);
                            var Edit = `@Url.Action("UpdateWorkOrder", "Variable")?WorkOrderId=` + data.Id;
                            var Woreport = `@Url.Action("PrintWorkOrder", "Variable")?id=${data.Id}&type=pdf`;

                            var inActive = `InactiveWO(${data.Id}) `

                            var deleteHtml = `
                                      <a onclick='${inActive}' class='text-decoration-none text-black ms-3 mt-1 full-width' href='#' id='inactive'>
                                      <i class="bi bi-trash3"></i><span class='ms-1 mt-2'>Delete</span><br />
                                      </a>
                                      `;

                            var reportHtml;

                            reportHtml = `
                              <a href='${Woreport}' target='_blank' class='text-decoration-none text-black ms-3 mt-1'>
                                         <i class='bi bi-pencil-square pe-1'></i> <span>Report</span>  <br />
                              </a>
                             <div class='dropdown-divider m-0'></div>`;



                            //var statusDependentHtml = data.isPosted ? viewHtml + deleteHtml : editHtml + deleteHtml;
                            var statusDependentHtml = reportHtml + deleteHtml;

                            var html = `
                                      <div class='dropdown ms-1'>
                                      <a href='${Edit}' target="_blank" class='fw-bolder mt-2'>View/Edit</a>
                                      <button class='btn dropdown-toggle' type='button' id='dropdownMenuButton1' data-bs-toggle='dropdown' aria-expanded='false'></button>
                                      <ul class='dropdown-menu' aria-labelledby='dropdownMenuButton1' style="width: 57%;">
                                          ${statusDependentHtml}

                                      </ul>
                                      </div>
                                      `;

                            return html;
                        },
                        visible: true, cellClick: function (e, cell) {
                            // Add a custom class to the cell when it's clicked
                            cell.getElement().classList.add('active-cell');
                        },
                    },
        ]


        function WOGear(){
            $.ajax({
                url: '@Url.Action("GetFilteredColumn", "Sales")', 
                type: 'GET',
                contentType: 'application/json',
                data: {type: 'Work_Order' },
                success: function (response) {
    
                    // console.log("check munna::", JSON.parse(response.data.KeyValue));

                    if( response.Success == 1){
                         if(response.data.KeyValue != null || response.data.KeyValue != "" ){
                             WOFields = JSON.parse(response.data.KeyValue);
                             pageSize = Number(WOFields.pageSize);
                             $('#WorkOrderRows').val(pageSize);
                             WOFields = JSON.parse(response.data.KeyValue).colDefs.filter(function(column) {
                                return column.field !== "WOAction";
                            });                            
                            
                            // Append the Actions array at the end of realizationcolumn
                            WOFields = WOFields.concat(Actions6);

                       }
                    }
                         
                        populateCheckbox6();
                        WorkOrderGetData();
                    },
    
                error: function (error) {
                    // Handle error
                    console.error("Error saving settings:", error);
                }
            });

        }


        function showHideWO(colName) {

            WorkOrder.toggleColumn(colName);

        }


          function populateCheckbox6(){
              //let columnListMasterLC = $("#POLColumnList");
              let items = WOFields.map(x => {
              var titles = `<li>
                            <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkboxs">
                                    <input type="checkbox" onclick = "showHideWO('${x.field}')" class="custom-control-input title-input wo-column" id="${x.field}" value="${x.field}" ${x.visible?'checked' : ''}>
                                    <label class="custom-control-label w-100 cursor-pointer" id="${x.field}" for="${x.field}">${x.title}</label>
                                </div>
                            </a>
                            </li>`;
                            return titles;
            
              });


                const columnListWO = document.getElementById('WorkOrderColumnList');
                columnListWO.innerHTML = items.join('');
                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                // Handle change event for #customer-rows
                $("#WorkOrderRows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            WorkOrder.setPageSize(pageSize);
                        }
                    }
                });
   

          }



        //WorkOrderGetData();
        function WorkOrderGetData() {

            var fromDateWO = $("#fromDateWO").val();
            var toDateWO = $("#toDateWO").val();
            var supplierWO = $("#supplierWO").val();

            var POLAPIURL = '@Url.Action("GetWorkOrderList1", "Variable")' + '?fromDate=' + fromDateWO + '&toDate=' + toDateWO + '&supplierId=' + supplierWO;
            WorkOrder = new Tabulator("#WorkOrderTable", {
                // data: dataTableFilter,
                dataTree: true,
                height: "350px",
                movableColumns: true,
                dataTreeStartExpanded: true,
                dataTreeChildField: "children",
                layout: "fitDataTable",
                selectable: 1,
                pagination: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: pageSize,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000],
                paginationCounter: "rows",
                ajaxURL: POLAPIURL,
                ajaxConfig: "get",
                ajaxContentType: "json",

                ajaxResponse: function (url, params, response) {
                    WorkOrder.setMaxPage(response.last_page);
                    // //console.log("response.last_page", response.last_page);

                    dataLoadExpense = response.data;
                    // console.log("dataLoadExpense abc:", dataLoadExpense);

                    return {

                        data: dataLoadExpense,
                        last_page: response.last_page,

                    };
                },

                columns: WOFields,
                ajaxURLGenerator: function (url, config, params) {
                    //return request url
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params)); //encode parameters as a json object
                },
                dataBound: function () {
                    // Freeze the top 1 row (index 0) after the table is created
                    var rows = table.getRows();
                    if (rows.length > 0) {
                        var cells = rows[0].getCells();
                        cells.forEach(cell => {
                            cell.freeze();
                        });
                    }
                },
            });

           
            function reloadTableData5() {
                var fromDateWO = $("#fromDateWO").val();
                var toDateWO = $("#toDateWO").val();
                var supplierWO = $("#supplierWO").val();
                // Assuming you have a server-side endpoint that accepts From Date and To Date as parameters
                var apiUrl = '@Url.Action("GetWorkOrderList1", "Variable")' + '?fromDate=' + fromDateWO + '&toDate=' + toDateWO + '&supplierId=' + supplierWO;
                WorkOrder.setData(apiUrl);
            }

            // Add event listeners to the From Date and To Date input fields
            $("#fromDateWO, #toDateWO, #supplierWO").on("change", function () {
                reloadTableData5();
            });


            //Work Order gear functionalities starts=============
            
            //  console.log("globalFieldsForSalesList::", WOFields);
            // let columnListWO = $("#WorkOrderColumnList");
            //     columnListWO.empty();
        
            // // Initialize columns page load
            // $.ajax({
            //     url: '@Url.Action("GetFilteredColumn", "Sales")', 
            //     type: 'GET',
            //     contentType: 'application/json',
            //     data: {type: 'Work Order' },
            //     success: function (response) {
            
            //         if(response.Success == 0)
            //         {      
            //             $.each(WOFields, function (index, field) {
            //                 //console.log("GLOBAL 2::",field);
            //                 var title = field.title;
            //                 var name = field.field;
            //                 var visible = true;
            //                 if (field.visible == false) {
            //                     visible = false;
            //                 }
            //                 var WOList = `<li>
            //                                 <a class="dropdown-item" href="#">
            //                                 <div class="custom-control custom-checkbox" >
            //                                 <input type="checkbox" class="custom-control-input title-input wo-column" id="${name}" value="${name}">
            //                                 <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                                 </div>
            //                                 </a>
            //                                 </li>`;
            //                 columnListWO.append(WOList);

            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         WorkOrder.showColumn(name);
            //                     } else {
            //                         WorkOrder.hideColumn(name);
            //                     }
            //                 });


            //                 $(`${'#' + name}`).prop('checked', visible);


            //                 $('.custom-control-label').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
            //                 $('#dropdown-titles').on('click', function (e) {
            //                     e.stopPropagation();
            //                 });
                
            //                 //Add event listener to the rows select input
            //                 $("#WorkOrderRows").on("change", function () {
            //                     var selectedRows = $(this).val();
            //                     if (selectedRows !== null) {
            //                         var pageSize = parseInt(selectedRows);
            //                         if (!isNaN(pageSize)) {
            //                             WorkOrder.setPageSize(pageSize);
            //                         }
            //                     }
            //                 });

            //             });
            //         }
            //         else
            //         {
            //             var jsonData = response.data.KeyValue;
            //             var columnData = JSON.parse(jsonData);

                   
            //             $.each(WOFields, function (index, globalField) {
            //                 var matchedField = columnData.find(function (fieldData) {
            //                     return fieldData.Field === globalField.field;
            //                 });

            //                 // If a match is found, update the visibility
            //                 if (matchedField) {
            //                     globalField.visible = matchedField.IsVisible;
            //                 } else {
            //                     globalField.visible = false; // Default to false if not found
            //                 }

            //                 if (matchedField.IsVisible == false) {
            //                     setTimeout(function() {
            //                     WorkOrder.hideColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 else
            //                 {
            //                     setTimeout(function() {
            //                     WorkOrder.showColumn(matchedField.Field);
            //                     }, 1000);
            //                 }
            //                 var title = globalField.title;
            //                 var name = globalField.field;
            //                 var visible = globalField.visible;

            //                 var titles = `<li>
            //                 <a class="dropdown-item" href="#">
            //                     <div class="custom-control custom-checkboxs">
            //                         <input type="checkbox" class="custom-control-input title-input wo-column" id="${name}" value="${name}">
            //                         <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
            //                     </div>
            //                 </a>
            //                 </li>`;

            //                 // Append the generated HTML to your column list
            //                 columnListWO.append(titles);

            //                 // Set the checkbox state based on visibility
            //                 $(`#${name}`).prop('checked', visible);

            //                 // Add event listener to the checkbox to show/hide columns
            //                 document.querySelector(`#${name}`).addEventListener('click', function (event) {
            //                     var checkbox = event.target;
            //                     var isChecked = checkbox.checked;

            //                     if (isChecked) {
            //                         WorkOrder.showColumn(name);
            //                     } else {
            //                         WorkOrder.hideColumn(name);
            //                     }
            //                 });
            //             });

            //             // Prevent the dropdown from closing when clicking on a checkbox or label
            //             $('.custom-control-label').on('click', function (e) {
            //                 e.stopPropagation();
            //             });
            //             $('#dropdown-titles').on('click', function (e) {
            //                 e.stopPropagation();
            //             });

            //             // Handle change event for #customer-rows
            //             $("#WorkOrderRows").on("change", function () {
            //                 var selectedRows = $(this).val();
            //                 if (selectedRows !== null) {
            //                     var pageSize = parseInt(selectedRows);
            //                     if (!isNaN(pageSize)) {
            //                         WorkOrder.setPageSize(pageSize);
            //                     }
            //                 }
            //             });

            //         }
            //     },
            //     error: function (error) {
            //         // Handle error
            //         console.error("Error saving settings:", error);
            //     }
            // });

            

            $("#saveWO").on("click", function () {
                var columnData = [];

                var colDefs = WorkOrder.getColumnDefinitions();

                var selectElement = document.getElementById("WorkOrderRows");
                var selectedValue = selectElement.value;

                $(".wo-column").each(function () {
                    var field = $(this).val();
                    var title = $(`label[for='${field}']`).text();
                    var isVisible = $(this).is(":checked");

                      colDefs.forEach(function(colDef) {
                          if (colDef.field === field) {
                              colDef.visible = isVisible;  // Set visibility based on checkbox state                
                          }
                      });

                    // columnData.push({
                    //     Title: title,
                    //     Field: field,
                    //     IsVisible: isVisible
                    // });
                });

                var finaldata = {
                    colDefs: colDefs,
                    pageSize: selectedValue
                };
                 
                var jsonData = JSON.stringify(finaldata);

                // Send data via AJAX
                $.ajax({
                    url: '@Url.Action("ColumnFilterCreation", "Sales")', // Update with your controller/action
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ keyValue: jsonData, type: 'Work_Order' }),
                    success: function (response) {
                        toastr.success(response.ex, "", {
                            "toastClass": "toast-green",
                        });
                    },
                    error: function (error) {
                        // Handle error
                        console.error("Error saving settings:", error);
                    }
                });
            });

             function DeleteFilter6(data) {
 
                 $.ajax({
                     url: '@Url.Action("DeleteColumnFilter", "Sales")',
                     type: "get",
                     data: { type: data },               
                     success: function (response) {
                         if (response.success == "1") {
                             toastr.success(response.msg, "", {
                                 "toastClass": "toast-green",
                             });
                             WorkOrderGetData();
                         }
         
                     },
                     error: function (xhr, status, error) {
                         console.error(xhr.responseText);
                         toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                     }
                 });
    
 
            };

            
            //gear functionalities ends===============

        };
        function InactiveWO(data) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteWorkOrder", "Variable")',
                        type: "get",
                        data: { id: data },
                        traditional: true,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                WorkOrderGetData();
                            }
                            else if (response.success == "0") {
                                //alert()
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                WorkOrderGetData();
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                            toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                        }
                    });
                }
            });
        };
        document.getElementById("print-table-WorkOrder").addEventListener("click", function () {
            WorkOrder.print(false, true);
        });
        document.getElementById("download-xlsx-WorkOrder").addEventListener("click", function () {
            WorkOrder.download("xlsx", "Document Acceptance.xlsx", { sheetName: "Document Acceptance" });
        });


        //===========================Import Document functionalities starts=====================

        var ImportDocument;
        //WorkOrderGetData();
        function ImportDocumentGetData() {
            console.log("ImportDocumentGetData function called");

            var fromDateID = $("#fromDateID").val();
            var toDateID = $("#toDateID").val();
            var CommercialCompanyId = $("#CommercialCompanyId").val() || 0;

            var POLAPIURL = '@Url.Action("GetImportDocumentList1", "Variable")' + '?fromDate=' + fromDateID + '&toDate=' + toDateID + '&CommercialCompanyId=' + CommercialCompanyId;
            console.log("POLAPIURL: ", POLAPIURL);

            ImportDocument = new Tabulator("#ImportDocumentTable", {
                dataTree: true,
                height: "350px",
                dataTreeStartExpanded: true,
                dataTreeChildField: "children",
                layout: "fitColumns",
                selectable: 1,
                pagination: true,
                paginationMode: "remote",
                filterMode: "remote",
                paginationSize: 5,
                paginationInitialPage: 1,
                paginationSizeSelector: [5, 10, 25, 50, 100, 500, 1000],
                paginationCounter: "rows",
                ajaxURL: POLAPIURL,
                ajaxConfig: "get",
                ajaxContentType: "json",
                ajaxResponse: function (url, params, response) {
                    ImportDocument.setMaxPage(response.last_page);
                    dataLoadExpense = response.data;
                    return {
                        data: dataLoadExpense,
                        last_page: response.last_page,
                    };
                },
                columns: globalFieldsImport,
                ajaxURLGenerator: function (url, config, params) {
                    return url + "&searchquery=" + encodeURIComponent(JSON.stringify(params));
                },
                dataBound: function () {
                    var rows = ImportDocument.getRows();
                    if (rows.length > 0) {
                        var cells = rows[0].getCells();
                        cells.forEach(cell => {
                            cell.freeze();
                        });
                    }
                },
            });

            function reloadTableDataID() {
                console.log("Reloading table data");
                var fromDateWO = $("#fromDateID").val();
                var toDateWO = $("#toDateID").val();
                var CommercialCompanyId = $("#CommercialCompanyId").val();
                var apiUrl = '@Url.Action("GetImportDocumentList1", "Variable")' + '?fromDate=' + fromDateWO + '&toDate=' + toDateWO + '&CommercialCompanyId=' + CommercialCompanyId;
                ImportDocument.setData(apiUrl);
            }

            $("#fromDateID, #toDateID, #CommercialCompanyId").on("change", function () {
                reloadTableDataID();
            });

            
            //Import Document gear functionalities starts=============

            var columnListImD = $("#ImportDocColumnList");

            $.each(globalFieldsImport, function (index, field) {
                var title = field.title;
                var name = field.field;
                var visible = true;
                if (field.visible == false) {
                    visible = false;
                }
                var WOList = `<li>
                                <a class="dropdown-item" href="#">
                                <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input title-input" id="${name}" value="${name}">
                                <label class="custom-control-label w-100 cursor-pointer" id="${name}" for="${name}">${title}</label>
                                </div>
                                </a>
                                </li>`;
                columnListImD.append(WOList);

                document.querySelector(`#${name}`).addEventListener('click', function (event) {
                    var checkbox = event.target;
                    var isChecked = checkbox.checked;

                    if (isChecked) {
                        ImportDocument.showColumn(name);
                    } else {
                        ImportDocument.hideColumn(name);
                    }
                });

                $(`${'#' + name}`).prop('checked', visible);

                $('.custom-control-label').on('click', function (e) {
                    e.stopPropagation();
                });
                $('#dropdown-titles').on('click', function (e) {
                    e.stopPropagation();
                });

                $("#ImportDocumentRows").on("change", function () {
                    var selectedRows = $(this).val();
                    if (selectedRows !== null) {
                        var pageSize = parseInt(selectedRows);
                        if (!isNaN(pageSize)) {
                            ImportDocument.setPageSize(pageSize);
                        }
                    }
                });
            });

            //gear functionalities ends===============

        }
        function InactiveID(data) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteImportDocument", "Variable")',
                        type: "get",
                        data: { id: data },
                        traditional: true,
                        success: function (response) {
                            if (response.success == "1") {
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-green",
                                });
                                WorkOrderGetData();
                            }
                            else if (response.success == "0") {
                                //alert()
                                toastr.success(response.msg, "", {
                                    "toastClass": "toast-red",
                                });
                                WorkOrderGetData();
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                            toastr.error("Error during delete.", "", { "toastClass": "toast-red" });
                        }
                    });
                }
            });
        };
        document.getElementById("print-table-ImportDoc").addEventListener("click", function () {
            ImportDocument.print(false, true);
        });
        document.getElementById("download-xlsx-ImportDoc").addEventListener("click", function () {
            ImportDocument.download("xlsx", "Document Acceptance.xlsx", { sheetName: "Document Acceptance" });
        });

        //====search functionality==========
        var currentPOLId = $("#POLID").val();
        var BtnSave = document.querySelector('#SavePOLBtn');
        function getPI(callback) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetProformaList", "Variable")',
                dataType: "json",
                success: function (data) {
                    var SizeCodeGetArray = [];

                    data.data.forEach(function (item) {
                        var SizeName = item.PINo;
                        var SizeIdGet = item.Id;
                        var SizeData = {
                            SizeName: SizeName,
                            Id: SizeIdGet
                        };
                        SizeCodeGetArray.push(SizeData);
                    });

                    if (typeof callback === "function") {
                        callback(SizeCodeGetArray);
                    }
                },
                error: function (error) {
                    console.error("Error:", error);
                }
            });
        }

        function checkPOLExists(sizeName) {
            getPI(function (data) {
                var lowercasedSizeName = sizeName.toLowerCase();

                var sizeExists = data.some(function (item) {

                    if (currentPOLId == item.Id) {
                        return false;
                    }

                    return item.SizeName.trim().toLowerCase() === lowercasedSizeName;
                });

                console.log("sizeExists", sizeExists);

                if (sizeExists) {
                    $("#pinoValidation").html("Already has the same PI No!");
                    BtnSave.disabled = true; 
                } else {
                    $("#pinoValidation").html("");
                    BtnSave.disabled = false; 

                }
            });
        }

        var POLNameHandle = document.getElementById("pino");
        POLNameHandle.addEventListener("input", function () {

            var enteredSizeName = POLNameHandle.value;
            checkPOLExists(enteredSizeName);
        });
        //===========================document acceptance functionalities ends=======================


         //$('select').select2();
    </script>
}