using Atrai.Core.Common;
using Atrai.Data.Interfaces;
using Atrai.Data.Repository;
using Atrai.Model.Core.Entity;
using Atrai.Model.Core.ViewModel;
using Atrai.Services;
using DataTablesParser;
using DocumentFormat.OpenXml.Bibliography;
using ExcelDataReader;
using Invoice.Core.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
//using Atrai.Data.Reports;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using static Atrai.Controllers.AdminController;
using static Atrai.Controllers.ValuesController;

namespace Atrai.Controllers
{
    //fahad
    //Fahad

    #region Referance
    //[Authorize]
    [OverridableAuthorize]
    public class AccountsController : Controller
    {
        public TransactionLogRepository tranlog { get; }
        private readonly IVoucherTranGroupRepository _VoucherTranGroupRepository;
        private readonly ITransactionApprovalStatusRepository transactionApprovalStatusRepository;
        private readonly IReportStyleRepository reportStyleRepository;
        private readonly IAccVoucherTranGroupRepository _accVoucherTranGroupRepository;
        private readonly IWebHostEnvironment _webHostEnvironment;
        private readonly IMasterSalesTaxRepository _mastersalestaxRepository;
        private readonly IDocPrefixRepository docPrefixRepository;
        private readonly IPurchaseItemsRepository _purchaseItemsRepository;
        private readonly IAuditLogRepository _auditLogRepository;

        private readonly IAccVoucherTagsRepository _accVoucherTagsRepository;
        private readonly IRecurringDetailsRepository recurringDetailsRepository;
        private readonly IAccFiscalYearRepository _fiscalyearRepository;
        private readonly ICategoryRepository _categoryRepository;
        private readonly IBrandRepository _brandRepository;
        private readonly ICategoryTypeRepository categoryTypeRepository;
        private readonly IUnitConversionRepository unitConversionRepository;

        public clsProcedure clsProc { get; }

        private readonly IAdvanceTrasactionTrackingRepository advanceTransactionTrackingRepository;
        private readonly IMasterPORepository _masterPORepository;
        private readonly IMasterPODetailsRepository _masterPODetailsRepository;


        private readonly IStyleRepository _styleRepository;
        private readonly IColorChildRepository _colorChildRepository;
        private readonly ISizeChildRepository _sizeChildRepository;
        private readonly ITransactionRepository _transactionRepository;



        private readonly IProductRepository productRepository;
        private readonly IWarehouseRepository _warehouseRepository;
        private readonly IDocTypeRepository _docTypeRepository;

        private readonly IFromWarehousePermissionRepository _FromWarehousePermissionRepository;
        //private readonly IToWarehousePermissionRepository _ToWarehousePermissionRepository;
        private readonly IAccountHeadPermissionRepository _AccountHeadPermissionRepository;
        private readonly ITagsRepository tagsRepository;

        private readonly IUserAccountRepository _userAccountRepository;
        private readonly ISubSectionRepository _subSectionRepository;

        private readonly IAccVoucherTypeRepository _VoucherTypeRepository;
        private readonly IAccVoucherCreatedTypeRepository _accVoucherCreatedTypeRepository;
        private readonly IAccVoucherMainRepository _accVoucherRepository;
        private readonly IAccVoucherSubRepository _accVoucherSubRepository;
        private readonly IAccVoucherNoPrefixRepository _accVoucherNoPrefixRepository;
        private readonly IAccFiscalYearRepository _accFiscalYearRepository;
        private readonly IFiscalYearTypeRepository _fiscalYearTypeRepository;

        private readonly IAccFiscalHalfYearRepository _accFiscalHalfYearRepository;
        private readonly IAccFiscalQtrRepository _accFiscalQtrRepository;
        private readonly IAccFiscalMonthRepository _accFiscalMonthRepository;
        private readonly IAccVoucherSubCheckNoRepository _accVoucherSubCheckNoRepository;
        private readonly IAccVoucherSubSectionRepository _accVoucherSubSectionRepository;
        private readonly ICountryRepository _countryRepository;
        private readonly ICompanyRepository _companyRepository;

        private readonly ICustomerRepository _customerRepository;
        private readonly ISupplierRepository _supplierRepository;

        private readonly IColorsRepository _colorsRepository;
        private readonly ISizesRepository _sizesRepository;

        private readonly IBomCategoryRepository _bomCategoryRepository;


        private readonly IPurchaseRepository _purchaseRepository;
        private readonly IPurchaseItemsRepository _purchaseItemRepository;

        private readonly IPurchaseProductTaxRepository _purchaseProductTaxRepository;

        private readonly IPurchaseItemsCategoryRepository _purchaseItemCategoryRepository;
        private readonly ISaleRepository _saleRepository;
        private readonly IMemberRepository _memberRepository;


        private readonly IAccountCategoryRepository _accountCategoryRepository;

        private readonly IAccountHeadRepository _accountHeadRepository;
        private readonly IPrdUnitRepository _prdUnitRepository;
        private readonly IUnitRepository _unitRepository;

        private readonly IStoreSettingRepository _storeSettingRepository;

        private readonly IBuyerPO_MasterRepository _buyerPOmasterRepository;


        private readonly IIntegrationSettingMainRepository _integrationSettingMainRepository;
        private readonly IIntegrationSettingDetailsRepository _integrationSettingDetailsRepository;
        private readonly IPayrollIntegrationSummaryRepository _payrollIntegrationSummaryRepository;
        private readonly IEmployeeRepository _employeeRepository;
        private readonly IProcessLockRepository _processLockRepository;

        private readonly IAllReportRepository _allReportRepository;

        private readonly IMemoryCache _cache;
        private readonly IConfiguration configuration;

        private readonly ITermRepository _termRepository;
        private readonly IReportsRepository ReportRepo;
        private readonly IVariableRepository variableRepo;
        private readonly IDyDashBoardModelRepository dydasRepo;
        private readonly IDashBoardLayoutOrderRepository dashorRepo;

        public static string ExpressionParameterizationException { get; }
        Dictionary<int, dynamic> postData = new Dictionary<int, dynamic>();

        public AccountsController(
            IMemoryCache memoryCache, IConfiguration configuration, TransactionLogRepository tranlogRepository, clsProcedure _clsProc,
            IReportStyleRepository reportStyleRepository, IVoucherTranGroupRepository voucherTranGroupRepository, IAccFiscalYearRepository fiscalyearRepository,
            IAccVoucherTypeRepository VoucherTypeRepository, IAccVoucherCreatedTypeRepository accVoucherCreatedTypeRepository, IUnitRepository unitRepository,
            IAccVoucherMainRepository accVoucherRepository, IAccVoucherSubRepository accVoucherSubRepository, IRecurringDetailsRepository recurringDetailsRepository,
            IAccVoucherNoPrefixRepository accVoucherNoPrefixRepository, IAccFiscalYearRepository accFiscalYearRepository, ICategoryRepository categoryRepository,
            IAccFiscalMonthRepository accFiscalMonthRepository, IAccVoucherSubCheckNoRepository accVoucherSubCheckNoRepository, ITransactionRepository transactionRepository,
            IAccVoucherSubSectionRepository accVoucherSubSectionRepository, IUserAccountRepository userAccountRepository, IBrandRepository brandRepository,
            ICountryRepository countryRepository, ICompanyRepository companyRepository, ICustomerRepository customerRepository, IDocPrefixRepository docPrefixRepository,
            ISupplierRepository supplierRepository, IAccountHeadRepository accountRepository, IPrdUnitRepository prdUnitRepository, ICategoryTypeRepository categoryTypeRepository,
            IAccVoucherTranGroupRepository accVoucherTranGroupRepository, IIntegrationSettingMainRepository integrationSettingMainRepository,
            IIntegrationSettingDetailsRepository integrationSettingDetailsRepository, IPayrollIntegrationSummaryRepository payrollIntegrationSummaryRepository,
            IEmployeeRepository employeeRepository, IProcessLockRepository processLockRepository, ISubSectionRepository subSectionRepository, IPurchaseItemsRepository purchaseItemsRepository,
            IAccFiscalHalfYearRepository accFiscalHalfYearRepository, IAccFiscalQtrRepository accFiscalQtrRepository, IMemberRepository memberRepository, IProductRepository productRepository, IAdvanceTrasactionTrackingRepository advanceTransactionTrackingRepository, IUnitConversionRepository unitConversionRepository, IAuditLogRepository auditLogRepository,
            IPurchaseRepository purchaseRepository, ISaleRepository saleRepository, IFiscalYearTypeRepository fiscalYearTypeRepository, IWarehouseRepository warehouseRepository, IDocTypeRepository docTypeRepository,
            IFromWarehousePermissionRepository fromWarehousePermissionRepository, IAccountHeadPermissionRepository accountHeadPermissionRepository, ITagsRepository tagsRepository,
            IAccVoucherTagsRepository accVoucherTagsRepository, IWebHostEnvironment webHostEnvironment, IMasterSalesTaxRepository _mastersalestaxRepository, IAccountCategoryRepository accountCategoryRepository, IAllReportRepository allReportRepository, ITermRepository termRepository, IPurchaseItemsRepository purchaseItemRepository, IPurchaseItemsCategoryRepository purchaseItemCategoryRepository, IReportsRepository reportRepo,
            IVariableRepository variableRepo, IDyDashBoardModelRepository dydasRepo, IDashBoardLayoutOrderRepository dashorRepo, IStoreSettingRepository storeSettingRepository, IBuyerPO_MasterRepository buyerPOmasterRepository, IColorsRepository colorsRepository, ISizesRepository sizesRepository, IStyleRepository styleRepository, IColorChildRepository colorChildRepository, ISizeChildRepository sizeChildRepository, IMasterPORepository masterPORepository, IMasterPODetailsRepository masterPODetailsRepository, IBomCategoryRepository bomCategoryRepository, IPurchaseProductTaxRepository purchaseProductTaxRepository, ITransactionApprovalStatusRepository transactionApprovalStatusRepository)
        {
            _cache = memoryCache;
            this.configuration = configuration;
            tranlog = tranlogRepository;
            _brandRepository = brandRepository;
            _VoucherTranGroupRepository = voucherTranGroupRepository;
            _VoucherTypeRepository = VoucherTypeRepository;
            _accVoucherCreatedTypeRepository = accVoucherCreatedTypeRepository;
            _accVoucherRepository = accVoucherRepository;
            _unitRepository = unitRepository;
            _categoryRepository = categoryRepository;
            this.docPrefixRepository = docPrefixRepository;
            _accVoucherSubRepository = accVoucherSubRepository;
            _accVoucherNoPrefixRepository = accVoucherNoPrefixRepository;
            this.unitConversionRepository = unitConversionRepository;
            this.productRepository = productRepository;
            this.advanceTransactionTrackingRepository = advanceTransactionTrackingRepository;
            this.reportStyleRepository = reportStyleRepository;
            _accVoucherSubCheckNoRepository = accVoucherSubCheckNoRepository;
            _accVoucherSubSectionRepository = accVoucherSubSectionRepository;
            _userAccountRepository = userAccountRepository;
            _countryRepository = countryRepository;
            _transactionRepository = transactionRepository;
            _companyRepository = companyRepository;
            _customerRepository = customerRepository;
            _supplierRepository = supplierRepository;
            _accountHeadRepository = accountRepository;
            this.categoryTypeRepository = categoryTypeRepository;
            _purchaseItemsRepository = purchaseItemsRepository;
            _prdUnitRepository = prdUnitRepository;
            _accVoucherTranGroupRepository = accVoucherTranGroupRepository;
            _integrationSettingMainRepository = integrationSettingMainRepository;
            _integrationSettingDetailsRepository = integrationSettingDetailsRepository;
            _payrollIntegrationSummaryRepository = payrollIntegrationSummaryRepository;
            _employeeRepository = employeeRepository;
            _processLockRepository = processLockRepository;
            _auditLogRepository = auditLogRepository;
            clsProc = _clsProc;
            _fiscalyearRepository = fiscalyearRepository;
            this.recurringDetailsRepository = recurringDetailsRepository;
            _subSectionRepository = subSectionRepository;
            this.tagsRepository = tagsRepository;
            this._mastersalestaxRepository = _mastersalestaxRepository;
            _accFiscalYearRepository = accFiscalYearRepository;
            _accFiscalMonthRepository = accFiscalMonthRepository;
            _buyerPOmasterRepository = buyerPOmasterRepository;
            _accFiscalHalfYearRepository = accFiscalHalfYearRepository;
            _accFiscalQtrRepository = accFiscalQtrRepository;
            _memberRepository = memberRepository;
            _purchaseRepository = purchaseRepository;
            _saleRepository = saleRepository;
            _fiscalYearTypeRepository = fiscalYearTypeRepository;
            _warehouseRepository = warehouseRepository;
            _docTypeRepository = docTypeRepository;
            _FromWarehousePermissionRepository = fromWarehousePermissionRepository;
            _AccountHeadPermissionRepository = accountHeadPermissionRepository;
            _accVoucherTagsRepository = accVoucherTagsRepository;
            _webHostEnvironment = webHostEnvironment;
            _accountCategoryRepository = accountCategoryRepository;
            _allReportRepository = allReportRepository;
            _termRepository = termRepository;
            _purchaseItemRepository = purchaseItemRepository;
            _purchaseItemCategoryRepository = purchaseItemCategoryRepository;
            ReportRepo = reportRepo;
            this.variableRepo = variableRepo;
            this.dydasRepo = dydasRepo;
            this.dashorRepo = dashorRepo;
            _storeSettingRepository = storeSettingRepository;
            _colorsRepository = colorsRepository;
            _sizesRepository = sizesRepository;
            _styleRepository = styleRepository;
            _colorChildRepository = colorChildRepository;
            _sizeChildRepository = sizeChildRepository;
            _masterPORepository = masterPORepository;
            _masterPODetailsRepository = masterPODetailsRepository;
            _bomCategoryRepository = bomCategoryRepository;
            _purchaseProductTaxRepository = purchaseProductTaxRepository;
            this.transactionApprovalStatusRepository = transactionApprovalStatusRepository;
        }

        #endregion


        #region VoucherTranGroup
        public IActionResult VoucherTranGroupList()
        {
            return View(_VoucherTranGroupRepository.All());
        }

        [HttpGet]
        public ActionResult AddVoucherTranGroup()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.VoucherTranGroupGroupHead = _VoucherTranGroupRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddVoucherTranGroup(VoucherTranGroupModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _VoucherTranGroupRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.VoucherTranGroupName.ToString());

                }
                else
                {
                    _VoucherTranGroupRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.VoucherTranGroupName.ToString());

                }
                return RedirectToAction("VoucherTranGroupList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditVoucherTranGroup(int VoucherTranGroupId)
        {
            ViewBag.ActionType = "Edit";
            var VoucherTranGroup = _VoucherTranGroupRepository.Find(VoucherTranGroupId);
            //ViewBag.VoucherTranGroupGroupHead = _VoucherTranGroupRepository.GetAllForDropDown();
            return View("AddVoucherTranGroup", VoucherTranGroup);
        }

        public ActionResult DeleteVoucherTranGroup(int VoucherTranGroupId)
        {
            var model = _VoucherTranGroupRepository.Find(VoucherTranGroupId);
            if (model != null)
            {
                _VoucherTranGroupRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.VoucherTranGroupName);


                return RedirectToAction("VoucherTranGroupList");
            }
            return RedirectToAction("VoucherTranGroupList");
        }
        #endregion


        #region VoucherType
        [AllowAnonymous]

        public IActionResult VoucherTypeList()
        {
            return View(_VoucherTypeRepository.All());
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AddBillType()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.VoucherTypeGroupHead = _VoucherTypeRepository.GetAllForDropDown();
            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AddVoucherType()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.VoucherTypeGroupHead = _VoucherTypeRepository.GetAllForDropDown();
            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsVoucherReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsTrialBalanceReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsTrialBalanceReportQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsBalanceSheetDetailReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsIncomeStatementReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [HttpGet]
        [AllowAnonymous]
        public ActionResult AccountsIncomeStatementQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }
        [HttpGet]
        [AllowAnonymous]
        public ActionResult AccountsIncomeStatementByCustomerQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }
        [HttpGet]
        [AllowAnonymous]
        public ActionResult AccountsSalesByCustomerSummaryReportQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult terms(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsExpensesByVendorSummaryReportQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsBillPaymentListQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsSalesTaxLiabilityQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsGeneralLedgerReportQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsBalanceSheetComparisonReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsTrialBalanceReportPdf(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsAllReports(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsBalanceSheetReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsGeneralLedgerReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsProfitAndLossReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult ExpensesbySupplierSummary(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult SupplierBalanceSummary(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult OpenPurchaseOrderList(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult OpenPurchaseOrderDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult SalesbyCustomerDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult CustomerBalanceDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult InventoryValuationSummary(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult InventoryValuationDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult PurchasesProductServiceDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult PurchasesSupplierDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TransactionListbySupplier(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TransactionListbyCustomer(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TimeActivitiesCustomerDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult InvoiceListReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult ProductServiceList(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TermsList(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TransactionDetailbyAccount(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TransactionListbyDate(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountList(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult SupplierContactList(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult CustomerContactList(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult EmployeeContactList(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult EstimatesbyCustomer(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult RecentTransactions(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult DepositDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult StocktakeWorksheet(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TransactionListwithSplits(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult UnbilledTime(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult ChequeDetail(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult StatementList(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TaxLiabilityReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult TransactionDetailTaxCode(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult RecentEditedtimeActivities(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult SalesbyProductServiceSummary(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult MultipleCombineTaxSummary(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult ServiceTaxSummary(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult UnbilledCharges(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult StatementChangesEquity(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult CollectionsReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult OpenInvoices(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult TaxCustomSummary(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult GeneralLedger(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;



            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsReportDashboard()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.VoucherTypeGroupHead = _VoucherTypeRepository.GetAllForDropDown();
            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult ImportAccount_sample()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.VoucherTypeGroupHead = _VoucherTypeRepository.GetAllForDropDown();
            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult ImportAccount()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.VoucherTypeGroupHead = _VoucherTypeRepository.GetAllForDropDown();
            return View();
        }


        [HttpGet]
        [AllowAnonymous]
        public ActionResult ImportTransaction()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.VoucherTypeGroupHead = _VoucherTypeRepository.GetAllForDropDown();
            return View();
        }


        private List<Dictionary<string, string>> _importedDataList;
        private List<Dictionary<string, string>> _importedHeaderList;


        [HttpPost]
        [AllowAnonymous]
        public IActionResult ImportExcel(IFormFile file)
        {
            using (var stream = file.OpenReadStream())
            {
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {
                    var dataset = reader.AsDataSet(new ExcelDataSetConfiguration
                    {
                        ConfigureDataTable = _ => new ExcelDataTableConfiguration
                        {
                            UseHeaderRow = true
                        }
                    });

                    var headers = dataset.Tables[0].Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();

                    // _importedHeaderList = headers;

                    var data = headers.Select((h, i) => new SelectListItem
                    {
                        Value = i.ToString(),
                        Text = h
                    }).ToList();

                    var selectList = new SelectList(data, "Value", "Text", data[0].Value);

                    var table = dataset.Tables[0];
                    var rows = table.Rows.Cast<DataRow>().ToList();

                    var dataList = new List<Dictionary<string, string>>();

                    foreach (var row in rows)
                    {
                        var rowData = new Dictionary<string, string>();

                        foreach (var header in headers)
                        {
                            rowData[header] = row[header]?.ToString() ?? "";

                        }

                        dataList.Add(rowData);
                    }
                    _importedDataList = dataList;

                    _cache.Set("ImportedData", _importedDataList);
                    _cache.Set("ColumnHeader", headers);

                    return Json(selectList);



                }
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult ImportExcelTransaction(IFormFile file)
        {
            using (var stream = file.OpenReadStream())
            {
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {
                    var dataset = reader.AsDataSet(new ExcelDataSetConfiguration
                    {
                        ConfigureDataTable = _ => new ExcelDataTableConfiguration
                        {
                            UseHeaderRow = true
                        }
                    });

                    var headers = dataset.Tables[0].Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();


                    // _importedHeaderList = headers;

                    ////dataset.Columns.RemoveAt(0);
                    //headers[1] = "Date";
                    //headers[2] = "Transaction Type";
                    //headers[3] = "Num";
                    //headers[4] = "Name";
                    //headers[5] = "Memo/Description";
                    //headers[6] = "Account";
                    //headers[7] = "Debit";
                    //headers[8] = "Credit";
                    //headers[9] = "Balance";

                    var data = headers.Select((h, i) => new SelectListItem
                    {
                        Value = i.ToString(),
                        Text = h
                    }).ToList();

                    var selectList = new SelectList(data, "Value", "Text", data[0].Value);


                    var table = dataset.Tables[0];
                    var rows = table.Rows.Cast<DataRow>().ToList();

                    var dataList = new List<Dictionary<string, string>>();

                    foreach (var row in rows)
                    {
                        var rowData = new Dictionary<string, string>();

                        foreach (var header in headers)
                        {
                            rowData[header] = row[header]?.ToString() ?? "";

                        }


                        dataList.Add(rowData);
                    }







                    //    for (var row = 1; row < rows.Count; row++) { 

                    //         var rowData = new Dictionary<string, string>();

                    //        foreach (var header in headers)
                    //        {
                    //            rowData[header] = rows[row][header]?.ToString() ?? "";

                    //        }


                    //        dataList.Add(rowData);

                    //}
                    _importedDataList = dataList;


                    _cache.Set("ImportedData", _importedDataList);
                    _cache.Set("ColumnHeader", headers);

                    return Json(selectList);



                }
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult ImportQuickbook(IFormFile file)
        {

            using (var stream = file.OpenReadStream())
            {
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {

                    var dataSet = reader.AsDataSet();

                    // Get the first DataTable in the DataSet
                    var table = dataSet.Tables[0];

                    // Set the column names manually

                    table.Columns[1].ColumnName = "Account";
                    table.Columns[2].ColumnName = "Type";
                    table.Columns[3].ColumnName = "Detail Type";
                    table.Columns[4].ColumnName = "Description";
                    table.Columns[5].ColumnName = "Balance";
                    table.Columns.Add("AccId", typeof(string));


                    // var headers = dataSet.Tables[0].Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();
                    // Get the first DataTable in the DataSet

                    // Get the column names as a list of strings
                    // var headers = dataTable.Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();




                    // _importedHeaderList = headers;


                    var headers = dataSet.Tables[0].Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();


                    var rows = table.Rows.Cast<DataRow>().ToList();
                    rows = table.Rows.Cast<DataRow>().Skip(5).ToList();
                    //var headerRows = table.Rows[3];
                    //var headersRows = table.Rows[3].ItemArray.Select(x => x.ToString()).ToList();

                    var data = headers.Select((h, i) => new SelectListItem
                    {
                        Value = i.ToString(),
                        Text = h
                    }).ToList();

                    var selectList = new SelectList(data, "Value", "Text", data[0].Value);

                    var dataList = new List<Dictionary<string, string>>();


                    foreach (var row in rows)
                    {
                        var rowData = new Dictionary<string, string>();

                        foreach (var header in headers)
                        {
                            rowData[header] = row[header]?.ToString() ?? "";

                        }


                        dataList.Add(rowData);
                    }







                    //    for (var row = 1; row < rows.Count; row++) { 

                    //         var rowData = new Dictionary<string, string>();

                    //        foreach (var header in headers)
                    //        {
                    //            rowData[header] = rows[row][header]?.ToString() ?? "";

                    //        }


                    //        dataList.Add(rowData);

                    //}
                    _importedDataList = dataList;


                    _cache.Set("ImportedData", _importedDataList);
                    _cache.Set("ColumnHeader", headers);

                    return Json(selectList);



                }
            }
        }



        [HttpPost]
        [AllowAnonymous]
        public IActionResult ImportQuickbookTransaction(IFormFile file)
        {

            using (var stream = file.OpenReadStream())
            {
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {

                    var dataSet = reader.AsDataSet();

                    // Get the first DataTable in the DataSet
                    var table = dataSet.Tables[0];

                    // Set the column names manually
                    table.Columns.Add("VoucherID", typeof(string));
                    table.Columns[1].ColumnName = "Date";
                    table.Columns[2].ColumnName = "Transaction Type";
                    table.Columns[3].ColumnName = "Num";
                    table.Columns[4].ColumnName = "Name";
                    table.Columns[5].ColumnName = "Memo/Description";
                    table.Columns[6].ColumnName = "Account";
                    table.Columns[7].ColumnName = "Debit";
                    table.Columns[8].ColumnName = "Credit";
                    table.Columns.Add("AccId", typeof(string));
                    // var headers = dataSet.Tables[0].Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();
                    // Get the first DataTable in the DataSet

                    // Get the column names as a list of strings
                    // var headers = dataTable.Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();




                    // _importedHeaderList = headers;


                    var headers = dataSet.Tables[0].Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();


                    var rows = table.Rows.Cast<DataRow>().ToList();
                    rows = table.Rows.Cast<DataRow>().Skip(5).ToList();
                    //var headerRows = table.Rows[3];
                    //var headersRows = table.Rows[3].ItemArray.Select(x => x.ToString()).ToList();

                    var data = headers.Select((h, i) => new SelectListItem
                    {
                        Value = i.ToString(),
                        Text = h
                    }).ToList();

                    var selectList = new SelectList(data, "Value", "Text", data[0].Value);

                    var dataList = new List<Dictionary<string, string>>();


                    foreach (var row in rows)
                    {
                        var rowData = new Dictionary<string, string>();

                        foreach (var header in headers)
                        {
                            rowData[header] = row[header]?.ToString() ?? "";

                        }


                        dataList.Add(rowData);
                    }







                    //    for (var row = 1; row < rows.Count; row++) { 

                    //         var rowData = new Dictionary<string, string>();

                    //        foreach (var header in headers)
                    //        {
                    //            rowData[header] = rows[row][header]?.ToString() ?? "";

                    //        }


                    //        dataList.Add(rowData);

                    //}
                    _importedDataList = dataList;


                    _cache.Set("ImportedData", _importedDataList);
                    _cache.Set("ColumnHeader", headers);

                    return Json(selectList);



                }
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult ImportXml(IFormFile file)
        {
            try
            {


                XmlDocument doc = new XmlDocument();
                using (var stream = file.OpenReadStream())
                {
                    doc.Load(stream);
                }


                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");
                XmlNodeList nodes = doc.SelectNodes("//GROUP");
                XmlNodeList nodesl = doc.SelectNodes("//LEDGER");

                DataTable dataTable = new DataTable();

                dataTable.Columns.Add("Guid", typeof(string));
                dataTable.Columns.Add("Type", typeof(string));
                dataTable.Columns.Add("AccCategory", typeof(string));
                dataTable.Columns.Add("AccName", typeof(string));
                dataTable.Columns.Add("AccGroup", typeof(string));
                dataTable.Columns.Add("OP_Balance", typeof(string));
                dataTable.Columns.Add("OP_Date", typeof(string));
                dataTable.Columns.Add("LuserId", typeof(string));
                dataTable.Columns.Add("ComId", typeof(string));

                HashSet<string> addedGuids = new HashSet<string>();
                DataRow dataRowAsset = dataTable.NewRow();
                dataRowAsset["Guid"] = "";
                dataRowAsset["Type"] = "G";
                dataRowAsset["AccCategory"] = "Assets";
                dataRowAsset["AccName"] = "Assets";
                dataRowAsset["AccGroup"] = "";
                dataTable.Rows.Add(dataRowAsset);

                DataRow dataRowLiability = dataTable.NewRow();
                dataRowLiability["Guid"] = "";
                dataRowLiability["Type"] = "G";
                dataRowLiability["AccCategory"] = "Liabilities";
                dataRowLiability["AccName"] = "Liabilities";
                dataRowLiability["AccGroup"] = "";
                dataTable.Rows.Add(dataRowLiability);

                DataRow dataRowExpense = dataTable.NewRow();
                dataRowExpense["Guid"] = "";
                dataRowExpense["Type"] = "G";
                dataRowExpense["AccCategory"] = "Expenses";
                dataRowExpense["AccName"] = "Expenses";
                dataRowExpense["AccGroup"] = "";
                dataTable.Rows.Add(dataRowExpense);

                DataRow dataRowIncomes = dataTable.NewRow();
                dataRowIncomes["Guid"] = "";
                dataRowIncomes["Type"] = "G";
                dataRowIncomes["AccCategory"] = "Incomes";
                dataRowIncomes["AccName"] = "Incomes";
                dataRowIncomes["AccGroup"] = "";
                dataTable.Rows.Add(dataRowIncomes);


                foreach (XmlNode node in nodes)
                {
                    DataRow dataRow = dataTable.NewRow();

                    string guid = node.SelectSingleNode("GUID").InnerText;

                    if (addedGuids.Contains(guid))
                    {
                        continue;  // Skip this row if it has already been added to the dataTable
                    }

                    dataRow["Guid"] = guid;
                    dataRow["Type"] = "G";
                    dataRow["AccCategory"] = "";
                    dataRow["AccName"] = node.Attributes["NAME"].Value;
                    dataRow["AccGroup"] = node.SelectSingleNode("PARENT").InnerText;

                    dataTable.Rows.Add(dataRow);

                    addedGuids.Add(guid);
                }

                foreach (XmlNode nodel in nodesl)
                {
                    DataRow dataRow = dataTable.NewRow();

                    string guid = nodel.SelectSingleNode("GUID").InnerText;

                    if (addedGuids.Contains(guid))
                    {
                        continue;  // Skip this row if it has already been added to the dataTable
                    }

                    dataRow["Guid"] = guid;
                    dataRow["Type"] = "L";
                    dataRow["AccCategory"] = "";
                    dataRow["AccName"] = nodel.Attributes["NAME"].Value;
                    dataRow["AccGroup"] = nodel.SelectSingleNode("PARENT").InnerText;

                    dataTable.Rows.Add(dataRow);

                    addedGuids.Add(guid);
                }

                dataTable.DefaultView.Sort = "Guid ASC";
                dataTable = dataTable.DefaultView.ToTable();


                var assets = new[] { "Fixed Assets", "Current Assets", "Investments", "Misc. Expenses (ASSET)", "CAPITAL WORK-IN-PROGRESS" };
                var liabilities = new[] { "Loans (Liability)", "Current Liabilities", "Capital Account", "Branch / Divisions", "Profit & Loss A/c", "Suspense A/c" };
                var expenses = new[] { "Purchase Accounts", "Direct Expenses", "Indirect Expenses", "IMPORT RELATED EXPENSES", "EXPORT RELATED EXPENSES", "Preliminiary Expenses" };
                var incomes = new[] { "Sales Accounts", "Direct Incomes", "Indirect Incomes" };
                foreach (DataRow row in dataTable.Rows)
                {
                    var accName = row["AccName"].ToString();
                    var accGroup = row["AccGroup"].ToString();
                    if (assets.Contains(accName) && row["AccGroup"] == "")
                    {
                        row["AccGroup"] = "Assets";
                        row["AccCategory"] = "Assets";
                    }
                    else if (liabilities.Contains(accName) && row["AccGroup"] == "")
                    {
                        row["AccGroup"] = "Liabilities";
                        row["AccCategory"] = "Liabilities";
                    }
                    else if (expenses.Contains(accName) && row["AccGroup"] == "")
                    {
                        row["AccGroup"] = "Expenses";
                        row["AccCategory"] = "Expenses";
                    }
                    else if (incomes.Contains(accName) && row["AccGroup"] == "")
                    {
                        row["AccGroup"] = "Incomes";
                        row["AccCategory"] = "Incomes";
                    }

                }

                var Acc = "AccGroup";
                //FillMissingCategories(dataTable);
                //void FillMissingCategories(DataTable dataTable) {
                foreach (DataRow row in dataTable.Rows)
                {

                    row["OP_Balance"] = 0;
                    row["ComId"] = comid;
                    row["LuserId"] = userid;
                    row["OP_Date"] = DateTime.Now;

                    var accGroup = row[Acc].ToString();
                    if (accGroup.ToLower().Contains("assets") || accGroup.ToLower().Contains("asset"))
                    {

                        row["AccCategory"] = "Assets";
                    }
                    else if (accGroup.ToLower().Contains("liabilities") || accGroup.ToLower().Contains("liability"))
                    {

                        row["AccCategory"] = "Liabilities";
                    }
                    else if (accGroup.ToLower().Contains("expenses") || accGroup.ToLower().Contains("expense"))
                    {

                        row["AccCategory"] = "Expenses";
                    }
                    else if (accGroup.ToLower().Contains("incomes") || accGroup.ToLower().Contains("income"))
                    {

                        row["AccCategory"] = "Incomes";
                    }

                }
                // }

                string accCategory = "";
                foreach (DataRow row in dataTable.Rows)
                {
                    if (string.IsNullOrEmpty(row["AccCategory"].ToString()))
                    {
                        string accGroup = row["AccGroup"].ToString();

                        foreach (DataRow row1 in dataTable.Rows)
                        {
                            string accName = row1["AccName"].ToString();
                            if (accGroup == accName)
                            {
                                accCategory = row1["AccCategory"].ToString();
                                break;
                            }
                        }
                        row["AccCategory"] = accCategory;

                        // Search for a row with the same AccName and a non-empty AccCategory

                    }
                }

                var model = dataTable.AsEnumerable().Select(row => new XMLimportModel
                {
                    Guid = row.Field<string>("Guid"),
                    AccName = row.Field<string>("AccName"),
                    AccGroup = row.Field<string>("AccGroup"),
                    AccCategory = row.Field<string>("AccCategory"),
                    //OP_Balance = row.Field<string>("OP_Balance"),
                    //OP_Date = (DateTime.Parse(row.Field<string>("OP_Date"))).ToString("dd-MMM-yy"),
                    Type = row.Field<string>("Type"),
                }).ToList();




                #region details ///details table function///
                //var conString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                string conString = Atrai.Model.AppData.DefaultConnectionString;



                string table_Details = "Temp_Accounts_Tally";
                //string connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                SqlConnection con = new SqlConnection(conString);
                SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                con.Open();
                cmd.ExecuteNonQuery();
                //Response.Redirect("done.aspx");
                con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dataTable.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dataTable);

                    conn.Close();
                }
                #endregion
                //accountheadlist creation
                var xx = _accountHeadRepository.All().Count();

                if (xx == 0)
                {

                    SqlParameter[] sqlParameter1 = new SqlParameter[2];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", "AccountHead_Tally");

                    //Helper.ExecProc("[prcAutoInsert]", sqlParameter1);


                    //db.Database.ExecuteSqlCommand("Exec prcCloseFiscalYear @comid", new SqlParameter("@comid", comid));
                    //TempData["Message"] = "Fiscal year and Accounts Head Craeted Successfully.";
                    //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.OpeningYear.ToString(), "prcAutoInsert", model.OpeningYear.ToString());

                }


                return Json(dataTable);



            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsAPAgingReportQB()
        {
            return View();
        }
        [AllowAnonymous]
        public JsonResult GetAPAgingQB(string criteria, string FromDate, string ToDate, int periods, int duration)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;




                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }


                if (periods == null)
                {
                    periods = 4;
                }
                periods = (periods - 1) * 30;
                var queryname = "Acc_rptAPAgingReportQB";

                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "','" + periods + "', '" + dtFrom + "' ,'" + dtTo + "', '" + duration + "' ";
                Console.WriteLine(viewquary);
                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@maxInterval", periods);
                parameters[4] = new SqlParameter("@dtFrom", dtFrom);
                parameters[5] = new SqlParameter("@dtTo", dtTo);
                parameters[6] = new SqlParameter("@interval", duration);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsARAgingReportQB()
        {
            return View();
        }
        [AllowAnonymous]
        public JsonResult GetARAgingQB(string criteria, string FromDate, string ToDate, int periods, int duration)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;




                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }


                if (periods == null)
                {
                    periods = 4;
                }
                periods = (periods - 1) * 30;
                var queryname = "Acc_rptARAgingReportQB";

                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "','" + periods + "', '" + dtFrom + "' ,'" + dtTo + "', '" + duration + "' ";
                Console.WriteLine(viewquary);
                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@maxInterval", periods);
                parameters[4] = new SqlParameter("@dtFrom", dtFrom);
                parameters[5] = new SqlParameter("@dtTo", dtTo);
                parameters[6] = new SqlParameter("@duration", duration);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsVendorBalanceReportQB()
        {
            return View();
        }
        [AllowAnonymous]
        public JsonResult GetVendorBalanceQB(string criteria, string FromDate, string ToDate)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;




                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                var queryname = "acc_rptVendorBalanceDetails";

                var viewquary = $"Exec {queryname}  '" + ComId + "', '" + dtFrom + "' ,'" + dtTo + "' ";
                Console.WriteLine(viewquary);
                SqlParameter[] parameters = new SqlParameter[3];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@dtFrom", dtFrom);
                parameters[2] = new SqlParameter("@dtTo", dtTo);


                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsUnpaidBillReportQB()
        {
            return View();
        }
        [AllowAnonymous]
        public JsonResult GetUnpaidBillQB(string criteria, string FromDate, string ToDate)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;




                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                var queryname = "Acc_rptUnpaidBillsQB";

                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + dtFrom + "' ,'" + dtTo + "' ";
                Console.WriteLine(viewquary);
                SqlParameter[] parameters = new SqlParameter[5];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@dtFrom", dtFrom);
                parameters[4] = new SqlParameter("@dtTo", dtTo);


                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult CustomerBalanceReportQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;


            return View();
        }
        [AllowAnonymous]
        public JsonResult GetCustomerAgingQB(string FromDate, string ToDate, string criteria, int duration)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;




                if (FromDate == null)
                {
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }

                var quary = $"Exec Acc_CustomerBalance  '" + ComId + "','" + "" + "',0,'" + dtFrom + "' ,'" + dtTo + "','" + "AllCustomerBalance" + "',1";


                SqlParameter[] parameters1 = new SqlParameter[7];
                parameters1[0] = new SqlParameter("@ComId", ComId);
                parameters1[1] = new SqlParameter("@CustomerId", "");
                parameters1[2] = new SqlParameter("@UrlLink", "-");
                parameters1[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters1[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters1[5] = new SqlParameter("@LedgerFor", "AllCustomerBalance");
                parameters1[6] = new SqlParameter("@BalanceUpdate", 1);




                Helper.ExecProcMapTList<CustomerLedgerModel>("Acc_CustomerBalance", parameters1);


                var queryname = "CustomerBalanceQB";

                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + dtFrom + "' ,'" + dtTo + "','" + duration + "' ";
                Console.WriteLine(viewquary);
                SqlParameter[] parameters = new SqlParameter[6];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@dtFrom", dtFrom);
                parameters[4] = new SqlParameter("@dtTo", dtTo);
                parameters[5] = new SqlParameter("@IsActiveRow", duration);


                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }




        [HttpGet]
        [AllowAnonymous]
        public ActionResult SalesProductServiceDetailQB()
        {
            return View();
        }
        [AllowAnonymous]
        public JsonResult GetSalesProductServiceQB(string criteria, string groupBy, string FromDate, string ToDate, int Currency, int Id, int accid)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;




                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                var queryname = "Acc_rptSalesProductServiceDetail";

                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "','" + groupBy + "', '" + dtFrom + "' ,'" + dtTo + "','" + Id + "','" + Currency + "','" + accid + "' ";
                Console.WriteLine(viewquary);
                SqlParameter[] parameters = new SqlParameter[9];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@groupBy", groupBy);
                parameters[4] = new SqlParameter("@dtFrom", dtFrom);
                parameters[5] = new SqlParameter("@dtTo", dtTo);
                parameters[6] = new SqlParameter("@Id", Id);
                parameters[7] = new SqlParameter("@Currency", Currency);
                parameters[8] = new SqlParameter("@accid", accid);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }




        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsBalanceSheetReportQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        [AllowAnonymous]
        public JsonResult GetBalanceSheetQB(string rpttype, string criteria, string Months, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0, int ActiveRow = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptBalanceSheet_MonthSegmentQB";

                                if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                {
                                    queryname = "Acc_rptBalanceSheetQB";
                                }
                                if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                {
                                    queryname = "Acc_rptBalanceSheet_MonthSegmentQB";
                                }

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "' ,'" + ActiveRow + "' ";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[12] = new SqlParameter("@IsActiveRow", ActiveRow);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });

                            }

                            if (isViewPageReport == 2)
                            {
                                var queryname = "";
                                var datasetabc = new System.Data.DataSet();
                                if (Months.ToUpper().ToString() == "Months".ToUpper())
                                {
                                    queryname = "Acc_rptBalanceSheet_MonthSegmentQB";
                                    var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "','" + ActiveRow + "'  ";
                                    SqlParameter[] parameters = new SqlParameter[13];
                                    parameters[0] = new SqlParameter("@UserId", UserId);
                                    parameters[1] = new SqlParameter("@ComId", ComId);
                                    parameters[2] = new SqlParameter("@Flag", criteria);
                                    parameters[3] = new SqlParameter("@Id", strId);
                                    parameters[4] = new SqlParameter("@IsShowZero", 0);
                                    parameters[5] = new SqlParameter("@Currency", 18);
                                    parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                    parameters[7] = new SqlParameter("@dtTo", dtTo);
                                    parameters[8] = new SqlParameter("@accid", 0);
                                    parameters[9] = new SqlParameter("@ViewType", Months);
                                    parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                    parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                    parameters[12] = new SqlParameter("@IsActiveRow", ActiveRow);

                                    datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                    List<string> monthColumns = datasetabc.Tables[0].Columns.Cast<System.Data.DataColumn>()
                                       .Skip(12)
                                       .Select(c => c.ColumnName)
                                       .ToList();

                                    // Find columns with all zero values
                                    List<string> columnsToRemove = new List<string>();
                                    foreach (string monthColumn in monthColumns)
                                    {
                                        bool allZero = true;
                                        foreach (System.Data.DataRow row in datasetabc.Tables[0].Rows)
                                        {
                                            if (Convert.ToDouble(row[monthColumn]) != 0.00)
                                            {
                                                allZero = false;
                                                break;
                                            }
                                        }
                                        if (allZero)
                                        {
                                            columnsToRemove.Add(monthColumn);
                                        }
                                    }

                                    // Remove columns with all zero values from the DataTable
                                    foreach (string colName in columnsToRemove)
                                    {
                                        datasetabc.Tables[0].Columns.Remove(colName);
                                    }
                                }
                                else
                                {
                                    queryname = "Acc_rptBalanceSheetQB";
                                    var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "','" + ActiveRow + "'  ";
                                    SqlParameter[] parameters = new SqlParameter[12];
                                    parameters[0] = new SqlParameter("@UserId", UserId);
                                    parameters[1] = new SqlParameter("@ComId", ComId);
                                    parameters[2] = new SqlParameter("@Flag", criteria);
                                    parameters[3] = new SqlParameter("@Id", strId);
                                    parameters[4] = new SqlParameter("@IsShowZero", 0);
                                    parameters[5] = new SqlParameter("@Currency", 18);
                                    parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                    parameters[7] = new SqlParameter("@dtTo", dtTo);
                                    parameters[8] = new SqlParameter("@accid", 0);
                                    parameters[9] = new SqlParameter("@ViewType", Months);
                                    parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                    parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                    parameters[12] = new SqlParameter("@IsActiveRow", ActiveRow);

                                    datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                }


                                return Json(new { data = datasetabc, ex = "" });

                            }
                        }

                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public JsonResult GetImportTransactionData([FromBody] List<DataMappingModel> itemspay)
        {
            try
            {
                // Retrieve the imported data from the cache
                var dataList = _cache.Get<List<Dictionary<string, string>>>("ImportedData");



                //var uniqueDataList = dataList.GroupBy(dict => dict.Values.ToArray())
                //              .Select(group => group.First())
                //              .ToList();



                var uniqueDataList = new List<Dictionary<string, string>>();
                var uniqueDicts = new HashSet<Dictionary<string, string>>(new DictionaryEqualityComparer());
                var voucherIds = new HashSet<string>();
                foreach (var dict in dataList)
                {
                    if (uniqueDicts.Add(dict))
                    {
                        // The dictionary is unique, so add it to uniqueDataList
                        uniqueDataList.Add(dict);
                    }
                }
                var dataTable = new DataTable();


                foreach (var key in uniqueDataList[0].Keys)
                {
                    dataTable.Columns.Add(key);
                }

                foreach (var dict in uniqueDataList)
                {
                    var row = dataTable.NewRow();
                    foreach (var key in dict.Keys)
                    {
                        row[key] = dict[key];
                    }
                    dataTable.Rows.Add(row);
                }

                var dataTableImport = new DataTable();
                foreach (var mapping in itemspay)
                {
                    dataTableImport.Columns.Add(mapping.AtraiColumn);
                }

                // Populate the DataTable with imported data
                foreach (var dict in uniqueDataList)
                {
                    var row = dataTableImport.NewRow();
                    foreach (var mapping in itemspay)
                    {
                        row[mapping.AtraiColumn] = dict[mapping.ExcelColumn];
                    }
                    dataTableImport.Rows.Add(row);
                }

                dataTableImport.Columns.Add("LuserId", typeof(string));
                dataTableImport.Columns.Add("ComId", typeof(string));


                var model = dataTableImport.AsEnumerable().Select(row => new XMLimportTransactionModel
                {
                    // VoucherID = row.Field<string>("VoucherID"),
                    VoucherNo = row.Field<string>("VoucherNo"),
                    VoucherType = row.Field<string>("VoucherType"),
                    AccId = row.Field<string>("AccId"),
                    VoucherDate = (DateTime.Parse(row.Field<string>("VoucherDate"))).ToString("dd-MMM-yy"),
                    LedgerName = row.Field<string>("LedgerName"),
                    Narration = row.Field<string>("Narration"),
                    Debit = row.Field<string>("Debit"),
                    Credit = row.Field<string>("Credit"),
                    note1 = row.Field<string>("note1"),
                    note2 = row.Field<string>("note2")
                }).ToList();



                //return Json(dataTable);
                return Json(dataTableImport);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult ImportTransactionXml(IFormFile file)
        {
            try
            {


                XmlDocument doc = new XmlDocument();
                using (var stream = file.OpenReadStream())
                {
                    doc.Load(stream);
                }



                XmlNodeList nodes = doc.SelectNodes("//VOUCHER ");



                DataTable dataTable = new DataTable();


                dataTable.Columns.Add("VoucherID", typeof(string));
                dataTable.Columns.Add("Guid", typeof(string));
                dataTable.Columns.Add("VoucherType", typeof(string));
                dataTable.Columns.Add("VoucherNo", typeof(string));
                dataTable.Columns.Add("VoucherDate", typeof(string));
                dataTable.Columns.Add("Narration", typeof(string));
                dataTable.Columns.Add("LedgerName", typeof(string));
                dataTable.Columns.Add("AccId", typeof(string));
                //dataTable.Columns.Add("Amount", typeof(string));
                dataTable.Columns.Add("Debit", typeof(string));
                dataTable.Columns.Add("Credit", typeof(string));
                //dataTable.Columns.Add("VoucherList", typeof(string));


                HashSet<string> addedGuids = new HashSet<string>();



                foreach (XmlNode node in nodes)
                {


                    string guid = node.SelectSingleNode("GUID").InnerText;

                    if (addedGuids.Contains(guid))
                    {
                        continue;  // Skip this row if it has already been added to the dataTable
                    }





                    XmlNodeList ledgerNodes = node.SelectNodes("ALLLEDGERENTRIES.LIST");
                    var i = 0;
                    foreach (XmlNode ledgerNode in ledgerNodes)
                    {
                        DataRow dataRow = dataTable.NewRow();

                        dataRow["VoucherID"] = i++;
                        dataRow["Guid"] = guid;
                        dataRow["VoucherType"] = node.SelectSingleNode("VOUCHERTYPENAME").InnerText;
                        dataRow["VoucherNo"] = node.SelectSingleNode("VOUCHERNUMBER").InnerText;

                        string dateString = node.SelectSingleNode("DATE").InnerText;
                        DateTime dateTime = DateTime.ParseExact(dateString, "yyyyMMdd", null);
                        dataRow["VoucherDate"] = dateTime;
                        dataRow["Narration"] = node.SelectSingleNode("NARRATION").InnerText;
                        // dataRow["VoucherList"] = node.SelectSingleNode("GUID").InnerText;

                        var ledgerName = ledgerNode.SelectSingleNode("LEDGERNAME").InnerText;
                        dataRow["LedgerName"] = ledgerName;
                        var accountData = _accountHeadRepository.All().Where(x => x.AccName == ledgerName).FirstOrDefault();
                        if (accountData != null)
                        {
                            dataRow["AccId"] = accountData.Id;
                        }

                        //dataRow["Amount"] = ledgerNode.SelectSingleNode("AMOUNT").InnerText;
                        if (ledgerNode.SelectSingleNode("AMOUNT").InnerText.Contains("-"))
                        {
                            dataRow["Debit"] = ledgerNode.SelectSingleNode("AMOUNT").InnerText.Replace("-", "");
                            dataRow["Credit"] = "0";
                        }
                        else
                        {
                            dataRow["Debit"] = "0";
                            dataRow["Credit"] = ledgerNode.SelectSingleNode("AMOUNT").InnerText;
                        }
                        dataTable.Rows.Add(dataRow);

                    }


                    addedGuids.Add(guid);
                }



                //dataTable.DefaultView.Sort = "Guid ASC";
                //dataTable = dataTable.DefaultView.ToTable();


                var model = dataTable.AsEnumerable().Select(row => new XMLimportTransactionModel
                {
                    VoucherID = row.Field<string>("VoucherID"),
                    Guid = row.Field<string>("Guid"),
                    VoucherNo = row.Field<string>("VoucherNo"),
                    VoucherType = row.Field<string>("VoucherType"),
                    VoucherDate = row.Field<string>("VoucherDate"),
                    Narration = row.Field<string>("Narration"),
                    LedgerName = row.Field<string>("LedgerName"),
                    AccId = row.Field<string>("AccId"),
                    Debit = row.Field<string>("Debit"),
                    Credit = row.Field<string>("Credit"),

                }).ToList();

                return Json(dataTable);



            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }





        [HttpPost]
        [AllowAnonymous]
        public JsonResult GetImportData([FromBody] List<DataMappingModel> itemspay)
        {
            try
            { // step 3
                // Retrieve the imported data from the cache
                var dataList = _cache.Get<List<Dictionary<string, string>>>("ImportedData");



                //var uniqueDataList = dataList.GroupBy(dict => dict.Values.ToArray())
                //              .Select(group => group.First())
                //              .ToList();
                var uniqueDataList = new List<Dictionary<string, string>>();
                var uniqueDicts = new HashSet<Dictionary<string, string>>(new DictionaryEqualityComparer());

                foreach (var dict in dataList)
                {
                    if (uniqueDicts.Add(dict))
                    {
                        // The dictionary is unique, so add it to uniqueDataList
                        uniqueDataList.Add(dict);
                    }
                }
                var dataTable = new DataTable();


                foreach (var key in uniqueDataList[0].Keys)
                {
                    dataTable.Columns.Add(key);
                }

                foreach (var dict in uniqueDataList)
                {
                    var row = dataTable.NewRow();
                    foreach (var key in dict.Keys)
                    {
                        row[key] = dict[key];
                    }
                    dataTable.Rows.Add(row);
                }

                var dataTableImport = new DataTable();
                foreach (var mapping in itemspay)
                {
                    dataTableImport.Columns.Add(mapping.AtraiColumn);
                }

                // Populate the DataTable with imported data
                foreach (var dict in uniqueDataList)
                {
                    var row = dataTableImport.NewRow();
                    foreach (var mapping in itemspay)
                    {
                        row[mapping.AtraiColumn] = dict[mapping.ExcelColumn];
                    }
                    dataTableImport.Rows.Add(row);
                }


                var ImportAccountList = dataTableImport.AsEnumerable().Select(row => new ImportModel
                {

                    AccName = row.Field<string>("AccName"),
                    AccGroup = row.Field<string>("AccGroup"),
                    AccCategory = row.Field<string>("AccCategory"),
                    OP_Balance = row.Field<string>("OP_Balance"),
                    OP_Date = (DateTime.Parse(row.Field<string>("OP_Date"))).ToString("dd-MMM-yy"),
                    Type = row.Field<string>("Type"),
                }).ToList();

                foreach (var item in ImportAccountList)
                {
                    var ParentInfo = _accountHeadRepository.All().Where(x => x.AccName == item.AccGroup).FirstOrDefault();
                    if (ParentInfo != null)
                    {
                        item.ParentId = ParentInfo.Id;
                        item.CategoryId = ParentInfo.AccountCategoryId;
                    }

                }



                // Do something with the model

                //return Json(dataTable);
                //return Json(dataTableImport);
                return Json(ImportAccountList);


            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }




        [HttpPost]
        [AllowAnonymous]
        public JsonResult GetQuickBookImportData([FromBody] List<DataMappingModel> itemspay)
        {
            try
            { // step 3
                // Retrieve the imported data from the cache
                var dataList = _cache.Get<List<Dictionary<string, string>>>("ImportedData");



                //var uniqueDataList = dataList.GroupBy(dict => dict.Values.ToArray())
                //              .Select(group => group.First())
                //              .ToList();
                var uniqueDataList = new List<Dictionary<string, string>>();
                var uniqueDicts = new HashSet<Dictionary<string, string>>(new DictionaryEqualityComparer());

                foreach (var dict in dataList)
                {
                    if (uniqueDicts.Add(dict))
                    {
                        // The dictionary is unique, so add it to uniqueDataList
                        uniqueDataList.Add(dict);
                    }
                }
                var dataTable = new DataTable();


                foreach (var key in uniqueDataList[0].Keys)
                {
                    dataTable.Columns.Add(key);
                }

                foreach (var dict in uniqueDataList)
                {
                    var row = dataTable.NewRow();
                    foreach (var key in dict.Keys)
                    {
                        row[key] = dict[key];
                    }
                    dataTable.Rows.Add(row);
                }

                var dataTableImport = new DataTable();
                foreach (var mapping in itemspay)
                {
                    dataTableImport.Columns.Add(mapping.AtraiColumn);
                }

                // Populate the DataTable with imported data
                foreach (var dict in uniqueDataList)
                {
                    var row = dataTableImport.NewRow();
                    foreach (var mapping in itemspay)
                    {
                        row[mapping.AtraiColumn] = dict[mapping.ExcelColumn];
                    }
                    dataTableImport.Rows.Add(row);
                }


                var ImportAccountList = dataTableImport.AsEnumerable().Select(row => new ImportModel
                {

                    AccName = row.Field<string>("AccName"),
                    OP_Balance = row.Field<string>("Balance"),
                    Type = row.Field<string>("Type"),
                    Description = row.Field<string>("Description"),
                    DetailType = row.Field<string>("DetailType")


                }).ToList();

                //foreach (var item in ImportAccountList)
                //{
                //    var ParentInfo = _accountHeadRepository.All().Where(x => x.AccName == item.AccGroup).FirstOrDefault();
                //    if (ParentInfo != null)
                //    {
                //        item.ParentId = ParentInfo.Id;
                //        item.CategoryId = ParentInfo.AccountCategoryId;
                //    }

                //}



                // Do something with the model

                //return Json(dataTable);
                //return Json(dataTableImport);
                return Json(ImportAccountList);


            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }




        [HttpPost]
        [AllowAnonymous]
        public JsonResult GetImportQuickbookTransactionData([FromBody] List<DataMappingModel> itemspay)
        {
            try
            {
                // Retrieve the imported data from the cache
                var dataList = _cache.Get<List<Dictionary<string, string>>>("ImportedData");



                //var uniqueDataList = dataList.GroupBy(dict => dict.Values.ToArray())
                //              .Select(group => group.First())
                //              .ToList();
                var uniqueDataList = new List<Dictionary<string, string>>();
                var uniqueDicts = new HashSet<Dictionary<string, string>>(new DictionaryEqualityComparer());
                var voucherIds = new HashSet<string>();
                foreach (var dict in dataList)
                {
                    if (uniqueDicts.Add(dict))
                    {
                        // The dictionary is unique, so add it to uniqueDataList
                        uniqueDataList.Add(dict);
                    }
                }
                var dataTable = new DataTable();


                foreach (var key in uniqueDataList[0].Keys)
                {
                    dataTable.Columns.Add(key);
                }

                foreach (var dict in uniqueDataList)
                {
                    var row = dataTable.NewRow();
                    foreach (var key in dict.Keys)
                    {
                        row[key] = dict[key];
                    }
                    dataTable.Rows.Add(row);
                }

                var dataTableImport = new DataTable();
                foreach (var mapping in itemspay)
                {
                    dataTableImport.Columns.Add(mapping.AtraiColumn);
                }

                // Populate the DataTable with imported data
                foreach (var dict in uniqueDataList)
                {
                    var row = dataTableImport.NewRow();
                    foreach (var mapping in itemspay)
                    {
                        row[mapping.AtraiColumn] = dict[mapping.ExcelColumn];
                    }
                    dataTableImport.Rows.Add(row);
                }


                //var filteredRows = dataTableImport.AsEnumerable()
                //    .Where(row => row.Field<string>("Debit") != row.Field<string>("Credit") || row.Field<string>("Debit") != "0");

                var filteredRows = dataTableImport.AsEnumerable()
                                        .Where(row => row.Field<string>("Debit") != "0" && row.Field<string>("Credit") != "0"
                                            && row.Field<string>("Debit") != row.Field<string>("Credit"));

                var filteredDataTable = filteredRows.Any() ? filteredRows.CopyToDataTable() : dataTableImport.Clone();

                foreach (DataRow row in filteredDataTable.Rows)
                {
                    //double debit = double.Parse(row.Field<string>("Debit"));
                    //double credit = double.Parse(row.Field<string>("Credit"));
                    if (row["VoucherDate"] == "")
                    {
                        row.SetField("VoucherDate", filteredDataTable.Rows.IndexOf(row) > 0 ?
                            filteredDataTable.Rows[filteredDataTable.Rows.IndexOf(row) - 1]["VoucherDate"] : "");
                    }
                    if (row["VoucherType"] == "")
                    {
                        row.SetField("VoucherType", filteredDataTable.Rows.IndexOf(row) > 0 ?
                            filteredDataTable.Rows[filteredDataTable.Rows.IndexOf(row) - 1]["VoucherType"] : "");
                    }
                    if (row["VoucherNo"] == "")
                    {
                        row.SetField("VoucherNo", filteredDataTable.Rows.IndexOf(row) > 0 ?
                            filteredDataTable.Rows[filteredDataTable.Rows.IndexOf(row) - 1]["VoucherNo"] : "");
                    }
                }

                // Sort the filteredDataTable by VoucherType and VoucherNo
                filteredDataTable.DefaultView.Sort = "VoucherType ASC, VoucherNo ASC";

                var sortedDataTable = filteredDataTable.DefaultView.ToTable();

                sortedDataTable = filteredDataTable.AsEnumerable()
                    .OrderByDescending(row => row.Field<string>("Narration"))
                    .CopyToDataTable();


                int accid = 1;
                foreach (DataRow row in sortedDataTable.Rows)
                {
                    row.SetField("VoucherID", accid++);
                }



                var model = sortedDataTable.AsEnumerable().Select(row => new QuickbookTransactionModel
                {
                    VoucherID = row.Field<string>("VoucherID"),
                    VoucherNo = row.Field<string>("VoucherNo"),
                    VoucherType = row.Field<string>("VoucherType"),
                    VoucherDate = row.Field<string>("VoucherDate"),
                    LedgerName = row.Field<string>("LedgerName"),
                    Narration = row.Field<string>("Narration"),
                    Debit = row.Field<string>("Debit"),
                    Credit = row.Field<string>("Credit"),
                    note1 = row.Field<string>("note1"),
                    Remarks = row.Field<string>("note1")

                }).ToList();




                //var voucherSubs = new List<Acc_VoucherSubModel>();

                //foreach (var item in model)
                //{
                //    var voucherSub = new Acc_VoucherSubModel
                //    {
                //        AccId = int.Parse(item.AccId),
                //        Note2= item.LedgerName,
                //        Note3 = item.Narration,
                //        //TKDebit = item.Debit,
                //        //TKCredit = item.Credit,
                //        Note1 = item.note1
                //    };

                //    voucherSubs.Add(voucherSub);
                //}


                return Json(sortedDataTable);

            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }

        public class DictionaryEqualityComparer : IEqualityComparer<Dictionary<string, string>>
        {
            public bool Equals(Dictionary<string, string> x, Dictionary<string, string> y)
            {
                if (x == y)
                {
                    return true;
                }
                if (x == null || y == null)
                {
                    return false;
                }
                if (x.Count != y.Count)
                {
                    return false;
                }
                foreach (var key in x.Keys)
                {
                    if (!y.ContainsKey(key) || x[key] != y[key])
                    {
                        return false;
                    }
                }
                return true;
            }

            public int GetHashCode(Dictionary<string, string> obj)
            {
                int hash = 17;
                foreach (var kvp in obj)
                {
                    hash = hash * 31 + kvp.Key.GetHashCode();
                    hash = hash * 31 + kvp.Value.GetHashCode();
                }
                return hash;
            }
        }
        [HttpPost]
        [AllowAnonymous]
        public JsonResult PostTransactionImportData([FromBody] Dictionary<string, object> data)
        {
            try
            {
                List<QuickbookTransactionModel> importedData = JsonConvert.DeserializeObject<List<QuickbookTransactionModel>>(data["importedData"].ToString());
                string importFrom = data["importFrom"].ToString();
                // var TotalAccountHeadList = new List<AccountHeadModel>();

                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");


                DataColumn VoucherID = new DataColumn("VoucherID", typeof(string));
                DataColumn Guid = new DataColumn("Guid", typeof(string));
                DataColumn VoucherType = new DataColumn("VoucherType", typeof(string));
                DataColumn VoucherNo = new DataColumn("VoucherNo", typeof(string));
                DataColumn VoucherDate = new DataColumn("VoucherDate", typeof(string));
                DataColumn Narration = new DataColumn("Narration", typeof(string));
                DataColumn Note1 = new DataColumn("Note1", typeof(string));
                DataColumn Note2 = new DataColumn("Note2", typeof(string));
                DataColumn AtraiAccount = new DataColumn("AtraiAccount", typeof(string));
                DataColumn LedgerName = new DataColumn("LedgerName", typeof(string));
                DataColumn Debit = new DataColumn("Debit", typeof(string));
                DataColumn Credit = new DataColumn("Credit", typeof(string));
                DataColumn Remarks = new DataColumn("Remarks", typeof(string));
                DataColumn ImportFrom = new DataColumn("ImportFrom", typeof(string));


                DataTable dataTable = new DataTable();
                dataTable.Columns.Add(VoucherID);
                dataTable.Columns.Add(Guid);
                dataTable.Columns.Add(VoucherType);
                dataTable.Columns.Add(VoucherNo);
                dataTable.Columns.Add(VoucherDate);
                dataTable.Columns.Add(Narration);
                dataTable.Columns.Add(Note1);
                dataTable.Columns.Add(Note2);
                dataTable.Columns.Add(AtraiAccount);
                dataTable.Columns.Add(LedgerName);
                dataTable.Columns.Add(Debit);
                dataTable.Columns.Add(Credit);
                dataTable.Columns.Add(Remarks);
                dataTable.Columns.Add(ImportFrom);



                foreach (var item in importedData)
                {
                    DataRow row = dataTable.NewRow();
                    row["VoucherID"] = item.VoucherID;
                    row["VoucherNo"] = item.VoucherNo;
                    row["Guid"] = item.Guid;
                    row["Note1"] = item.note1;
                    row["Debit"] = item.Debit;
                    row["AtraiAccount"] = item.AccId;
                    row["Credit"] = item.Credit;
                    row["LedgerName"] = item.LedgerName;
                    row["Narration"] = item.Narration;
                    row["VoucherDate"] = item.VoucherDate;
                    row["VoucherType"] = item.VoucherType;
                    row["Note2"] = item.note2;
                    row["Remarks"] = item.Remarks;
                    row["ImportFrom"] = importFrom;
                    dataTable.Rows.Add(row);
                }




                #region details ///details table function///
                //var conString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                string conString = Atrai.Model.AppData.DefaultConnectionString;



                string table_Details = "Temp_Voucher_Excel";
                //string connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                SqlConnection con = new SqlConnection(conString);
                SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                con.Open();
                cmd.ExecuteNonQuery();
                //Response.Redirect("done.aspx");
                con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dataTable.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dataTable);

                    conn.Close();
                }
                #endregion
                //accountheadlist creation
                var xx = _accountHeadRepository.All().Count();

                if (xx == 0)
                {

                    SqlParameter[] sqlParameter1 = new SqlParameter[2];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", "AccountHead_Tally");

                    Helper.ExecProc("[prcAutoInsert]", sqlParameter1);


                    //db.Database.ExecuteSqlCommand("Exec prcCloseFiscalYear @comid", new SqlParameter("@comid", comid));
                    //TempData["Message"] = "Fiscal year and Accounts Head Craeted Successfully.";
                    //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.OpeningYear.ToString(), "prcAutoInsert", model.OpeningYear.ToString());

                }



                return Json(dataTable);
            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public JsonResult PostImportData([FromBody] List<ImportModel> importedData)
        {
            try
            {
                var TotalAccountHeadList = new List<AccountHeadModel>();

                foreach (var item in importedData)
                {
                    var AccountHead = new AccountHeadModel();
                    var accountdata = _accountHeadRepository.All().Where(x => x.AccName == item.AccName).FirstOrDefault();
                    if (accountdata != null)
                    {
                        item.Remarks = "Duplicate Found";
                    }
                    else
                    {

                        var parentinfo = _accountHeadRepository.All()
                            .Include(x => x.vAccountGroupHead)
                            .Include(x => x.AccountCategorys)
                            .Where(y => y.ParentId == item.ParentId)
                       .Select(g => new
                       {
                           g.AccName,
                           g.AccCode,
                           g.NumericNumber,
                           g.AccountCategorys.AccountType,
                           ParentCode = g.vAccountGroupHead.AccCode
                       }).ToList();



                        string MaxAccCode = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(y => y.Id == item.ParentId).SingleOrDefault().AccCode + "01";
                        int SLNO = 1;
                        if (parentinfo.Count != 0)
                        {

                            var length = parentinfo.LastOrDefault().AccCode.Length;

                            if (length > 7)
                            {
                                //MaxAccCode = (int.Parse(AccountHeadList.LastOrDefault().AccCode.Substring(AccountHeadList.LastOrDefault().AccCode.Length - 6)) + 1).ToString();
                                MaxAccCode = (Int64.Parse(parentinfo.LastOrDefault().AccCode) + 1).ToString();
                            }
                            else
                            {
                                MaxAccCode = (Int64.Parse(parentinfo.LastOrDefault().AccCode) + 1).ToString();
                            }

                            SLNO = int.Parse(MaxAccCode.Replace(parentinfo.LastOrDefault().AccCode, "0").ToString()) + 1;
                        }




                        //var parentinfoagain = _accountHeadRepository.All()
                        // .Include(x => x.vAccountGroupHead)
                        // .Include(x => x.AccountCategory)
                        // .Where(y => y.ParentId == item.ParentId).FirstOrDefault();
                        //if (item.Type == "Ledger")
                        //{
                        //    AccountHead.AccType = "L";

                        //}
                        //else if (item.Type == "Group") {
                        //    AccountHead.AccType = "G";
                        //}
                        AccountHead.AccType = item.Type;
                        AccountHead.AccName = item.AccName;
                        AccountHead.AccCode = MaxAccCode;
                        AccountHead.NumericNumber = SLNO;
                        AccountHead.OpDate = DateTime.Parse(item.OP_Date);
                        AccountHead.ParentId = item.ParentId;
                        AccountHead.AccountCategoryId = item.CategoryId;

                        var AccountCategoryData = _accountCategoryRepository.All().Where(x => x.Id == item.CategoryId).FirstOrDefault();


                        if (AccountCategoryData != null)
                        {
                            if (AccountCategoryData.AccountType == "Asset")
                            {
                                AccountHead.OpDebit = decimal.Parse(item.OP_Balance);
                                AccountHead.OpDebitLocal = decimal.Parse(item.OP_Balance);
                                AccountHead.OpCredit = 0;
                                AccountHead.OpCreditLocal = 0;

                            }
                            else if (AccountCategoryData.AccountType == "Liability")
                            {
                                AccountHead.OpCredit = decimal.Parse(item.OP_Balance);
                                AccountHead.OpCreditLocal = decimal.Parse(item.OP_Balance);
                                AccountHead.OpDebit = 0;
                                AccountHead.OpDebitLocal = 0;

                            }
                            else
                            {
                                AccountHead.OpDebit = 0;
                                AccountHead.OpCredit = 0;
                                AccountHead.OpCreditLocal = 0;
                                AccountHead.OpDebitLocal = 0;
                            }
                        }

                        else
                        {
                            item.Remarks = "Null CategoryId";

                        }

                        TotalAccountHeadList.Add(AccountHead);
                        item.Remarks = "Success";

                    }



                }

                _accountHeadRepository.AddRange(TotalAccountHeadList);

                return Json(new { success = true, count = TotalAccountHeadList.Count, TotalAccountHeadList, importedData });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public JsonResult PostImportXMLData([FromBody] Dictionary<string, object> data)
        {
            try
            {

                List<ImportModel> importedData = JsonConvert.DeserializeObject<List<ImportModel>>(data["importedData"].ToString());
                string importFrom = data["importFrom"].ToString();

                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");



                DataColumn AccId = new DataColumn("AccId", typeof(string));
                DataColumn ParentId = new DataColumn("ParentId", typeof(string));
                DataColumn CategoryId = new DataColumn("CategoryId", typeof(string));
                DataColumn AccName = new DataColumn("AccName", typeof(string));
                DataColumn AccGroup = new DataColumn("AccGroup", typeof(string));
                DataColumn AccCategory = new DataColumn("AccCategory", typeof(string));
                DataColumn OP_Balance = new DataColumn("OP_Balance", typeof(string));
                DataColumn OP_Date = new DataColumn("OP_Date", typeof(string));
                DataColumn Type = new DataColumn("Type", typeof(string));
                DataColumn DetailType = new DataColumn("DetailType", typeof(string));
                DataColumn Description = new DataColumn("Description", typeof(string));
                DataColumn Remarks = new DataColumn("Remarks", typeof(string));
                DataColumn ImportFrom = new DataColumn("ImportFrom", typeof(string));


                DataTable dataTable = new DataTable();
                dataTable.Columns.Add(AccId);
                dataTable.Columns.Add(ParentId);
                dataTable.Columns.Add(CategoryId);
                dataTable.Columns.Add(AccName);
                dataTable.Columns.Add(AccGroup);
                dataTable.Columns.Add(AccCategory);
                dataTable.Columns.Add(OP_Balance);
                dataTable.Columns.Add(OP_Date);
                dataTable.Columns.Add(Type);
                dataTable.Columns.Add(Remarks);
                dataTable.Columns.Add(DetailType);
                dataTable.Columns.Add(Description);
                dataTable.Columns.Add(ImportFrom);

                foreach (var item in importedData)
                {
                    DataRow row = dataTable.NewRow();
                    row["AccId"] = item.AccId;
                    row["ParentId"] = item.ParentId;
                    row["CategoryId"] = item.CategoryId;
                    row["AccName"] = item.AccName;
                    row["AccGroup"] = item.AccGroup;
                    row["AccCategory"] = item.AccCategory;
                    row["OP_Balance"] = item.OP_Balance;
                    row["OP_Date"] = item.OP_Date;
                    row["Type"] = item.Type;
                    row["Remarks"] = item.Remarks;
                    row["DetailType"] = item.DetailType;
                    row["Description"] = item.Description;
                    row["ImportFrom"] = importFrom;

                    dataTable.Rows.Add(row);
                }




                #region details ///details table function///
                //var conString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                string conString = Atrai.Model.AppData.DefaultConnectionString;



                string table_Details = "Temp_Accounts_Tally";
                //string connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                SqlConnection con = new SqlConnection(conString);
                SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                con.Open();
                cmd.ExecuteNonQuery();
                //Response.Redirect("done.aspx");
                con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dataTable.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dataTable);

                    conn.Close();
                }
                #endregion
                //accountheadlist creation
                var xx = _accountHeadRepository.All().Count();

                if (xx == 0)
                {

                    SqlParameter[] sqlParameter1 = new SqlParameter[2];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", "AccountHead_Tally");

                    Helper.ExecProc("[prcAutoInsert]", sqlParameter1);


                    //db.Database.ExecuteSqlCommand("Exec prcCloseFiscalYear @comid", new SqlParameter("@comid", comid));
                    //TempData["Message"] = "Fiscal year and Accounts Head Craeted Successfully.";
                    //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.OpeningYear.ToString(), "prcAutoInsert", model.OpeningYear.ToString());

                }


                return Json(dataTable);

            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }







        public IActionResult GetDropdownData()
        {
            // Define the dropdown options
            var data = new List<SelectListItem>
    {
        new SelectListItem { Value = "Liability", Text = "Liability" },
        new SelectListItem { Value = "Income", Text = "Income" },
        new SelectListItem { Value = "Expense", Text = "Expense" },
        new SelectListItem { Value = "Sales", Text = "Sales" },
        new SelectListItem { Value = "Purchase", Text = "Purchase" },
        new SelectListItem { Value = "Cash", Text = "Cash" },
        new SelectListItem { Value = "Bank", Text = "Bank" },
        new SelectListItem { Value = "Fixed Asset", Text = "Fixed Asset" }
    };

            // Return the data as a JSON object
            return Json(data);
        }




        [AllowAnonymous]
        public JsonResult GetDataMappingList()
        {
            try
            {


                //var dataList = _cache.Get<List<Dictionary<string, string>>>("ColumnHeader");
                var dataList = _cache.Get<List<string>>("ColumnHeader").ToList();



                var uniqueDataList = new List<Dictionary<string, string>>();

                List<string> ExcelColumnHeader = new List<string>();

                foreach (var key in dataList)
                {
                    ExcelColumnHeader.Add(key);
                }




                var datamappinglist = new List<DataMappingModel>();



                var AccountHeadName = ExcelColumnHeader.Where(x => x.Contains("Account Head")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccName", ExcelColumn = AccountHeadName ?? "" });



                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccId", ExcelColumn = "" });
                var OpeningDate = ExcelColumnHeader.Where(x => x.Contains("Opening Date")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "OP_Date", ExcelColumn = OpeningDate ?? "" });



                var OpeningBalance = ExcelColumnHeader.Where(x => x.Contains("Opening Balance")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "OP_Balance", ExcelColumn = OpeningBalance ?? "" });
                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "Debit", ExcelColumn = "" });

                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "Credit", ExcelColumn = "" });


                var AccountCategory = ExcelColumnHeader.Where(x => x.Contains("Account Category")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccCategory", ExcelColumn = AccountCategory ?? "" });




                var AccountGroup = ExcelColumnHeader.Where(x => x.Contains("Account Group")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccGroup", ExcelColumn = AccountGroup ?? "" });





                var AccType = ExcelColumnHeader.Where(x => x.Contains("Account Type")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Type", ExcelColumn = AccType ?? "" });






                //voucher.Items.Add(a);
                return Json(datamappinglist);
                //return Json(new { Success = 1, error = false, VoucherList = abcd, PageInfo = pageinfo });

            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }

        [AllowAnonymous]
        public JsonResult GetTransactionMappingList()
        {
            try
            {


                //var dataList = _cache.Get<List<Dictionary<string, string>>>("ColumnHeader");
                var dataList = _cache.Get<List<string>>("ColumnHeader").ToList();



                var uniqueDataList = new List<Dictionary<string, string>>();

                List<string> ExcelColumnHeader = new List<string>();

                foreach (var key in dataList)
                {
                    ExcelColumnHeader.Add(key);
                }




                var datamappinglist = new List<DataMappingModel>();

                var VoucherID = ExcelColumnHeader.Where(x => x.Contains("VoucherID")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "VoucherID", ExcelColumn = VoucherID ?? "" });


                var VoucherType = ExcelColumnHeader.Where(x => x.Contains("Voucher Type")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "VoucherType", ExcelColumn = VoucherType ?? "" });



                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccId", ExcelColumn = "" });
                var VoucherNo = ExcelColumnHeader.Where(x => x.Contains("Voucher No")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "VoucherNo", ExcelColumn = VoucherNo ?? "" });



                var VoucherDate = ExcelColumnHeader.Where(x => x.Contains("Voucher Date")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "VoucherDate", ExcelColumn = VoucherDate ?? "" });
                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "Debit", ExcelColumn = "" });

                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "Credit", ExcelColumn = "" });


                var Narration = ExcelColumnHeader.Where(x => x.Contains("Narration")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Narration", ExcelColumn = Narration ?? "" });




                var note1 = ExcelColumnHeader.Where(x => x.Contains("Note1")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "note1", ExcelColumn = note1 ?? "" });





                var note2 = ExcelColumnHeader.Where(x => x.Contains("Note2")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "note2", ExcelColumn = note2 ?? "" });


                var AccId = ExcelColumnHeader.Where(x => x.Contains("Atrai Account")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccId", ExcelColumn = AccId ?? "" });

                var LedgerName = ExcelColumnHeader.Where(x => x.Contains("Ledger Name")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "LedgerName", ExcelColumn = LedgerName ?? "" });

                var Debit = ExcelColumnHeader.Where(x => x.Contains("Debit")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Debit", ExcelColumn = Debit ?? "" });

                var Credit = ExcelColumnHeader.Where(x => x.Contains("Credit")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Credit", ExcelColumn = Credit ?? "" });


                //voucher.Items.Add(a);
                return Json(datamappinglist);
                //return Json(new { Success = 1, error = false, VoucherList = abcd, PageInfo = pageinfo });

            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }

        [AllowAnonymous]
        public JsonResult GetQuickbookList()
        {
            try
            {


                //var dataList = _cache.Get<List<Dictionary<string, string>>>("ColumnHeader");
                var dataList = _cache.Get<List<string>>("ColumnHeader").ToList();



                var uniqueDataList = new List<Dictionary<string, string>>();

                List<string> ExcelColumnHeader = new List<string>();

                foreach (var key in dataList)
                {
                    ExcelColumnHeader.Add(key);
                }




                var datamappinglist = new List<DataMappingModel>();



                var Account = ExcelColumnHeader.Where(x => x.Contains("Account")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccName", ExcelColumn = Account ?? "" });

                var Type = ExcelColumnHeader.Where(x => x.Contains("Type")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Type", ExcelColumn = Type ?? "" });



                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccId", ExcelColumn = "" });
                var detailType = ExcelColumnHeader.Where(x => x.Contains("Detail type")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "detailType", ExcelColumn = detailType ?? "" });



                var description = ExcelColumnHeader.Where(x => x.Contains("Description")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Description", ExcelColumn = description ?? "" });
                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "Debit", ExcelColumn = "" });



                var balance = ExcelColumnHeader.Where(x => x.Contains("Balance")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Balance", ExcelColumn = balance ?? "" });


                //voucher.Items.Add(a);
                return Json(datamappinglist);
                //return Json(new { Success = 1, error = false, VoucherList = abcd, PageInfo = pageinfo });

            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }





        [AllowAnonymous]
        public JsonResult GetTransactionQuickbookList()
        {
            try
            {


                //var dataList = _cache.Get<List<Dictionary<string, string>>>("ColumnHeader");
                var dataList = _cache.Get<List<string>>("ColumnHeader").ToList();



                var uniqueDataList = new List<Dictionary<string, string>>();

                List<string> ExcelColumnHeader = new List<string>();

                foreach (var key in dataList)
                {
                    ExcelColumnHeader.Add(key);
                }




                var datamappinglist = new List<DataMappingModel>();



                var VoucherID = ExcelColumnHeader.Where(x => x.Contains("VoucherID")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "VoucherID", ExcelColumn = VoucherID ?? "" });

                var VoucherType = ExcelColumnHeader.Where(x => x.Contains("Transaction Type")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "VoucherType", ExcelColumn = VoucherType ?? "" });



                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccId", ExcelColumn = "" });
                var VoucherNo = ExcelColumnHeader.Where(x => x.Contains("Num")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "VoucherNo", ExcelColumn = VoucherNo ?? "" });



                var VoucherDate = ExcelColumnHeader.Where(x => x.Contains("Date")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "VoucherDate", ExcelColumn = VoucherDate ?? "" });
                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "Debit", ExcelColumn = "" });

                //datamappinglist.Add(new DataMappingModel { AtraiColumn = "Credit", ExcelColumn = "" });


                var Narration = ExcelColumnHeader.Where(x => x.Contains("Memo/Description")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Narration", ExcelColumn = Narration ?? "" });




                var note1 = ExcelColumnHeader.Where(x => x.Contains("Name")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "note1", ExcelColumn = note1 ?? "" });



                var LedgerName = ExcelColumnHeader.Where(x => x.Contains("Account")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "LedgerName", ExcelColumn = LedgerName ?? "" });

                var AccId = ExcelColumnHeader.Where(x => x.Contains("AccId")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "AccId", ExcelColumn = AccId ?? "" });


                var Debit = ExcelColumnHeader.Where(x => x.Contains("Debit")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Debit", ExcelColumn = Debit ?? "" });

                var Credit = ExcelColumnHeader.Where(x => x.Contains("Credit")).FirstOrDefault();
                datamappinglist.Add(new DataMappingModel { AtraiColumn = "Credit", ExcelColumn = Credit ?? "" });


                //voucher.Items.Add(a);
                return Json(datamappinglist);
                //return Json(new { Success = 1, error = false, VoucherList = abcd, PageInfo = pageinfo });

            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }

        public class DataMappingModel
        {
            [Required]

            public string? AtraiColumn { get; set; }
            [Required]

            public string? ExcelColumn { get; set; }
            public string? DefaultValues { get; set; }

        }

        public class ImportModel
        {
            public int AccId { get; set; }
            public int? ParentId { get; set; }
            public int? CategoryId { get; set; }
            public string? DetailType { get; set; }
            public string? Description { get; set; }
            public string? AccName { get; set; }
            public string? AccGroup { get; set; }
            public string? AccCategory { get; set; }
            public string? OP_Balance { get; set; }
            public string? OP_Date { get; set; }
            public string? Type { get; set; }
            public string? Remarks { get; set; }

        }
        public class XMLimportModel
        {
            public string? AccName { get; set; }
            public string? AccCategory { get; set; }
            public string? AccGroup { get; set; }
            public string? Guid { get; set; }
            //public string? OP_Balance { get; set; }
            //public string? OP_Date { get; set; }
            public string? Type { get; set; }
        }
        public class XMLimportTransactionModel
        {

            public string? VoucherID { get; set; }
            public string? Guid { get; set; }
            public string? VoucherType { get; set; }
            public string? VoucherNo { get; set; }
            public string? VoucherDate { get; set; }

            public string? Narration { get; set; }
            public string? note1 { get; set; }
            public string? note2 { get; set; }
            public string? LedgerName { get; set; }
            public string? Amount { get; set; }
            public string? Debit { get; set; }
            public string? Credit { get; set; }
            public string? AccId { get; set; }
        }

        public class QuickbookTransactionModel
        {

            public string? VoucherID { get; set; }
            public string? Guid { get; set; }
            public string? VoucherType { get; set; }
            public string? VoucherNo { get; set; }
            public string? VoucherDate { get; set; }

            public string? Narration { get; set; }
            public string? note1 { get; set; }
            public string? note2 { get; set; }

            public string? LedgerName { get; set; }

            public string? Debit { get; set; }
            public string? Credit { get; set; }
            public string? AccId { get; set; }
            public string? Remarks { get; set; }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddVoucherType(Acc_VoucherTypeModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _VoucherTypeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.VoucherTypeName.ToString());

                }
                else
                {
                    _VoucherTypeRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.VoucherTypeName.ToString());

                }
                return RedirectToAction("VoucherTypeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditVoucherType(int VoucherTypeId)
        {
            ViewBag.ActionType = "Edit";
            var VoucherType = _VoucherTypeRepository.Find(VoucherTypeId);
            //ViewBag.VoucherTypeGroupHead = _VoucherTypeRepository.GetAllForDropDown();
            return View("AddVoucherType", VoucherType);
        }

        public ActionResult DeleteVoucherType(int VoucherTypeId)
        {
            var model = _VoucherTypeRepository.Find(VoucherTypeId);
            if (model != null)
            {
                _VoucherTypeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.VoucherTypeName);


                return RedirectToAction("VoucherTypeList");
            }
            return RedirectToAction("VoucherTypeList");
        }
        #endregion


        #region VoucherCreatedType
        public IActionResult VoucherCreatedTypeList()
        {
            return View(_accVoucherCreatedTypeRepository.All());
        }

        [HttpGet]
        public ActionResult AddVoucherCreatedType()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.VoucherCreatedTypeGroupHead = _VoucherCreatedTypeRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddVoucherCreatedType(Acc_VoucherNoCreatedTypeModel model)
        {
            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _accVoucherCreatedTypeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.VoucherNoCreatedTypeName.ToString());

                }
                else
                {
                    _accVoucherCreatedTypeRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.VoucherNoCreatedTypeName.ToString());

                }
                return RedirectToAction("VoucherCreatedTypeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditVoucherCreatedType(int VoucherCreatedTypeId)
        {
            ViewBag.ActionType = "Edit";
            var VoucherCreatedType = _accVoucherCreatedTypeRepository.Find(VoucherCreatedTypeId);
            //ViewBag.VoucherCreatedTypeGroupHead = _VoucherCreatedTypeRepository.GetAllForDropDown();
            return View("AddVoucherCreatedType", VoucherCreatedType);
        }

        public ActionResult DeleteVoucherCreatedType(int VoucherCreatedTypeId)
        {
            var model = _accVoucherCreatedTypeRepository.Find(VoucherCreatedTypeId);
            if (model != null)
            {
                _accVoucherCreatedTypeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.VoucherNoCreatedTypeName);


                return RedirectToAction("VoucherCreatedTypeList");
            }
            return RedirectToAction("VoucherCreatedTypeList");
        }
        #endregion


        #region VoucherNoPrefix
        public IActionResult VoucherNoPrefixList()
        {
            return View(_accVoucherNoPrefixRepository.All().Include(x => x.vVoucherTypes));
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AddVoucherNoPrefix()
        {
            ViewBag.ActionType = "Create";
            ViewBag.VoucherTypeId = _VoucherTypeRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult AddVoucherNoPrefix(Acc_VoucherNoPrefixModel model)
        {
            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _accVoucherNoPrefixRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.VoucherShortPrefix.ToString());

                }
                else
                {
                    _accVoucherNoPrefixRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.VoucherShortPrefix.ToString());

                }
                return RedirectToAction("VoucherNoPrefixList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult EditVoucherNoPrefix(int VoucherNoPrefixId)
        {
            ViewBag.ActionType = "Edit";
            var VoucherNoPrefix = _accVoucherNoPrefixRepository.Find(VoucherNoPrefixId);
            ViewBag.VoucherTypeId = _VoucherTypeRepository.GetAllForDropDown();
            return View("AddVoucherNoPrefix", VoucherNoPrefix);
        }

        [AllowAnonymous]
        public ActionResult DeleteVoucherNoPrefix(int VoucherNoPrefixId)
        {
            var model = _accVoucherNoPrefixRepository.Find(VoucherNoPrefixId);
            if (model != null)
            {
                _accVoucherNoPrefixRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.VoucherShortPrefix);


                return RedirectToAction("VoucherNoPrefixList");
            }
            return RedirectToAction("VoucherNoPrefixList");
        }
        #endregion

        #region 

        [AllowAnonymous]
        [HttpGet]
        public IActionResult UnitConversion()
        {
            return View();
        }

        [AllowAnonymous]
        [HttpPost]
        public IActionResult UnitConversionCreation(UnitConversionModel model)
        {

            if (model.Id == 0)
            {

                unitConversionRepository.Insert(model);

                return Json(new { success = "1", message = "Data Save Successfully" });

            }
            else
            {
                unitConversionRepository.Update(model, model.Id);

                return Json(new { success = "1", message = "Data Update Successfully" });

            }
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetUnitConversionList()
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");

                var data = unitConversionRepository.All()
                                                        .Where(x => x.ComId == ComId)
                                                        .Include(x => x.PrimaryUnitModel)
                                                        .Include(x => x.SecondaryUnitModel)
                                                        .Select(x => new
                                                        {
                                                            Id = x.Id,
                                                            PrimaryUnit = x.PrimaryUnitModel.UnitName,
                                                            SecondaryUnit = x.SecondaryUnitModel.UnitName,
                                                            ConversionRate = x.ConversionRate,
                                                            x.PrimaryUnitId,
                                                            x.SecondaryUnitId
                                                        }).OrderByDescending(x => x.Id)
                                                        .ToList();




                return Json(new { Success = 1, error = false, data = data });

            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult DeleteUnitConversion(int Id)
        {
            var data = unitConversionRepository.Find(Id);

            unitConversionRepository.Delete(data);

            return Json(new { success = "1", msg = "Deleted Successfully" });

        }

        #endregion


        #region Fiscalyear
        public IActionResult FiscalyearList()
        {
            return View(_accFiscalYearRepository.All());
        }


        [HttpGet]
        public ActionResult AddFiscalYear()
        {
            ViewBag.ActionType = "Create";
            ViewBag.FiscalYearType = _fiscalYearTypeRepository.GetAllForDropDown();

            FiscalyearCreationModel abc = new FiscalyearCreationModel();
            abc.OpeningYear = DateTime.Now.Date.Year;
            return View(abc);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddFiscalYear(FiscalyearCreationModel model)
        {
            if (ModelState.IsValid)
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                //var errors = ModelState.Where(x => x.Value.Errors.Any())
                //.Select(x => new { x.Key, x.Value.Errors });


                var previousYear = DateTime.Now.Date.Year - 1; // to get previous year


                DateTime fromdate = new DateTime(model.OpeningYear, 1, 1);
                DateTime todate = new DateTime(model.OpeningYear, 12, 31);

                var fiscalyeartype = _fiscalYearTypeRepository.Find(model.FiscalYearTypeId);

                if (model.FiscalYearTypeId == 2)
                {
                    fromdate = new DateTime(previousYear, fiscalyeartype.FYStartMonth, fiscalyeartype.FYStartDate);
                    todate = new DateTime(previousYear + 1, fiscalyeartype.FYEndMonth, fiscalyeartype.FYEndDate);
                }
                else
                {
                    fromdate = new DateTime(previousYear, fiscalyeartype.FYStartMonth, fiscalyeartype.FYStartDate);
                    todate = new DateTime(previousYear, fiscalyeartype.FYEndMonth, fiscalyeartype.FYEndDate);

                }

                var x = _accFiscalYearRepository.All().Count();

                if (x == 0)
                {

                    SqlParameter[] sqlParameter = new SqlParameter[4];
                    sqlParameter[0] = new SqlParameter("@comid", ComId);
                    sqlParameter[1] = new SqlParameter("@dtFrom", fromdate);
                    sqlParameter[2] = new SqlParameter("@dtTo", todate);
                    sqlParameter[3] = new SqlParameter("@UserId", UserId);


                    Helper.ExecProc("Acc_prcCloseFiscalYearManual", sqlParameter);

                    //db.Database.ExecuteSqlCommand("Exec prcCloseFiscalYear @comid", new SqlParameter("@comid", comid));
                    TempData["Message"] = "Year Craeted Successfully.";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.OpeningYear.ToString(), "Acc_PrcCloseFiscalYear", model.OpeningYear.ToString());

                }

                var xx = _accountHeadRepository.All().Count();

                if (xx == 0)
                {

                    SqlParameter[] sqlParameter = new SqlParameter[2];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    sqlParameter[1] = new SqlParameter("@TableName", "AccountHead");

                    Helper.ExecProc("[prcAutoInsert]", sqlParameter);


                    //db.Database.ExecuteSqlCommand("Exec prcCloseFiscalYear @comid", new SqlParameter("@comid", comid));
                    TempData["Message"] = "Fiscal year and Accounts Head Craeted Successfully.";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.OpeningYear.ToString(), "prcAutoInsert", model.OpeningYear.ToString());

                }


                return View("FiscalyearList", _accFiscalYearRepository.All().OrderByDescending(x => x.Id).ToList().Take(10));
            }
            else
            {
                ViewBag.ActionType = "Create";
                ViewBag.FiscalYearType = _fiscalYearTypeRepository.GetAllForDropDown();

                FiscalyearCreationModel abc = new FiscalyearCreationModel();
                abc.OpeningYear = DateTime.Now.Date.Year;
                return View(abc);
            }
            //return View(model);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult FiscalYearList(Acc_FiscalYearModel model)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");
            var UserId = HttpContext.Session.GetInt32("UserId");

            //var errors = ModelState.Where(x => x.Value.Errors.Any())
            //.Select(x => new { x.Key, x.Value.Errors });


            var previousYear = DateTime.Now.Date.Year - 1; // to get previous year

            DateTime fromdate = new DateTime(previousYear, 1, 1);
            DateTime todate = new DateTime(previousYear, 12, 31);


            //var fromdate = DateTime.Now.Date;
            //var todate = DateTime.Now.Date;
            var x = _accFiscalYearRepository.All().Count();

            if (x == 0)
            {

                SqlParameter[] sqlParameter = new SqlParameter[4];
                sqlParameter[0] = new SqlParameter("@comid", ComId);
                sqlParameter[1] = new SqlParameter("@dtFrom", fromdate);
                sqlParameter[2] = new SqlParameter("@dtTo", todate);
                sqlParameter[3] = new SqlParameter("@UserId", UserId);



                Helper.ExecProc("Acc_prcCloseFiscalYearManual", sqlParameter);

                //db.Database.ExecuteSqlCommand("Exec prcCloseFiscalYear @comid", new SqlParameter("@comid", comid));
                TempData["Message"] = "Year Craeted Successfully.";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.FYName, "Acc_PrcCloseFiscalYear", model.FYName);

            }
            else
            {


                SqlParameter[] sqlParameter = new SqlParameter[2];
                sqlParameter[0] = new SqlParameter("@comid", ComId);
                sqlParameter[1] = new SqlParameter("@userid", UserId);

                Helper.ExecProc("Acc_prcCloseFiscalYear", sqlParameter);

                //db.Database.ExecuteSqlCommand("Exec prcCloseFiscalYear @comid", new SqlParameter("@comid", comid));
                TempData["Message"] = "Year Close Successfully.";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.FYName, "Acc_PrcCloseFiscalYear", model.FYName);




            }



            return View("FiscalyearList", _accFiscalYearRepository.All().OrderByDescending(x => x.Id).ToList().Take(10));


        }


        #endregion


        #region Voucher
        public IActionResult VoucherList(string FromDate, string ToDate, int? UserList, int? Warehouse)
        {


            var comid = HttpContext.Session.GetInt32("ComId");
            var userid = HttpContext.Session.GetInt32("UserId");


            ViewBag.Userlist = _userAccountRepository.GetAllForDropDown();


            SelectListItem warehouseall = new SelectListItem() { Text = "Please Select", Value = "" };
            var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
            if (warehouselist.Count() == 0)
            {
                warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                warehouselist.Add(warehouseall);
            }
            ViewBag.Warehouse = warehouselist.OrderBy(x => x.Value);



            var transactioncomid = HttpContext.Session.GetInt32("ComId");

            DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
            DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));


            ViewBag.FromDate = dtFrom.ToString("dd-MMM-yyyy");
            ViewBag.ToDate = dtTo.ToString("dd-MMM-yyyy");

            if (FromDate == null || FromDate == "")
            {
            }
            else
            {
                dtFrom = Convert.ToDateTime(FromDate);

            }
            if (ToDate == null || ToDate == "")
            {
            }
            else
            {
                dtTo = Convert.ToDateTime(ToDate);

            }
            if (UserList == null)
            {
                UserList = userid;
            }

            ViewBag.Acc_VoucherNoPrefix = _accVoucherNoPrefixRepository.All().Where(x => x.ComId == comid).Include(x => x.vVoucherTypes).Where(x => x.isVisible == true && x.vVoucherTypes.isSystem == false).ToList();

            //transactioncomid = "1";
            //var a = ;
            // return View(_accVoucherRepository.All().Where(p => p.ComId == transactioncomid).ToList());

            var fiscalYear = _accFiscalYearRepository.All().Where(f => f.isRunning == true && f.isWorking == true).FirstOrDefault();
            if (fiscalYear != null)
            {
                //var fiscalMonth = _accFiscalMonthRepository.All().Where(f => f.OpeningdtFrom.Date <= DateTime.Now.Date && f.ClosingdtTo >= DateTime.Now.Date).FirstOrDefault();

                ViewBag.FiscalYearId = _accFiscalYearRepository.GetAllForDropDown();// new SelectList(_accFiscalYearRepository.All().OrderByDescending(y => y.Id), "Id", "FYName", fiscalYear.Id);
                ViewBag.FiscalMonthId = _accFiscalMonthRepository.GetAllForDropDown();// new SelectList(_accFiscalMonthRepository.All().Where(x => x.FYId == fiscalYear.Id).OrderByDescending(y => y.MonthName), "Id", "MonthName");

            }
            else
            {
                ViewBag.FiscalYearId = _accFiscalYearRepository.GetAllForDropDown(); //new SelectList(_accFiscalYearRepository.All().OrderByDescending(y => y.FYName), "Id", "FYName");
                ViewBag.FiscalMonthId = _accFiscalMonthRepository.GetAllForDropDown(); //new SelectList(_accFiscalMonthRepository.All().OrderByDescending(y => y.MonthName), "Id", "MonthName");
            }

            //ViewBag.IntegrationSettingMainId = new SelectList(_integrationSettingMainRepository.All().Where(v => v.ComId == comid && v.IntegrationTableName == "HR_ProcessedDataSal").OrderBy(x => x.MainSLNo), "IntegrationSettingMainId", "IntegrationSettingName");


            if (UserList == null)
            {
                ViewBag.Userlist = new SelectList(_userAccountRepository.All().OrderByDescending(y => y.Id), "Id", "Name", userid);

                var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo)).ToList();
                return View(X);
            }
            else
            {
                ViewBag.Userlist = new SelectList(_userAccountRepository.All().OrderByDescending(y => y.Id), "Id", "Name", UserList);


                if (UserList == 1)
                {
                    var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo)).ToList();

                    if (X.Count > 0)
                    {
                        return View(X);

                    }
                    else
                    {
                        X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid).OrderByDescending(x => x.Id).Take(5).ToList();
                        return View(X);

                    }
                }
                else
                {


                    var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo) && p.LuserId == UserList).ToList();

                    if (X.Count > 0)
                    {
                        return View(X);

                    }
                    else
                    {
                        X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && p.LuserId == UserList).OrderByDescending(x => x.Id).Take(5).ToList();
                        return View(X);

                    }
                }

            }

            return View();
        }


        public IActionResult VoucherListQB(string FromDate, string ToDate, int? UserList, int? Warehouse)
        {


            var comid = HttpContext.Session.GetInt32("ComId");
            var userid = HttpContext.Session.GetInt32("UserId");


            ViewBag.Userlist = _userAccountRepository.GetAllForDropDown();


            SelectListItem warehouseall = new SelectListItem() { Text = "Please Select", Value = "" };
            var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
            if (warehouselist.Count() == 0)
            {
                warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                warehouselist.Add(warehouseall);
            }
            ViewBag.Warehouse = warehouselist.OrderBy(x => x.Value);



            var transactioncomid = HttpContext.Session.GetInt32("ComId");

            DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
            DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));


            ViewBag.FromDate = dtFrom.ToString("dd-MMM-yyyy");
            ViewBag.ToDate = dtTo.ToString("dd-MMM-yyyy");

            if (FromDate == null || FromDate == "")
            {
            }
            else
            {
                dtFrom = Convert.ToDateTime(FromDate);

            }
            if (ToDate == null || ToDate == "")
            {
            }
            else
            {
                dtTo = Convert.ToDateTime(ToDate);

            }
            if (UserList == null)
            {
                UserList = userid;
            }

            ViewBag.Acc_VoucherNoPrefix = _accVoucherNoPrefixRepository.All().Where(x => x.ComId == comid).Include(x => x.vVoucherTypes).Where(x => x.isVisible == true && x.vVoucherTypes.isSystem == false).ToList();

            //transactioncomid = "1";
            //var a = ;
            // return View(_accVoucherRepository.All().Where(p => p.ComId == transactioncomid).ToList());

            var fiscalYear = _accFiscalYearRepository.All().Where(f => f.isRunning == true && f.isWorking == true).FirstOrDefault();
            if (fiscalYear != null)
            {
                //var fiscalMonth = _accFiscalMonthRepository.All().Where(f => f.OpeningdtFrom.Date <= DateTime.Now.Date && f.ClosingdtTo >= DateTime.Now.Date).FirstOrDefault();

                ViewBag.FiscalYearId = _accFiscalYearRepository.GetAllForDropDown();// new SelectList(_accFiscalYearRepository.All().OrderByDescending(y => y.Id), "Id", "FYName", fiscalYear.Id);
                ViewBag.FiscalMonthId = _accFiscalMonthRepository.GetAllForDropDown();// new SelectList(_accFiscalMonthRepository.All().Where(x => x.FYId == fiscalYear.Id).OrderByDescending(y => y.MonthName), "Id", "MonthName");

            }
            else
            {
                ViewBag.FiscalYearId = _accFiscalYearRepository.GetAllForDropDown(); //new SelectList(_accFiscalYearRepository.All().OrderByDescending(y => y.FYName), "Id", "FYName");
                ViewBag.FiscalMonthId = _accFiscalMonthRepository.GetAllForDropDown(); //new SelectList(_accFiscalMonthRepository.All().OrderByDescending(y => y.MonthName), "Id", "MonthName");
            }

            //ViewBag.IntegrationSettingMainId = new SelectList(_integrationSettingMainRepository.All().Where(v => v.ComId == comid && v.IntegrationTableName == "HR_ProcessedDataSal").OrderBy(x => x.MainSLNo), "IntegrationSettingMainId", "IntegrationSettingName");


            if (UserList == null)
            {
                ViewBag.Userlist = new SelectList(_userAccountRepository.All().OrderByDescending(y => y.Id), "Id", "Name", userid);

                var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo)).ToList();
                return View(X);
            }
            else
            {
                ViewBag.Userlist = new SelectList(_userAccountRepository.All().OrderByDescending(y => y.Id), "Id", "Name", UserList);


                if (UserList == 1)
                {
                    var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo)).ToList();

                    if (X.Count > 0)
                    {
                        return View(X);

                    }
                    else
                    {
                        X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid).OrderByDescending(x => x.Id).Take(5).ToList();
                        return View(X);

                    }
                }
                else
                {


                    var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo) && p.LuserId == UserList).ToList();

                    if (X.Count > 0)
                    {
                        return View(X);

                    }
                    else
                    {
                        X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && p.LuserId == UserList).OrderByDescending(x => x.Id).Take(5).ToList();
                        return View(X);

                    }
                }

            }

            return View();
        }
        public IActionResult BillListQB(string FromDate, string ToDate, int? UserList, int? Warehouse, string Type)
        {


            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var userid = HttpContext.Session.GetInt32("UserId");

                var isMultiCurrency = _storeSettingRepository.All().Where(x => x.ComId == comid).FirstOrDefault().isMultiCurrency;

                ViewBag.isMultiCurrency = isMultiCurrency;

                ViewBag.Userlist = _userAccountRepository.GetAllForDropDown();


                SelectListItem warehouseall = new SelectListItem() { Text = "Please Select", Value = "" };
                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                    warehouselist.Add(warehouseall);
                }
                ViewBag.Warehouse = warehouselist.OrderBy(x => x.Value);
                ViewBag.ListType = Type ?? "Expenses";
                if (Type == "Suppliers")
                {

                    var supplierid = "";
                    string dtFrom1 = DateTime.Now.Date.ToString("dd-MMM-yy");
                    string dtTo1 = DateTime.Now.Date.ToString("dd-MMM-yy");
                    var Types = "Supplier";


                    var quary = $"Exec Acc_SupplierBalance  '" + comid + "','" + supplierid + "',0,'" + dtFrom1 + "' ,'" + dtTo1 + "','" + Types + "',1";


                    SqlParameter[] parameters = new SqlParameter[7];
                    parameters[0] = new SqlParameter("@ComId", comid);
                    parameters[1] = new SqlParameter("@SupplierId", supplierid);
                    parameters[2] = new SqlParameter("@UrlLink", "");
                    parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom1));
                    parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo1));
                    parameters[5] = new SqlParameter("@LedgerFor", Types);
                    parameters[6] = new SqlParameter("@BalanceUpdate", "1");


                    Helper.ExecProc("Acc_SupplierBalance", parameters);
                }
                //var doctyPe = _docTypeRepository.GetAllDoctype().FirstOrDefault();
                //ViewBag.POAmount = _purchaseRepository.All().Include(x => x.DocTypeList).Where(x => x.DocTypeList.DocType == "Purchase").Sum(x=>x.Total);
                //ViewBag.POCount = _purchaseRepository.All().Include(x => x.DocTypeList).Where(x => x.DocTypeList.DocType == "Purchase").Count();
                //ViewBag.OverDueAmount = _purchaseRepository.All().Include(x => x.DocTypeList).Where(x => x.DocTypeList.DocType == "Bill" && x.Status=="Due").Sum(x => x.Total);
                //ViewBag.OverDueCount = _purchaseRepository.All().Include(x => x.DocTypeList).Where(x => x.DocTypeList.DocType == "Bill" && x.Status == "Due").Count();
                //ViewBag.OpenAmount = 43018;
                //ViewBag.OpenCount = 12;
                //ViewBag.PaidAmount = 148038;
                //ViewBag.PaidCount = 4;

                var transactioncomid = HttpContext.Session.GetInt32("ComId");

                DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));


                ViewBag.FromDate = dtFrom.ToString("dd-MMM-yyyy");
                ViewBag.ToDate = dtTo.ToString("dd-MMM-yyyy");

                if (FromDate == null || FromDate == "")
                {
                }
                else
                {
                    dtFrom = Convert.ToDateTime(FromDate);

                }
                if (ToDate == null || ToDate == "")
                {
                }
                else
                {
                    dtTo = Convert.ToDateTime(ToDate);

                }
                if (UserList == null)
                {
                    UserList = userid;
                }

                ViewBag.Acc_VoucherNoPrefix = _accVoucherNoPrefixRepository.All().Where(x => x.ComId == comid).Include(x => x.vVoucherTypes).Where(x => x.isVisible == true && x.vVoucherTypes.isSystem == false).ToList();

                //transactioncomid = "1";
                //var a = ;
                // return View(_accVoucherRepository.All().Where(p => p.ComId == transactioncomid).ToList());

                var fiscalYear = _accFiscalYearRepository.All().Where(f => f.isRunning == true && f.isWorking == true).FirstOrDefault();
                if (fiscalYear != null)
                {
                    //var fiscalMonth = _accFiscalMonthRepository.All().Where(f => f.OpeningdtFrom.Date <= DateTime.Now.Date && f.ClosingdtTo >= DateTime.Now.Date).FirstOrDefault();

                    ViewBag.FiscalYearId = _accFiscalYearRepository.GetAllForDropDown();// new SelectList(_accFiscalYearRepository.All().OrderByDescending(y => y.Id), "Id", "FYName", fiscalYear.Id);
                    ViewBag.FiscalMonthId = _accFiscalMonthRepository.GetAllForDropDown();// new SelectList(_accFiscalMonthRepository.All().Where(x => x.FYId == fiscalYear.Id).OrderByDescending(y => y.MonthName), "Id", "MonthName");

                }
                else
                {
                    ViewBag.FiscalYearId = _accFiscalYearRepository.GetAllForDropDown(); //new SelectList(_accFiscalYearRepository.All().OrderByDescending(y => y.FYName), "Id", "FYName");
                    ViewBag.FiscalMonthId = _accFiscalMonthRepository.GetAllForDropDown(); //new SelectList(_accFiscalMonthRepository.All().OrderByDescending(y => y.MonthName), "Id", "MonthName");
                }

                //ViewBag.IntegrationSettingMainId = new SelectList(_integrationSettingMainRepository.All().Where(v => v.ComId == comid && v.IntegrationTableName == "HR_ProcessedDataSal").OrderBy(x => x.MainSLNo), "IntegrationSettingMainId", "IntegrationSettingName");


                if (UserList == null)
                {
                    ViewBag.Userlist = new SelectList(_userAccountRepository.All().OrderByDescending(y => y.Id), "Id", "Name", userid);

                    var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo)).ToList();
                    return View(X);
                }
                else
                {
                    ViewBag.Userlist = new SelectList(_userAccountRepository.All().OrderByDescending(y => y.Id), "Id", "Name", UserList);


                    if (UserList == 1)
                    {
                        var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo)).ToList();

                        if (X.Count > 0)
                        {
                            return View(X);

                        }
                        else
                        {
                            X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid).OrderByDescending(x => x.Id).Take(5).ToList();
                            return View(X);

                        }
                    }
                    else
                    {


                        var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo) && p.LuserId == UserList).ToList();

                        if (X.Count > 0)
                        {
                            return View(X);

                        }
                        else
                        {
                            X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && p.LuserId == UserList).OrderByDescending(x => x.Id).Take(5).ToList();
                            return View(X);

                        }
                    }

                }

                return View();
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        public string GetSalesCode(int doctypeId)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var docPrefix = docPrefixRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId).FirstOrDefault();

            if (docPrefix.MonthSuffix == false && docPrefix.YearSuffix == false && docPrefix.DateSuffix == false)
            {
                var docNo = docPrefix.LastDocNo + 1;
                var code = docPrefix.DocPrefix + "_" + docNo.ToString();

                docPrefix.LastDocNo += 1;
                docPrefix.LastGeneratedCode = code;
                docPrefixRepository.Update(docPrefix, docPrefix.Id);
                return code;
            }
            else if (docPrefix.YearSuffix == true)
            {
                string yearFormat = docPrefix.Format.Contains("yyyy") ? "yyyy" : "yy";


                DateTime currentDate = DateTime.Now;

                int currentYear = int.Parse(currentDate.ToString(yearFormat));

                if (docPrefix.LastGeneratedCode == null)
                {
                    var docNo = docPrefix.LastDocNo + 1;
                    var code = docPrefix.DocPrefix + "_" + currentYear.ToString() + "_" + docNo.ToString();

                    docPrefix.LastDocNo += 1;
                    docPrefix.LastGeneratedCode = code;
                    docPrefixRepository.Update(docPrefix, docPrefix.Id);
                    return code;
                }
                else
                {
                    int firstUnderscoreIndex = docPrefix.LastGeneratedCode.IndexOf('_');

                    int secondUnderscoreIndex = docPrefix.LastGeneratedCode.IndexOf('_', firstUnderscoreIndex + 1);

                    int yearSubstring = int.Parse(docPrefix.LastGeneratedCode.Substring(firstUnderscoreIndex + 1, secondUnderscoreIndex - firstUnderscoreIndex - 1));

                    if (yearFormat == "yy" && yearSubstring > 100)
                    {
                        yearSubstring = yearSubstring % 100;
                    }

                    if (yearSubstring < currentYear)
                    {
                        var docNo = docPrefix.FirstDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + currentYear.ToString() + "_" + docNo.ToString();

                        docPrefix.LastDocNo = docPrefix.FirstDocNo;
                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                    else
                    {
                        var docNo = docPrefix.LastDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + currentYear.ToString() + "_" + docNo.ToString();

                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                }
            }
            else if (docPrefix.MonthSuffix == true)
            {
                DateTime currentDate = DateTime.Now;

                string[] formatparts = docPrefix.Format.Split('/');


                int currentYear = int.Parse(currentDate.ToString(formatparts[1]));
                int currentMonth = int.Parse(currentDate.ToString(formatparts[0]));

                if (docPrefix.LastGeneratedCode == null)
                {
                    var docNo = docPrefix.LastDocNo + 1;
                    var code = docPrefix.DocPrefix + "_" + currentMonth.ToString() + "/" + currentYear.ToString() + "_" + docNo.ToString();

                    docPrefix.LastDocNo += 1;
                    docPrefix.LastGeneratedCode = code;
                    docPrefixRepository.Update(docPrefix, docPrefix.Id);
                    return code;
                }
                else
                {
                    string[] parts = docPrefix.LastGeneratedCode.Split('_');
                    string[] parts2 = parts[1].Split('/');

                    int month = int.Parse(parts2[0]);
                    int year = int.Parse(parts2[1]);

                    if (month < currentMonth && year <= currentYear)
                    {
                        var docNo = docPrefix.FirstDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + currentMonth.ToString() + "/" + currentYear.ToString() + "_" + docNo.ToString();

                        docPrefix.LastDocNo = docPrefix.FirstDocNo;
                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                    else
                    {
                        var docNo = docPrefix.LastDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + currentMonth.ToString() + "/" + currentYear.ToString() + "_" + docNo.ToString();

                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                }
            }
            else if (docPrefix.DateSuffix == true)
            {
                DateTimeOffset currentDate = DateTimeOffset.Now;

                var dateFormat = docPrefix.Format;
                string formattedDate = $"{currentDate.ToString(dateFormat)}";


                if (docPrefix.LastGeneratedCode == null)
                {
                    var docNo = docPrefix.LastDocNo + 1;
                    var code = docPrefix.DocPrefix + "_" + formattedDate + "_" + docNo.ToString();

                    docPrefix.LastDocNo += 1;
                    docPrefix.LastGeneratedCode = code;
                    docPrefixRepository.Update(docPrefix, docPrefix.Id);
                    return code;
                }
                else
                {
                    string inputString = docPrefix.LastGeneratedCode;
                    string[] parts = inputString.Split('_');

                    string dateString = parts[1];

                    DateTime date = DateTime.Parse(dateString);

                    if (date.Date < currentDate.Date)
                    {
                        var docNo = docPrefix.FirstDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + formattedDate + "_" + docNo.ToString();

                        docPrefix.LastDocNo = docPrefix.FirstDocNo;
                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                    else
                    {
                        var docNo = docPrefix.LastDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + formattedDate + "_" + docNo.ToString();

                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                }
            }

            return "";
        }

        [OverridableAuthorize]
        [HttpGet]
        public IActionResult AddPaymentTypeQB(string Type, int PurchaseId = 0, int SupplierId = 0, int TransactionId = 0, int FromSupplier = 0, int isCopy = 0)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            ViewBag.DocTypeId = 0;
            //int PurchaseId = 0;
            //int PurchaseId = 0;
            ViewBag.IsCopy = isCopy;
            ViewBag.CopyBill = 0;

            ViewBag.WarehouseIdMain = _warehouseRepository.All().Where(x => x.ComId == ComId)
                .Select(x => new SelectListItem
                {
                    Text = x.WhName,
                    Value = x.Id.ToString()
                });

            if (SupplierId > 0 && TransactionId == 0 && FromSupplier == 1)
            {

                ViewBag.ActionType = "Create";
                ViewBag.DefaultInvoice = "MP-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();    //Accounts Change
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;
                }
                ViewBag.SupplierId = SupplierId;

                ViewBag.PurchaseId = PurchaseId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.BillId = BillId;
                ViewBag.DocTypeValue = Type;
                ViewBag.PaymentSignal = 1;
                ViewBag.TransactionId = TransactionId;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                //return View("AddPayment", model: SupplierId);
                return View("AddPaymentQB", model: TransactionId);

            }

            if (SupplierId > 0 && TransactionId == 0 && FromSupplier == 0)
            {
                ViewBag.ActionType = "Create";
                ViewBag.DefaultInvoice = "MP-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();    //Accounts Change
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;
                }
                ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.SupplierId == SupplierId).FirstOrDefault()?.SupplierId;
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.BillId = BillId;
                ViewBag.DocTypeValue = Type;
                ViewBag.PaymentSignal = 1;
                ViewBag.TransactionId = TransactionId;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                //return View("AddPayment", model: SupplierId);
                return View("AddPaymentQB", model: TransactionId);

            }
            else if (SupplierId == 0 && TransactionId == 0)
            {
                ViewBag.SupplierId = 0;
                ViewBag.PurchaseId = 0;
                ViewBag.DocTypeId = 0;
                ViewBag.BillId = 0;
                string uniqueNumber = "BP-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                var doctypeId = _docTypeRepository.All().Where(x => x.DocType == "Payment").FirstOrDefault();
                var docPrefix = docPrefixRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId.Id).FirstOrDefault();
                if (docPrefix != null)
                {
                    uniqueNumber = "";
                }
                ViewBag.DefaultInvoice = uniqueNumber;
                ViewBag.DocTypeValue = Type;
                ViewBag.PaymentSignal = 1;
                ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                ViewBag.TransactionId = 0;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                //return View("AddPayment", model: SupplierId);
                return View("AddPaymentQB", model: TransactionId);
            }
            else
            {
                if (TransactionId > 0)
                {
                    ViewBag.ActionType = "Edit";
                    //ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                    //ViewBag.SupplierId = _transactionRepository.All().Where(x => x.Id == TransactionId).FirstOrDefault()?.SupplierId; //chnage by fahad for view and edit bill payment
                    ViewBag.TransactionId = TransactionId;
                    //ViewBag.TransactionId = _transactionRepository.All().Where(x => x.Id == TransactionId).FirstOrDefault()?.ParentTransactionId;

                }
                else
                {
                    ViewBag.ActionType = "Create";
                    ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                }

                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;

                var TypeWiseDoc = Type;
                Console.WriteLine(TypeWiseDoc);
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;

                    //            ViewBag.SalesType = Type;
                }
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                //if (SupplierId == 0)
                //{
                //    ViewBag.SupplierId = 0;
                //}
                //else
                //{
                //    ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.SupplierId == SupplierId).FirstOrDefault()?.SupplierId;
                //}
                //ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.SupplierId == SupplierId).FirstOrDefault()?.SupplierId;

                ViewBag.SupplierId = _transactionRepository.All().Where(x => x.Id == TransactionId).FirstOrDefault()?.SupplierId; //chnage by fahad for view and edit bill payment

                ViewBag.BillId = BillId;
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.BillId = BillId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.DocTypeValue = Type;
                ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();

                return View("AddPaymentQB", model: TransactionId);
                //return View("AddPayment", model: SupplierId);

            }



        }


        [OverridableAuthorize]
        [HttpGet]
        public IActionResult EditPaymentTypeQB(string Type, int PurchaseId = 0, int SupplierId = 0, int TransactionId = 0, int FromSupplier = 0, int isCopy = 0)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            ViewBag.DocTypeId = 0;
            //int PurchaseId = 0;
            //int PurchaseId = 0;
            ViewBag.IsCopy = isCopy;
            ViewBag.CopyBill = 0;

            ViewBag.WarehouseIdMain = _warehouseRepository.All().Where(x => x.ComId == ComId)
                .Select(x => new SelectListItem
                {
                    Text = x.WhName,
                    Value = x.Id.ToString()
                });

            if (SupplierId > 0 && TransactionId == 0 && FromSupplier == 1)
            {

                ViewBag.ActionType = "Create";
                ViewBag.DefaultInvoice = "MP-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();    //Accounts Change
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;
                }
                ViewBag.SupplierId = SupplierId;

                ViewBag.PurchaseId = PurchaseId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.BillId = BillId;
                ViewBag.DocTypeValue = Type;
                ViewBag.PaymentSignal = 1;
                ViewBag.TransactionId = TransactionId;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                //return View("AddPayment", model: SupplierId);
                return View("AddPaymentQB", model: TransactionId);

            }

            if (SupplierId > 0 && TransactionId == 0 && FromSupplier == 0)
            {
                ViewBag.ActionType = "Create";
                ViewBag.DefaultInvoice = "MP-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();    //Accounts Change
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;
                }
                ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.SupplierId == SupplierId).FirstOrDefault()?.SupplierId;
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.BillId = BillId;
                ViewBag.DocTypeValue = Type;
                ViewBag.PaymentSignal = 1;
                ViewBag.TransactionId = TransactionId;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                //return View("AddPayment", model: SupplierId);
                return View("AddPaymentQB", model: TransactionId);

            }
            else if (SupplierId == 0 && TransactionId == 0)
            {
                ViewBag.SupplierId = 0;
                ViewBag.PurchaseId = 0;
                ViewBag.DocTypeId = 0;
                ViewBag.BillId = 0;
                string uniqueNumber = "BP-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                var doctypeId = _docTypeRepository.All().Where(x => x.DocType == "Payment").FirstOrDefault();
                var docPrefix = docPrefixRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId.Id).FirstOrDefault();
                if (docPrefix != null)
                {
                    uniqueNumber = GetSalesCode(doctypeId.Id);
                }
                ViewBag.DefaultInvoice = uniqueNumber;
                ViewBag.DocTypeValue = Type;
                ViewBag.PaymentSignal = 1;
                ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                ViewBag.TransactionId = 0;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                //return View("AddPayment", model: SupplierId);
                return View("AddPaymentQB", model: TransactionId);
            }
            else
            {
                if (TransactionId > 0)
                {
                    ViewBag.ActionType = "Edit";
                    //ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                    //ViewBag.SupplierId = _transactionRepository.All().Where(x => x.Id == TransactionId).FirstOrDefault()?.SupplierId; //chnage by fahad for view and edit bill payment
                    ViewBag.TransactionId = TransactionId;
                    //ViewBag.TransactionId = _transactionRepository.All().Where(x => x.Id == TransactionId).FirstOrDefault()?.ParentTransactionId;

                }
                else
                {
                    ViewBag.ActionType = "Create";
                    ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                }

                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;

                var TypeWiseDoc = Type;
                Console.WriteLine(TypeWiseDoc);
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;

                    //            ViewBag.SalesType = Type;
                }
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                //if (SupplierId == 0)
                //{
                //    ViewBag.SupplierId = 0;
                //}
                //else
                //{
                //    ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.SupplierId == SupplierId).FirstOrDefault()?.SupplierId;
                //}
                //ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.SupplierId == SupplierId).FirstOrDefault()?.SupplierId;

                ViewBag.SupplierId = _transactionRepository.All().Where(x => x.Id == TransactionId).FirstOrDefault()?.SupplierId; //chnage by fahad for view and edit bill payment

                ViewBag.BillId = BillId;
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.BillId = BillId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.DocTypeValue = Type;
                ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();

                return View("AddPaymentQB", model: TransactionId);
                //return View("AddPayment", model: SupplierId);

            }



        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult AddPaymentQB(string Type, int SupplierId = 0)
        {
            @ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            return View(model: SupplierId);
        }


        [AllowAnonymous]
        public JsonResult GetVoucherListByPage(int? UserId, int? Warehouse, int? IsPosted, int? VoucherTypeId, int pageNo = 1, decimal pageSize = 10, string searchquery = "", string FromDate = "", string ToDate = "")
        {
            try
            {
                var CurrentUserId = HttpContext.Session.GetInt32("UserId");


                ///ViewBag.Userlist = _userAccountRepository.GetAllForDropDown();


                //SelectListItem warehouseall = new SelectListItem() { Text = "Please Select", Value = "" };
                //var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
                //if (warehouselist.Count() == 0)
                //{
                //    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                //    warehouselist.Add(warehouseall);
                //}
                //ViewBag.Warehouse = warehouselist.OrderBy(x => x.Value);



                var transactioncomid = HttpContext.Session.GetInt32("ComId");

                DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));


                //ViewBag.FromDate = dtFrom.ToString("dd-MMM-yyyy");
                //ViewBag.ToDate = dtTo.ToString("dd-MMM-yyyy");

                if (FromDate == null || FromDate == "")
                {
                }
                else
                {
                    dtFrom = Convert.ToDateTime(FromDate);

                }
                if (ToDate == null || ToDate == "")
                {
                }
                else
                {
                    dtTo = Convert.ToDateTime(ToDate);

                }
                //if (UserId == null)
                //{
                //    UserId = CurrentUserId;
                //}



                //var products= _context.Products.ToList();

                //var accountheadlist = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.IsDelete == false);//.Include(x=>x.vUnit).Include(x=>x.Category);
                var voucherlist = _accVoucherRepository.All().Where(x => x.IsDelete == false);

                if (IsPosted != null)
                {
                    if (IsPosted == 1)
                    {
                        voucherlist = voucherlist.Where(x => x.isPosted == true);

                    }
                    else
                    {
                        voucherlist = voucherlist.Where(x => x.isPosted == false);

                    }
                }


                //if (UserId == null)
                //{
                //    voucherlist = voucherlist.Where(x => x.LuserId == UserId);
                //}

                if (searchquery?.Length > 1)
                {
                    //products = products.Where(x => x.Name.ToLower().Contains(searchquery.ToLower()) || x.Code.ToLower().Contains(searchquery.ToLower()));


                    var searchitem = JsonConvert.DeserializeObject<VoucherFilterData>(searchquery);

                    if (searchitem.pageIndex != null)
                    {
                        pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                        pageSize = searchitem.pageSize.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())


                    }



                    if (searchitem.VoucherNo != null)
                    {
                        voucherlist = voucherlist.Where(x => x.VoucherNo.ToLower().Contains(searchitem.VoucherNo.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                    if (searchitem.VoucherDesc != null)
                    {
                        voucherlist = voucherlist.Where(x => x.VoucherDesc.ToLower().Contains(searchitem.VoucherDesc.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                    if (searchitem.VAmount != "")
                    {
                        voucherlist = voucherlist.Where(x => x.VAmount.ToString() == searchitem.VAmount); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }


                    if (dtFrom != null)
                    {
                        voucherlist = voucherlist.Where(p => p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo);

                    }


                    //if (searchitem.CategoryName != null)
                    //{
                    //    voucherlist = voucherlist.Where(x => x.AccountCategorys.AccountCategoryName.ToLower().Contains(searchitem.CategoryName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    //}



                }
                else
                {



                }

                if (VoucherTypeId != null)
                {
                    voucherlist = voucherlist.Where(x => x.VoucherTypeId == VoucherTypeId);
                }
                if (UserId != null)
                {
                    voucherlist = voucherlist.Where(x => x.LuserId == UserId);
                }
                if (Warehouse != null)
                {
                    voucherlist = voucherlist.Where(x => x.WarehouseId == Warehouse);
                }

                decimal TotalRecordCount = voucherlist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);





                decimal skip = (pageNo - 1) * pageSize;

                // Get total number of records
                int total = voucherlist.Count();



                var query = from e in voucherlist.Include(x => x.VoucherSubs).ThenInclude(x => x.Acc_ChartOfAccount)//.Where(x => !x.VoucherNo.Contains("sys"))//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id) //let vAccountGroupHead = e.vAccountGroupHead.AccName
                            select new
                            {
                                VoucherId = e.Id,
                                VoucherNo = e.VoucherNo,
                                VoucherDate = e.VoucherDate.ToString("dd-MMM-yy"),
                                //VoucherDate = e.VoucherDate,
                                VoucherDesc = e.VoucherDesc,
                                VAmount = e.VAmount,
                                isPosted = e.isPosted,
                                isAutoEntry = e.isAutoEntry,

                                VoucherTypeName = e.Acc_VoucherTypes.VoucherTypeName,
                                VoucherTypeNameShort = e.Acc_VoucherTypes.VoucherTypeNameShort,
                                Status = e.isPosted != false ? "Posted" : "Not Posted",

                                VoucherSubs = e.VoucherSubs.Where(a => a.IsDelete == false)
                                .Select(a => new
                                {
                                    AccCode = a.Acc_ChartOfAccount.AccCode,
                                    AccName = a.Acc_ChartOfAccount.AccName,
                                    Note1 = a.Note1,
                                    Note2 = a.Note2,
                                    TKDebit = a.TKDebit,
                                    TKCredit = a.TKCredit,
                                    AccType = a.Acc_ChartOfAccount.AccType
                                }),
                                CountSubData = e.VoucherSubs.Count()

                            };

                //var parser = new Parser<AccountHeadModel>(Request.Form, query);
                //return Json(parser.Parse());





                var abcd = query.OrderByDescending(x => x.VoucherId).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, VoucherList = abcd, PageInfo = pageinfo });


            }
            catch (Exception ex)
            {
                throw ex;
            }
        }



        [AllowAnonymous]
        public JsonResult GetVoucherListTabulator(int? UserId, int? Warehouse, int? IsPosted, int? VoucherTypeId, int page = 1, decimal size = 5, string searchquery = "", string FromDate = "", string ToDate = "")
        {
            try
            {
                var CurrentUserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var voucherId = 0;

                SqlParameter[] sqlParameter1 = new SqlParameter[2];
                sqlParameter1[0] = new SqlParameter("@ComId", ComId);
                sqlParameter1[1] = new SqlParameter("@voucherId", voucherId);
                Helper.ExecProc("[VoucherApprovalStatus]", sqlParameter1);

                ///ViewBag.Userlist = _userAccountRepository.GetAllForDropDown();


                //SelectListItem warehouseall = new SelectListItem() { Text = "Please Select", Value = "" };
                //var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
                //if (warehouselist.Count() == 0)
                //{
                //    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                //    warehouselist.Add(warehouseall);
                //}
                //ViewBag.Warehouse = warehouselist.OrderBy(x => x.Value);



                var transactioncomid = HttpContext.Session.GetInt32("ComId");

                // DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                //  DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));


                //ViewBag.FromDate = dtFrom.ToString("dd-MMM-yyyy");
                //ViewBag.ToDate = dtTo.ToString("dd-MMM-yyyy");

                DateTime dtFrom = DateTime.MinValue;
                DateTime dtTo = DateTime.MaxValue;

                if (!string.IsNullOrEmpty(FromDate))
                    dtFrom = Convert.ToDateTime(FromDate);

                if (!string.IsNullOrEmpty(ToDate))
                    dtTo = Convert.ToDateTime(ToDate);



                //if (FromDate == null || FromDate == "")
                //{
                //}
                //else
                //{
                //    dtFrom = Convert.ToDateTime(FromDate);

                //}
                //if (ToDate == null || ToDate == "")
                //{
                //}
                //else
                //{
                //    dtTo = Convert.ToDateTime(ToDate);

                //}

                //if (UserId == null)
                //{
                //    UserId = CurrentUserId;
                //}



                //var products= _context.Products.ToList();

                //var accountheadlist = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.IsDelete == false);//.Include(x=>x.vUnit).Include(x=>x.Category);

                // var voucherlist = _accVoucherRepository.All().Where(x => x.IsDelete == false );

                var voucherlist = _accVoucherRepository.All().Where(x => x.IsDelete == false && x.VoucherDate.Date >= dtFrom && x.VoucherDate.Date <= dtTo);


                if (searchquery?.Length > 1)
                {
                    voucherlist = voucherlist.Where(x =>
                    x.VoucherNo.ToLower().Contains(searchquery.ToLower()) ||
                    x.VAmount.ToString().ToLower().Contains(searchquery.ToLower()) ||
                    x.VoucherDesc.ToLower().Contains(searchquery.ToLower())

                  );

                }


                if (IsPosted != null)
                {
                    if (IsPosted == 1)
                    {
                        voucherlist = voucherlist.Where(x => x.isPosted == true);

                    }
                    else
                    {
                        voucherlist = voucherlist.Where(x => x.isPosted == false);

                    }
                }


                //if (UserId == null)
                //{
                //    voucherlist = voucherlist.Where(x => x.LuserId == UserId);
                //}

                //if (searchquery?.Length > 1)
                //{
                //    //products = products.Where(x => x.Name.ToLower().Contains(searchquery.ToLower()) || x.Code.ToLower().Contains(searchquery.ToLower()));


                //    var searchitem = JsonConvert.DeserializeObject<VoucherFilterData>(searchquery);

                //    //if (searchitem.pageIndex != null)
                //    //{
                //    //    pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                //    //    pageSize = searchitem.pageSize.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())


                //    //}



                //    if (searchitem.VoucherNo != null)
                //    {
                //        voucherlist = voucherlist.Where(x => x.VoucherNo.ToLower().Contains(searchitem.VoucherNo.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                //    }

                //    if (searchitem.VoucherDesc != null)
                //    {
                //        voucherlist = voucherlist.Where(x => x.VoucherDesc.ToLower().Contains(searchitem.VoucherDesc.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                //    }

                //    if (searchitem.VAmount != "")
                //    {
                //        voucherlist = voucherlist.Where(x => x.VAmount.ToString() == searchitem.VAmount); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                //    }


                //    if (dtFrom != null)
                //    {
                //        voucherlist = voucherlist.Where(p => p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo);

                //    }


                //    //if (searchitem.CategoryName != null)
                //    //{
                //    //    voucherlist = voucherlist.Where(x => x.AccountCategorys.AccountCategoryName.ToLower().Contains(searchitem.CategoryName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                //    //}



                //}
                //else
                //{



                //}

                if (VoucherTypeId != null)
                {
                    voucherlist = voucherlist.Where(x => x.VoucherTypeId == VoucherTypeId);
                }
                if (UserId != null)
                {
                    voucherlist = voucherlist.Where(x => x.LuserId == UserId);
                }
                if (Warehouse != null)
                {
                    voucherlist = voucherlist.Where(x => x.WarehouseId == Warehouse);
                }

                decimal TotalRecordCount = voucherlist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);



                decimal skip = (page - 1) * size;

                // Get total number of records
                //int total = voucherlist.Count();



                var query = from e in voucherlist.Include(x => x.VoucherSubs).ThenInclude(x => x.Acc_ChartOfAccount).Include(x => x.Acc_FiscalMonths)//.Where(x => !x.VoucherNo.Contains("sys"))//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id) //let vAccountGroupHead = e.vAccountGroupHead.AccName
                            select new
                            {
                                VoucherId = e.Id,
                                VoucherNo = e.VoucherNo,
                                VoucherDate = e.VoucherDate.ToString("dd-MMM-yy"),
                                //VoucherDate = e.VoucherDate,
                                VoucherDesc = e.VoucherDesc,
                                Source = e.Source,
                                SourceId = e.SourceId,
                                ApprovalStage = e.ApprovalStage,
                                VAmount = e.VAmount,
                                vAmountLocal = e.vAmountLocal,
                                isPosted = e.isPosted,
                                isAutoEntry = e.isAutoEntry,

                                VoucherTypeName = e.Acc_VoucherTypes.VoucherTypeName,
                                VoucherTypeNameShort = e.Acc_VoucherTypes.VoucherTypeNameShort,
                                Status = e.isPosted != false ? "Posted" : "Not Posted",
                                IsClosed = e.Acc_FiscalMonths.isLocked,

                                VoucherSubs = e.VoucherSubs.Where(a => a.IsDelete == false)
                                .Select(a => new
                                {
                                    AccCode = a.Acc_ChartOfAccount.AccCode,
                                    AccName = a.Acc_ChartOfAccount.AccName,
                                    Note1 = a.Note1,
                                    Note2 = a.Note2,
                                    CurrencyRate = a.CurrencyRate,
                                    Note5 = a.Note5,
                                    TKDebit = a.TKDebit,
                                    TKCredit = a.TKCredit,
                                    TKDebitLocal = a.TKDebitLocal,
                                    TKCreditLocal = a.TKCreditLocal,
                                    AccType = a.Acc_ChartOfAccount.AccType
                                }),
                                CountSubData = e.VoucherSubs.Count()

                            };

                //var parser = new Parser<AccountHeadModel>(Request.Form, query);
                //return Json(parser.Parse());





                var abcd = query.OrderByDescending(x => x.VoucherId).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = page;
                pageinfo.PageSize = int.Parse(size.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });





            }
            catch (Exception ex)
            {
                throw ex;
            }
        }




        [AllowAnonymous]
        public IActionResult GetVoucherList(string FromDate, string ToDate, int? UserList, int isAll, string OtherSearch)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var sessionLuserId = (HttpContext.Session.GetInt32("UserId"));
                var UserRole = HttpContext.Session.GetString("UserRole");

                DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date);
                DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date);

                if (FromDate == null || FromDate == "")
                {
                }
                else
                {
                    dtFrom = Convert.ToDateTime(FromDate);

                }
                if (ToDate == null || ToDate == "")
                {
                }
                else
                {
                    dtTo = Convert.ToDateTime(ToDate);

                }


                Microsoft.Extensions.Primitives.StringValues y = "";
                var x = Request.Form.TryGetValue("search[value]", out y);

                var voucherlist = _accVoucherRepository.All();


                //UserPermission permission = HttpContext.Session.GetObject<UserPermission>("userpermission");
                //var X = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.ComId == transactioncomid && (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo)).ToList();
                //return View(X);

                if (y.ToString().Length > 0)
                {
                    //voucherlist = voucherlist.Where(p => p.VoucherSubs.Any(x => x.Product.CategoryId == CategoryId));
                }
                else if (OtherSearch != null)
                {
                    voucherlist = voucherlist.Where(p => p.VoucherSubs.Any(x => x.Note1.ToLower().Contains(OtherSearch.ToString()) || x.Note2.ToLower().Contains(OtherSearch.ToString())));
                }
                else
                {
                    //if (UserRole == "Admin" || UserRole == "SuperAdmin")
                    //{
                    //    voucherlist = voucherlist.Where(p => (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo));

                    //}
                    voucherlist = voucherlist.Where(p => (p.VoucherDate >= dtFrom && p.VoucherDate <= dtTo));
                    if (UserList != null)
                    {
                        voucherlist = voucherlist.Where(p => p.LuserId == UserList);

                    }
                }



                var query = from e in voucherlist.Include(x => x.Acc_VoucherTypes).Include(x => x.VoucherSubs).ThenInclude(x => x.Acc_ChartOfAccount)
                            select new VoucherViewModel
                            {
                                VoucherId = e.Id,
                                VoucherNo = e.VoucherNo,
                                VoucherDate = e.VoucherDate.ToString("dd-MMM-yy"),
                                //VoucherDate = e.VoucherDate,
                                VoucherDesc = e.VoucherDesc,
                                VAmount = e.VAmount,
                                isPosted = e.isPosted,
                                VoucherTypeName = e.Acc_VoucherTypes.VoucherTypeName,
                                VoucherTypeNameShort = e.Acc_VoucherTypes.VoucherTypeNameShort,
                                Status = e.isPosted != false ? "Posted" : "Not Posted",
                                VoucherSubs = e.VoucherSubs,
                                CountSubData = e.VoucherSubs.Count()

                            };


                var parser = new Parser<VoucherViewModel>(Request.Form, query);

                return Json(parser.Parse());


            }
            catch (Exception ex)
            {
                return Json(new { Success = "0", error = ex.Message });
                //throw ex;
            }

        }


        public class VoucherViewModel
        {
            public int VoucherId { get; set; }
            public string? VoucherNo { get; set; }
            public string? VoucherTypeName { get; set; }
            public string? VoucherDate { get; set; }
            public string? VoucherDesc { get; set; }
            public string? Status { get; set; }
            public bool isPosted { get; set; }
            public double VAmount { get; set; }

            public string? VoucherTypeNameShort { get; set; }

            public virtual ICollection<Acc_VoucherSubModel> VoucherSubs { get; set; }

            public int CountSubData { get; set; }
        }




        [AllowAnonymous]
        public ActionResult PrintCheck(int? id, string type)
        {
            string SqlCmd = "";
            string ReportPath = "";

            var ReportType = "PDF";
            var ComId = HttpContext.Session.GetInt32("ComId");


            var abcvouchermain = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(x => x.Id == id && x.ComId == ComId).FirstOrDefault();

            var reportname = "rptChk_janata";// _accVoucherRepository.All().Where(x => x.VoucherId== id).Select(x => x.VoucherNo).FirstOrDefault();

            if (abcvouchermain.Acc_VoucherTypes != null)
            {
                if (abcvouchermain.Acc_VoucherTypes.VoucherTypeName.ToUpper() == "Bank Payment".ToUpper())
                {
                    reportname = "rptChk_janata";
                }
            }


            HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Accounts/" + reportname + ".rdlc");
            var str = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).FirstOrDefault().Acc_VoucherTypes.VoucherTypeNameShort;// "VPC";
            //var Currency = "18";
            HttpContext.Session.SetString("ReportQuery", "Exec acc_rptCheckPrint  '" + id + "','" + ComId + "' , 'ChequeNo'");

            string filename = _accVoucherSubCheckNoRepository.All().Where(x => x.VoucherId == id).Select(x => x.ChkNo).FirstOrDefault();
            HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));
            string DataSourceName = "DataSet1";


            //Common.Classes.clsMain.intHasSubReport = 0;
            clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");
            clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
            clsReport.strDSNMain = DataSourceName;


            SqlCmd = clsReport.strQueryMain;
            ReportPath = clsReport.strReportPathMain;
            var abcd = HttpContext.Session.GetString("ReportType");

            if (abcd != null)
            {
                ReportType = abcd;

            }
            else
            {
                ReportType = "PDF";

            }


            string callBackUrl = Url.Action("Index", "ReportViewer", new { reporttype = ReportType }); // Url.Action("Index", "ReportViewer", new { reporttype = ReportType }); //Repository.GenerateReport(ReportPath, SqlCmd, ConstrName, ReportType);
            return Redirect(callBackUrl);

            ///return RedirectToAction("Index", "ReportViewer");


        }

        [AllowAnonymous]
        public ActionResult Print(int? id, string type)
        {
            string SqlCmd = "";
            string ReportPath = "";
            var ReportType = "PDF";
            var ComId = HttpContext.Session.GetInt32("ComId");


            var abcvouchermain = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).Where(x => x.Id == id && x.ComId == ComId).FirstOrDefault();

            var reportname = "rptShowVoucher";// _accVoucherRepository.All().Where(x => x.VoucherId== id).Select(x => x.VoucherNo).FirstOrDefault();

            if (abcvouchermain.Acc_VoucherTypes != null)
            {
                if (abcvouchermain.Acc_VoucherTypes.VoucherTypeName.ToUpper() == "Bank Payment".ToUpper())
                {
                    reportname = "rptShowVoucher_VBP";
                }
                else if (abcvouchermain.Acc_VoucherTypes.VoucherTypeName.ToUpper() == "Journal".ToUpper())
                {
                    reportname = "rptShowVoucher_Journal";

                }
                else if (abcvouchermain.Acc_VoucherTypes.VoucherTypeName.ToUpper() == "Bank Receipt".ToUpper())
                {
                    reportname = "rptShowVoucher_MoneyReceipt";

                }
                else if (abcvouchermain.Acc_VoucherTypes.VoucherTypeName.ToUpper() == "Bank Payment".ToUpper())
                {
                    reportname = "rptChk_janata";
                }
                else if (abcvouchermain.Acc_VoucherTypes.VoucherTypeName.ToUpper() == "System Voucher".ToUpper())
                {
                    reportname = "rptShowVoucher_Journal";
                }

            }
            //if (reportname == null)
            //{
            //    reportname = "rptShowVoucher";
            //}

            //HttpContext.Session.SetString("PrintFileName",
            //int WarehouseCount = _accVoucherRepository.All().Where(x => x.VoucherId == id).Count(); 
            //if (WarehouseCount > 0) { reportname = "rptShowVoucher_SubRpt"; }

            HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Accounts/" + reportname + ".rdlc");
            var str = _accVoucherRepository.All().Include(x => x.Acc_VoucherTypes).FirstOrDefault().Acc_VoucherTypes.VoucherTypeNameShort;// "VPC";
            var Currency = "18";
            HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptVoucher 0, 'VID','All', '" + ComId + "' , '01-Jan-1900', '01-Jan-1900', '" + str + "','" + str + "', " + id + ", " + Currency + ", 0");


            //Session["ReportQuery"] = "Exec " + Atrai.Model.AppDatadbGTCommercial.ToString() + ".dbo.[rptCommercialInvoice_Export] '" + id + "','" + Atrai.Model.AppDataintComId + "'";
            string filename = _accVoucherRepository.All().Where(x => x.Id == id).Select(x => x.VoucherNo + "_" + x.Acc_VoucherTypes.VoucherTypeName).Single();
            HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));

            //var a = Session["PrintFileName"].ToString();


            string DataSourceName = "DataSet1";
            //string FormCaption = "Report :: Sales Acknowledgement ...";


            //postData.Add(1, new subReport("rptInvoice_Terms", "", "DataSet1", "Exec " + Atrai.Model.AppDatadbGTCommercial.ToString() + ".dbo.rptInvoice_Terms '" + id + "','" +HttpContext.Session.GetInt32("ComId"); + "',''"));




            //Common.Classes.clsMain.intHasSubReport = 0;
            clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");
            clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
            clsReport.strDSNMain = DataSourceName;




            SqlCmd = clsReport.strQueryMain;
            ReportPath = clsReport.strReportPathMain;
            var abcd = HttpContext.Session.GetString("ReportType");

            if (abcd != null)
            {
                ReportType = abcd;

            }
            else
            {
                ReportType = "PDF";

            }


            /////////////////////// sub report test to our report server


            var subReport = new SubReport();
            //var subReportObject = new List<SubReport>();

            subReport.strDSNSub = "DataSet1";
            subReport.strRFNSub = "VoucherId";
            subReport.strQuerySub = "Exec [Acc_rptShowVoucher_Referance] '" + id + "','" + ComId + "','ChequeNo'";
            subReport.strRptPathSub = "rptShowVoucher_ChequeNo";
            //subReportObject.Add(subReport);
            postData.Add(2, subReport);



            subReport = new SubReport();
            subReport.strDSNSub = "DataSet1";
            subReport.strRFNSub = "VoucherId";
            subReport.strQuerySub = "Exec [Acc_rptShowVoucher_Referance] '" + id + "','" + ComId + "','ReceiptPerson'";
            subReport.strRptPathSub = "rptShowVoucher_ReceiptPerson";
            //subReportObject.Add(subReport);
            postData.Add(3, subReport);

            //postData.Add(3, new subReport("rptInvoice_PM", "", "DataSet1", "Exec rptInvoice_PM '" + id + "','" + HttpContext.Session.GetInt32("ComId") + ""));


            HttpContext.Session.SetObject("rptList", postData);



            //var jsonData = JsonConvert.SerializeObject(subReportObject);

            string callBackUrl = Url.Action("Index", "ReportViewer", new { reporttype = ReportType }); //Url.Action("Index", "ReportViewer", new { reporttype = ReportType });  //Repository.GenerateReport(ReportPath, SqlCmd, ConstrName, ReportType, jsonData);
            return Redirect(callBackUrl);

            ///return RedirectToAction("Index", "ReportViewer");


        }

        [AllowAnonymous]
        [HttpPost, ActionName("SetSessionReportType")]
        //[ValidateAntiForgeryToken]
        public JsonResult SetSessionInd(string reporttype, string action, string reportid)
        {
            try
            {

                //Session["ReportType"] = reporttype;
                HttpContext.Session.SetString("ReportType", reporttype);
                return Json(new { Success = 1 });

            }

            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            return Json(new { Success = 0, ex = new Exception("Unable to Set").Message.ToString() });
        }

        [AllowAnonymous]

        public JsonResult CallComboSubSectionList()
        {
            try
            {

                var SubSectionList = _subSectionRepository.All();


                return Json(SubSectionList);

            }
            catch (Exception ex)
            {

                return Json(new { Success = 0, ex = ex.Message.ToString() });

            }
        }

        public class Acc_ChartOfAccount_view
        {
            public int AccId { get; set; }
            public int? ParentId { get; set; }
            public int IsBankItem { get; set; }
            public int IsCashItem { get; set; }
            public int IsChkRef { get; set; }
            public string? AccountParent { get; set; }

        }


        [AllowAnonymous]
        public JsonResult AccountReferance(string query)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");


            var Referancedb = _accVoucherRepository.All()
                    .Where(x => x.ComId == ComId && (x.Referance).ToLower().Contains(query.ToLower())).Take(10)
                    .Select(m => new { Referance = m.Referance })
                    .Distinct()
                    .ToList();


            List<SelectListItem> Referance = new List<SelectListItem>();

            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.Referance, Value = "0" });

                }
            }

            return Json(Referance);

        }

        [AllowAnonymous]
        public JsonResult AccountReferanceTwo(string query)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var Referancedb = _accVoucherRepository.All()
               .Where(x => x.ComId == ComId && (x.ReferanceTwo).ToLower().Contains(query.ToLower())).Take(10)
               .Select(m => new { Referance = m.ReferanceTwo })
               .Distinct()
               .ToList();


            List<SelectListItem> Referance = new List<SelectListItem>();

            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.Referance, Value = "0" });

                }
            }

            return Json(Referance);


        }
        [AllowAnonymous]
        public JsonResult AccountReferanceThree(string query)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var Referancedb = _accVoucherRepository.All()
               .Where(x => x.ComId == ComId && (x.ReferanceThree).ToLower().Contains(query.ToLower())).Take(10)
               .Select(m => new { Referance = m.ReferanceThree })
               .Distinct()
               .ToList();


            List<SelectListItem> Referance = new List<SelectListItem>();

            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.Referance, Value = "0" });

                }
            }

            return Json(Referance);
        }

        [AllowAnonymous]
        public JsonResult NoteOne(string query)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            var Referancedb = _accVoucherSubRepository.All()
           .Where(x => x.Acc_ChartOfAccount.ComId == ComId && (x.Note1).ToLower().Contains(query.ToLower())).Take(10)
           .Select(m => new { Referance = m.Note1 })
           .Distinct()
           .ToList();

            List<SelectListItem> Referance = new List<SelectListItem>();
            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.Referance, Value = "0" });
                }
            }
            return Json(Referance);
        }


        [AllowAnonymous]
        public JsonResult NoteTwo(string query)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            var Referancedb = _accVoucherSubRepository.All()
               .Where(x => x.Acc_ChartOfAccount.ComId == ComId && (x.Note2).ToLower().Contains(query.ToLower())).Take(10)
               .Select(m => new { Referance = m.Note2 })
               .Distinct()
               .ToList();

            List<SelectListItem> Referance = new List<SelectListItem>();
            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.Referance, Value = "0" });
                }
            }
            return Json(Referance);
        }


        [HttpPost]
        [AllowAnonymous]
        public JsonResult AccountInfo(int id)
        {
            try
            {
                Acc_ChartOfAccount_view abc = new Acc_ChartOfAccount_view();
                var chartofaccount = _accountHeadRepository.All().Where(y => y.Id == id).SingleOrDefault();

                if (chartofaccount != null)
                {

                    abc.AccId = chartofaccount.Id;
                    abc.ParentId = chartofaccount.ParentId;
                    abc.AccountParent = _accountHeadRepository.All().Where(y => y.Id == chartofaccount.ParentId).SingleOrDefault().AccName;


                    abc.IsChkRef = chartofaccount.IsChkRef == true ? 1 : 0;
                    abc.IsBankItem = chartofaccount.IsBankItem == true ? 1 : 0;
                    abc.IsCashItem = chartofaccount.IsCashItem == true ? 1 : 0;

                }

                //return Json(chartofaccount);
                return Json(abc);


            }
            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }
        [AllowAnonymous]
        [HttpGet]
        public ActionResult AddVoucherByType(string Type, int VoucherId = 0, int IsCopy = 0, int Id = 0)
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            try
            {
                if (Type == null)
                {
                    Type = "VPC";
                }

                if (VoucherId > 0)
                {
                    if (IsCopy == 0)
                    {
                        ViewBag.ActionType = "Edit";
                    }
                    else if (IsCopy == 1)
                    {
                        ViewBag.ActionType = "Create";
                    }
                    else
                    {
                        ViewBag.ActionType = "View";
                    }
                }
                else
                {
                    ViewBag.ActionType = "Create";
                }

                ViewBag.Acc_VoucherNoPrefix = _accVoucherNoPrefixRepository.All().Where(x => x.ComId == comid).Include(x => x.vVoucherTypes).Where(x => x.isVisible == true && x.vVoucherTypes.isSystem == false).ToList();

                var vouchertypedata = _VoucherTypeRepository.All().Where(x => x.VoucherTypeNameShort == Type).FirstOrDefault();

                ViewBag.VoucherTypeId = vouchertypedata.Id;
                ViewBag.VoucherTypeName = vouchertypedata.VoucherTypeName;
                ViewBag.IsCopy = IsCopy;
                ViewBag.VoucherId = VoucherId;

                return View("AddVoucher");
            }
            catch (Exception ex)
            {
                return View();
                throw ex;
            }

        }
        [HttpGet]
        public ActionResult AddVoucher(string Type, int VoucherId = 0, int Id = 0, int? IntegrationSettingMainId = 0, int? IsView = 0)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");

                //ViewBag.ActionType = "Entry";
                var transactioncomid = HttpContext.Session.GetInt32("ComId");
                var lastvoucher = _accVoucherRepository.All().Where(x => x.Acc_VoucherTypes.VoucherTypeNameShort == Type && x.ComId == transactioncomid).OrderByDescending(x => x.Id).FirstOrDefault();



                if (Type == null)
                {
                    Type = "VPC";
                }
                string vouchertypeid = _VoucherTypeRepository.All().Where(x => x.VoucherTypeNameShort == Type).Select(x => x.Id.ToString()).FirstOrDefault();

                Acc_VoucherMainModel vouchersamplemodel = new Acc_VoucherMainModel();

                if (lastvoucher != null)
                {
                    vouchersamplemodel.VoucherDate = lastvoucher.VoucherDate;
                    vouchersamplemodel.LastVoucherNo = lastvoucher.VoucherNo;
                }
                else
                {
                    vouchersamplemodel.VoucherDate = DateTime.Now.Date;
                }


                var transactioncompany = _companyRepository.All()//.Include(x => x.Currency)
                    .Where(c => c.Id == transactioncomid).FirstOrDefault();
                var storesetting = _storeSettingRepository.All(x => x.ComId == transactioncompany.Id).FirstOrDefault();
                HttpContext.Session.SetInt32("defaultcurrencyid", storesetting.CountryId);
                HttpContext.Session.SetString("defaultcurrencyname", storesetting.Currency.CurrencyShortName);

                ViewBag.Acc_VoucherType = _VoucherTypeRepository.GetAllForDropDown();// new SelectList(_VoucherTypeRepository.All(), "Id", "VoucherTypeName", vouchertypeid);
                vouchersamplemodel.VoucherTypeId = int.Parse(vouchertypeid.ToString());

                vouchersamplemodel.Acc_VoucherTypes = _VoucherTypeRepository.All().Where(x => x.Id.ToString() == vouchertypeid).FirstOrDefault();


                //SelectListItem warehouseall = new SelectListItem() { Text = "Please Select", Value = "" };
                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                    //warehouselist.Add(warehouseall);
                }
                ViewBag.WarehouseId = warehouselist.OrderBy(x => x.Value);




                ViewBag.PrdUnitId = _prdUnitRepository.GetAllForDropDown(); //&& c.ComId == (transactioncomid)
                                                                            ///////account head parent data for dropdown
                                                                            //var ChartOfAccountParent = _accountHeadRepository.All().Where(c => c.Id > 0 && c.AccType == "G" && c.ComId == transactioncomid).Select(s => new { Text = s.AccName, Value = s.Id }).ToList(); //&& c.ComId == (transactioncomid)
                                                                            //ViewBag.AccountParent = new SelectList(ChartOfAccountParent, "Value", "Text");

                ViewBag.Acc_FiscalYearModel = new SelectList(_accFiscalMonthRepository.All().Where(x => x.ComId == transactioncomid), "Value", "Text");
                ViewBag.Acc_FiscalMonth = new SelectList(_accFiscalMonthRepository.All().Where(x => x.ComId == transactioncomid).Take(0), "Value", "Text");

                //var HR_Emp_Info = _employeeRepository.All().Select(s => new { Text = s.EmployeeCode + " - " + s.EmployeeName + " - " + s.DesignationList.DesigName, Value = s.Id }).ToList(); //&& c.ComId == (transactioncomid)
                //ViewBag.EmpId = new SelectList(HR_Emp_Info, "Value", "Text");

                //var Customer = _customerRepository.All().Take(1).Where(c => c.Id > 0 && c.ComId == transactioncomid).Select(s => new { Text = s.Phone + " - " + s.Name, Value = s.Id }).ToList(); //&& c.ComId == (transactioncomid)
                //ViewBag.CustomerId = new SelectList(Customer, "Value", "Text");

                //var Supplier = _supplierRepository.All().Where(c => c.Id > 0 && c.ComId == transactioncomid).Select(s => new { Text = s.Phone + s.SupplierName, Value = s.Id }).ToList(); //&& c.ComId == (transactioncomid)
                //ViewBag.SupplierId = new SelectList(Supplier, "Value", "Text");


                ViewBag.CustomerId = _customerRepository.GetAllForDropDown();
                ViewBag.SupplierId = _supplierRepository.GetAllForDropDown();
                ViewBag.MemberId = _memberRepository.GetAllForDropDown();
                ViewBag.EmpId = _employeeRepository.GetAllForDropDown();
                ViewBag.SalesId = _saleRepository.GetAllForDropDown();
                ViewBag.PurchaseId = _purchaseRepository.GetAllForDropDown();


                var VoucherTranGroupList = _VoucherTranGroupRepository.All().ToList();
                ViewBag.VoucherTranGroupArray = new MultiSelectList(VoucherTranGroupList, "Id", "VoucherTranGroupName");
                ViewBag.VoucherTranGroupId = new SelectList(VoucherTranGroupList, "Id", "VoucherTranGroupName");
                ViewBag.VoucherTranGroupIdRow = new SelectList(VoucherTranGroupList, "Id", "VoucherTranGroupName");



                if (Type == "VPC")
                {
                    ViewBag.ActionType = "Create";


                    var AccountHeadModel = _accountHeadRepository.All().Include(x => x.AccountCategorys).Where(c => c.ComId == transactioncomid && c.Id > 0 && c.AccType == "L"); //&& c.ComId == (transactioncomid)
                    if (storesetting.isMultiDebitCredit == true)
                    {
                        var accounthead = _accountHeadRepository.GetCashHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                        var expensehead = _accountHeadRepository.GetExpenseHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                        var assetliabilityhead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown().ToList(); //

                        foreach (var item in accounthead)
                        {
                            expensehead.Add(item);
                        }

                        foreach (var item in assetliabilityhead)
                        {
                            expensehead.Add(item);
                        }
                        ViewBag.Account = expensehead;

                    }
                    else
                    {
                        ViewBag.Account = _accountHeadRepository.GetExpenseHeadForDropDown();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName != "Cash" && x.AccountCategorys.AccountCategoryName != "Bank" && x.AccountCategorys.AccountType != "Income").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }


                    ViewBag.SubSectionList = _subSectionRepository.All().Where(x => x.ComId == transactioncomid);


                    if (VoucherId == 0)
                    {
                        ///////only cash item when multi debit credit of then it enable

                        ViewBag.Country = _countryRepository.GetCurrencyList();// _countryRepository.GetCurrencyList();
                        ViewBag.AccountMainId = _accountHeadRepository.GetCashHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        return View(vouchersamplemodel);

                    }
                    else
                    {


                        Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All()
                            .Include(b => b.VoucherSubs).ThenInclude(b => b.Acc_ChartOfAccount).ThenInclude(b => b.vAccountGroupHead)
                            .Include(a => a.VoucherSubs).ThenInclude(a => a.VoucherSubSections).ThenInclude(a => a.SubSection)
                            .Include(x => x.VoucherSubs).ThenInclude(x => x.VoucherSubChecnoes)
                            .Include(x => x.VoucherSubs).ThenInclude(x => x.EmployeeData)
                            .Include(x => x.VoucherSubs).ThenInclude(x => x.Customers)
                            .Include(x => x.VoucherSubs).ThenInclude(x => x.Suppliers)
                                                                 .Include(a => a.VoucherSubs).ThenInclude(a => a.Country)
                                               .Include(a => a.VoucherSubs).ThenInclude(a => a.CountryForeign)
                            .Include(x => x.Acc_VoucherTypes)

                            .Where(x => x.Id == VoucherId).FirstOrDefault();

                        if (Vouchermain.isPosted == true && IsView != 1)
                        {
                            return BadRequest();
                        }
                        if (Vouchermain == null)
                        {
                            return NotFound();
                        }
                        if (IsView == 1) { ViewBag.ActionType = "View"; } else { ViewBag.ActionType = "Edit"; }

                        ViewBag.Country = _countryRepository.GetCurrencyList();// _countryRepository.GetCurrencyList();

                        int AccId = Vouchermain.VoucherSubs.Where(x => x.SRowNo < 0).Select(x => x.AccId).FirstOrDefault();
                        ViewBag.AccountMainId = _accountHeadRepository.GetCashHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text", AccId);
                        Vouchermain.AccountMainId = AccId;

                        string itemdesc = Vouchermain.VoucherTranGroupList;
                        if (itemdesc != null)
                        {
                            string[] split = itemdesc.Split(',');
                            ViewBag.VoucherTranGroupArray = new MultiSelectList(VoucherTranGroupList, "Id", "VoucherTranGroupName", split);
                        }


                        return View(Vouchermain);

                    }
                }
                else if (Type == "VRC")
                {
                    ViewBag.ActionType = "Create";


                    var AccountHeadModel = _accountHeadRepository.All().Where(c => c.ComId == transactioncomid && c.Id > 0 && c.AccType == "L"); //&& c.ComId == (transactioncomid)
                    if (storesetting.isMultiDebitCredit == true)
                    {
                        //ViewBag.Account = _accountHeadRepository.GetCashHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsBankItem == false).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");


                        var accounthead = _accountHeadRepository.GetCashHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                        var incomehead = _accountHeadRepository.GetIncomeHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        foreach (var item in accounthead)
                        {
                            incomehead.Add(item);
                        }
                        ViewBag.Account = incomehead;


                    }
                    else
                    {
                        ViewBag.Account = _accountHeadRepository.GetIncomeHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsBankItem == false && x.IsCashItem == false).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }


                    ///////only cash item when multi debit credit of then it enable
                    ViewBag.AccountMainId = _accountHeadRepository.GetCashHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    ViewBag.SubSectionList = _subSectionRepository.All().Where(x => x.ComId == transactioncomid);


                    if (VoucherId == 0)
                    {
                        ViewBag.Country = _countryRepository.GetCurrencyList();// _countryRepository.GetCurrencyList();
                        ViewBag.AccountMainId = _accountHeadRepository.GetCashHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        return View(vouchersamplemodel);

                    }
                    else
                    {

                        Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All()
                        .Include(b => b.VoucherSubs).ThenInclude(b => b.Acc_ChartOfAccount).ThenInclude(b => b.vAccountGroupHead)
                        .Include(a => a.VoucherSubs).ThenInclude(a => a.VoucherSubSections).ThenInclude(a => a.SubSection)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.VoucherSubChecnoes)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.EmployeeData)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.Customers)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.Suppliers)
                        .Include(a => a.VoucherSubs).ThenInclude(a => a.Country)
                        .Include(a => a.VoucherSubs).ThenInclude(a => a.CountryForeign)
                        .Include(x => x.Acc_VoucherTypes)
                        .Where(x => x.Id == VoucherId).FirstOrDefault();

                        if (Vouchermain.isPosted == true && IsView != 1)
                        {
                            return BadRequest();
                        }

                        if (Vouchermain == null)
                        {
                            return NotFound();
                        }
                        if (IsView == 1) { ViewBag.ActionType = "View"; } else { ViewBag.ActionType = "Edit"; }

                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        int AccId = Vouchermain.VoucherSubs.Where(x => x.SRowNo < 0).Select(x => x.AccId).FirstOrDefault();
                        ViewBag.AccountMainId = new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text", AccId);
                        Vouchermain.AccountMainId = AccId;

                        string itemdesc = Vouchermain.VoucherTranGroupList;
                        if (itemdesc != null)
                        {
                            string[] split = itemdesc.Split(',');
                            ViewBag.VoucherTranGroupArray = new MultiSelectList(VoucherTranGroupList, "VoucherTranGroupId", "VoucherTranGroupName", split);
                        }

                        return View(Vouchermain);

                    }
                }
                else if (Type == "VRB")
                {
                    ViewBag.ActionType = "Create";


                    var AccountHeadModel = _accountHeadRepository.All().Where(c => c.ComId == transactioncomid && c.Id > 0 && c.AccType == "L" && c.IsItemAccmulateddDep == false && c.IsItemDepExp == false); //&& c.ComId == (transactioncomid)
                    if (storesetting.isMultiDebitCredit == true)
                    {
                        //ViewBag.Account = _accountHeadRepository.GetBankHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsCashItem == false).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        var accounthead = _accountHeadRepository.GetBankHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                        var incomehead = _accountHeadRepository.GetIncomeHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        foreach (var item in accounthead)
                        {
                            incomehead.Add(item);
                        }
                        ViewBag.Account = incomehead;

                    }
                    else
                    {
                        ViewBag.Account = _accountHeadRepository.GetIncomeHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsBankItem == false && x.IsCashItem == false).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }


                    ///////only cash item when multi debit credit of then it enable
                    ViewBag.AccountMainId = _accountHeadRepository.GetBankHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    ViewBag.SubSectionList = _subSectionRepository.All().Where(x => x.ComId == transactioncomid);


                    if (VoucherId == 0)
                    {
                        ViewBag.Country = _countryRepository.GetCurrencyList();// _countryRepository.GetCurrencyList();
                        ViewBag.AccountMainId = _accountHeadRepository.GetBankHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        return View(vouchersamplemodel);

                    }
                    else
                    {

                        Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All()
                            .Include(b => b.VoucherSubs).ThenInclude(b => b.Acc_ChartOfAccount).ThenInclude(b => b.vAccountGroupHead)
                            .Include(a => a.VoucherSubs).ThenInclude(a => a.VoucherSubSections).ThenInclude(a => a.SubSection)
                            .Include(x => x.VoucherSubs).ThenInclude(x => x.VoucherSubChecnoes)
                            .Include(x => x.VoucherSubs).ThenInclude(x => x.EmployeeData)
                            .Include(x => x.VoucherSubs).ThenInclude(x => x.Customers)
                            .Include(x => x.VoucherSubs).ThenInclude(x => x.Suppliers)
                                                                 .Include(a => a.VoucherSubs).ThenInclude(a => a.Country)
                                               .Include(a => a.VoucherSubs).ThenInclude(a => a.CountryForeign)
                            .Include(x => x.Acc_VoucherTypes)

                            .Where(x => x.Id == VoucherId).FirstOrDefault();

                        if (Vouchermain.isPosted == true && IsView != 1)
                        {
                            return BadRequest();
                        }
                        //Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All().Find(id);
                        if (Vouchermain == null)
                        {
                            return NotFound();
                        }
                        if (IsView == 1) { ViewBag.ActionType = "View"; } else { ViewBag.ActionType = "Edit"; }

                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        int AccId = Vouchermain.VoucherSubs.Where(x => x.SRowNo < 0).Select(x => x.AccId).FirstOrDefault();
                        ViewBag.AccountMainId = _accountHeadRepository.GetBankHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text", AccId);
                        Vouchermain.AccountMainId = AccId;

                        string itemdesc = Vouchermain.VoucherTranGroupList;
                        if (itemdesc != null)
                        {
                            string[] split = itemdesc.Split(',');
                            ViewBag.VoucherTranGroupArray = new MultiSelectList(VoucherTranGroupList, "VoucherTranGroupId", "VoucherTranGroupName", split);
                        }

                        return View(Vouchermain);

                    }
                }
                else if (Type == "VPB")
                {
                    ViewBag.ActionType = "Create";


                    var AccountHeadModel = _accountHeadRepository.All().Where(c => c.ComId == transactioncomid && c.Id > 0 && c.AccType == "L" && c.IsItemAccmulateddDep == false && c.IsItemDepExp == false); //&& c.ComId == (transactioncomid)
                    if (storesetting.isMultiDebitCredit == true)
                    {
                        //ViewBag.Account = _accountHeadRepository.GetBankHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsCashItem == false).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        var accounthead = _accountHeadRepository.GetBankHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                        var expensehead = _accountHeadRepository.GetExpenseHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        foreach (var item in accounthead)
                        {
                            expensehead.Add(item);
                        }
                        ViewBag.Account = expensehead;


                    }
                    else
                    {
                        ViewBag.Account = _accountHeadRepository.GetExpenseHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsBankItem == false && x.IsCashItem == false).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }





                    ///////only cash item when multi debit credit of then it enable
                    ViewBag.AccountMainId = _accountHeadRepository.GetBankHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    ViewBag.SubSectionList = _subSectionRepository.All().Where(x => x.ComId == transactioncomid);


                    if (VoucherId == 0)
                    {
                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        ViewBag.AccountMainId = _accountHeadRepository.GetBankHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");


                        try
                        {
                            ///integration Part -- Need more work by Himu
                            if (Id > 0 && IntegrationSettingMainId > 0)
                            {

                                //       var ComId = HttpContext.Session.GetInt32("ComId");

                                var query = $"Exec Integration_Process '{comid}',{IntegrationSettingMainId},{Id} ";


                                SqlParameter[] sqlParameter = new SqlParameter[3];
                                sqlParameter[0] = new SqlParameter("@ComId", comid);
                                sqlParameter[1] = new SqlParameter("@IntegrationSettingMainId", IntegrationSettingMainId);
                                sqlParameter[2] = new SqlParameter("@FiscalMonthid", Id);
                                Helper.ExecProc("Integration_Process", sqlParameter);

                                var fiscalmonthname = _accFiscalMonthRepository.All().Where(x => x.Id == Id && x.ComId == comid).Select(x => x.MonthName).FirstOrDefault();
                                string SETTINGRemarks = _integrationSettingMainRepository.All().Where(x => x.Id == IntegrationSettingMainId).FirstOrDefault().IntegrationRemarks;

                                var abcdefgh = _payrollIntegrationSummaryRepository.All().Include(x => x.Acc_ChartOfAccounts).ThenInclude(x => x.vAccountGroupHead).Where(x => x.Id == Id && x.DataType == IntegrationSettingMainId.ToString() && x.Acc_ChartOfAccounts.AccType == "L").ToList(); //&& (x.TKCreditLocal + x.TKCreditLocal) > 0
                                //vouchersamplemodel.VoucherDesc = "Being the amount paid against salary and overtime for the month of " + fiscalmonthname + " as per approved bill attached herewith.";
                                vouchersamplemodel.VoucherDesc = fiscalmonthname + " " + SETTINGRemarks;


                                vouchersamplemodel.VoucherSubs = new List<Acc_VoucherSubModel>();
                                foreach (var item in abcdefgh)
                                {
                                    if ((item.TKDebitLocal + item.TKCreditLocal) > 0)
                                    {
                                        Acc_VoucherSubModel abc = new Acc_VoucherSubModel();
                                        abc.AccId = item.AccId;
                                        abc.TKDebit = item.TKDebitLocal;
                                        abc.TKCredit = item.TKCreditLocal;
                                        abc.TKDebitLocal = item.TKDebitLocal;
                                        abc.TKCreditLocal = item.TKCreditLocal;
                                        abc.Note1 = item.Note1; ///IF CT INFORMATION IS THERE --- CAUSE NO OTHER COLUMN HAVE FOR CT IN INTEGRATION TABLE
                                        abc.Note2 = item.Note2; ///IF CT INFORMATION IS THERE --- CAUSE NO OTHER COLUMN HAVE FOR CT IN INTEGRATION TABLE
                                        abc.Note3 = item.Note3;
                                        abc.SLNo = int.Parse(item.SLNo);
                                        abc.Acc_ChartOfAccount = item.Acc_ChartOfAccounts;
                                        vouchersamplemodel.VoucherSubs.Add(abc);
                                    }
                                };
                            }
                        }
                        catch (Exception ex)
                        {

                            throw ex;
                        }








                        return View(vouchersamplemodel);

                    }
                    else
                    {
                        //if (VoucherId == null)
                        //{
                        //    return BadRequest();
                        //}
                        Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All()
                         .Include(b => b.VoucherSubs).ThenInclude(b => b.Acc_ChartOfAccount).ThenInclude(b => b.vAccountGroupHead)
                         .Include(a => a.VoucherSubs).ThenInclude(a => a.VoucherSubSections).ThenInclude(a => a.SubSection)
                         .Include(x => x.VoucherSubs).ThenInclude(x => x.VoucherSubChecnoes)
                         .Include(x => x.VoucherSubs).ThenInclude(x => x.EmployeeData)
                         .Include(x => x.VoucherSubs).ThenInclude(x => x.Customers)
                         .Include(x => x.VoucherSubs).ThenInclude(x => x.Suppliers)
                         .Include(a => a.VoucherSubs).ThenInclude(a => a.Country)
                         .Include(a => a.VoucherSubs).ThenInclude(a => a.CountryForeign)
                         .Include(x => x.Acc_VoucherTypes)

                         .Where(x => x.Id == VoucherId).FirstOrDefault();

                        if (Vouchermain.isPosted == true && IsView != 1)
                        {
                            return BadRequest();
                        }
                        //Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All().Find(id);
                        if (Vouchermain == null)
                        {
                            return NotFound();
                        }
                        if (IsView == 1) { ViewBag.ActionType = "View"; } else { ViewBag.ActionType = "Edit"; }

                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        int AccId = Vouchermain.VoucherSubs.Where(x => x.SRowNo < 0).Select(x => x.AccId).FirstOrDefault();
                        ViewBag.AccountMainId = _accountHeadRepository.GetBankHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text", AccId);
                        Vouchermain.AccountMainId = AccId;


                        string itemdesc = Vouchermain.VoucherTranGroupList;
                        if (itemdesc != null)
                        {
                            string[] split = itemdesc.Split(',');
                            ViewBag.VoucherTranGroupArray = new MultiSelectList(VoucherTranGroupList, "VoucherTranGroupId", "VoucherTranGroupName", split);
                        }

                        return View(Vouchermain);

                    }
                }
                else if (Type == "VCR")
                {
                    ViewBag.ActionType = "Create";


                    var AccountHeadModel = _accountHeadRepository.All().Where(c => c.ComId == transactioncomid && c.Id > 0 && c.AccType == "L" && c.IsItemAccmulateddDep == false && c.IsItemDepExp == false); //&& c.ComId == (transactioncomid)
                    if (storesetting.isMultiDebitCredit == true)
                    {
                        //ViewBag.Account = _accountHeadRepository.GetCashHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsBankItem == true || x.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");


                        var accounthead = _accountHeadRepository.GetCashHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                        var bankhead = _accountHeadRepository.GetBankHeadForDropDown().ToList();// new SelectList(AccountHeadModel.Where(x => x.AccountCategorys.AccountCategoryName == "Cash").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        foreach (var item in accounthead)
                        {
                            bankhead.Add(item);
                        }
                        ViewBag.Account = bankhead;

                    }
                    else
                    {
                        ViewBag.Account = _accountHeadRepository.GetCashBankHeadForDropDown(true); //new SelectList(AccountHeadModel.Where(x => x.IsBankItem == true || x.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }


                    ///////only cash item when multi debit credit of then it enable
                    ViewBag.AccountMainId = _accountHeadRepository.GetCashBankHeadForDropDown(true); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true || p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    ViewBag.SubSectionList = _subSectionRepository.All().Where(x => x.ComId == transactioncomid);

                    if (VoucherId == 0)
                    {
                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        ViewBag.AccountMainId = _accountHeadRepository.GetCashBankHeadForDropDown(true); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true || p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        return View(vouchersamplemodel);

                    }
                    else
                    {
                        Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All()
                        .Include(b => b.VoucherSubs).ThenInclude(b => b.Acc_ChartOfAccount).ThenInclude(b => b.vAccountGroupHead)
                        .Include(a => a.VoucherSubs).ThenInclude(a => a.VoucherSubSections).ThenInclude(a => a.SubSection)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.VoucherSubChecnoes)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.EmployeeData)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.Customers)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.Suppliers)
                                                             .Include(a => a.VoucherSubs).ThenInclude(a => a.Country)
                                               .Include(a => a.VoucherSubs).ThenInclude(a => a.CountryForeign)
                        .Include(x => x.Acc_VoucherTypes)
                        .Where(x => x.Id == VoucherId).FirstOrDefault();

                        if (Vouchermain.isPosted == true && IsView != 1)
                        {
                            return BadRequest();
                        }
                        //Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All().Find(id);
                        if (Vouchermain == null)
                        {
                            return NotFound();
                        }
                        if (IsView == 1) { ViewBag.ActionType = "View"; } else { ViewBag.ActionType = "Edit"; }

                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        int AccId = Vouchermain.VoucherSubs.Where(x => x.SRowNo < 0).Select(x => x.AccId).FirstOrDefault();
                        ViewBag.AccountMainId = _accountHeadRepository.GetCashBankHeadForDropDown(true); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsCashItem == true || p.IsBankItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text", AccId);
                        Vouchermain.AccountMainId = AccId;


                        string itemdesc = Vouchermain.VoucherTranGroupList;
                        if (itemdesc != null)
                        {
                            string[] split = itemdesc.Split(',');
                            ViewBag.VoucherTranGroupArray = new MultiSelectList(VoucherTranGroupList, "VoucherTranGroupId", "VoucherTranGroupName", split);
                        }

                        return View(Vouchermain);

                    }

                }
                else if (Type == "VJR")
                {

                    ViewBag.ActionType = "Create";


                    //var AccountHeadModel = _accountHeadRepository.All().Where(c => c.ComId == transactioncomid && c.Id > 0 && c.AccType == "L"); //&& c.ComId == (transactioncomid)
                    if (storesetting.isMultiDebitCredit == true)
                    {
                        ViewBag.Account = _accountHeadRepository.GetAccountLedgerHeadForDropDown(); //new SelectList(AccountHeadModel.Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }
                    else
                    {
                        ViewBag.Account = _accountHeadRepository.GetAccountLedgerHeadForDropDown(); //new SelectList(AccountHeadModel.Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }


                    ///////only cash item when multi debit credit of then it enable
                    ViewBag.AccountMainId = _accountHeadRepository.GetAccountLedgerHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    ViewBag.SubSectionList = _subSectionRepository.All().Where(x => x.ComId == transactioncomid);

                    if (VoucherId == 0)
                    {


                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        ViewBag.AccountMainId = _accountHeadRepository.GetAccountLedgerHeadForDropDown(); //new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        try
                        {
                            ///integration Part -- Need more work for issue and mrr /grr
                            if (Id > 0 && IntegrationSettingMainId > 0)
                            {

                                //       var ComId = HttpContext.Session.GetInt32("ComId");

                                var query = $"Exec Integration_Process '{comid}',{IntegrationSettingMainId},{Id} ";


                                SqlParameter[] sqlParameter = new SqlParameter[3];
                                sqlParameter[0] = new SqlParameter("@ComId", comid);
                                sqlParameter[1] = new SqlParameter("@IntegrationSettingMainId", IntegrationSettingMainId);
                                sqlParameter[2] = new SqlParameter("@FiscalMonthid", Id);
                                Helper.ExecProc("Integration_Process", sqlParameter);

                                var fiscalmonthname = _accFiscalMonthRepository.All().Where(x => x.Id == Id && x.ComId == comid).Select(x => x.MonthName).FirstOrDefault();


                                var SETTINGSNAME = _integrationSettingMainRepository.All().Where(x => x.Id == IntegrationSettingMainId).FirstOrDefault().IntegrationSettingName;
                                var SETTINGRemarks = _integrationSettingMainRepository.All().Where(x => x.Id == IntegrationSettingMainId).FirstOrDefault().IntegrationRemarks;




                                var abcdefgh = _payrollIntegrationSummaryRepository.All().Include(x => x.Acc_ChartOfAccounts).ThenInclude(x => x.vAccountGroupHead).Where(x => x.Id == Id && x.DataType == IntegrationSettingMainId.ToString() && x.Acc_ChartOfAccounts.AccType == "L").ToList(); //&& (x.TKCreditLocal + x.TKCreditLocal) > 0
                                //vouchersamplemodel.VoucherDesc = SETTINGSNAME.ToString() + " for the month of " + fiscalmonthname + " .";
                                vouchersamplemodel.VoucherDesc = SETTINGRemarks.ToString() + " for the month of " + fiscalmonthname + " .";

                                vouchersamplemodel.VoucherSubs = new List<Acc_VoucherSubModel>();
                                foreach (var item in abcdefgh)
                                {
                                    if ((item.TKDebitLocal + item.TKCreditLocal) > 0)
                                    {
                                        Acc_VoucherSubModel abc = new Acc_VoucherSubModel();
                                        abc.AccId = item.AccId;
                                        abc.TKDebit = item.TKDebitLocal;
                                        abc.TKCredit = item.TKCreditLocal;
                                        abc.TKDebitLocal = item.TKDebitLocal;
                                        abc.TKCreditLocal = item.TKCreditLocal;
                                        abc.Note1 = item.Note1; ///IF CT INFORMATION IS THERE --- CAUSE NO OTHER COLUMN HAVE FOR CT IN INTEGRATION TABLE
                                        abc.Note2 = item.Note2; ///IF CT INFORMATION IS THERE --- CAUSE NO OTHER COLUMN HAVE FOR CT IN INTEGRATION TABLE
                                        abc.Note3 = item.Note3;
                                        abc.SLNo = int.Parse(item.SLNo);
                                        abc.Acc_ChartOfAccount = item.Acc_ChartOfAccounts;
                                        vouchersamplemodel.VoucherSubs.Add(abc);
                                    }
                                };
                            }
                        }
                        catch (Exception ex)
                        {

                            throw ex;
                        }

                        return View(vouchersamplemodel);

                    }
                    else
                    {
                        Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All()
                        .Include(b => b.VoucherSubs).ThenInclude(b => b.Acc_ChartOfAccount).ThenInclude(b => b.vAccountGroupHead)
                        .Include(a => a.VoucherSubs).ThenInclude(a => a.VoucherSubSections).ThenInclude(a => a.SubSection)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.VoucherSubChecnoes)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.EmployeeData)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.Customers)
                        .Include(x => x.VoucherSubs).ThenInclude(x => x.Suppliers)
                        .Include(a => a.VoucherSubs).ThenInclude(a => a.Country)
                        .Include(a => a.VoucherSubs).ThenInclude(a => a.CountryForeign)
                        .Include(x => x.Acc_VoucherTypes)
                        .Where(x => x.Id == VoucherId).FirstOrDefault();


                        if (Vouchermain.isPosted == true && IsView != 1)
                        {
                            return BadRequest();
                        }
                        //Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All().Find(id);
                        if (Vouchermain == null)
                        {
                            return NotFound();
                        }
                        if (IsView == 1) { ViewBag.ActionType = "View"; } else { ViewBag.ActionType = "Edit"; }

                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        int AccId = Vouchermain.VoucherSubs.Where(x => x.SRowNo < 0).Select(x => x.AccId).FirstOrDefault();

                        ViewBag.AccountMainId = _accountHeadRepository.GetAccountLedgerHeadForDropDown(); // new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text", AccId);
                        Vouchermain.AccountMainId = AccId;


                        string itemdesc = Vouchermain.VoucherTranGroupList;
                        if (itemdesc != null)
                        {
                            string[] split = itemdesc.Split(',');
                            ViewBag.VoucherTranGroupArray = new MultiSelectList(VoucherTranGroupList, "VoucherTranGroupId", "VoucherTranGroupName", split);
                        }


                        return View(Vouchermain);

                    }

                }
                else if (Type == "VLC")
                {

                    ViewBag.ActionType = "Create";


                    var AccountHeadModel = _accountHeadRepository.All().Where(c => c.ComId == transactioncomid && c.Id > 0 && c.AccType == "L" && c.IsItemAccmulateddDep == false && c.IsItemDepExp == false); //&& c.ComId == (transactioncomid)
                    if (storesetting.isMultiDebitCredit == true)
                    {
                        ViewBag.Account = _accountHeadRepository.GetAccountLedgerHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsBankItem == true || x.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }
                    else
                    {
                        ViewBag.Account = _accountHeadRepository.GetAccountLedgerHeadForDropDown(); //new SelectList(AccountHeadModel.Where(x => x.IsBankItem == true || x.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    }


                    ///////only cash item when multi debit credit of then it enable
                    ViewBag.AccountMainId = _accountHeadRepository.GetBankHeadForDropDown();// new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsBankItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
                    ViewBag.SubSectionList = _subSectionRepository.All().Where(x => x.ComId == transactioncomid);

                    if (VoucherId == 0)
                    {
                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        ViewBag.AccountMainId = _accountHeadRepository.GetCashHeadForDropDown();// new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");

                        return View(vouchersamplemodel);

                    }
                    else
                    {
                        Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All()
                                               .Include(b => b.VoucherSubs).ThenInclude(b => b.Acc_ChartOfAccount).ThenInclude(b => b.vAccountGroupHead)
                                               .Include(a => a.VoucherSubs).ThenInclude(a => a.VoucherSubSections).ThenInclude(a => a.SubSection)
                                               .Include(x => x.VoucherSubs).ThenInclude(x => x.VoucherSubChecnoes)
                                               .Include(x => x.VoucherSubs).ThenInclude(x => x.EmployeeData)
                                               .Include(x => x.VoucherSubs).ThenInclude(x => x.Customers)
                                               .Include(x => x.VoucherSubs).ThenInclude(x => x.Suppliers)
                                               .Include(a => a.VoucherSubs).ThenInclude(a => a.Country)
                                               .Include(a => a.VoucherSubs).ThenInclude(a => a.CountryForeign)
                                               .Include(x => x.Acc_VoucherTypes)
                                               .Where(x => x.Id == VoucherId).FirstOrDefault();


                        if (Vouchermain.isPosted == true && IsView != 1)
                        {
                            return BadRequest();
                        }
                        //Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All().Find(id);
                        if (Vouchermain == null)
                        {
                            return NotFound();
                        }


                        if (IsView == 1) { ViewBag.ActionType = "View"; } else { ViewBag.ActionType = "Edit"; }

                        ViewBag.Country = _countryRepository.GetCurrencyList();
                        int AccId = Vouchermain.VoucherSubs.Where(x => x.SRowNo < 0).Select(x => x.AccId).FirstOrDefault();
                        ViewBag.AccountMainId = _accountHeadRepository.GetCashHeadForDropDown();// new SelectList(_accountHeadRepository.All().Where(p => p.ComId == transactioncomid && p.AccType == "L" && p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text", AccId);
                        Vouchermain.AccountMainId = AccId;

                        string itemdesc = Vouchermain.VoucherTranGroupList;
                        if (itemdesc != null)
                        {
                            string[] split = itemdesc.Split(',');
                            ViewBag.VoucherTranGroupArray = new MultiSelectList(VoucherTranGroupList, "VoucherTranGroupId", "VoucherTranGroupName", split);
                        }

                        return View(Vouchermain);

                    }
                }

                return View();
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }


        [HttpGet]
        public ActionResult AddBillByTypePrevious(string Type, int VoucherId = 0, int IsCopy = 0, int Id = 0)
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            try
            {
                if (Type == null)
                {
                    Type = "VPC";
                }

                if (VoucherId > 0)
                {
                    if (IsCopy == 0)
                    {
                        ViewBag.ActionType = "Edit";
                    }
                    else if (IsCopy == 1)
                    {
                        ViewBag.ActionType = "Create";
                    }
                    else
                    {
                        ViewBag.ActionType = "View";
                    }
                }
                else
                {
                    ViewBag.ActionType = "Create";
                }

                var terms = _termRepository.All();

                Console.WriteLine(terms);
                var selectList = terms.Select(term => new
                {
                    value = term.Id,
                    text = term.TermName
                }).ToList();

                Console.WriteLine(selectList);
                ViewData["TermsList"] = selectList;

                //ViewBag.Acc_VoucherNoPrefix = _accVoucherNoPrefixRepository.All().Where(x => x.ComId == comid).Include(x => x.vVoucherTypes).Where(x => x.isVisible == true && x.vVoucherTypes.isSystem == false).ToList();

                //var vouchertypedata = _VoucherTypeRepository.All().Where(x => x.VoucherTypeNameShort == Type).FirstOrDefault();
                var billypedata = _docTypeRepository.All().Where(x => x.DocTypeValue == Type).FirstOrDefault();

                ViewBag.DocTypeId = billypedata.Id;
                ViewBag.DocTypeName = billypedata.DocTypeValue;
                //ViewBag.VoucherTypeId = vouchertypedata.Id;
                //ViewBag.VoucherTypeName = vouchertypedata.VoucherTypeName;
                ViewBag.IsCopy = IsCopy;
                ViewBag.VoucherId = VoucherId;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();


                return View("AddBill");
            }
            catch (Exception ex)
            {
                return View();
                throw ex;
            }

        }

        [OverridableAuthorize]
        [HttpGet]
        public IActionResult AddBillByType(string Type, int PurchaseId = 0, int isCopy = 0, int CopyBill = 0, int SupplierId = 0, int ProductId = 0, int IsRecurring = 0)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            ViewBag.DocTypeId = 0;
            ViewBag.IsRecurring = IsRecurring;
            //int PurchaseId = 0;
            //int PurchaseId = 0;
            ViewBag.IsCopy = isCopy;
            ViewBag.CopyBill = 0;
            ViewBag.PaymentSignal = 0;
            ViewBag.ProductId = 0;
            var taxes = _mastersalestaxRepository.All().Where(f => f.ComId == ComId).ToList();
            var taxCalculation = new List<SelectListItem>
            {
                new SelectListItem { Text = "Exclusive of Tax", Value = "exclusive" },
                new SelectListItem { Text = "Inclusive of Tax", Value = "inclusive" },
                new SelectListItem { Text = "Out of scope of Tax", Value = "outscope" }
            };

            var taxCalculationList = new SelectList(taxCalculation, "Value", "Text");

            ViewData["AmountsAre"] = taxCalculationList;
            SelectList taxList = new SelectList(taxes, "Id", "Name");
            ViewData["TaxList"] = taxList;

            ViewBag.MasterPO = _masterPORepository.GetAllForDropDown();

            ViewBag.WarehouseIdMain = _warehouseRepository.All().Where(x => x.ComId == ComId)
                .Select(x => new SelectListItem
                {
                    Text = x.WhName,
                    Value = x.Id.ToString()
                });
            if (CopyBill == 1 && PurchaseId > 0)
            {
                ViewBag.ActionType = "Create";
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;
                }
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.CopyBill = CopyBill;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.BillId = BillId;
                ViewBag.DocTypeValue = Type;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                ViewBag.GroupList = tagsRepository.GetAllForDropDownForGroup();
                ViewData["CategoryList"] = _accountHeadRepository.GetCashBankHeadForDropDown();
                return View("AddBill", model: PurchaseId);

            }
            else if (SupplierId > 0 && PurchaseId > 0)
            {
                ViewBag.ActionType = "Create";
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;
                var DocType = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().DocType;
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;

                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;
                }
                ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.DocType = DocType;
                ViewBag.BillId = BillId;
                ViewBag.CopyBill = CopyBill;
                ViewBag.DocTypeValue = Type;
                ViewBag.PaymentSignal = 1;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                ViewBag.GroupList = tagsRepository.GetAllForDropDownForGroup();
                return View("AddBill", model: PurchaseId);

            }
            else
            {
                if (PurchaseId > 0 && CopyBill == 0 && Type != "Stock Adjustment")
                {
                    ViewBag.ActionType = "Edit";
                    ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                    ViewBag.MakePayment = 0;
                    Console.WriteLine(ViewBag.SupplierId);
                    ViewBag.CopyBill = CopyBill;

                }
                else
                {
                    int TypesDocTypeId = _docTypeRepository.All().Where(x => x.DocTypeValue == "StockAdjustment").FirstOrDefault().Id;
                    var getPurchase = _purchaseItemRepository.All().Where(x => x.ProductId == ProductId &&
                    x.PurchaseModel.isPosted == false && x.PurchaseModel.IsSystem == true && x.PurchaseModel.DocTypeId == TypesDocTypeId).OrderBy(x => x.Id).LastOrDefault();
                    PurchaseId = getPurchase == null ? 0 : getPurchase.PurchaseId;

                    if (Type == "Stock Adjustment" && ProductId != 0 && PurchaseId == 0 && getPurchase == null)
                    {
                        ViewBag.ActionType = "Create";
                        ViewBag.ProductId = ProductId;
                    }
                    else
                    {
                        if (Type == "Stock Adjustment" && PurchaseId != 0)
                        {
                            ViewBag.ActionType = "Edit";
                            ViewBag.PurchaseId = PurchaseId;
                            ViewBag.ProductId = ProductId;
                        }
                        else
                        {
                            if (Type == "Opening Stock" && ProductId != 0)
                            {
                                ViewBag.ActionType = "Edit";
                                var purchaseId = _purchaseItemRepository.All().Where(x => x.ProductId == ProductId).FirstOrDefault().PurchaseId;
                                ViewBag.PurchaseId = purchaseId;
                                ViewBag.ProductId = ProductId;
                            }
                            else
                            {
                                ViewBag.ActionType = "Create";
                                ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                            }
                        }

                    }

                }


                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;

                var TypeWiseDoc = Type;
                Console.WriteLine(TypeWiseDoc);
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;

                    //            ViewBag.SalesType = Type;
                }
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                ViewBag.CopyBill = CopyBill;
                ViewBag.BillId = BillId;
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.DocTypeValue = Type;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                ViewData["CategoryList"] = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.GroupList = tagsRepository.GetAllForDropDownForGroup();

                ViewBag.SupplierId = SupplierId;
                return View("AddBill", model: PurchaseId);

            }



        }

        [OverridableAuthorize]
        [HttpGet]
        public IActionResult EditBillByType(string Type, int PurchaseId = 0, int isCopy = 0, int CopyBill = 0, int SupplierId = 0, int ProductId = 0, int IsRecurring = 0)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            ViewBag.DocTypeId = 0;
            ViewBag.IsRecurring = IsRecurring;
            //int PurchaseId = 0;
            //int PurchaseId = 0;
            ViewBag.IsCopy = isCopy;
            ViewBag.CopyBill = 0;
            ViewBag.PaymentSignal = 0;
            ViewBag.ProductId = 0;
            var taxes = _mastersalestaxRepository.All().Where(f => f.ComId == ComId).ToList();
            var taxCalculation = new List<SelectListItem>
            {
                new SelectListItem { Text = "Exclusive of Tax", Value = "exclusive" },
                new SelectListItem { Text = "Inclusive of Tax", Value = "inclusive" },
                new SelectListItem { Text = "Out of scope of Tax", Value = "outscope" }
            };

            var taxCalculationList = new SelectList(taxCalculation, "Value", "Text");

            ViewData["AmountsAre"] = taxCalculationList;
            SelectList taxList = new SelectList(taxes, "Id", "Name");
            ViewData["TaxList"] = taxList;

            ViewBag.MasterPO = _masterPORepository.GetAllForDropDown();

            ViewBag.WarehouseIdMain = _warehouseRepository.All().Where(x => x.ComId == ComId)
                .Select(x => new SelectListItem
                {
                    Text = x.WhName,
                    Value = x.Id.ToString()
                });
            if (CopyBill == 1 && PurchaseId > 0)
            {
                ViewBag.ActionType = "Create";
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;
                }
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.CopyBill = CopyBill;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.BillId = BillId;
                ViewBag.DocTypeValue = Type;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                ViewBag.GroupList = tagsRepository.GetAllForDropDownForGroup();
                ViewData["CategoryList"] = _accountHeadRepository.GetCashBankHeadForDropDown();
                return View("AddBill", model: PurchaseId);

            }
            else if (SupplierId > 0 && PurchaseId > 0)
            {
                ViewBag.ActionType = "Create";
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;
                var DocType = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().DocType;
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;

                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;
                }
                ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.DocType = DocType;
                ViewBag.BillId = BillId;
                ViewBag.CopyBill = CopyBill;
                ViewBag.DocTypeValue = Type;
                ViewBag.PaymentSignal = 1;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                ViewBag.GroupList = tagsRepository.GetAllForDropDownForGroup();
                return View("AddBill", model: PurchaseId);

            }
            else
            {
                if (PurchaseId > 0 && CopyBill == 0 && Type != "Stock Adjustment")
                {
                    ViewBag.ActionType = "Edit";
                    ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                    ViewBag.MakePayment = 0;
                    //Console.WriteLine(ViewBag.SupplierId);
                    ViewBag.CopyBill = CopyBill;

                }
                else
                {
                    int TypesDocTypeId = _docTypeRepository.All().Where(x => x.DocTypeValue == "StockAdjustment").FirstOrDefault().Id;
                    var getPurchase = _purchaseItemRepository.All().Where(x => x.ProductId == ProductId &&
                    x.PurchaseModel.isPosted == false && x.PurchaseModel.IsSystem == true && x.PurchaseModel.DocTypeId == TypesDocTypeId).OrderBy(x => x.Id).LastOrDefault();
                    PurchaseId = getPurchase == null ? 0 : getPurchase.PurchaseId;

                    if (Type == "Stock Adjustment" && ProductId != 0 && PurchaseId == 0 && getPurchase == null)
                    {
                        ViewBag.ActionType = "Create";
                        ViewBag.ProductId = ProductId;
                    }
                    else
                    {
                        if (Type == "Stock Adjustment" && PurchaseId != 0)
                        {
                            ViewBag.ActionType = "Edit";
                            ViewBag.PurchaseId = PurchaseId;
                            ViewBag.ProductId = ProductId;
                        }
                        else
                        {
                            if (Type == "Opening Stock" && ProductId != 0)
                            {
                                ViewBag.ActionType = "Edit";
                                var purchaseId = _purchaseItemRepository.All().Where(x => x.ProductId == ProductId).FirstOrDefault().PurchaseId;
                                ViewBag.PurchaseId = purchaseId;
                                ViewBag.ProductId = ProductId;
                            }
                            else
                            {
                                ViewBag.ActionType = "Create";
                                ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
                            }
                        }

                    }

                }


                var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;

                var TypeWiseDoc = Type;
                Console.WriteLine(TypeWiseDoc);
                if (!string.IsNullOrEmpty(Type))
                {
                    DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                    ViewBag.DocTypeId = DocTypeId;

                    //            ViewBag.SalesType = Type;
                }
                var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
                ViewBag.CopyBill = CopyBill;
                ViewBag.BillId = BillId;
                ViewBag.PurchaseId = PurchaseId;
                ViewBag.DocTypeId = DocTypeId;
                ViewBag.DocTypeValue = Type;
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                ViewData["CategoryList"] = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.GroupList = tagsRepository.GetAllForDropDownForGroup();

                ViewBag.SupplierId = SupplierId;
                return View("AddBill", model: PurchaseId);

            }



        }

        [HttpGet]
        [OverridableAuthorize]

        public JsonResult InactiveBill(int BillId)
        {
            try
            {


                var model = _purchaseRepository.Find(BillId);

                if (model != null)
                {

                    //_accountHeadRepository.Delete(model);
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _purchaseRepository.Update(model, BillId);

                        var itemdata = _purchaseItemRepository.All().Where(x => x.PurchaseId == BillId).ToList();
                        _purchaseItemRepository.RemoveRange(itemdata);


                        if (model.IsRecurring == true)
                        {
                            var item = recurringDetailsRepository.All().Where(x => x.PurchaseId == BillId).FirstOrDefault();
                            recurringDetailsRepository.Delete(item);
                        }
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _purchaseRepository.Update(model, BillId);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                    //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Data Deleted Successfully", model.Id.ToString(), "Delete", model.AccName);

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }

        [AllowAnonymous]
        [HttpPost]
        public IActionResult TagsCreation(TagsModel model)
        {
            if (model.Id == 0)
            {
                tagsRepository.Insert(model);
                return Json(new { success = "1", message = "Data Create Successfully" });
            }
            else
            {
                tagsRepository.Update(model, model.Id);
                return Json(new { success = "1", message = "Data Update Successfully" });
            }

        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetTags()
        {
            var comid = HttpContext.Session.GetInt32("ComId");

            var data = tagsRepository.All().Where(x => x.ComId == comid).ToList();

            return Json(new { success = "1", data = data, message = "Data Loaded Successfully" });
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetTagsOrGroup(int Id)
        {
            var comid = HttpContext.Session.GetInt32("ComId");

            var data = tagsRepository.All().Where(x => x.ComId == comid && x.Id == Id).FirstOrDefault();

            return Json(new { success = "1", data = data, message = "Data Loaded Successfully" });
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetGroupList()
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var data = tagsRepository.All().Where(x => x.ComId == comid && x.TagsType == "G").ToList();

            return Json(new { success = "1", data = data, message = "Data Loaded Successfully" });
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetTagsList()
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var data = tagsRepository.All().Where(x => x.ComId == comid).ToList();

            return Json(new { success = "1", data = data, message = "Data Loaded Successfully" });
        }


        [HttpGet]
        public IActionResult AddBill(int PurchaseId = 0)
        {
            @ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            return View(model: PurchaseId);
        }





        //Paybills starts================
        [AllowAnonymous]
        [HttpGet]
        public IActionResult Paybills(string Type, int PurchaseId = 0, int CopyBill = 0, int SupplierId = 0)
        {
            var comid = HttpContext.Session.GetInt32("ComId");

            ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            ViewBag.DocTypeId = 0;
            //int PurchaseId = 0;
            //int PurchaseId = 0;
            ViewBag.IsCopy = 0;
            ViewBag.CopyBill = 0;
            ViewBag.PaymentSignal = 0;

            ViewBag.ActionType = "Create";
            ViewBag.SupplierId = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault()?.SupplierId;
            ViewBag.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
            var DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Purchase".ToLower()).FirstOrDefault().Id;

            var isMultiCurrency = _storeSettingRepository.All().Where(x => x.ComId == comid).FirstOrDefault().isMultiCurrency;

            ViewBag.isMultiCurrency = isMultiCurrency;

            var TypeWiseDoc = Type;
            Console.WriteLine(TypeWiseDoc);
            if (!string.IsNullOrEmpty(Type))
            {
                DocTypeId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == Type.ToLower() && x.DocFor == "Purchase").FirstOrDefault().Id;
                ViewBag.DocTypeId = DocTypeId;

                //            ViewBag.SalesType = Type;
            }
            var BillId = _docTypeRepository.All().Where(x => x.DocType.ToLower() == "Bill".ToLower()).FirstOrDefault().Id;
            ViewBag.CopyBill = CopyBill;
            ViewBag.BillId = BillId;
            ViewBag.PurchaseId = PurchaseId;
            ViewBag.DocTypeId = DocTypeId;
            ViewBag.DocTypeValue = Type;
            ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
            ViewData["CategoryList"] = _accountHeadRepository.GetCashBankHeadForDropDown();
            return View("PaybillsQB", model: PurchaseId);
        }


        [HttpGet]
        public IActionResult PaybillsQB(int PurchaseId = 0)
        {
            @ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            return View(model: PurchaseId);
        }
        //Paybills ends==================
        #region colors  region
        public IActionResult CreateColor()
        {
            return View();
        }
        public IActionResult OrderManagement(string Type)
        {
            ViewBag.ListType = Type ?? "orderManagement";
            return View();
        }
        [HttpPost]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public IActionResult AddUpdateColor([FromBody] ColorsModel model)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });


                if (model.Id > 0)
                {

                    _colorsRepository.Update(model, model.Id);
                    return Json(new { success = "1", error = false, message = "Data updated successfully", Id = model.Id });
                }
                else
                {
                    _colorsRepository.Insert(model);
                    return Json(new { success = "1", error = false, message = "Data saved successfully", Id = model.Id });
                }



            }
            catch (Exception ex)
            {

                return Json(new { error = true, message = ex.Message });
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult UploadColorsImage(IFormFile file, [FromForm] string ColorsId)
        {
            var Colorsinfo = _colorsRepository.Find(int.Parse(ColorsId));

            string filePath = configuration.GetValue<string>("MediaManager:VoucherFilePath");
            var folderPath = filePath + "/";
            var filename = string.Empty;

            if (file != null && file.Length > 0)
            {
                filename = Colorsinfo.Id + '_' + Colorsinfo.ComId + file.FileName;

                var path = Path.Combine(
                    Directory.GetCurrentDirectory(), "wwwroot/Content/ColorsImages",
                    filename);

                using (var stream = new FileStream(path, FileMode.Create))
                {
                    file.CopyTo(stream);
                }
                Colorsinfo.FilePath = $"/Content/ColorsImages/{filename}";

                string serverFolder = Path.Combine(_webHostEnvironment.WebRootPath, folderPath);
                serverFolder += Guid.NewGuid().ToString() + "_" + file.FileName;
                file.CopyToAsync(new FileStream(serverFolder, FileMode.Create));
                Colorsinfo.ColorsFilePath = serverFolder;
            }

            // Update the Colorsinfo object even when no file was selected
            Colorsinfo.FilePath = Colorsinfo.FilePath;
            Colorsinfo.ColorsFilePath = Colorsinfo.ColorsFilePath;
            _colorsRepository.Update(Colorsinfo, Colorsinfo.Id);

            return Json(new { status = "File upload Successfully." });
        }

        public IActionResult GetColors()
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var colors = _colorsRepository.All().Where(x => x.ComId == comid);
            return Json(colors);
        }
        [HttpGet]
        [AllowAnonymous]

        public JsonResult InactiveColors(int id)
        {
            try
            {
                var model = _colorsRepository.Find(id);

                if (model != null)
                {
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _colorsRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _colorsRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." });
                throw ex;
            }
        }

        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public JsonResult GetColorEdit(int ColorsId)
        {
            try
            {
                var colorsquery = _colorsRepository.All().Where(x => x.Id == ColorsId);

                var color = colorsquery
                  .Select(p => new
                  {
                      p.Id,
                      p.ComId,
                      p.ColorName,
                      p.ColorDesc,
                      p.ColorsFilePath
                  }).FirstOrDefault();


                return Json(new { Success = 1, data = colorsquery, ex = "Data Load Successfully" });
            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }
        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public JsonResult DeleteColors(int ColorsId)
        {
            try
            {


                var model = _colorsRepository.Find(ColorsId);

                if (model != null)
                {

                    _colorsRepository.Delete(model);

                    return Json(new { success = "1", msg = "Deleted Successfully" });
                }
                return Json(new { success = "0", msg = "No items found to delete." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }

        [AllowAnonymous]
        public JsonResult GetColorSearchList(int? CategoryId, bool IncludingInative, int pageNo = 1, decimal pageSize = 10, string searchquery = "", string dropdownSearch = "")
        {
            try
            {
                if (dropdownSearch == null)
                {
                    dropdownSearch = "";
                }
                var productlist = _colorsRepository.All().Where(x => x.IsDelete == false);
                if (searchquery?.Length > 1)
                {
                    var searchitem = JsonConvert.DeserializeObject<ColorListFilterData>(searchquery);

                    if (searchitem.pageIndex != null)
                    {
                        pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                        pageSize = searchitem.pageSize.GetValueOrDefault();


                    }
                    if (searchitem.ColorName != null)
                    {
                        productlist = productlist.Where(x => x.ColorName.ToLower().Contains(searchitem.ColorName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }
                    if (searchitem.ColorCode != null)
                    {
                        productlist = productlist.Where(x => x.ColorCode.ToLower().Contains(searchitem.ColorCode.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }
                }
                if ((dropdownSearch.Length > 1) || (dropdownSearch == ""))
                {
                    productlist = productlist.Where(x => x.ColorName.ToLower().Contains(dropdownSearch.ToLower()) || x.ColorCode.ToLower().Contains(dropdownSearch.ToLower()));
                }
                decimal TotalRecordCount = productlist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);
                decimal skip = (pageNo - 1) * pageSize;
                int total = productlist.Count();
                var query = from e in productlist
                            select new
                            {
                                id = e.Id,
                                text = e.ColorName,
                                e.ColorCode,
                                e.ColorDesc
                            };
                var abcd = query.OrderByDescending(x => x.id).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, ProductList = abcd, PageInfo = pageinfo });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion














        #region sizes  region
        [HttpPost]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public IActionResult AddUpdateSize([FromBody] SizesModel model)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });


                if (model.Id > 0)
                {
                    _sizesRepository.Update(model, model.Id);
                    return Json(new { success = "1", error = false, message = "Data updated successfully", Id = model.Id });
                }
                else
                {
                    _sizesRepository.Insert(model);
                    return Json(new { success = "1", error = false, message = "Data saved successfully", Id = model.Id });
                }



            }
            catch (Exception ex)
            {

                return Json(new { error = true, message = ex.Message });
            }
        }

        public IActionResult GetSizes()
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var colors = _sizesRepository.All().Where(x => x.ComId == comid);
            return Json(colors);
        }
        [HttpGet]
        [AllowAnonymous]

        public JsonResult InactiveSizes(int id)
        {
            try
            {
                var model = _sizesRepository.Find(id);

                if (model != null)
                {
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _sizesRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _sizesRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." });
                throw ex;
            }
        }

        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public JsonResult GetSizeEdit(int id)
        {
            try
            {
                var colorsquery = _sizesRepository.All().Where(x => x.Id == id);

                var color = colorsquery
                  .Select(p => new
                  {
                      p.Id,
                      p.ComId,
                      p.SizeName,
                      p.SizeCode,
                      p.SizeDesc
                  }).FirstOrDefault();


                return Json(new { Success = 1, data = colorsquery, ex = "Data Load Successfully" });
            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }
        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public JsonResult DeleteSizes(int id)
        {
            try
            {


                var model = _sizesRepository.Find(id);

                if (model != null)
                {

                    _sizesRepository.Delete(model);

                    return Json(new { success = "1", msg = "Deleted Successfully" });
                }
                return Json(new { success = "0", msg = "No items found to delete." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }
        [AllowAnonymous]
        public JsonResult GetSizeList(int page = 1, decimal size = 5, string searchquery = "")
        {
            try
            {
                var CurrentUserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                var purchaselist = _sizesRepository.All().Where(x => x.IsDelete == false);

                var taburesquest = JsonConvert.DeserializeObject<TabulatorRequest>(searchquery);

                foreach (var item in taburesquest.Filter)
                {
                    if (item.Field == "SizeName")
                    {
                        purchaselist = purchaselist.Where(x => x.SizeName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "SizeCode")
                    {
                        purchaselist = purchaselist.Where(x => x.SizeCode.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "SizeDesc")
                    {
                        purchaselist = purchaselist.Where(x => x.SizeDesc.ToLower().Contains(item.Value.ToLower()));
                    }
                }


                //if (searchquery?.Length > 1)
                //{
                //    purchaselist = purchaselist.Where(x =>
                //        x.SizeCode.ToLower().Contains(searchquery.ToLower()) ||
                //        x.SizeName.ToLower().Contains(searchquery.ToLower())
                //    );

                //}

                decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / taburesquest.Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                int skip = (taburesquest.Page - 1) * taburesquest.Size;

                var query = from e in purchaselist
                            select new
                            {
                                Id = e.Id,
                                e.ComId,
                                SizeName = e.SizeName,
                                SizeCode = e.SizeCode,
                                SizeDesc = e.SizeDesc
                            };
                var abcd = query.OrderByDescending(x => x.Id).Skip(skip).Take(taburesquest.Size).ToList();
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = taburesquest.Page;
                pageinfo.PageSize = taburesquest.Size;
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = taburesquest.Page, size = taburesquest.Size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [AllowAnonymous]
        public JsonResult GetSizeSearchList(int? CategoryId, bool IncludingInative, int pageNo = 1, decimal pageSize = 10, string searchquery = "", string dropdownSearch = "")
        {
            try
            {
                if (dropdownSearch == null)
                {
                    dropdownSearch = "";
                }
                var productlist = _sizesRepository.All().Where(x => x.IsDelete == false);
                if (searchquery?.Length > 1)
                {
                    var searchitem = JsonConvert.DeserializeObject<SizeListFilterData>(searchquery);

                    if (searchitem.pageIndex != null)
                    {
                        pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                        pageSize = searchitem.pageSize.GetValueOrDefault();


                    }
                    if (searchitem.SizeName != null)
                    {
                        productlist = productlist.Where(x => x.SizeName.ToLower().Contains(searchitem.SizeName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }
                    if (searchitem.SizeCode != null)
                    {
                        productlist = productlist.Where(x => x.SizeCode.ToLower().Contains(searchitem.SizeCode.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }
                }
                if ((dropdownSearch.Length > 0) || (dropdownSearch == ""))
                {
                    productlist = productlist.Where(x => x.SizeName.ToLower().Contains(dropdownSearch.ToLower()) || x.SizeCode.ToLower().Contains(dropdownSearch.ToLower()));
                }
                decimal TotalRecordCount = productlist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);
                decimal skip = (pageNo - 1) * pageSize;
                int total = productlist.Count();
                var query = from e in productlist
                            select new
                            {
                                id = e.Id,
                                text = e.SizeName,
                                e.SizeCode,
                                e.SizeDesc
                            };
                var abcd = query.OrderByDescending(x => x.id).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, ProductList = abcd, PageInfo = pageinfo });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion












        #region category  region
        [HttpPost]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public IActionResult AddUpdateCategory([FromBody] BOMAllocationCategoryModel model)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });


                if (ModelState.IsValid)
                {
                    if (model.Id > 0)
                    {

                        _bomCategoryRepository.Update(model, model.Id);
                        return Json(new { success = "1", error = false, message = "Data updated successfully", Id = model.Id });
                    }
                    else
                    {
                        _bomCategoryRepository.Insert(model);
                        return Json(new { success = "1", error = false, message = "Data saved successfully", Id = model.Id });
                    }
                }
                else
                {

                    return Json(new { error = true, message = "failed to save Data" });
                }



            }
            catch (Exception ex)
            {

                return Json(new { error = true, message = ex.Message });
            }
        }

        public IActionResult GetCategories()
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var colors = _bomCategoryRepository.All().Where(x => x.ComId == comid);
            return Json(colors);
        }
        [HttpGet]
        [AllowAnonymous]

        public JsonResult InactiveCategories(int id)
        {
            try
            {
                var model = _bomCategoryRepository.Find(id);

                if (model != null)
                {
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _bomCategoryRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _bomCategoryRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." });
                throw ex;
            }
        }

        [AllowAnonymous]
        public IActionResult categoryTypeDropdown()
        {
            var dropdown = categoryTypeRepository.GetAllForDropDown();
            return Json(dropdown);
        }

        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public JsonResult GetCategoryEdit(int id)
        {
            try
            {
                var colorsquery = _bomCategoryRepository.All().Where(x => x.Id == id);

                var color = colorsquery
                  .Select(p => new
                  {
                      p.Id,
                      p.ComId,
                      p.Name,
                      p.Code,
                      p.ShortName,
                      p.CategoryTypeId
                  }).FirstOrDefault();


                return Json(new { Success = 1, data = colorsquery, ex = "Data Load Successfully" });
            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }
        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public JsonResult DeleteCategories(int id)
        {
            try
            {


                var model = _bomCategoryRepository.Find(id);

                if (model != null)
                {

                    _bomCategoryRepository.Delete(model);

                    return Json(new { success = "1", msg = "Deleted Successfully" });
                }
                return Json(new { success = "0", msg = "No items found to delete." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }
        [AllowAnonymous]
        public JsonResult GetCategoryList(int page = 1, decimal size = 5, string searchquery = "")
        {
            try
            {
                var CurrentUserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                var purchaselist = _bomCategoryRepository.All().Where(x => x.IsDelete == false);

                var taburesquest = JsonConvert.DeserializeObject<TabulatorRequest>(searchquery);

                foreach (var item in taburesquest.Filter)
                {
                    if (item.Field == "catname")
                    {
                        purchaselist = purchaselist.Where(x => x.Name.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "shortname")
                    {
                        purchaselist = purchaselist.Where(x => x.ShortName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "catcode")
                    {
                        purchaselist = purchaselist.Where(x => x.Code.ToLower().Contains(item.Value.ToLower()));
                    }
                }

                //if (searchquery?.Length > 1)
                //{
                //    purchaselist = purchaselist.Where(x =>
                //        x.Name.ToLower().Contains(searchquery.ToLower()) ||
                //        x.Code.ToLower().Contains(searchquery.ToLower())
                //    );

                //}
                decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / taburesquest.Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                int skip = (taburesquest.Page - 1) * taburesquest.Size;

                var query = from e in purchaselist
                            select new
                            {
                                Id = e.Id,
                                e.ComId,
                                catname = e.Name,
                                shortname = e.ShortName,
                                catcode = e.Code
                            };
                var abcd = query.OrderByDescending(x => x.Id).Skip(skip).Take(taburesquest.Size).ToList();
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = taburesquest.Page;
                pageinfo.PageSize = taburesquest.Size;
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = taburesquest.Page, size = taburesquest.Size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion














        #region style region
        [OverridableAuthorize]
        public IActionResult CreateStyle(int StyleId = 0)
        {

            ViewBag.ActionType = "Create";
            ViewBag.StyleId = StyleId;
            return View();

        }
        [OverridableAuthorize]
        public IActionResult UpdateStyle(int StyleId = 0)
        {

            ViewBag.ActionType = "Edit";
            ViewBag.StyleId = StyleId;
            return View("CreateStyle");

        }
        [HttpPost]
        [AllowAnonymous]
        public IActionResult AddStyle([FromBody] StyleModel model)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });
                if (model.Id > 0)
                {

                    //model.StyleNo = _styleRepository.All().Where(x => x.Id == model.Id).FirstOrDefault().StyleNo;

                    _styleRepository.Update(model, model.Id);


                    var previouscolor = _colorChildRepository.All().Where(x => x.StyleId == model.Id).ToList();
                    var tmp = previouscolor.Where(x => !model.ColorsChilds.Any(z => x.Id == z.Id)).ToList();
                    _colorChildRepository.RemoveRange(tmp);


                    //var itemfinalist = model.ColorsChilds.Where(x => x.Amount > 0).ToList();
                    //model.ColorsChilds = itemfinalist;

                    model.ColorsChilds = model.ColorsChilds.Where(x => x.ColorId != 0).GroupBy(x => x.ColorId).Select(x => x.First()).ToList();



                    foreach (ColorsChildModel item in model.ColorsChilds)
                    {
                        if (item.Id > 0 && item.ColorId > 0)
                        {
                            if (item.IsDelete)
                            {
                                int z = item.Id;
                                _colorChildRepository.Delete(item);
                            }
                            else
                            {
                                _colorChildRepository.Update(item, item.Id);
                            }
                        }
                        else if (!item.IsDelete)
                        {
                            _colorChildRepository.Insert(item);
                        }
                    }



                    var previoussize = _sizeChildRepository.All().Where(x => x.StyleId == model.Id).ToList();
                    var tmpsize = previoussize.Where(x => !model.SizesChilds.Any(z => x.Id == z.Id)).ToList();
                    _sizeChildRepository.RemoveRange(tmpsize);


                    //var itemfinalist = model.ColorsChilds.Where(x => x.Amount > 0).ToList();
                    //model.ColorsChilds = itemfinalist;

                    foreach (SizesChildModel item in model.SizesChilds)
                    {
                        if (item.Id > 0 && item.SizeId > 0)
                        {
                            if (item.IsDelete)
                            {
                                int z = item.Id;
                                _sizeChildRepository.Delete(item);
                            }
                            else
                            {
                                _sizeChildRepository.Update(item, item.Id);
                            }
                        }
                        else if (!item.IsDelete)
                        {
                            _sizeChildRepository.Insert(item);
                        }
                    }


                    return Json(new { error = false, message = "Data updated successfully", Id = model.Id });
                }
                else
                {
                    var colorsToRemove = model.ColorsChilds.Where(x => x.IsDelete == true).ToList();

                    foreach (var item in colorsToRemove)
                    {
                        model.ColorsChilds.Remove(item);
                    }

                    foreach (var item in model.ColorsChilds.Where(x => x.IsDelete == false))
                    {

                        item.CreateDate = DateTime.Now;
                        item.UpdateDate = DateTime.Now;
                        item.ComId = int.Parse(ComId.ToString());
                        item.LuserId = int.Parse(UserId.ToString());

                    }
                    var sizeToRemove = model.SizesChilds.Where(x => x.IsDelete == true).ToList();

                    foreach (var item in sizeToRemove)
                    {
                        model.SizesChilds.Remove(item);
                    }

                    foreach (var item in model.SizesChilds.Where(x => x.IsDelete == false))
                    {

                        item.CreateDate = DateTime.Now;
                        item.UpdateDate = DateTime.Now;
                        item.ComId = int.Parse(ComId.ToString());
                        item.LuserId = int.Parse(UserId.ToString());

                    }

                    //var itemfinalist = model.ColorsChilds.Where(x => x.StyleId != 0).ToList();
                    //model.ColorsChilds = itemfinalist;
                    _styleRepository.Insert(model);

                    return Json(new { error = false, message = "Data saved successfully", Id = model.Id });
                }



            }
            catch (Exception ex)
            {

                return Json(new { error = true, message = ex.Message });
            }
        }







        [AllowAnonymous]
        public JsonResult GetStyleList(int page = 1, decimal size = 5, string searchquery = "")
        {
            try
            {
                var CurrentUserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                var purchaselist = _styleRepository.All().Where(x => x.IsDelete == false);

                var taburesquest = JsonConvert.DeserializeObject<TabulatorRequest>(searchquery);

                foreach (var item in taburesquest.Filter)
                {
                    if (item.Field == "StyleNo")
                    {
                        purchaselist = purchaselist.Where(x => x.StyleNo.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "UnitPrice")
                    {
                        purchaselist = purchaselist.Where(x => x.UnitPrice.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "HSCode")
                    {
                        purchaselist = purchaselist.Where(x => x.HSCode.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "GoodsDescription")
                    {
                        purchaselist = purchaselist.Where(x => x.GoodsDescription.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "Name")
                    {
                        purchaselist = purchaselist.Where(x => x.Buyers.Name.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "StyleDate")
                    {
                        purchaselist = purchaselist.Where(x => x.StyleDate == DateTime.Parse(item.Value));
                    }
                }

                //if (searchquery?.Length > 1)
                //{
                //    purchaselist = purchaselist.Where(x =>
                //        x.StyleNo.ToLower().Contains(searchquery.ToLower()) ||
                //        x.Buyers.Name.ToLower().Contains(searchquery.ToLower())
                //    );

                //}
                decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / taburesquest.Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                int skip = (taburesquest.Page - 1) * taburesquest.Size;

                var query = from e in purchaselist.Include(x => x.ColorsChilds)
                            .Include(x => x.SizesChilds)
                            select new
                            {
                                Id = e.Id,
                                e.ComId,
                                e.StyleNo,
                                e.UnitPrice,
                                e.HSCode,
                                e.GoodsDescription,
                                e.BuyerId,
                                e.Buyers.Name,
                                e.StyleDate
                            };
                var abcd = query.OrderByDescending(x => x.Id).Skip(skip).Take(taburesquest.Size).ToList();
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = taburesquest.Page;
                pageinfo.PageSize = taburesquest.Size;
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = taburesquest.Page, size = taburesquest.Size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }




        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]

        public JsonResult DeleteStyle(int id)
        {
            try
            {
                var model = _styleRepository.Find(id);

                if (model != null)
                {
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _styleRepository.Update(model, id);
                        var color = _colorChildRepository.All().Where(x => x.StyleId == id).FirstOrDefault();
                        _colorChildRepository.Delete(color);
                        var size = _sizeChildRepository.All().Where(x => x.StyleId == id).FirstOrDefault();
                        _sizeChildRepository.Delete(size);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _styleRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }



        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetStyle(int id, int isCopy = 0, int CopyBill = 0, int ProductId = 0)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                var queryname = "getStyleChildData";
                var viewquery = $"Exec {queryname} '{ComId}', '{id}'";
                Console.WriteLine(viewquery);
                SqlParameter[] parameters = new SqlParameter[2];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@StyleId", id);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }


        //[HttpGet]
        //[AllowAnonymous]
        //public JsonResult GetStyle(int id, int isCopy = 0, int CopyBill = 0, int ProductId = 0)
        //{
        //    try
        //    {
        //        var purchasequery = _styleRepository.All().Where(x => x.Id == id);
        //        var purchase = purchasequery
        //          .Include(x => x.ColorsChilds).ThenInclude(x=>x.Colors)
        //          .Include(x => x.SizesChilds).ThenInclude(x=>x.Sizes)
        //          .Select(p => new
        //          {
        //              Id = p.Id,
        //              p.StyleNo,
        //              p.BuyerId,
        //              p.Buyers.Name,
        //              ColorsChild = p.ColorsChilds.Where(x => x.IsDelete == false).Select(x =>
        //                 new
        //                 {
        //                     Id = x.Id,
        //                     x.ColorId,
        //                     x.ComId,
        //                     x.Colors.ColorName,
        //                     x.StyleId,
        //                 }).ToList(),

        //              SizesChild = p.SizesChilds.Where(x => x.IsDelete == false).Select(x =>
        //             new
        //             {
        //                 Id = x.Id,
        //                 x.SizeId,
        //                 x.ComId,
        //                 x.Sizes.SizeName,
        //                 x.StyleId
        //             }).ToList(),
        //          }).FirstOrDefault();
        //        return Json(new { Success = 1, purchase = purchase, ex = "Data Load Successfully" });
        //    }
        //    catch (Exception e)
        //    {
        //        return Json(e.ToString());
        //    }

        //}


        public class ColorListFilterData
        {
            public int ColorId { get; set; }
            public string? ColorName { get; set; }

            public string? ColorCode { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }
        public class SizeListFilterData
        {
            public int SizeId { get; set; }
            public string? SizeName { get; set; }

            public string? SizeCode { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }



        [AllowAnonymous]
        public JsonResult GetColorList(int page = 1, decimal size = 5, string searchquery = "")
        {
            try
            {
                var CurrentUserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                var purchaselist = _colorsRepository.All().Where(x => x.IsDelete == false);

                var taburesquest = JsonConvert.DeserializeObject<TabulatorRequest>(searchquery);

                foreach (var item in taburesquest.Filter)
                {
                    if (item.Field == "ColorName")
                    {
                        purchaselist = purchaselist.Where(x => x.ColorName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "ColorCode")
                    {
                        purchaselist = purchaselist.Where(x => x.ColorCode.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "ColorDesc")
                    {
                        purchaselist = purchaselist.Where(x => x.ColorDesc.ToLower().Contains(item.Value.ToLower()));
                    }
                }


                //if (searchquery?.Length > 1)
                //{
                //    purchaselist = purchaselist.Where(x =>
                //        x.ColorCode.ToLower().Contains(searchquery.ToLower()) ||
                //        x.ColorName.ToLower().Contains(searchquery.ToLower())
                //    );

                //}
                decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / taburesquest.Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                int skip = (taburesquest.Page - 1) * taburesquest.Size;

                var query = from e in purchaselist
                            select new
                            {
                                Id = e.Id,
                                e.ComId,
                                e.ColorName,
                                e.ColorCode,
                                e.ColorDesc
                            };
                var abcd = query.OrderByDescending(x => x.Id).Skip(skip).Take(taburesquest.Size).ToList();
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = taburesquest.Page;
                pageinfo.PageSize = taburesquest.Size;
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = taburesquest.Page, size = taburesquest.Size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion


        #region MPO region
        [OverridableAuthorize]
        public IActionResult CreateMasterpo(int MPoId = 0)
        {
            ViewBag.Supplier = _supplierRepository.GetAllForDropDown();

            ViewBag.ActionType = "Create";
            ViewBag.MPoId = MPoId;
            return View();

        }
        [OverridableAuthorize]
        public IActionResult UpdateMasterpo(int MPoId = 0)
        {
            ViewBag.Supplier = _supplierRepository.GetAllForDropDown();

            ViewBag.ActionType = "Edit";
            ViewBag.MPoId = MPoId;
            return View("CreateMasterpo");

        }
        public class BuyerPOFilterData
        {
            public int BuyerPOId { get; set; }
            public string? BuyerPO { get; set; }

            public string? TotalQuantity { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }
        [AllowAnonymous]
        public JsonResult GetBuyerPoSearchList(int? CategoryId, bool IncludingInative, int pageNo = 1, decimal pageSize = 10, string searchquery = "", string dropdownSearch = "")
        {
            try
            {
                if (dropdownSearch == null)
                {
                    dropdownSearch = "";
                }
                var productlist = _buyerPOmasterRepository.All().Where(x => x.IsDelete == false);
                if (searchquery?.Length > 1)
                {
                    var searchitem = JsonConvert.DeserializeObject<BuyerPOFilterData>(searchquery);

                    if (searchitem.pageIndex != null)
                    {
                        pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                        pageSize = searchitem.pageSize.GetValueOrDefault();


                    }
                    if (searchitem.BuyerPO != null)
                    {
                        productlist = productlist.Where(x => x.BuyerPO.ToLower().Contains(searchitem.BuyerPO.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }
                    //if (searchitem.ColorCode != null)
                    //{
                    //    productlist = productlist.Where(x => x.BuyerPO.ToLower().Contains(searchitem.ColorCode.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    //}
                }
                if ((dropdownSearch.Length > 1) || (dropdownSearch == ""))
                {
                    productlist = productlist.Where(x => x.BuyerPO.ToLower().Contains(dropdownSearch.ToLower())); // || x.ColorCode.ToLower().Contains(dropdownSearch.ToLower())
                }
                decimal TotalRecordCount = productlist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);
                decimal skip = (pageNo - 1) * pageSize;
                int total = productlist.Count();
                var query = from e in productlist
                            select new
                            {
                                id = e.Id,
                                text = e.BuyerPO,
                                e.TotalQuantity
                            };
                var abcd = query.OrderByDescending(x => x.id).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, ProductList = abcd, PageInfo = pageinfo });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }








        [HttpPost]
        [AllowAnonymous]
        public IActionResult AddMasterPO([FromBody] MasterPOModel model)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });
                if (model.Id > 0)
                {

                    //model.StyleNo = _styleRepository.All().Where(x => x.Id == model.Id).FirstOrDefault().StyleNo;

                    _masterPORepository.Update(model, model.Id);


                    var previousbuyerpo = _masterPODetailsRepository.All().Where(x => x.MasterPOId == model.Id).ToList();
                    var tmp = previousbuyerpo.Where(x => !model.MasterPODetails.Any(z => x.Id == z.Id)).ToList();
                    _masterPODetailsRepository.RemoveRange(tmp);


                    //var itemfinalist = model.ColorsChilds.Where(x => x.Amount > 0).ToList();
                    //model.ColorsChilds = itemfinalist;

                    model.MasterPODetails = model.MasterPODetails.Where(x => x.BuyerPOId != 0).GroupBy(x => x.BuyerPOId).Select(x => x.First()).ToList();



                    foreach (MasterPODetailsModel item in model.MasterPODetails)
                    {
                        if (item.Id > 0 && item.BuyerPOId > 0)
                        {
                            if (item.IsDelete)
                            {
                                int z = item.Id;
                                _masterPODetailsRepository.Delete(item);
                            }
                            else
                            {
                                _masterPODetailsRepository.Update(item, item.Id);
                            }
                        }
                        else if (!item.IsDelete)
                        {
                            _masterPODetailsRepository.Insert(item);
                        }
                    }


                    return Json(new { error = false, message = "Data updated successfully", Id = model.Id });
                }
                else
                {
                    var buyersPoToRemove = model.MasterPODetails.Where(x => x.IsDelete == true).ToList();

                    foreach (var item in buyersPoToRemove)
                    {
                        model.MasterPODetails.Remove(item);
                    }

                    foreach (var item in model.MasterPODetails.Where(x => x.IsDelete == false))
                    {

                        item.CreateDate = DateTime.Now;
                        item.UpdateDate = DateTime.Now;
                        item.ComId = int.Parse(ComId.ToString());
                        item.LuserId = int.Parse(UserId.ToString());

                    }

                    //var itemfinalist = model.ColorsChilds.Where(x => x.StyleId != 0).ToList();
                    //model.ColorsChilds = itemfinalist;
                    _masterPORepository.Insert(model);

                    return Json(new { error = false, message = "Data saved successfully", Id = model.Id });
                }



            }
            catch (Exception ex)
            {

                return Json(new { error = true, message = ex.Message });
            }
        }



        [AllowAnonymous]
        public JsonResult GetMPOList(int page = 1, decimal size = 5, string searchquery = "")
        {
            try
            {
                var CurrentUserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                var purchaselist = _masterPORepository.All().Where(x => x.IsDelete == false);

                var taburesquest = JsonConvert.DeserializeObject<TabulatorRequest>(searchquery);

                foreach (var item in taburesquest.Filter)
                {
                    if (item.Field == "MasterPONo")
                    {
                        purchaselist = purchaselist.Where(x => x.MasterPONo.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "MasterPODate")
                    {
                        purchaselist = purchaselist.Where(x => x.MasterPODate == DateTime.Parse(item.Value));
                    }

                }

                //if (searchquery?.Length > 1)
                //{
                //    purchaselist = purchaselist.Where(x =>
                //        x.MasterPONo.ToLower().Contains(searchquery.ToLower())
                //    );

                //}
                decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / taburesquest.Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                int skip = (taburesquest.Page - 1) * taburesquest.Size;

                var query = from e in purchaselist.Include(x => x.MasterPODetails)
                            select new
                            {
                                Id = e.Id,
                                e.ComId,
                                e.MasterPONo,
                                e.MasterPODate
                            };
                var abcd = query.OrderByDescending(x => x.Id).Skip(skip).Take(taburesquest.Size).ToList();
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = taburesquest.Page;
                pageinfo.PageSize = taburesquest.Size;
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = taburesquest.Page, size = taburesquest.Size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public JsonResult DeleteMPO(int id)
        {
            try
            {
                var model = _masterPORepository.Find(id);

                if (model != null)
                {
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _masterPORepository.Update(model, id);
                        var color = _masterPODetailsRepository.All().Where(x => x.MasterPOId == id).FirstOrDefault();
                        _masterPODetailsRepository.Delete(color);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _masterPORepository.Update(model, id);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }












        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetMPO(int id, int isCopy = 0, int CopyBill = 0, int ProductId = 0)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                var queryname = "getMPOChildData";
                var viewquery = $"Exec {queryname} '{ComId}', '{id}'";
                Console.WriteLine(viewquery);
                SqlParameter[] parameters = new SqlParameter[2];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@MPOID", id);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }





        #endregion








        [AllowAnonymous]
        [HttpPost]
        // public ActionResult AddAccountHeadByJson(AccountHeadModel model)
        public IActionResult AddAccountHeadABC(AccountHeadModel model)
        {
            return Json(new { success = true });

        }


        //public class MyDataModel
        //{
        //    public string? Property1 { get; set; }
        //    public int Property2 { get; set; }
        //    // other properties as needed
        //}

        //[AllowAnonymous]
        //[HttpPost]

        //public IActionResult HandleAjaxPost(Acc_VoucherMainModel model)
        //{
        //    //MyDataModel abc = JsonConvert.DeserializeObject<MyDataModel>(model);

        //    // Perform some logic with the model data

        //    return Json(new { success = true });
        //}


        //[HttpPost]
        //[AllowAnonymous]
        //public IActionResult UploadImage(IFormFile file, [FromForm] string VoucherIdabc)
        //{
        //    var voucherinfo = _accVoucherRepository.Find(int.Parse(VoucherIdabc));

        //    string filePath = configuration.GetValue<string>("MediaManager:VoucherFilePath");
        //    var folderPath = filePath + "/";
        //    var filename = string.Empty;

        //    if (file != null && file.Length > 0)
        //    {
        //        filename = voucherinfo.Id + '_' + voucherinfo.ComId + file.FileName;

        //        var path = Path.Combine(
        //            Directory.GetCurrentDirectory(), "wwwroot/Content/VoucherImages",
        //            filename);

        //        using (var stream = new FileStream(path, FileMode.Create))
        //        {
        //            file.CopyTo(stream);
        //        }
        //        voucherinfo.FilePath = $"/Content/VoucherImages/{filename}";

        //        string serverFolder = Path.Combine(_webHostEnvironment.WebRootPath, folderPath);
        //        serverFolder += Guid.NewGuid().ToString() + "_" + file.FileName;
        //        file.CopyToAsync(new FileStream(serverFolder, FileMode.Create));
        //        voucherinfo.VoucherFilePath = serverFolder;
        //    }

        //    // Update the voucherinfo object even when no file was selected
        //    voucherinfo.FilePath = voucherinfo.FilePath;
        //    voucherinfo.VoucherFilePath = voucherinfo.VoucherFilePath;
        //    _accVoucherRepository.Update(voucherinfo, voucherinfo.Id);

        //    return Json(new { status = "File upload Successfully." });
        //}


        [HttpPost]
        [AllowAnonymous]
        public IActionResult UploadImage(List<IFormFile> files, [FromForm] string VoucherIdabc)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            var voucherinfo = _accVoucherRepository.Find(int.Parse(VoucherIdabc));

            string filePath = configuration.GetValue<string>("MediaManager:VoucherFilePath");
            var folderPath = Path.Combine(_webHostEnvironment.WebRootPath, filePath);
            Directory.CreateDirectory(folderPath); // Ensure the directory exists

            if (files != null && files.Count > 0)
            {
                foreach (var file in files)
                {
                    if (file.Length > 0)
                    {
                        var filename = voucherinfo.Id.ToString() + '_' + voucherinfo.ComId.ToString() + "_" + file.FileName;
                        //var path = Path.Combine(folderPath, filename);
                        var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Content/VoucherImages", filename);

                        using (var stream = new FileStream(path, FileMode.Create))
                        {
                            file.CopyTo(stream);
                        }
                        // Update the invoice_info with each file uploaded
                        voucherinfo.FilePath += $"/Content/VoucherImages/{filename};";
                    }
                }
            }
            else
            {
                // Handle the case where no file was selected if necessary
                voucherinfo.FilePath = voucherinfo.FilePath;
            }

            _accVoucherRepository.Update(voucherinfo, voucherinfo.Id);

            return Json(new { status = "Files uploaded successfully." });
        }

        [AllowAnonymous]
        [HttpPost]
        public IActionResult DeleteFileName(string fileName)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");

                string[] parts = fileName.Split('/');
                string lastPart = parts[parts.Length - 1];
                string[] subparts = lastPart.Split('_');
                var firstPart = int.Parse(subparts[0]);

                var model = _accVoucherRepository.Find(firstPart);


                model.FilePath = model.FilePath.Replace(fileName + ";", "");


                // Update model in repository if needed
                _accVoucherRepository.Update(model, model.Id);

                return Json(new { Success = 1, ex = "Data " });
            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }

        public ActionResult HelloWorld()
        {
            return View();
        }
        //[HttpPost]
        //public JsonResult GeneratePdf()
        //{
        //    var pdf = new ActionAsPdf("HelloWorld");
        //    var pdfBytes = pdf.BuildPdf(context,);
        //    Session["PdfBytes"] = pdfBytes;
        //    return Json(new { success = true });
        //}
        //public ActionResult DownloadPdf()
        //{
        //    var pdfBytes = (byte[])Session["PdfBytes"];
        //    Session.Remove("PdfBytes");
        //    return File(pdfBytes, "application/pdf", "HelloWorld.pdf");
        //}

        [HttpPost]

        public IActionResult AddVoucher([FromBody] Acc_VoucherMainModel model)
        //public IActionResult AddVoucher(Acc_VoucherMainModel acc_voucherMain) /, List<HR_Loan_Data_HouseBuilding> details/
        //public IActionResult AddVoucher(Acc_VoucherMainModel acc_voucherMain)
        {
            try
            {
                var acc_voucherMain = model;

                var errors = ModelState.Where(x => x.Value.Errors.Any())
               .Select(x => new { x.Key, x.Value.Errors });
                Console.WriteLine(errors);
                if (ModelState.IsValid)
                {
                    var text = "";

                    var comid = HttpContext.Session.GetInt32("ComId");
                    var userid = HttpContext.Session.GetInt32("UserId");


                    var lockCheck = _processLockRepository.All().Where(p => p.LockType.Contains("Account Lock") && p.DtDate.Date <= acc_voucherMain.VoucherDate.Date && p.DtToDate.Value.Date >= acc_voucherMain.VoucherDate.Date
                        && p.IsLock == true).FirstOrDefault();

                    if (lockCheck != null)
                    {
                        return Json(new { Success = 0, ex = "Account Lock this date!!!" });
                    }


                    var transactioncompany = _companyRepository.All()//.Include(x => x.Currency)
                        .Where(c => c.Id == comid).FirstOrDefault();

                    var transactionstoresettings = _storeSettingRepository.All().Include(x => x.Currency)
                        .Where(c => c.ComId == comid).FirstOrDefault();


                    if (transactionstoresettings.isMultiDebitCredit == false)
                    {
                        var debitcount = acc_voucherMain.VoucherSubs.Where(x => x.TKDebit > 0).Count();
                        var creditcount = acc_voucherMain.VoucherSubs.Where(x => x.TKCredit > 0).Count();

                        if (debitcount > 1 && creditcount > 1)
                        {
                            return Json(new { Success = 0, ex = "Multiple Debit Credit is Not possible . for more details contact with System Developer." });

                        }

                    }


                    acc_voucherMain.VAmount = double.Parse(clsProc.GTRFormatCurrencyBDT(acc_voucherMain.VAmount.ToString()));
                    acc_voucherMain.vAmountInWords = clsProc.GTRInwordsFormatBD(acc_voucherMain.VAmount.ToString(), "", "");
                    //acc_voucherMain.DateUpdated = DateTime.Now.Date;
                    //acc_voucherMain.useridUpdate = userid;


                    if (acc_voucherMain.VoucherTypeId == 3)
                    {
                        var abcsum = 0.00;
                        var bankacccode = "";
                        foreach (var item in acc_voucherMain.VoucherSubs)
                        {

                            bankacccode = _accountHeadRepository.All().Where(p => p.ComId == comid && p.AccType == "L" && p.IsBankItem == true && p.Id == item.AccId).Select(x => x.AccCode).FirstOrDefault();
                            if (bankacccode != null)
                            {
                                if (bankacccode.Contains("1-1-11"))
                                {
                                    abcsum = +item.TKCredit;
                                }
                            }

                        }

                        //acc_voucherMain.VoucherSubs = 
                        //var inwordsfigure = acc_voucherMain.VoucherSubs.Where(x => x.AccountHeadModel.AccCode.Contains("1-1-11")).Sum(x => x.TKCredit);
                        //acc_voucherMain.vAmountInWords = clsProc.GTRInwordsFormatBD(abcsum.ToString(), "", "");
                    }



                    //string voucernocreatestylemain = _companyRepository.All().Include(x => x.VoucherNoCreatedTypes).Where(c => c.Id == comid).Select(c => c.VoucherNoCreatedTypes.VoucherNoCreatedTypeName).FirstOrDefault();
                    string voucernocreatestylemain = _storeSettingRepository.All().Include(x => x.VoucherNoCreatedTypes).Where(c => c.ComId == comid).Select(c => c.VoucherNoCreatedTypes.VoucherNoCreatedTypeName).FirstOrDefault();


                    if (voucernocreatestylemain == "Monthly")
                    {
                        acc_voucherMain.VoucherInputDate = acc_voucherMain.VoucherDate;

                    }
                    else if (voucernocreatestylemain == "Yearly")
                    {
                        acc_voucherMain.VoucherInputDate = acc_voucherMain.VoucherDate; //DateTime.Now.Date;
                    }
                    else
                    {
                        acc_voucherMain.VoucherInputDate = acc_voucherMain.VoucherDate; ;// DateTime.Now.Date;
                    }



                    {
                        //var monthid = acc_voucherMain.VoucherDate.Month;// && x.dtFrom.ToString() == monthid.ToString()

                        //var monthlist = 

                        DateTime date = acc_voucherMain.VoucherInputDate;
                        var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
                        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);


                        //List<Acc_FiscalMonthModel> listactivefiscalmonth = _accFiscalMonthRepository.All().Where(x => x.ComId == comid && x.FYId == voucherfiscalyear && x.MonthName == ).ToList();
                        //var activefiscalmonth = listactivefiscalmonth.Where(x => Convert.ToDateTime(x.dtFrom).Month == monthid).FirstOrDefault();
                        var activefiscalmonth = _accFiscalMonthRepository.All().Where(x => x.ComId == comid && x.OpeningdtFrom >= firstDayOfMonth && x.ClosingdtTo <= lastDayOfMonth).FirstOrDefault();// && x.dtFrom.ToString() == monthid.ToString()
                                                                                                                                                                                                       //listactivefiscalmonth.Where(x => Convert.ToDateTime(x.dtFrom).Month == monthid).FirstOrDefault();

                        if (activefiscalmonth == null)
                        {

                            return Json(new { Success = 0, ex = "No Active Fiscal Month Found" });
                        }
                        var activefiscalyear = _accFiscalYearRepository.All().Where(x => x.Id == activefiscalmonth.FYId).FirstOrDefault();
                        if (activefiscalyear == null)
                        {
                            return Json(new { Success = 0, ex = "No Active Fiscal Year Found" });
                        }



                        // If sales main has VoucherID then we can understand we have existing sales Information
                        // So we need to Perform Update Operation

                        // Perform Update
                        if (acc_voucherMain.Id > 0)
                        {

                            ViewBag.Title = "Edit";

                            //var CurrentProductSerial = db.ProductSerial.Where(p => p.VoucherId == acc_voucherMain.Id);
                            var CurrentVoucherSub = _accVoucherSubRepository.All().Include(x => x.VoucherSubChecnoes).Include(x => x.VoucherSubSections).Where(p => p.VoucherId == acc_voucherMain.Id).ToList();
                            var CurrentVoucherSubcheckno = _accVoucherSubCheckNoRepository.All().Where(p => p.VoucherId == acc_voucherMain.Id).ToList();
                            var CurrentVoucherTag = _accVoucherTagsRepository.All().Where(p => p.VoucherId == acc_voucherMain.Id).ToList();

                            //var CurrentVoucherSubSection = _accVoucherSubRepository.All()ections.Where(p => p.VoucherId == acc_voucherMain.Id);
                            //var CurrentVoucherCheck = db.Acc_VoucherSubChecnos.Where(p => p.VoucherId == acc_voucherMain.Id);
                            acc_voucherMain.LuserIdUpdate = userid;


                            _accVoucherSubCheckNoRepository.RemoveRange(CurrentVoucherSubcheckno);
                            _accVoucherSubRepository.RemoveRange(CurrentVoucherSub);
                            _accVoucherTagsRepository.RemoveRange(CurrentVoucherTag);



                            foreach (Acc_VoucherSubModel ss in acc_voucherMain.VoucherSubs)
                            {
                                //if (ss.VoucherSubId > 0)
                                //{
                                //db.Entry(ss).State = EntityState.Modified;
                                ss.Id = 0;
                                if (ss.Id == 0)
                                {
                                    _accVoucherSubRepository.Insert(ss);
                                }


                            }



                            for (int i = 0; i < acc_voucherMain.VoucherTags.Length; i++)
                            {
                                Acc_VoucherTagsModel vouchertags = new Acc_VoucherTagsModel { tag = (acc_voucherMain.VoucherTags[i]), VoucherId = acc_voucherMain.Id };
                                vouchertags.Id = 0;
                                _accVoucherTagsRepository.Insert(vouchertags);

                            }
                            acc_voucherMain.FiscalMonthId = acc_voucherMain.FiscalMonthId == null ? activefiscalmonth.Id : acc_voucherMain.FiscalMonthId;
                            //acc_voucherMain.FiscalMonthId = activefiscalmonth.Id;
                            acc_voucherMain.FiscalYearId = activefiscalyear.Id;



                            /////newly added for transaction group 
                            if (acc_voucherMain.VoucherTranGroupArray != null)
                            {
                                acc_voucherMain.VoucherTranGroupId = int.Parse(acc_voucherMain.VoucherTranGroupArray.FirstOrDefault().ToString());
                            }

                            //_accVoucherRepository.Update(acc_voucherMain,acc_voucherMain.Id);

                            var com_proforma_itemgrouplist = new List<Acc_VoucherTranGroupModel>();


                            var asdf = _accVoucherTranGroupRepository.All().Where(x => x.VoucherId == acc_voucherMain.Id).ToList();
                            _accVoucherTranGroupRepository.RemoveRange(asdf);


                            if (acc_voucherMain.VoucherTranGroupArray != null)
                            {
                                for (int i = 0; i < acc_voucherMain.VoucherTranGroupArray.Length; i++)
                                {
                                    text += acc_voucherMain.VoucherTranGroupArray[i] + ",";
                                    Acc_VoucherTranGroupModel itemgroupsingle = new Acc_VoucherTranGroupModel();
                                    itemgroupsingle.VoucherId = acc_voucherMain.Id;
                                    itemgroupsingle.VoucherTranGroupId = int.Parse(acc_voucherMain.VoucherTranGroupArray[i]);
                                    com_proforma_itemgrouplist.Add(itemgroupsingle);
                                }
                                _accVoucherTranGroupRepository.AddRange(com_proforma_itemgrouplist);
                                acc_voucherMain.VoucherTranGroupList = text.TrimEnd(',');
                            }


                            //acc_voucherMain.VoucherTagsList = new List<Acc_VoucherTagsModel>();
                            //if (acc_voucherMain.VoucherTags != null)
                            //{
                            //    for (int i = 0; i < acc_voucherMain.VoucherTags.Length; i++)
                            //    {
                            //        //text += acc_voucherMain.VoucherTranGroupArray[i] + ",";
                            //        Acc_VoucherTagsModel vouchertags = new Acc_VoucherTagsModel { tag = (acc_voucherMain.VoucherTags[i]) , VoucherId = acc_voucherMain.Id }; //InvoiceId = 1,
                            //        acc_voucherMain.VoucherTagsList.Add(vouchertags);
                            //        _accVoucherTagsRepository.Insert(vouchertags);
                            //        //_accVoucherTagsRepository.Update(vouchertags);

                            //    }
                            //    //acc_voucherMain.VoucherTranGroupList = text.TrimEnd(',');
                            //}

                            _accVoucherRepository.Update(acc_voucherMain, acc_voucherMain.Id);


                            TempData["Message"] = "Data Update Successfully";
                            TempData["Status"] = "2";
                            tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), acc_voucherMain.Id.ToString(), "Update", acc_voucherMain.VoucherNo.ToString());


                        }
                        //Perform Save
                        else
                        {
                            text = "";
                            acc_voucherMain.Acc_VoucherTranGroups = new List<Acc_VoucherTranGroupModel>();
                            if (acc_voucherMain.VoucherTranGroupArray != null)
                            {
                                for (int i = 0; i < acc_voucherMain.VoucherTranGroupArray.Length; i++)
                                {
                                    text += acc_voucherMain.VoucherTranGroupArray[i] + ",";
                                    Acc_VoucherTranGroupModel COM_ProformaInvoice_Subs = new Acc_VoucherTranGroupModel { VoucherTranGroupId = int.Parse(acc_voucherMain.VoucherTranGroupArray[i]) }; //InvoiceId = 1,
                                    acc_voucherMain.Acc_VoucherTranGroups.Add(COM_ProformaInvoice_Subs);
                                }
                                acc_voucherMain.VoucherTranGroupList = text.TrimEnd(',');
                            }



                            acc_voucherMain.VoucherTagsList = new List<Acc_VoucherTagsModel>();
                            if (acc_voucherMain.VoucherTags != null)
                            {
                                for (int i = 0; i < acc_voucherMain.VoucherTags.Length; i++)
                                {
                                    //text += acc_voucherMain.VoucherTranGroupArray[i] + ",";
                                    Acc_VoucherTagsModel vouchertags = new Acc_VoucherTagsModel { tag = (acc_voucherMain.VoucherTags[i]), ComId = comid.GetValueOrDefault(), LuserId = userid.GetValueOrDefault() }; //InvoiceId = 1,
                                    acc_voucherMain.VoucherTagsList.Add(vouchertags);
                                }
                                //acc_voucherMain.VoucherTranGroupList = text.TrimEnd(',');
                            }


                            ViewBag.ActionType = "Create";

                            acc_voucherMain.LuserId = userid.GetValueOrDefault();// HttpContext.Session.GetInt32("UserId");
                            acc_voucherMain.ComId = comid.GetValueOrDefault();
                            acc_voucherMain.CreateDate = DateTime.Now;
                            acc_voucherMain.FiscalMonthId = acc_voucherMain.FiscalMonthId == null ? activefiscalmonth.Id : acc_voucherMain.FiscalMonthId;
                            acc_voucherMain.FiscalYearId = activefiscalyear.Id;


                            //var voucherfiscalyear = _accFiscalMonthRepository.All().Where(x => x.OpeningDate >= acc_voucherMain.VoucherDate).FirstOrDefault();
                            //var voucherfiscalyear = _accFiscalMonthRepository.All().Where(x => x.OpeningDate >= acc_voucherMain.VoucherDate && x.ClosingDate <= acc_voucherMain.VoucherDate).FirstOrDefault();
                            var voucherfiscalyear = _accFiscalYearRepository.All().Where(x => x.ComId == comid && x.OpeningDate <= acc_voucherMain.VoucherDate && x.ClosingDate >= acc_voucherMain.VoucherDate).FirstOrDefault();// && x.dtFrom.ToString() == monthid.ToString()

                            ////voucherfiscalyear.FiscalYearId,
                            ///
                            var x = VoucherNoMaker(acc_voucherMain.ComId, acc_voucherMain.VoucherTypeId, acc_voucherMain.VoucherDate, activefiscalyear.Id, activefiscalmonth.Id); // nned to work.. //// activefiscalyear.FiscalYearId 
                            acc_voucherMain.VoucherNo = x[0];
                            acc_voucherMain.VoucherSerialId = int.Parse(x[1]);

                            _accVoucherRepository.Insert(acc_voucherMain);

                            //db.SaveChanges();

                            //db.Entry(acc_voucherMain).GetDatabaseValues();
                            int id = acc_voucherMain.Id; // Yes it's here


                        }

                        TempData["Message"] = "Data Save Successfully";
                        TempData["Status"] = "1";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), acc_voucherMain.Id.ToString(), "Create", acc_voucherMain.VoucherNo.ToString());


                        // If Sucess== 1 then Save/Update Successfull else there it has Exception
                    }
                    return Json(new { Success = 1, VoucherID = acc_voucherMain.Id, ex = TempData["Message"] });

                    //}
                    //return Json(new { Success = 0, ex = "Data Empty or Null" });

                }

                return Json(new { Success = 0, ex = "Data Empty or Null" });
            }
            catch (Exception ex)
            {

                // If Sucess== 0 then Unable to perform Save/Update Operation and send Exception to View as JSON
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

        }



        public string[]? VoucherNoMaker(int comid, int vouchertypeid, DateTime voucherdate, int fiscalyearid, int fiscalmonthid)
        {
            string[] FinalAccCode = new string[2];
            var input = 0;
            int length = 6;
            int maxvoucherid = 0;
            var maxnowithpadleftresult = "";

            //string voucernocreatestyle = _companyRepository.All().Include(x => x.VoucherNoCreatedTypes).Where(c => c.Id == comid).Select(c => c.VoucherNoCreatedTypes.VoucherNoCreatedTypeName).FirstOrDefault();
            string voucernocreatestyle = _storeSettingRepository.All().Include(x => x.VoucherNoCreatedTypes).Where(c => c.ComId == comid).Select(c => c.VoucherNoCreatedTypes.VoucherNoCreatedTypeName).FirstOrDefault();
            string vouchertypeShortPrefix = _accVoucherNoPrefixRepository.All().Where(x => x.VoucherTypeId == vouchertypeid && x.ComId == comid).Select(x => x.VoucherShortPrefix).FirstOrDefault();
            length = _accVoucherNoPrefixRepository.All().Where(x => x.VoucherTypeId == vouchertypeid && x.ComId == comid).Select(x => x.Length).FirstOrDefault();


            if (fiscalyearid > 2)
            {
                voucernocreatestyle = "Monthly";
            }


            if (voucernocreatestyle == "LifeTime")
            {
                Acc_FiscalYearModel fiscalyearname = _accFiscalYearRepository.All().Where(x => x.Id == fiscalyearid).FirstOrDefault();
                var fiscalyearjoin = Convert.ToDateTime(fiscalyearname.OpDate).Year.ToString().Substring(2, 2) + "/" + Convert.ToDateTime(fiscalyearname.ClDate).Year.ToString().Substring(2, 2);
                var fiscalmonthname = _accFiscalMonthRepository.All().Where(x => x.Id == fiscalmonthid).Select(x => Convert.ToDateTime(x.dtFrom).Month).FirstOrDefault().ToString().PadLeft(2, '0');



                maxvoucherid = _accVoucherRepository.All().Where(x => x.ComId == comid && x.VoucherTypeId == vouchertypeid).Max(x => x.VoucherSerialId);
                input = maxvoucherid + 1;
                maxnowithpadleftresult = input.ToString().PadLeft(length, '0');
                FinalAccCode[0] = vouchertypeShortPrefix + "-" + maxnowithpadleftresult + "-" + fiscalmonthname + "-" + fiscalyearjoin;
                FinalAccCode[1] = input.ToString();
            }
            else if (voucernocreatestyle == "Yearly")
            {
                Acc_FiscalYearModel fiscalyearname = _accFiscalYearRepository.All().Where(x => x.Id == fiscalyearid).FirstOrDefault();
                var fiscalyearjoin = Convert.ToDateTime(fiscalyearname.OpDate).Year.ToString().Substring(2, 2) + "/" + Convert.ToDateTime(fiscalyearname.ClDate).Year.ToString().Substring(2, 2);
                var fiscalmonthname = _accFiscalMonthRepository.All().Where(x => x.Id == fiscalmonthid).Select(x => Convert.ToDateTime(x.dtFrom).Month).FirstOrDefault().ToString().PadLeft(2, '0');


                maxvoucherid = _accVoucherRepository.All().Where(x => x.ComId == comid && x.VoucherTypeId == vouchertypeid && x.FiscalYearId == fiscalyearid).DefaultIfEmpty().Max(p => p == null ? 0 : p.VoucherSerialId);
                input = maxvoucherid + 1;
                maxnowithpadleftresult = input.ToString().PadLeft(length, '0');
                FinalAccCode[0] = vouchertypeShortPrefix + "-" + maxnowithpadleftresult;// + "-" + fiscalyearjoin; //stop for dap project
                FinalAccCode[1] = input.ToString();
            }
            else if (voucernocreatestyle == "Monthly")
            {
                //Acc_FiscalYearModel fiscalyearname = _accFiscalMonthRepository.All().Where(x => x.FiscalYearId == fiscalyearid).FirstOrDefault();
                //var fiscalyearjoin = Convert.ToDateTime(fiscalyearname.OpDate).Year.ToString().Substring(2,2) + "/" + Convert.ToDateTime(fiscalyearname.ClDate).Year.ToString().Substring(2, 2);
                //var fiscalmonthname = _accFiscalMonthRepository.All().Where(x => x.Id == fiscalmonthid).Select(x => Convert.ToDateTime(x.dtFrom).Month).FirstOrDefault().ToString().PadLeft(2, '0');


                //maxvoucherid = (_accVoucherRepository.All().Where(x => x.ComId == comid && x.VoucherTypeId == vouchertypeid && x.Id == fiscalmonthid).Max(x => (int?)x.VoucherSerialId)) ?? 0;
                //maxvoucherid = input = maxvoucherid + 1;
                //maxnowithpadleftresult = input.ToString().PadLeft(length, '0');
                //FinalAccCode[0] = vouchertypeShortPrefix + "-" + maxnowithpadleftresult + "-" + fiscalmonthname + "-" + fiscalyearjoin;
                //FinalAccCode[1] = input.ToString();



                Acc_FiscalYearModel fiscalyearname = _accFiscalYearRepository.All().Where(x => x.Id == fiscalyearid).FirstOrDefault();
                var fiscalyearjoin = Convert.ToDateTime(fiscalyearname.OpeningDate).Year.ToString().Substring(2, 2) + "/" + Convert.ToDateTime(fiscalyearname.ClosingDate).Year.ToString().Substring(2, 2);

                if (Convert.ToDateTime(fiscalyearname.OpeningDate).Year.ToString().Substring(2, 2) == Convert.ToDateTime(fiscalyearname.ClosingDate).Year.ToString().Substring(2, 2))
                {
                    fiscalyearjoin = Convert.ToDateTime(fiscalyearname.ClosingDate).Year.ToString().Substring(2, 2);
                }

                var fiscalmonthname = _accFiscalMonthRepository.All().Where(x => x.Id == fiscalmonthid).Select(x => (x.OpeningdtFrom).Month).FirstOrDefault().ToString().PadLeft(2, '0');
                fiscalmonthname = _accFiscalMonthRepository.All().Where(x => x.Id == fiscalmonthid).Select(x => x.dtFrom.Substring(0, 3)).FirstOrDefault().ToString().PadLeft(2, '0');


                maxvoucherid = (_accVoucherRepository.All().Where(x => x.ComId == comid && x.VoucherTypeId == vouchertypeid && x.FiscalMonthId == fiscalmonthid).Max(x => (int?)x.VoucherSerialId)) ?? 0;
                maxvoucherid = input = maxvoucherid + 1;
                maxnowithpadleftresult = input.ToString().PadLeft(length, '0');
                FinalAccCode[0] = vouchertypeShortPrefix + "-" + maxnowithpadleftresult + "-" + fiscalmonthname + "-" + fiscalyearjoin;
                FinalAccCode[1] = input.ToString();


            }
            else
            {
                FinalAccCode = null;
            }

            return FinalAccCode;
        }


        [HttpGet]
        public ActionResult EditVoucher(int VoucherId)
        {
            ViewBag.ActionType = "Edit";
            var Voucher = _accVoucherRepository.Find(VoucherId);
            //ViewBag.VoucherTypeId = _VoucherTypeRepository.GetAllForDropDown();

            if (Voucher.isPosted == false)
            {

                return View("AddVoucher", model: VoucherId);

            }

            return View("VoucherListQB");
        }

        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetVoucher(int VoucherId, int isCopy = 0)
        {
            try
            {
                var voucherquery = _accVoucherRepository.All().Where(x => x.Id == VoucherId);
                Acc_VoucherMainModel voucherdata = voucherquery.FirstOrDefault();

                if (voucherdata == null)
                {
                    return Json(new { Success = 0, ex = "No Data Found." });
                }

                if (isCopy == 0)
                {
                    voucherquery = voucherquery.Where(x => x.isPosted == false);
                }
                else if (isCopy == 1)
                {
                    voucherquery = voucherquery.Where(x => x.IsDelete == true);
                }
                else if (isCopy == 2)
                {
                    voucherquery = voucherquery.Where(x => x.IsDelete == false);
                }

                voucherdata = voucherquery.FirstOrDefault();

                //if (voucherdata == null)
                //{
                //    return Json(new { Success = 0, ex = "Voucher Already Posted." });
                //}

                ////voucher.Items = saleItemRepository.AllSubData().Where(x => x.SalesId == voucher.Id).ToList();
                //voucher.VoucherSubs = _accVoucherSubRepository.AllSubData()
                //    .Include(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
                //    .Where(x => x.VoucherId == VoucherId).ToList();


                //voucher.VoucherCheckNos = _accVoucherSubCheckNoRepository.AllSubData()
                //    //.Include(x => x.vPaymentType)
                //    .Include(x => x.vAcc_ChartOfAccount)
                //    .Where(x => x.VoucherId == voucher.Id).ToList();
                var SRowNo = 0;

                var isMultiDebitCredit = HttpContext.Session.GetString("isMultiDebitCredit").ToLower();

                if (isMultiDebitCredit == "true")
                {
                    SRowNo = -1;
                }



                var voucher = voucherquery
               .Include(x => x.VoucherSubs).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
               .Include(x => x.VoucherCheckNos)
               .Include(x => x.VoucherTagsList)
               .Include(x => x.Acc_VoucherTypes)
               .Select(p => new
               {
                   p.Id,
                   p.VoucherSerialId,
                   p.VoucherNo,
                   p.Referance,
                   p.ReferanceTwo,
                   p.ReferanceThree,
                   p.Source,
                   p.SourceId,
                   //AccountMainId = p.VoucherSubs.Where(x => x.IsDelete == false && x.SRowNo == -1)?.FirstOrDefault().AccId,
                   //AccountMainId = p.VoucherSubs.Where(x => x.IsDelete == false && x.SRowNo < 1).FirstOrDefault().AccId,
                   p.VoucherDesc,
                   p.FiscalMonthId,
                   //p.VoucherFilePath,
                   p.WarehouseId,
                   p.VoucherTypeId,
                   p.MasterCurrencyRate,
                   //p.VoucherTags,
                   //VoucherTags = p.VoucherTagsList.Select(p => new[] { p.tag }).ToArray(),
                   VoucherDate = p.VoucherDate.ToString("dd-MMM-yy"),
                   p.VoucherTagsList,
                   p.CountryId,
                   p.CountryIdLocal,
                   p.ConvRate,
                   p.VAmount,
                   p.vAmountInWords,
                   p.vAmountLocal,
                   p.FilePath,

                   //VoucherDateString = p.VoucherDate.ToString("dd-MMM-yy"),
                   //VoucherSubs = p.VoucherSubs.Where(x => x.IsDelete == false && x.SRowNo >= 0).Select(x =>
                   //VoucherSubs = p.VoucherSubs.Where(x => x.IsDelete == false && x.SRowNo >= SRowNo).Select(x =>
                   VoucherSubs = p.VoucherSubs.Where(x => x.IsDelete == false).Select(x =>


                   //VoucherSubs = p.VoucherSubs.Select(x =>

                      new
                      {
                          Id = isCopy == 0 ? x.Id : 0,
                          x.SLNo,
                          x.AccId,
                          AccName = x.Acc_ChartOfAccount.AccName,
                          AccCode = x.Acc_ChartOfAccount.AccCode,
                          GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
                          x.VoucherId,
                          x.CurrencyId,
                          x.CurrencyForeignId,
                          x.CurrencyRate,
                          x.TKDebit,
                          x.TKCredit,
                          x.TKDebitLocal,
                          x.TKCreditLocal,

                          x.Note1,
                          x.Note2,
                          x.Note3,
                          x.Note4,
                          x.Note5,

                          x.EmpId,
                          x.CustomerId,
                          x.SupplierId,
                          x.SalesId,
                          x.SalesReturnId,
                          x.PurchaseId,
                          x.PurchaseReturnId,
                          x.IssueId,
                          x.DamageId,
                          x.VoucherTranGroupIdRow,
                          x.ComId,
                          x.LuserId,
                          x.SRowNo

                      }).ToList()
               }).FirstOrDefault();


                //SalesItemsModel a = new SalesItemsModel { Name = "abc", Amount = 2.5, Id = 1, IsDelete = false, Price = 2.5, Quantity = 1, SalesId = 5};
                //voucher.Items.Add(a);
                return Json(new { Success = 1, voucher = voucher, ex = "Data Load Successfully" });
                //return Json(new { Success = 1, voucher = voucher, ex = "Data Load Successfully" });
            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }



        //[HttpGet]
        //[AllowAnonymous]
        //public JsonResult GetPurchase(int PurchaseId, int isCopy = 0, int CopyBill = 0)
        //{
        //    try
        //    {
        //        var purchasequery = _purchaseRepository.All().Where(x => x.Id == PurchaseId);
        //        PurchaseModel purchasedata = purchasequery.FirstOrDefault();

        //        if (purchasedata == null)
        //        {
        //            return Json(new { Success = 0, ex = "No Data Found." });
        //        }

        //        if (isCopy == 0)
        //        {
        //            purchasequery = purchasequery.Where(x => x.isPosted == false);
        //        }
        //        else if (isCopy == 1)
        //        {
        //            purchasequery = purchasequery.Where(x => x.IsDelete == true);
        //        }
        //        else if (isCopy == 2)
        //        {
        //            purchasequery = purchasequery.Where(x => x.IsDelete == false);
        //        }

        //        purchasedata = purchasequery.FirstOrDefault();
        //        var SRowNo = 0;

        //        var purchase = purchasequery
        //            .Include(x => x.ItemsCategory).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
        //            .Include(x => x.Items).ThenInclude(x => x.PurchaseModel)
        //            .Include(x => x.PurchasePayments).ThenInclude(x => x.Transaction)
        //            .Select(p => new
        //            {
        //                Id = CopyBill == 0 ? p.Id : 0,
        //                p.SupplierId,
        //                p.CustomerId,
        //                CustomerName = p.CustomerModel.Name,
        //                p.ShipVia,
        //                p.ShippingAddress,
        //                p.PrimaryAddress,
        //                p.PurchaseDate,
        //                p.DueDate,
        //                p.PurchaseCode,
        //                p.PermitNo,
        //                p.Remarks,
        //                p.PaymentTermsId,
        //                p.DocTypeId,
        //                p.EmailId,
        //                p.DocStatusId,
        //                TermsId = p.PaymentTermsId,
        //                TermName = p.PaymentTermsInfo.TermName,
        //                p.FilePath,
        //                PaidAmount = p.PurchasePayments.Sum(x => x.Amount),
        //                NetAmount = p.NetAmount,
        //                ItemsCategory = p.ItemsCategory.Where(x => x.IsDelete == false).Select(x =>
        //                    new
        //                    {
        //                        PurchaseItemsCategoryId = CopyBill == 0 ? x.PurchaseItemsCategoryId : x.Id,
        //                        Id = CopyBill == 0 ? x.Id : 0,
        //                        x.PurchaseId,
        //                        x.SLNo,
        //                        x.AccId,
        //                        AccName = x.Acc_ChartOfAccount.AccName,
        //                        AccCode = x.Acc_ChartOfAccount.AccCode,
        //                        GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
        //                        CustomerId = x.CustomerId,
        //                        Name = x.Customers.Name,
        //                        x.Amount,
        //                        x.Description,
        //                        x.IsBillable,
        //                        x.IsTax,
        //                        x.ComId,
        //                        x.LuserId,
        //                        x.isTransaction,
        //                    }).ToList(),
        //                Items = p.Items.Where(x => x.IsDelete == false).Select(x =>
        //                    new
        //                    {
        //                        PurchaseItemsId = CopyBill == 0 ? x.PurchaseItemsId : x.Id,
        //                        Id = CopyBill == 0 ? x.Id : 0,
        //                        x.PurchaseId,
        //                        x.SLNo,
        //                        x.ProductId,
        //                        ProductName = x.Product.Name,
        //                        productCode = x.Product.Code,
        //                        CustomerId = x.CustomerId,
        //                        Name = x.ItemWiseCustomer.Name,
        //                        x.Amount,
        //                        x.Price,
        //                        x.Description,
        //                        x.QTY,
        //                        x.SKU,
        //                        x.Rate,
        //                        x.Quantity,
        //                        x.ComId,
        //                        x.LuserId,
        //                        x.isTransaction,
        //                        TotalQty = x.QTY - p.Items
        //                            .Where(y => y.PurchaseItemsId == x.Id)
        //                            .Sum(y => y.QTY)
        //                    }).ToList()
        //            }).FirstOrDefault();

        //        return Json(new { Success = 1, purchase = purchase, ex = "Data Load Successfully" });
        //    }
        //    catch (Exception e)
        //    {
        //        return Json(e.ToString());
        //    }
        //}


        //slight ok
        //[HttpGet]
        //[AllowAnonymous]
        //public JsonResult GetPurchase(int PurchaseId, int isCopy = 0, int CopyBill = 0)
        //{
        //    try
        //    {
        //        var purchasequery = _purchaseRepository.All().Where(x => x.Id == PurchaseId);

        //        var getPurchaseItems = _purchaseItemRepository.All().Where(x => x.PurchaseId == PurchaseId);

        //        var getQuantityOfPurchaseOrderItems = getPurchaseItems.Select(x => x.QTY).ToList();



        //        //var getPurchaseItems = _purchaseItemRepository.All().Where(x => x.PurchaseId == PurchaseId);

        //        //var getQuantityOfPurchaseOrderItems = getPurchaseItems.Select(x => x.QTY).ToList();



        //        Console.WriteLine(getQuantityOfPurchaseOrderItems);

        //        PurchaseModel purchasedata = purchasequery.FirstOrDefault();

        //        //var purchasequerytogetpurchaseitems = purchasedata.Items;
        //        //var purchaseItemsIds = purchasequerytogetpurchaseitems.Select(item => item.PurchaseItemsId).ToList();



        //        if (purchasedata == null)
        //        {
        //            return Json(new { Success = 0, ex = "No Data Found." });
        //        }

        //        if (isCopy == 0)
        //        {
        //            purchasequery = purchasequery.Where(x => x.isPosted == false);
        //        }
        //        else if (isCopy == 1)
        //        {
        //            purchasequery = purchasequery.Where(x => x.IsDelete == true);
        //        }
        //        else if (isCopy == 2)
        //        {
        //            purchasequery = purchasequery.Where(x => x.IsDelete == false);
        //        }

        //        purchasedata = purchasequery.FirstOrDefault();
        //        var SRowNo = 0;

        //        var purchase = purchasequery
        //            .Include(x => x.ItemsCategory).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
        //            .Include(x => x.Items).ThenInclude(x => x.PurchaseModel)
        //            .Include(x => x.PurchasePayments).ThenInclude(x => x.Transaction)
        //            .Select(p => new
        //            {
        //                Id = CopyBill == 0 ? p.Id : 0,
        //                p.SupplierId,
        //                p.CustomerId,
        //                CustomerName = p.CustomerModel.Name,
        //                p.ShipVia,
        //                p.ShippingAddress,
        //                p.PrimaryAddress,
        //                p.PurchaseDate,
        //                p.DueDate,
        //                p.PurchaseCode,
        //                p.PermitNo,
        //                p.Remarks,
        //                p.PaymentTermsId,
        //                p.DocTypeId,
        //                p.EmailId,
        //                p.DocStatusId,
        //                TermsId = p.PaymentTermsId,
        //                TermName = p.PaymentTermsInfo.TermName,
        //                p.FilePath,
        //                PaidAmount = p.PurchasePayments.Sum(x => x.Amount),
        //                NetAmount = p.NetAmount,
        //                ItemsCategory = p.ItemsCategory.Where(x => x.IsDelete == false).Select(x =>
        //                    new
        //                    {
        //                        PurchaseItemsCategoryId = CopyBill == 0 ? x.PurchaseItemsCategoryId : x.Id,
        //                        Id = CopyBill == 0 ? x.Id : 0,
        //                        x.PurchaseId,
        //                        x.SLNo,
        //                        x.AccId,
        //                        AccName = x.Acc_ChartOfAccount.AccName,
        //                        AccCode = x.Acc_ChartOfAccount.AccCode,
        //                        GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
        //                        CustomerId = x.CustomerId,
        //                        Name = x.Customers.Name,
        //                        x.Amount,
        //                        x.Description,
        //                        x.IsBillable,
        //                        x.IsTax,
        //                        x.ComId,
        //                        x.LuserId,
        //                        x.isTransaction,
        //                    }).ToList(),
        //                Items = p.Items.Where(x => x.IsDelete == false).Select(x =>
        //                      new
        //                      {
        //                          PurchaseItemsId = CopyBill == 0 ? x.PurchaseItemsId : x.Id,
        //                          Id = CopyBill == 0 ? x.Id : 0,
        //                          x.PurchaseId,
        //                          x.SLNo,
        //                          x.ProductId,
        //                          ProductName = x.Product.Name,
        //                          productCode = x.Product.Code,
        //                          CustomerId = x.CustomerId,
        //                          Name = x.ItemWiseCustomer.Name,
        //                          x.Amount,
        //                          x.Price,
        //                          x.Description,
        //                          x.QTY,
        //                          x.SKU,
        //                          x.Rate,
        //                          x.Quantity,
        //                          x.ComId,
        //                          x.LuserId,
        //                          x.isTransaction,
        //                      }).ToList()

        //            }).FirstOrDefault();

        //        return Json(new { Success = 1, purchase = purchase, ex = "Data Load Successfully" });
        //    }
        //    catch (Exception e)
        //    {
        //        return Json(e.ToString());
        //    }
        //}



        [HttpGet]
        [AllowAnonymous]
        public IActionResult GetRecurringDetails(int id)
        {

            var data = recurringDetailsRepository.All().Where(x => x.PurchaseId == id).FirstOrDefault();
            return Json(new { Success = 1, data = data, ex = "Data Loaded Successfully" });
        }


        //previous ok one
        [HttpGet]
        [AllowAnonymous]
        public JsonResult
            GetPurchase(int PurchaseId, int isCopy = 0, int CopyBill = 0, int ProductId = 0)
        {
            try
            {
                var purchasequery = _purchaseRepository.All().Where(x => x.Id == PurchaseId);


                PurchaseModel purchasedata = purchasequery.FirstOrDefault();
                if (ProductId >= 0 && PurchaseId == 1)
                {
                    var model = productRepository.All().Where(x => x.Id == ProductId).FirstOrDefault();
                    var purchaseDataList = new List<object>();
                    string uniqueNumber = "ES-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                    var purchaseItems = _purchaseItemRepository.All().Where(x => x.ProductId == ProductId).FirstOrDefault();
                    var purchaseModel = _purchaseRepository.All().Where(x => x.Id == purchaseItems.PurchaseId).FirstOrDefault();

                    for (int i = 0; i < 1; i++)
                    {
                        var data = new
                        {
                            PurchaseItemsId = 0,
                            Id = 0,
                            PurchaseId = 0,
                            SLNo = i + 1,
                            ProductId = model.Id,
                            ProductName = model.Name,
                            ProductCode = model.Code,
                            Name = "",
                            CustomerId = 0,
                            Amount = model.Price,
                            Price = model.Price,
                            Description = model.Remarks,
                            DocType = "StockAdjustment",
                            Quantity = model.RunTimeLiveStock,
                            PurchaseCode = uniqueNumber,
                            PurchaseDate = purchaseModel.PurchaseDate,
                            NetAmount = 0,
                            SKU = "",
                            Rate = model.Price,
                            ComId = model.ComId,
                            LuserId = model.LuserId,
                            isTransaction = 0,
                            NewQTY = 0,
                            QTYOnHand = 0,
                            TotalQty = model.RunTimeLiveStock,
                            UsedQty = 0,
                            UniqueColumData = 0,
                        };

                        purchaseDataList.Add(data);
                    }
                    var Purchase = new
                    {
                        Items = purchaseDataList,
                    };
                    return Json(new { Success = 1, purchase = Purchase, ex = "Data Load Successfully" });

                }
                if (purchasedata == null)
                {
                    return Json(new { Success = 0, ex = "No Data Found." });
                }

                if (isCopy == 0)
                {
                    purchasequery = purchasequery.Where(x => x.isPosted == false);
                }
                else if (isCopy == 1)
                {
                    purchasequery = purchasequery.Where(x => x.IsDelete == false);
                }
                else if (isCopy == 2)
                {
                    purchasequery = purchasequery.Where(x => x.IsDelete == false);
                }

                purchasedata = purchasequery.FirstOrDefault();
                var SRowNo = 0;


                var purchase = purchasequery
                  .Include(x => x.ItemsCategory).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
                  .Include(x => x.Items)//.ThenInclude(x => x.PurchaseModel)
                  .Include(x => x.Items).ThenInclude(x => x.PurchaseItems)
                  .Include(x => x.PurchasePayments).ThenInclude(x => x.Transaction)
                  .Include(x => x.PurchaseTags)
                  .Include(x => x.PurchaseProductTax)
                  .Select(p => new
                  {
                      Id = CopyBill == 0 ? p.Id : 0,
                      p.AmountsAre,
                      p.SupplierId,
                      p.CustomerId,
                      CustomerName = p.CustomerModel.Name,
                      p.ShipVia,
                      p.ShippingAddress,
                      p.PrimaryAddress,
                      p.PurchaseDate,
                      p.DueDate,
                      p.CurrencyRate,
                      p.CurrencyId,
                      p.PurchaseCode,
                      TDS = p.TDS == null ? 0 : p.TDS,
                      p.PermitNo,
                      p.Remarks,
                      p.PaymentTermsId,
                      p.DocTypeId,
                      p.MasterPOId,
                      DocType = p.DocTypeList.DocType,
                      p.WarehouseIdMain,
                      p.EmailId,
                      p.TermsMainId,
                      p.IsRecurring,
                      p.DocStatusId,
                      p.IsRecognition,
                      TermsId = p.PaymentTermsId,
                      TermName = p.PaymentTermsInfo.TermName,
                      p.FilePath,
                      PaidAmount = p.PurchasePayments.Sum(x => x.Amount),
                      NetAmount = p.NetAmount,
                      TotalVat = p.TotalVat,
                      BeforeTax = p.NetAmount - p.TotalVat,
                      p.Cc,
                      p.Bcc,
                      p.FiscalMonthId,
                      p.PurchaseTags,
                      isCopy = isCopy,
                      ItemsCategory = p.ItemsCategory.Where(x => x.IsDelete == false).Select(x =>

                         //VoucherSubs = p.VoucherSubs.Select(x =>

                         new
                         {
                             PurchaseItemsCategoryId = CopyBill == 0 ? x.PurchaseItemsCategoryId : x.Id,
                             Id = CopyBill == 0 ? x.Id : 0,
                             x.PurchaseId,
                             x.SLNo,
                             x.AccId,
                             AccName = x.Acc_ChartOfAccount.AccName,
                             AccCode = x.Acc_ChartOfAccount.AccCode,
                             GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
                             CustomerId = x.CustomerId,
                             Name = x.Customers.Name,
                             PurchaseCode = p.PurchaseCode,
                             DocType = p.DocTypeList.DocType,
                             PurchaseDate = p.PurchaseDate,
                             NetAmount = p.NetAmount,
                             x.Amount,
                             x.Description,
                             x.IsBillable,
                             x.IsTax,
                             x.ComId,
                             x.LuserId,
                             x.isTransaction,
                             x.MasterTaxId,
                             x.MasterTaxName,
                         }).ToList(),
                      Items = p.Items.Where(x => x.IsDelete == false).Select(x =>

                     //VoucherSubs = p.VoucherSubs.Select(x =>

                     new
                     {
                         PurchaseItemsId = CopyBill == 0 ? x.PurchaseItemsId : x.Id,
                         Id = CopyBill == 0 ? x.Id : 0,
                         x.PurchaseId,
                         x.SLNo,
                         x.ProductId,
                         ProductName = x.Product.Name,
                         productCode = x.Product.Code,
                         CustomerId = x.CustomerId,
                         Name = x.ItemWiseCustomer.Name,
                         Amount = Math.Round(x.Amount, 4),
                         x.Price,
                         x.SecondaryPrice,
                         x.Description,
                         PurchaseCode = p.PurchaseCode,
                         DocType = p.DocTypeList.DocType,
                         PurchaseDate = p.PurchaseDate,
                         NetAmount = p.NetAmount,
                         Quantity = CopyBill == 0 ? x.Quantity : x.Quantity - x.PurchaseItems.Sum(y => y.Quantity),
                         x.NewQTY,
                         x.QTYOnHand,
                         //x.QTY,
                         x.SKU,
                         x.Rate,
                         x.ComId,
                         x.LuserId,
                         x.isTransaction,
                         x.MasterTaxId,
                         x.VAT,
                         x.VDS,
                         x.TDS,
                         x.IsInclusive,
                         x.MasterTaxName,
                         x.WarehouseId,
                         x.WHName,
                         x.ColorId,
                         ColorName = x.Colors == null ? (x.Product.ColorName == null ? "" : x.Product.ColorName) : x.Colors.ColorName,
                         x.SizeId,
                         SizeName = x.Sizes == null ? (x.Product.Size == null ? "" : x.Product.SizeName) : x.Sizes.SizeName,
                         x.BuyerPOId,
                         BuyerPO = x.BuyerPO_Master == null ? "" : x.BuyerPO_Master.BuyerPO,
                         x.StyleId,
                         TotalQty = CopyBill == 0 ? 0 : x.Quantity,
                         UsedQty = CopyBill == 0 ? 0 : x.PurchaseItems.Sum(y => y.Quantity),
                         x.PrimaryUnitId,
                         x.SecondaryUnitId,
                         x.ConversionRate,
                         x.Unit,
                         x.InputQuantity,
                         x.DefaultPrice
                     }).ToList(),

                      PurchasePayments = p.PurchasePayments.Where(x => x.IsDelete == false).Select(x =>

                     //VoucherSubs = p.VoucherSubs.Select(x =>

                     new
                     {
                         //Id = CopyBill == 0 ? x.Id : 0,
                         Id = 0, //x.Id,
                         x.PurchaseId,
                         x.PaymentCardNo,
                         DepositTo = x.vChartofAccounts.AccName,
                         AccountHeadId = x.AccountHeadId,
                         x.Amount,
                         x.RowNo,
                         x.ComId,
                         x.LuserId,
                     }).ToList(),
                      PurchaseProductTax = p.PurchaseProductTax.Where(x => x.IsDelete == false).Select(x =>

                      new
                      {
                          //Id = CopyBill == 0 ? x.Id : 0,
                          Id = 0,
                          x.PurchaseId,
                          x.Nickname,
                          x.TaxId,
                          x.IsSum,
                          x.Amount,
                          x.ComId,
                          x.LuserId,
                      }).ToList(),
                      PurchaseTerms = p.PurchaseTerms.Where(x => x.IsDelete == false).Select(x =>

                      new
                      {
                          //Id = CopyBill == 0 ? x.Id : 0,
                          Id = 0,
                          x.PurchaseId,
                          x.TermsName,
                          x.TermsDescription
                      }).ToList()
                  }).FirstOrDefault();





                //SalesItemsModel a = new SalesItemsModel { Name = "abc", Amount = 2.5, Id = 1, IsDelete = false, Price = 2.5, Quantity = 1, SalesId = 5};
                //purchase.Items.Add(a);
                return Json(new { Success = 1, purchase = purchase, ex = "Data Load Successfully" });
            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }

        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetSupplierWisePurchaseItems(int SupplierId)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var purchasequery = _purchaseRepository.All().Where(x => x.SupplierId == SupplierId && x.ComId == comid && x.DocTypeList.DocType == "Supplier PO")
                    .Include(x => x.DocTypeList)
                    .Include(x => x.Items).ThenInclude(x => x.Product)
                    .Include(x => x.Items).ThenInclude(x => x.PurchaseItems)
                    .Include(x => x.Items).ThenInclude(x => x.ItemWiseCustomer)
                    .Include(x => x.Items).ThenInclude(x => x.BuyerPO_Master).ToList();

                var data = new List<object>();

                foreach (var item in purchasequery)
                {
                    if (item.Items.Count > 0)
                    {
                        foreach (var x in item.Items)
                        {
                            var obj = new
                            {
                                PurchaseItemsId = x.Id,
                                Id = 0,
                                x.PurchaseId,
                                x.SLNo,
                                x.ProductId,
                                ProductName = x.Product.Name,
                                productCode = x.Product.Code,
                                CustomerId = x.CustomerId,
                                Name = x.ItemWiseCustomer.Name,
                                Amount = Math.Round(x.Amount, 4),
                                x.Price,
                                x.Description,
                                PurchaseCode = item.PurchaseCode,
                                DocType = item.DocTypeList.DocType,
                                PurchaseDate = item.PurchaseDate,
                                NetAmount = item.NetAmount,
                                Quantity = x.Quantity - x.PurchaseItems.Sum(y => y.Quantity),
                                x.NewQTY,
                                x.QTYOnHand,
                                //x.QTY,
                                x.SKU,
                                x.Rate,
                                x.ComId,
                                x.LuserId,
                                x.isTransaction,
                                x.MasterTaxId,
                                x.MasterTaxName,
                                x.WarehouseId,
                                x.WHName,
                                x.ColorId,
                                ColorName = x.Colors == null ? (x.Product.ColorName == null ? "" : x.Product.ColorName) : x.Colors.ColorName,
                                x.SizeId,
                                SizeName = x.Sizes == null ? (x.Product.Size == null ? "" : x.Product.SizeName) : x.Sizes.SizeName,
                                x.BuyerPOId,
                                BuyerPO = x.BuyerPO_Master == null ? "" : x.BuyerPO_Master.BuyerPO,
                                x.StyleId,
                                TotalQty = x.Quantity,
                                UsedQty = x.PurchaseItems.Sum(y => y.Quantity),
                            };
                            data.Add(obj);
                        }
                    }

                }

                return Json(new { Success = 1, purchase = data, ex = "Data Load Successfully" });
            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }

        [AllowAnonymous]
        public JsonResult GetProductListByBDPO(int? SupplierId = null)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var purchase = _purchaseItemsRepository.All().Where(x => x.PurchaseModel.SupplierId == SupplierId && x.ComId == comid && x.PurchaseModel.IsDelete == false);
                purchase = purchase.Where(x => x.PurchaseModel.DocTypeList.DocType.ToLower().Contains("Supplier PO"));


                var query = (from p in purchase
                             let poqty = (decimal)p.Quantity
                             let grrqty = (decimal)p.PurchaseItems.Sum(x => x.Quantity)
                             let rempoqty = poqty - grrqty
                             let issueqty = (decimal)p.PurchaseItems.SelectMany(x => x.SalesItemsList).Sum(x => x.Quantity)
                             let stockqty = grrqty - issueqty
                             select new //ProductResult
                             {
                                 p.ProductId,
                                 Id = 0,
                                 PurchaseItemsId = p.Id,
                                 p.SLNo,
                                 p.PurchaseId,
                                 p.CustomerId,
                                 ProductName = p.Product.Name,
                                 p.Description,
                                 productCode = p.Product.Code,
                                 Price = p.Price,
                                 CurrencyName = p.PurchaseModel.Currency.CurrencyName,

                                 Amount = Math.Round(p.Rate * (p.Quantity - p.PurchaseItems.Sum(x => x.Quantity)), 4),
                                 UnitName = p.Product.Unit.UnitName,

                                 CategoryName = p.Product.Category.Name,
                                 BrandName = p.Product.Brand != null ? p.Product.Brand.BrandName : "",
                                 ModelName = p.Product.ModelName,
                                 VariantName = p.Product.SizeName,
                                 SizeName = p.Sizes == null ? (p.Product.Size == null ? "" : p.Product.SizeName) : p.Sizes.SizeName,
                                 ColorName = p.Colors == null ? (p.Product.ColorName == null ? "" : p.Product.ColorName) : p.Colors.ColorName,
                                 p.ColorId,
                                 p.SizeId,

                                 p.SKU,
                                 p.Rate,
                                 p.ComId,
                                 p.LuserId,
                                 p.isTransaction,
                                 p.MasterTaxId,
                                 p.MasterTaxName,
                                 WarehouseId = p.WarehouseId,
                                 WHName = p.vWarehouse.WhName,
                                 PurchaseCode = p.PurchaseModel.PurchaseCode,
                                 DocType = p.PurchaseModel.DocTypeList.DocType,


                                 Name = p.ItemWiseCustomer.Name,
                                 p.StyleId,
                                 Style = p.Style.StyleNo,
                                 p.BuyerPOId,
                                 BuyerPO = p.BuyerPO_Master == null ? "" : p.BuyerPO_Master.BuyerPO,

                                 SupplierName = p.PurchaseModel.SupplierModel.SupplierName,
                                 POQty = p.Quantity,
                                 PurchaseDate = p.PurchaseModel.PurchaseDate.ToString("dd-MMM-yy"),
                                 NetAmount = p.PurchaseModel.NetAmount,

                                 Quantity = p.Quantity - p.PurchaseItems.Sum(x => x.Quantity),
                                 TotalQty = p.Quantity,
                                 p.NewQTY,
                                 p.QTYOnHand,
                                 UsedQty = p.PurchaseItems.Sum(x => x.Quantity),
                                 IssueQty = issueqty,
                                 StockQty = stockqty,
                                 Status = rempoqty == 0 ? "Fully Received" : rempoqty < 0 ? "Excess Received" : (grrqty < poqty && grrqty > 0) ? "Partialy Received" : grrqty == 0 ? "Not Yet Received" : "",


                                 StockStatus = (grrqty - issueqty) == 0 && poqty > 0 && grrqty >= poqty || poqty == issueqty ? "Fully Issued"
                                : (grrqty - issueqty) < 0 ? "Excess Issued"
                                : (issueqty < grrqty && issueqty > 0) ? "Partialy Issued"
                                : issueqty == 0 ? "Not Yet Issued" : ""

                             });



                var abcd = query.OrderByDescending(x => x.Id).Where(x => x.Quantity > 0).ToList();// Take(50);

                return Json(new { Success = 1, error = false, ProductList = abcd });


            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult GetAdvanceTrxDetails(int id)
        {

            var data = advanceTransactionTrackingRepository.All().Where(x => x.PurchaseId == id).FirstOrDefault();

            return Json(new { Success = 1, data = data, ex = "Data Loaded Successfully" });
        }

        [AllowAnonymous]
        public IActionResult GetAllPurchaseData()
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var userid = HttpContext.Session.GetInt32("UserId");

            var quary = $"EXEC rptCriteriaWisePurchaseDatas '{comid}'";

            SqlParameter[] parameters = new SqlParameter[1];

            parameters[0] = new SqlParameter("@ComId", comid);



            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS("rptCriteriaWisePurchaseDatas", parameters);

            return Json(new { Success = 1, data = datasetabc });

        }

        public IActionResult GetOpenOverDueBill()
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var userid = HttpContext.Session.GetInt32("UserId");

            var quary = $"EXEC getOpenOverDueBills '{comid}'";

            SqlParameter[] parameters = new SqlParameter[1];

            parameters[0] = new SqlParameter("@ComId", comid);



            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS("getOpenOverDueBills", parameters);

            return Json(new { Success = 1, data = datasetabc });
        }
        public IActionResult GetAllSupplierDataWithPurchase()
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var userid = HttpContext.Session.GetInt32("UserId");

            var quary = $"EXEC SupplierDataByPurchaseStatus '{comid}'";

            SqlParameter[] parameters = new SqlParameter[1];

            parameters[0] = new SqlParameter("@ComId", comid);



            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS("SupplierDataByPurchaseStatus", parameters);

            return Json(new { Success = 1, data = datasetabc });

        }

        //po get prev some codes starts
        //if (CopyBill == 1)
        //{

        //    var purchase = purchasequery
        //   .Include(x => x.ItemsCategory).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
        //   .Include(x => x.Items).ThenInclude(x => x.PurchaseModel)
        //   .Include(x => x.PurchasePayments).ThenInclude(x => x.Transaction)
        //   .Select(p => new
        //   {
        //       p.Id,
        //       p.SupplierId,
        //       p.CustomerId,
        //       CustomerName = p.CustomerModel.Name,
        //       p.ShipVia,
        //       p.ShippingAddress,
        //       p.PrimaryAddress,
        //       p.PurchaseDate,
        //       p.DueDate,
        //       p.PurchaseCode,
        //       p.PermitNo,
        //       p.Remarks,
        //       p.PaymentTermsId,
        //       p.DocTypeId,
        //       p.EmailId,
        //       TermsId = p.PaymentTermsId,
        //       TermName = p.PaymentTermsInfo.TermName,
        //       p.FilePath,
        //       PaidAmount = p.PurchasePayments.Sum(x => x.Amount),
        //       NetAmount = p.NetAmount,
        //       ItemsCategory = p.ItemsCategory.Where(x => x.IsDelete == false).Select(x =>

        //          //VoucherSubs = p.VoucherSubs.Select(x =>

        //          new
        //          {
        //              Id = isCopy == 0 ? x.Id : 0,
        //              //x.SLNo,
        //              x.AccId,
        //              AccName = x.Acc_ChartOfAccount.AccName,
        //              AccCode = x.Acc_ChartOfAccount.AccCode,
        //              GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
        //              CustomerId = x.CustomerId,
        //              Name = x.Customers.Name,
        //              x.Amount,
        //              x.Description,
        //              x.IsBillable,
        //              x.IsTax,
        //              x.ComId,
        //              x.LuserId
        //          }).ToList(),
        //       Items = p.Items.Where(x => x.IsDelete == false).Select(x =>

        //      //VoucherSubs = p.VoucherSubs.Select(x =>

        //      new
        //      {
        //          Id = isCopy == 0 ? x.Id : 0,
        //          //x.SLNo,
        //          x.ProductId,
        //          ProductName = x.Product.Name,
        //          productCode = x.Product.Code,
        //          CustomerId = x.CustomerId,
        //          Name = x.ItemWiseCustomer.Name,
        //          x.Amount,
        //          x.Price,
        //          x.Description,
        //          x.QTY,
        //          x.SKU,
        //          x.Rate,
        //          x.Quantity,
        //          x.ComId,
        //          x.LuserId

        //      }).ToList()
        //   }).FirstOrDefault();





        //        //SalesItemsModel a = new SalesItemsModel { Name = "abc", Amount = 2.5, Id = 1, IsDelete = false, Price = 2.5, Quantity = 1, SalesId = 5};
        //        //purchase.Items.Add(a);
        //        return Json(new { Success = 1, purchase = purchase, ex = "Data Load Successfully" });
        //    //return Json(new { Success = 1, purchase = purchase, ex = "Data Load Successfully" });
        //}
        //else
        //{

        //    var purchase = purchasequery
        //   .Include(x => x.ItemsCategory).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
        //   .Include(x => x.Items).ThenInclude(x => x.PurchaseModel)
        //   .Include(x => x.PurchasePayments).ThenInclude(x => x.Transaction)
        //   .Select(p => new
        //   {
        //       p.Id,
        //       p.SupplierId,
        //       p.CustomerId,
        //       CustomerName = p.CustomerModel.Name,
        //       p.ShipVia,
        //       p.ShippingAddress,
        //       p.PrimaryAddress,
        //       p.PurchaseDate,
        //       p.DueDate,
        //       p.PurchaseCode,
        //       p.PermitNo,
        //       p.Remarks,
        //       p.PaymentTermsId,
        //       p.DocTypeId,
        //       p.EmailId,
        //       TermsId = p.PaymentTermsId,
        //       TermName = p.PaymentTermsInfo.TermName,
        //       p.FilePath,
        //       PaidAmount = p.PurchasePayments.Sum(x => x.Amount),
        //       NetAmount = p.NetAmount,
        //       ItemsCategory = p.ItemsCategory.Where(x => x.IsDelete == false).Select(x =>

        //          //VoucherSubs = p.VoucherSubs.Select(x =>

        //          new
        //          {
        //              Id = isCopy == 0 ? x.Id : 0,
        //              //x.SLNo,
        //              x.AccId,
        //              AccName = x.Acc_ChartOfAccount.AccName,
        //              AccCode = x.Acc_ChartOfAccount.AccCode,
        //              GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
        //              CustomerId = x.CustomerId,
        //              Name = x.Customers.Name,
        //              x.Amount,
        //              x.Description,
        //              x.IsBillable,
        //              x.IsTax,
        //              x.ComId,
        //              x.LuserId
        //          }).ToList(),
        //       Items = p.Items.Where(x => x.IsDelete == false).Select(x =>

        //      //VoucherSubs = p.VoucherSubs.Select(x =>

        //      new
        //      {
        //          Id = isCopy == 0 ? x.Id : 0,
        //          //x.SLNo,
        //          x.ProductId,
        //          ProductName = x.Product.Name,
        //          productCode = x.Product.Code,
        //          CustomerId = x.CustomerId,
        //          Name = x.ItemWiseCustomer.Name,
        //          x.Amount,
        //          x.Price,
        //          x.Description,
        //          x.QTY,
        //          x.SKU,
        //          x.Rate,
        //          x.Quantity,
        //          x.ComId,
        //          x.LuserId

        //      }).ToList()
        //   }).FirstOrDefault();


        //    if ()


        //        //SalesItemsModel a = new SalesItemsModel { Name = "abc", Amount = 2.5, Id = 1, IsDelete = false, Price = 2.5, Quantity = 1, SalesId = 5};
        //        //purchase.Items.Add(a);
        //        return Json(new { Success = 1, purchase = purchase, ex = "Data Load Successfully" });
        //    //return Json(new { Success = 1, purchase = purchase, ex = "Data Load Successfully" });

        //}

        //po get prev some codes ends



        //public ActionResult DeleteVoucher(int VoucherId)
        //{
        //    var model = _accVoucherRepository.Find(VoucherId);
        //    if (model != null)
        //    {
        //        _accVoucherRepository.Delete(model);


        //        TempData["Message"] = "Data Delete Successfully";
        //        TempData["Status"] = "3";
        //        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.VoucherNo);


        //        return RedirectToAction("VoucherList");
        //    }
        //    return RedirectToAction("VoucherList");
        //}

        [HttpGet]
        [AllowAnonymous]
        public JsonResult DeleteVoucher(int VoucherId)
        {
            try
            {
                var model = _accVoucherRepository.Find(VoucherId);
                if (model != null)
                {

                    var approvallist = transactionApprovalStatusRepository.All().Where(x => x.VoucherId == VoucherId).ToList();
                    transactionApprovalStatusRepository.RemoveRange(approvallist);

                    _accVoucherRepository.Delete(model);


                    TempData["Message"] = "Data Delete Successfully";
                    TempData["Status"] = "3";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.VoucherNo);


                    return Json(new { success = "1", msg = "Deleted Successfully" });
                }
                return Json(new { success = "0", msg = "No items found to delete." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }


        }
        #endregion

        #region AuditLog

        [AllowAnonymous]
        public IActionResult AuditLog()
        {
            return View();
        }

        [AllowAnonymous]
        public IActionResult GetAuditLogList(int? doctypeId, string searchquery = "", int page = 1, decimal size = 10)
        {
            var auditList = _auditLogRepository.All();

            if(doctypeId != null)
            {
                auditList = auditList.Where(x => x.DocTypeId == doctypeId);
            }
            var taburesquest = JsonConvert.DeserializeObject<TabulatorRequest>(searchquery);

            foreach (var item in taburesquest.Filter)
            {
                if (item.Field == "DocType")
                {
                    auditList = auditList.Where(x => x.DocType.ToLower().Contains(item.Value.ToLower()));

                }
            }

            decimal TotalRecordCount = auditList.Count();
            var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
            var PageCount = Math.Ceiling(PageCountabc);
            decimal skip = (page - 1) * size;

            var query = from e in auditList

                        select new
                        {
                            e.Id,
                            e.TransactionId,
                            e.Action,
                            e.DocType,
                            e.DocTypeId,
                            CreateDate = ((DateTime)e.CreateDate).ToString("dd-MMM-yyyy"),
                            e.KeyValue
                        };

            var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();// Take(50);
            var pageinfo = new PagingInfo();
            pageinfo.PageCount = int.Parse(PageCount.ToString());
            pageinfo.PageNo = page;
            pageinfo.PageSize = int.Parse(size.ToString());
            pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());
            return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult GetAuditLogDetails(string DocType, int Id, string TransactionId)
        {
            try
            {
                var auditDetails = _auditLogRepository.Find(Id);

                              

                return Json(new { success = "1", msg = "Data Loaded Successfully", KeyValue = auditDetails.KeyValue});
            }
            catch
            {

                return Json(new { success = "0", msg = "Occuring error while loading" });

            }

        }


        #endregion

        #region

        public class treechildren
        {
            public int id { get; set; } // found
            public string? name { get; set; }
            public string? acccode { get; set; }

            public string? description { get; set; } // found

            public string? accType { get; set; }
            public string? mappedTo { get; set; } // found
            public int mappedToAccountId { get; set; } //found

            public int? datalevel { get; set; } //found
            public virtual ICollection<treechildren> children { get; set; } //found
            public virtual treedata data { get; set; } //found

            public int? parentID { get; set; } // found
        }

        public class treedata
        {
            public int ID { get; set; }

            public string[]? Action { get; set; }
            public string? Account { get; set; }

            public Nullable<Decimal> col_11 { get; set; }
            public Nullable<Decimal> col_12 { get; set; }

            public Nullable<Decimal> col_13 { get; set; }
            public Nullable<Decimal> col_14 { get; set; }
            public Nullable<Decimal> col_15 { get; set; }

            public Nullable<Decimal> col_16 { get; set; }
            public Nullable<Decimal> col_17 { get; set; }
            public Nullable<Decimal> col_18 { get; set; }

            public Nullable<Decimal> col_19 { get; set; }
            public Nullable<Decimal> col_20 { get; set; }
            public Nullable<Decimal> col_21 { get; set; }

            public Nullable<Decimal> col_22 { get; set; }

            public int col_0 { get; set; }
            public int ParentId { get; set; }

            public int? AccId { get; set; }
            //[ForeignKey("AccId")]
            //public virtual AccountHeadModel? AccountInfo { get; set; }
        }





        public class treechildrenTrialBalance
        {
            public int id { get; set; } // found
            public string? name { get; set; }
            public string? acccode { get; set; }

            public string? description { get; set; } // found

            public string? accType { get; set; }
            public string? mappedTo { get; set; } // found
            public int mappedToAccountId { get; set; } //found

            public int? datalevel { get; set; } //found
            public virtual ICollection<treechildrenTrialBalance> children { get; set; } //found
            public virtual treedataTrialBalance data { get; set; } //found

            public int? parentID { get; set; } // found
        }
        public class treedataTrialBalance
        {
            public int ID { get; set; }

            public string[]? Action { get; set; }
            public string? Account { get; set; }

            public Nullable<Decimal> col_Jan { get; set; }
            public Nullable<Decimal> col_Feb { get; set; }

            public Nullable<Decimal> col_Mar { get; set; }
            public Nullable<Decimal> col_Apr { get; set; }
            public Nullable<Decimal> col_May { get; set; }

            public Nullable<Decimal> col_Jun { get; set; }
            public Nullable<Decimal> col_Jul { get; set; }
            public Nullable<Decimal> col_Aug { get; set; }

            public Nullable<Decimal> col_Sep { get; set; }
            public Nullable<Decimal> col_Oct { get; set; }
            public Nullable<Decimal> col_Nov { get; set; }

            public Nullable<Decimal> col_Dec { get; set; }

            public int col_0 { get; set; }
            public int ParentId { get; set; }

            public int? AccId { get; set; }
            //[ForeignKey("AccId")]
            //public virtual AccountHeadModel? AccountInfo { get; set; }
        }


        //public abstract class RecursiveEntity<TEntity> : treechildren, IRecursiveEntity<TEntity> where TEntity : RecursiveEntity<TEntity>
        //{
        //    public virtual TEntity Parent { get; set; }
        //    public ICollection<TEntity> Children { get; set; }
        //}


        //public IEnumerable<TEntity> Get<TEntity>(Expression<Func<TEntity, bool>> filter) where TEntity : RecursiveEntity<TEntity>
        //{
        //    foreach (TEntity entity in Set<TEntity>().Where(e => e.Parent == null).Where(filter))
        //    {
        //        GetChildren(entity, filter);
        //        yield return entity;
        //    }
        //}

        //private void GetChildren<TEnity>(TEnity parent, Expression<Func<TEnity, bool>> childFilter) where TEnity : RecursiveEntity<TEnity>
        //{
        //    Entry(parent).Collection(e => e.Children).Query().Where(childFilter).Load();
        //    // Entry(parent).Reference(e => e.Parent).Load(); // I think this shouldn't be necessary because loading the children will load the parent on them

        //    if (parent.Children != null)
        //    {
        //        foreach (TEnity child in parent.Children)
        //        {
        //            GetChildren(child, childFilter);
        //        }
        //    }
        //}



        public treechildren GetTreeView(treechildren childdata, int? ParentId, IList<AccountHeadModel> allAccountHeadList, IList<treedata> TrialBalanceReport)
        {
            try
            {

                var accountchilddata = allAccountHeadList
                    //.Include(x => x.ChildrenAccountList)
                    .Where(x => x.ParentId == ParentId)
                    .Select(p => new treechildren
                    {
                        id = p.Id,
                        acccode = p.AccCode,
                        name = p.AccName,
                        description = p.AccName,
                        mappedTo = p.AccName,
                        accType = p.AccType,
                        //mappedToAccountId = 5,
                        datalevel = p.LevelId,
                        parentID = p.ParentId,
                        children = new List<treechildren>(),
                        //children = p.ChildrenAccountList.Where(x => x.IsDelete == false).Select(x =>
                        //new treechildren
                        //{
                        //    id = x.Id,
                        //    name = x.AccName,
                        //    description = x.AccName,
                        //    mappedTo = x.AccName,
                        //    mappedToAccountId = 0,
                        //    datalevel = x.LevelId,
                        //    data = null
                        //}).ToList(),
                        data = TrialBalanceReport.Where(x => x.ID == p.Id).FirstOrDefault()


                    }).ToList();

                if (accountchilddata.Count > 0)
                {
                    foreach (var item in accountchilddata.OrderBy(x => x.acccode))
                    {
                        //var submenu = item.children.Count();

                        //if (submenu > 0)
                        {
                            var x = GetTreeView(item, item.id, allAccountHeadList, TrialBalanceReport);

                            childdata.children.Add(x);

                            //if (x.children != null)
                            //{
                            //    childdata.children.Add(x);

                            //}
                            //else
                            //{
                            //    childdata.children.Add(item);
                            //}

                            //GetTreeView(i.ChildrenAccountList.ToList(), item.Id);
                        }

                    }
                    return childdata;
                }
                return childdata;
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex);
                return null;

            }
        }


        // commenting by fathema... for temporarily


        //public object SummaryOfChildren_BalanceSheet(int parentKey,DataTable ListOfChildData, int? BaseParentId)
        //    {
        //        var sumchilddata = new treedata();



        //            DataRow[] filteredRows = ListOfChildData.Select("ParentId == " + parentKey);



        //    var groupedData = filteredRows.GroupBy(row => row["ParentId"]);

        //    // Loop through the groups and print out the data
        //    foreach (var group in groupedData)
        //    {
        //        Console.WriteLine("Group: {0}", group.Key);
        //        foreach (DataRow row in group)
        //        {
        //            Console.WriteLine("{0} - {1}", row["ID"], row["Name"]);
        //        }
        //        Console.WriteLine();
        //    }



        //    var ChildSummaryData = ListOfChildData.Select("ParentId == " + parentKey) //.GroupBy(p => p.vPaymentType.TypeName);
        //        .GroupBy(x => new { x.ParentId })
        //        .Select(g => new
        //        {
        //            CountData = g.Count(),
        //            Sum_Col11 = g.Sum(x => x.col_11),
        //            Sum_Col12 = g.Sum(x => x.col_12),
        //            Sum_Col13 = g.Sum(x => x.col_13)

        //        }).FirstOrDefault();//g.Sum(x => x.Profit) //g.Sum(x => x.NetAmount) - g.Sum(x => x.FinalCostingPrice) 


        //        if (ChildSummaryData != null)
        //        {
        //            sumchilddata.AccId = parentKey;
        //            sumchilddata.ID = parentKey;

        //            sumchilddata.Account = parentKey.ToString();
        //            sumchilddata.ParentId = BaseParentId.GetValueOrDefault();
        //            sumchilddata.col_0 = ChildSummaryData.CountData;

        //            sumchilddata.col_11 = ChildSummaryData.Sum_Col11;
        //            sumchilddata.col_12 = ChildSummaryData.Sum_Col12;
        //            sumchilddata.col_13 = ChildSummaryData.Sum_Col13;
        //            sumchilddata.col_14 = ChildSummaryData.Sum_Col14;
        //            sumchilddata.col_15 = ChildSummaryData.Sum_Col15;
        //            sumchilddata.col_16 = ChildSummaryData.Sum_Col16;
        //            sumchilddata.col_17 = ChildSummaryData.Sum_Col17;
        //            sumchilddata.col_18 = ChildSummaryData.Sum_Col18;
        //            sumchilddata.col_19 = ChildSummaryData.Sum_Col19;
        //            sumchilddata.col_20 = ChildSummaryData.Sum_Col20;
        //            sumchilddata.col_21 = ChildSummaryData.Sum_Col21;
        //            sumchilddata.col_22 = ChildSummaryData.Sum_Col22;

        //            return sumchilddata;

        //        }

        //        else
        //            return null;
        //    }






        public treedata SummaryOfChildren(int parentKey, List<treedata> ListOfChildData, int? BaseParentId)
        {
            var sumchilddata = new treedata();

            var ChildSummaryData = ListOfChildData.Where(x => x.ParentId == parentKey) //.GroupBy(p => p.vPaymentType.TypeName);
            .GroupBy(x => new { x.ParentId })
            .Select(g => new
            {
                CountData = g.Count(),
                Sum_Col11 = g.Sum(x => x.col_11),
                Sum_Col12 = g.Sum(x => x.col_12),
                Sum_Col13 = g.Sum(x => x.col_13),
                Sum_Col14 = g.Sum(x => x.col_14),
                Sum_Col15 = g.Sum(x => x.col_15),
                Sum_Col16 = g.Sum(x => x.col_16),
                Sum_Col17 = g.Sum(x => x.col_17),
                Sum_Col18 = g.Sum(x => x.col_18),
                Sum_Col19 = g.Sum(x => x.col_19),
                Sum_Col20 = g.Sum(x => x.col_20),
                Sum_Col21 = g.Sum(x => x.col_21),
                Sum_Col22 = g.Sum(x => x.col_22),

            }).FirstOrDefault();//g.Sum(x => x.Profit) //g.Sum(x => x.NetAmount) - g.Sum(x => x.FinalCostingPrice) 


            if (ChildSummaryData != null)
            {
                sumchilddata.AccId = parentKey;
                sumchilddata.ID = parentKey;

                sumchilddata.Account = parentKey.ToString();
                sumchilddata.ParentId = BaseParentId.GetValueOrDefault();
                sumchilddata.col_0 = ChildSummaryData.CountData;

                sumchilddata.col_11 = ChildSummaryData.Sum_Col11;
                sumchilddata.col_12 = ChildSummaryData.Sum_Col12;
                sumchilddata.col_13 = ChildSummaryData.Sum_Col13;
                sumchilddata.col_14 = ChildSummaryData.Sum_Col14;
                sumchilddata.col_15 = ChildSummaryData.Sum_Col15;
                sumchilddata.col_16 = ChildSummaryData.Sum_Col16;
                sumchilddata.col_17 = ChildSummaryData.Sum_Col17;
                sumchilddata.col_18 = ChildSummaryData.Sum_Col18;
                sumchilddata.col_19 = ChildSummaryData.Sum_Col19;
                sumchilddata.col_20 = ChildSummaryData.Sum_Col20;
                sumchilddata.col_21 = ChildSummaryData.Sum_Col21;
                sumchilddata.col_22 = ChildSummaryData.Sum_Col22;

                return sumchilddata;

            }

            else
                return null;
        }

        public treechildrenTrialBalance GetTreeViewTrialBalance(treechildrenTrialBalance childdata, int? ParentId, IList<AccountHeadModel> allAccountHeadList, IList<treedataTrialBalance> TrialBalanceReport)
        {
            try
            {

                var accountchilddata = allAccountHeadList
                    //.Include(x => x.ChildrenAccountList)
                    .Where(x => x.ParentId == ParentId)
                    .Select(p => new treechildrenTrialBalance
                    {
                        id = p.Id,
                        acccode = p.AccCode,
                        name = p.AccName,
                        description = p.AccName,
                        mappedTo = p.AccName,
                        accType = p.AccType,
                        //mappedToAccountId = 5,
                        datalevel = p.LevelId,
                        parentID = p.ParentId,
                        children = new List<treechildrenTrialBalance>(),
                        //children = p.ChildrenAccountList.Where(x => x.IsDelete == false).Select(x =>
                        //new treechildren
                        //{
                        //    id = x.Id,
                        //    name = x.AccName,
                        //    description = x.AccName,
                        //    mappedTo = x.AccName,
                        //    mappedToAccountId = 0,
                        //    datalevel = x.LevelId,
                        //    data = null
                        //}).ToList(),
                        data = TrialBalanceReport.Where(x => x.ID == p.Id).FirstOrDefault()


                    }).ToList();

                if (accountchilddata.Count > 0)
                {
                    foreach (var item in accountchilddata.OrderBy(x => x.acccode))
                    {
                        //var submenu = item.children.Count();

                        //if (submenu > 0)
                        {
                            var x = GetTreeViewTrialBalance(item, item.id, allAccountHeadList, TrialBalanceReport);

                            childdata.children.Add(x);

                            //if (x.children != null)
                            //{
                            //    childdata.children.Add(x);

                            //}
                            //else
                            //{
                            //    childdata.children.Add(item);
                            //}

                            //GetTreeView(i.ChildrenAccountList.ToList(), item.Id);
                        }

                    }
                    return childdata;
                }
                return childdata;
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex);
                return null;

            }
        }

        public treedataTrialBalance SummaryOfChildrenTrialBalance(int parentKey, List<treedataTrialBalance> ListOfChildData, int? BaseParentId)
        {
            var sumchilddata = new treedataTrialBalance();

            var ChildSummaryData = ListOfChildData.Where(x => x.ParentId == parentKey) //.GroupBy(p => p.vPaymentType.TypeName);
            .GroupBy(x => new { x.ParentId })
            .Select(g => new
            {
                CountData = g.Count(),
                Sum_Col11 = g.Sum(x => x.col_Jan),
                Sum_Col12 = g.Sum(x => x.col_Feb),
                Sum_Col13 = g.Sum(x => x.col_Mar),
                Sum_Col14 = g.Sum(x => x.col_Apr),
                Sum_Col15 = g.Sum(x => x.col_May),
                Sum_Col16 = g.Sum(x => x.col_Jun),
                Sum_Col17 = g.Sum(x => x.col_Jul),
                Sum_Col18 = g.Sum(x => x.col_Aug),
                Sum_Col19 = g.Sum(x => x.col_Sep),
                Sum_Col20 = g.Sum(x => x.col_Oct),
                Sum_Col21 = g.Sum(x => x.col_Nov),
                Sum_Col22 = g.Sum(x => x.col_Dec),

            }).FirstOrDefault();//g.Sum(x => x.Profit) //g.Sum(x => x.NetAmount) - g.Sum(x => x.FinalCostingPrice) 


            if (ChildSummaryData != null)
            {
                sumchilddata.AccId = parentKey;
                sumchilddata.ID = parentKey;

                sumchilddata.Account = parentKey.ToString();
                sumchilddata.ParentId = BaseParentId.GetValueOrDefault();
                sumchilddata.col_0 = ChildSummaryData.CountData;

                sumchilddata.col_Jan = ChildSummaryData.Sum_Col11;
                sumchilddata.col_Feb = ChildSummaryData.Sum_Col12;
                sumchilddata.col_Mar = ChildSummaryData.Sum_Col13;
                sumchilddata.col_Apr = ChildSummaryData.Sum_Col14;
                sumchilddata.col_May = ChildSummaryData.Sum_Col15;
                sumchilddata.col_Jun = ChildSummaryData.Sum_Col16;
                sumchilddata.col_Jul = ChildSummaryData.Sum_Col17;
                sumchilddata.col_Aug = ChildSummaryData.Sum_Col18;
                sumchilddata.col_Sep = ChildSummaryData.Sum_Col19;
                sumchilddata.col_Oct = ChildSummaryData.Sum_Col20;
                sumchilddata.col_Nov = ChildSummaryData.Sum_Col21;
                sumchilddata.col_Dec = ChildSummaryData.Sum_Col22;

                return sumchilddata;

            }

            else
                return null;
        }



        [AllowAnonymous]
        public ActionResult GetDemoPdfLandscape()
        {
            //string filePath = @"C:\Atrai\Atrai\wwwroot\Content\TrialBalanceReporting\TrialBalance_Landscape.pdf";
            //var path = Path.Combine(
            //         _webHostEnvironment.WebRootPath, "Content\\TrialBalanceReporting",
            //         "TrialBalance_Landscape.pdf");
            var path = "Content/TrialBalanceReporting/TrialBalance_Landscape.pdf";
            //string path = @"~/Files/TrialBalance_Landscape.pdf";

            //byte[] fileBytes = System.IO.File.ReadAllBytes(path);
            //return File(fileBytes, "application/pdf");
            return Ok(path);
        }

        [AllowAnonymous]
        public ActionResult GetDemoPdfPortrait()
        {
            //string filePath = @"C:\Atrai\Atrai\wwwroot\Content\TrialBalanceReporting\TrialBalance_Portrait.pdf";
            //var path = Path.Combine(
            //         Directory.GetCurrentDirectory(), "wwwroot/Content/TrialBalanceReporting",
            //         "TrialBalance_Portrait.pdf");
            var path = "Content/TrialBalanceReporting/TrialBalance_Portrait.pdf";
            //var path = Path.Combine(
            //        _webHostEnvironment.WebRootPath, "Content\\TrialBalanceReporting",
            //        "TrialBalance_Portrait.pdf");
            //string path = @"~/Files/TrialBalance_Portrait.pdf";
            //byte[] fileBytes = System.IO.File.ReadAllBytes(path);
            //return File(fileBytes, "application/pdf");
            return Ok(path);
        }



        [AllowAnonymous]
        public JsonResult GetBalanceSheet(int StrId)
        {
            try
            {

                //var testdata = _accountHeadRepository.GetRecursive(x=>x.Children != null);
                //var testdata = _accountHeadRepository.All().Include(x=>x.Children);

                //_accountHeadRepository.GetRecursive()

                var fiscalmonthlist = _accFiscalMonthRepository.All().Where(x => x.FYId == StrId).ToList();

                List<string> list = new List<string> { "Count" };
                foreach (var item in fiscalmonthlist)
                {
                    list.Add(item.dtFrom.Substring(0, 4));
                }
                string[] array = new string[fiscalmonthlist.Count() + 1];
                list.CopyTo(array);

                //var monthname = string.Join(", ", list);


                var FyId = StrId;
                var ComId = HttpContext.Session.GetInt32("ComId");

                var quary = $"Exec [Acc_TrialBalance_PivotItem_Month] '" + ComId + "','" + FyId + "'";
                SqlParameter[] parameters = new SqlParameter[2];
                parameters[0] = new SqlParameter("@Comid", ComId);
                parameters[1] = new SqlParameter("@FYId", FyId);
                List<treedata> TrialBalanceReport = Helper.ExecProcMapTList<treedata>("[Acc_TrialBalance_PivotItem_Month]", parameters);
                var allAccountHeadList = _accountHeadRepository.All().Include(x => x.ChildrenAccountList).ToList();//x=>x.ChildrenAccountList



                foreach (var item in allAccountHeadList.Where(x => x.AccType == "G").OrderByDescending(x => x.Id))
                {
                    var summaryList = new List<treedata>();
                    var xyz = SummaryOfChildren(item.Id, TrialBalanceReport.Where(x => x.ParentId == item.Id).ToList(), item.ParentId);

                    if (xyz != null)
                    {
                        summaryList.Add(xyz);

                    }
                    TrialBalanceReport.AddRange(summaryList);
                }







                //var accountheadlist = new List<treechildren>();
                var accountdata = allAccountHeadList.Where(x => x.LevelId == 0).Select(p => new treechildren
                {
                    id = p.Id,
                    acccode = p.AccCode,
                    name = p.AccName,
                    description = p.AccName,
                    mappedTo = p.AccName,
                    accType = p.AccType,
                    //mappedToAccountId = 5,
                    datalevel = p.LevelId,
                    parentID = p.ParentId,
                    children = new List<treechildren>(),
                    //children = p.ChildrenAccountList.Where(x => x.IsDelete == false).Select(x =>
                    //new treechildren
                    //{
                    //    id = x.Id,
                    //    name = x.AccName,
                    //    description = x.AccName,
                    //    mappedTo = x.AccName,
                    //    mappedToAccountId = 0,
                    //    datalevel = x.LevelId,
                    //    data = null
                    //}).ToList(),
                    data = TrialBalanceReport.Where(x => x.ID == p.Id).FirstOrDefault()

                }).ToList(); //.Include(x => x.ChildrenAccountList).Where(x => x.LevelId == 0).ToList();

                foreach (var item in accountdata)
                {
                    var x = GetTreeView(item, item.id, allAccountHeadList, TrialBalanceReport);

                    if (x != null)
                    {
                        item.children.Add(x);

                    }

                };
                return Json(new { monthname = list, reportdata = accountdata.ToList() });



            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetBalanceSheetQuickBook(string rpttype, string criteria, string Months, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptBalanceSheet_MonthSegment";

                                if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                {
                                    queryname = "Acc_rptBalanceSheetQuicBook";
                                }

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);


                                #region newcodechecking
                                var dataTable = datasetabc.Tables[0];
                                List<dynamic> dynamicObjects = new List<dynamic>();
                                Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                                foreach (DataRow row in dataTable.Rows)
                                {
                                    // Check if the account type is 'G' or 'L'
                                    string accType = row.Field<string>("AccType");
                                    if (accType == "G" || accType == "L")
                                    {
                                        dynamic dynamicObject = new ExpandoObject();

                                        foreach (DataColumn col in dataTable.Columns)
                                        {
                                            string columnName = col.ColumnName;
                                            object value = row[col];

                                            ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                        }

                                        Int64 parentId = row.Field<Int64>("ParentId");

                                        if (parentId == 0)
                                        {
                                            dynamicObjects.Add(dynamicObject);
                                        }
                                        else
                                        {
                                            if (parents.TryGetValue(parentId, out dynamic? parent))
                                            {
                                                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                                {
                                                    parent.Children.Add(dynamicObject);
                                                }
                                                else
                                                {
                                                    parent.Children = new List<dynamic> { dynamicObject };
                                                }
                                            }
                                            else
                                            {
                                                dynamic parentObject = new ExpandoObject();
                                                parentObject.Children = new List<dynamic> { dynamicObject };
                                                parents[parentId] = parentObject;
                                            }
                                        }

                                        parents[row.Field<Int64>("AccId")] = dynamicObject;
                                    }
                                }

                                foreach (var parent in parents.Values)
                                {
                                    if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                    {
                                        foreach (var child in parent.Children)
                                        {
                                            Int64 childId = child.AccId;
                                            if (parents.TryGetValue(childId, out dynamic? childNode))
                                            {
                                                if (((IDictionary<string, object>)child).ContainsKey("Children"))
                                                {
                                                    childNode.Children = child.Children;
                                                }
                                            }
                                        }
                                    }
                                }

                                foreach (var rootNode in dynamicObjects)
                                {
                                    Int64 rootNodeId = rootNode.AccId;
                                    if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                    {
                                        rootNode.Children = rootNodeWithChildren.Children;
                                    }
                                }


                                #endregion new code checking


                                return Json(new { data = dynamicObjects, ex = "" });




                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetIncomeSatementQuickBook(string rpttype, string criteria, string Months, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptIncomeStatement_MonthSegment";

                                if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                {
                                    queryname = "Acc_rptIncomeStatementQuicBook";
                                }

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                                SqlParameter[] parameters = new SqlParameter[10];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
                                //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


                                #region newcodechecking
                                var dataTable = datasetabc.Tables[0];
                                List<dynamic> dynamicObjects = new List<dynamic>();
                                Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                                foreach (DataRow row in dataTable.Rows)
                                {
                                    // Check if the account type is 'G'
                                    if (row.Field<string>("AccType") == "G")
                                    {
                                        dynamic dynamicObject = new ExpandoObject();

                                        foreach (DataColumn col in dataTable.Columns)
                                        {
                                            string columnName = col.ColumnName;
                                            object value = row[col];

                                            ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                        }

                                        Int64 parentId = row.Field<Int64>("ParentId");

                                        if (parentId == 0)
                                        {
                                            dynamicObjects.Add(dynamicObject);
                                        }
                                        else
                                        {
                                            if (parents.TryGetValue(parentId, out dynamic? parent))
                                            {
                                                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                                {
                                                    parent.Children.Add(dynamicObject);
                                                }
                                                else
                                                {
                                                    parent.Children = new List<dynamic> { dynamicObject };
                                                }
                                            }
                                            else
                                            {
                                                dynamic parentObject = new ExpandoObject();
                                                parentObject.Children = new List<dynamic> { dynamicObject };
                                                parents[parentId] = parentObject;
                                            }
                                        }

                                        parents[row.Field<Int64>("AccId")] = dynamicObject;
                                    }
                                }
                                // Build the tree
                                foreach (var parent in parents.Values)
                                {
                                    if (parent.Children != null)
                                    {
                                        List<dynamic> updatedChildren = new List<dynamic>();
                                        foreach (var child in parent.Children)
                                        {
                                            Int64 childId = child.AccId;
                                            if (parents.TryGetValue(childId, out dynamic? childNode))
                                            {
                                                if (childNode.Children != null)
                                                {
                                                    childNode.Children.AddRange(child.Children);
                                                }
                                                else
                                                {
                                                    childNode.Children = new List<dynamic>(child.Children);
                                                }
                                                updatedChildren.Add(childNode);
                                            }
                                        }
                                        parent.Children = updatedChildren;
                                    }
                                }


                                // The dynamicObjects list contains the root nodes of the tree
                                foreach (var rootNode in dynamicObjects)
                                {
                                    Int64 rootNodeId = rootNode.AccId;
                                    if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                    {
                                        rootNode.Children = rootNodeWithChildren.Children;
                                    }
                                }

                                // Now you can use the dynamicObjects list to access the root nodes with the complete tree structure

                                #endregion new code checking


                                //var abc = Helper.ConvertDataSetasJSON(datasetabc);


                                return Json(new { data = dynamicObjects, ex = "" });



                                //redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                //return Json(new { Url = redirectUrl });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetBalanceSheetDetailQuickBook(string rpttype, string criteria, string Months, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptBalanceSheetDetailReport_MonthSegment";
                                //var queryname = "Acc_rptBalanceSheetQuicBook";

                                var viewquary = $"Exec {queryname} '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'";


                                SqlParameter[] parameters = new SqlParameter[8];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                //parameters[8] = new SqlParameter("@accid", 0);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
                                //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


                                #region newcodechecking
                                var dataTable = datasetabc.Tables[0];
                                List<dynamic> dynamicObjects = new List<dynamic>();
                                Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                                foreach (DataRow row in dataTable.Rows)
                                {
                                    // Check if the account type is 'G'
                                    if (row.Field<string>("AccType") == "G")
                                    {
                                        dynamic dynamicObject = new ExpandoObject();

                                        foreach (DataColumn col in dataTable.Columns)
                                        {
                                            string columnName = col.ColumnName;
                                            object value = row[col];

                                            ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                        }

                                        Int64 parentId = row.Field<Int64>("ParentId");

                                        if (parentId == 0)
                                        {
                                            dynamicObjects.Add(dynamicObject);
                                        }
                                        else
                                        {
                                            if (parents.TryGetValue(parentId, out dynamic? parent))
                                            {
                                                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                                {
                                                    parent.Children.Add(dynamicObject);
                                                }
                                                else
                                                {
                                                    parent.Children = new List<dynamic> { dynamicObject };
                                                }
                                            }
                                            else
                                            {
                                                dynamic parentObject = new ExpandoObject();
                                                parentObject.Children = new List<dynamic> { dynamicObject };
                                                parents[parentId] = parentObject;
                                            }
                                        }

                                        parents[row.Field<Int64>("AccId")] = dynamicObject;
                                    }
                                }
                                // Build the tree
                                foreach (var parent in parents.Values)
                                {
                                    if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                    {
                                        foreach (var child in parent.Children)
                                        {
                                            Int64 childId = child.AccId;
                                            if (parents.TryGetValue(childId, out dynamic? childNode))
                                            {
                                                if (((IDictionary<string, object>)child).ContainsKey("Children"))
                                                {
                                                    childNode.Children = child.Children;
                                                }
                                            }
                                        }
                                    }
                                }

                                // The dynamicObjects list contains the root nodes of the tree
                                foreach (var rootNode in dynamicObjects)
                                {
                                    Int64 rootNodeId = rootNode.AccId;
                                    if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                    {
                                        rootNode.Children = rootNodeWithChildren.Children;
                                    }
                                }

                                // Now you can use the dynamicObjects list to access the root nodes with the complete tree structure

                                #endregion new code checking


                                //var abc = Helper.ConvertDataSetasJSON(datasetabc);


                                return Json(new { data = dynamicObjects, ex = "" });



                                //redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                //return Json(new { Url = redirectUrl });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetBalanceSheetComparisonQuickBook(string rpttype, string criteria, string Months, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string valueOfPercentOfColumn
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptBalanceSheetQuicBook";
                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptBalanceSheetQuicBook";
                                //}
                                if (Months.ToUpper().ToString() == "Months".ToUpper() || Months.ToUpper().ToString() == "Months PY".ToUpper())
                                {
                                    queryname = "Acc_rptBalanceSheetComparison_MonthSegment";
                                }

                                var viewquary = $"Exec {queryname} '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "','" + Months + "', '" + ChangeValueTk + "', '" + ChangeValuePercentage + "'"; //, '" + valueOfPercentOfColumn + "'


                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                //parameters[12] = new SqlParameter("@valueOfPercentOfColumn", valueOfPercentOfColumn);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
                                //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


                                #region newcodechecking
                                var dataTable = datasetabc.Tables[0];
                                List<dynamic> dynamicObjects = new List<dynamic>();
                                Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                                foreach (DataRow row in dataTable.Rows)
                                {
                                    // Check if the account type is 'G'
                                    if (row.Field<string>("AccType") == "G")
                                    {
                                        dynamic dynamicObject = new ExpandoObject();

                                        foreach (DataColumn col in dataTable.Columns)
                                        {
                                            string columnName = col.ColumnName;
                                            object value = row[col];

                                            ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                        }

                                        Int64 parentId = row.Field<Int64>("ParentId");

                                        if (parentId == 0)
                                        {
                                            dynamicObjects.Add(dynamicObject);
                                        }
                                        else
                                        {
                                            if (parents.TryGetValue(parentId, out dynamic? parent))
                                            {
                                                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                                {
                                                    parent.Children.Add(dynamicObject);
                                                }
                                                else
                                                {
                                                    parent.Children = new List<dynamic> { dynamicObject };
                                                }
                                            }
                                            else
                                            {
                                                dynamic parentObject = new ExpandoObject();
                                                parentObject.Children = new List<dynamic> { dynamicObject };
                                                parents[parentId] = parentObject;
                                            }
                                        }

                                        parents[row.Field<Int64>("AccId")] = dynamicObject;
                                    }
                                }
                                // Build the tree
                                foreach (var parent in parents.Values)
                                {
                                    if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                    {
                                        foreach (var child in parent.Children)
                                        {
                                            Int64 childId = child.AccId;
                                            if (parents.TryGetValue(childId, out dynamic? childNode))
                                            {
                                                if (((IDictionary<string, object>)child).ContainsKey("Children"))
                                                {
                                                    childNode.Children = child.Children;
                                                }
                                            }
                                        }
                                    }
                                }

                                // The dynamicObjects list contains the root nodes of the tree
                                foreach (var rootNode in dynamicObjects)
                                {
                                    Int64 rootNodeId = rootNode.AccId;
                                    if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                    {
                                        rootNode.Children = rootNodeWithChildren.Children;
                                    }
                                }

                                // Now you can use the dynamicObjects list to access the root nodes with the complete tree structure

                                #endregion new code checking


                                //var abc = Helper.ConvertDataSetasJSON(datasetabc);


                                return Json(new { data = dynamicObjects, ex = "" });



                                //redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                //return Json(new { Url = redirectUrl });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetIncomeStatementQuickBookMahin(string rpttype, string criteria, string Months, string groupBy, string valueofRows, string ChangeValuePercentage, string FromDate, string ToDate, int Id, int IsShowZero, int accid, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0, int currency = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var CurrencyId = HttpContext.Session.GetInt32("defaultcurrencyid");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;

                var CurrencyInfo = new object();
                if (currency != 0)
                {
                    CurrencyInfo = _countryRepository.All().Where(x => x.Id == CurrencyId)
             .Select(x => new
             {
                 x.Id,
                 x.CultureInfo,
                 x.CurrencySymbol,
                 x.CurrencyShortName
             }).FirstOrDefault();
                }


                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1 && Months != "Customer" && Months != "Product/Service" && Months != "Vendors")
                            {

                                var queryname = "Acc_rptIncomeStatement_MonthSegmentQB";

                                if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                {
                                    queryname = "Acc_rptIncomeStatementQB";
                                }
                                if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                {
                                    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                }

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "','" + valueofRows + "','" + ChangeValuePercentage + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, currencysymbol = CurrencyInfo, ex = "" });


                            }

                            if (isViewPageReport == 1 && Months == "Customer")
                            {
                                var queryname = "Acc_rptTotalIncomeStatementQB";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "','" + Months + "', '" + dtFrom + "' ,'" + dtTo + "','" + Id + "','" + IsShowZero + "','" + Currency + "','" + accid + "','" + valueofRows + "','" + ChangeValuePercentage + "' ";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@ViewType", Months);
                                parameters[4] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[5] = new SqlParameter("@dtTo", dtTo);
                                parameters[6] = new SqlParameter("@Id", Id);
                                parameters[7] = new SqlParameter("@IsShowZero", IsShowZero);
                                parameters[8] = new SqlParameter("@Currency", Currency);
                                parameters[9] = new SqlParameter("@accid", accid);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, currencysymbol = CurrencyInfo, ex = "" });

                            }

                            if (isViewPageReport == 1 && Months == "Product/Service")
                            {
                                var queryname = "Acc_rptTotalIncomeStatementQB";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "','" + Months + "', '" + dtFrom + "' ,'" + dtTo + "','" + Id + "','" + IsShowZero + "','" + Currency + "','" + accid + "','" + valueofRows + "','" + ChangeValuePercentage + "' ";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@ViewType", Months);
                                parameters[4] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[5] = new SqlParameter("@dtTo", dtTo);
                                parameters[6] = new SqlParameter("@Id", Id);
                                parameters[7] = new SqlParameter("@IsShowZero", IsShowZero);
                                parameters[8] = new SqlParameter("@Currency", Currency);
                                parameters[9] = new SqlParameter("@accid", accid);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, currencysymbol = CurrencyInfo, ex = "" });

                            }

                            if (isViewPageReport == 1 && Months == "Vendors")
                            {

                                var queryname = "Acc_rptTotalIncomeStatementQB";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "','" + Months + "', '" + dtFrom + "' ,'" + dtTo + "','" + Id + "','" + IsShowZero + "','" + Currency + "','" + accid + "','" + valueofRows + "','" + ChangeValuePercentage + "' ";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@ViewType", Months);
                                parameters[4] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[5] = new SqlParameter("@dtTo", dtTo);
                                parameters[6] = new SqlParameter("@Id", Id);
                                parameters[7] = new SqlParameter("@IsShowZero", IsShowZero);
                                parameters[8] = new SqlParameter("@Currency", Currency);
                                parameters[9] = new SqlParameter("@accid", accid);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, currencysymbol = CurrencyInfo, ex = "" });


                            }


                            if (isViewPageReport == 2)
                            {

                                //var queryname = "Acc_rptIncomeStatement_MonthSegmentQB";

                                if (Months.ToUpper().ToString() == "Months".ToUpper())
                                {
                                    var queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                    var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "','" + valueofRows + "'  ";
                                    Console.WriteLine(viewquary);
                                    SqlParameter[] parameters = new SqlParameter[11];
                                    parameters[0] = new SqlParameter("@UserId", UserId);
                                    parameters[1] = new SqlParameter("@ComId", ComId);
                                    parameters[2] = new SqlParameter("@Flag", criteria);
                                    parameters[3] = new SqlParameter("@Id", strId);
                                    parameters[4] = new SqlParameter("@IsShowZero", 0);
                                    parameters[5] = new SqlParameter("@Currency", 18);
                                    parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                    parameters[7] = new SqlParameter("@dtTo", dtTo);
                                    parameters[8] = new SqlParameter("@accid", 0);
                                    parameters[9] = new SqlParameter("@ViewType", Months);
                                    parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                    //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                    //parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                    var datasetabc = new System.Data.DataSet();
                                    datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                    // Get the list of month columns (starting from index 8)
                                    List<string> monthColumns = datasetabc.Tables[0].Columns.Cast<System.Data.DataColumn>()
                                        .Skip(8)
                                        .Select(c => c.ColumnName)
                                        .ToList();

                                    // Find columns with all zero values
                                    List<string> columnsToRemove = new List<string>();
                                    foreach (string monthColumn in monthColumns)
                                    {
                                        bool allZero = true;
                                        foreach (System.Data.DataRow row in datasetabc.Tables[0].Rows)
                                        {
                                            if (Convert.ToDouble(row[monthColumn]) != 0.00)
                                            {
                                                allZero = false;
                                                break;
                                            }
                                        }
                                        if (allZero)
                                        {
                                            columnsToRemove.Add(monthColumn);
                                        }
                                    }

                                    // Remove columns with all zero values from the DataTable
                                    foreach (string colName in columnsToRemove)
                                    {
                                        datasetabc.Tables[0].Columns.Remove(colName);
                                    }
                                    return Json(new { data = datasetabc, currencysymbol = CurrencyInfo, ex = "" });

                                }
                                if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                {
                                    var queryname = "Acc_rptIncomeStatementQB";
                                    var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "','" + valueofRows + "'  ";
                                    Console.WriteLine(viewquary);
                                    SqlParameter[] parameters = new SqlParameter[11];
                                    parameters[0] = new SqlParameter("@UserId", UserId);
                                    parameters[1] = new SqlParameter("@ComId", ComId);
                                    parameters[2] = new SqlParameter("@Flag", criteria);
                                    parameters[3] = new SqlParameter("@Id", strId);
                                    parameters[4] = new SqlParameter("@IsShowZero", 0);
                                    parameters[5] = new SqlParameter("@Currency", 18);
                                    parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                    parameters[7] = new SqlParameter("@dtTo", dtTo);
                                    parameters[8] = new SqlParameter("@accid", 0);
                                    parameters[9] = new SqlParameter("@ViewType", Months);
                                    parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                    //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                    //parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                    var datasetabc = new System.Data.DataSet();
                                    datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                    return Json(new { data = datasetabc, currencysymbol = CurrencyInfo, ex = "" });

                                }

                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetIncomeStatementByCustomerQB(string rpttype, string criteria, string valueofRows, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptIncomeStatementByCustomerQB";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }
        [AllowAnonymous]
        public JsonResult GetgeneralLedgerReportQuickBook(string rpttype, string criteria, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptGeneralLedgerReport";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[9];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }
        [AllowAnonymous]
        public JsonResult GetSalesTaxLiabilityReportQuickBook(string rpttype, string criteria, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptSalesTaxLiabilityReport";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[9];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }
        [AllowAnonymous]
        public JsonResult GetBillPaymentListQuickBook(string rpttype, string criteria, string groupBy, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptBillPaymentList";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "','" + groupBy + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[10];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@groupBy", groupBy);
                                parameters[4] = new SqlParameter("@Id", strId);
                                parameters[5] = new SqlParameter("@IsShowZero", 0);
                                parameters[6] = new SqlParameter("@Currency", 18);
                                parameters[7] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[8] = new SqlParameter("@dtTo", dtTo);
                                parameters[9] = new SqlParameter("@accid", 0);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }
        [AllowAnonymous]
        public JsonResult GetExepenseByVendorSummaryQuickBook(string rpttype, string criteria, string valueofRows, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptExpensesByVendorSummary";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }
        [AllowAnonymous]
        public JsonResult GetSalesByCustomerSummaryQuickBook(string rpttype, string criteria, string displayBy, string valueofRows, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptSalesByCustomerSummary";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "','" + displayBy + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@displayBy", displayBy);
                                parameters[4] = new SqlParameter("@Id", strId);
                                parameters[5] = new SqlParameter("@IsShowZero", 0);
                                parameters[6] = new SqlParameter("@Currency", 18);
                                parameters[7] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[8] = new SqlParameter("@dtTo", dtTo);
                                parameters[9] = new SqlParameter("@accid", 0);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetIncomeStatementQuickBook(string rpttype, string criteria, string Months, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptIncomeStatement_MonthSegmentQB";

                                if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                {
                                    queryname = "Acc_rptIncomeStatementQB";
                                }

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
                                //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


                                #region newcodechecking
                                //var dataTable = datasetabc.Tables[0];
                                //List<dynamic> dynamicObjects = new List<dynamic>();
                                //Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                                //foreach (DataRow row in dataTable.Rows)
                                //{
                                //    // Check if the account type is 'G' or 'L'
                                //    string accType = row.Field<string>("AccType");
                                //    if (accType == "G" || accType == "L")
                                //    {
                                //        dynamic dynamicObject = new ExpandoObject();

                                //        foreach (DataColumn col in dataTable.Columns)
                                //        {
                                //            string columnName = col.ColumnName;
                                //            object value = row[col];

                                //            ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                //        }

                                //        Int64 parentId = row.Field<Int64>("ParentId");

                                //        if (parentId == 0)
                                //        {
                                //            dynamicObjects.Add(dynamicObject);
                                //        }
                                //        else
                                //        {
                                //            if (parents.TryGetValue(parentId, out dynamic? parent))
                                //            {
                                //                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                //                {
                                //                    parent.Children.Add(dynamicObject);
                                //                }
                                //                else
                                //                {
                                //                    parent.Children = new List<dynamic> { dynamicObject };
                                //                }
                                //            }
                                //            else
                                //            {
                                //                dynamic parentObject = new ExpandoObject();
                                //                parentObject.Children = new List<dynamic> { dynamicObject };
                                //                parents[parentId] = parentObject;
                                //            }
                                //        }

                                //        parents[row.Field<Int64>("AccId")] = dynamicObject;
                                //    }
                                //}

                                //// Build the tree
                                //foreach (var parent in parents.Values)
                                //{
                                //    if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                //    {
                                //        foreach (var child in parent.Children)
                                //        {
                                //            Int64 childId = child.AccId;
                                //            if (parents.TryGetValue(childId, out dynamic? childNode))
                                //            {
                                //                if (((IDictionary<string, object>)child).ContainsKey("Children"))
                                //                {
                                //                    childNode.Children = child.Children;
                                //                }
                                //            }
                                //        }
                                //    }
                                //}

                                //// The dynamicObjects list contains the root nodes of the tree
                                //foreach (var rootNode in dynamicObjects)
                                //{
                                //    Int64 rootNodeId = rootNode.AccId;
                                //    if(rootNode.AccId!=0 )
                                //    {
                                //        if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                //        {
                                //            rootNode.Children = rootNodeWithChildren.Children;
                                //        }
                                //    }

                                //}

                                // Now you can use the dynamicObjects list to access the root nodes with the complete tree structure

                                #endregion new code checking



                                //var abc = Helper.ConvertDataSetasJSON(datasetabc);


                                return Json(new { data = datasetabc, ex = "" });



                                //redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                //return Json(new { Url = redirectUrl });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        public class Account
        {
            public Int64 AccId { get; set; }
            public Int64 ParentId { get; set; }
            public string? AccType { get; set; }
            public int DataLevel { get; set; }
            public DateTime Date { get; set; }
            public string? TransactionType { get; set; }
            public string? AccCode { get; set; }
            public string? AccName { get; set; }
            public string? Description { get; set; }
            public string? Split { get; set; }
            public decimal Amount { get; set; }
            public decimal Balance { get; set; }



            public List<Account> Children { get; set; }
        }

        [AllowAnonymous]
        public JsonResult GetExpensesbySupplierSummary(string rpttype, string criteria, string displayBy, string valueofRows, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptExpensesBySupplierSummary";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + displayBy + "','" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@displayBy", displayBy);
                                parameters[4] = new SqlParameter("@Id", strId);
                                parameters[5] = new SqlParameter("@IsShowZero", 0);
                                parameters[6] = new SqlParameter("@Currency", 18);
                                parameters[7] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[8] = new SqlParameter("@dtTo", dtTo);
                                parameters[9] = new SqlParameter("@accid", 0);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetSupplierBalanceSummary(string rpttype, string criteria, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptSupplierBalanceSummary";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetSalesbyProductServiceSummary(string rpttype, string criteria, string displayBy, string valueofRows, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptSalesbyProductServiceSummary";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + displayBy + "','" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@displayBy", displayBy);
                                parameters[4] = new SqlParameter("@Id", strId);
                                parameters[5] = new SqlParameter("@IsShowZero", 0);
                                parameters[6] = new SqlParameter("@Currency", 18);
                                parameters[7] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[8] = new SqlParameter("@dtTo", dtTo);
                                parameters[9] = new SqlParameter("@accid", 0);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }



        [AllowAnonymous]
        public JsonResult GetOpenPurchaseOrderList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptOpenPurchaseOrderList";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetOpenPurchaseOrderDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptOpenPurchaseOrderDetail";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetInventoryValuationDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptInventoryValuationDetail";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetPurchasesProductServiceDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptPurchasesProductServiceDetail";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetPurchasesSupplierDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptPurchasesSupplierDetail";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetTransactionListbySupplier(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTransactionListbySupplier";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetTransactionListbyCustomer(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTransactionListbyCustomer";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetTimeActivitiesCustomerDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTimeActivitiesCustomerDetail";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetInvoiceList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptInvoiceList";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }



        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsAPAgeingDetail()
        {
            return View();
        }
        [AllowAnonymous]
        public JsonResult GetAPAgeingDetail(string criteria, string FromDate, string ToDate, int period, int duration, int pastdue = 1)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;




                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }


                //if (period == null)
                //{
                //    period = 4;
                //}
                //period = (period - 1) * 30;
                var queryname = "Acc_rptAPAgeingDetail";

                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + dtFrom + "' ,'" + dtTo + "', '" + duration + "','" + period + "','" + pastdue + "' ";
                Console.WriteLine(viewquary);
                SqlParameter[] parameters = new SqlParameter[8];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@dtFrom", dtFrom);
                parameters[4] = new SqlParameter("@dtTo", dtTo);
                parameters[5] = new SqlParameter("@interval", duration);
                parameters[6] = new SqlParameter("@maxInterval", period);
                parameters[7] = new SqlParameter("@minInterval", pastdue);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult AccountsARAgeingDetail()
        {
            return View();
        }
        [AllowAnonymous]
        public JsonResult GetARAgeingDetail(string criteria, string FromDate, string ToDate, int period, int duration, int pastdue = 1)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;




                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }


                //if (period == null)
                //{
                //    period = 4;
                //}
                //period = (period - 1) * 30;
                var queryname = "Acc_rptARAgeingDetail";

                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + dtFrom + "' ,'" + dtTo + "', '" + duration + "','" + period + "','" + pastdue + "' ";
                Console.WriteLine(viewquary);
                SqlParameter[] parameters = new SqlParameter[8];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@dtFrom", dtFrom);
                parameters[4] = new SqlParameter("@dtTo", dtTo);
                parameters[5] = new SqlParameter("@interval", duration);
                parameters[6] = new SqlParameter("@maxInterval", period);
                parameters[7] = new SqlParameter("@minInterval", pastdue);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }



        [AllowAnonymous]
        public JsonResult GetProductServiceList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptProductServiceList";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);

                                parameters[2] = new SqlParameter("@Id", strId);
                                parameters[3] = new SqlParameter("@IsShowZero", 0);
                                parameters[4] = new SqlParameter("@Currency", 18);
                                parameters[5] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[6] = new SqlParameter("@dtTo", dtTo);
                                parameters[7] = new SqlParameter("@accid", 0);
                                parameters[8] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[9] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);


                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetTermsList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTermsList";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);

                                parameters[2] = new SqlParameter("@Id", strId);
                                parameters[3] = new SqlParameter("@IsShowZero", 0);
                                parameters[4] = new SqlParameter("@Currency", 18);
                                parameters[5] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[6] = new SqlParameter("@dtTo", dtTo);
                                parameters[7] = new SqlParameter("@accid", 0);
                                parameters[8] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[9] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);


                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }



        [AllowAnonymous]
        public JsonResult GetTransactionDetailbyAccount(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTransactionDetailbyAccount";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetTransactionListbyDate(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTransactionListbyDate";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetTransactionListwithSplits(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTransactionListwithSplits";


                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetTransactionDetailTaxCode(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTransactionDetailbyTaxCode";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetUnbilledTime(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptUnbilledTime";


                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetChequeDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptChequeDetail";


                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetTaxLiability(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTaxLiability";


                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetAccountList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptAccountList";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);

                                parameters[2] = new SqlParameter("@Id", strId);
                                parameters[3] = new SqlParameter("@IsShowZero", 0);
                                parameters[4] = new SqlParameter("@Currency", 18);
                                parameters[5] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[6] = new SqlParameter("@dtTo", dtTo);
                                parameters[7] = new SqlParameter("@accid", 0);
                                parameters[8] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[9] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@groupBy", groupBy);
                                //parameters[2] = new SqlParameter("@Flag", criteria);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetRecentEditedtimeActivities(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptRecentEditedtimeActivities";


                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);


                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetSupplierContactList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptSupplierContactList";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetCustomerContactList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptCustomerContactList";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetEmployeeContactList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptEmployeeContactList";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetSalesbyCustomerDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptSalesbyCustomerDetail";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetCustomerBalanceDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptCustomerBalanceDetail";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetInventoryValuationSummary(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptInventoryValuationSummary";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetEstimatesbyCustomer(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptEstimatesbyCustomer";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetRecentTransactions(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptRecentTransactions";




                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetDepositDetail(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptDepositDetail";




                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetStocktakeWorksheet(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptStocktakeWorksheet";



                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);

                                parameters[2] = new SqlParameter("@Id", strId);
                                parameters[3] = new SqlParameter("@IsShowZero", 0);
                                parameters[4] = new SqlParameter("@Currency", 18);
                                parameters[5] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[6] = new SqlParameter("@dtTo", dtTo);
                                parameters[7] = new SqlParameter("@accid", 0);
                                parameters[8] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[9] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);


                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetMultipleCombineTaxSummary(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptMultipleCombineTaxSummary";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetServiceTaxSummary(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptServiceTaxSummary";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetUnbilledCharges(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptUnbilledCharges";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetStatementChangesEquity(string rpttype, string criteria, string displayBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptStatementChangesEquity";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + displayBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[13];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[12] = new SqlParameter("@displayBy", displayBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetCollectionsReport(string rpttype, string criteria, string displayBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptCollectionsReport";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@displayBy", displayBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetOpenInvoices(string rpttype, string criteria, string displayBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptOpenInvoices";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@displayBy", displayBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetTaxCustomSummary(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptTaxCustomSummary";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetGeneralLedger(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptGeneralLedger";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatementQB";
                                //}
                                //if (Months.ToUpper().ToString() == "Years PY".ToUpper())
                                //{
                                //    queryname = "Acc_rptIncomeStatement_MonthSegmentQB";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[10] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[11] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[12] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetStatementList(string rpttype, string criteria, string groupBy, string valueofRows, string ChangeValueTk, string ChangeValuePercentage, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0) //, string ChangeValueTk, string ChangeValuePercentage
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;


                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;



                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }



                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    //if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptStatementList";




                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + valueofRows + "','" + ChangeValuePercentage + "', '" + ChangeValueTk + "', '" + groupBy + "'";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[12];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);

                                parameters[2] = new SqlParameter("@Id", strId);
                                parameters[3] = new SqlParameter("@IsShowZero", 0);
                                parameters[4] = new SqlParameter("@Currency", 18);
                                parameters[5] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[6] = new SqlParameter("@dtTo", dtTo);
                                parameters[7] = new SqlParameter("@accid", 0);
                                parameters[8] = new SqlParameter("@valueofRows", valueofRows);
                                parameters[9] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);
                                parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                parameters[11] = new SqlParameter("@groupBy", groupBy);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });


                            }


                        }



                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }


        [AllowAnonymous]
        public JsonResult GetLedgerReportQB(string rpttype, string criteria, string Months, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;
                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;
                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }
                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptLedgerReport_MonthSegment";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptBalanceSheetQuicBook";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                                SqlParameter[] parameters = new SqlParameter[10];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                                return Json(new { data = datasetabc, ex = "" });
                            }
                        }

                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        [AllowAnonymous]
        public JsonResult GetLedgerReportQuickBook(string rpttype, string criteria, string Months, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                //int isViewPageReport = 0;
                int isCompare = 0;
                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;
                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }
                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {

                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        var TrialBalanceReport = new List<TrialBalanceModel>();

                        {
                            if (isViewPageReport == 1)
                            {

                                var queryname = "Acc_rptLedgerReport_MonthSegment";

                                //if (Months.ToUpper().ToString() == "Total Only".ToUpper())
                                //{
                                //    queryname = "Acc_rptBalanceSheetQuicBook";
                                //}

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                                SqlParameter[] parameters = new SqlParameter[10];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);


                                #region newcodechecking
                                var dataTable = datasetabc.Tables[0];
                                List<Account> accounts = new List<Account>();
                                Dictionary<string, Account> parents = new Dictionary<string, Account>();



                                //DataColumn Date = new DataColumn("Date", typeof(string));
                                //DataColumn TransactionType = new DataColumn("TransactionType", typeof(string));
                                //DataColumn Description = new DataColumn("Description", typeof(string));
                                //DataColumn Split = new DataColumn("Split", typeof(string));

                                //dataTable.Columns.Add(Date);
                                //dataTable.Columns.Add(TransactionType);
                                //dataTable.Columns.Add(Description);
                                //dataTable.Columns.Add(Split);
                                foreach (DataRow row in dataTable.Rows)
                                {
                                    Account account = new Account
                                    {
                                        AccId = row.Field<Int64>("AccId"),
                                        ParentId = row.Field<Int64>("ParentId"),
                                        AccType = row.Field<string>("AccType"),
                                        DataLevel = row.Field<int>("DataLevel"),
                                        Date = row.Field<DateTime>("Date"),
                                        TransactionType = row.Field<string>("TransactionType"),
                                        AccCode = row.Field<string>("AccCode"),
                                        AccName = row.Field<string>("AccName"),
                                        Description = row.Field<string>("Description"),
                                        Split = row.Field<string>("Split"),
                                        Amount = row.Field<decimal>("Amount"),
                                        Balance = row.Field<decimal>("Balance"),

                                        Children = new List<Account>()
                                    };

                                    Int64 parentId = account.ParentId;

                                    if (parentId == 0)
                                    {
                                        accounts.Add(account);
                                    }
                                    else
                                    {
                                        if (parents.TryGetValue(parentId.ToString(), out Account parent))
                                        {
                                            parent.Children.Add(account);
                                        }
                                        else
                                        {
                                            Account parentAccount = new Account
                                            {
                                                AccId = parentId,
                                                Children = new List<Account> { account }
                                            };

                                            parents[parentId.ToString()] = parentAccount;
                                        }
                                    }

                                    parents[account.AccId.ToString()] = account;

                                }
                                foreach (var parent in parents.Values)
                                {
                                    if (parent.Children.Count > 0)
                                    {
                                        foreach (var child in parent.Children)
                                        {
                                            Int64 childId = child.AccId;
                                            if (parents.TryGetValue(childId.ToString(), out Account childNode))
                                            {
                                                child.Children = childNode.Children;
                                            }
                                        }
                                    }
                                }

                                return Json(new { data = parents, ex = "" });

                                //var dataTable = datasetabc.Tables[0];
                                //List<dynamic> dynamicObjects = new List<dynamic>();
                                //Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                                //foreach (DataRow row in dataTable.Rows)
                                //{
                                //    // Check if the account type is 'G'
                                //    if (row.Field<string>("AccType") == "G")
                                //    {
                                //        dynamic dynamicObject = new ExpandoObject();

                                //        foreach (DataColumn col in dataTable.Columns)
                                //        {
                                //            string columnName = col.ColumnName;
                                //            object value = row[col];

                                //            ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                //        }

                                //        Int64 parentId = row.Field<Int64>("ParentId");

                                //        if (parentId == 0)
                                //        {
                                //            dynamicObjects.Add(dynamicObject);
                                //        }
                                //        else
                                //        {
                                //            if (parents.TryGetValue(parentId, out dynamic? parent))
                                //            {
                                //                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                //                {
                                //                    parent.Children.Add(dynamicObject);
                                //                }
                                //                else
                                //                {
                                //                    parent.Children = new List<dynamic> { dynamicObject };
                                //                }
                                //            }
                                //            else
                                //            {
                                //                dynamic parentObject = new ExpandoObject();
                                //                parentObject.Children = new List<dynamic> { dynamicObject };
                                //                parents[parentId] = parentObject;
                                //            }
                                //        }

                                //        parents[row.Field<Int64>("AccId")] = dynamicObject;
                                //    }
                                //}
                                //// Build the tree
                                //foreach (var parent in parents.Values)
                                //{
                                //    if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                //    {
                                //        foreach (var child in parent.Children)
                                //        {
                                //            Int64 childId = child.AccId;
                                //            if (parents.TryGetValue(childId, out dynamic? childNode))
                                //            {
                                //                if (((IDictionary<string, object>)child).ContainsKey("Children"))
                                //                {
                                //                    childNode.Children = child.Children;
                                //                }
                                //            }
                                //        }
                                //    }
                                //}

                                //// The dynamicObjects list contains the root nodes of the tree
                                //foreach (var rootNode in dynamicObjects)
                                //{
                                //    Int64 rootNodeId = rootNode.AccId;
                                //    if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                //    {
                                //        rootNode.Children = rootNodeWithChildren.Children;
                                //    }
                                //}

                                //// Now you can use the dynamicObjects list to access the root nodes with the complete tree structure

                                #endregion new code checking


                                //var abc = Helper.ConvertDataSetasJSON(datasetabc);
                                #endregion new code checking
                                //return Json(new { data = dynamicObjects, ex = "" });
                            }
                        }

                    }
                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }




        [AllowAnonymous]
        public JsonResult GetTrialBalanceQB(string rpttype, string criteria, string Months, string FromDate, string ToDate, string valueofRows, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                int isCompare = 0;
                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;
                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }
                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {
                    if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }
                        var TrialBalanceReport = new List<TrialBalanceModel>();
                        {
                            //previous ok code
                            if (isViewPageReport == 1 || isViewPageReport == 2)
                            {
                                var viewquary = $"Exec Acc_rptTrailBalanceGroupDate_QB  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + valueofRows + "," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                TrialBalanceReport = Helper.ExecProcMapTList<TrialBalanceModel>("Acc_rptTrailBalanceGroupDate_QB", parameters);
                                return Json(new { data = TrialBalanceReport, ex = "" });
                            }


                            //for tree grid
                            if (isViewPageReport == 3)
                            {

                                var queryname = "Acc_rptBalanceSheetQuicBookforTB";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "','" + valueofRows + "'    ";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
                                //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


                                //#region newcodechecking
                                //var dataTable = datasetabc.Tables[0];
                                //List<dynamic> dynamicObjects = new List<dynamic>();
                                //Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                                //foreach (DataRow row in dataTable.Rows)
                                //{
                                //    // Check if the account type is 'G' or 'L'
                                //    string accType = row.Field<string>("AccType");
                                //    if (accType == "G" || accType == "L")
                                //    {
                                //        dynamic dynamicObject = new ExpandoObject();

                                //        foreach (DataColumn col in dataTable.Columns)
                                //        {
                                //            string columnName = col.ColumnName;
                                //            object value = row[col];

                                //            ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                //        }

                                //        Int64 parentId = row.Field<Int64>("ParentId");

                                //        if (parentId == 0)
                                //        {
                                //            dynamicObjects.Add(dynamicObject);
                                //        }
                                //        else
                                //        {
                                //            if (parents.TryGetValue(parentId, out dynamic? parent))
                                //            {
                                //                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                //                {
                                //                    parent.Children.Add(dynamicObject);
                                //                }
                                //                else
                                //                {
                                //                    parent.Children = new List<dynamic> { dynamicObject };
                                //                }
                                //            }
                                //            else
                                //            {
                                //                dynamic parentObject = new ExpandoObject();
                                //                parentObject.Children = new List<dynamic> { dynamicObject };
                                //                parents[parentId] = parentObject;
                                //            }
                                //        }

                                //        parents[row.Field<Int64>("AccId")] = dynamicObject;
                                //    }
                                //}

                                //// Build the tree
                                //foreach (var parent in parents.Values)
                                //{
                                //    if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                //    {
                                //        foreach (var child in parent.Children)
                                //        {
                                //            Int64 childId = child.AccId;
                                //            if (parents.TryGetValue(childId, out dynamic? childNode))
                                //            {
                                //                if (((IDictionary<string, object>)child).ContainsKey("Children"))
                                //                {
                                //                    childNode.Children = child.Children;
                                //                }
                                //            }
                                //        }
                                //    }
                                //}

                                //// The dynamicObjects list contains the root nodes of the tree
                                //foreach (var rootNode in dynamicObjects)
                                //{
                                //    Int64 rootNodeId = rootNode.AccId;
                                //    if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                //    {
                                //        rootNode.Children = rootNodeWithChildren.Children;
                                //    }
                                //}

                                //// Now you can use the dynamicObjects list to access the root nodes with the complete tree structure

                                //#endregion new code checking



                                return Json(new { data = datasetabc, ex = "" });

                            }

                            if (isViewPageReport == 4)
                            {
                                var queryname = "Acc_rptBalanceSheetQuicBookforTB";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "','" + valueofRows + "'    ";
                                Console.WriteLine(viewquary);
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                return Json(new { data = datasetabc, ex = "" });

                            }
                            else
                            {

                                reportname = "rptTrialBalanceGroup";
                                filename = "TrialBalanceGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroupDate_QB  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");
                            }

                        }
                    }

                    else if (Months.ToUpper().ToString() == "Months".ToUpper())
                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }

                        if (isViewPageReport == 1)
                        {
                            var viewquary = $"Exec Acc_rptTrailBalance_MonthSegment  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ," + valueofRows + ",'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                            Console.WriteLine(viewquary);
                            SqlParameter[] parameters = new SqlParameter[11];
                            parameters[0] = new SqlParameter("@UserId", UserId);
                            parameters[1] = new SqlParameter("@ComId", ComId);
                            parameters[2] = new SqlParameter("@Flag", criteria);
                            parameters[3] = new SqlParameter("@Id", strId);
                            parameters[4] = new SqlParameter("@IsShowZero", 0);
                            parameters[5] = new SqlParameter("@Currency", 18);
                            parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                            parameters[7] = new SqlParameter("@dtTo", dtTo);
                            parameters[8] = new SqlParameter("@accid", 0);
                            parameters[9] = new SqlParameter("@ViewType", Months);
                            parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                            var datasetabc = new System.Data.DataSet();
                            datasetabc = Helper.ExecProcMapDS("Acc_rptTrailBalance_MonthSegment", parameters);


                            var TrialBalanceReport = new List<TrialBalanceModel>();

                            var abc = Helper.ConvertDataSetasJSON(datasetabc);
                            return Json(new { data = abc, ex = "" });
                        }


                        if (isViewPageReport == 2)
                        {
                            var viewquary = $"Exec Acc_rptTrailBalance_MonthSegment  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ," + valueofRows + ",'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                            Console.WriteLine(viewquary);
                            SqlParameter[] parameters = new SqlParameter[11];
                            parameters[0] = new SqlParameter("@UserId", UserId);
                            parameters[1] = new SqlParameter("@ComId", ComId);
                            parameters[2] = new SqlParameter("@Flag", criteria);
                            parameters[3] = new SqlParameter("@Id", strId);
                            parameters[4] = new SqlParameter("@IsShowZero", 0);
                            parameters[5] = new SqlParameter("@Currency", 18);
                            parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                            parameters[7] = new SqlParameter("@dtTo", dtTo);
                            parameters[8] = new SqlParameter("@accid", 0);
                            parameters[9] = new SqlParameter("@ViewType", Months);
                            parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                            var datasetabc = new System.Data.DataSet();
                            datasetabc = Helper.ExecProcMapDS("Acc_rptTrailBalance_MonthSegment", parameters);


                            var TrialBalanceReport = new List<TrialBalanceModel>();

                            // Step 1: Identify columns with no data
                            List<int> emptyColumns = new List<int>();
                            for (int columnIndex = 2; columnIndex < datasetabc.Tables[0].Columns.Count; columnIndex++)
                            {
                                bool hasData = false;
                                foreach (DataRow row in datasetabc.Tables[0].Rows)
                                {
                                    if (!string.IsNullOrEmpty(row[columnIndex].ToString()))
                                    {
                                        hasData = true;
                                        break;
                                    }
                                }

                                if (!hasData)
                                {
                                    emptyColumns.Add(columnIndex);
                                }
                            }

                            // Step 2: Remove columns with no data
                            for (int i = emptyColumns.Count - 1; i >= 0; i--)
                            {
                                int columnIndex = emptyColumns[i];
                                datasetabc.Tables[0].Columns.RemoveAt(columnIndex);
                            }

                            var abc = Helper.ConvertDataSetasJSON(datasetabc);
                            return Json(new { data = abc, ex = "" });
                        }
                        //for tree grid month wise data ok code
                        if (isViewPageReport == 3)
                        {

                            var queryname = "Acc_rptBalanceSheet_MonthSegmentQBforTB";

                            var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ," + valueofRows + "";
                            Console.WriteLine(viewquary);
                            SqlParameter[] parameters = new SqlParameter[11];
                            parameters[0] = new SqlParameter("@UserId", UserId);
                            parameters[1] = new SqlParameter("@ComId", ComId);
                            parameters[2] = new SqlParameter("@Flag", criteria);
                            parameters[3] = new SqlParameter("@Id", strId);
                            parameters[4] = new SqlParameter("@IsShowZero", 0);
                            parameters[5] = new SqlParameter("@Currency", 18);
                            parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                            parameters[7] = new SqlParameter("@dtTo", dtTo);
                            parameters[8] = new SqlParameter("@accid", 0);
                            parameters[9] = new SqlParameter("@ViewType", Months);
                            parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                            //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                            //parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                            var datasetabc = new System.Data.DataSet();
                            datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                            return Json(new { data = datasetabc, ex = "" });

                        }

                        //for tree grid month wise data test code 
                        if (isViewPageReport == 4)
                        {
                            var queryname = "Acc_rptBalanceSheet_MonthSegmentQBforTB";
                            var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ," + valueofRows + "";
                            SqlParameter[] parameters = new SqlParameter[11];
                            parameters[0] = new SqlParameter("@UserId", UserId);
                            parameters[1] = new SqlParameter("@ComId", ComId);
                            parameters[2] = new SqlParameter("@Flag", criteria);
                            parameters[3] = new SqlParameter("@Id", strId);
                            parameters[4] = new SqlParameter("@IsShowZero", 0);
                            parameters[5] = new SqlParameter("@Currency", 18);
                            parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                            parameters[7] = new SqlParameter("@dtTo", dtTo);
                            parameters[8] = new SqlParameter("@accid", 0);
                            parameters[9] = new SqlParameter("@ViewType", Months);
                            parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                            //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                            //parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                            var datasetabc = new System.Data.DataSet();
                            datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                            // Get the list of month columns (starting from index 8)
                            List<string> monthColumns = datasetabc.Tables[0].Columns.Cast<System.Data.DataColumn>()
                                .Skip(8)
                                .Select(c => c.ColumnName)
                                .ToList();

                            // Find columns with all zero values
                            List<string> columnsToRemove = new List<string>();
                            foreach (string monthColumn in monthColumns)
                            {
                                bool allZero = true;
                                foreach (System.Data.DataRow row in datasetabc.Tables[0].Rows)
                                {
                                    if (Convert.ToDouble(row[monthColumn]) != 0.00)
                                    {
                                        allZero = false;
                                        break;
                                    }
                                }
                                if (allZero)
                                {
                                    columnsToRemove.Add(monthColumn);
                                }
                            }

                            // Remove columns with all zero values from the DataTable
                            foreach (string colName in columnsToRemove)
                            {
                                datasetabc.Tables[0].Columns.Remove(colName);
                            }

                            // Now return the dataset or proceed with further operations
                            // datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
                            // datasetabc.Tables[1].TableName = "HeadWiseDetailsList";
                            return Json(new { data = datasetabc, ex = "" });

                        }

                        else
                        {

                            reportname = "rptTrialBalanceGroup";
                            filename = "TrialBalanceGroup_Date_" + dtFrom + "_To_" + dtTo;
                            HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroupDate_QB  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");
                        }


                    }





                    else
                    {
                        if (isGroup == 0)
                        {
                            if (isCompare == 0)
                            {

                                if (isViewPageReport == 1)
                                {
                                    redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                    return Json(new { Url = redirectUrl });
                                }
                                else
                                {
                                    reportname = "rptTrialBalance";

                                    filename = "TrialBalance_Date_" + dtFrom + "_To_" + dtTo;
                                    HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalance '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + ",'" + AccIdGroup + "' ");

                                }
                            }
                            else
                            {
                                reportname = "rptTrialBalanceComp";
                                filename = "TrialBalanceCompare_Date_" + dtFrom + "_To_" + dtTo;

                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCompareTrialBalance '" + criteria + "', '" + ComId + "', '" + strId + "'," + isShowZero + " ," + Currency + " ,'" + AccIdGroup + "' ");

                            }
                        }
                        else
                        {
                            if (isCompare == 0)
                            {
                                reportname = "rptTrialBalanceGroup";

                                filename = "TrialBalanceWithGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroup '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "'");

                            }
                            else
                            {
                                reportname = "rptTrialBalanceCompGroup";
                                filename = "TrialBalanceCompareGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCompareTrialBalanceGroup '" + criteria + "', '" + ComId + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "' ");
                            }
                        }
                    }
                }
                else
                {
                    var quary = $"Exec [Acc_TrialBalance_PivotItem_Month] '" + ComId + "','" + FromDate + "','" + ToDate + "'";
                    SqlParameter[] parameters = new SqlParameter[3];
                    parameters[0] = new SqlParameter("@Comid", ComId);
                    parameters[1] = new SqlParameter("@FromDate", FromDate);
                    parameters[2] = new SqlParameter("@ToDate", ToDate);

                    List<treedataTrialBalance> TrialBalanceReport = Helper.ExecProcMapTList<treedataTrialBalance>("[Acc_TrialBalance_PivotItem_Month]", parameters);
                    var allAccountHeadList = _accountHeadRepository.All().Include(x => x.ChildrenAccountList).ToList();//x=>x.ChildrenAccountList



                    foreach (var item in allAccountHeadList.Where(x => x.AccType == "G").OrderByDescending(x => x.Id))
                    {
                        var summaryList = new List<treedataTrialBalance>();
                        var xyz = SummaryOfChildrenTrialBalance(item.Id, TrialBalanceReport.Where(x => x.ParentId == item.Id).ToList(), item.ParentId);

                        if (xyz != null)
                        {
                            summaryList.Add(xyz);

                        }
                        TrialBalanceReport.AddRange(summaryList);
                    }
                    var accountdata = allAccountHeadList.Where(x => x.LevelId == 0).Select(p => new treechildrenTrialBalance
                    {
                        id = p.Id,
                        acccode = p.AccCode,
                        name = p.AccName,
                        description = p.AccName,
                        mappedTo = p.AccName,
                        accType = p.AccType,
                        datalevel = p.LevelId,
                        parentID = p.ParentId,
                        children = new List<treechildrenTrialBalance>(),
                        data = TrialBalanceReport.Where(x => x.ID == p.Id).FirstOrDefault()

                    }).ToList();

                    foreach (var item in accountdata)
                    {
                        var x = GetTreeViewTrialBalance(item, item.id, allAccountHeadList, TrialBalanceReport);

                        if (x != null)
                        {
                            item.children.Add(x);

                        }

                    };
                    return Json(accountdata.ToList());

                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }
        [AllowAnonymous]
        public JsonResult GetTrialBalance(string rpttype, string criteria, string Months, string FromDate, string ToDate, string valueofRows, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        {
            try
            {
                int FYMId = 0;
                string dtFrom = DateTime.Now.Date.ToString();
                string dtTo = DateTime.Now.Date.ToString();
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";
                string reportname = "";
                string filename = "";
                int isCompare = 0;
                int isShowZero = 0;
                int Currency = 0;
                int AccIdGroup = 0;
                int FYId = 0;
                if (FromDate == null)
                {
                    criteria = "Date";
                    FromDate = dtFrom;
                    ToDate = dtTo;

                }
                else
                {
                    dtFrom = FromDate;
                    dtTo = ToDate;
                }
                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {
                    if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }
                        var TrialBalanceReport = new List<TrialBalanceModel>();
                        {
                            //previous ok code
                            if (isViewPageReport == 1 || isViewPageReport == 2)
                            {
                                var viewquary = $"Exec Acc_rptTrailBalanceGroupDate_QB  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + valueofRows + "," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                                SqlParameter[] parameters = new SqlParameter[11];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                                TrialBalanceReport = Helper.ExecProcMapTList<TrialBalanceModel>("Acc_rptTrailBalanceGroupDate_QB", parameters);
                                return Json(new { data = TrialBalanceReport, ex = "" });
                            }


                            //for tree grid
                            if (isViewPageReport == 3)
                            {

                                var queryname = "Acc_rptBalanceSheetQuicBookforTB";

                                var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                                SqlParameter[] parameters = new SqlParameter[10];
                                parameters[0] = new SqlParameter("@UserId", UserId);
                                parameters[1] = new SqlParameter("@ComId", ComId);
                                parameters[2] = new SqlParameter("@Flag", criteria);
                                parameters[3] = new SqlParameter("@Id", strId);
                                parameters[4] = new SqlParameter("@IsShowZero", 0);
                                parameters[5] = new SqlParameter("@Currency", 18);
                                parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                                parameters[7] = new SqlParameter("@dtTo", dtTo);
                                parameters[8] = new SqlParameter("@accid", 0);
                                parameters[9] = new SqlParameter("@ViewType", Months);
                                //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                                //parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                                var datasetabc = new System.Data.DataSet();
                                datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                                //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
                                //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


                                #region newcodechecking
                                var dataTable = datasetabc.Tables[0];
                                List<dynamic> dynamicObjects = new List<dynamic>();
                                Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                                foreach (DataRow row in dataTable.Rows)
                                {
                                    // Check if the account type is 'G' or 'L'
                                    string accType = row.Field<string>("AccType");
                                    if (accType == "G" || accType == "L")
                                    {
                                        dynamic dynamicObject = new ExpandoObject();

                                        foreach (DataColumn col in dataTable.Columns)
                                        {
                                            string columnName = col.ColumnName;
                                            object value = row[col];

                                            ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                        }

                                        Int64 parentId = row.Field<Int64>("ParentId");

                                        if (parentId == 0)
                                        {
                                            dynamicObjects.Add(dynamicObject);
                                        }
                                        else
                                        {
                                            if (parents.TryGetValue(parentId, out dynamic? parent))
                                            {
                                                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                                {
                                                    parent.Children.Add(dynamicObject);
                                                }
                                                else
                                                {
                                                    parent.Children = new List<dynamic> { dynamicObject };
                                                }
                                            }
                                            else
                                            {
                                                dynamic parentObject = new ExpandoObject();
                                                parentObject.Children = new List<dynamic> { dynamicObject };
                                                parents[parentId] = parentObject;
                                            }
                                        }

                                        parents[row.Field<Int64>("AccId")] = dynamicObject;
                                    }
                                }

                                // Build the tree
                                foreach (var parent in parents.Values)
                                {
                                    if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                    {
                                        foreach (var child in parent.Children)
                                        {
                                            Int64 childId = child.AccId;
                                            if (parents.TryGetValue(childId, out dynamic? childNode))
                                            {
                                                if (((IDictionary<string, object>)child).ContainsKey("Children"))
                                                {
                                                    childNode.Children = child.Children;
                                                }
                                            }
                                        }
                                    }
                                }

                                // The dynamicObjects list contains the root nodes of the tree
                                foreach (var rootNode in dynamicObjects)
                                {
                                    Int64 rootNodeId = rootNode.AccId;
                                    if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                    {
                                        rootNode.Children = rootNodeWithChildren.Children;
                                    }
                                }

                                // Now you can use the dynamicObjects list to access the root nodes with the complete tree structure

                                #endregion new code checking



                                return Json(new { data = dynamicObjects, ex = "" });

                            }


                            else
                            {

                                reportname = "rptTrialBalanceGroup";
                                filename = "TrialBalanceGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroupDate_QB  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");
                            }

                        }
                    }

                    else if (Months.ToUpper().ToString() == "Months".ToUpper())
                    {
                        if (FYMId != null || FYMId > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }

                        if (isViewPageReport == 1)
                        {
                            var viewquary = $"Exec Acc_rptTrailBalance_MonthSegment  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ," + valueofRows + ",'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                            Console.WriteLine(viewquary);
                            SqlParameter[] parameters = new SqlParameter[11];
                            parameters[0] = new SqlParameter("@UserId", UserId);
                            parameters[1] = new SqlParameter("@ComId", ComId);
                            parameters[2] = new SqlParameter("@Flag", criteria);
                            parameters[3] = new SqlParameter("@Id", strId);
                            parameters[4] = new SqlParameter("@IsShowZero", 0);
                            parameters[5] = new SqlParameter("@Currency", 18);
                            parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                            parameters[7] = new SqlParameter("@dtTo", dtTo);
                            parameters[8] = new SqlParameter("@accid", 0);
                            parameters[9] = new SqlParameter("@ViewType", Months);
                            parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                            var datasetabc = new System.Data.DataSet();
                            datasetabc = Helper.ExecProcMapDS("Acc_rptTrailBalance_MonthSegment", parameters);


                            var TrialBalanceReport = new List<TrialBalanceModel>();

                            var abc = Helper.ConvertDataSetasJSON(datasetabc);
                            return Json(new { data = abc, ex = "" });
                        }


                        if (isViewPageReport == 2)
                        {
                            var viewquary = $"Exec Acc_rptTrailBalance_MonthSegment  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ," + valueofRows + ",'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                            Console.WriteLine(viewquary);
                            SqlParameter[] parameters = new SqlParameter[11];
                            parameters[0] = new SqlParameter("@UserId", UserId);
                            parameters[1] = new SqlParameter("@ComId", ComId);
                            parameters[2] = new SqlParameter("@Flag", criteria);
                            parameters[3] = new SqlParameter("@Id", strId);
                            parameters[4] = new SqlParameter("@IsShowZero", 0);
                            parameters[5] = new SqlParameter("@Currency", 18);
                            parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                            parameters[7] = new SqlParameter("@dtTo", dtTo);
                            parameters[8] = new SqlParameter("@accid", 0);
                            parameters[9] = new SqlParameter("@ViewType", Months);
                            parameters[10] = new SqlParameter("@valueofRows", valueofRows);
                            var datasetabc = new System.Data.DataSet();
                            datasetabc = Helper.ExecProcMapDS("Acc_rptTrailBalance_MonthSegment", parameters);


                            var TrialBalanceReport = new List<TrialBalanceModel>();

                            // Step 1: Identify columns with no data
                            List<int> emptyColumns = new List<int>();
                            for (int columnIndex = 2; columnIndex < datasetabc.Tables[0].Columns.Count; columnIndex++)
                            {
                                bool hasData = false;
                                foreach (DataRow row in datasetabc.Tables[0].Rows)
                                {
                                    if (!string.IsNullOrEmpty(row[columnIndex].ToString()))
                                    {
                                        hasData = true;
                                        break;
                                    }
                                }

                                if (!hasData)
                                {
                                    emptyColumns.Add(columnIndex);
                                }
                            }

                            // Step 2: Remove columns with no data
                            for (int i = emptyColumns.Count - 1; i >= 0; i--)
                            {
                                int columnIndex = emptyColumns[i];
                                datasetabc.Tables[0].Columns.RemoveAt(columnIndex);
                            }

                            var abc = Helper.ConvertDataSetasJSON(datasetabc);
                            return Json(new { data = abc, ex = "" });
                        }

                        //for tree grid month wise data
                        if (isViewPageReport == 3)
                        {

                            var queryname = "Acc_rptBalanceSheet_MonthSegmentQBforTB";

                            var viewquary = $"Exec {queryname}  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
                            SqlParameter[] parameters = new SqlParameter[10];
                            parameters[0] = new SqlParameter("@UserId", UserId);
                            parameters[1] = new SqlParameter("@ComId", ComId);
                            parameters[2] = new SqlParameter("@Flag", criteria);
                            parameters[3] = new SqlParameter("@Id", strId);
                            parameters[4] = new SqlParameter("@IsShowZero", 0);
                            parameters[5] = new SqlParameter("@Currency", 18);
                            parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                            parameters[7] = new SqlParameter("@dtTo", dtTo);
                            parameters[8] = new SqlParameter("@accid", 0);
                            parameters[9] = new SqlParameter("@ViewType", Months);
                            //parameters[10] = new SqlParameter("@ChangeValueTk", ChangeValueTk);
                            //parameters[11] = new SqlParameter("@ChangeValuePercentage", ChangeValuePercentage);

                            var datasetabc = new System.Data.DataSet();
                            datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                            //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
                            //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


                            #region newcodechecking
                            var dataTable = datasetabc.Tables[0];
                            List<dynamic> dynamicObjects = new List<dynamic>();
                            Dictionary<Int64, dynamic> parents = new Dictionary<Int64, dynamic>();

                            foreach (DataRow row in dataTable.Rows)
                            {
                                // Check if the account type is 'G' or 'L'
                                string accType = row.Field<string>("AccType");
                                if (accType == "G" || accType == "L")
                                {
                                    dynamic dynamicObject = new ExpandoObject();

                                    foreach (DataColumn col in dataTable.Columns)
                                    {
                                        string columnName = col.ColumnName;
                                        object value = row[col];

                                        ((IDictionary<string, object>)dynamicObject)[columnName] = value;
                                    }

                                    Int64 parentId = row.Field<Int64>("ParentId");

                                    if (parentId == 0)
                                    {
                                        dynamicObjects.Add(dynamicObject);
                                    }
                                    else
                                    {
                                        if (parents.TryGetValue(parentId, out dynamic? parent))
                                        {
                                            if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                            {
                                                parent.Children.Add(dynamicObject);
                                            }
                                            else
                                            {
                                                parent.Children = new List<dynamic> { dynamicObject };
                                            }
                                        }
                                        else
                                        {
                                            dynamic parentObject = new ExpandoObject();
                                            parentObject.Children = new List<dynamic> { dynamicObject };
                                            parents[parentId] = parentObject;
                                        }
                                    }

                                    parents[row.Field<Int64>("AccId")] = dynamicObject;
                                }
                            }

                            // Build the tree
                            foreach (var parent in parents.Values)
                            {
                                if (((IDictionary<string, object>)parent).ContainsKey("Children"))
                                {
                                    foreach (var child in parent.Children)
                                    {
                                        Int64 childId = child.AccId;
                                        if (parents.TryGetValue(childId, out dynamic? childNode))
                                        {
                                            if (((IDictionary<string, object>)child).ContainsKey("Children"))
                                            {
                                                childNode.Children = child.Children;
                                            }
                                        }
                                    }
                                }
                            }

                            // The dynamicObjects list contains the root nodes of the tree
                            foreach (var rootNode in dynamicObjects)
                            {
                                Int64 rootNodeId = rootNode.AccId;
                                if (parents.TryGetValue(rootNodeId, out dynamic? rootNodeWithChildren))
                                {
                                    rootNode.Children = rootNodeWithChildren.Children;
                                }
                            }

                            // Now you can use the dynamicObjects list to access the root nodes with the complete tree structure

                            #endregion new code checking



                            return Json(new { data = dynamicObjects, ex = "" });

                        }

                        else
                        {

                            reportname = "rptTrialBalanceGroup";
                            filename = "TrialBalanceGroup_Date_" + dtFrom + "_To_" + dtTo;
                            HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroupDate_QB  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");
                        }


                    }





                    else
                    {
                        if (isGroup == 0)
                        {
                            if (isCompare == 0)
                            {

                                if (isViewPageReport == 1)
                                {
                                    redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                    return Json(new { Url = redirectUrl });
                                }
                                else
                                {
                                    reportname = "rptTrialBalance";

                                    filename = "TrialBalance_Date_" + dtFrom + "_To_" + dtTo;
                                    HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalance '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + ",'" + AccIdGroup + "' ");

                                }
                            }
                            else
                            {
                                reportname = "rptTrialBalanceComp";
                                filename = "TrialBalanceCompare_Date_" + dtFrom + "_To_" + dtTo;

                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCompareTrialBalance '" + criteria + "', '" + ComId + "', '" + strId + "'," + isShowZero + " ," + Currency + " ,'" + AccIdGroup + "' ");

                            }
                        }
                        else
                        {
                            if (isCompare == 0)
                            {
                                reportname = "rptTrialBalanceGroup";

                                filename = "TrialBalanceWithGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroup '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "'");

                            }
                            else
                            {
                                reportname = "rptTrialBalanceCompGroup";
                                filename = "TrialBalanceCompareGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCompareTrialBalanceGroup '" + criteria + "', '" + ComId + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "' ");
                            }
                        }
                    }
                }
                else
                {
                    var quary = $"Exec [Acc_TrialBalance_PivotItem_Month] '" + ComId + "','" + FromDate + "','" + ToDate + "'";
                    SqlParameter[] parameters = new SqlParameter[3];
                    parameters[0] = new SqlParameter("@Comid", ComId);
                    parameters[1] = new SqlParameter("@FromDate", FromDate);
                    parameters[2] = new SqlParameter("@ToDate", ToDate);

                    List<treedataTrialBalance> TrialBalanceReport = Helper.ExecProcMapTList<treedataTrialBalance>("[Acc_TrialBalance_PivotItem_Month]", parameters);
                    var allAccountHeadList = _accountHeadRepository.All().Include(x => x.ChildrenAccountList).ToList();//x=>x.ChildrenAccountList



                    foreach (var item in allAccountHeadList.Where(x => x.AccType == "G").OrderByDescending(x => x.Id))
                    {
                        var summaryList = new List<treedataTrialBalance>();
                        var xyz = SummaryOfChildrenTrialBalance(item.Id, TrialBalanceReport.Where(x => x.ParentId == item.Id).ToList(), item.ParentId);

                        if (xyz != null)
                        {
                            summaryList.Add(xyz);

                        }
                        TrialBalanceReport.AddRange(summaryList);
                    }
                    var accountdata = allAccountHeadList.Where(x => x.LevelId == 0).Select(p => new treechildrenTrialBalance
                    {
                        id = p.Id,
                        acccode = p.AccCode,
                        name = p.AccName,
                        description = p.AccName,
                        mappedTo = p.AccName,
                        accType = p.AccType,
                        datalevel = p.LevelId,
                        parentID = p.ParentId,
                        children = new List<treechildrenTrialBalance>(),
                        data = TrialBalanceReport.Where(x => x.ID == p.Id).FirstOrDefault()

                    }).ToList();

                    foreach (var item in accountdata)
                    {
                        var x = GetTreeViewTrialBalance(item, item.id, allAccountHeadList, TrialBalanceReport);

                        if (x != null)
                        {
                            item.children.Add(x);

                        }

                    };
                    return Json(accountdata.ToList());

                }
                return Json(new { data = "", ex = "" });
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }

        //code to generate pdf

        //code to generate pdf
















        #region trial balance report before code start
        //[AllowAnonymous]
        //public JsonResult GetTrialBalance(string rpttype, string criteria, string Months, string FromDate, string ToDate, int isGroup, int IsFirstTime = 1, int isViewPageReport = 0)
        //{
        //    try
        //    {
        //        int FYMId = 0;
        //        string dtFrom = DateTime.Now.Date.ToString();
        //        string dtTo = DateTime.Now.Date.ToString();

        //        var ComId = HttpContext.Session.GetInt32("ComId");
        //        var UserId = HttpContext.Session.GetInt32("UserId");
        //        int strId = 0;
        //        string redirectUrl = "";
        //        string reportname = "";
        //        string filename = "";
        //        //int isViewPageReport = 0;
        //        int isCompare = 0;


        //        int isShowZero = 0;
        //        int Currency = 0;
        //        int AccIdGroup = 0;
        //        int FYId = 0;



        //        if (FromDate == null)
        //        {
        //            criteria = "Date";
        //            FromDate = dtFrom;
        //            ToDate = dtTo;

        //        }
        //        else
        //        {
        //            dtFrom = FromDate;
        //            dtTo = ToDate;
        //        }



        //        if (rpttype.ToUpper().ToString() == "TB".ToUpper())
        //        {


        //            if (Months.ToUpper().ToString() == "Total Only".ToUpper() || Months.ToUpper().ToString() == "Between".ToUpper())
        //            //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

        //            {
        //                if (FYMId != null || FYMId > 0)
        //                {
        //                    dtFrom = FromDate;
        //                    dtTo = ToDate;
        //                }


        //                var TrialBalanceReport = new List<TrialBalanceModel>();


        //                //if (isGroup == 0)
        //                //{
        //                //    reportname = "rptTrialBalance";

        //                //    filename = "TrialBalance_Date_" + dtFrom + "_To_" + dtTo;
        //                //    HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceDate  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");

        //                //}
        //                //else
        //                {
        //                    if (isViewPageReport == 1)
        //                    {


        //                        var viewquary = $"Exec Acc_rptTrailBalanceGroupDate  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
        //                        SqlParameter[] parameters = new SqlParameter[10];
        //                        parameters[0] = new SqlParameter("@UserId", UserId);
        //                        parameters[1] = new SqlParameter("@ComId", ComId);
        //                        parameters[2] = new SqlParameter("@Flag", criteria);
        //                        parameters[3] = new SqlParameter("@Id", strId);
        //                        parameters[4] = new SqlParameter("@IsShowZero", 0);
        //                        parameters[5] = new SqlParameter("@Currency", 18);
        //                        parameters[6] = new SqlParameter("@dtFrom", dtFrom);
        //                        parameters[7] = new SqlParameter("@dtTo", dtTo);
        //                        parameters[8] = new SqlParameter("@accid", 0);
        //                        parameters[9] = new SqlParameter("@ViewType", Months);


        //                        TrialBalanceReport = Helper.ExecProcMapTList<TrialBalanceModel>("Acc_rptTrailBalanceGroupDate", parameters);


        //                        //return View(TrialBalanceReport);

        //                        return Json(new { data = TrialBalanceReport, ex = "" });



        //                        //redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
        //                        //return Json(new { Url = redirectUrl });


        //                    }
        //                    else
        //                    {

        //                        reportname = "rptTrialBalanceGroup";
        //                        filename = "TrialBalanceGroup_Date_" + dtFrom + "_To_" + dtTo;
        //                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroupDate  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");
        //                    }

        //                }


        //            }

        //            else if (Months.ToUpper().ToString() == "Months".ToUpper())
        //            //if (criteria.ToUpper().ToString() == "Date".ToUpper() || criteria.ToUpper().ToString() == "Today".ToUpper())

        //            {
        //                if (FYMId != null || FYMId > 0)
        //                {
        //                    dtFrom = FromDate;
        //                    dtTo = ToDate;
        //                }


        //                var TrialBalanceReport = new List<TrialBalanceModel>();


        //                //if (isGroup == 0)
        //                //{
        //                //    reportname = "rptTrialBalance";

        //                //    filename = "TrialBalance_Date_" + dtFrom + "_To_" + dtTo;
        //                //    HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceDate  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");

        //                //}
        //                //else
        //                {
        //                    if (isViewPageReport == 1)
        //                    {


        //                        var viewquary = $"Exec Acc_rptTrailBalance_MonthSegment  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "' ,'" + Months + "'  ";
        //                        SqlParameter[] parameters = new SqlParameter[10];
        //                        parameters[0] = new SqlParameter("@UserId", UserId);
        //                        parameters[1] = new SqlParameter("@ComId", ComId);
        //                        parameters[2] = new SqlParameter("@Flag", criteria);
        //                        parameters[3] = new SqlParameter("@Id", strId);
        //                        parameters[4] = new SqlParameter("@IsShowZero", 0);
        //                        parameters[5] = new SqlParameter("@Currency", 18);
        //                        parameters[6] = new SqlParameter("@dtFrom", dtFrom);
        //                        parameters[7] = new SqlParameter("@dtTo", dtTo);
        //                        parameters[8] = new SqlParameter("@accid", 0);
        //                        parameters[9] = new SqlParameter("@ViewType", Months);


        //                        //TrialBalanceReport = Helper.ExecProcMapTList<TrialBalanceModel>("Acc_rptTrailBalance_MonthsSegment", parameters);


        //                        //return View(TrialBalanceReport);
        //                        var datasetabc = new System.Data.DataSet();
        //                        datasetabc = Helper.ExecProcMapDS("Acc_rptTrailBalance_MonthSegment", parameters);
        //                        //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
        //                        //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


        //                        var abc = Helper.ConvertDataSetasJSON(datasetabc);

        //                        //var storesummarydetails = new StoreDetailsModel();
        //                        //storesummarydetails.CompanyList = storeSettingRepository.All().Where(x => x.ComId == comid).FirstOrDefault();
        //                        // , StoreInfo = storesummarydetails.CompanyList

        //                        //return Json(new { Success = 1, data = abc });

        //                        return Json(new { data = abc, ex = "" });



        //                        //redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
        //                        //return Json(new { Url = redirectUrl });


        //                    }
        //                    else
        //                    {

        //                        reportname = "rptTrialBalanceGroup";
        //                        filename = "TrialBalanceGroup_Date_" + dtFrom + "_To_" + dtTo;
        //                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroupDate  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");
        //                    }

        //                }


        //            }
        //            else
        //            {
        //                if (isGroup == 0)
        //                {
        //                    if (isCompare == 0)
        //                    {

        //                        if (isViewPageReport == 1)
        //                        {
        //                            redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
        //                            return Json(new { Url = redirectUrl });
        //                        }
        //                        else
        //                        {
        //                            reportname = "rptTrialBalance";

        //                            filename = "TrialBalance_Date_" + dtFrom + "_To_" + dtTo;
        //                            HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalance '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + ",'" + AccIdGroup + "' ");

        //                        }


        //                    }
        //                    else
        //                    {
        //                        reportname = "rptTrialBalanceComp";
        //                        filename = "TrialBalanceCompare_Date_" + dtFrom + "_To_" + dtTo;

        //                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCompareTrialBalance '" + criteria + "', '" + ComId + "', '" + strId + "'," + isShowZero + " ," + Currency + " ,'" + AccIdGroup + "' ");

        //                    }
        //                }
        //                else
        //                {
        //                    if (isCompare == 0)
        //                    {
        //                        reportname = "rptTrialBalanceGroup";

        //                        filename = "TrialBalanceWithGroup_Date_" + dtFrom + "_To_" + dtTo;
        //                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroup '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "'");

        //                    }
        //                    else ///no report still build
        //                    {
        //                        reportname = "rptTrialBalanceCompGroup";
        //                        filename = "TrialBalanceCompareGroup_Date_" + dtFrom + "_To_" + dtTo;
        //                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCompareTrialBalanceGroup '" + criteria + "', '" + ComId + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "' ");
        //                    }
        //                }




        //            }
        //        }
        //        else
        //        {

        //            //var testdata = _accountHeadRepository.GetRecursive(x=>x.Children != null);
        //            //var testdata = _accountHeadRepository.All().Include(x=>x.Children);

        //            //_accountHeadRepository.GetRecursive()

        //            //var FyId = StrId;


        //            var quary = $"Exec [Acc_TrialBalance_PivotItem_Month] '" + ComId + "','" + FromDate + "','" + ToDate + "'";
        //            SqlParameter[] parameters = new SqlParameter[3];
        //            parameters[0] = new SqlParameter("@Comid", ComId);
        //            //parameters[1] = new SqlParameter("@FYId", FyId);
        //            parameters[1] = new SqlParameter("@FromDate", FromDate);
        //            parameters[2] = new SqlParameter("@ToDate", ToDate);

        //            List<treedataTrialBalance> TrialBalanceReport = Helper.ExecProcMapTList<treedataTrialBalance>("[Acc_TrialBalance_PivotItem_Month]", parameters);
        //            var allAccountHeadList = _accountHeadRepository.All().Include(x => x.ChildrenAccountList).ToList();//x=>x.ChildrenAccountList



        //            foreach (var item in allAccountHeadList.Where(x => x.AccType == "G").OrderByDescending(x => x.Id))
        //            {
        //                var summaryList = new List<treedataTrialBalance>();
        //                var xyz = SummaryOfChildrenTrialBalance(item.Id, TrialBalanceReport.Where(x => x.ParentId == item.Id).ToList(), item.ParentId);

        //                if (xyz != null)
        //                {
        //                    summaryList.Add(xyz);

        //                }
        //                TrialBalanceReport.AddRange(summaryList);
        //            }







        //            //var accountheadlist = new List<treechildren>();
        //            var accountdata = allAccountHeadList.Where(x => x.LevelId == 0).Select(p => new treechildrenTrialBalance
        //            {
        //                id = p.Id,
        //                acccode = p.AccCode,
        //                name = p.AccName,
        //                description = p.AccName,
        //                mappedTo = p.AccName,
        //                accType = p.AccType,
        //                //mappedToAccountId = 5,
        //                datalevel = p.LevelId,
        //                parentID = p.ParentId,
        //                children = new List<treechildrenTrialBalance>(),
        //                //children = p.ChildrenAccountList.Where(x => x.IsDelete == false).Select(x =>
        //                //new treechildren
        //                //{
        //                //    id = x.Id,
        //                //    name = x.AccName,
        //                //    description = x.AccName,
        //                //    mappedTo = x.AccName,
        //                //    mappedToAccountId = 0,
        //                //    datalevel = x.LevelId,
        //                //    data = null
        //                //}).ToList(),
        //                data = TrialBalanceReport.Where(x => x.ID == p.Id).FirstOrDefault()

        //            }).ToList(); //.Include(x => x.ChildrenAccountList).Where(x => x.LevelId == 0).ToList();

        //            foreach (var item in accountdata)
        //            {
        //                var x = GetTreeViewTrialBalance(item, item.id, allAccountHeadList, TrialBalanceReport);

        //                if (x != null)
        //                {
        //                    item.children.Add(x);

        //                }

        //            };
        //            return Json(accountdata.ToList());


        //            //var accountdata = _accountHeadRepository.All().Include(x => x.ChildrenAccountList).Where(x => x.LevelId == 0);//.Take(30);//.Include(x=>x.vUnit).Include(x=>x.Category);
        //            //var query = (from p in accountdata

        //            //             select new treechildren
        //            //             {
        //            //                 id = p.Id,
        //            //                 name = p.AccName,
        //            //                 description = p.AccName,
        //            //                 mappedTo = p.AccName,
        //            //                 mappedToAccountId = 5,
        //            //                 datalevel = p.LevelId,
        //            //                 //children = p.ChildrenAccountList.ToList().Where(x => x.IsDelete == false)
        //            //                 children = p.ChildrenAccountList.Where(x => x.IsDelete == false).Select(x =>
        //            //                   new treechildren
        //            //                   {
        //            //                       id = x.Id,
        //            //                       name = x.AccName,
        //            //                       description = x.AccName,
        //            //                       mappedTo = x.AccName,
        //            //                       mappedToAccountId = 0,
        //            //                       datalevel = x.LevelId,
        //            //                       children = x.ChildrenAccountList.Where(x => x.IsDelete == false).Select(y =>
        //            //                          new treechildren
        //            //                          {
        //            //                              id = y.Id,
        //            //                              name = y.AccName,
        //            //                              description = y.AccName,
        //            //                              mappedTo = y.AccName,
        //            //                              mappedToAccountId = 5,
        //            //                              datalevel = y.LevelId
        //            //                          }).ToList(),
        //            //                       data = null
        //            //                   }).ToList(),
        //            //                 data = null
        //            //             });

        //            //var parser = new Parser<treechildren>(Request.Form, query);
        //            //return Json(query.ToList());

        //        }



        //        return Json(new { data = "", ex = "" });



        //    }
        //    catch (Exception ex)
        //    {

        //        Console.WriteLine(ex.Message);
        //        return Json(ex.Message);
        //    }
        //}
        #endregion trial balance report before code end
        public ActionResult TreeReporting(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }

        //#endregion



        #region Show Voucher

        public ActionResult PrintReport(int? id, string type)
        {
            try
            {

                return RedirectToAction("Index", "ReportViewer");

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            return null;
        }





        [AllowAnonymous]
        public ActionResult ShowVoucherReport()
        {
            TempData["Message"] = "Data Load Successfully";
            TempData["Status"] = "1";
            tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), "", "List Show", "");

            var ComId = HttpContext.Session.GetInt32("ComId");
            int defaultcountry = (_storeSettingRepository.All().Where(a => a.ComId == ComId).Select(a => a.CountryId).FirstOrDefault());

            //if (Session["Empname"] == null)
            //{
            //    return RedirectToRoute("GTR");
            //}
            string date = DateTime.Now.ToString("dd-MMM-yyyy");
            string date1 = DateTime.Now.ToString("dd-MMM-yyyy");

            ViewBag.date = date.ToString();
            ViewBag.date1 = date1.ToString();

            ViewBag.CountryId = _countryRepository.GetCurrencyList(); //new SelectList(_countryRepository.All(), "Id", "CurrencyShortName", defaultcountry);
            ViewBag.VoucherTypeId = _VoucherTypeRepository.GetAllForDropDown();
            //ViewBag.AccId = new SelectList(POS.GetChartOfAccountLedger(comid), "AccId", "AccName").ToList();


            #region accid viewbag selectlist
            List<AccountHeadModel> acclistdb = _accountHeadRepository.All().Where(x => x.AccType == "L").ToList();

            List<SelectListItem> accid = new List<SelectListItem>();
            accid.Add(new SelectListItem { Text = "=ALL=", Value = "0" });

            //licities.Add(new SelectListItem { Text = "--Select State--", Value = "0" });
            if (acclistdb != null)
            {
                foreach (AccountHeadModel x in acclistdb)
                {
                    accid.Add(new SelectListItem { Text = x.AccName, Value = x.Id.ToString() });
                }
            }
            ViewBag.AccId = (accid);
            #endregion



            ViewBag.PrdUnitId = _prdUnitRepository.GetAllForDropDown(); //&& c.ComId == (transactioncomid)


            ShowVoucherViewModel model = new ShowVoucherViewModel();
            List<Acc_FiscalYearModel> fiscalyear = _accFiscalYearRepository.All().ToList();
            int fiscalyid = fiscalyear.Max(p => p.Id);


            List<Acc_FiscalMonthModel> fiscalmonth = _accFiscalMonthRepository.All().Where(x => x.FYId == fiscalyid).ToList();

            model.FiscalYs = fiscalyear;
            model.ProcessMonths = fiscalmonth;
            model.CountryId = defaultcountry;


            return View(model);
        }


        [HttpPost, ActionName("SetSessionVoucherReport")]
        public ActionResult SetSessionVoucherReport(string criteria, string rptFormat, string rpttype, string dtFrom, string dtTo,
            string VoucherFrom, string VoucherTo, int? Currency, int? isPosted, int? isOther, int? FYId, int? VoucherTypeId, int? AccId, int? PrdUnitId)
        {
            //data: { criteria: criteria, rptFormat: rptFormat, rpttype: rpttype,
            //dtFrom: dtFrom, dtTo: dtTo, VoucherFrom: VoucherFrom, VoucherTo: VoucherTo, Currency: Currency, isPosted: isPosted, isOther: isOther  },

            try
            {

                var ComId = HttpContext.Session.GetInt32("ComId");

                var VoucherTypeShortName = "";

                if (criteria == "fy")
                {
                    if (FYId != null || FYId.Value > 0)
                    {
                        Acc_FiscalYearModel fiscalyear = _accFiscalYearRepository.All().Where(x => x.Id == FYId).FirstOrDefault();
                        dtFrom = fiscalyear.OpDate;
                        dtTo = fiscalyear.ClDate;
                    }
                }


                if (VoucherTypeId != null || VoucherTypeId.Value >= 0)
                {
                    var acc_VoucherTypes = _VoucherTypeRepository.All().Where(x => x.Id == VoucherTypeId).FirstOrDefault();
                    VoucherTypeShortName = acc_VoucherTypes.VoucherTypeNameShort;

                }




                var abcvouchermain = _VoucherTypeRepository.All().Where(x => x.Id == VoucherTypeId).FirstOrDefault();

                var reportname = "rptShowVoucher";// _accVoucherRepository.All().Where(x => x.VoucherId== id).Select(x => x.VoucherNo).FirstOrDefault();

                if (abcvouchermain != null)
                {
                    if (abcvouchermain.VoucherTypeName.ToUpper() == "Bank Payment".ToUpper())
                    {
                        reportname = "rptShowVoucher_VBP";
                    }
                    else if (abcvouchermain.VoucherTypeName.ToUpper() == "Journal".ToUpper())
                    {
                        reportname = "rptShowVoucher_Journal";

                    }
                    else if (abcvouchermain.VoucherTypeName.ToUpper() == "Bank Receipt".ToUpper())
                    {
                        reportname = "rptShowVoucher_MoneyReceipt";

                    }
                    else if (abcvouchermain.VoucherTypeName.ToUpper() == "Bank Payment".ToUpper())
                    {
                        reportname = "rptChk_janata";
                    }
                }

                if (rpttype == "lov")
                {
                    reportname = "rptListOfVoucher";

                }





                string filename = "";
                string strQueryMain = "";
                if (criteria.ToUpper().ToString() == "No".ToUpper())
                {

                    filename = "VoucherNo_From_" + VoucherFrom + "_To_" + VoucherTo;// _accVoucherRepository.All().Where(x => x.VoucherNo == VoucherFrom).Select(x => x.VoucherNo + "_" + x.Acc_VoucherTypes.VoucherTypeName).Single();



                    strQueryMain = "Exec Acc_rptVoucher '" + isPosted.ToString() + "','VNo','" + VoucherTypeShortName + "', '" + ComId + "' , '" +
                        dtFrom + "','" + dtTo + "','" + VoucherFrom + "','" + VoucherTo + "',0, " + Currency + ", '" + AccId + "'";
                }
                else if (criteria.ToUpper().ToString() == "Date".ToUpper())
                {
                    filename = "Voucher_Date_" + dtFrom + "_To_" + dtTo;// _accVoucherRepository.All().Where(x => x.VoucherNo == VoucherFrom).Select(x => x.VoucherNo + "_" + x.Acc_VoucherTypes.VoucherTypeName).Single();


                    strQueryMain = "Exec Acc_rptVoucher '" + isPosted.ToString() + "','VDATE','" + VoucherTypeShortName + "'  , '" + ComId + "' ,'" +
                        dtFrom + "','" + dtTo + "','','',0, " + Currency + ", '" + AccId + "'";


                }
                else if (criteria.ToUpper().ToString() == "fy".ToUpper())
                {
                    filename = "Voucher_Date_" + dtFrom + "_To_" + dtTo;// _accVoucherRepository.All().Where(x => x.VoucherNo == VoucherFrom).Select(x => x.VoucherNo + "_" + x.Acc_VoucherTypes.VoucherTypeName).Single();

                    strQueryMain = "Exec Acc_rptVoucher '" + isPosted.ToString() + "','VDATE','" + VoucherTypeShortName + "' , '" +
                        ComId + "','" + dtFrom + "','" + dtTo + "','','',0, " + Currency + ", '" + AccId + "'";


                }




                var subReport = new SubReport();
                //var subReportObject = new List<SubReport>();

                subReport.strDSNSub = "DataSet1";
                subReport.strRFNSub = "VoucherId";
                subReport.strQuerySub = "Exec [Acc_rptShowVoucher_Referance] 'xxxx','" + ComId + "','ChequeNo'";
                subReport.strRptPathSub = "rptShowVoucher_ChequeNo";
                //subReportObject.Add(subReport);
                postData.Add(2, subReport);



                subReport = new SubReport();
                subReport.strDSNSub = "DataSet1";
                subReport.strRFNSub = "VoucherId";
                subReport.strQuerySub = "Exec [Acc_rptShowVoucher_Referance] 'xxxx','" + ComId + "','ReceiptPerson'";
                subReport.strRptPathSub = "rptShowVoucher_ReceiptPerson";
                //subReportObject.Add(subReport);
                postData.Add(3, subReport);

                //postData.Add(3, new subReport("rptInvoice_PM", "", "DataSet1", "Exec rptInvoice_PM '" + id + "','" + HttpContext.Session.GetInt32("ComId") + ""));


                HttpContext.Session.SetObject("rptList", postData);





                string DataSourceName = "DataSet1";
                var ReportPath = "~/ReportViewer/Accounts/" + reportname + ".rdlc";
                HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Accounts/" + reportname + ".rdlc");
                HttpContext.Session.SetString("ReportQuery", strQueryMain);
                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));

                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
                clsReport.strDSNMain = DataSourceName;

                string callBackUrl = Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Repository.GenerateReport(ReportPath, strQueryMain, ConstrName, rptFormat);

                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "", reportname, "Report", reportname);

                return Json(callBackUrl);



            }

            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

            }
            return null;

        }


        #endregion


        #region Summary Report
        [AllowAnonymous]

        public JsonResult GetMonthList(int? id)
        {
            var ComId = HttpContext.Session.GetInt32("ComId"); ;

            //db.Configuration.ProxyCreationEnabled = false;
            //db.Configuration.LazyLoadingEnabled = false;
            if (id == null)
            {
                List<Acc_FiscalYearModel> fiscalyear = _accFiscalYearRepository.All().Where(x => x.ComId == ComId).ToList();
                id = fiscalyear.Max(p => p.Id);
            }

            List<Acc_FiscalMonthModel> Acc_FiscalMonth = _accFiscalMonthRepository.All().Where(x => x.FYId == id).ToList();
            List<Acc_FiscalMonthModel> datamonth = new List<Acc_FiscalMonthModel>();
            foreach (Acc_FiscalMonthModel item in Acc_FiscalMonth)
            {
                Acc_FiscalMonthModel asdf = new Acc_FiscalMonthModel
                {
                    Id = item.Id,
                    MonthName = item.MonthName,
                    dtFrom = item.OpeningdtFrom.ToString("dd-MMM-yy"),
                    dtTo = item.ClosingdtTo.ToString("dd-MMM-yy")
                    //LCDate = DateTime.Parse(item.FirstShipDate.ToString()).ToString("ddd-MMM-yy")
                };
                datamonth.Add(asdf);
            }

            List<Acc_FiscalHalfYear> Acc_FiscalHalfYear = _accFiscalHalfYearRepository.All().Where(x => x.FYId == id).ToList();
            List<Acc_FiscalHalfYear> datahalfyear = new List<Acc_FiscalHalfYear>();
            foreach (Acc_FiscalHalfYear item in Acc_FiscalHalfYear)
            {
                Acc_FiscalHalfYear halfyear = new Acc_FiscalHalfYear
                {
                    Id = item.Id,
                    HyearName = item.HyearName,
                    dtFrom = item.dtFrom,
                    dtTo = item.dtTo
                };
                datahalfyear.Add(halfyear);
            }



            List<Acc_FiscalQtr> FiscalQuarter = _accFiscalQtrRepository.All().Where(x => x.FYId == id).ToList();
            List<Acc_FiscalQtr> dataquarter = new List<Acc_FiscalQtr>();
            foreach (Acc_FiscalQtr item in FiscalQuarter)
            {
                Acc_FiscalQtr quarter = new Acc_FiscalQtr
                {
                    Id = item.Id,
                    QtrName = item.QtrName,
                    dtFrom = item.dtFrom,
                    dtTo = item.dtTo
                };
                dataquarter.Add(quarter);
            }

            var data = new { datam = datamonth, datah = datahalfyear, dataq = dataquarter };
            return Json(data);

        }

        [AllowAnonymous]
        public ActionResult SummaryReport()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            int defaultcountry = (_storeSettingRepository.All().Where(a => a.ComId == ComId).Select(a => a.CountryId).FirstOrDefault());
            ViewBag.CountryId = _countryRepository.GetCurrencyList();// new SelectList(_countryRepository.All(), "Id", "CurrencyShortName", defaultcountry);
            ViewBag.AccIdGroup = new SelectList(_accountHeadRepository.All().Where(x => x.AccType == "G"), "Id", "AccName");
            ViewBag.PrdUnitId = _prdUnitRepository.GetAllForDropDown(); //&& c.ComId == (transactioncomid)


            ShowVoucherViewModel model = new ShowVoucherViewModel();
            List<Acc_FiscalYearModel> fiscalyear = _accFiscalYearRepository.All().Where(x => x.ComId == ComId).OrderByDescending(x => x.Id).ToList();
            int fiscalyid = fiscalyear.Max(p => p.Id);


            List<Acc_FiscalMonthModel> fiscalmonth = _accFiscalMonthRepository.All().Where(x => x.FYId == fiscalyid).ToList();
            List<Acc_FiscalQtr> fiscalquarter = _accFiscalQtrRepository.All().Where(x => x.FYId == fiscalyid).ToList();
            List<Acc_FiscalHalfYear> fiscalhalfyear = _accFiscalHalfYearRepository.All().Where(x => x.FYId == fiscalyid).ToList();

            model.FiscalYs = fiscalyear;
            model.ProcessMonths = fiscalmonth;

            model.ProcessQtr = fiscalquarter;
            model.ProcessHalfYear = fiscalhalfyear;


            model.CountryId = defaultcountry;

            //rptGeneralReport.PrcSetData(model, "Create", dsList);
            return View(model);
        }


        public partial class TrialBalanceModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? Caption { get; set; }
            public string? MonthCaption { get; set; }

            public string? opBalance { get; set; }
            public string? tranBalance { get; set; }
            public string? clBalance { get; set; }

            public int? AccId { get; set; }

            public string? criteria { get; set; }
            public int? strid { get; set; }


            public string? AccCode { get; set; }
            public string? AccName { get; set; }
            public string? opDebit { get; set; }
            public string? opCredit { get; set; }
            public string? TranDebit { get; set; }
            public string? TranCredit { get; set; }
            public string? clDebit { get; set; }
            public string? clCredit { get; set; }


            public string? Expense { get; set; }
            public string? Income { get; set; }
            public string? Asset { get; set; }
            public string? Liability { get; set; }


            public string? AccType { get; set; }


        }



        public partial class BalanceSheetModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? FYName { get; set; }
            public string? Caption { get; set; }

            public string? opBalance { get; set; }
            public int? AccId { get; set; }
            public string? AccCode { get; set; }
            public string? AccName { get; set; }
            public string? Amount { get; set; }
            public string? AccType { get; set; }
            public string? TranStatus { get; set; }
            public string? TranType { get; set; }



            public int IsBold { get; set; }
            public int IsTopLine { get; set; }
            public int IsBottomLine { get; set; }
            public int IsLeftLine { get; set; }
            public int IsRightLine { get; set; }

            public int DispType { get; set; }

            public int SortNo { get; set; }


        }


        public partial class OwnersEquityModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? FYName { get; set; }
            public string? Caption { get; set; }

            public string? AmountSC { get; set; }
            public string? AmountSP { get; set; }
            public string? AmountSM { get; set; }
            public string? AmountRS { get; set; }
            public string? AmountRE { get; set; }

            public string? AmountTotal { get; set; }


            public int? AccId { get; set; }
            public string? AccCode { get; set; }
            public string? Headings { get; set; }
            public string? TranStatus { get; set; }
            public string? TranType { get; set; }


            public int IsBold { get; set; }
            public int IsTopLine { get; set; }
            public int IsBottomLine { get; set; }
            public int IsLeftLine { get; set; }
            public int IsRightLine { get; set; }

            public int DispType { get; set; }
            public int SortNo { get; set; }


        }


        /// <summary>
        ///        FYName IsBold  IsTopLine IsBottomLine    IsLeftLine IsRightLine
        /// </summary>
        /// <param name="criteria"></param>
        /// <param name="strId"></param>
        /// <returns></returns>


        [AllowAnonymous]
        public ActionResult TrialBalanceViewReport(string criteria, string strId, string dtFrom, string dtTo)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                ViewBag.criteria = criteria;
                ViewBag.strId = strId;


                if (ComId == null)
                {
                    result = "Please Login first";
                }

                //Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
                //string criteria = "Year";
                //string strId = "42";
                string isShowZero = "0";
                string Currency = "18";
                string AccIdGroup = "0";


                var TrialBalanceReport = new List<TrialBalanceModel>();

                if (criteria == "Year")
                {
                    var quary = $"Exec Acc_rptTrailBalanceGroup '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "'";
                    SqlParameter[] parameters = new SqlParameter[7];
                    parameters[0] = new SqlParameter("@UserId", UserId);
                    parameters[1] = new SqlParameter("@ComId", ComId);
                    parameters[2] = new SqlParameter("@Flag", criteria);
                    parameters[3] = new SqlParameter("@Id", strId);
                    parameters[4] = new SqlParameter("@IsShowZero", 0);
                    parameters[5] = new SqlParameter("@Currency", 18);
                    parameters[6] = new SqlParameter("@accid", 0);
                    TrialBalanceReport = Helper.ExecProcMapTList<TrialBalanceModel>("Acc_rptTrailBalanceGroup", parameters);

                }
                else
                {

                    var viewquary = $"Exec Acc_rptTrailBalanceGroupDate  '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ";
                    SqlParameter[] parameters = new SqlParameter[9];
                    parameters[0] = new SqlParameter("@UserId", UserId);
                    parameters[1] = new SqlParameter("@ComId", ComId);
                    parameters[2] = new SqlParameter("@Flag", criteria);
                    parameters[3] = new SqlParameter("@Id", strId);
                    parameters[4] = new SqlParameter("@IsShowZero", 0);
                    parameters[5] = new SqlParameter("@Currency", 18);
                    parameters[6] = new SqlParameter("@dtFrom", dtFrom);
                    parameters[7] = new SqlParameter("@dtTo", dtTo);
                    parameters[8] = new SqlParameter("@accid", 0);

                    TrialBalanceReport = Helper.ExecProcMapTList<TrialBalanceModel>("Acc_rptTrailBalanceGroupDate", parameters);


                }








                return View(TrialBalanceReport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        [AllowAnonymous]
        public ActionResult NotesViewReport(string Criteria, string StrId, string dtFrom, string dtTo, string CountryId, string AccIdGroup, string ReportType)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                ViewBag.criteria = Criteria;
                ViewBag.strId = StrId;


                if (ReportType == "Asset" || ReportType == "Liability")
                {
                    ViewBag.ReportType = "BalanceSheet";
                }
                else
                {
                    ViewBag.ReportType = "IncomeStatement";
                }





                if (ComId == null)
                {
                    result = "Please Login first";
                }

                //Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
                //string criteria = "Year";
                //string strId = "42";
                string isShowZero = "0";
                string Currency = "18";
                //string AccIdGroup = "0";

                string prdunitid = "0";
                string AccType = "All";
                string AccountType = "All";
                //string AccId = "All";



                var quary = $"Exec Acc_rptWorkSheet '" + UserId + "','" + ComId + "','" + dtFrom + "','" + dtTo + "','" + Criteria + "', '" + StrId + "', " + isShowZero + "," + Currency + " ,'" + prdunitid + "' ,'" + AccType + "' ,'" + AccountType + "' ,'" + AccIdGroup + "'";
                //"Exec Acc_rptWorkSheet  '" + userid + "','" + ComId + "','" + dtFrom + "' ,'" + dtTo + "'  "

                SqlParameter[] parameters = new SqlParameter[12];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@dtFrom", dtFrom);
                parameters[3] = new SqlParameter("@dtTo", dtTo);

                parameters[4] = new SqlParameter("@Criteria", Criteria);
                parameters[5] = new SqlParameter("@StrId", StrId);
                parameters[6] = new SqlParameter("@IsShowZero", isShowZero);
                parameters[7] = new SqlParameter("@Currency", Currency);
                parameters[8] = new SqlParameter("@PrdUnit", prdunitid);
                parameters[9] = new SqlParameter("@AccType", AccType);
                parameters[10] = new SqlParameter("@AccountType", AccountType);
                parameters[11] = new SqlParameter("@AccId", AccIdGroup);



                List<TrialBalanceModel> TrialBalanceReport = Helper.ExecProcMapTList<TrialBalanceModel>("Acc_rptWorkSheet", parameters);

                return View(TrialBalanceReport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        [AllowAnonymous]
        public ActionResult WorkSheetViewReport(string Criteria, string StrId, string dtFrom, string dtTo, string CountryId, string AccIdGroup)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                ViewBag.criteria = Criteria;
                ViewBag.strId = StrId;


                if (ComId == null)
                {
                    result = "Please Login first";
                }

                //Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
                //string criteria = "Year";
                //string strId = "42";
                string isShowZero = "0";
                string Currency = "18";
                //string AccIdGroup = "0";

                string prdunitid = "0";
                string AccType = "All";
                string AccountType = "All";
                //string AccId = "All";



                var quary = $"Exec Acc_rptWorkSheet '" + UserId + "','" + ComId + "','" + dtFrom + "','" + dtTo + "','" + Criteria + "', '" + StrId + "', " + isShowZero + "," + Currency + " ,'" + prdunitid + "' ,'" + AccType + "' ,'" + AccountType + "' ,'" + AccIdGroup + "'";
                //"Exec Acc_rptWorkSheet  '" + userid + "','" + ComId + "','" + dtFrom + "' ,'" + dtTo + "'  "

                SqlParameter[] parameters = new SqlParameter[12];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@dtFrom", dtFrom);
                parameters[3] = new SqlParameter("@dtTo", dtTo);

                parameters[4] = new SqlParameter("@Criteria", Criteria);
                parameters[5] = new SqlParameter("@StrId", StrId);
                parameters[6] = new SqlParameter("@IsShowZero", isShowZero);
                parameters[7] = new SqlParameter("@Currency", Currency);
                parameters[8] = new SqlParameter("@PrdUnit", prdunitid);
                parameters[9] = new SqlParameter("@AccType", AccType);
                parameters[10] = new SqlParameter("@AccountType", AccountType);
                parameters[11] = new SqlParameter("@AccId", AccIdGroup);



                List<TrialBalanceModel> TrialBalanceReport = Helper.ExecProcMapTList<TrialBalanceModel>("Acc_rptWorkSheet", parameters);

                return View(TrialBalanceReport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }




        [AllowAnonymous]
        public ActionResult BalanceSheetViewReport(string criteria, string strId, string dtFrom, string dtTo)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                ViewBag.criteria = criteria;
                ViewBag.strId = strId;


                if (ComId == null)
                {
                    result = "Please Login first";
                }

                //Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
                //string criteria = "Year";
                //string strId = "42";
                string isShowZero = "0";
                string Currency = "18";
                string IsShowtable = "1";


                var quary = $"Exec Acc_rptBalanceSheet '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + "," + IsShowtable + " ";
                //"Exec Acc_rptWorkSheet  '" + userid + "','" + ComId + "','" + dtFrom + "' ,'" + dtTo + "'  "

                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@Id", strId);
                parameters[4] = new SqlParameter("@IsShowZero", isShowZero);
                parameters[5] = new SqlParameter("@Currency", Currency);
                parameters[6] = new SqlParameter("@IsShowtable", IsShowtable);



                List<BalanceSheetModel> BalanceSheetReport = Helper.ExecProcMapTList<BalanceSheetModel>("Acc_rptBalanceSheet", parameters);

                return View(BalanceSheetReport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public ActionResult IncomeStatementViewReport(string criteria, string strId, string dtFrom, string dtTo)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                ViewBag.criteria = criteria;
                ViewBag.strId = strId;


                if (ComId == null)
                {
                    result = "Please Login first";
                }

                //Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
                //string criteria = "Year";
                //string strId = "42";
                string isShowZero = "0";
                string Currency = "18";
                string IsShowtable = "1";


                var quary = $"Exec Acc_rptIncome '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + "," + IsShowtable + " ";
                //"Exec Acc_rptWorkSheet  '" + userid + "','" + ComId + "','" + dtFrom + "' ,'" + dtTo + "'  "

                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@Id", strId);
                parameters[4] = new SqlParameter("@IsShowZero", isShowZero);
                parameters[5] = new SqlParameter("@Currency", Currency);
                parameters[6] = new SqlParameter("@IsShowtable", IsShowtable);



                List<BalanceSheetModel> BalanceSheetReport = Helper.ExecProcMapTList<BalanceSheetModel>("Acc_rptIncome", parameters);

                return View(BalanceSheetReport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        public ActionResult ISTabulatorReport(string criteria, string strId, string dtFrom, string dtTo)
        {
            ViewBag.criteria = criteria;
            ViewBag.strId = strId;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;
            return View();
        }
        [AllowAnonymous]
        public ActionResult IncomeStatementTabulatorReport(string criteria, string strId, string dtFrom, string dtTo)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                ViewBag.criteria = criteria;
                ViewBag.strId = strId;


                if (ComId == null)
                {
                    result = "Please Login first";
                }

                //Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
                //string criteria = "Year";
                //string strId = "42";
                string isShowZero = "0";
                string Currency = "18";
                string IsShowtable = "1";


                var quary = $"Exec Acc_rptIncome '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + "," + IsShowtable + " ";
                //"Exec Acc_rptWorkSheet  '" + userid + "','" + ComId + "','" + dtFrom + "' ,'" + dtTo + "'  "

                string data = quary;
                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@Id", strId);
                parameters[4] = new SqlParameter("@IsShowZero", isShowZero);
                parameters[5] = new SqlParameter("@Currency", Currency);
                parameters[6] = new SqlParameter("@IsShowtable", IsShowtable);




                var datasetabc = new System.Data.DataSet();
                //List<MonthlySalesModel> monthlysales = Helper.ExecProcMapTList<MonthlySalesModel>("prcGetDashboard", sqlParameter2).ToList();
                datasetabc = Helper.ExecProcMapDS("Acc_rptIncome", parameters);
                var dataTable = datasetabc.Tables[0];

                //List<BalanceSheetModel> BalanceSheetReport = Helper.ExecProcMapTList<BalanceSheetModel>("Acc_rptIncome", parameters);



                //return View(dataTable);

                return Json(new { dataTable, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public ActionResult OwnersEquityViewReport(string criteria, string strId, string dtFrom, string dtTo)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                ViewBag.criteria = criteria;
                ViewBag.strId = strId;


                if (ComId == null)
                {
                    result = "Please Login first";
                }


                string isShowZero = "0";
                string Currency = "18";
                string IsShowtable = "1";


                var quary = $"Exec [Acc_rptOwnersEquityCarry] '" + UserId + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + "," + IsShowtable + " ";
                //"Exec Acc_rptWorkSheet  '" + userid + "','" + ComId + "','" + dtFrom + "' ,'" + dtTo + "'  "

                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@UserId", UserId);
                parameters[1] = new SqlParameter("@ComId", ComId);
                parameters[2] = new SqlParameter("@Flag", criteria);
                parameters[3] = new SqlParameter("@Id", strId);
                parameters[4] = new SqlParameter("@IsShowZero", isShowZero);
                parameters[5] = new SqlParameter("@Currency", Currency);
                parameters[6] = new SqlParameter("@IsShowResult", IsShowtable);



                List<OwnersEquityModel> BalanceSheetReport = Helper.ExecProcMapTList<OwnersEquityModel>("[Acc_rptOwnersEquityCarry]", parameters);

                return View(BalanceSheetReport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        [OverridableAuthorize]
        [HttpGet, ActionName("Dashboard")]
        public ActionResult Dashboard()
        {
            //var message = TempData["Message"] as string;

            //if (!string.IsNullOrEmpty(message))
            //{
            //    ViewBag.Message = message;
            //}
            return View();
        }



        [AllowAnonymous]
        [HttpPost, ActionName("SetSessionSummaryReport")]
        public JsonResult SetSessionSummaryReport(string criteria, string rptFormat, string rpttype, int? Currency, int? isCompare, int? isCumulative, int? isShowZero, int? isGroup, int? FYId, int? FYHId, int? FYQId, int? FYMId, string FromDate, string ToDate, int? AccIdGroup, int? PrdUnitId, int? isViewPageReport, int? isTabulatorPageReport)
        {

            try
            {
                string dtFrom = DateTime.Now.ToString();
                string dtTo = DateTime.Now.ToString();

                var ComId = HttpContext.Session.GetInt32("ComId");
                var userid = HttpContext.Session.GetInt32("UserId");
                int strId = 0;
                string redirectUrl = "";

                if (criteria == "fy")
                {
                    if (FYId != null || FYId.Value > 0)
                    {
                        Acc_FiscalYearModel fiscalyear = _accFiscalYearRepository.All().Where(x => x.Id == FYId).FirstOrDefault();
                        dtFrom = fiscalyear.OpDate;
                        dtTo = fiscalyear.ClDate;
                    }
                }

                var reportname = "";
                var filename = "";


                if (criteria == "Year")
                {
                    if (FYId != null || FYId.Value > 0)
                    {
                        Acc_FiscalYearModel fiscalyear = _accFiscalYearRepository.All().Where(x => x.Id == FYId).FirstOrDefault();
                        strId = fiscalyear.Id;
                        dtFrom = fiscalyear.OpDate;
                        dtTo = fiscalyear.ClDate;
                    }
                }
                if (criteria.ToUpper().ToString() == "HYear".ToUpper())
                {
                    if (FYHId != null || FYHId.Value > 0)
                    {
                        Acc_FiscalHalfYear fiscalhalfyear = _accFiscalHalfYearRepository.All().Where(x => x.Id == FYHId).FirstOrDefault();
                        strId = fiscalhalfyear.Id;
                        dtFrom = fiscalhalfyear.dtFrom;
                        dtTo = fiscalhalfyear.dtTo;
                    }
                }
                if (criteria.ToUpper().ToString() == "Quarter".ToUpper())
                {
                    if (FYHId != null || FYHId.Value > 0)
                    {
                        Acc_FiscalQtr fiscalqtr = _accFiscalQtrRepository.All().Where(x => x.Id == FYQId).FirstOrDefault();
                        strId = fiscalqtr.Id;
                        dtFrom = fiscalqtr.dtFrom;
                        dtTo = fiscalqtr.dtTo;
                    }
                }
                if (criteria.ToUpper().ToString() == "Month".ToUpper())
                {
                    if (FYMId != null || FYMId.Value > 0)
                    {
                        Acc_FiscalMonthModel fiscalmonth = _accFiscalMonthRepository.All().Where(x => x.Id == FYMId).FirstOrDefault();
                        strId = fiscalmonth.Id;
                        dtFrom = fiscalmonth.dtFrom;
                        dtTo = fiscalmonth.dtTo;
                    }
                }


                ///postData.Add("Acc_rptFormat", rptFormat);
                if (rpttype.ToUpper().ToString() == "TB".ToUpper())
                {


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        if (FYMId != null || FYMId.Value > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }


                        if (isGroup == 0)
                        {

                            if (isViewPageReport == 1)
                            {
                                redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                return Json(new { Url = redirectUrl });
                            }
                            else
                            {


                                reportname = "rptTrialBalance";

                                filename = "TrialBalance_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceDate  '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");
                            }



                        }
                        else
                        {
                            if (isViewPageReport == 1)
                            {
                                redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                return Json(new { Url = redirectUrl });
                            }
                            else
                            {

                                reportname = "rptTrialBalanceGroup";
                                filename = "TrialBalanceGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroupDate  '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + " ,'" + dtFrom + "' ,'" + dtTo + "' ,'" + AccIdGroup + "'  ");
                            }

                        }


                    }
                    else
                    {
                        if (isGroup == 0)
                        {
                            if (isCompare == 0)
                            {

                                if (isViewPageReport == 1)
                                {
                                    redirectUrl = Url.Action("TrialBalanceViewReport", "Accounts", new { criteria = criteria, strid = strId, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency });
                                    return Json(new { Url = redirectUrl });
                                }
                                else
                                {
                                    reportname = "rptTrialBalance";

                                    filename = "TrialBalance_Date_" + dtFrom + "_To_" + dtTo;
                                    HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalance '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + " ," + Currency + ",'" + AccIdGroup + "' ");

                                }


                            }
                            else
                            {
                                reportname = "rptTrialBalanceComp";
                                filename = "TrialBalanceCompare_Date_" + dtFrom + "_To_" + dtTo;

                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCompareTrialBalance '" + criteria + "', '" + ComId + "', '" + strId + "'," + isShowZero + " ," + Currency + " ,'" + AccIdGroup + "' ");

                            }
                        }
                        else
                        {
                            if (isCompare == 0)
                            {
                                reportname = "rptTrialBalanceGroup";

                                filename = "TrialBalanceWithGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTrailBalanceGroup '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "'");

                            }
                            else ///no report still build
                            {
                                reportname = "rptTrialBalanceCompGroup";
                                filename = "TrialBalanceCompareGroup_Date_" + dtFrom + "_To_" + dtTo;
                                HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCompareTrialBalanceGroup '" + criteria + "', '" + ComId + "', '" + strId + "', " + isShowZero + "," + Currency + " ,'" + AccIdGroup + "' ");
                            }
                        }




                    }
                }

                else if (rpttype.ToUpper().ToString() == "WS".ToUpper())
                {

                    string AccIdGroupString = "All";
                    if (AccIdGroup != null)
                    {
                        AccIdGroupString = AccIdGroup.ToString();
                    }

                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        if (FYMId != null || FYMId.Value > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }

                        if (isViewPageReport == 1)
                        {
                            redirectUrl = Url.Action("WorkSheetViewReport", "Accounts", new { UserId = userid, ComId = ComId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, criteria = criteria, strId = strId });
                            return Json(new { Url = redirectUrl });
                        }

                    }
                    else
                    {
                        if (isViewPageReport == 1)
                        {



                            redirectUrl = Url.Action("WorkSheetViewReport", "Accounts", new { dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, Criteria = criteria, StrId = strId, AccIdGroup = AccIdGroupString });
                            return Json(new { Url = redirectUrl });
                        }
                        else
                        {

                            reportname = "rptWorkSheet";
                            filename = "WorkSheet_Date_" + dtFrom + "_To_" + dtTo;
                            HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptWorkSheet  '" + userid + "','" + ComId + "','" + dtFrom + "' ,'" + dtTo + "','" + criteria + "','" + strId + "' ,'0' ,'" + Currency + "' ,'" + PrdUnitId + "' ,'All' ,'L','" + AccIdGroupString + "' ");
                        }
                    }






                }

                else if (rpttype.ToUpper().ToString() == "TR".ToUpper())
                {

                    string AccIdGroupString = "All";
                    if (AccIdGroup != null)
                    {
                        AccIdGroupString = AccIdGroup.ToString();
                    }

                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        if (FYMId != null || FYMId.Value > 0)
                        {
                            dtFrom = FromDate;
                            dtTo = ToDate;
                        }

                        //if (isViewPageReport == 1)
                        //{
                        redirectUrl = Url.Action("TreeReporting", "Accounts", new { UserId = userid, ComId = ComId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, criteria = criteria, strId = strId });
                        return Json(new { Url = redirectUrl });
                        //}

                    }
                    else
                    {
                        //if (isViewPageReport == 1)
                        //{
                        redirectUrl = Url.Action("TreeReporting", "Accounts", new { dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, Criteria = criteria, StrId = strId, AccIdGroup = AccIdGroupString });
                        return Json(new { Url = redirectUrl });
                        //}

                    }






                }

                else if (rpttype.ToUpper().ToString() == "MC".ToUpper())
                {
                    reportname = "rptMaterialConsumed";
                    filename = "MaterialConsumed_Date_" + dtFrom + "_To_" + dtTo;
                    HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptMaterialConsumed '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "'," + Currency + " ");

                }


                else if (rpttype.ToUpper().ToString() == "COGS".ToUpper())
                {
                    if (isCompare == 1)
                    {
                        reportname = "rptCOGSCompare";
                        filename = "CostOfGoodsSoldCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCOGSCompare '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "'");

                    }
                    else if (isCumulative == 1)
                    {
                        reportname = "rptCOGSCompare";
                        filename = "CostOfGoodsSold_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCOGSCumulative '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "' ");
                    }
                    else
                    {
                        reportname = "rptCOGS";
                        filename = "CostOfGoodsSold_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCOGS '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "' ");

                    }
                }


                else if (rpttype.ToUpper().ToString() == "COB".ToUpper())
                {
                    if (isCompare == 1)
                    {
                        reportname = "rptCostBreakupCompare";
                        filename = "rptCostBreakupCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCostBreakupCompare '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "'");


                    }
                    else if (isCumulative == 1)
                    {
                        reportname = "rptCostBreakupCompare";
                        filename = "rptCostBreakupCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCostBreakupCumulative '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "'");


                    }
                    else
                    {
                        reportname = "rptCostBreakup";
                        filename = "rptCostBreakup_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCostBreakup '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "' ");

                    }
                }



                else if (rpttype.ToUpper().ToString() == "IS".ToUpper())
                {
                    if (isCompare == 1)
                    {

                        reportname = "rptIncomeCompare";
                        filename = "IncomeStatementCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptIncomeCompare '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "',0 ");

                    }
                    else if (isCumulative == 1)
                    {

                        reportname = "rptIncomeCompare";
                        filename = "IncomeStatementCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptIncomeCumulative '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "',0 ");

                    }
                    else
                    {


                        if (isViewPageReport == 1)
                        {
                            redirectUrl = Url.Action("IncomeStatementViewReport", "Accounts", new { UserId = userid, ComId = ComId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, criteria = criteria, strId = strId });
                            return Json(new { Url = redirectUrl });
                        }


                        if (isTabulatorPageReport == 1)
                        {
                            redirectUrl = Url.Action("ISTabulatorReport", "Accounts", new { UserId = userid, ComId = ComId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, criteria = criteria, strId = strId });
                            return Json(new { Url = redirectUrl });
                        }

                        reportname = "rptIncome";
                        filename = "IncomeStatement_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptIncome '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "' ");
                    }
                }

                /////complete


                if (rpttype.ToUpper().ToString() == "OE".ToUpper())
                {
                    if (isCompare == 0)
                    {

                        if (isViewPageReport == 1)
                        {
                            redirectUrl = Url.Action("OwnersEquityViewReport", "Accounts", new { UserId = userid, ComId = ComId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, criteria = criteria, strId = strId });
                            return Json(new { Url = redirectUrl });
                        }


                        reportname = "rptOwnersEquityCarry";
                        filename = "OwnersEquity_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptOwnersEquityCarry '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "',1 ");

                    }
                    else
                    {
                        reportname = "rptOwnersEquityCarryComp";
                        filename = "OwnersEquityCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptOwnersEquityCarry '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "',1 ");

                    }
                }

                else if (rpttype.ToUpper().ToString() == "BS".ToUpper())
                {
                    if (isCompare == 0)
                    {
                        reportname = "rptBalanceSheet_InnerColumn";
                        filename = "BalanceSheet_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptBalanceSheet '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "',1 ");


                        if (isViewPageReport == 1)
                        {
                            redirectUrl = Url.Action("BalanceSheetViewReport", "Accounts", new { UserId = userid, ComId = ComId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, criteria = criteria, strId = strId });
                            return Json(new { Url = redirectUrl });
                        }

                    }

                    else
                    {

                        reportname = "rptBalanceSheetCompFinal";
                        filename = "BalanceSheetCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptBalanceSheetCompare '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "',1");

                    }
                }

                else if (rpttype.ToUpper().ToString() == "FA".ToUpper())
                {
                    if (isCompare == 0)
                    {


                        reportname = "rptAssets";
                        filename = "Asset_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptAssets '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "' ");


                    }
                }

                else if (rpttype.ToUpper().ToString() == "CF".ToUpper())
                {
                    if (isCompare == 0)
                    {


                        reportname = "rptCashFlow";
                        filename = "CashFlow_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptCashFlow '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "' ");


                    }
                }

                else if (rpttype.ToUpper().ToString() == "FF".ToUpper())
                {
                    if (isCompare == 0)
                    {


                        reportname = "rptFundFlow";
                        filename = "CashFlow_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptFundFlow '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "' ");


                    }
                }

                else if (rpttype.ToUpper().ToString() == "MR".ToUpper())
                {
                    if (isCompare == 0)
                    {


                        reportname = "rptManagementRatio";
                        filename = "Management_Ration_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptManagementRatio '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "','" + isShowZero + "','" + Currency + "' ");


                    }
                }

                else if (rpttype.ToUpper().ToString() == "NR".ToUpper())
                {
                    if (isCompare == 1)
                    {
                        reportname = "rptNotesComp";
                        filename = "NotesReprotCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotesCompare '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', '" + isShowZero + "','" + Currency + "',0");


                    }
                    else if (isCumulative == 1)
                    {
                        reportname = "rptNotesComp";
                        filename = "NotesReprot_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotesCumulative '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                    else
                    {


                        if (isViewPageReport == 1)
                        {

                            var reportype = "SummaryReport";
                            if (AccIdGroup != null)
                            {
                                reportype = _accountHeadRepository.All().Include(x => x.AccountCategorys).Where(x => x.Id == AccIdGroup).FirstOrDefault().AccountCategorys.AccountType;

                            }



                            redirectUrl = Url.Action("NotesViewReport", "Accounts", new { UserId = userid, ComId = ComId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, criteria = criteria, strId = strId, ReportType = reportype, AccIdGroup = AccIdGroup });
                            return Json(new { Url = redirectUrl });
                        }

                        reportname = "rptNotes";
                        filename = "NotesReprot_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                }


                else if (rpttype.ToUpper().ToString() == "NBSR".ToUpper())
                {

                    //reportname = "rptNotesBalanceSheet";
                    //filename = "NotesBalanceSheetReprot_Date_" + dtFrom + "_To_" + dtTo;
                    //HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_Balancesheet '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");


                    if (isCompare == 1)
                    {
                        reportname = "rptNotesBalanceSheetCompare";
                        filename = "NotesBalanceSheetReport_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_Balancesheet_Cumulative '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', '" + isShowZero + "','" + Currency + "',0");


                    }
                    //if (isCumulative == 1)
                    //{
                    //    reportname = "rptNotesBalanceSheetCompare";
                    //    filename = "NotesBalanceSheetReport_Date_" + dtFrom + "_To_" + dtTo;
                    //    HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_Balancesheet_Cumulative '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    //}
                    else
                    {
                        reportname = "rptNotesBalanceSheet";
                        filename = "NotesBalanceSheetReport_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_Balancesheet '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "NISR".ToUpper())
                {


                    if (isCompare == 1)
                    {
                        reportname = "rptNotesIncomeStatementCompare";
                        filename = "NotesIncomeStatementReport_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_IncomeStatement_Cumulative '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', '" + isShowZero + "','" + Currency + "',0");


                    }
                    if (isCumulative == 1)
                    {
                        reportname = "rptNotesIncomeStatementCompare";
                        filename = "NotesIncomeStatementReport_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_IncomeStatement_Cumulative '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                    else
                    {
                        reportname = "rptNotesIncomeStatement";
                        filename = "NotesIncomeStatementReport_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_IncomeStatement '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                }

                else if (rpttype.ToUpper().ToString() == "NBCIC".ToUpper())
                {
                    if (isCompare == 1)
                    {
                        reportname = "rptNotesBCIC";
                        filename = "NotesReprotCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_BCIC_Compare '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', '" + isShowZero + "','" + Currency + "',0");


                    }
                    else if (isCumulative == 1)
                    {
                        reportname = "rptNotesBCIC";
                        filename = "NotesReprot_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_BCIC_Cumulative '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                    else
                    {
                        reportname = "rptNotesBCIC";
                        filename = "NotesReprot_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_BCIC '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                }

                else if (rpttype.ToUpper().ToString() == "NFAS".ToUpper())
                {
                    if (isCompare == 1)
                    {
                        reportname = "rptNotes_FixedAsset";
                        filename = "NotesReprotCompare_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_FixedAsset_Compare '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', '" + isShowZero + "','" + Currency + "',0");


                    }
                    else if (isCumulative == 1)
                    {
                        reportname = "rptNotes_FixedAsset";
                        filename = "NotesReprot_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_FixedAsset_Cumulative '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                    else
                    {
                        reportname = "rptNotes_FixedAsset";
                        filename = "NotesReprot_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_FixedAsset '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "NFAD".ToUpper())////NEED TO FINALIZE BY FAHAD
                {
                    if (isCompare == 1)
                    {
                        reportname = "rptFixedAsset_DepreciationSchedule";
                        filename = "FixedAssetSchedule_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_FixedAsset_Compare '" + userid + "','" + ComId + "','" + criteria + "', '" + strId + "', '" + isShowZero + "','" + Currency + "',0");


                    }
                    else if (isCumulative == 1)
                    {
                        reportname = "rptFixedAsset_DepreciationSchedule";
                        filename = "FixedAssetSchedule_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_FixedAsset_Details_Cumulative '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                    else
                    {
                        reportname = "rptFixedAsset_DepreciationSchedule";
                        filename = "NotesReprot_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptNotes_FixedAsset_Details '" + userid + "','" + ComId + "','" + criteria + "','" + strId + "', '" + isShowZero + "' ,'" + Currency + "',1 ");

                    }
                }

                HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Accounts/" + reportname + ".rdlc");

                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));


                string DataSourceName = "DataSet1";

                HttpContext.Session.SetObject("Acc_rptList", postData);

                //Common.Classes.clsMain.intHasSubReport = 0;
                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");// Session["ReportPath"].ToString();
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
                clsReport.strDSNMain = DataSourceName;

                //
                //string callBackUrl = Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Repository.GenerateReport(clsReport.strReportPathMain, clsReport.strQueryMain, ConstrName, rptFormat);
                //string redirectUrl = callBackUrl;

                //var vals = reportid.Split(',')[0];

                //need change
                ////// redirectUrl = new UrlHelper(Request.RequestContext).Action("PrintReport", "GeneralReport", new { id = 0 }); //, new { companyId = "7e96b930-a786-44dd-8576-052ce608e38f" }

                TempData["Status"] = "2";
                TempData["Message"] = "Summary Report";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), reportname, "Report", reportname); //not working 


                redirectUrl = Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                return Json(new { Url = redirectUrl });




            }

            catch (Exception ex)
            {
                //throw ex;
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

        }


        #endregion


        #region General Report

        public partial class LedgerDetailsModel
        {
            public string? ComName { get; set; }
            public string? ComAdd1 { get; set; }
            public string? ComAdd2 { get; set; }
            public string? ComLogo { get; set; }
            public string? ComImgPath { get; set; }
            public string? Caption { get; set; }
            public string? Caption2 { get; set; }
            public string? CaptionCashBook { get; set; }

            public string? VoucherId { get; set; }
            public string? VoucherNo { get; set; }
            public string? dtVoucher { get; set; }
            public string? VoucherDate { get; set; }
            public string? VoucherDesc { get; set; }
            public string? Note1 { get; set; }
            public string? Note2 { get; set; }
            public string? AccId { get; set; }
            public string? AccCode { get; set; }
            public string? AccName { get; set; }
            public string? AccId1 { get; set; }
            public string? AccCode1 { get; set; }
            public string? AccName1 { get; set; }
            public string? TKDebit { get; set; }
            public string? TKCredit { get; set; }
            public string? TKDebit1 { get; set; }
            public string? TKCredit1 { get; set; }
            public string? TKDebit2 { get; set; }
            public string? TKCredit2 { get; set; }
            public string? RowNo { get; set; }
            public string? RowDr { get; set; }
            public string? RowCr { get; set; }
            public string? Amount { get; set; }
            public string? intFlag { get; set; }
            public string? IsBatch { get; set; }
            public string? OpBalance { get; set; }
            public string? ClBalance { get; set; }
            public string? ttlDebit { get; set; }
            public string? ttlCredit { get; set; }
            public string? referance { get; set; }
            public string? ReferanceTwo { get; set; }
            public string? ReferanceThree { get; set; }
            public string? Currency { get; set; }
            public string? AccNameOrg { get; set; }
            public string? ParentNameOne { get; set; }
            public string? ParentNameTwo { get; set; }
            public string? ParentNameThree { get; set; }
            public string? ParentNameFour { get; set; }
            public string? ParentNameFive { get; set; }
            public string? ChkNo { get; set; }




        }






        [AllowAnonymous]
        public ActionResult VoucherViewReport(int VoucherId)
        {
            try
            {

                //var result = "";
                //var comid = HttpContext.Session.GetInt32("ComId");
                //var userid = HttpContext.Session.GetInt32("UserId");

                //if (comid == null)
                //{
                //    result = "Please Login first";
                //}
                //var quary = $"EXEC Acc_rptLedgerMultiDrCr '{comid}',{AccId},'{FYId}','{dtFrom}','{dtTo}' ,'{CountryId}','{IsLocalCurrency}','{userid}','{SupplierId}','{CustomerId}','{EmployeeId}' ";

                ////Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
                //AccId = "10165";
                //FYId = "0";
                //dtFrom = "01-Jul-2020";
                //dtTo = "30-Nov-2020";
                //CountryId = "18";
                //IsLocalCurrency = "0";
                //SupplierId = "";
                //CustomerId = "";
                //EmployeeId = "";




                //SqlParameter[] parameters = new SqlParameter[11];

                //parameters[0] = new SqlParameter("@ComId", comid);
                //parameters[1] = new SqlParameter("@AccId", AccId);
                //parameters[2] = new SqlParameter("@FYId", FYId);

                //parameters[3] = new SqlParameter("@dtFrom", dtFrom);
                //parameters[4] = new SqlParameter("@dtTo", dtTo);
                //parameters[5] = new SqlParameter("@CountryId", CountryId);
                //parameters[6] = new SqlParameter("@IsLocalCurrency", IsLocalCurrency);

                //parameters[7] = new SqlParameter("@userid", userid);
                //parameters[8] = new SqlParameter("@SupplierId", SupplierId);
                //parameters[9] = new SqlParameter("@CustomerId", CustomerId);
                //parameters[10] = new SqlParameter("@EmployeeId", EmployeeId);

                //List<LedgerDetailsModel> bookingDeliveryChallan = Helper.ExecProcMapTList<LedgerDetailsModel>("Acc_rptLedgerMultiDrCr", parameters);



                Acc_VoucherMainModel Vouchermain = _accVoucherRepository.All()
                    .Include(b => b.VoucherSubs).ThenInclude(b => b.Acc_ChartOfAccount).ThenInclude(b => b.vAccountGroupHead)
                    .Include(a => a.VoucherSubs).ThenInclude(a => a.VoucherSubSections).ThenInclude(a => a.SubSection)
                    .Include(x => x.VoucherSubs).ThenInclude(x => x.VoucherSubChecnoes).ThenInclude(a => a.vAcc_ChartOfAccount)
                    .Include(x => x.VoucherSubs).ThenInclude(x => x.EmployeeData)
                    .Include(x => x.VoucherSubs).ThenInclude(x => x.Customers)
                    .Include(x => x.VoucherSubs).ThenInclude(x => x.Suppliers)
                    .Include(x => x.Acc_Currency)
                    .Include(x => x.Acc_CurrencyLocal)
                    .Include(x => x.CompanyList)
                    .Include(x => x.Acc_VoucherTypes)
                    .Include(x => x.Acc_FiscalMonths)
                    .Include(x => x.Acc_FiscalYears)
                    .Where(x => x.Id == VoucherId).FirstOrDefault();

                return View(Vouchermain);

            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        [AllowAnonymous]
        public ActionResult LedgerViewReport(string criteria, int strid, string AccId, string FYId, string dtFrom, string dtTo, string CountryId, string IsLocalCurrency, string SupplierId, string CustomerId, string EmployeeId)
        {
            try
            {

                var result = "";
                var comid = HttpContext.Session.GetInt32("ComId");
                var userid = HttpContext.Session.GetInt32("UserId");
                //dtFrom = "01-jan-2022";
                //dtTo = "30-Nov-2022";

                if (criteria == "Year")
                {
                    if (strid != null)
                    {
                        dtFrom = _accFiscalYearRepository.All().Where(x => x.Id == strid).FirstOrDefault().OpDate;
                        dtTo = _accFiscalYearRepository.All().Where(x => x.Id == strid).FirstOrDefault().ClDate;
                    }

                }
                else if (criteria == "Month")
                {
                    if (strid != null)
                    {
                        dtFrom = _accFiscalMonthRepository.All().Where(x => x.Id == strid).FirstOrDefault().dtFrom;
                        dtTo = _accFiscalMonthRepository.All().Where(x => x.Id == strid).FirstOrDefault().dtTo;
                    }
                }
                else if (criteria == "Quarter")
                {
                    if (strid != null)
                    {
                        dtFrom = _accFiscalQtrRepository.All().Where(x => x.Id == strid).FirstOrDefault().dtFrom;
                        dtTo = _accFiscalQtrRepository.All().Where(x => x.Id == strid).FirstOrDefault().dtTo;
                    }
                }
                else if (criteria == "HYear")
                {
                    if (strid != null)
                    {
                        dtFrom = _accFiscalHalfYearRepository.All().Where(x => x.Id == strid).FirstOrDefault().dtFrom;
                        dtTo = _accFiscalHalfYearRepository.All().Where(x => x.Id == strid).FirstOrDefault().dtTo;
                    }
                }


                if (comid == null)
                {
                    result = "Please Login first";
                }
                var quary = $"EXEC Acc_rptLedgerMultiDrCr '{comid}',{AccId},'{FYId}','{dtFrom}','{dtTo}' ,'{CountryId}','{IsLocalCurrency}','{userid}','{SupplierId}','{CustomerId}','{EmployeeId}' ";

                //Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
                //AccId = "10165";
                FYId = "0";

                CountryId = "18";
                IsLocalCurrency = "0";
                SupplierId = "";
                CustomerId = "";
                EmployeeId = "";




                SqlParameter[] parameters = new SqlParameter[11];

                parameters[0] = new SqlParameter("@ComId", comid);
                parameters[1] = new SqlParameter("@AccId", AccId);
                parameters[2] = new SqlParameter("@FYId", FYId);

                parameters[3] = new SqlParameter("@dtFrom", dtFrom);
                parameters[4] = new SqlParameter("@dtTo", dtTo);
                parameters[5] = new SqlParameter("@CountryId", CountryId);
                parameters[6] = new SqlParameter("@IsLocalCurrency", IsLocalCurrency);

                parameters[7] = new SqlParameter("@userid", userid);
                parameters[8] = new SqlParameter("@SupplierId", SupplierId);
                parameters[9] = new SqlParameter("@CustomerId", CustomerId);
                parameters[10] = new SqlParameter("@EmployeeId", EmployeeId);

                List<LedgerDetailsModel> ledgerdetailsdata = Helper.ExecProcMapTList<LedgerDetailsModel>("Acc_rptLedgerMultiDrCr", parameters);

                return View(ledgerdetailsdata);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }


        [AllowAnonymous]
        public IActionResult GeneralReport()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            int defaultcountry = (_storeSettingRepository.All().Where(a => a.ComId == ComId).Select(a => a.CountryId).FirstOrDefault());


            var date = DateTime.Now.ToString("dd-MMM-yyyy");
            var date1 = DateTime.Now.ToString("dd-MMM-yyyy");

            ViewBag.date = date;
            ViewBag.date1 = date1;

            ViewBag.CountryId = _countryRepository.GetCurrencyList(); //new SelectList(_countryRepository.All().Where(x => x.isActive == true), "Id", "CurrencyShortName", defaultcountry);


            ViewBag.AccIdRecPay = _accountHeadRepository.GetCashBankHeadForDropDown(true); //&& p.AccCode.Contains("1-1-1")
            ViewBag.AccIdLedger = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
            ViewBag.AccIdGroup = _accountHeadRepository.GetAccountGroupHeadForDropDown();



            //ViewBag.AccIdRecPay = new SelectList(_accountHeadRepository.All().Where(p => p.ComId == ComId && p.AccType == "L" && p.IsBankItem == true || p.IsCashItem == true).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text"); //&& p.AccCode.Contains("1-1-1")
            //ViewBag.AccIdLedger = new SelectList(_accountHeadRepository.All().Where(p => p.ComId == ComId && p.AccType == "L").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");
            //ViewBag.AccIdGroup = new SelectList(_accountHeadRepository.All().Where(p => p.ComId == ComId && p.AccType == "G").Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ]", Value = s.Id }).ToList(), "Value", "Text");


            ViewBag.AccIdNoteOneCT = new SelectList(_accVoucherSubRepository.All()
            //.Include(x => x.Acc_VoucherMainModel)
            .Where(p => p.Acc_VoucherMain.ComId == ComId && (p.Note1).Length > 1) //&& p.Note1.Contains("CT")
            .Select(s => new { Text = s.Note1, Value = s.Note1 }).Distinct()
            .ToList(), "Value", "Text");


            ViewBag.EmployeeId = _employeeRepository.GetAllForDropDown();
            ViewBag.SupplierId = _supplierRepository.GetAllForDropDown();
            ViewBag.CustomerId = _customerRepository.GetAllForDropDown();


            //ViewBag.EmployeeId = new SelectList(_employeeRepository.All().Where(p => p.ComId == ComId).Select(s => new { Text = s.EmployeeName + " - [ " + s.EmployeeCode + " ] " + " - [" + s.DesignationList.DesigName + "]", Value = s.Id }).ToList(), "Value", "Text");
            //ViewBag.SupplierId = new SelectList(_supplierRepository.All().Where(p => p.ComId == ComId).Select(s => new { Text = s.SupplierName + " - [ " + s.PrimaryAddress + " ]", Value = s.Id }).ToList(), "Value", "Text");
            //ViewBag.CustomerId = new SelectList(_customerRepository.All().Take(10).Where(p => p.ComId == ComId).Select(s => new { Text = s.Name + " - [ " + s.PrimaryAddress + " ]", Value = s.Id }).ToList(), "Value", "Text");


            ViewBag.PrdUnitId = _prdUnitRepository.GetAllForDropDown();// _prdUnitRepository.GetAllForDropDown(); //&& c.ComId == (transactioncomid)
            ViewBag.VoucherTypeId = _VoucherTypeRepository.GetAllForDropDown();



            ShowVoucherViewModel model = new ShowVoucherViewModel();
            List<Acc_FiscalYearModel> fiscalyear = _accFiscalYearRepository.All().Where(x => x.ComId == ComId).ToList();
            int fiscalyid = fiscalyear.Max(p => p.Id);


            List<Acc_FiscalMonthModel> fiscalmonth = _accFiscalMonthRepository.All().Where(x => x.FYId == fiscalyid).ToList();

            model.FiscalYs = fiscalyear;
            model.ProcessMonths = fiscalmonth;
            model.CountryId = defaultcountry;

            //rptGeneralReport.PrcSetData(model, "Create", dsList);
            return View(model);

        }


        [AllowAnonymous]
        [HttpPost, ActionName("SetSessionGeneralReport")]
        public JsonResult SetSessionGeneralReport(string criteria, string rptFormat, string rpttype, string dtFrom, string dtTo,
            int? Currency, int? isDetails, int? isLocalCurr, int? isViewPageReport, int? isMaterial, int? FYId, int? AccIdRecPay, int? AccIdLedger,
            int? AccIdGroup, int? PrdUnitId, int? AccVoucherTypeId,
            int? SupplierId, int? CustomerId, int? EmployeeId, string AccIdNoteOneCT, string MinAccCode, string MaxAccCode)
        {

            try
            {

                var ComId = HttpContext.Session.GetInt32("ComId");
                var userid = HttpContext.Session.GetInt32("UserId");
                string redirectUrl;


                if (criteria == "fy")
                {
                    if (FYId != null || FYId.Value > 0)
                    {
                        Acc_FiscalYearModel fiscalyear = _accFiscalYearRepository.All().Where(x => x.Id == FYId).FirstOrDefault();
                        dtFrom = fiscalyear.OpDate;
                        dtTo = fiscalyear.ClDate;
                    }
                }

                var reportname = "";
                var filename = "";


                if (rpttype.ToUpper().ToString() == "RP")
                {

                    if (AccIdRecPay > 0)
                    {

                        reportname = "rptRecPayInd";

                    }
                    else
                    {
                        reportname = "rptRecPay";
                    }


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "ReceiptAndPay_Date_" + dtFrom + "_To_" + dtTo;// _accVoucherRepository.All().Where(x => x.VoucherNo == VoucherFrom).Select(x => x.VoucherNo + "_" + x.Acc_VoucherTypes.VoucherTypeName).Single();
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptRecPay '" + ComId + "','" + userid + "', '" + dtFrom + "','" + dtTo + "', " + AccIdRecPay + ", " + Currency + " ");

                    }
                    else
                    {
                        filename = "ReceiptAndPay_Date_" + dtFrom + "_To_" + dtTo;// _accVoucherRepository.All().Where(x => x.VoucherNo == VoucherFrom).Select(x => x.VoucherNo + "_" + x.Acc_VoucherTypes.VoucherTypeName).Single();
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptRecPay '" + ComId + "','" + userid + "', '" + dtFrom + "','" + dtTo + "', " + AccIdRecPay + ", " + Currency + " ");

                    }

                }
                else if (rpttype.ToUpper().ToString() == "CB")
                {


                    //if (isDetails == 1)
                    //{
                    //    reportname = "rptLedgerDetails_Multi";

                    //}
                    //else
                    //{
                    reportname = "rptLedgerDetails_Multi_Summarized_CashBook";

                    //}


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "LedgerDetails_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptLedgerMultiDrCr_CashBook '" + ComId + "', " + AccIdRecPay + ", 0, '" + dtFrom + "', '" + dtTo + "', " + Currency + "," + isLocalCurr + ",'" + userid + "'  ");


                    }
                    else
                    {
                        filename = "LedgerDetails_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptLedgerMultiDrCr_CashBook '" + ComId + "', " + AccIdRecPay + ", " + FYId.ToString() + ", '01-Jan-1900', '01-Jan-1900', " + Currency + ", " + isLocalCurr + " ,'" + userid + "'  ");


                    }



                }
                else if (rpttype.ToUpper().ToString() == "Tran".ToUpper())
                {

                    reportname = "rptTransaction";

                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "Transaction_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTransaction '" + ComId + "', '" + userid + "', '" + dtFrom + "', '" + dtTo + "'," + Currency + " ," + AccVoucherTypeId + "  ");


                    }
                    else
                    {
                        filename = "Transaction_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTransaction '" + ComId + "', '" + userid + "', '" + dtFrom + "', '" + dtTo + "'," + Currency + "," + AccVoucherTypeId + "  ");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "TranVoucherNo".ToUpper())
                {

                    reportname = "rptTransaction_VoucherNo";

                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "Transaction_VoucherNo_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTransaction_VoucherNo '" + ComId + "', '" + userid + "', '" + dtFrom + "', '" + dtTo + "'," + Currency + "," + AccVoucherTypeId + "  ");


                    }
                    else
                    {
                        filename = "Transaction_VoucherNo_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptTransaction_VoucherNo '" + ComId + "', '" + userid + "', '" + dtFrom + "', '" + dtTo + "'," + Currency + "," + AccVoucherTypeId + "  ");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "ledgerD".ToUpper())
                {
                    if (isDetails == 1)
                    {
                        reportname = "rptLedgerDetails_Multi";

                    }
                    else if (isViewPageReport == 1)
                    {
                        //return RedirectToAction("Index", "Accounts");
                        //(string AccId, string FYId, string dtFrom, string dtTo, string CountryId, string IsLocalCurrency, string SupplierId, string CustomerId, string EmployeeId)
                        redirectUrl = Url.Action("LedgerViewReport", "Accounts", new { AccId = AccIdLedger, FYId = FYId, dtFrom = dtFrom, dtTo = dtTo, CountryId = Currency, IsLocalCurrency = isLocalCurr, SupplierId = SupplierId, CustomerId = CustomerId, EmployeeId = EmployeeId });
                        return Json(new { Url = redirectUrl });
                    }
                    else
                    {
                        reportname = "rptLedgerDetails_Multi_Summarized";

                    }


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "LedgerDetails_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptLedgerMultiDrCr '" + ComId + "', " + AccIdLedger + ", 0, '" + dtFrom + "', '" + dtTo + "', " + Currency + "," + isLocalCurr + " ,'" + userid + "' , '" + SupplierId + "', '" + CustomerId + "', '" + EmployeeId + "'  ");


                    }
                    else
                    {
                        filename = "LedgerDetails_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptLedgerMultiDrCr '" + ComId + "', " + AccIdLedger + ", " + FYId.ToString() + ", '01-Jan-1900', '01-Jan-1900', " + Currency + ", " + isLocalCurr + ",'" + userid + "' ,'" + SupplierId + "',  '" + CustomerId + "', '" + EmployeeId + "'   ");


                    }
                }
                else if (rpttype.ToUpper().ToString() == "ledgerA".ToUpper())
                {

                    reportname = "rptLedgerDetails_All";

                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "LedgerDetails_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptLedgerMultiAll '" + ComId + "', " + AccIdLedger + ", 0, '" + dtFrom + "', '" + dtTo + "', " + Currency + "," + isLocalCurr + " ,'" + userid + "' , '" + MinAccCode + "',  '" + MaxAccCode + "', '" + EmployeeId + "'  ");


                    }
                    else
                    {
                        filename = "LedgerDetails_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec Acc_rptLedgerMultiAll '" + ComId + "', " + AccIdLedger + ", " + FYId.ToString() + ", '01-Jan-1900', '01-Jan-1900', " + Currency + ", " + isLocalCurr + ",'" + userid + "' ,'" + MinAccCode + "',  '" + MaxAccCode + "', '" + EmployeeId + "'   ");


                    }
                }
                else if (rpttype.ToUpper().ToString() == "VC".ToUpper())
                {
                    if (isDetails == 1)
                    {
                        reportname = "rptVatCertificate";

                    }
                    else
                    {
                        reportname = "rptVatCertificate";

                    }


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "VatCertificate" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Bill_rptVatCertificate] '" + ComId + "', '" + rpttype + "','" + SupplierId + "',0, '" + dtFrom + "', '" + dtTo + "' , '" + userid + "'  ");


                    }
                    else
                    {
                        filename = "VatCertificate" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Bill_rptVatCertificate] '" + ComId + "', '" + rpttype + "','" + SupplierId + "', " + FYId.ToString() + ",'" + dtFrom + "', '" + dtTo + "', '" + userid + "'   ");


                    }
                }
                else if (rpttype.ToUpper().ToString() == "SV".ToUpper())
                {
                    if (isDetails == 1)
                    {
                        reportname = "rptSupplierVat";

                    }
                    else
                    {
                        reportname = "rptSupplierVat";

                    }


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "SupplierVat" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Bill_rptVatCertificate] '" + ComId + "', '" + rpttype + "','" + SupplierId + "',0, '" + dtFrom + "', '" + dtTo + "' , '" + userid + "'  ");


                    }
                    else
                    {
                        filename = "SupplierVat" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Bill_rptVatCertificate] '" + ComId + "', '" + rpttype + "','" + SupplierId + "', " + FYId.ToString() + ",'" + dtFrom + "', '" + dtTo + "', '" + userid + "'   ");


                    }
                }
                else if (rpttype.ToUpper().ToString() == "SAIT".ToUpper())
                {
                    if (isDetails == 1)
                    {
                        reportname = "rptSupplierAIT";

                    }
                    else
                    {
                        reportname = "rptSupplierAIT";

                    }


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "VatCertificate" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Bill_rptVatCertificate] '" + ComId + "', '" + rpttype + "','" + SupplierId + "',0, '" + dtFrom + "', '" + dtTo + "' , '" + userid + "'  ");
                    }
                    else
                    {
                        filename = "VatCertificate" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Bill_rptVatCertificate] '" + ComId + "', '" + rpttype + "','" + SupplierId + "', " + FYId.ToString() + ",'" + dtFrom + "', '" + dtTo + "', '" + userid + "'   ");
                    }
                }
                else if (rpttype.ToUpper().ToString() == "ADSUP".ToUpper())
                {
                    if (isDetails == 1)
                    {
                        reportname = "rptAdvanceMoney_Supplier_Schedule";

                    }
                    else
                    {
                        reportname = "rptAdvanceMoney_Supplier_Schedule";

                    }


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "rptAdvanceMoney_Supplier_Schedule" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Acc_rptAdvanceMoney_Supplier_Schedule] '" + ComId + "', '" + dtFrom + "' ,'" + dtTo + "' ,'Advance to Supplier' , null,'" + AccIdLedger + "'");
                    }
                    else
                    {
                        filename = "rptAdvanceMoney_Supplier_Schedule" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Acc_rptAdvanceMoney_Supplier_Schedule] '" + ComId + "', '" + dtFrom + "' ,'" + dtTo + "' ,'Advance to Supplier' ,'" + FYId.ToString() + "','" + AccIdLedger + "' ");
                    }
                }
                else if (rpttype.ToUpper().ToString() == "ADVSD".ToUpper())
                {
                    if (isDetails == 1)
                    {
                        reportname = "rptAdvanceMoney_Supplier_Schedule";

                    }
                    else
                    {
                        reportname = "rptAdvanceMoney_Supplier_Schedule";

                    }


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "rptAdvanceMoney_Supplier_Schedule" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Acc_rptSecurityDeposit_Supplier_Schedule] '" + ComId + "', '" + dtFrom + "' ,'" + dtTo + "' ,'Security Deposit From Supplier' , null,'" + AccIdLedger + "'");
                    }
                    else
                    {
                        filename = "rptAdvanceMoney_Supplier_Schedule" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Acc_rptSecurityDeposit_Supplier_Schedule] '" + ComId + "', '" + dtFrom + "' ,'" + dtTo + "' ,'Security Deposit From Supplier' ,'" + FYId.ToString() + "','" + AccIdLedger + "' ");
                    }
                }
                else if (rpttype.ToUpper().ToString() == "ADEMP".ToUpper())
                {
                    if (isDetails == 1)
                    {
                        reportname = "rptAdvanceMoney_Employee_Schedule";

                    }
                    else
                    {
                        reportname = "rptAdvanceMoney_Employee_Schedule";

                    }


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {
                        filename = "rptAdvanceMoney_Employee_Schedule" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Acc_rptAdvanceMoney_Employee_Schedule] '" + ComId + "', '" + dtFrom + "' ,'" + dtTo + "' ,'Advance to Employee' , null ,'" + AccIdLedger + "' ");
                    }
                    else
                    {
                        filename = "rptAdvanceMoney_Employee_Schedule" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec [Acc_rptAdvanceMoney_Employee_Schedule] '" + ComId + "', '" + dtFrom + "' ,'" + dtTo + "' ,'Advance to Employee' ,'" + FYId.ToString() + "','" + AccIdLedger + "' ");
                    }
                }
                else if (rpttype.ToUpper().ToString() == "GroupD".ToUpper())
                {

                    reportname = "rptGroupDetails";


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "LedgerDetails_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  Acc_rptGroupMultiDrCr '" + ComId + "', " + AccIdGroup + ", 0, '" + dtFrom + "', '" + dtTo + "', " + Currency + " ,'" + userid + "'  ");

                    }
                    else
                    {
                        filename = "LedgerDetails_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  Acc_rptGroupMultiDrCr '" + ComId + "', " + AccIdGroup + ", " + FYId.ToString() + ", '" + dtFrom + "', '" + dtTo + "', " + Currency + " ,'" + userid + "'  ");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "GroupS".ToUpper())
                {

                    reportname = "rptSubsidiaryLedger";
                    var Note1 = AccIdNoteOneCT.Replace("&", "");

                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "SubsidiaryLedger_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  Acc_rptSubsidiaryLedger '" + ComId + "', " + AccIdGroup + ", 0, '" + dtFrom + "', '" + dtTo + "', " + Currency + " ,'" + userid + "' ,'" + Note1 + "' ");

                    }
                    else
                    {
                        filename = "SubsidiaryLedger_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  Acc_rptSubsidiaryLedger '" + ComId + "', " + AccIdGroup + ", " + FYId.ToString() + ", '" + dtFrom + "', '" + dtTo + "', " + Currency + " ,'" + userid + "' ,'" + Note1 + "' ");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "BankRecon".ToUpper())
                {

                    reportname = "rptBankReconciliation";


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "BankReconciliation_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptBankReconciliation] '" + ComId + "', " + AccIdLedger + ",'" + dtFrom + "', '" + dtTo + "' ,'" + userid + "'  ");

                    }
                    else
                    {
                        filename = "BankReconciliation_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptBankReconciliation] '" + ComId + "', " + AccIdLedger + ", '" + dtFrom + "', '" + dtTo + "' ,'" + userid + "'  ");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "CashFlow".ToUpper())
                {

                    reportname = "rptCashFlowStatement";


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "CashFlowStatement_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptCashFlowStatement] '" + ComId + "', " + AccIdLedger + ", '" + dtFrom + "', '" + dtTo + "'");

                    }
                    else
                    {
                        filename = "CashFlowStatement_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptCashFlowStatement] '" + ComId + "', " + AccIdLedger + ", '" + dtFrom + "', '" + dtTo + "'");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "FundFlow".ToUpper())
                {

                    reportname = "rptFundFlowStatement";


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "FundFlowStatement_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptFundFlowStatement] '" + ComId + "', " + AccIdLedger + ", '" + dtFrom + "', '" + dtTo + "'");

                    }
                    else
                    {
                        filename = "CashFlowStatement_Date_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptFundFlowStatement] '" + ComId + "', " + AccIdLedger + ", '" + dtFrom + "', '" + dtTo + "'");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "FdrList".ToUpper())
                {

                    reportname = "rptFDRList";


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "FDRList_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptFDRList] '" + ComId + "', '" + dtFrom + "', '" + dtTo + "'");

                    }
                    else
                    {
                        filename = "FDRList_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptFDRList] '" + ComId + "' , '" + dtFrom + "', '" + dtTo + "'");

                    }
                }
                else if (rpttype.ToUpper().ToString() == "FdrListV".ToUpper())
                {

                    reportname = "rptFDRList_Voucher";


                    if (criteria.ToUpper().ToString() == "Date".ToUpper())
                    {

                        filename = "FDRList_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptFDRList_Voucher] '" + ComId + "', '" + dtFrom + "', '" + dtTo + "'");

                    }
                    else
                    {
                        filename = "FDRList_" + dtFrom + "_To_" + dtTo;
                        HttpContext.Session.SetString("ReportQuery", "Exec  [Acc_rptFDRList_Voucher] '" + ComId + "' , '" + dtFrom + "', '" + dtTo + "'");

                    }
                }

                HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Accounts/" + reportname + ".rdlc");

                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));


                string DataSourceName = "DataSet1";

                HttpContext.Session.SetObject("rptList", postData);
                // Session["rptList"] = postData;

                //Common.Classes.clsMain.intHasSubReport = 0;
                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");// Session["ReportPath"].ToString();
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");// Session["ReportQuery"].ToString();
                clsReport.strDSNMain = DataSourceName;

                //
                //string callBackUrl = Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Repository.GenerateReport(clsReport.strReportPathMain, clsReport.strQueryMain, ConstrName, rptFormat);
                //string redirectUrl = callBackUrl;


                //TempData["Status"] = "2";
                //TempData["Message"] = "General Report";
                //tranlog.TransactionLog("General Report", "Set Session", "General Report", rpttype, "Report", reportname);

                //return Json(callBackUrl);

                //var vals = reportid.Split(',')[0];

                //need change
                /////redirectUrl = new UrlHelper(Request.).Action("PrintReport", "GeneralReport", new { id = 0 }); //, new { companyId = "7e96b930-a786-44dd-8576-052ce608e38f" }
                redirectUrl = Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                return Json(new { Url = redirectUrl });
            }

            catch (Exception ex)
            {
                //throw ex;
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }
        }



        #endregion


        #region Account Process

        [AllowAnonymous]
        public JsonResult GetOnlyMonthList(int? id)
        {


            var comid = HttpContext.Session.GetInt32("ComId");

            //db.Configuration.ProxyCreationEnabled = false;
            //db.Configuration.LazyLoadingEnabled = false;
            if (id == null)
            {
                List<Acc_FiscalYearModel> fiscalyear = _accFiscalYearRepository.All().Where(x => x.ComId == comid && x.isLocked == false).ToList();
                id = fiscalyear.Max(p => p.Id);
            }

            List<Acc_FiscalMonthModel> Acc_FiscalMonth = _accFiscalMonthRepository.All()
                .Where(x => x.FYId == id && x.isLocked == false).ToList();
            //&& !db.HR_ProcessLock.Any(p => p.Id == x.FiscalMonthId && p.IsLock == true && p.LockType.Contains("Account Lock"))).ToList();
            //&& db.HR_ProcessLock.Contains(x.FiscalMonthId) && db.HR_ProcessLock.Where(p=> p.IsLock==true && p.LockType.Contains("Account Lock"))).ToList();
            List<fymonthclass> data = new List<fymonthclass>();

            int i = 0;
            foreach (Acc_FiscalMonthModel item in Acc_FiscalMonth)
            {
                fymonthclass asdf = new fymonthclass
                {
                    //asdf.MasterLCID = item.ExportInvoiceMasters.COM_MasterLC.MasterLCID;
                    isCheck = i++,
                    MonthId = item.Id,
                    MonthName = item.MonthName, //DateTime.Parse(item.InvoiceDate.ToString()).ToString("dd-MMM-yy");
                    dtFrom = item.dtFrom,
                    dtTo = item.dtTo
                };


                data.Add(asdf);
            }

            return Json(data);
            //return Json(new { Success = 1, data = asdf }, JsonRequestBehavior.AllowGet);
        }
        [AllowAnonymous]
        public JsonResult AccountProcessFunction(string[] monthid, string criteria, int? Currency, string FYId, string MinAccCode, string MaxAccCode)
        {

            try
            {


                var IsLocationWiseFilter = (HttpContext.Session.GetInt32("IsLocationWiseFilter"));
                var WarehouseId = HttpContext.Session.GetInt32("WarehouseId");

                var comid = HttpContext.Session.GetInt32("ComId");
                var userid = HttpContext.Session.GetInt32("UserId");


                if (criteria.ToUpper().ToString() == "TrialB".ToUpper())
                {
                    if (monthid.Count() > 0)
                    {
                        for (var i = 0; i < monthid.Count(); i++)
                        {
                            var monthidsingle = monthid[i];

                            var query = $"Exec Acc_PrcProcessTrailBalance '{userid}','{comid}',{monthidsingle},{Currency},'TrialBProcess' ";

                            SqlParameter[] sqlParameter = new SqlParameter[5];

                            sqlParameter[0] = new SqlParameter("@UserId", userid);
                            sqlParameter[1] = new SqlParameter("@ComId", comid);
                            sqlParameter[2] = new SqlParameter("@MonthId", monthidsingle);
                            sqlParameter[3] = new SqlParameter("@Currency", Currency);
                            sqlParameter[4] = new SqlParameter("@PCName", "TrialBProcess");

                            if (IsLocationWiseFilter == 1)
                            {
                                Helper.ExecProc("Acc_prcProcessTrailBalance_LocationWise", sqlParameter);
                            }
                            else
                            {
                                Helper.ExecProc("Acc_PrcProcessTrailBalance", sqlParameter);
                            }



                            // need change
                            //db.Database.ExecuteSqlCommand("Exec Acc_PrcProcessTrailBalance @UserId , @ComId , @MonthId , @Currency , @PCName", new SqlParameter("@userid", Session["UserId"]), new SqlParameter("@ComId", Session["comid"]), new SqlParameter("@MonthId", x), new SqlParameter("@Currency", Currency), new SqlParameter("@PCName", "Fahad"));

                            //sqlQuery = "Exec Acc_PrcProcessTrailBalance " + Session["UserId"] + ", " + Session["ComId"] + ", " +
                            //        model.ProcessMonths[i].MonthId + ", " + model.CountryId + ", '' ";
                            //    //arQuery.Add(sqlQuery);

                        }
                    }
                }
                else if (criteria.ToUpper().ToString() == "AllLedger".ToUpper())
                {
                    if (monthid.Count() > 0)
                    {
                        if (MinAccCode == null)
                        {
                            MinAccCode = "1-0-00-000-00000";
                        }
                        if (MaxAccCode == null)
                        {
                            MaxAccCode = "5-0-00-000-00000";
                        }
                        //for (var i = 0; i < monthid.Count(); i++)
                        //{
                        //var monthidsingle = monthid[i];
                        var query = $"Exec Acc_Process_LedgerMultiALL '{comid}','{userid}',{monthid.FirstOrDefault()},{Currency},'{MinAccCode}','{MaxAccCode}' ";

                        SqlParameter[] sqlParameter = new SqlParameter[6];

                        sqlParameter[0] = new SqlParameter("@ComId", comid);
                        sqlParameter[1] = new SqlParameter("@UserId", userid);
                        //sqlParameter[2] = new SqlParameter("@FYId", FYId);
                        sqlParameter[2] = new SqlParameter("@MonthId", monthid.FirstOrDefault());
                        sqlParameter[3] = new SqlParameter("@Currency", Currency);
                        sqlParameter[4] = new SqlParameter("@MinAccCode", MinAccCode);
                        sqlParameter[5] = new SqlParameter("@MaxAccCode", MaxAccCode);

                        //sqlParameter[6] = new SqlParameter("@PCName", "AllLedger");

                        Helper.ExecProc("Acc_Process_LedgerMultiALL", sqlParameter);
                        //}


                    }
                }
                else if (criteria.ToUpper().ToString() == "cogs".ToUpper())
                {
                    if (monthid.Count() > 0)
                    {

                        for (var i = 0; i < monthid.Count(); i++)
                        {
                            var monthidsingle = monthid[i];



                            var query = $"Exec Acc_PrcProcessCostOfService '{userid}','{comid}',{monthidsingle},{Currency},'COGSProcess' ";

                            SqlParameter[] sqlParameter = new SqlParameter[5];

                            sqlParameter[0] = new SqlParameter("@UserId", userid);
                            sqlParameter[1] = new SqlParameter("@ComId", comid);
                            sqlParameter[2] = new SqlParameter("@MonthId", monthidsingle);
                            sqlParameter[3] = new SqlParameter("@Currency", Currency);
                            sqlParameter[4] = new SqlParameter("@PCName", "COGSProcess");


                            Helper.ExecProc("Acc_PrcProcessCostOfService", sqlParameter);


                            // need change
                            ///// db.Database.ExecuteSqlCommand("Exec Acc_PrcProcessCostOfService @UserId , @ComId , @MonthId , @Currency , @PCName", new SqlParameter("@userid", Session["UserId"]), new SqlParameter("@ComId", Session["comid"]), new SqlParameter("@MonthId", x), new SqlParameter("@Currency", Currency), new SqlParameter("@PCName", "Fahad"));

                            //sqlQuery = "Exec GTRAccounts.dbo.Acc_PrcProcessCostOfService " + Session["UserId"] + ", " +
                            //        Session["ComId"] + ", " + model.ProcessMonths[i].MonthId + ", " + model.CountryId + ", '' ";
                            //    //arQuery.Add(sqlQuery);
                        }


                    }
                }
                else if (criteria.ToUpper().ToString() == "income".ToUpper())
                {
                    if (monthid.Count() > 0)
                    {

                        for (var i = 0; i < monthid.Count(); i++)
                        {
                            var monthidsingle = monthid[i];

                            //Exec Acc_PrcProcessIncome '4864add7-0ab2-4c4f-9eb8-6b63a425e665','31312c54-659b-4e63-b4ba-2bc3d7b05792',13,18,'Fahad'
                            var query = $"Exec Acc_PrcProcessIncome '{userid}','{comid}',{monthidsingle},{Currency},'IncomeProcess' ";

                            SqlParameter[] sqlParameter = new SqlParameter[5];

                            sqlParameter[0] = new SqlParameter("@UserId", userid);
                            sqlParameter[1] = new SqlParameter("@ComId", comid);
                            sqlParameter[2] = new SqlParameter("@MonthId", monthidsingle);
                            sqlParameter[3] = new SqlParameter("@Currency", Currency);
                            sqlParameter[4] = new SqlParameter("@PCName", "IncomeProcess");


                            Helper.ExecProc("Acc_PrcProcessIncome", sqlParameter);

                        }


                    }
                }
                else if (criteria.ToUpper().ToString() == "bs".ToUpper())
                {
                    if (monthid.Count() > 0)
                    {

                        for (var i = 0; i < monthid.Count(); i++)
                        {
                            var monthidsingle = monthid[i];

                            //Exec Acc_PrcProcessIncome '4864add7-0ab2-4c4f-9eb8-6b63a425e665','31312c54-659b-4e63-b4ba-2bc3d7b05792',13,18,'Fahad'
                            var query = $"Exec [Acc_PrcProcessBalanceSheet] '{userid}','{comid}',{monthidsingle},{Currency},'BalanceSheetProcess' ";

                            SqlParameter[] sqlParameter = new SqlParameter[5];

                            sqlParameter[0] = new SqlParameter("@UserId", userid);
                            sqlParameter[1] = new SqlParameter("@ComId", comid);
                            sqlParameter[2] = new SqlParameter("@MonthId", monthidsingle);
                            sqlParameter[3] = new SqlParameter("@Currency", Currency);
                            sqlParameter[4] = new SqlParameter("@PCName", "BalanceSheetProcess");


                            Helper.ExecProc("Acc_PrcProcessBalanceSheet", sqlParameter);

                        }


                    }
                }
                else if (criteria.ToUpper().ToString() == "cb".ToUpper())
                {
                    if (monthid.Count() > 0)
                    {

                        for (var i = 0; i < monthid.Count(); i++)
                        {
                            var monthidsingle = monthid[i];

                            //Exec Acc_PrcProcessIncome '4864add7-0ab2-4c4f-9eb8-6b63a425e665','31312c54-659b-4e63-b4ba-2bc3d7b05792',13,18,'Fahad'
                            var query = $"Exec [Acc_PrcProcessCostBreakup] '{userid}','{comid}',{monthidsingle},{Currency},'CBProcess' ";

                            SqlParameter[] sqlParameter = new SqlParameter[5];

                            sqlParameter[0] = new SqlParameter("@UserId", userid);
                            sqlParameter[1] = new SqlParameter("@ComId", comid);
                            sqlParameter[2] = new SqlParameter("@MonthId", monthidsingle);
                            sqlParameter[3] = new SqlParameter("@Currency", Currency);
                            sqlParameter[4] = new SqlParameter("@PCName", "CBProcess");


                            Helper.ExecProc("Acc_PrcProcessCostBreakup", sqlParameter);

                        }


                    }
                }
                else if (criteria.ToUpper().ToString() == "all".ToUpper())
                {
                    if (monthid.Count() > 0)
                    {

                        for (var i = 0; i < monthid.Count(); i++)
                        {
                            var monthidsingle = monthid[i];

                            //////// Trial Balance //////////
                            var query = $"Exec Acc_PrcProcessTrailBalance '{userid}','{comid}',{monthidsingle},{Currency},'TrialBProcess' ";

                            SqlParameter[] sqlParameter = new SqlParameter[5];

                            sqlParameter[0] = new SqlParameter("@UserId", userid);
                            sqlParameter[1] = new SqlParameter("@ComId", comid);
                            sqlParameter[2] = new SqlParameter("@MonthId", monthidsingle);
                            sqlParameter[3] = new SqlParameter("@Currency", Currency);
                            sqlParameter[4] = new SqlParameter("@PCName", "TrialBProcess");

                            if (IsLocationWiseFilter == 1)
                            {
                                Helper.ExecProc("Acc_prcProcessTrailBalance_LocationWise", sqlParameter);
                            }
                            else
                            {
                                Helper.ExecProc("Acc_PrcProcessTrailBalance", sqlParameter);
                            }



                            //////// Cost Of Service //////////

                            query = $"Exec Acc_PrcProcessCostOfService '{userid}','{comid}',{monthidsingle},{Currency},'COGSProcess' ";

                            SqlParameter[] sqlParameter1 = new SqlParameter[5];

                            sqlParameter1[0] = new SqlParameter("@UserId", userid);
                            sqlParameter1[1] = new SqlParameter("@ComId", comid);
                            sqlParameter1[2] = new SqlParameter("@MonthId", monthidsingle);
                            sqlParameter1[3] = new SqlParameter("@Currency", Currency);
                            sqlParameter1[4] = new SqlParameter("@PCName", "COGSProcess");


                            Helper.ExecProc("Acc_PrcProcessCostOfService", sqlParameter1);



                            //////// Balance Sheet //////////


                            query = $"Exec Acc_PrcProcessIncome '{userid}','{comid}',{monthidsingle},{Currency},'IncomeProcess' ";

                            SqlParameter[] sqlParameter2 = new SqlParameter[5];

                            sqlParameter2[0] = new SqlParameter("@UserId", userid);
                            sqlParameter2[1] = new SqlParameter("@ComId", comid);
                            sqlParameter2[2] = new SqlParameter("@MonthId", monthidsingle);
                            sqlParameter2[3] = new SqlParameter("@Currency", Currency);
                            sqlParameter2[4] = new SqlParameter("@PCName", "IncomeProcess");


                            Helper.ExecProc("Acc_PrcProcessIncome", sqlParameter2);



                            ////Exec Acc_PrcProcessIncome '4864add7-0ab2-4c4f-9eb8-6b63a425e665','31312c54-659b-4e63-b4ba-2bc3d7b05792',13,18,'Fahad'
                            //var query = $"Exec Acc_PrcProcessTrailBalance '{userid}','{comid}',{monthidsingle},{Currency},'TrialBProcess' ";
                            //query = $"Exec Acc_PrcProcessCostOfService '{userid}','{comid}',{monthidsingle},{Currency},'COGSProcess' ";
                            //query = $"Exec Acc_PrcProcessIncome '{userid}','{comid}',{monthidsingle},{Currency},'IncomeProcess' ";
                            //query = $"Exec [Acc_PrcProcessBalanceSheet] '{userid}','{comid}',{monthidsingle},{Currency},'BalanceSheetProcess' ";
                            //query = $"Exec [Acc_PrcProcessCostBreakup] '{userid}','{comid}',{monthidsingle},{Currency},'CBProcess' ";


                            //SqlParameter[] sqlParameter = new SqlParameter[5];
                            //sqlParameter[0] = new SqlParameter("@UserId", userid);
                            //sqlParameter[1] = new SqlParameter("@ComId", comid);
                            //sqlParameter[2] = new SqlParameter("@MonthId", monthidsingle);
                            //sqlParameter[3] = new SqlParameter("@Currency", Currency);
                            //sqlParameter[4] = new SqlParameter("@PCName", "ALLProcess");



                            //Helper.ExecProc("Acc_PrcProcessTrailBalance", sqlParameter);
                            //Helper.ExecProc("Acc_PrcProcessCostOfService", sqlParameter);
                            //Helper.ExecProc("Acc_PrcProcessIncome", sqlParameter);
                            //Helper.ExecProc("Acc_PrcProcessBalanceSheet", sqlParameter);
                            //Helper.ExecProc("Acc_PrcProcessCostBreakup", sqlParameter);

                        }


                    }
                }
                else if (criteria.ToUpper().ToString() == "notes".ToUpper())
                {
                    //if (monthid.Count() > 0)
                    //{

                    //    for (var i = 0; i < monthid.Count(); i++)
                    //    {
                    var monthidsingle = 0;// monthid[i];

                    //Exec Acc_PrcProcessIncome '4864add7-0ab2-4c4f-9eb8-6b63a425e665','31312c54-659b-4e63-b4ba-2bc3d7b05792',13,18,'Fahad'
                    var query = $"Exec [Acc_PrcProcessNotesBCIC] '{userid}','{comid}',{monthidsingle},{Currency},'NoteProcess' ,{FYId}  ";

                    SqlParameter[] sqlParameter = new SqlParameter[6];

                    sqlParameter[0] = new SqlParameter("@UserId", userid);
                    sqlParameter[1] = new SqlParameter("@ComId", comid);
                    sqlParameter[2] = new SqlParameter("@MonthId", monthidsingle);
                    sqlParameter[3] = new SqlParameter("@Currency", Currency);
                    sqlParameter[4] = new SqlParameter("@PCName", "NoteProcess");
                    sqlParameter[5] = new SqlParameter("@FiscalYearId", FYId);



                    Helper.ExecProc("Acc_PrcProcessNotesBCIC", sqlParameter);

                    //    }


                    //}
                }

                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Set Process", criteria, "Update", criteria);


                //int comid = int.Parse(Session["comid"].ToString());

                //db.Configuration.ProxyCreationEnabled = false;
                //db.Configuration.LazyLoadingEnabled = false;
                //if (id == null)
                //{
                //    List<Acc_FiscalYearModel> fiscalyear = db.Acc_FiscalYears.Where(x => x.comid == comid).ToList();
                //    id = fiscalyear.Max(p => p.FYId);
                //}

                //List<Acc_FiscalMonthModel> Acc_FiscalMonth = db.Acc_FiscalMonths.Where(x => x.FYId == id).ToList();
                //List<fymonthclass> data = new List<fymonthclass>();

                //int i = 0;
                //foreach (Acc_FiscalMonth item in Acc_FiscalMonth)
                //{
                //    fymonthclass asdf = new fymonthclass
                //    {
                //        //asdf.MasterLCID = item.ExportInvoiceMasters.COM_MasterLC.MasterLCID;
                //        isCheck = i++,
                //        MonthId = item.MonthId,
                //        MonthName = item.MonthName, //DateTime.Parse(item.InvoiceDate.ToString()).ToString("dd-MMM-yy");
                //        dtFrom = item.dtFrom,
                //        dtTo = item.dtTo
                //    };


                //    data.Add(asdf);
                //}


                if (Atrai.Model.AppData.globalException.Length > 0)
                {
                    return Json(Atrai.Model.AppData.globalException);
                }

                var data = "abcd";
                return Json(data = "1");

            }
            catch (Exception ex)
            {

                throw ex;
            }
            ////return Json(new { Success = 1, data = asdf }, JsonRequestBehavior.AllowGet);
        }


        public class fymonthclass
        {
            //public int FiscalMonthId { get; set; }
            public int MonthId { get; set; }
            public int isCheck { get; set; }

            public string? MonthName { get; set; }
            public string? dtFrom { get; set; }
            public string? dtTo { get; set; }
            //public int FYId { get; set; }

        }

        [AllowAnonymous]
        public async Task<IActionResult> AccountProcess()
        {
            //var gTRDBContext = db.HR_Emp_Info.Include(h => h.Cat_BloodGroup).Include(h => h.Cat_Department).Include(h => h.Cat_Designation).Include(h => h.Cat_Floor).Include(h => h.Cat_Grade).Include(h => h.Cat_Line).Include(h => h.Cat_Religion).Include(h => h.Cat_Section).Include(h => h.Cat_Shift).Include(h => h.Cat_SubSection).Include(h => h.Cat_Unit);
            var comid = HttpContext.Session.GetInt32("ComId");
            int defaultcountry = (_storeSettingRepository.All().Where(a => a.ComId == comid).Select(a => a.CountryId).FirstOrDefault());

            ViewBag.CountryId = _countryRepository.GetCurrencyList(); //new SelectList(_countryRepository.All(), "Id", "CurrencyShortName", defaultcountry);

            Acc_AccProcessViewModel model = new Acc_AccProcessViewModel();
            List<Acc_FiscalYearModel> fiscalyear = _accFiscalYearRepository.All().Where(x => x.ComId == comid && x.isLocked == false).ToList();
            int fiscalyid = fiscalyear.Max(p => p.Id);

            List<Acc_FiscalMonthModel> fiscalmonth = _accFiscalMonthRepository.All().Where(x => x.FYId == fiscalyid).ToList();

            model.ProcessFYs = fiscalyear;
            model.ProcessMonths = fiscalmonth;
            model.CountryId = defaultcountry;

            TempData["Status"] = "2";
            TempData["Message"] = "Account Process";
            tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), "", "List Show", ""); /// transaction log when enable it throw error
            //need to talk with himu

            //AccProcessViewModel.PrcSetData(model, "Create", dsDetails);
            return View(model);


            //return View(await _repos.GetEmpAsync());
        }

        // GET: Section


        public partial class Acc_AccProcessViewModel
        {
            [Display(Name = "Currency ")]
            public int? CountryId { get; set; }
            public List<Acc_FiscalYearModel> ProcessFYs { get; set; }
            public List<Acc_FiscalMonthModel> ProcessMonths { get; set; }

            //public class ProcessFY
            //{
            //    public Boolean isCheck { get; set; }
            //    public int FYId { get; set; }
            //    public string? FYName { get; set; }
            //    public string? dtOpen { get; set; }
            //    public string? dtClose { get; set; }
            //    public Boolean isWorking { get; set; }
            //    public Boolean isRunning { get; set; }
            //}
            //public class ProcessMonth
            //{
            //    public Boolean isCheck { get; set; }
            //    public int MonthId { get; set; }
            //    public string? MonthName { get; set; }
            //    public string? dtFrom { get; set; }
            //    public string? dtTo { get; set; }
            //}

        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AccountProcess(Acc_AccProcessViewModel model, string criteria, string command)
        {
            //DataSet dsList = new DataSet();
            //DataSet dsDetails = new DataSet();
            try
            {
                if (command != "Save")
                {
                    if (command == "0")
                    {
                        var comid = HttpContext.Session.GetInt32("ComId");
                        int defaultcountry = (_companyRepository.All().Where(a => a.Id == comid).Select(a => a.Id).FirstOrDefault());

                        ViewBag.CountryId = _countryRepository.GetCurrencyList(); //new SelectList(_countryRepository.All(), "Id", "CurrencyShortName", defaultcountry);

                        //AccProcessViewModel model = new AccProcessViewModel();
                        List<Acc_FiscalYearModel> fiscalyear = _accFiscalYearRepository.All().Where(x => x.ComId == comid && x.isLocked == false).ToList();
                        int fiscalyid = fiscalyear.Max(p => p.Id);

                        List<Acc_FiscalMonthModel> fiscalmonth = _accFiscalMonthRepository.All().Where(x => x.FYId == fiscalyid && x.isLocked == false).ToList();

                        model.ProcessFYs = fiscalyear;
                        model.ProcessMonths = fiscalmonth;
                        model.CountryId = defaultcountry;
                    }
                    else
                    {
                        int fiscalyid = int.Parse(command);

                        List<Acc_FiscalMonthModel> fiscalmonth = _accFiscalMonthRepository.All().Where(x => x.FYId == fiscalyid).ToList();
                        ViewBag.CountryId = _countryRepository.GetCurrencyList(); //new SelectList(_countryRepository.All(), "Id", "CurrencyShortName");

                        //dsDetails = AccProcessViewModel.prcGetData(command);
                        //List<clsCommon.clsCombo2> Curr = clsGenerateList.prcColumnTwo(dsDetails.Tables[3]);
                        //ViewBag.Currency = Curr;
                        //AccProcessViewModel.PrcSetData(model, "Create", dsDetails);
                    }
                }
                else
                {
                    if (ModelState.IsValid)
                    {
                        var values = prcDataSave(model, criteria);
                        //if (values == "Process Completed Successfully")
                        //{
                        //    dsList = AccProcessViewModel.prcGetData("0");
                        //    var fiscalyid = "0";
                        //    fiscalyid = dsList.Tables[0].Rows[0]["FYId"].ToString();
                        //    dsDetails = AccProcessViewModel.prcGetData(fiscalyid);
                        //    List<clsCommon.clsCombo2> Curr1 = clsGenerateList.prcColumnTwo(dsList.Tables[3]);
                        //    ViewBag.Currency = Curr1;
                        //    ModelState.Clear();
                        //    AccProcessViewModel.PrcSetData(model, "Create", dsDetails);
                        //}

                        //dsList = rptSummaryReport.prcGetData("0");
                        //List<clsCommon.clsCombo2> Curr = clsGenerateList.prcColumnTwo(dsList.Tables[3]);
                        //ViewBag.Currency = Curr;
                        //ModelState.AddModelError("CustomError", values);
                        return View(model);
                    }
                }
                return View(model);
            }
            catch (Exception ex)
            {
                //dsList = rptSummaryReport.prcGetData("0");
                //List<clsCommon.clsCombo2> Curr = clsGenerateList.prcColumnTwo(dsList.Tables[3]);
                //ViewBag.Currency = Curr;
                //ModelState.AddModelError("CustomError", ex.Message);
                return View(model);
            }

        }

        public string? prcDataSave(Acc_AccProcessViewModel model, string criteria)
        {

            var sqlQuery = "";
            try
            {
                if (criteria.ToUpper().ToString() == "TrialB".ToUpper())
                {
                    if (model.ProcessMonths.Count > 0)
                    {
                        for (var i = 0; i < model.ProcessMonths.Count; i++)
                        {
                            if (model.ProcessMonths[i].isCheck == true)
                            {
                                sqlQuery = "Exec prcProcessTrailBalance " + HttpContext.Session.GetInt32("UserId") + ", " + HttpContext.Session.GetInt32("ComId") + ", " +
                                    model.ProcessMonths[i].Id + ", " + model.CountryId + ", '' ";
                                //arQuery.Add(sqlQuery);
                            }
                        }
                    }
                }
                else if (criteria.ToUpper().ToString() == "cogs".ToUpper())
                {
                    if (model.ProcessMonths.Count > 0)
                    {
                        for (var i = 0; i < model.ProcessMonths.Count; i++)
                        {
                            if (model.ProcessMonths[i].isCheck == true)
                            {
                                sqlQuery = "Exec GTRAccounts.dbo.prcProcessCostOfService " + HttpContext.Session.GetInt32("UserId") + ", " +
                                HttpContext.Session.GetInt32("ComId") + ", " + model.ProcessMonths[i].Id + ", " + model.CountryId + ", '' ";
                                //arQuery.Add(sqlQuery);
                            }
                        }
                    }
                }
                else if (criteria.ToUpper().ToString() == "income".ToUpper())
                {
                    if (model.ProcessMonths.Count > 0)
                    {
                        for (var i = 0; i < model.ProcessMonths.Count; i++)
                        {
                            if (model.ProcessMonths[i].isCheck == true)
                            {
                                sqlQuery = "Exec GTRAccounts.dbo.prcProcessIncome " + HttpContext.Session.GetInt32("UserId") + ", " + HttpContext.Session.GetInt32("ComId") + ", " + model.ProcessMonths[i].Id + ", " + model.CountryId + ", '' ";
                                //arQuery.Add(sqlQuery);
                            }
                        }
                    }
                }
                //clsCon.GTRSaveDataWithSQLCommand(arQuery);
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Process data", criteria, "Save", criteria);

                return "Process Completed Successfully";
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            finally
            {
                //clsCon = null;
            }
        }


        #endregion


        #region ViewReport

        //public ActionResult DemoReport(string AccId, string FYId, string dtFrom, string dtTo, string CountryId, string IsLocalCurrency, string SupplierId, string CustomerId, string EmployeeId)
        //{
        //    try
        //    {

        //        var result = "";
        //        var comid = HttpContext.Session.GetInt32("ComId");
        //        var userid = HttpContext.Session.GetInt32("UserId");

        //        if (comid == null)
        //        {
        //            result = "Please Login first";
        //        }
        //        var quary = $"EXEC Acc_rptLedgerMultiDrCr '{comid}',{AccId},'{FYId}','{dtFrom}','{dtTo}' ,'{CountryId}','{IsLocalCurrency}','{userid}','{SupplierId}','{CustomerId}','{EmployeeId}' ";

        //        //Exec Acc_rptLedgerMultiDrCr '31312c54-659b-4e63-b4ba-2bc3d7b05792', 10165, 0, '01-Jul-2020', '28-Nov-2020', 18,0 ,'4864add7-0ab2-4c4f-9eb8-6b63a425e665' , '', '', ''
        //        AccId = "10165";
        //        FYId = "0";
        //        dtFrom = "01-Jul-2020";
        //        dtTo = "30-Nov-2020";
        //        CountryId = "18";
        //        IsLocalCurrency = "0";
        //        SupplierId = "";
        //        CustomerId = "";
        //        EmployeeId = "";




        //        SqlParameter[] parameters = new SqlParameter[11];

        //        parameters[0] = new SqlParameter("@ComId", comid);
        //        parameters[1] = new SqlParameter("@AccId", AccId);
        //        parameters[2] = new SqlParameter("@FYId", FYId);

        //        parameters[3] = new SqlParameter("@dtFrom", dtFrom);
        //        parameters[4] = new SqlParameter("@dtTo", dtTo);
        //        parameters[5] = new SqlParameter("@CountryId", CountryId);
        //        parameters[6] = new SqlParameter("@IsLocalCurrency", IsLocalCurrency);

        //        parameters[7] = new SqlParameter("@userid", userid);
        //        parameters[8] = new SqlParameter("@SupplierId", SupplierId);
        //        parameters[9] = new SqlParameter("@CustomerId", CustomerId);
        //        parameters[10] = new SqlParameter("@EmployeeId", EmployeeId);

        //        List<LedgerDetailsModel> bookingDeliveryChallan = Helper.ExecProcMapTList<LedgerDetailsModel>("Acc_rptLedgerMultiDrCr", parameters);

        //        return View(bookingDeliveryChallan);

        //        //return Json(new { bookingDeliveryChallan, ex = result });
        //    }
        //    catch (Exception ex)
        //    {

        //        throw ex;
        //    }

        //}


        #endregion



        #region offcanvas data and table data functionalities
        public class billGridItem
        {
            public int Id { get; set; }
            public int? SupplierId { get; set; }
            public string? PurchaseCode { get; set; }
            public string? Description { get; set; }
            public DateTime DueDate { get; set; }
            public DateTime PurchaseDate { get; set; }
            public string? Original_Amount { get; set; }
            public string? Open_Balance { get; set; }
            public string? NetAmount { get; set; }
            public bool CheckBox { get; set; }
            public string? Payment { get; set; }
            public string? Doctype { get; set; }
        }


        //[HttpGet]
        //[AllowAnonymous]
        //public IActionResult CustomerWiseBillData(int SupplierId)
        //{
        //    var ComId = HttpContext.Session.GetInt32("ComId");

        //    try
        //    {
        //        var purchasequery = _purchaseRepository.All().Include(x => x.DocTypeList).Where(x => x.SupplierId == SupplierId && x.DocTypeList.DocType == "Purchase Order");
        //        PurchaseModel purchasedata = purchasequery.FirstOrDefault();

        //        if (purchasedata == null)
        //        {
        //            return Json(new { Success = 0, ex = "No Data Found." });
        //        }

        //        purchasedata = purchasequery.FirstOrDefault();
        //        var SRowNo = 0;


        //        var data = purchasequery
        //          .Include(x => x.ItemsCategory).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
        //          .Include(x => x.Items)//.ThenInclude(x => x.PurchaseModel)
        //          .Include(x => x.Items).ThenInclude(x => x.PurchaseItems)
        //          .Include(x => x.PurchasePayments).ThenInclude(x => x.Transaction)
        //          .Select(p => new
        //          {
        //              Id = p.Id,
        //              p.SupplierId,
        //              p.CustomerId,
        //              CustomerName = p.CustomerModel.Name,
        //              p.ShipVia,
        //              p.ShippingAddress,
        //              p.PrimaryAddress,
        //              p.PurchaseDate,
        //              p.DueDate,
        //              p.PurchaseCode,
        //              p.PermitNo,
        //              p.Remarks,
        //              p.PaymentTermsId,
        //              p.DocTypeId,
        //              p.EmailId,
        //              p.DocStatusId,
        //              TermsId = p.PaymentTermsId,
        //              TermName = p.PaymentTermsInfo.TermName,
        //              p.FilePath,
        //              PaidAmount = p.PurchasePayments.Sum(x => x.Amount),
        //              NetAmount = p.NetAmount,
        //              p.Cc,
        //              p.Bcc,
        //              ItemsCategory = p.ItemsCategory.Where(x => x.IsDelete == false).Select(x =>

        //                 //VoucherSubs = p.VoucherSubs.Select(x =>

        //                 new
        //                 {
        //                     PurchaseItemsCategoryId = x.PurchaseItemsCategoryId,
        //                     Id = x.Id,
        //                     x.PurchaseId,
        //                     x.SLNo,
        //                     x.AccId,
        //                     AccName = x.Acc_ChartOfAccount.AccName,
        //                     AccCode = x.Acc_ChartOfAccount.AccCode,
        //                     GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
        //                     CustomerId = x.CustomerId,
        //                     Name = x.Customers.Name,
        //                     x.Amount,
        //                     x.Description,
        //                     x.IsBillable,
        //                     x.IsTax,
        //                     x.ComId,
        //                     x.LuserId,
        //                     x.isTransaction,
        //                 }).ToList(),
        //              Items = p.Items.Where(x => x.IsDelete == false).Select(x =>

        //             //VoucherSubs = p.VoucherSubs.Select(x =>

        //             new
        //             {
        //                 PurchaseItemsId = x.PurchaseItemsId,
        //                 Id = x.Id,
        //                 x.PurchaseId,
        //                 x.SLNo,
        //                 x.ProductId,
        //                 ProductName = x.Product.Name,
        //                 productCode = x.Product.Code,
        //                 CustomerId = x.CustomerId,
        //                 Name = x.ItemWiseCustomer.Name,
        //                 x.Amount,
        //                 x.Price,
        //                 x.Description,
        //                 QTY = x.QTY - x.PurchaseItems.Sum(y => y.QTY),
        //                 //x.QTY,
        //                 x.SKU,
        //                 x.Rate,
        //                 x.Quantity,
        //                 x.ComId,
        //                 x.LuserId,
        //                 x.isTransaction,
        //                 TotalQty = x.QTY,
        //                 UsedQty = x.PurchaseItems.Sum(y => y.QTY)
        //             }).ToList()
        //          }).FirstOrDefault();





        //        //SalesItemsModel a = new SalesItemsModel { Name = "abc", Amount = 2.5, Id = 1, IsDelete = false, Price = 2.5, Quantity = 1, SalesId = 5};
        //        //purchase.Items.Add(a);
        //        return Json(new { Success = 1, Data = data, ex = "Data Load Successfully" });
        //    }
        //    catch (Exception e)
        //    {
        //        return Json(new { Success = 2, ex = "Data Loaded Failed" });
        //        //return Json(e.ToString());
        //    }

        //}


        [HttpGet]
        [AllowAnonymous]
        public IActionResult CustomerWiseBillData(int SupplierId)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");
            string queryname = "UpdatePurchaseReturnStatus";
            var viewquary = $"Exec {queryname}  '" + ComId + "','" + SupplierId + "' ";
            Console.WriteLine(viewquary);

            SqlParameter[] parameters = new SqlParameter[1];
            parameters[0] = new SqlParameter("@ComId", ComId);

            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS(queryname, parameters);

            var billData = _purchaseRepository.All().Include(x => x.DocTypeList).Where(x => x.SupplierId == SupplierId && x.ReturnStatus != 1 && x.DocTypeList.DocType == "Purchase Order" && x.DocTypeList.DocFor == "Purchase").ToList(); // && x.DocTypeList.DocType == "Sales" && x.DocTypeList.DocFor == "Sales"

            if (billData != null && billData.Count >= 0)
            {
                var data = new List<billGridItem>();
                foreach (var item in billData)
                {
                    var singledata = new billGridItem();
                    var openBlnc = item.Total - (double)item.NetAmount;
                    var descp = "Invoice #" + item.PurchaseCode;

                    singledata.Id = item.Id;
                    //singledata.DueDate = item.DueDate;
                    singledata.PurchaseDate = item.PurchaseDate;
                    //singledata.SalesDate = item.SalesDate;
                    singledata.Original_Amount = item.Total.ToString();
                    singledata.Open_Balance = openBlnc.ToString();
                    singledata.NetAmount = item.NetAmount.ToString(); ;
                    singledata.Description = descp;
                    singledata.CheckBox = false;
                    singledata.PurchaseCode = item.PurchaseCode;
                    singledata.Doctype = item.DocTypeList.DocType;

                    data.Add(singledata);
                }
                return Json(new { Success = 1, Data = data, ex = "Data Loaded Successfully" });
            }
            return Json(new { Success = 2, ex = "Data Loaded Failed" });
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult CustomerWiseSupplierPO(int SupplierId)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");
            string queryname = "UpdatePurchaseReturnStatus";
            var viewquary = $"Exec {queryname}  '" + ComId + "','" + SupplierId + "' ";
            Console.WriteLine(viewquary);

            SqlParameter[] parameters = new SqlParameter[1];
            parameters[0] = new SqlParameter("@ComId", ComId);

            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS(queryname, parameters);

            var billData = _purchaseRepository.All().Include(x => x.DocTypeList).Where(x => x.SupplierId == SupplierId && x.ReturnStatus != 1 && x.DocTypeList.DocType == "Supplier PO" && x.DocTypeList.DocFor == "Purchase").ToList(); // && x.DocTypeList.DocType == "Sales" && x.DocTypeList.DocFor == "Sales"

            if (billData != null && billData.Count >= 0)
            {
                var data = new List<billGridItem>();
                foreach (var item in billData)
                {
                    var singledata = new billGridItem();
                    var openBlnc = item.Total - (double)item.NetAmount;
                    var descp = "Invoice #" + item.PurchaseCode;

                    singledata.Id = item.Id;
                    //singledata.DueDate = item.DueDate;
                    singledata.PurchaseDate = item.PurchaseDate;
                    //singledata.SalesDate = item.SalesDate;
                    singledata.Original_Amount = item.Total.ToString();
                    singledata.Open_Balance = openBlnc.ToString();
                    singledata.NetAmount = item.NetAmount.ToString(); ;
                    singledata.Description = descp;
                    singledata.CheckBox = false;
                    singledata.PurchaseCode = item.PurchaseCode;
                    singledata.Doctype = item.DocTypeList.DocType;

                    data.Add(singledata);
                }
                return Json(new { Success = 1, Data = data, ex = "Data Loaded Successfully" });
            }
            return Json(new { Success = 2, ex = "Data Loaded Failed" });
        }






        [HttpGet]
        [AllowAnonymous]
        public IActionResult SupplierWiseBillData(int SupplierId)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");
            //string queryname = "UpdateSalesTableStatus";
            //var viewquary = $"Exec {queryname}  '" + ComId + "','" + customerid + "' ";
            //Console.WriteLine(viewquary);

            //SqlParameter[] parameters = new SqlParameter[1];
            //parameters[0] = new SqlParameter("@ComId", ComId);

            //var datasetabc = new System.Data.DataSet();
            //datasetabc = Helper.ExecProcMapDS(queryname, parameters);

            var billData = _purchaseRepository.All().Include(x => x.DocTypeList).Where(x => x.SupplierId == SupplierId && x.DocTypeList.DocType == "Bill" && x.DocTypeList.DocFor == "Purchase").ToList(); // && x.DocTypeList.DocType == "Sales" && x.DocTypeList.DocFor == "Sales"

            if (billData != null && billData.Count >= 0)
            {
                var data = new List<billGridItem>();
                foreach (var item in billData)
                {
                    var singledata = new billGridItem();
                    var openBlnc = item.Total - (double)item.NetAmount;
                    var descp = "Invoice #" + item.PurchaseCode;

                    singledata.Id = item.Id;
                    singledata.SupplierId = item.SupplierId;
                    //singledata.DueDate = item.DueDate;
                    singledata.PurchaseDate = item.PurchaseDate;
                    //singledata.SalesDate = item.SalesDate;
                    singledata.Original_Amount = item.Total.ToString();
                    singledata.Open_Balance = openBlnc.ToString();
                    singledata.NetAmount = item.NetAmount.ToString(); ;
                    singledata.Description = descp;
                    singledata.CheckBox = false;
                    singledata.PurchaseCode = item.PurchaseCode;

                    data.Add(singledata);
                }
                return Json(new { Success = 1, Data = data, ex = "Data Loaded Successfully" });
            }
            return Json(new { Success = 2, ex = "Data Loaded Failed" });
        }






        [HttpGet]
        [AllowAnonymous]
        public IActionResult GetPurchaseOrderDetailsForCredit(int id)
        {

            var data = _purchaseRepository.All().Where(x => x.Id == id).FirstOrDefault();
            var item = _purchaseItemRepository.All().Include(x => x.PurchaseModel).Include(x => x.Product).Where(x => x.PurchaseId == id && x.PurchaseModel.IsDelete == false && x.ItemsReturnStatus != 1).ToList();
            foreach (var x in item)
            {
                int itemId = x.Id;
                //Console.WriteLine(itemId);
                var temp = _purchaseItemRepository.All().Include(x => x.PurchaseModel).Where(x => x.PurchaseItemsId == itemId && x.IsDelete == false && x.PurchaseModel.IsDelete == false).ToList();
                var sum = 0;
                if (temp != null && temp.Count > 0)
                {
                    foreach (var y in temp)
                    {
                        sum = (int)(sum + y.Quantity);
                    }
                }
                x.Quantity = x.Quantity - sum;
                x.ProductName = x.Product.Name;
                x.Product = null;
                x.PurchaseItemsId = x.Id;
                x.Id = 0;
            }
            var productTax = _purchaseProductTaxRepository.All().Where(x => x.PurchaseId == id).ToList();
            data.Items = item;
            data.PurchaseProductTax = productTax;
            return Json(new { Success = 1, data = data, ex = "Data Loaded Successfully" });
        }



        ///&& x.ItemsReturnStatus == 0

        [HttpGet]
        [AllowAnonymous]
        public IActionResult GetPurchaseDetailsForTabulator(int PurchaseId, int CopyBill = 0)
        {
            try
            {
                var purchasequery = _purchaseRepository.All().Where(x => x.Id == PurchaseId);
                var purchase = purchasequery
                    .Include(x => x.ItemsCategory).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
                    .Include(x => x.Items)
                    .Include(x => x.Items).ThenInclude(x => x.PurchaseItems)
                    .Include(x => x.PurchasePayments).ThenInclude(x => x.Transaction)
                    .Select(p => new
                    {
                        Id = CopyBill == 0 ? p.Id : 0,
                        p.SupplierId,
                        p.CustomerId,
                        CustomerName = p.CustomerModel.Name,
                        p.ShipVia,
                        p.ShippingAddress,
                        p.PrimaryAddress,
                        p.PurchaseDate,
                        p.DueDate,
                        p.PurchaseCode,
                        p.PermitNo,
                        p.Remarks,
                        p.PaymentTermsId,
                        p.DocTypeId,
                        DocType = p.DocTypeList.DocType,
                        p.EmailId,
                        p.DocStatusId,
                        TermsId = p.PaymentTermsId,
                        TermName = p.PaymentTermsInfo.TermName,
                        p.FilePath,
                        PaidAmount = p.PurchasePayments.Sum(x => x.Amount),
                        NetAmount = p.NetAmount,
                        p.Cc,
                        p.Bcc,
                        ItemsCategory = p.ItemsCategory.Where(x => x.IsDelete == false).Select(x =>
                        new
                        {
                            PurchaseItemsCategoryId = CopyBill == 0 ? x.PurchaseItemsCategoryId : x.Id,
                            Id = 0,
                            x.PurchaseId,
                            x.SLNo,
                            x.AccId,
                            AccName = x.Acc_ChartOfAccount.AccName,
                            AccCode = x.Acc_ChartOfAccount.AccCode,
                            GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
                            CustomerId = x.CustomerId,
                            DocType = p.DocTypeList.DocType,
                            NetAmount = p.NetAmount,
                            p.PurchaseCode,
                            p.PurchaseDate,
                            Name = x.Customers.Name,
                            x.Amount,
                            x.Description,
                            x.IsBillable,
                            x.IsTax,
                            x.ComId,
                            x.LuserId,
                            x.isTransaction,
                            UniqueColumData = GenerateUniqueValueForCategory()
                        }).ToList(),
                        Items = p.Items.Where(x => x.IsDelete == false).Select(x =>
                        new
                        {
                            PurchaseItemsId = CopyBill == 0 ? x.PurchaseItemsId : x.Id,
                            Id = 0,
                            x.PurchaseId,
                            x.SLNo,
                            x.ProductId,
                            ProductName = x.Product.Name,
                            productCode = x.Product.Code,
                            DocType = p.DocTypeList.DocType,
                            NetAmount = p.NetAmount,
                            p.PurchaseCode,
                            p.PurchaseDate,
                            CustomerId = x.CustomerId,
                            Name = x.ItemWiseCustomer.Name,
                            x.Amount,
                            x.Price,
                            x.Description,
                            Quantity = x.Quantity - x.PurchaseItems.Sum(y => y.Quantity),
                            x.SKU,
                            x.Rate,
                            x.ComId,
                            x.LuserId,
                            x.isTransaction,
                            TotalQty = x.Quantity,
                            UsedQty = x.PurchaseItems.Sum(y => y.Quantity),
                            UniqueColumData = GenerateUniqueValueDForItem()
                        }).ToList()
                    }).FirstOrDefault();

                return Json(new { Success = 1, Data = purchase, ex = "Data Loaded Successfully" });
            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }
        }











        private string GenerateUniqueValueForCategory()
        {
            const string characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            int length = 7; // Adjust the length as needed
            StringBuilder uniqueId = new StringBuilder();
            Random random = new Random();

            for (int i = 0; i < length; i++)
            {
                int randomIndex = random.Next(0, characters.Length);
                uniqueId.Append(characters[randomIndex]);
            }

            return uniqueId.ToString();
        }
        private string GenerateUniqueValueDForItem()
        {
            const string characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            int length = 8; // Adjust the length as needed
            StringBuilder uniqueId = new StringBuilder();
            Random random = new Random();

            for (int i = 0; i < length; i++)
            {
                int randomIndex = random.Next(0, characters.Length);
                uniqueId.Append(characters[randomIndex]);
            }

            return uniqueId.ToString();
        }


        //[HttpGet]
        //[AllowAnonymous]
        //public IActionResult GetPurchaseDetailsForTabulator(int PurchaseId)
        //{

        //    var data = _purchaseRepository.All().Where(x => x.Id == PurchaseId).FirstOrDefault();
        //    var itemsCategory = _purchaseItemCategoryRepository.All().Where(x => x.PurchaseId == PurchaseId).ToList();  // && x.Status != 1
        //    var item = _purchaseItemRepository.All().Where(x => x.PurchaseId == PurchaseId).ToList();
        //    //foreach (var x in item)
        //    //{
        //    //    int itemId = x.Id;
        //    //    //Console.WriteLine(itemId);
        //    //    var temp = _purchaseItemRepository.All(); //.Where(x => x.SalesItemReturnId == itemId).ToList();
        //    //    var sum = 0;
        //    //    if (temp != null && temp.Count > 0)
        //    //    {
        //    //        foreach (var y in temp)
        //    //        {
        //    //            sum = (int)(sum + y.Quantity);
        //    //        }
        //    //    }
        //    //    x.Quantity = x.Quantity - sum;
        //    //}
        //    //var productTax = salesProductTaxRepository.All().Where(x => x.SalesId == id).ToList();
        //    //data.Items = item;
        //    //data.SalesProductTax = productTax;
        //    return Json(new { Success = 1, data = data, ex = "Data Loaded Successfully" });
        //}


        #endregion

        [AllowAnonymous]
        public JsonResult GetAccountsDashboard()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            var UserId = HttpContext.Session.GetInt32("UserId");


            SqlParameter[] sqlParameterxx = new SqlParameter[1];
            sqlParameterxx[0] = new SqlParameter("@ComId", ComId);
            //sqlParameter[1] = new SqlParameter("@Criterial", "MonthWiseProfit");

            var datasetabc = new System.Data.DataSet();
            //List<MonthlySalesModel> monthlysales = Helper.ExecProcMapTList<MonthlySalesModel>("prcGetDashboard", sqlParameter2).ToList();
            datasetabc = Helper.ExecProcMapDS("Acc_rptDashboard", sqlParameterxx);

            datasetabc.Tables[0].TableName = "MonthlyRevenue";
            datasetabc.Tables[1].TableName = "MonthlySales";
            datasetabc.Tables[2].TableName = "BankBalance";
            datasetabc.Tables[3].TableName = "ExpenseGroup";
            datasetabc.Tables[4].TableName = "OverDue";
            datasetabc.Tables[5].TableName = "Deposit";
            datasetabc.Tables[6].TableName = "Invoice";



            var abc = Helper.ConvertDataSetasJSON(datasetabc);
            return Json(new { Success = 1, data = abc });
        }
        public JsonResult GetReportNames()
        {
            var reportNames = _allReportRepository.GetAllForDropDown();
            return Json(reportNames);
        }

        [AllowAnonymous]
        public JsonResult LastVoucher(int vouchertypeid, string vouchertypesearch)
        {
            try
            {


                var UserId = HttpContext.Session.GetInt32("UserId");
                //var ComId = HttpContext.Session.GetInt32("ComId");

                var abc = _accVoucherRepository.All().Include(x => x.VoucherSubs).Include(x => x.UserAccountList)
                    .Where(x => x.LuserId == UserId && x.VoucherTypeId == vouchertypeid)
                            .Select(p => new
                            {
                                Id = p.Id,
                                VoucherNo = p.VoucherNo,
                                VoucherDate = p.VoucherDate.ToString("dd-MMM-yy"),
                                VoucherDesc = p.VoucherDesc ?? "",
                                Amount = p.vAmountLocal,
                                VAmount = p.VAmount,
                                VoucherType = p.Acc_VoucherTypes.VoucherTypeNameShort

                            }).OrderByDescending(x => x.Id).Take(5);
                //var currentdate = DateTime.Now.Date;
                var LastVoucerhDate = DateTime.Now.Date.ToString("dd-MMM-yy");
                string LastVoucerhNo = "Auto Generated";
                if (abc != null)
                {
                    LastVoucerhDate = abc.Count() > 0 ? abc.FirstOrDefault().VoucherDate : LastVoucerhDate;
                    LastVoucerhNo = abc.Count() > 0 ? LastVoucerhNo : LastVoucerhNo;


                }

                //return Json(new { PrevVoucherList = abc, LastVoucherDate = LastVoucerhDate.ToString("dd-MMM-yy"), LastVoucherNo = abc.FirstOrDefault().VoucherNo });
                return Json(new { PrevVoucherList = abc, LastVoucherDate = LastVoucerhDate, LastVoucherNo = LastVoucerhNo });

            }
            catch (Exception ex)
            {
                return Json(new { Success = "0", error = ex.Message });
                throw ex;
            }

        }

        [AllowAnonymous]
        public JsonResult LastPurchase(int DocTypeId, string purchasetypesearch, int CopyBill = 0)
        {
            try
            {


                var UserId = HttpContext.Session.GetInt32("UserId");
                //var ComId = HttpContext.Session.GetInt32("ComId");

                if (CopyBill == 1)
                {
                    var abc = _purchaseRepository.All().Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(x => x.DocTypeList.DocType == "Bill")
                           //.Where(x => x.DocTypeId == 22) //x.LuserId == UserId && 
                           .Select(p => new
                           {
                               Id = p.Id,
                               DocNo = p.PurchaseCode,
                               DocType = p.DocTypeList.DocType,
                               //VoucherDesc = p.VoucherDesc ?? "",
                               Supplier = p.SupplierModel.SupplierName,
                               Amount = p.NetAmount,
                               //VoucherType = p.Acc_VoucherTypes.VoucherTypeNameShort

                           }).OrderByDescending(x => x.Id).Take(5);
                    return Json(new { PrevVoucherList = abc });
                }
                else
                {
                    var abc = _purchaseRepository.All().Include(x => x.SupplierModel).Include(x => x.DocTypeList)
                                       .Where(x => x.DocTypeId == DocTypeId) //x.LuserId == UserId && 
                                               .Select(p => new
                                               {
                                                   Id = p.Id,
                                                   DocNo = p.PurchaseCode,
                                                   DocType = p.DocTypeList.DocType,
                                                   //VoucherDesc = p.VoucherDesc ?? "",
                                                   Supplier = p.SupplierModel.SupplierName,
                                                   Amount = p.NetAmount,
                                                   //VoucherType = p.Acc_VoucherTypes.VoucherTypeNameShort

                                               }).OrderByDescending(x => x.Id).Take(5);
                    //var currentdate = DateTime.Now.Date;
                    //var LastVoucerhDate = DateTime.Now.Date.ToString("dd-MMM-yy");
                    //string LastVoucerhNo = "Auto Generated";
                    //if (abc != null)
                    //{
                    //    LastVoucerhDate = abc.Count() > 0 ? abc.FirstOrDefault().VoucherDate : LastVoucerhDate;
                    //    LastVoucerhNo = abc.Count() > 0 ? LastVoucerhNo : LastVoucerhNo;


                    //}

                    //return Json(new { PrevVoucherList = abc, LastVoucherDate = LastVoucerhDate.ToString("dd-MMM-yy"), LastVoucherNo = abc.FirstOrDefault().VoucherNo });
                    //return Json(new { PrevVoucherList = abc, LastVoucherDate = LastVoucerhDate, LastVoucherNo = LastVoucerhNo });
                    return Json(new { PrevVoucherList = abc });
                }
            }
            catch (Exception ex)
            {
                return Json(new { Success = "0", error = ex.Message });
                throw ex;
            }

        }
        [AllowAnonymous]
        public IActionResult AImportXml(IFormFile file)
        {
            try
            {


                XmlDocument doc = new XmlDocument();
                //using (var stream = file.OpenReadStream())
                //{
                //    doc.Load(stream);
                //}


                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");
                XmlNodeList nodes = doc.SelectNodes("//GROUP");
                XmlNodeList nodesl = doc.SelectNodes("//LEDGER");

                DataTable dataTable = new DataTable();

                dataTable.Columns.Add("Guid", typeof(string));
                dataTable.Columns.Add("Type", typeof(string));
                dataTable.Columns.Add("AccCategory", typeof(string));
                dataTable.Columns.Add("AccName", typeof(string));
                dataTable.Columns.Add("AccGroup", typeof(string));
                dataTable.Columns.Add("OP_Balance", typeof(string));
                dataTable.Columns.Add("OP_Date", typeof(string));
                dataTable.Columns.Add("LuserId", typeof(string));
                dataTable.Columns.Add("ComId", typeof(string));

                HashSet<string> addedGuids = new HashSet<string>();
                DataRow dataRowAsset = dataTable.NewRow();
                dataRowAsset["Guid"] = "";
                dataRowAsset["Type"] = "G";
                dataRowAsset["AccCategory"] = "Assets";
                dataRowAsset["AccName"] = "Assets";
                dataRowAsset["AccGroup"] = "";
                dataTable.Rows.Add(dataRowAsset);

                DataRow dataRowLiability = dataTable.NewRow();
                dataRowLiability["Guid"] = "";
                dataRowLiability["Type"] = "G";
                dataRowLiability["AccCategory"] = "Liabilities";
                dataRowLiability["AccName"] = "Liabilities";
                dataRowLiability["AccGroup"] = "";
                dataTable.Rows.Add(dataRowLiability);

                DataRow dataRowExpense = dataTable.NewRow();
                dataRowExpense["Guid"] = "";
                dataRowExpense["Type"] = "G";
                dataRowExpense["AccCategory"] = "Expenses";
                dataRowExpense["AccName"] = "Expenses";
                dataRowExpense["AccGroup"] = "";
                dataTable.Rows.Add(dataRowExpense);

                DataRow dataRowIncomes = dataTable.NewRow();
                dataRowIncomes["Guid"] = "";
                dataRowIncomes["Type"] = "G";
                dataRowIncomes["AccCategory"] = "Incomes";
                dataRowIncomes["AccName"] = "Incomes";
                dataRowIncomes["AccGroup"] = "";
                dataTable.Rows.Add(dataRowIncomes);


                foreach (XmlNode node in nodes)
                {
                    DataRow dataRow = dataTable.NewRow();

                    string guid = node.SelectSingleNode("GUID").InnerText;

                    if (addedGuids.Contains(guid))
                    {
                        continue;  // Skip this row if it has already been added to the dataTable
                    }

                    dataRow["Guid"] = guid;
                    dataRow["Type"] = "G";
                    dataRow["AccCategory"] = "";
                    dataRow["AccName"] = node.Attributes["NAME"].Value;
                    dataRow["AccGroup"] = node.SelectSingleNode("PARENT").InnerText;

                    dataTable.Rows.Add(dataRow);

                    addedGuids.Add(guid);
                }

                foreach (XmlNode nodel in nodesl)
                {
                    DataRow dataRow = dataTable.NewRow();

                    string guid = nodel.SelectSingleNode("GUID").InnerText;

                    if (addedGuids.Contains(guid))
                    {
                        continue;  // Skip this row if it has already been added to the dataTable
                    }

                    dataRow["Guid"] = guid;
                    dataRow["Type"] = "L";
                    dataRow["AccCategory"] = "";
                    dataRow["AccName"] = nodel.Attributes["NAME"].Value;
                    dataRow["AccGroup"] = nodel.SelectSingleNode("PARENT").InnerText;

                    dataTable.Rows.Add(dataRow);

                    addedGuids.Add(guid);
                }

                dataTable.DefaultView.Sort = "Guid ASC";
                dataTable = dataTable.DefaultView.ToTable();


                var assets = new[] { "Fixed Assets", "Current Assets", "Investments", "Misc. Expenses (ASSET)", "CAPITAL WORK-IN-PROGRESS" };
                var liabilities = new[] { "Loans (Liability)", "Current Liabilities", "Capital Account", "Branch / Divisions", "Profit & Loss A/c", "Suspense A/c" };
                var expenses = new[] { "Purchase Accounts", "Direct Expenses", "Indirect Expenses", "IMPORT RELATED EXPENSES", "EXPORT RELATED EXPENSES", "Preliminiary Expenses" };
                var incomes = new[] { "Sales Accounts", "Direct Incomes", "Indirect Incomes" };
                foreach (DataRow row in dataTable.Rows)
                {
                    var accName = row["AccName"].ToString();
                    var accGroup = row["AccGroup"].ToString();
                    if (assets.Contains(accName) && row["AccGroup"] == "")
                    {
                        row["AccGroup"] = "Assets";
                        row["AccCategory"] = "Assets";
                    }
                    else if (liabilities.Contains(accName) && row["AccGroup"] == "")
                    {
                        row["AccGroup"] = "Liabilities";
                        row["AccCategory"] = "Liabilities";
                    }
                    else if (expenses.Contains(accName) && row["AccGroup"] == "")
                    {
                        row["AccGroup"] = "Expenses";
                        row["AccCategory"] = "Expenses";
                    }
                    else if (incomes.Contains(accName) && row["AccGroup"] == "")
                    {
                        row["AccGroup"] = "Incomes";
                        row["AccCategory"] = "Incomes";
                    }

                }

                var Acc = "AccGroup";
                foreach (DataRow row in dataTable.Rows)
                {

                    row["OP_Balance"] = 0;
                    row["ComId"] = comid;
                    row["LuserId"] = userid;
                    row["OP_Date"] = DateTime.Now;

                    var accGroup = row[Acc].ToString();
                    if (accGroup.ToLower().Contains("assets") || accGroup.ToLower().Contains("asset"))
                    {

                        row["AccCategory"] = "Assets";
                    }
                    else if (accGroup.ToLower().Contains("liabilities") || accGroup.ToLower().Contains("liability"))
                    {

                        row["AccCategory"] = "Liabilities";
                    }
                    else if (accGroup.ToLower().Contains("expenses") || accGroup.ToLower().Contains("expense"))
                    {

                        row["AccCategory"] = "Expenses";
                    }
                    else if (accGroup.ToLower().Contains("incomes") || accGroup.ToLower().Contains("income"))
                    {

                        row["AccCategory"] = "Incomes";
                    }

                }
                // }

                string accCategory = "";
                foreach (DataRow row in dataTable.Rows)
                {
                    if (string.IsNullOrEmpty(row["AccCategory"].ToString()))
                    {
                        string accGroup = row["AccGroup"].ToString();

                        foreach (DataRow row1 in dataTable.Rows)
                        {
                            string accName = row1["AccName"].ToString();
                            if (accGroup == accName)
                            {
                                accCategory = row1["AccCategory"].ToString();
                                break;
                            }
                        }
                        row["AccCategory"] = accCategory;

                        // Search for a row with the same AccName and a non-empty AccCategory

                    }
                }

                var model = dataTable.AsEnumerable().Select(row => new XMLimportModel
                {
                    Guid = row.Field<string>("Guid"),
                    AccName = row.Field<string>("AccName"),
                    AccGroup = row.Field<string>("AccGroup"),
                    AccCategory = row.Field<string>("AccCategory"),
                    //OP_Balance = row.Field<string>("OP_Balance"),
                    //OP_Date = (DateTime.Parse(row.Field<string>("OP_Date"))).ToString("dd-MMM-yy"),
                    Type = row.Field<string>("Type"),
                }).ToList();




                #region details ///details table function///
                //var conString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                string conString = Atrai.Model.AppData.DefaultConnectionString;



                string table_Details = "Temp_Accounts_Tally";
                //string connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                SqlConnection con = new SqlConnection(conString);
                SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                con.Open();
                cmd.ExecuteNonQuery();
                //Response.Redirect("done.aspx");
                con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dataTable.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dataTable);

                    conn.Close();
                }
                #endregion
                //accountheadlist creation
                var xx = _accountHeadRepository.All().Count();

                if (xx == 0)

                {
                    SqlParameter[] sqlParameter1 = new SqlParameter[3];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", "AccountHead_Tally");
                    sqlParameter1[2] = new SqlParameter("@UserId", userid);

                    Helper.ExecProc("[prcAutoInsert]", sqlParameter1);

                    var insertedCount = _accountHeadRepository.All().Count();

                    if (insertedCount == 0)
                    {
                        // Account not inserted
                        return Json(new { success = false, error = "Account not inserted" });
                    }
                    else
                    {
                        SqlParameter[] sqlParameter2 = new SqlParameter[3];
                        sqlParameter2[0] = new SqlParameter("@ComId", comid);
                        sqlParameter2[1] = new SqlParameter("@TableName", "Initialize");
                        sqlParameter2[2] = new SqlParameter("@UserId", userid);

                        Helper.ExecProc("[prcAutoInsert]", sqlParameter2);


                        return Json(new { success = true, message = "Accounts Inserted Successfully" });

                    }


                }

                return Json(new { success = true, message = "Accounts Inserted Successfully" });


            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
        }

        [HttpGet]
        public ActionResult AccountsBalanceSheetComparisonReportQB(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int strId)
        {
            ViewBag.Id = strId;
            ViewBag.Criteria = criteria;

            //var all = _accountHeadRepository.All().OrderBy(a => a.ParentId).ToList();

            return View();
        }





        #region Dashboard


        [AllowAnonymous]
        [OverridableAuthorize]
        public IActionResult GetthingsDone(string Type)
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var companyName = _companyRepository.All().Where(x => x.Id == comid).Select(x => x.CompanyName).FirstOrDefault();

            ViewBag.ListType = Type ?? "GetthingsDone";
            ViewBag.CompanyName = companyName ?? "ABC";

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetDataForGetthingsDone()
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");

                SqlParameter[] sqlParameter = new SqlParameter[1];
                sqlParameter[0] = new SqlParameter("@Comid", ComId);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS("GetThingsDone", sqlParameter);

                var dataTable = datasetabc.Tables[0];
                var dataTable1 = datasetabc.Tables[1];
                var dataTable2 = datasetabc.Tables[2];

                return Json(new { Success = 1, data = dataTable, data1 = dataTable1, data2 = dataTable2, ex = "Data " });
            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }

        #endregion

        #region Inventory quantity adjustment

        [AllowAnonymous]
        public JsonResult GetInventoryShrinkage()
        {
            return Json(_accountHeadRepository.GetInventoryShrinkageForDropDown());
        }

        #endregion

        [AllowAnonymous]
        [HttpGet]
        public ActionResult CommercialReportView(int reportId)
        {
            if (reportId == 0)
            {
                return NotFound();
            }
            var r = ReportRepo.All().Single(a => a.Id == reportId);
            if (r == null)
            {
                return View(new ReportrequestDto());
            }
            var reportName = reportStyleRepository.All().Where(x => x.ReportFor == "Commercial").Select(x => new SelectListItem
            {
                Text = x.ReportStyleName,
                Value = x.Id.ToString()
            }).ToList();
            ViewData["ReportName"] = reportName;

            var re = new ReportrequestDto
            {
                ReportName = r.ReportName,
                Type = r.Type,
                Value = r.CustomValue,
                Id = r.Id,
                ParentId = (int)(r.ParentId == null ? r.Id : r.ParentId),
            };
            return View(re);
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult ModernReportView(int reportId)
        {
            if (reportId == 0)
            {
                return NotFound();
            }
            var r = ReportRepo.All().Single(a => a.Id == reportId);
            if (r == null)
            {
                return View(new ReportrequestDto());
            }
            var re = new ReportrequestDto
            {
                ReportName = r.ReportName,
                Type = r.Type,
                Value = r.CustomValue,
                Id = r.Id,
                ParentId = (int)(r.ParentId == null ? r.Id : r.ParentId),
            };
            return View(re);
        }
        [AllowAnonymous]
        [HttpGet]
        public async Task<ActionResult> GetReportData(string startdt, string enddt, string? type, string? reportName, int pageSize, int pazeNumber)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var userid = HttpContext.Session.GetInt32("UserId");

                var quary = $"exec GetReportDataAll '{comid}','{type}','{startdt}','{enddt}','{reportName}'";

                SqlParameter[] parameters = new SqlParameter[5];
                parameters[0] = new SqlParameter("@comId", comid);
                parameters[1] = new SqlParameter("@doctype", type);
                parameters[2] = new SqlParameter("@StartDate", startdt);
                parameters[3] = new SqlParameter("@EndDate", enddt);
                parameters[4] = new SqlParameter("@Report", reportName);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS("GetReportDataAll", parameters);
                var abc = Helper.ConvertDataSetasJSON(datasetabc);
                await Task.CompletedTask;
                return Ok(abc);

            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
        [AllowAnonymous]
        [HttpPost]
        public ActionResult SaveCustomReport(string model)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var reportmodel = JsonConvert.DeserializeObject<ReportrequestDto>(model);
                if (reportmodel.Id == 0 || reportmodel.Id == 26)
                {
                    ReportRepo.Insert(new ReportModel
                    {
                        Category = ReportCategory.Custom,
                        CustomValue = model,
                        ReportName = reportmodel.ReportName,
                        Type = reportmodel.Type,
                        ReportLink = $"ModernReportView",
                        ComId = comid,
                        ParentId = reportmodel.ParentId
                    });
                    return Ok("Report Added To Custom Report");
                }
                else
                {

                    ReportRepo.Update(new ReportModel
                    {
                        Category = ReportCategory.Custom,
                        CustomValue = model,
                        ReportName = reportmodel.ReportName,
                        Type = reportmodel.Type,
                        ReportLink = $"/accounts/ModernReportView?reportid={reportmodel.Id}",
                        ComId = comid,
                        ParentId = reportmodel.ParentId,
                        Id = reportmodel.Id
                    }, reportmodel.Id);
                    return Ok("Report Update Successfully");
                }


            }
            catch (Exception ex)
            {

                return StatusCode(500, ex.Message);
            }
        }
        [AllowAnonymous]
        [HttpGet]
        public async Task<ActionResult> LoadReport(int ParentId)
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var r = await ReportRepo.All().Where(a => a.ParentId == ParentId && a.ComId == comid).Select(x => new { x.ReportName, x.Id }).ToListAsync();
            return Ok(r);
        }
        [AllowAnonymous]
        [HttpPost]
        public ActionResult AddtoMangementReport(int Id)
        {
            try
            {
                var report = ReportRepo.All().Single(x => x.Id == Id);
                if (report == null)
                {
                    return BadRequest();
                }
                report.IsManagement = true;
                ReportRepo.Update(report, Id);


                return Ok("Report Added To Management Report");
            }
            catch (Exception ex)
            {

                return StatusCode(500, ex.Message);
            }
        }
        [AllowAnonymous]
        [HttpPost]
        public ActionResult DeleteReport(int rptId)
        {
            try
            {
                var report = ReportRepo.All().Single(x => x.Id == rptId);
                if (report == null)
                {
                    return BadRequest();
                }
                ReportRepo.Delete(report);
                return RedirectToAction(nameof(ModernReportView), new { reportId = report.ParentId });
            }
            catch (Exception ex)
            {

                return StatusCode(500, ex.Message);
            }
        }

        #region Dashboard

        [OverridableAuthorize]
        public async Task<ActionResult> Business(string Type)
        {
            try
            {
                ViewBag.ListType = Type ?? "BusinessOverview";
                var Reports = await variableRepo.All().Where(x => x.VariableFor == "ChartComponent" && !x.IsDelete).ToListAsync();
                return View(Reports);
            }
            catch (Exception ex)
            {

                return View();
            }
        }
        [OverridableAuthorize]
        public ActionResult cashflow(string Type)
        {
            try
            {
                ViewBag.ListType = Type ?? "CashFlow";
                return View();
            }
            catch (Exception ex)
            {

                return View();
            }
        }
        [HttpGet]

        public IActionResult GetChartConfigurations()
        {

            var chartConfigurations = GetChartConfigurationsFromDatabase();

            return Ok(chartConfigurations);
        }



        private string[] GetRandomColor(int count)
        {
            string[] rgbaColors = {
            "rgb(236, 208, 120)",
            "rgba(217, 91, 67, 0.7)",
            "rgba(192, 41, 66, 0.7)",
            "rgba(84, 36, 55, 0.7)",
            "rgba(83, 119, 122, 0.7)",
            "rgba(119, 146, 174, 0.7)"
        };
            List<string> selected = new List<string>();
            for (int i = 0; i < count; i++)
            {
                Random random = new Random();
                int index = random.Next(rgbaColors.Length);

                selected.Add(rgbaColors[index]);
            }

            return selected.ToArray();
        }

        private DasboardViewDto GetChartConfigurationsFromDatabase()
        {

            var comid = HttpContext.Session.GetInt32("ComId");
            var userid = HttpContext.Session.GetInt32("UserId");
            var dashview = new DasboardViewDto();
            //exec ProcDynamicDashboard 256,'Expense','49476','','pp.Name'
            var chartConfigs = new List<ChartConfiguration>();
            var customDashboardData = dydasRepo.All().Where(x => x.Isvisible == true && x.IsSystem == false && x.Type != "Custom" && x.Type != "Statement" && x.Type != "Inventory").ToList();
            foreach (var item in customDashboardData)
            {
                var quary = $"exec ProcDynamicDashboard {comid},'{item.Type}','{RemoveBracketsAndQuotes(item.GroupFilterValue)}','{item.GroupBy}','{item.AdditionalFilter}','{RemoveBracketsAndQuotes(item.AdditionalFilterValue)}','{item.TimePriod}'";

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(quary);
                var b = DataTableConverter<Chartdata>.ConvertDataTableToObject(datasetabc.Tables[0]);
                var sets = new[]
                        { new
                {
                    label = item.Grouptitle,
                    data = b.Select(x => x.Data).ToList(),
                    backgroundColor = GetRandomColor(b.Count),
                    borderRadius = item.ChartType == "pie" || item.ChartType == "doughnut" ? 20 : 10,
                    borderColor = item.ChartType=="pie" || item.ChartType == "doughnut"? "white" : "rgba(227, 225, 217, 1)",
                    borderWidth = item.ChartType=="pie" || item.ChartType == "doughnut"? 10:1


                }
                };

                if (datasetabc.Tables.Count == 2)
                {
                    var b2 = DataTableConverter<Chartdata>.ConvertDataTableToObject(datasetabc.Tables[1]);
                    sets.Append(new
                    {
                        label = item.GroupBy,
                        data = b2.Select(x => x.Data).ToList(),
                        backgroundColor = GetRandomColor(b2.Count),
                        borderRadius = item.ChartType == "pie" || item.ChartType == "doughnut" ? 20 : 10,
                        borderColor = item.ChartType == "pie" || item.ChartType == "doughnut" ? "white" : "rgba(227, 225, 217, 1)",
                        borderWidth = item.ChartType == "pie" || item.ChartType == "doughnut" ? 10 : 1
                    });
                }


                //var abc = Helper.ConvertDataSetasJSON(datasetabc);
                var ch = new ChartConfiguration
                {
                    Id = item.Id,
                    Type = item.ChartType,
                    Data = new
                    {
                        labels = b.Select(x => x.Labels).ToList(),
                        y = 1,
                        sliced = true,
                        datasets = sets
                    },
                    Options = new
                    {
                        plugins = new
                        {
                            title = new
                            {
                                display = true,
                                text = item.ChartTitle
                            },
                            legend = new
                            {
                                position = "right",
                                borderWidth = 1
                            }

                        }
                    }
                };
                chartConfigs.Add(ch);
            }

            var SystemChart = dydasRepo.All(false).Where(x => x.Isvisible == true && x.Type == "Custom" && x.IsSystem == true && x.ChartType == "chart").ToList();
            foreach (var item in SystemChart)
            {
                var quary = $"exec ProcDynamicDashboard {comid},'{item.Type}','{RemoveBracketsAndQuotes(item.GroupFilterValue)}','{item.GroupBy}','{item.AdditionalFilter}','{RemoveBracketsAndQuotes(item.AdditionalFilterValue)}','{item.TimePriod}'";

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(quary);
                var b = DataTableConverter<Chartdata>.ConvertDataTableToObject(datasetabc.Tables[0]);
                var sets = new List<object>
                        { new
                {
                    label = "Cash in",
                    data = b.Select(x => x.Data).ToList(),
                    backgroundColor = "rgb(83, 183, 0)",
                   borderColor = "rgba(255, 255, 255, 0.5)",
                   borderRadius = 10,
                    borderWidth = 1
                }
                };

                if (datasetabc.Tables.Count == 2)
                {
                    var b2 = DataTableConverter<Chartdata>.ConvertDataTableToObject(datasetabc.Tables[1]);
                    sets.Add(new
                    {
                        label = "Cash Out",
                        data = b2.Select(x => x.Data).ToList(),
                        backgroundColor = "rgb(255, 106, 0)",
                        borderColor = "rgba(255, 255, 255, 0.5)",
                        borderRadius = 10,
                        borderWidth = 1
                    });
                }


                //var abc = Helper.ConvertDataSetasJSON(datasetabc);
                var ch = new ChartConfiguration
                {
                    isSystem = true,
                    Id = item.Id,
                    Type = "bar",
                    Data = new
                    {
                        labels = b.Select(x => x.Labels).ToList(),
                        y = 1,
                        sliced = true,
                        datasets = sets
                    },
                    Options = new
                    {
                        plugins = new
                        {
                            title = new
                            {
                                display = true,
                                text = item.ChartTitle
                            }
                        }
                    }
                };
                chartConfigs.Add(ch);
            }
            dashview.Charts = chartConfigs;

            var sytemView = dydasRepo.All(false).Where(x => x.Isvisible == true && x.Type == "Custom" && x.ChartType != "chart").Select(x => new CustomView
            {
                Id = x.Id,
                Title = x.ChartTitle,
                Type = x.Type,
                Timepreriod = x.TimePriod,
                selectColums = x.GroupBy


            }).ToList();
            foreach (var item in sytemView)
            {
                var quary = $"exec ProcDynamicDashboard {comid},'{item.Type}','','{item.selectColums}','','','{item.Timepreriod}'";

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(quary);
                item.Data = Helper.ConvertDataSetasJSON(datasetabc);
            }
            dashview.CustomViews = sytemView;
            var StatementView = dydasRepo.All().Where(x => x.Isvisible == true && x.Type == "Statement" && x.ChartType != "chart" && x.Type != "Custom").Select(x => new CustomView
            {
                Id = x.Id,
                Title = x.ChartTitle,
                Type = x.Type,
                Timepreriod = x.TimePriod,
                selectColums = x.GroupFilterValue,
                Groupby = x.GroupBy


            }).ToList();
            foreach (var item in StatementView)
            {
                var quary = $"exec GetStatementsLadeger '{comid}','{RemoveBracketsAndQuotes(item.selectColums)}'";

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(quary);
                item.Data = Helper.ConvertDataSetasJSON(datasetabc);
            }
            dashview.StatementViews = StatementView;

            var StockView = dydasRepo.All()
                .Where(x => x.Isvisible == true && x.Type == "Inventory" && x.Type != "Statement" && x.ChartType != "chart" && x.Type != "Custom")
                .Select(x => new CustomView
            {
                Id = x.Id,
                Title = x.ChartTitle,
                Type = x.Type,
                Timepreriod = x.TimePriod,
                selectColums = x.GroupFilterValue,
                Groupby = x.GroupBy,
                StockCaption = x.StockCaption,
                CaptionValue = x.CaptionValue,
                LuserId = x.LuserId,
                IsPublic = x.IsPublic

                }).ToList();
            foreach (var item in StockView)
            {
                if (item.LuserId != userid && item.IsPublic == false)
                {
                    // Set item.Data to null or an empty string
                    item.Data = null; // or item.Data = string.Empty;
                }
                else
                {
                    var quary = $"exec GetStockwiseStatement '{comid}','{RemoveBracketsAndQuotes(item.selectColums)}','{item.StockCaption}','{item.CaptionValue}','{item.Timepreriod}'";

                    var datasetabc = new System.Data.DataSet();
                    datasetabc = Helper.ExecProcMapDS(quary);
                    item.Data = Helper.ConvertDataSetasJSON(datasetabc);
                }
            }
            dashview.StatementViews.AddRange(StockView);

            dashview.LayoutOrders = dashorRepo.All().ToList();
            return dashview;
        }
        [HttpGet]

        public IActionResult GetColumnSelector(string variablefor)
        {
            try
            {
                var colums = variableRepo.All().Where(x => x.VariableFor == variablefor)
                    .Select(x => new
                    {
                        x.Id,
                        x.VariableName,
                        x.VariableFor,
                        x.VariableValue
                    }).ToList();
                return Ok(colums);
            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }
        [HttpGet]
        //munna
        public async Task<IActionResult> GetfilterColumnFilter(string variablefor, string searchby, string type)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                if (variablefor == "timeperiod")
                {
                    var colums = variableRepo.All().Where(x => x.VariableFor == variablefor)
                    .Select(x => new
                    {
                        x.Id,
                        x.VariableName,
                        x.VariableFor,
                        x.VariableValue
                    }).ToList();
                    return Ok(colums);
                }
                if (variablefor == "Items")
                {
                    var query = productRepository.All().Where(x => x.ComId == comid);
                    if (!string.IsNullOrEmpty(searchby))
                    {
                        query.Where(x => x.Name.Contains(searchby));
                    }
                    var result = await query.Select(x => new
                    {
                        VariableValue = x.Id,
                        VariableName = x.Name
                    })
                        //.Take(10)
                        .ToListAsync();
                    return Ok(result);
                }
                if (variablefor == "Vendor")
                {
                    var query = _supplierRepository.All().Where(x => x.ComId == comid);
                    if (!string.IsNullOrEmpty(searchby))
                    {
                        query.Where(x => x.SupplierName.Contains(searchby));
                    }
                    var result = await query.Select(x => new
                    {
                        VariableValue = x.Id,
                        VariableName = x.SupplierName
                    })
                        //.Take(10)
                        .ToListAsync();
                    return Ok(result);
                }
                if (variablefor == "Accounts")
                {
                    var query = _accountHeadRepository.All().Where(x => x.ComId == comid && x.AccType == "L");
                    if (type.ToLower() == "Expenses".ToLower())
                    {
                        query = query.Where(x => x.AccountCategorys.AccountType == "Expense");
                    }
                    if (type.ToLower() == "Revenue".ToLower())
                    {
                        query = query.Where(x => x.AccountCategorys.AccountType == "Income");
                    }
                    if (type == "Statement")
                    {
                        query = _accountHeadRepository.All().Where(x => x.ComId == comid && x.AccType == "G");
                    }
                    if (!string.IsNullOrEmpty(searchby))
                    {
                        query = query.Where(x => x.AccName.Contains(searchby));
                    }

                    var result = await query.Select(x => new
                    {
                        VariableValue = x.Id,
                        VariableName = x.AccName
                    })
                        //.Take(10)
                        .ToListAsync();
                    return Ok(result);
                }
                if (variablefor == "Inventory")
                {
                    var query = _categoryRepository.All();
                                      
                    if (type == "Category")
                    {
                        query = _categoryRepository.All().Where(x => x.ComId == comid);
                    }
                    if (!string.IsNullOrEmpty(searchby))
                    {
                        query = query.Where(x => x.Name.Contains(searchby));
                    }

                    var result = await query.Select(x => new
                    {
                        VariableValue = x.Id,
                        VariableName = x.Name
                    })
                        //.Take(10)
                        .ToListAsync();
                    return Ok(result);
                }
                if (variablefor == "Customer")
                {
                    var query = _customerRepository.All().Where(x => x.ComId == comid);
                    if (!string.IsNullOrEmpty(searchby))
                    {
                        query.Where(x => x.Name.Contains(searchby));
                    }
                    var result = await query.Select(x => new
                    {
                        VariableValue = x.Id,
                        VariableName = x.Name
                    })
                        //.Take(10)
                        .ToListAsync();
                    return Ok(result);
                }
                return Ok();
            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }
        [HttpGet]
        public IActionResult GetLedger(int accId)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var quary = $"exec GetLedger {comid},'{accId}'";

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(quary);
                var b = DataTableConverter<AccledgerHead>.ConvertDataTableToObject(datasetabc.Tables[0]);

                var result = b.Select(x => new
                {
                    VariableValue = x.id,
                    VariableName = x.accname
                });
                return Ok(result);
            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }
        //munna
        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetCategorywiseItem(int CategoryId)
        {
            try
            {
                var Comid = HttpContext.Session.GetInt32("ComId");
                var itemsQuery = productRepository.All();
                

                if (CategoryId != 1)
                {
                    itemsQuery = itemsQuery.Where(x => x.ComId == Comid && x.CategoryId == CategoryId);
                }

                var items = itemsQuery.Select(x => new
                {
                    VariableValue = x.Id,
                    VariableName = x.Name
                }).ToList();

                return Ok(items);

            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }
        [HttpGet]
        public IActionResult GetLedgerPreviewData(string accId)
        {
            try
            {
                if (!string.IsNullOrEmpty(accId))
                {
                    var comid = HttpContext.Session.GetInt32("ComId");
                    var quary = $"exec GetStatementsLadeger '{comid}','{accId}'";

                    var datasetabc = new System.Data.DataSet();
                    datasetabc = Helper.ExecProcMapDS(quary);
                    var data = Helper.ConvertDataSetasJSON(datasetabc);
                    return Ok(data);
                }
                return Ok();

            }
            catch (Exception e)
            {
                return StatusCode(500, e.Message);
            }
        }
        //munna
        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetStockPreviewData(string productId, string stockCaption, string Timeperiod, int captionValue)
        {
            try
            {
                if (!string.IsNullOrEmpty(productId) || productId == null)
                {
                    var Comid = HttpContext.Session.GetInt32("ComId");
                    var quary = $"exec GetStockwiseStatement '{Comid}','{productId}','{stockCaption}','{captionValue}','{Timeperiod}'";

                    var datasetabc = new System.Data.DataSet();
                    datasetabc = Helper.ExecProcMapDS(quary);
                    var data = Helper.ConvertDataSetasJSON(datasetabc);
                    return Ok(data);
                }
                return Ok();

            }
            catch (Exception e)
            {
                return StatusCode(500, e.Message);
            }
        }

        [HttpGet]

        public async Task<ActionResult> GetpreviewData(ChartDataRequest model)
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var userid = HttpContext.Session.GetInt32("UserId");
                //exec ProcDynamicDashboard 256,'Expense','49476','','pp.Name'
                var quary = $"exec ProcDynamicDashboard {comid},'{model.Type}','{RemoveBracketsAndQuotes(model.groupfilterid)}','{model.selectColums}','{model.additionalfilter}','{RemoveBracketsAndQuotes(model.additionalfilterdata)}','{model.Timepreriod}'";

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(quary);
                var abc = Helper.ConvertDataSetasJSON(datasetabc);
                await Task.CompletedTask;
                return Ok(abc);

            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
        private string RemoveBracketsAndQuotes(string input)
        {
            if (string.IsNullOrEmpty(input))
            {
                return string.Empty;
            }
            return input.Replace("[", "").Replace("]", "").Replace("\"", "");
        }
        [HttpPost]
        public ActionResult SaveStatementData(DyDashBoardModel model)
        {
            try
            {

                var comid = HttpContext.Session.GetInt32("ComId");

                model.ComId = Convert.ToInt32(comid);
                if (model.Id == 0)
                {
                    dydasRepo.Insert(model);
                }
                else
                {

                    dydasRepo.Update(model, model.Id);
                }


                return Ok("Save Successfully");

            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [AllowAnonymous]
        [HttpPost]
        public ActionResult SaveStockStatement(DyDashBoardModel model)
        {
            try
            {

                var comid = HttpContext.Session.GetInt32("ComId");

                model.ComId = Convert.ToInt32(comid);
                if (model.Id == 0)
                {
                    dydasRepo.Insert(model);
                }
                else
                {

                    dydasRepo.Update(model, model.Id);
                }


                return Ok("Save Successfully");

            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPost]
        public ActionResult SaveDashBoardData(DyDashBoardModel model)
        {
            try
            {

                var comid = HttpContext.Session.GetInt32("ComId");

                model.ComId = Convert.ToInt32(comid);
                if (model.Id == 0)
                {
                    dydasRepo.Insert(model);
                }
                else
                {

                    dydasRepo.Update(model, model.Id);
                }


                return Ok("Save Successfully");

            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpGet]
        public async Task<IActionResult> DeleteDashBoard(int Id)
        {
            try
            {
                var result = await dydasRepo.All().Where(x => x.Id == Id).SingleOrDefaultAsync();
                if (result is null)
                {
                    return BadRequest();
                }
                dydasRepo.Delete(result);
                await Task.CompletedTask;
                return Ok("Delete Succesfully");
            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }
        [HttpGet]
        public async Task<IActionResult> GetDyDataById(int Id)
        {
            try
            {
                var result = await dydasRepo.All().Where(x => x.Id == Id).SingleOrDefaultAsync();

                return Ok(result);
            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }

        [HttpGet]

        public IActionResult GetChartType()
        {
            try
            {
                var colums = variableRepo.All().Where(x => x.VariableFor == "ChartType")
                    .Select(x => new
                    {
                        x.Id,
                        x.VariableName,
                        x.VariableFor,
                        x.VariableValue
                    }).OrderBy(x => x.VariableName).ToList();
                return Ok(colums);
            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }
        [HttpGet]
        public async Task<IActionResult> GetCasflowData(string timePriod)
        {
            try
            {

                var comid = HttpContext.Session.GetInt32("ComId");
                var userid = HttpContext.Session.GetInt32("UserId");
                //exec ProcDynamicDashboard 256,'Expense','49476','','pp.Name'
                var quary = $"exec GetCashFlowData {comid},'{timePriod}'";

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(quary);
                var abc = Helper.ConvertDataSetasJSON(datasetabc);
                await Task.CompletedTask;
                return Ok(abc);

            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }
        [HttpPost]
        public async Task<IActionResult> SaveCustomiseLayout(string model)
        {
            try
            {
                var comid = Convert.ToInt32(HttpContext.Session.GetInt32("ComId"));
                var userid = HttpContext.Session.GetInt32("UserId");
                var dashOrder = JsonConvert.DeserializeObject<List<DashBoardLayoutOrder>>(model);

                if (dashOrder.Count() > 0)
                {
                    var old = dashorRepo.All().ToList();
                    if (old.Count > 0)
                    {
                        dashorRepo.RemoveRange(old);
                    }

                    dashOrder = dashOrder.Select(x => new DashBoardLayoutOrder
                    {
                        ComId = comid,
                        DashId = x.DashId,
                        Order = x.Order
                    }).ToList();
                    dashorRepo.AddRange(dashOrder);
                }
                await Task.CompletedTask;
                return Ok(dashOrder);

            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }

        #endregion

        [HttpGet]
        public IActionResult ImportData()
        {
            try
            {
                var colums = variableRepo.All().Where(x => x.VariableFor == "ImportType" && (x.VariableName == "Product and Service" || x.VariableName == "Customers" || x.VariableName == "Suppliers"))
                    .Select(x => new VariableModel
                    {
                        Id = x.Id,
                        VariableName = x.VariableName,
                        VariableFor = x.VariableFor,
                        VariableValue = x.VariableValue,
                        Icons = x.Icons
                    }).OrderBy(x => x.VariableName).ToList();
                return View(colums);
            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }
        [AllowAnonymous]
        [HttpGet]
        public IActionResult ImportDataType(string type)
        {
            try
            {
                ViewBag.Type = type;
                return View(model: type);
            }
            catch (Exception e)
            {

                return StatusCode(500, e.Message);
            }
        }


        [HttpPost]
        public IActionResult ImportDataFile(IFormFile File, string type)
        {
            if (File != null && File.Length > 0)
            {
                try
                {
                    if (type == "COA")
                    {
                        List<COAUploadDTO> output = new();

                        using (var package = new ExcelPackage(File.OpenReadStream()))
                        {


                            var ws = package.Workbook.Worksheets[0];

                            int row = 2;
                            int col = 1;

                            while (string.IsNullOrWhiteSpace(ws.Cells[row, col].Value?.ToString()) == false)
                            {
                                COAUploadDTO p = new();
                                p.SLNo = Convert.ToInt32(ws.Cells[row, col].Value == null ? 0 : ws.Cells[row, col].Value.ToString().Trim());
                                p.AccountCode = ws.Cells[row, col + 1].Value == null ? "" : ws.Cells[row, col + 1].Value.ToString().Trim();
                                p.AccountHead = ws.Cells[row, col + 2].Value.ToString().Trim();
                                p.ParentHead = ws.Cells[row, col + 3].Value.ToString().Trim();
                                p.AccountType = ws.Cells[row, col + 4].Value.ToString().Trim();
                                p.LedgerType = ws.Cells[row, col + 5].Value.ToString().Trim();
                                p.OpeningDr = Convert.ToDouble(ws.Cells[row, col + 6].Value == null ? 0 : ws.Cells[row, col + 6].Value.ToString().Trim());
                                p.OpeningDr = Convert.ToDouble(ws.Cells[row, col + 7].Value == null ? 0 : ws.Cells[row, col + 7].Value.ToString().Trim());
                                p.RefNo = ws.Cells[row, col + 8].Value == null ? "" : ws.Cells[row, col + 8].Value.ToString().Trim();
                                output.Add(p);

                                row += 1;

                            }

                            return Ok(output);
                        }
                    }
                    if (type == "Customers")
                    {
                        List<CustomerUploadDTO> output = new();

                        using (var package = new ExcelPackage(File.OpenReadStream()))
                        {


                            var ws = package.Workbook.Worksheets[0];

                            int row = 2;
                            int col = 1;

                            while (string.IsNullOrWhiteSpace(ws.Cells[row, col].Value?.ToString()) == false)
                            {
                                CustomerUploadDTO p = new CustomerUploadDTO();

                                p.Id = Convert.ToInt32(ws.Cells[row, 1].Value == null ? 0 : ws.Cells[row, 1].Value.ToString().Trim());
                                p.SecoundaryAddress = ws.Cells[row, 2].Value == null ? "" : ws.Cells[row, 2].Value.ToString().Trim();
                                p.Email = ws.Cells[row, 3].Value == null ? "" : ws.Cells[row, 3].Value.ToString().Trim();
                                p.Name = ws.Cells[row, 4].Value == null ? "" : ws.Cells[row, 4].Value.ToString().Trim();
                                p.Notes = ws.Cells[row, 5].Value == null ? "" : ws.Cells[row, 5].Value.ToString().Trim();
                                p.Phone = ws.Cells[row, 6].Value == null ? "" : ws.Cells[row, 6].Value.ToString().Trim();
                                p.City = ws.Cells[row, 7].Value == null ? "" : ws.Cells[row, 7].Value.ToString().Trim();
                                p.PostalCode = ws.Cells[row, 8].Value == null ? "" : ws.Cells[row, 8].Value.ToString().Trim();
                                p.PrimaryAddress = ws.Cells[row, 9].Value == null ? "" : ws.Cells[row, 9].Value.ToString().Trim();
                                p.CustType = ws.Cells[row, 10].Value == null ? "" : ws.Cells[row, 10].Value.ToString().Trim();
                                p.OpBalance = Convert.ToDecimal(ws.Cells[row, 11].Value == null ? 0 : ws.Cells[row, 11].Value.ToString().Trim());
                                p.CreditLimit = Convert.ToDecimal(ws.Cells[row, 12].Value == null ? 0 : ws.Cells[row, 12].Value.ToString().Trim());
                                p.MonthlyTarget = Convert.ToDecimal(ws.Cells[row, 13].Value == null ? 0 : ws.Cells[row, 13].Value.ToString().Trim());
                                p.CustomerCommissionPer = Convert.ToDecimal(ws.Cells[row, 14].Value == null ? 0 : ws.Cells[row, 14].Value.ToString().Trim());
                                p.SRCommissionPer = Convert.ToDecimal(ws.Cells[row, 15].Value == null ? 0 : ws.Cells[row, 15].Value.ToString().Trim());
                                p.ContactPersonDesignation = ws.Cells[row, 16].Value == null ? "" : ws.Cells[row, 16].Value.ToString().Trim();
                                p.ContactPersonName = ws.Cells[row, 17].Value == null ? "" : ws.Cells[row, 17].Value.ToString().Trim();
                                p.Website = ws.Cells[row, 18].Value == null ? "" : ws.Cells[row, 18].Value.ToString().Trim();
                                p.ClBalance = Convert.ToDecimal(ws.Cells[row, 19].Value == null ? 0 : ws.Cells[row, 19].Value.ToString().Trim());
                                p.CompanyName = ws.Cells[row, 20].Value == null ? "" : ws.Cells[row, 20].Value.ToString().Trim();
                                p.Fax = ws.Cells[row, 21].Value == null ? "" : ws.Cells[row, 21].Value.ToString().Trim();
                                p.FirstName = ws.Cells[row, 22].Value == null ? "" : ws.Cells[row, 22].Value.ToString().Trim();
                                p.LastName = ws.Cells[row, 23].Value == null ? "" : ws.Cells[row, 23].Value.ToString().Trim();
                                p.Other = ws.Cells[row, 24].Value == null ? "" : ws.Cells[row, 24].Value.ToString().Trim();
                                p.Suffix = ws.Cells[row, 25].Value == null ? "" : ws.Cells[row, 25].Value.ToString().Trim();
                                p.Title = ws.Cells[row, 26].Value == null ? "" : ws.Cells[row, 26].Value.ToString().Trim();
                                p.BillingCity = ws.Cells[row, 27].Value == null ? "" : ws.Cells[row, 27].Value.ToString().Trim();
                                p.BillingCountry = ws.Cells[row, 28].Value == null ? "" : ws.Cells[row, 28].Value.ToString().Trim();
                                p.BillingPostalCode = ws.Cells[row, 29].Value == null ? "" : ws.Cells[row, 29].Value.ToString().Trim();
                                p.BillingProvince = ws.Cells[row, 30].Value == null ? "" : ws.Cells[row, 30].Value.ToString().Trim();
                                p.BillingStreetAddress = ws.Cells[row, 31].Value == null ? "" : ws.Cells[row, 31].Value.ToString().Trim();
                                p.DeliveryOptions = ws.Cells[row, 32].Value == null ? "" : ws.Cells[row, 32].Value.ToString().Trim();
                                p.DisplayName = ws.Cells[row, 33].Value == null ? "" : ws.Cells[row, 33].Value.ToString().Trim();
                                p.FileName = ws.Cells[row, 34].Value == null ? "" : ws.Cells[row, 34].Value.ToString().Trim();
                                p.Language = ws.Cells[row, 35].Value == null ? "" : ws.Cells[row, 35].Value.ToString().Trim();
                                p.MiddelName = ws.Cells[row, 36].Value == null ? "" : ws.Cells[row, 36].Value.ToString().Trim();
                                p.MobileNumber = ws.Cells[row, 37].Value == null ? "" : ws.Cells[row, 37].Value.ToString().Trim();
                                p.OpeningDate = Convert.ToDateTime(ws.Cells[row, 38].Value == null ? DateTime.Now : ws.Cells[row, 38].Value.ToString().Trim());
                                p.ShippingCity = ws.Cells[row, 39].Value == null ? "" : ws.Cells[row, 39].Value.ToString().Trim();
                                p.ShippingCountry = ws.Cells[row, 40].Value == null ? "" : ws.Cells[row, 40].Value.ToString().Trim();
                                p.ShippingPostalCode = ws.Cells[row, 41].Value == null ? "" : ws.Cells[row, 41].Value.ToString().Trim();
                                p.ShippingProvince = ws.Cells[row, 42].Value == null ? "" : ws.Cells[row, 42].Value.ToString().Trim();
                                p.ShippingStreetAddress = ws.Cells[row, 43].Value == null ? "" : ws.Cells[row, 43].Value.ToString().Trim();
                                p.Taxes = Convert.ToDecimal(ws.Cells[row, 44].Value == null ? 0 : ws.Cells[row, 44].Value.ToString().Trim());
                                p.CustomerCode = ws.Cells[row, 45].Value == null ? "" : ws.Cells[row, 45].Value.ToString().Trim();
                                p.OverDueBalance = Convert.ToDecimal(ws.Cells[row, 46].Value == null ? 0 : ws.Cells[row, 46].Value.ToString().Trim());

                                output.Add(p);

                                row += 1;

                            }

                            return Ok(output);
                        }
                    }
                    if (type == "Suppliers")
                    {
                        List<SupplierUploadDTO> output = new();

                        using (var package = new ExcelPackage(File.OpenReadStream()))
                        {


                            var ws = package.Workbook.Worksheets[0];

                            int row = 2;
                            int col = 1;

                            while (string.IsNullOrWhiteSpace(ws.Cells[row, col].Value?.ToString()) == false)
                            {
                                SupplierUploadDTO p = new SupplierUploadDTO();

                                //p.Id = Convert.ToInt32(ws.Cells[row, 1].Value == null ? 0 : ws.Cells[row, 1].Value.ToString().Trim());
                                p.SupplierName = ws.Cells[row, 2].Value == null ? "" : ws.Cells[row, 2].Value.ToString().Trim();
                                p.Email = ws.Cells[row, 3].Value == null ? "" : ws.Cells[row, 3].Value.ToString().Trim();
                                p.Phone = ws.Cells[row, 4].Value == null ? "" : ws.Cells[row, 4].Value.ToString().Trim();
                                p.PrimaryAddress = ws.Cells[row, 5].Value == null ? "" : ws.Cells[row, 5].Value.ToString().Trim();
                                p.Notes = ws.Cells[row, 6].Value == null ? "" : ws.Cells[row, 6].Value.ToString().Trim();
                                p.City = ws.Cells[row, 7].Value == null ? "" : ws.Cells[row, 7].Value.ToString().Trim();
                                p.SecondaryAddress = ws.Cells[row, 8].Value == null ? "" : ws.Cells[row, 8].Value.ToString().Trim();
                                p.SupType = ws.Cells[row, 9].Value == null ? "" : ws.Cells[row, 9].Value.ToString().Trim();
                                p.OpBalance = Convert.ToDecimal(ws.Cells[row, 10].Value == null ? "" : ws.Cells[row, 10].Value.ToString().Trim());
                                p.SupplierCommissionPer = Convert.ToDecimal(ws.Cells[row, 11].Value == null ? 0 : ws.Cells[row, 11].Value.ToString().Trim());
                                p.TradeLicenseNo = ws.Cells[row, 12].Value == null ? "" : ws.Cells[row, 12].Value.ToString().Trim();
                                p.ContactPersonDesignation = ws.Cells[row, 13].Value == null ? "" : ws.Cells[row, 13].Value.ToString().Trim();
                                p.ContactPersonName = ws.Cells[row, 14].Value == null ? "" : ws.Cells[row, 14].Value.ToString().Trim();
                                p.Website = ws.Cells[row, 15].Value == null ? "" : ws.Cells[row, 15].Value.ToString().Trim();
                                p.ClBalance = Convert.ToDecimal(ws.Cells[row, 20].Value == null ? 0 : ws.Cells[row, 20].Value.ToString().Trim());
                                p.AccountNo = ws.Cells[row, 21].Value == null ? "" : ws.Cells[row, 21].Value.ToString().Trim();
                                p.BillingRate = Convert.ToDecimal(ws.Cells[row, 22].Value == null ? 0 : ws.Cells[row, 23].Value.ToString().Trim());

                                p.BusinessIdNo = ws.Cells[row, 23].Value == null ? "" : ws.Cells[row, 23].Value.ToString().Trim();
                                p.CompanyName = ws.Cells[row, 24].Value == null ? "" : ws.Cells[row, 24].Value.ToString().Trim();
                                p.Country = ws.Cells[row, 25].Value == null ? "" : ws.Cells[row, 25].Value.ToString().Trim();
                                p.Fax = ws.Cells[row, 26].Value == null ? "" : ws.Cells[row, 26].Value.ToString().Trim();
                                p.FilePath = ws.Cells[row, 27].Value == null ? "" : ws.Cells[row, 27].Value.ToString().Trim();
                                p.FirstName = ws.Cells[row, 28].Value == null ? "" : ws.Cells[row, 28].Value.ToString().Trim();
                                p.LastName = ws.Cells[row, 29].Value == null ? "" : ws.Cells[row, 29].Value.ToString().Trim();
                                p.MiddleName = ws.Cells[row, 30].Value == null ? "" : ws.Cells[row, 30].Value.ToString().Trim();
                                p.Mobileno = ws.Cells[row, 31].Value == null ? "" : ws.Cells[row, 31].Value.ToString().Trim();
                                p.Other = ws.Cells[row, 32].Value == null ? "" : ws.Cells[row, 32].Value.ToString().Trim();
                                p.PostalCode = ws.Cells[row, 33].Value == null ? "" : ws.Cells[row, 33].Value.ToString().Trim();
                                p.Province = ws.Cells[row, 34].Value == null ? "" : ws.Cells[row, 34].Value.ToString().Trim();
                                p.StreetAddress = ws.Cells[row, 35].Value == null ? "" : ws.Cells[row, 35].Value.ToString().Trim();
                                p.Suffix = ws.Cells[row, 36].Value == null ? "" : ws.Cells[row, 36].Value.ToString().Trim();
                                p.Title = ws.Cells[row, 37].Value == null ? "" : ws.Cells[row, 37].Value.ToString().Trim();
                                p.StatusRemarks = ws.Cells[row, 38].Value == null ? "" : ws.Cells[row, 38].Value.ToString().Trim();
                                p.SupplierCode = ws.Cells[row, 39].Value == null ? "" : ws.Cells[row, 39].Value.ToString().Trim();


                                output.Add(p);

                                row += 1;

                            }

                            return Ok(output);
                        }
                    }
                    if (type == "Vouchers")
                    {
                        List<VocherUploadDto> output = new();

                        using (var package = new ExcelPackage(File.OpenReadStream()))
                        {
                            var ws = package.Workbook.Worksheets[0];

                            int row = 2;
                            int col = 1;

                            while (string.IsNullOrWhiteSpace(ws.Cells[row, col].Value?.ToString()) == false)
                            {
                                VocherUploadDto p = new VocherUploadDto();
                                p.VoucherNo = ws.Cells[row, 1].Value == null ? "" : ws.Cells[row, 1].Value.ToString().Trim();
                                p.VoucherDate = ws.Cells[row, 2].Value == null ? "" : ws.Cells[row, 2].Value.ToString().Trim();
                                p.VoucherInputDate = ws.Cells[row, 3].Value == null ? "" : ws.Cells[row, 3].Value.ToString().Trim();
                                p.VoucherType = ws.Cells[row, 4].Value == null ? "" : ws.Cells[row, 4].Value.ToString().Trim();
                                p.VoucherDesc = ws.Cells[row, 5].Value == null ? "" : ws.Cells[row, 5].Value.ToString().Trim();
                                p.Ledger = ws.Cells[row, 6].Value == null ? "" : ws.Cells[row, 6].Value.ToString().Trim();
                                p.Currency = ws.Cells[row, 7].Value == null ? "" : ws.Cells[row, 7].Value.ToString().Trim();
                                p.Debit = Convert.ToDecimal(ws.Cells[row, 8].Value == null ? 0 : ws.Cells[row, 8].Value.ToString().Trim());
                                p.Credit = Convert.ToDecimal(ws.Cells[row, 9].Value == null ? 0 : ws.Cells[row, 9].Value.ToString().Trim());
                                p.Note = ws.Cells[row, 10].Value == null ? "" : ws.Cells[row, 10].Value.ToString().Trim();
                                p.Reference = ws.Cells[row, 11].Value == null ? "" : ws.Cells[row, 11].Value.ToString().Trim();
                                output.Add(p);
                                row += 1;

                            }
                            return Ok(output);
                        }
                    }
                    if (type == "Product")
                    {
                        List<ProductUploadTo> output = new();

                        using (var package = new ExcelPackage(File.OpenReadStream()))
                        {


                            var ws = package.Workbook.Worksheets[0];

                            int row = 2;
                            int col = 1;

                            while (string.IsNullOrWhiteSpace(ws.Cells[row, col].Value?.ToString()) == false)
                            {
                                ProductUploadTo p = new ProductUploadTo();

                                //p.Id = Convert.ToInt32(ws.Cells[row, 1].Value == null ? 0 : ws.Cells[row, 1].Value.ToString().Trim());
                                p.Code = ws.Cells[row, 2].Value == null ? "" : ws.Cells[row, 2].Value.ToString().Trim();
                                p.Name = ws.Cells[row, 3].Value == null ? "" : ws.Cells[row, 3].Value.ToString().Trim();
                                p.LocalName = ws.Cells[row, 4].Value == null ? "" : ws.Cells[row, 4].Value.ToString().Trim();
                                p.Description = ws.Cells[row, 5].Value == null ? "" : ws.Cells[row, 5].Value.ToString().Trim();
                                p.Category = ws.Cells[row, 6].Value == null ? "" : ws.Cells[row, 6].Value.ToString().Trim();
                                p.Unit = ws.Cells[row, 7].Value == null ? "" : ws.Cells[row, 7].Value.ToString().Trim();
                                p.Price = Convert.ToDouble(ws.Cells[row, 8].Value == null ? 0 : ws.Cells[row, 8].Value.ToString().Trim());
                                p.CostPrice = Convert.ToDouble(ws.Cells[row, 9].Value == null ? 0 : ws.Cells[row, 9].Value.ToString().Trim());
                                p.WholeSalePrice = Convert.ToDouble(ws.Cells[row, 10].Value == null ? 0 : ws.Cells[row, 10].Value.ToString().Trim());
                                p.OldPrice = Convert.ToDouble(ws.Cells[row, 11].Value == null ? 0 : ws.Cells[row, 11].Value.ToString().Trim());
                                p.BrandName = ws.Cells[row, 12].Value == null ? "" : ws.Cells[row, 12].Value.ToString().Trim();
                                p.ColorName = ws.Cells[row, 13].Value == null ? "" : ws.Cells[row, 13].Value.ToString().Trim();
                                p.SizeName = ws.Cells[row, 14].Value == null ? "" : ws.Cells[row, 14].Value.ToString().Trim();
                                p.ModelName = ws.Cells[row, 15].Value == null ? "" : ws.Cells[row, 15].Value.ToString().Trim();
                                p.RunTimeLiveStock = Convert.ToDouble(ws.Cells[row, 17].Value == null ? 0 : ws.Cells[row, 17].Value.ToString().Trim());
                                p.Supplier = ws.Cells[row, 18].Value == null ? "" : ws.Cells[row, 18].Value.ToString().Trim();




                                output.Add(p);

                                row += 1;

                            }

                            return Ok(output);
                        }
                    }
                    return Ok();
                }
                catch (Exception ex)
                {
                    // Handle exceptions here
                    return Json(new { message = "Error reading Excel file: " + ex.Message });
                }
            }

            return Json(new { message = "No file received" });
        }


        [HttpPost]
        public async Task<IActionResult> ImportSaveData(string File, string type)
        {
            var comid = HttpContext.Session.GetInt32("ComId");
            var userId = HttpContext.Session.GetInt32("UserId");
            try
            {
                if (type == "COA")
                {
                    List<COAUploadDTO> output = new();

                    output = JsonConvert.DeserializeObject<List<COAUploadDTO>>(File);
                    if (await _accountHeadRepository.All().Where(x => x.ComId == comid).CountAsync() == 0)
                    {
                        SqlParameter[] sqlParameter = new SqlParameter[2];
                        sqlParameter[0] = new SqlParameter("@ComId", comid);
                        sqlParameter[1] = new SqlParameter("@TableName", "AccountHead");

                        Helper.ExecProc("[prcAutoInsert]", sqlParameter);
                    }

                    //List<AccountHeadModel> accountHeadModels = new();
                    //int accountcode = await _accountHeadRepository.All().Where(x => x.ComId == comid).CountAsync() == 0 ? 1 : _accountHeadRepository.All().Where(x => x.ComId == comid).AsNoTracking().Max(x => Convert.ToInt32(x.AccCode));
                    //foreach (var item in output)
                    //{
                    //    if (!await _accountHeadRepository.All().AnyAsync(x => x.ComId == comid && x.AccName.ToLower() == item.ParentHead.ToLower())
                    //        && !accountHeadModels.Any(x => x.AccName.ToLower() == item.ParentHead.ToLower()))
                    //    {
                    //        accountHeadModels.Add(new AccountHeadModel
                    //        {
                    //            AccCode = accountcode.ToString("100"),
                    //            AccName = item.ParentHead,
                    //            AccType = "G",
                    //            OpCredit = 0,
                    //            OpDebit = 0,
                    //            AccountCategoryId = _accountCategoryRepository.All().Where(y => y.AccountCategoryName == item.AccountType).AsNoTracking().FirstOrDefault().Id,
                    //            ComId = (int)comid,
                    //        });
                    //        //var ddd = TryValidateModel(new AccountHeadModel
                    //        //{
                    //        //    AccCode = accountcode.ToString("100"),
                    //        //    AccName = item.ParentHead,
                    //        //    AccType = item.LedgerType,
                    //        //    OpCredit = 0,
                    //        //    OpDebit = 0,
                    //        //    AccountCategoryId = _accountCategoryRepository.All().Where(y => y.AccountCategoryName == item.ParentHead).AsNoTracking().FirstOrDefault().Id,
                    //        //    ComId = (int)comid,
                    //        //});
                    //        accountcode++;
                    //    }
                    //}

                    //if (accountHeadModels.Count != 0)
                    //{
                    //    _accountHeadRepository.Insert(accountHeadModels);
                    //}

                    List<AccountHeadModel> accountHeadChild = new();
                    foreach (var item in output)
                    {
                        if (!await _accountHeadRepository.All().AnyAsync(x => x.ComId == comid && x.AccName.ToLower() == item.AccountHead.ToLower())
                            && !accountHeadChild.Any(x => x.AccName.ToLower() == item.AccountHead.ToLower()))
                        {
                            accountHeadChild.Add(new AccountHeadModel
                            {
                                AccCode = item.AccountCode,
                                AccName = item.AccountHead,
                                AccType = item.LedgerType,
                                OpCredit = (decimal)item.OpeningCr,
                                OpDebit = (decimal)item.OpeningDr,
                                AccountCategoryId = _accountCategoryRepository.All().Where(y => y.AccountCategoryName == item.AccountType).AsNoTracking().FirstOrDefault().Id,
                                ComId = (int)comid,
                                ParentId = _accountHeadRepository.All().Where(y => y.ComId == comid && y.AccName.ToLower() == item.ParentHead.ToLower()).AsNoTracking().FirstOrDefault().Id,

                            });
                        }
                    }

                    if (accountHeadChild.Count != 0)
                    {
                        _accountHeadRepository.Insert(accountHeadChild);
                    }
                }
                if (type == "Customers")
                {
                    List<CustomerUploadDTO> output = new();

                    output = JsonConvert.DeserializeObject<List<CustomerUploadDTO>>(File);

                    List<CustomerModel> Customer = new();
                    foreach (var item in output)
                    {
                        CustomerModel customer = new CustomerModel
                        {
                            SecoundaryAddress = item.SecoundaryAddress,
                            Email = item.Email,
                            Name = item.Name,
                            Notes = item.Notes,
                            Phone = item.Phone,
                            City = item.City,
                            PostalCode = item.PostalCode,
                            PrimaryAddress = item.PrimaryAddress,
                            CustType = item.CustType,
                            OpBalance = (double)item.OpBalance,
                            CreditLimit = (double)item.CreditLimit,
                            MonthlyTarget = (double)item.MonthlyTarget,
                            CustomerCommissionPer = item.CustomerCommissionPer,
                            SRCommissionPer = item.SRCommissionPer,
                            ContactPersonDesignation = item.ContactPersonDesignation,
                            ContactPersonName = item.ContactPersonName,
                            Website = item.Website,
                            ClBalance = item.ClBalance,
                            CompanyName = item.CompanyName,
                            Fax = item.Fax,
                            FirstName = item.FirstName,
                            LastName = item.LastName,
                            Other = item.Other,
                            PaymentTermsId = null,
                            Suffix = item.Suffix,
                            Title = item.Title,
                            BillingCity = item.BillingCity,
                            BillingCountry = item.BillingCountry,
                            BillingPostalCode = item.BillingPostalCode,
                            BillingProvince = item.BillingProvince,
                            BillingStreetAddress = item.BillingStreetAddress,
                            DeliveryOptions = item.DeliveryOptions,
                            DisplayName = item.DisplayName,
                            FileName = item.FileName,
                            Language = item.Language,
                            MiddelName = item.MiddelName,
                            MobileNumber = item.MobileNumber,
                            OpeningDate = item.OpeningDate,
                            ShippingCity = item.ShippingCity,
                            ShippingCountry = item.ShippingCountry,
                            ShippingPostalCode = item.ShippingPostalCode,
                            ShippingProvince = item.ShippingProvince,
                            ShippingStreetAddress = item.ShippingStreetAddress,
                            Taxes = item.Taxes.ToString(),
                            CustomerCode = item.CustomerCode,
                            OverDueBalance = (double)item.OverDueBalance,
                            ComId = comid ?? 0,
                            LuserId = userId ?? 0
                        };

                        Customer.Add(customer);


                    }

                    if (Customer.Count != 0)
                    {
                        _customerRepository.Insert(Customer);
                    }

                }
                if (type == "Suppliers")
                {
                    List<SupplierUploadDTO> output = new();

                    output = JsonConvert.DeserializeObject<List<SupplierUploadDTO>>(File);

                    List<SupplierModel> Suppliers = new();
                    foreach (var item in output)
                    {
                        SupplierModel supplier = new SupplierModel
                        {
                            SecoundaryAddress = item.SecondaryAddress,
                            Email = item.Email,
                            SupplierName = item.SupplierName,
                            Notes = item.Notes,
                            Phone = item.Phone,
                            City = item.City,
                            PostalCode = item.PostalCode,
                            PrimaryAddress = item.PrimaryAddress,
                            SupType = item.SupType,
                            OpBalance = (double)item.OpBalance,
                            ClBalance = (decimal)item.ClBalance,
                            AccountNo = item.AccountNo,
                            BusinessIdNo = item.BusinessIdNo,
                            CompanyName = item.CompanyName,
                            Fax = item.Fax,
                            StatusRemarks = item.StatusRemarks,
                            Suffix = item.Suffix,
                            Title = item.Title,
                            FirstName = item.FirstName,
                            MiddleName = item.MiddleName,
                            MobileNo = item.Mobileno,
                            Other = item.Other,
                            Province = item.Province,
                            StreetAddress = item.StreetAddress,
                            Country = item.Country,
                            FilePath = item.FilePath,
                            SupplierFilePath = item.FilePath,
                            Website = item.Website,
                            SupplierCode = item.SupplierCode,
                            TradeLicenseNo = item.TradeLicenseNo,
                            LuserId = userId ?? 0,

                            ComId = (int)comid

                        };

                        Suppliers.Add(supplier);


                    }

                    if (Suppliers.Count != 0)
                    {
                        _supplierRepository.Insert(Suppliers);
                    }

                }
                if (type == "Vouchers")
                {
                    List<VocherUploadDto> output = new();

                    output = JsonConvert.DeserializeObject<List<VocherUploadDto>>(File);

                    List<Acc_VoucherMainModel> vouchers = new();
                    foreach (var p in output)
                    {
                        var vtyid = _VoucherTypeRepository.All().Where(x => x.VoucherTypeName == p.VoucherType).SingleOrDefault();
                        if (!vouchers.Any(x => x.VoucherNo == p.VoucherNo))
                        {
                            Acc_VoucherMainModel vouchermain = new Acc_VoucherMainModel
                            {

                                VoucherNo = p.VoucherNo,
                                VoucherDate = Convert.ToDateTime(p.VoucherDate),
                                VoucherInputDate = Convert.ToDateTime(p.VoucherInputDate),
                                VoucherDesc = p.VoucherDesc,
                                Referance = p.Reference,
                                VoucherTypeId = vtyid == null ? 0 : vtyid.Id,
                                ComId = (int)comid,
                            };
                            var vsub = output.Where(x => x.VoucherNo == p.VoucherNo)
                                .Select(y => new Acc_VoucherSubModel
                                {
                                    AccId = _accountHeadRepository.All().Where(x => x.AccName == y.Ledger).FirstOrDefault().Id,
                                    CurrencyId = _countryRepository.All().Where(x => x.CurrencyShortName == y.Currency).FirstOrDefault().Id,
                                    ComId = (int)comid,
                                    TKDebit = (double)y.Debit,
                                    TKCredit = (double)y.Credit,

                                }).ToList();

                            vouchermain.VoucherSubs = vsub;
                            vouchers.Add(vouchermain);
                        }
                    }

                    if (vouchers.Count != 0)
                    {
                        _accVoucherRepository.Insert(vouchers);
                    }

                }
                if (type == "Product")
                {
                    List<ProductUploadTo> output = new();

                    output = JsonConvert.DeserializeObject<List<ProductUploadTo>>(File);

                    List<ProductModel> Products = new();
                    foreach (var item in output)
                    {
                        ProductModel product = new ProductModel
                        {
                            Code = item.Code,
                            Name = item.Name,
                            LocalName = item.LocalName,
                            Description = item.Description,
                            CategoryId = _categoryRepository.All().Where(x => x.Name == item.Category && x.ComId == comid).FirstOrDefault() == null ? null : _categoryRepository.All().Where(x => x.Name == item.Category && x.ComId == comid).FirstOrDefault().Id,
                            UnitId = _unitRepository.All().Where(x => x.UnitName == item.Unit && x.ComId == comid).FirstOrDefault() == null ? null : _unitRepository.All().Where(x => x.UnitName == item.Unit && x.ComId == comid).FirstOrDefault().Id,
                            Price = item.Price,
                            CostPrice = item.CostPrice,
                            WholeSalePrice = item.WholeSalePrice,
                            OldPrice = item.OldPrice,
                            BrandId = _brandRepository.All().Where(x => x.BrandName == item.BrandName && x.ComId == comid).FirstOrDefault() == null ? null : _brandRepository.All().Where(x => x.BrandName == item.BrandName && x.ComId == comid).FirstOrDefault().Id,
                            ColorId = _colorsRepository.All().Where(x => x.ColorName == item.ColorName && x.ComId == comid).FirstOrDefault() == null ? null : _colorsRepository.All().Where(x => x.ColorName == item.ColorName && x.ComId == comid).FirstOrDefault().Id,
                            SizeId = _sizesRepository.All().Where(x => x.SizeName == item.SizeName && x.ComId == comid).FirstOrDefault() == null ? null : _sizesRepository.All().Where(x => x.SizeName == item.SizeName && x.ComId == comid).FirstOrDefault().Id,
                            ModelName = item.ModelName,
                            RunTimeLiveStock = item.RunTimeLiveStock,
                            SupplierId = _supplierRepository.All().Where(x => x.SupplierName == item.Supplier && x.ComId == comid).FirstOrDefault() == null ? null : _supplierRepository.All().Where(x => x.SupplierName == item.Supplier && x.ComId == comid).FirstOrDefault().Id,
                            LuserId = userId ?? 0,

                            ComId = (int)comid

                        };

                        if (product.CategoryId != null && product.UnitId != null)
                        {
                            Products.Add(product);
                        }



                    }

                    if (Products.Count != 0)
                    {
                        productRepository.Insert(Products);
                    }

                }
                return Json(new { message = type + " Uploaded successfully." });
            }

            catch (Exception ex)
            {
                // Handle exceptions here
                return Json(new { message = "Error reading Excel file: " + ex.Message });
            }
        }

        [HttpGet]
        public async Task<IActionResult> DownloadSample(string type)
        {
            var folder = Path.Combine(_webHostEnvironment.ContentRootPath, "Content/ImportSample");

            var filePath = "";
            var filename = "";
            if (type == "COA")
            {
                filename = "AccountsSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            if (type == "Vouchers")
            {
                filename = "VoucherImportSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            if (type == "Customers")
            {
                filename = "CustomerImportSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            if (type == "Suppliers")
            {
                filename = "SupplierImportSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            if (type == "Product")
            {
                filename = "ProductSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            // Check if the file exists
            if (System.IO.File.Exists(filePath))
            {
                // Return the file
                return PhysicalFile(filePath, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", filename);
            }
            else
            {
                // Return a not found response or handle the case when the file is not found
                return NotFound();
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult DownloadSample2(string type)
        {
            //var folder = Path.Combine(_webHostEnvironment.ContentRootPath, "/Content/ImportSample");
            var folder = Path.Combine(_webHostEnvironment.WebRootPath, "Content", "ImportSample");


            var filePath = "";
            var filename = "";
            if (type == "COA")
            {
                filename = "AccountsSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            else if (type == "Vouchers")
            {
                filename = "VoucherImportSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            else if (type == "Customers")
            {
                //filename = "CustomerImportSample.xlsx";
                filename = "CustomerSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            else if (type == "Suppliers")
            {
                //filename = "SupplierImportSample.xlsx";
                filename = "SupplierSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }
            else if (type == "Product")
            {
                filename = "ProductSample.xlsx";
                filePath = Path.Combine(folder, filename);
            }

            // Check if the file exists
            if (!System.IO.File.Exists(filePath))
            {
                return NotFound(); // Return a 404 Not Found response
            }

            // Return the file as a FileStreamResult
            var stream = System.IO.File.OpenRead(filePath);
            return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", filename);
        }


        //[HttpGet]
        //public async Task<IActionResult> TabulatorSample()
        //{
        //    return View();
        //}
        //[HttpGet]
        //public async Task<IActionResult> ProductSearch(string term)
        //{
        //    var comid = HttpContext.Session.GetInt32("ComId");
        //    var product = productRepository.All();
        //    if (!string.IsNullOrEmpty(term))
        //    {
        //        product = product.Where(x => x.Name.Contains(term));

        //    }
        //    var r = await product.Take(10).Select(x => new { text = x.Name, id = x.Id }).ToListAsync();
        //    return Ok(r);
        //}

        [AllowAnonymous]
        [HttpGet]
        public IActionResult FiscalMonthActivation(int id = 0)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            if (id == 0)
            {
                ViewBag.ActionType = "Create";
            }
            else
            {
                ViewBag.ActionType = "Edit";
            }

            ViewBag.Id = id;

            return View();
        }

        [AllowAnonymous]
        public JsonResult GetFiscalYears()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var fiscalyear = _fiscalyearRepository.All().Where(x => x.ComId == ComId);

            var query = from e in fiscalyear.Where(x => x.IsDelete == false)
                        select new
                        {
                            Id = e.Id,
                            FYName = e.FYName,
                            FYNameBangla = e.FYNameBangla,
                            OpeningDate = e.OpeningDate,
                            ClosingDate = e.ClosingDate
                        };
            return Json(new { Success = 1, error = false, data = query.ToList() });
        }

        [AllowAnonymous]
        public JsonResult GetFiscalMonth(int Id)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var fiscalmonth = _accFiscalMonthRepository.All().Where(x => x.ComId == ComId && x.FYId == Id);

            var query = from e in fiscalmonth.Where(x => x.IsDelete == false)
                        select new
                        {
                            Id = e.Id,
                            e.MonthName,
                            e.MonthNameBangla,
                            e.OpeningdtFrom,
                            e.ClosingdtTo,
                            Status = e.isLocked == false ? "Open" : "Closed",
                            e.isLocked
                        };
            return Json(new { Success = 1, error = false, data = query.ToList() });
        }

        [AllowAnonymous]
        public JsonResult InactiveFiscalMonth(int Id)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            var allFiscalMonth = _accFiscalMonthRepository.All().Where(x => x.ComId == ComId).ToList();

            var model = _accFiscalMonthRepository.All().Where(x => x.Id == Id).FirstOrDefault();

            var index = allFiscalMonth.FindIndex(x => x.Id == Id);

            if (index == 0 || index == (allFiscalMonth.Count - 1))
            {
                model.isLocked = true;

                _accFiscalMonthRepository.Update(model, model.Id);
            }
            else
            {
                if ((allFiscalMonth[index - 1].isLocked == true) || (allFiscalMonth[index + 1].isLocked == true))
                {
                    model.isLocked = true;

                    _accFiscalMonthRepository.Update(model, model.Id);
                }
                else
                {
                    return Json(new { Success = 2, msg = "Close immediate previous or next Fiscal month." });
                }
            }



            return Json(new { Success = 1, error = false });
        }

        [AllowAnonymous]
        public JsonResult makeActiveFiscalMonth(int Id)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            var allFiscalMonth = _accFiscalMonthRepository.All().Where(x => x.ComId == ComId).ToList();

            var model = _accFiscalMonthRepository.All().Where(x => x.Id == Id).FirstOrDefault();

            var index = allFiscalMonth.FindIndex(x => x.Id == Id);

            if (index == 0 || index == (allFiscalMonth.Count - 1))
            {
                model.isLocked = false;

                _accFiscalMonthRepository.Update(model, model.Id);
            }
            else
            {
                if ((allFiscalMonth[index - 1].isLocked == false) || (allFiscalMonth[index + 1].isLocked == false))
                {
                    model.isLocked = false;

                    _accFiscalMonthRepository.Update(model, model.Id);
                }
                else
                {
                    return Json(new { Success = 2, msg = "Open immediate previous or next Fiscal month." });
                }
            }


            return Json(new { Success = 1, error = false });
        }

        [AllowAnonymous]
        public JsonResult GetSupplierCodes()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var customerCode = _supplierRepository.All().Where(p => p.ComId == ComId).ToList();

            foreach (var item in customerCode)
            {
                if (item.SupplierCode == null)
                {
                    item.SupplierCode = "Not found";
                }
            }

            SelectList masterLCList = new SelectList(customerCode, "Id", "SupplierCode");
            return Json(masterLCList);
        }

        [HttpPost]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public IActionResult AddUpdatesupplierQB(SupplierModel model)
        {

            try
            {

                var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

                //if (ModelState.IsValid)
                //{
                if (model.Id == 0)
                {
                    var ComId = HttpContext.Session.GetInt32("ComId");
                    string uniqueNumber = "S-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                    var doctypeId = _docTypeRepository.All().Where(x => x.DocType == "Supplier").Select(x => x.Id).FirstOrDefault();
                    if (doctypeId != null)
                    {
                        var docPrefix = docPrefixRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId).FirstOrDefault();
                        if (docPrefix != null)
                        {
                            uniqueNumber = GetSalesCode(doctypeId);
                        }
                    }

                    if (model.SupplierCode == null || model.SupplierCode.Length == 0)
                    {
                        model.SupplierCode = uniqueNumber;
                    }

                    _supplierRepository.Insert(model);



                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";

                    var LuserId = (HttpContext.Session.GetInt32("UserId"));
                    var queryname = "procSetAccountHeadForSupplierCustomer";

                    var viewquery = $"Exec {queryname} '{ComId}' '{model.LuserId}' '{"Supplier"}' '{model.Id}' '{model.SupplierCurrencyId}'";

                    Console.WriteLine(viewquery);
                    SqlParameter[] parameters = new SqlParameter[5];
                    parameters[0] = new SqlParameter("@ComId", ComId);
                    parameters[1] = new SqlParameter("@LuserId", model.LuserId);
                    parameters[2] = new SqlParameter("@Criteria", "Supplier");
                    parameters[3] = new SqlParameter("@SupplierId", model.Id);
                    parameters[4] = new SqlParameter("@CurrencyId", model.SupplierCurrencyId);

                    var datasetabc = new System.Data.DataSet();
                    datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                    return Json(new { success = "1", message = "Data Save Successfully", Id = model.Id });

                }
                else
                {
                    _supplierRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    return Json(new { success = "1", message = "Data Update Successfully", Id = model.Id });

                }

            }
            catch (Exception ex)
            {

                return Json(new { error = true, message = ex.Message });
            }
        }

        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]
        public JsonResult GetSupplierForEdit(int SupplierId)
        {
            try
            {

                var supplierData = _supplierRepository.All().Where(x => x.Id == SupplierId)
                    .Select(x => new
                    {
                        x.Id,
                        x.Title,
                        x.FirstName,
                        x.MiddleName,
                        x.LastName,
                        x.Suffix,
                        x.SupplierName,
                        x.CompanyName,
                        x.Email,
                        x.Phone,
                        x.MobileNo,
                        x.Fax,
                        x.Other,
                        x.Website,
                        x.StreetAddress,
                        x.City,
                        x.Province,
                        x.SupplierCode,
                        x.PostalCode,
                        x.Country,
                        x.Notes,
                        x.BusinessIdNo,
                        x.BillingRate,
                        x.FilePath,
                        TermsId = x.PaymentTermsId,
                        TermName = x.PaymentTermsInfo.TermName,
                        x.AccountNo,
                        ExpenseCategoryId = x.AccIdExpenseCategory,
                        ExpenseCategoryName = x.ExpenseCategoryAccount.AccName,
                        x.ClBalance,
                        x.OpBalance,
                        x.SupplierCurrencyId,
                        //x.AsOf,
                        AsOf = x.AsOf.HasValue ? x.AsOf.Value.ToString("dd-MMM-yyyy") : null
                    }).FirstOrDefault();

                //return Json(singleCustomer);
                return Json(new { success = "1", data = supplierData });


            }
            catch (Exception ex)
            {
                return Json(new { success = "0", message = ex });
                //throw ex;
            }
        }

        [HttpGet]
        //[AllowAnonymous]
        [OverridableAuthorize]

        public JsonResult DeleteSupplierQB(int SupplierId)
        {
            try
            {


                var model = _supplierRepository.Find(SupplierId);

                if (model != null)
                {
                    //if (_accVoucherSubRepository.All().Where(x => x.AccId == AccountHeadId).ToList().Count() > 1)
                    //{
                    //    return Json(new { success = "0", msg = "Already in use in voucher" });
                    //}

                    _supplierRepository.Delete(model);
                    //_accountHeadRepository.Isdeletetrue(model);

                    //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Data Deleted Successfully", model.Id.ToString(), "Delete", model.AccName);

                    return Json(new { success = "1", msg = "Deleted Successfully" });
                }
                return Json(new { success = "0", msg = "No items found to delete." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult VerifyFiscalMonth(DateTime fiscalDate)
        {
            var comid = HttpContext.Session.GetInt32("ComId");

            var firstDayOfMonth = new DateTime(fiscalDate.Year, fiscalDate.Month, 1);

            var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

            var data = _accFiscalMonthRepository.All().Where(x => x.ComId == comid && x.OpeningdtFrom <= fiscalDate && x.ClosingdtTo >= fiscalDate && x.isLocked == false).FirstOrDefault();

            if (data == null)
            {
                var defaultDate = _accFiscalMonthRepository.All().Where(x => x.ComId == comid & x.isLocked == false).FirstOrDefault();
                if (defaultDate == null)
                {
                    return Json(new { success = "1", data = defaultDate, IsLocked = true, message = "Data Loaded Successfully" });
                }
                return Json(new { success = "1", data = defaultDate.OpeningdtFrom, IsLocked = true, message = "Data Loaded Successfully" });
            }
            if (data.isLocked == true)
            {
                var defaultDate = _accFiscalMonthRepository.All().Where(x => x.ComId == comid & x.isLocked == false).FirstOrDefault().OpeningdtFrom;
                return Json(new { success = "1", data = defaultDate, IsLocked = true, message = "Data Loaded Successfully" });
            }

            return Json(new { success = "1", data = data, IsLocked = false, message = "Data Loaded Successfully" });
        }

        [AllowAnonymous]
        public JsonResult GetFiscalMonthDateWise(DateTime fiscalDate)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var firstDayOfMonth = new DateTime(fiscalDate.Year, fiscalDate.Month, 1);

            var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

            var data = _accFiscalMonthRepository.All().Where(x => x.ComId == ComId && x.OpeningdtFrom <= fiscalDate && x.ClosingdtTo >= fiscalDate && x.isLocked == false).ToList();


            return Json(data);
        }


    }
}