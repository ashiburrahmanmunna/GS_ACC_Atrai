using Atrai.Core.Common;
using Atrai.Data.Context.AppDataContext;
using Atrai.Data.Interfaces;
using Atrai.Model.Core.Entity;
using Atrai.Model.Core.ViewModel;
using Atrai.Services;
using DataTablesParser;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using Invoice.Core.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.IO;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using static Atrai.Controllers.AccountsController;
using static Atrai.Controllers.ValuesController;

namespace Atrai.Controllers
{

    #region referance


    //[Authorize]
    [OverridableAuthorize]
    public class AdminController : Controller
    {
        public TransactionLogRepository tranlog { get; }

        private readonly IReportStyleRepository _ReportStyleRepository;
        private readonly IDamageRepository _damageRepository;
        private readonly IAccVoucherCreatedTypeRepository _accVoucherCreatedTypeRepository;
        private readonly ICustomerRepository _customerRepository;
        private readonly ITradeTermRepository _tradeTermsRepository;
        private readonly ITimeZoneSettingsRepository _timeZoneSettingsRepository;
        private readonly IWebHostEnvironment _webHostEnvironment;
        private readonly IDocPrefixRepository docPrefixRepository;

        private readonly IAccFiscalYearRepository _accFiscalYearRepository;
        private readonly ITransactionApprovalStatusRepository transactionApprovalStatusRepository;


        private readonly IBudgetMainRepository _budgetMainRepository;
        private readonly IBudgetSubRepository _budgetSubRepository;
        private readonly IProductWarehouseRepository _productWarehouseRepository;

        private readonly ISalesTaxRepository _salestaxRepository;
        private readonly IMasterSalesTaxRepository _mastersalestaxRepository;
        private readonly IAgencyRepository _agencyRepository;
        private readonly IApprovalTypeRepository _approvalTypeRepository;
        private readonly IDocTypeRepository _docTypeRepository;
        private readonly IDocStatusRepository _docStatusRepository;
        private readonly IStatusRepository _statusRepository;
        private readonly IRecurringDetailsRepository recurringDetailsRepository;

        private readonly IDocApprovalSettingRepository _docApprovalSettingRepository;
        private readonly IReportsRepository reportsRepository;
        private readonly IReportGrouptRepository reportgroupRepository;
        private readonly IReportUserTrackingRepository reportusertrackingRepository;


        private readonly ISupplierRepository _supplierRepository;
        private readonly ISubscriptionActivationRepository _SubscriptionActivationRepository;
        private readonly ISubscriptionActivationCompanyRepository _SubscriptionActivationCompanyRepository;

        private readonly IWalletRepository _WalletRepository;
        private readonly ICreditBalanceRepository _CreditBalanceRepository;
        private readonly ICreditUsedRepository _creditUsedLogRepository;

        private readonly IInternetUserRepository _InternetUserRepository;
        private readonly IMemberRepository _memberRepository;
        private readonly IEmployeeRepository _employeeRepository;
        private readonly IEmployeeAttendanceRepository _employeeAttendanceRepository;

        private readonly ICountryRepository _countryRepository;
        private readonly IVGMRepository _vgmRepository;
        private readonly IShortLinkRepository _shortLinkRepository;
        private readonly IShortLinkHitRepository _shortLinkHitRepository;


        private readonly IProductRepository _productRepository;
        private readonly IProductColorRepository _productColorRepository;
        private readonly IProductSizeRepository _productSizeRepository;


        private readonly IUnitRepository _unitRepository;
        private readonly ITermRepository _termRepository;
        private readonly ITermMainRepository _termMainRepository;
        private readonly IVariableRepository _variableRepository;
        private readonly IReportStyleVariableRepository _reportStyleVariableRepository;
        private readonly ILinkShareRepository _linkShareRepository;


        private readonly IOfferRepository _offerRepository;
        private readonly IShippingChargeRepository _shippingChargeRepository;


        private readonly IVoterRepository _voterRepository;


        private readonly IBarcodePrintRepository _barcodePrintRepository;

        private readonly IStoreSettingRepository _storeSettingRepository;
        private readonly ICustomFormStyleRepository _customFormStyleRepository;
        private readonly ICompanyCurrencyRepository _companyCurrencyRepository;
        private readonly ISaleRepository _saleRepository;
        private readonly ISalesItemsRepository _salesItemRepository;
        private readonly ISalesReturnItemsRepository _salesReturnItemRepository;
        private readonly ISalesExchangeItemsRepository _salesExchangeItemRepository;



        private readonly ISalesPaymentRepository _salesPaymentRepository;
        private readonly ISalesReturnPaymentRepository _salesReturnPaymentRepository;

        private readonly IPurchasePaymentRepository _purchasePaymentRepository;

        private readonly IPurchaseRepository _purchaseRepository;
        private readonly IPurchaseItemsRepository _purchaseItemsRepository;

        private readonly IPurchaseReturnRepository _purchaseReturnRepository;
        private readonly IPurchaseReturnItemsRepository _purchaseReturnItemRepository;

        private readonly ISalesReturnRepository _salesReturnRepository;

        private readonly IPurchaseBatchItemsRepository _purchaseBatchItemsRepository;
        private readonly ISalesBatchItemsRepository _salesBatchItemsRepository;
        private readonly ISalesReturnBatchItemsRepository _salesReturnBatchItemsRepository;
        private readonly ISalesExchangeBatchItemsRepository _salesExchangeBatchItemsRepository;

        private readonly IPurchaseReturnBatchItemsRepository _purchaseReturnBatchItemsRepository;

        private readonly IPaymentTypeRepository _PaymentTypeRepository;
        private readonly IInternalTransferRepository _internaltransferRepository;
        private readonly IIssueRepository _issueRepository;
        private readonly ICostCalculatedRepository _costCalculatedRepository;
        private readonly IUserAccountRepository _userAccountRepository;
        private readonly IAccountHeadRepository _accountHeadRepository;
        private readonly IAccountHeadSystemRepository _accountHeadSystemRepository;

        private readonly ITransactionRepository _transactionRepository;
        private readonly ITransactionTagsRepository _transactionTagsRepository;
        private readonly ITransactionDetailsRepository _transactionDetailsRepository;


        private readonly IAccVoucherMainRepository _accVoucherMainRepository;
        private readonly IAccVoucherSubRepository _accVoucherSubRepository;

        private readonly IInvoiceBillRepository _invoiceBillRepository;

        private readonly IEmailSettingRepository _emailSettingRepository;


        private readonly ICategoryRepository _categoryRepository;
        private readonly IMediaService _mediaRepository;

        private readonly IBrandRepository _brandRepository;

        private readonly IDepartmentRepository _departmentRepository;
        private readonly ISectionRepository _sectionRepository;

        private readonly IDesignationRepository _designationRepository;
        private readonly ITermsMainRepository _termsMainRepository;
        private readonly ITermsSubRepository _termsSubRepository;



        private readonly IBookRepository _BookRepository;
        private readonly ISoftwarePackageRepository _SoftwarePackageRepository;
        private readonly IInternetPackageRepository _internetPackageRepository;
        private readonly IInternetUserStatusRepository _internetUserStatusRepository;

        private readonly IWarehouseRepository _warehouseRepository;
        private readonly IFromWarehousePermissionRepository _FromWarehousePermissionRepository;
        private readonly IToWarehousePermissionRepository _ToWarehousePermissionRepository;
        private readonly IAccountHeadPermissionRepository _AccountHeadPermissionRepository;

        private readonly IBusinessTypeRepository _businessTypeRepository;
        private readonly ITaxFormRepository _taxFormRepository;
        private readonly IAccountsReportRepository _accountsReportRepository;

        private readonly IFiscalYearTypeRepository _fiscalYearTypeRepository;

        private readonly IAccountCategoryRepository _accountCategoryRepository;
        private readonly ISubscriptionTypeRepository _subscriptionTypeRepository;
        private readonly IMenuRepository _menuRepository;
        private readonly IAndroidMenuRepository _androidMenuRepository;

        private readonly IUserRoleRepository _userRoleRepository;
        private readonly IMenuPermissionRepository _menuPermissionRepository;
        private readonly ICompanyPermissionRepository _companyPermissionRepository;

        private readonly IAndroidMenuPermissionRepository _androidMenuPermissionRepository;



        private readonly IMenuPermission_MasterRepository _userMenuPermissionMasterRepository;
        private readonly IMenuPermission_DetailsRepository _userMenuPermissionDetailsRepository;


        private readonly IAndroidMenuPermission_MasterRepository _userAndroidMenuPermissionMasterRepository;
        private readonly IAndroidMenuPermission_DetailsRepository _userAndroidMenuPermissionDetailsRepository;


        private readonly IUserLogingInfoRepository _userLogingInfoRepository;
        private readonly IUserTransactionLogRepository _userTransactionLogRepository;




        private readonly ICompanyRepository _companyRepository;

        private readonly IExpireDateExtendRepository _expireDateExtendRepository;
        private readonly IUserTerminateRepository _userTerminateRepository;


        private readonly IToDoRepository _toDoRepository;
        private readonly IProductLedgerRepository _productLedgerRepository;
        private readonly IWarrentyRepository _warrentyRepository;
        private readonly IDurationTimeRepository _durationTimeRepository;

        private readonly IColorsRepository _ColorRepository;
        private readonly ISizesRepository _SizeRepository;
        private readonly IApprovalStatusRepository approvalStatusRepository;

        private readonly IWarrantyItemsRepository _warrantyItemsRepository;
        private readonly IPackageActivationRepository _packageActivationRepository;
        private readonly INotificationRepository _notificationRepository;
        private readonly INotificationSeenRepository _notificationSeenRepository;
        private readonly ITaskToDoRepository _TaskToDoRepository;

        //private readonly ICreditUsedRepository _creditUsedRepository;
        private IEmailSender _emailsender { get; }
        private ISmsSender _smsSender { get; }
        private INIDVerify _nidVerify { get; }


        private readonly IConfiguration configuration;
        Dictionary<int, dynamic> postData = new Dictionary<int, dynamic>();
        private readonly InvoiceDbContext db;



        public AdminController(ICustomerRepository customerRepository, IAccountsReportRepository accountsReportRepository, ISupplierRepository supplierRepository, ISubscriptionActivationRepository subscriptionActivationRepository, IVGMRepository vgmRepository,
        IProductRepository productRepository, IUnitRepository unitRepository, IPaymentTypeRepository paymentTypeRepository, IStoreSettingRepository storeSettingRepository, ICompanyRepository companyRepository,
        ISaleRepository saleRepository, IPurchaseRepository purchaseRepository, IPurchaseBatchItemsRepository purchaseBatchItemsRepository, ISalesBatchItemsRepository salesBatchItemsRepository,
        IPurchaseReturnRepository purchaseReturnRepository, ISalesReturnRepository salesReturnRepository, ISalesReturnBatchItemsRepository salesReturnBatchItemsRepository, ICostCalculatedRepository costCalculatedRepository,
        IIssueRepository issueRepository, IInternalTransferRepository internalTransferRepository, InvoiceDbContext context, IUserAccountRepository userAccountRepository,
        IAccountHeadRepository accountHeadRepository, ITransactionRepository transactionRepository, IInvoiceBillRepository invoiceBillRepository, IReportGrouptRepository reportgroupRepository,
        ICategoryRepository categoryRepository, IBookRepository BookRepository, ISoftwarePackageRepository SoftwarePackageRepository, IWarrentyRepository warrentyRepository, IAgencyRepository agencyRepository,
        IPackageActivationRepository packageActivationRepository, IWarrantyItemsRepository warrantyItemsRepository, IWarehouseRepository warehouseRepository, IReportUserTrackingRepository reportusertrackingRepository,
        IInternetPackageRepository internetPackageRepository, IInternetUserStatusRepository internetUserStatusRepository, IInternetUserRepository InternetUserRepository,
        IMemberRepository memberRepository, IEmployeeRepository employeeRepository, IBusinessTypeRepository businessTypeRepository, ITaxFormRepository taxFormRepository, ISubscriptionTypeRepository subscriptionTypeRepository,
        IMenuRepository menuRepository, IUserRoleRepository userRoleRepository, IMenuPermissionRepository menuPermissionRepository, IProductWarehouseRepository productWarehouseRepository,
        IFromWarehousePermissionRepository FromWarehousePermissionRepository, IToWarehousePermissionRepository ToWarehousePermissionRepository, ITransactionApprovalStatusRepository transactionApprovalStatusRepository,
        IMenuPermission_MasterRepository userMenuPermissionMasterRepository, IMenuPermission_DetailsRepository userMenuPermissionDetailsRepository, IApprovalStatusRepository approvalStatusRepository,
        IUserLogingInfoRepository userLogingInfoRepository, IUserTransactionLogRepository userTrnsactionLogRepository, IMasterSalesTaxRepository mastersalestaxRepository,
        ICountryRepository countryRepository, IExpireDateExtendRepository expireDateExtendRepository, IUserTerminateRepository userTerminateRepository, IToDoRepository toDoRepository,
        IProductLedgerRepository productLedgerRepository, IConfiguration configuration, TransactionLogRepository tranlogRepository, IDocPrefixRepository docPrefixRepository,
        ISalesPaymentRepository salesPaymentRepository, IPurchaseReturnBatchItemsRepository purchaseReturnBatchItemsRepository, ISalesTaxRepository salestaxRepository,
        IPurchasePaymentRepository purchasePaymentRepository, IReportStyleRepository reportStyleRepository, IAccVoucherCreatedTypeRepository accVoucherCreatedTypeRepository, IReportsRepository reportsRepository,
        IDamageRepository damageRepository, INotificationRepository notificationRepository, INotificationSeenRepository notificationSeenRepository, ITaskToDoRepository taskToDoRepository, IRecurringDetailsRepository recurringDetailsRepository,
        IBarcodePrintRepository barcodePrintRepository, IColorsRepository colorRepository, ISizesRepository sizeRepository, IShortLinkRepository shortLinkRepository, IDurationTimeRepository durationTimeRepository,
        IAndroidMenuRepository androidMenuRepository, IAndroidMenuPermission_MasterRepository userAndroidMenuPermissionMasterRepository, IAndroidMenuPermission_DetailsRepository userAndroidMenuPermissionDetailsRepository,
        IShortLinkHitRepository shortLinkHitRepository, IAndroidMenuPermissionRepository androidMenuPermissionRepository, IDepartmentRepository departmentRepository, IDesignationRepository designationRepository, ITermsMainRepository termsMainRepository,
        ITermsSubRepository termsSubRepository, IEmailSettingRepository emailSettingRepository, IAccVoucherMainRepository accVoucherMainRepository, ICompanyPermissionRepository companyPermissionRepository, IAccountCategoryRepository accountCategoryRepository,
        IAccVoucherSubRepository accVoucherSubRepository, ITradeTermRepository tradeTermsRepository, ICreditBalanceRepository creditBalanceRepository, IEmailSender emailsender, ISmsSender smsSender, ICreditUsedRepository creditUsedRepository,
        IAccountHeadPermissionRepository accountHeadPermissionRepository, ICreditUsedRepository creditUsedLogRepository, ILinkShareRepository linkShareRepository, IAccountHeadSystemRepository accountHeadSystemRepository, IPurchaseItemsRepository purchaseItemsRepository,
        ISalesItemsRepository salesItemRepository, IVoterRepository voterRepository, INIDVerify nidVerify, ISalesReturnPaymentRepository salesReturnPaymentRepository, IFiscalYearTypeRepository fiscalYearTypeRepository,
        ISubscriptionActivationCompanyRepository subscriptionActivationCompanyRepository, ISectionRepository sectionRepository, IShippingChargeRepository shippingChargeRepository, IOfferRepository offerRepository, IBrandRepository brandRepository, ITransactionDetailsRepository transactionDetailsRepository,
        IWalletRepository walletRepository, IProductColorRepository productColorRepository, IProductSizeRepository productSizeRepository, IMediaService mediaRepository, IApprovalTypeRepository approvalTypeRepository, IDocTypeRepository docTypeRepository, IDocApprovalSettingRepository docApprovalSettingRepository,
        ISalesExchangeBatchItemsRepository salesExchangeBatchItemsRepository, ISalesReturnItemsRepository salesReturnItemRepository, ISalesExchangeItemsRepository salesExchangeItemRepository, IPurchaseReturnItemsRepository purchaseReturnItemRepository, IEmployeeAttendanceRepository employeeAttendanceRepository,
        ITimeZoneSettingsRepository timeZoneSettingsRepository, IWebHostEnvironment webHostEnvironment, IDocStatusRepository docStatusRepository, IStatusRepository statusRepository, ITransactionTagsRepository transactionTagsRepository, ITermRepository termRepository, ITermMainRepository termMainRepository, IReportStyleVariableRepository reportStyleVariableRepository, IVariableRepository variableRepository, ICustomFormStyleRepository customFormStyleRepository, ICompanyCurrencyRepository companyCurrencyRepository, IBudgetMainRepository budgetMainRepository, IBudgetSubRepository budgetSubRepository, IAccFiscalYearRepository accFiscalYearRepository)

        {
            _webHostEnvironment = webHostEnvironment;
            tranlog = tranlogRepository;
            _customerRepository = customerRepository;
            _supplierRepository = supplierRepository;
            _SubscriptionActivationRepository = subscriptionActivationRepository;

            _InternetUserRepository = InternetUserRepository;


            _vgmRepository = vgmRepository;
            _storeSettingRepository = storeSettingRepository;
            _customFormStyleRepository = customFormStyleRepository;

            _companyRepository = companyRepository;
            _saleRepository = saleRepository;
            _purchaseRepository = purchaseRepository;

            _purchaseReturnRepository = purchaseReturnRepository;
            _salesReturnRepository = salesReturnRepository;
            this.transactionApprovalStatusRepository = transactionApprovalStatusRepository;
            _accountsReportRepository = accountsReportRepository;

            _purchaseBatchItemsRepository = purchaseBatchItemsRepository;
            _salesBatchItemsRepository = salesBatchItemsRepository;
            _salesReturnBatchItemsRepository = salesReturnBatchItemsRepository;
            this.docPrefixRepository = docPrefixRepository;
            _productWarehouseRepository = productWarehouseRepository;
            this.approvalStatusRepository = approvalStatusRepository;
            _issueRepository = issueRepository;
            _internaltransferRepository = internalTransferRepository;
            this.recurringDetailsRepository = recurringDetailsRepository;

            _costCalculatedRepository = costCalculatedRepository;
            _salestaxRepository = salestaxRepository;
            _mastersalestaxRepository = mastersalestaxRepository;
            _agencyRepository = agencyRepository;
            _productRepository = productRepository;
            _PaymentTypeRepository = paymentTypeRepository;

            _unitRepository = unitRepository;
            _userAccountRepository = userAccountRepository;
            _accountHeadRepository = accountHeadRepository;
            _transactionRepository = transactionRepository;



            _invoiceBillRepository = invoiceBillRepository;

            _memberRepository = memberRepository;
            _employeeRepository = employeeRepository;

            _categoryRepository = categoryRepository;
            _BookRepository = BookRepository;

            _SoftwarePackageRepository = SoftwarePackageRepository;

            _warrentyRepository = warrentyRepository;
            _warrantyItemsRepository = warrantyItemsRepository;
            _packageActivationRepository = packageActivationRepository;


            _internetPackageRepository = internetPackageRepository;
            _internetUserStatusRepository = internetUserStatusRepository;


            _warehouseRepository = warehouseRepository;

            _menuRepository = menuRepository;


            _userRoleRepository = userRoleRepository;
            _menuPermissionRepository = menuPermissionRepository;
            _FromWarehousePermissionRepository = FromWarehousePermissionRepository;
            _ToWarehousePermissionRepository = ToWarehousePermissionRepository;



            _userMenuPermissionMasterRepository = userMenuPermissionMasterRepository;
            _userMenuPermissionDetailsRepository = userMenuPermissionDetailsRepository;


            _businessTypeRepository = businessTypeRepository;
            _taxFormRepository = taxFormRepository;
            _subscriptionTypeRepository = subscriptionTypeRepository;


            _userLogingInfoRepository = userLogingInfoRepository;
            _userTransactionLogRepository = userTrnsactionLogRepository;
            _countryRepository = countryRepository;


            _userTerminateRepository = userTerminateRepository;

            _toDoRepository = toDoRepository;
            _productLedgerRepository = productLedgerRepository;



            _expireDateExtendRepository = expireDateExtendRepository;
            this.reportsRepository = reportsRepository;
            this.reportgroupRepository = reportgroupRepository;
            this.reportusertrackingRepository = reportusertrackingRepository;
            this.configuration = configuration;

            db = context;
            _salesPaymentRepository = salesPaymentRepository;
            _purchaseReturnBatchItemsRepository = purchaseReturnBatchItemsRepository;
            _purchasePaymentRepository = purchasePaymentRepository;
            _ReportStyleRepository = reportStyleRepository;
            _accVoucherCreatedTypeRepository = accVoucherCreatedTypeRepository;
            _damageRepository = damageRepository;
            _notificationRepository = notificationRepository;
            _notificationSeenRepository = notificationSeenRepository;
            _TaskToDoRepository = taskToDoRepository;
            _barcodePrintRepository = barcodePrintRepository;
            _ColorRepository = colorRepository;
            _SizeRepository = sizeRepository;
            _shortLinkRepository = shortLinkRepository;
            _durationTimeRepository = durationTimeRepository;
            _androidMenuRepository = androidMenuRepository;
            _userAndroidMenuPermissionMasterRepository = userAndroidMenuPermissionMasterRepository;
            _userAndroidMenuPermissionDetailsRepository = userAndroidMenuPermissionDetailsRepository;
            _shortLinkHitRepository = shortLinkHitRepository;
            _androidMenuPermissionRepository = androidMenuPermissionRepository;
            _departmentRepository = departmentRepository;
            _designationRepository = designationRepository;
            _termsMainRepository = termsMainRepository;
            _termsSubRepository = termsSubRepository;
            _emailSettingRepository = emailSettingRepository;
            _accVoucherMainRepository = accVoucherMainRepository;
            _companyPermissionRepository = companyPermissionRepository;
            _accountCategoryRepository = accountCategoryRepository;
            _accVoucherSubRepository = accVoucherSubRepository;
            _tradeTermsRepository = tradeTermsRepository;
            _CreditBalanceRepository = creditBalanceRepository;
            _emailsender = emailsender;
            _smsSender = smsSender;
            _AccountHeadPermissionRepository = accountHeadPermissionRepository;
            _creditUsedLogRepository = creditUsedLogRepository;
            _linkShareRepository = linkShareRepository;
            _accountHeadSystemRepository = accountHeadSystemRepository;
            _purchaseItemsRepository = purchaseItemsRepository;
            _salesItemRepository = salesItemRepository;
            _voterRepository = voterRepository;
            _nidVerify = nidVerify;
            _salesReturnPaymentRepository = salesReturnPaymentRepository;
            _fiscalYearTypeRepository = fiscalYearTypeRepository;
            _SubscriptionActivationCompanyRepository = subscriptionActivationCompanyRepository;
            _sectionRepository = sectionRepository;
            _shippingChargeRepository = shippingChargeRepository;
            _offerRepository = offerRepository;
            _brandRepository = brandRepository;
            _transactionDetailsRepository = transactionDetailsRepository;
            _WalletRepository = walletRepository;
            _productColorRepository = productColorRepository;
            _productSizeRepository = productSizeRepository;
            _mediaRepository = mediaRepository;
            _approvalTypeRepository = approvalTypeRepository;
            _docTypeRepository = docTypeRepository;
            _docApprovalSettingRepository = docApprovalSettingRepository;
            _salesExchangeBatchItemsRepository = salesExchangeBatchItemsRepository;
            _salesReturnItemRepository = salesReturnItemRepository;
            _salesExchangeItemRepository = salesExchangeItemRepository;
            _purchaseReturnItemRepository = purchaseReturnItemRepository;
            _employeeAttendanceRepository = employeeAttendanceRepository;
            _timeZoneSettingsRepository = timeZoneSettingsRepository;
            _docStatusRepository = docStatusRepository;
            _statusRepository = statusRepository;
            _transactionTagsRepository = transactionTagsRepository;
            _termRepository = termRepository;
            _termMainRepository = termMainRepository;
            _reportStyleVariableRepository = reportStyleVariableRepository;
            _variableRepository = variableRepository;
            _companyCurrencyRepository = companyCurrencyRepository;
            _budgetMainRepository = budgetMainRepository;
            _budgetSubRepository = budgetSubRepository;
            _accFiscalYearRepository = accFiscalYearRepository;
        }

        public IActionResult SummaryView(string FromDate, string ToDate, int? CustomerId, int? UserId, int? WarehouseId, int? CategoryId, int? Refresh = 1)
        {

            //FromDate = "1-Feb-22";
            //ToDate = "28-Feb-22";
            var ComId = HttpContext.Session.GetInt32("ComId");
            UserId = HttpContext.Session.GetInt32("UserId");


            DateTime dtFrom = (DateTime.Now.Date);
            DateTime dtTo = (DateTime.Now.Date);
            var TimeZoneSettingsName = HttpContext.Session.GetString("TimeZoneSettingsName");

            if (FromDate == null || FromDate == "")
            {


                if (TimeZoneSettingsName.Length > 3)
                {
                    var localtime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));

                    dtFrom = localtime.Date;
                    ViewBag.FromDate = dtFrom.ToString("dd-MMM-yyyy");

                }

            }
            else
            {
                //dtFrom = TimeZoneInfo.ConvertTime(Convert.ToDateTime(FromDate), TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));
                dtFrom = Convert.ToDateTime(FromDate);

                ViewBag.FromDate = dtFrom.ToString("dd-MMM-yyyy");

            }
            if (ToDate == null || ToDate == "")
            {

                if (TimeZoneSettingsName.Length > 3)
                {
                    var localtime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));
                    dtTo = localtime.Date;
                    ViewBag.ToDate = dtTo.ToString("dd-MMM-yyyy");


                }
            }
            else
            {
                //dtTo = TimeZoneInfo.ConvertTime(Convert.ToDateTime(ToDate), TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));

                dtTo = Convert.ToDateTime(ToDate);
                ViewBag.ToDate = dtTo.ToString("dd-MMM-yyyy");
            }




            if (Refresh == 1)
            {
                var query = $"Exec prcProcessAccountData '{ComId}'";

                SqlParameter[] sqlParameter = new SqlParameter[1];
                sqlParameter[0] = new SqlParameter("@ComId", ComId);
                Helper.ExecProc("prcProcessAccountData", sqlParameter);
            }


            var AccountHeadListfahad = new List<AccountHeadModel>();



            SelectListItem abc = new SelectListItem() { Text = "Please Select", Value = "" };

            var warehosuepermission = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
            if (warehosuepermission.Count() == 0)
            {
                warehosuepermission = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                warehosuepermission.Add(abc);
            }
            //else
            //{
            //    //x.Append(abc);
            //}

            ViewBag.Warehouse = warehosuepermission.OrderBy(x => x.Value);

            var saleslistall = _saleRepository.All().Include(x => x.SalesPayments).Include(x => x.CustomerModel).Where(x => x.DocTypeList.DocType != "Quotation").Where(x => (x.NetAmount - x.SalesPayments.Sum(v => v.Amount)) > 0);


            #region noneed
            //var purchaselistall = _purchaseRepository.All().Include(x => x.PurchasePayments).Include(x => x.SupplierModel).Where(x => x.NetAmount - x.PurchasePayments.Sum(v => v.Amount) > 0).ToList();
            //var salesitemsqty = _salesItemRepository.All().Include(x => x.SalesModel).Where(x => x.SalesModel.SalesDate >= dtFrom && x.SalesModel.SalesDate <= dtTo).Where(x => x.SalesModel.DocTypeList.DocType != "Quotation");////.Include(x=>x.Items).ThenInclude(x=>x.Product).ThenInclude(x=>x.Category)
            //var salesreturnitemsqty = _salesReturnItemRepository.All().Include(x => x.SalesReturnModel).Where(x => x.SalesReturnModel.SalesReturnDate >= dtFrom && x.SalesReturnModel.SalesReturnDate <= dtTo);////.Include(x=>x.Items).ThenInclude(x=>x.Product).ThenInclude(x=>x.Category)
            //var salesexchangeitemsqty = _salesExchangeItemRepository.All().Include(x => x.SalesReturnModel).Where(x => x.SalesReturnModel.SalesReturnDate >= dtFrom && x.SalesReturnModel.SalesReturnDate <= dtTo);////.Include(x=>x.Items).ThenInclude(x=>x.Product).ThenInclude(x=>x.Category)
            //var purchaseitemsqty = _purchaseItemsRepository.All().Include(x => x.PurchaseModel).Where(x => x.PurchaseModel.PurchaseDate >= dtFrom && x.PurchaseModel.PurchaseDate <= dtTo).Where(x => x.PurchaseModel.DocTypeList.DocType != "Purchase Order");////.Include(x=>x.Items).ThenInclude(x=>x.Product).ThenInclude(x=>x.Category)
            //var purchasereturnitemsqty = _purchaseReturnItemRepository.All().Include(x => x.PurchaseReturnModel).Where(x => x.PurchaseReturnModel.PurchaseReturnDate >= dtFrom && x.PurchaseReturnModel.PurchaseReturnDate <= dtTo);////.Include(x=>x.Items).ThenInclude(x=>x.Product).ThenInclude(x=>x.Category)
            //var purchaselist = _purchaseRepository.All().Where(x => x.PurchaseDate >= dtFrom && x.PurchaseDate <= dtTo);
            #endregion


            var receivedlist = _transactionRepository.All().Include(x => x.DebitAccount).Include(x => x.CreditAccount).Include(x => x.Customer).Where(x => x.InputDate.Date >= dtFrom && x.InputDate.Date <= dtTo).Where(x => x.TransactionType.Contains("Received") && x.isSystem == false);
            var receivedlistmore = _salesPaymentRepository.All().Include(x => x.vChartofAccounts).Include(x => x.SalesMain).Where(x => x.SalesMain.SalesDate.Date >= dtFrom && x.SalesMain.SalesDate.Date <= dtTo);
            var receivedlistreturn = _salesReturnPaymentRepository.All().Include(x => x.vChartofAccounts).Include(x => x.SalesReturnMain).Where(x => x.SalesReturnMain.SalesReturnDate.Date >= dtFrom && x.SalesReturnMain.SalesReturnDate.Date <= dtTo);
            var paidlist = _transactionRepository.All().Include(x => x.CreditAccount).Where(x => x.InputDate.Date >= dtFrom && x.InputDate.Date <= dtTo).Where(x => x.TransactionType.Contains("Paid") || x.TransactionType.Contains("Increase"));
            //var salespaymentlist = _salesPaymentRepository.All().Include(x => x.SalesMain).ThenInclude(x => x.CustomerModel);//.Where(x => x.SalesMain.SalesDate >= dtFrom && x.SalesMain.SalesDate <= dtTo && x.SalesMain.IsDelete == false);
            //var purchasepaymentlist = 
            var purchasepaymentlist = _purchasePaymentRepository.All(); purchasepaymentlist.Include(x => x.PurchaseMain).ThenInclude(x => x.SupplierModel).Where(x => x.IsDelete == false);//.Where(x => x.PurchaseMain.PurchaseDate >= dtFrom && x.PurchaseMain.PurchaseDate <= dtTo && x.PurchaseMain.IsDelete == false);
            var accountheadlist = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.ComId == ComId);
            var accountheadlistpermission = _AccountHeadPermissionRepository.All()
                .Include(x => x.AccountHeadList).ThenInclude(x => x.AccountCategorys)
                .Include(x => x.AccountHeadList).ThenInclude(x => x.vAccountGroupHead)
                .Where(x => x.LuserIdAllow == UserId).ToList();




            if (WarehouseId != null)
            {
                ViewBag.WarehouseId = WarehouseId;

                saleslistall = saleslistall.Where(x => x.WarehouseIdMain == WarehouseId);
                receivedlist = receivedlist.Where(x => x.Sales.WarehouseIdMain == WarehouseId);
                receivedlistmore = receivedlistmore.Where(x => x.SalesMain.WarehouseIdMain == WarehouseId);
                receivedlistreturn = receivedlistreturn.Where(x => x.SalesReturnMain.WarehouseIdMain == WarehouseId);
                paidlist = paidlist.Where(x => x.Sales.WarehouseIdMain == WarehouseId);
                purchasepaymentlist = purchasepaymentlist.Where(x => x.PurchaseMain.WarehouseIdMain == WarehouseId);

            }


            //var saleslist = _saleRepository.All().Include(x => x.Items).Where(x => x.SalesDate >= dtFrom && x.SalesDate <= dtTo).Where(x => x.DocTypeList.DocType != "Quotation");////.Include(x=>x.Items).ThenInclude(x=>x.Product).ThenInclude(x=>x.Category)
            //var daywisesales = saleslist
            //.GroupBy(x => new { x.ComId, x.SalesDate })
            //.Select(g => new DayWiseSales { SalesType = "Sales", SalesDate = g.Key.SalesDate.ToString("dd-MMM-yy"), SalesCount = g.Count(), SalesQty = 1, TotalSalesAmount = g.Sum(x => x.NetAmount) }).ToList();
            //var daywisesalesReturn = salesreturnlist
            // .GroupBy(x => new { x.ComId, x.SalesReturnDate })
            // .Select(g => new DayWiseSales { SalesType = "Return / Exchange", SalesDate = g.Key.SalesReturnDate.ToString("dd-MMM-yy"), SalesCount = g.Count(), SalesQty = 1, TotalSalesAmount = g.Sum(x => x.NetAmount) }).ToList();
            //daywisesales.AddRange(daywisesalesReturn);


            SqlParameter[] sqlParameter1 = new SqlParameter[5];
            sqlParameter1[0] = new SqlParameter("@Criteria", "DateWiseSalesSummary");
            sqlParameter1[1] = new SqlParameter("@FromDate", dtFrom);
            sqlParameter1[2] = new SqlParameter("@ToDate", dtTo);
            sqlParameter1[3] = new SqlParameter("@ComId", ComId);
            sqlParameter1[4] = new SqlParameter("@WarehouseId", WarehouseId);


            List<DayWiseSales> daywisesales = Helper.ExecProcMapTList<DayWiseSales>("prcGetDashboard", sqlParameter1).ToList();




            SqlParameter[] sqlParameter2 = new SqlParameter[5];
            sqlParameter2[0] = new SqlParameter("@Criteria", "DateWisePurchaseSummary");
            sqlParameter2[1] = new SqlParameter("@FromDate", dtFrom);
            sqlParameter2[2] = new SqlParameter("@ToDate", dtTo);
            sqlParameter2[3] = new SqlParameter("@ComId", ComId);
            sqlParameter2[4] = new SqlParameter("@WarehouseId", WarehouseId);


            List<DayWisePurchase> daywisepurchase = Helper.ExecProcMapTList<DayWisePurchase>("prcGetDashboard", sqlParameter2).ToList();


            #region noneed


            //var daywisesales =
            //    (from p in salesitemsqty.ToList()
            //     group p by new
            //     {
            //         SalesDate = p.SalesModel.SalesDate
            //     }
            //    into pgroup
            //     //let SalesQty = pgroup.Sum(x=>x.Quantity)
            //     //orderby SalesQty
            //     select new DayWiseSales
            //     {
            //         SalesQty = pgroup.Sum(x => x.Quantity),
            //         SalesDate = pgroup.Key.SalesDate.ToString("dd-MMM-yy"),
            //         SalesCount = pgroup.Count(),
            //         SalesType = "Sales"
            //     }).ToList();


            //var daywisesales = from b in saleslist
            //                   group b by new { b.SalesDate, SalesQty = b.Items.Sum(x=>x.Quantity) } into g
            //                 //let SalesCount = g.Count()
            //                 let SalesQty = g.Key.SalesQty
            //                   //let NetAmount = g.Sum(v => v.NetAmount)
            //                   select new DayWiseSales
            //                 {
            //                     SalesType = "Sales",
            //                     SalesDate = g.Key.SalesDate.ToString("dd-MMM-yy"),
            //                     SalesCount = g.Count(),
            //                     SalesQty = g.Key.SalesQty,
            //                     TotalSalesAmount = g.Sum(x=>x.NetAmount)
            //                 };




            //var summary2 = (from od in saleslist
            //                let SalesQtyabc = od.Items.Sum(x=>x.Quantity)
            //                //join sales in saleslist on od.SalesId equals sales.Id
            //                //join product in Products on od.ProductID equals product.ProductID
            //                group od by new { od.SalesDate, od.ComId } into results
            //                //orderby results.Key.EmployeeID, results.Key.CategoryID
            //                select new DayWiseSales
            //                {
            //                    SalesDate = results.Key.SalesDate.ToString("dd-MMM-yy"),
            //                    TotalSalesAmount = results.Sum(x => x.NetAmount),
            //                    SalesQty = SalesQtyabc,
            //                    SalesType = "Sales"

            //                }).ToList();


            //var summary2 = (from od in salesitemsqty
            //                join sales in saleslist on od.SalesId equals sales.Id
            //                //join product in Products on od.ProductID equals product.ProductID
            //                group od by new { sales.SalesDate, sales.ComId } into results
            //                //orderby results.Key.EmployeeID, results.Key.CategoryID
            //                select new DayWiseSales
            //                {
            //                    SalesDate = results.Key.SalesDate.ToString("dd-MMM-yy"),
            //                    TotalSalesAmount = results.Sum(x=>x.SalesModel.NetAmount),
            //                    SalesQty = results.Sum(a => a.Quantity),
            //                    SalesType = "Sales"

            //                }).ToList();





            //var daywisesalesReturn = salesreturnlist
            //.GroupBy(x => new { x.ComId, x.SalesReturnDate })
            //.Select(g => new DayWiseSalesReturn { SalesReturnDate = g.Key.SalesReturnDate.ToString("dd-MMM-yy"), SalesReturnCount = g.Count(), TotalSalesReturnAmount = g.Sum(x => x.NetAmount) }).ToList();


            //var daywisesales = (from si in saleslist
            //                    group si by new { si.ComId, si.SalesDate } into sumqty
            //                    select new DayWiseSales
            //                    {
            //                        //SalesId = sumqty.Key.SalesId,
            //                        SalesType = "Sales",
            //                        SalesDate = sumqty.Key.SalesDate.ToString("dd-MMM-yy"),
            //                        SalesCount = sumqty.Count(),
            //                        //SalesQty = sumqty.Sum(x => x.Items.Sum(x=>x.Quantity)),
            //                        TotalSalesAmount = sumqty.Sum(x => x.NetAmount),
            //                        //SalesId = sumqty.Key.SalesId,
            //                        //Quantity = sumqty.Sum(x => x.Quantity)
            //                    }).ToList();


            //var daywisesales = (from si in salesitemsqty
            //                      group si by new { si.ComId, si.SalesModel.SalesDate } into sumqty
            //                      select new DayWiseSales
            //                      {
            //                          //SalesId = sumqty.Key.SalesId,
            //                          SalesType = "Sales",
            //                          SalesDate = sumqty.Key.SalesDate.ToString("dd-MMM-yy"),
            //                          SalesCount = sumqty.Count(),
            //                          SalesQty = sumqty.Sum(x => x.Quantity),
            //                          TotalSalesAmount = sumqty.Sum(x => x.SalesModel.NetAmount),
            //                          //SalesId = sumqty.Key.SalesId,
            //                          //Quantity = sumqty.Sum(x => x.Quantity)
            //                      }).ToList();

            //on s.Id equals sd.SalesId
            //group s by new { s.Id, s.SalesDate } into FinalResultSet
            //select new DayWiseSales
            //{
            //    SalesType = "Sales",
            //    SalesDate = FinalResultSet.Key.SalesDate.ToString("dd-MMM-yy"),
            //    SalesCount = FinalResultSet.Count(),
            //    SalesQty = sd.
            //}).ToList();


            // var daywisesalesReturn = salesreturnitemsqty
            // .GroupBy(x => new { x.ComId, x.SalesReturnModel.SalesReturnDate })
            // .Select(g => new DayWiseSales { SalesType = "Return", SalesDate = g.Key.SalesReturnDate.ToString("dd-MMM-yy"), SalesCount = g.Count(), SalesQty = -g.Sum(x => x.Quantity), TotalSalesAmount = -g.Sum(x => x.SalesReturnModel.NetAmount) }).ToList();

            // var daywisesalesExchange = salesexchangeitemsqty
            //.GroupBy(x => new { x.ComId, x.SalesReturnModel.SalesReturnDate })
            //.Select(g => new DayWiseSales { SalesType = "Exchange", SalesDate = g.Key.SalesReturnDate.ToString("dd-MMM-yy"), SalesCount = g.Count(), SalesQty = g.Sum(x => x.Quantity), TotalSalesAmount = g.Sum(x => x.SalesReturnModel.NetAmount) }).ToList();


            //daywisesales.AddRange(daywisesalesExchange);
            //daywisesales.AddRange(daywisesalesReturn);


            //var daywisepurchase = purchaseitemsqty
            // .GroupBy(x => new { x.ComId, x.PurchaseModel.PurchaseDate })
            //.Select(g => new DayWisePurchase { PurchaseType = "Purchase", PurchaseDate = g.Key.PurchaseDate.ToString("dd-MMM-yy"), PurchaseCount = g.Count(), PurchaseQty = g.Sum(x => x.Quantity), TotalPurchaseAmount = g.Sum(x => x.PurchaseModel.NetAmount) }).ToList();

            //var daywisepurchaseReturn = purchasereturnitemsqty
            //.GroupBy(x => new { x.ComId, x.PurchaseReturnModel.PurchaseReturnDate })
            //.Select(g => new DayWisePurchase { PurchaseType = "Return", PurchaseDate  = g.Key.PurchaseReturnDate.ToString("dd-MMM-yy"), PurchaseCount = g.Count(), PurchaseQty = g.Sum(x => x.Quantity), TotalPurchaseAmount = g.Sum(x => x.PurchaseReturnModel.NetAmount) }).ToList();

            //daywisepurchase.AddRange(daywisepurchaseReturn);

            ////var daywisepurchase = purchaselist
            ////.GroupBy(x => new { x.ComId, x.PurchaseDate })
            ////.Select(g => new DayWisePurchase { PurchaseDate = g.Key.PurchaseDate.ToString("dd-MMM-yy"), PurchaseCount = g.Count(), TotalPurchaseAmount = g.Sum(x => x.NetAmount) }).ToList();

            #endregion


            var receivedmoresummary = receivedlist
            .GroupBy(x => new { AccName = x.DebitAccount.AccName != null ? "Due Rcvd : " + x.DebitAccount.AccName + " - " + x.Customer.Name : "Due Rcvd : " + x.CreditAccount.AccName + " - " + x.Customer.Name })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName, TransactionAmount = g.Sum(x => x.TransactionAmount) }).ToList();



            var receivedsummary = receivedlistmore
            .GroupBy(x => new { AccName = x.vChartofAccounts.AccName != null ? x.vChartofAccounts.AccName : "=N/A=" })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName, TransactionAmount = g.Sum(x => x.Amount) }).ToList();
            receivedsummary.AddRange(receivedmoresummary);



            var receivedReturnsummary = receivedlistreturn
            .GroupBy(x => new { AccName = x.vChartofAccounts.AccName != null ? "Exc. / Rtn: " + x.vChartofAccounts.AccName : "=N/A=" })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName, TransactionAmount = g.Sum(x => x.Amount) }).ToList();
            receivedsummary.AddRange(receivedReturnsummary);


            var paidsummary = paidlist
            .GroupBy(x => new { x.CreditAccount.AccName })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName != null ? g.Key.AccName : "=N/A=", TransactionAmount = g.Sum(x => x.TransactionAmount) }).ToList();



            var customersdue = _customerRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);
            var querydue = from e in customersdue//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                           select new CustomerResultList
                           {
                               Id = e.Id,
                               Name = e.Name,
                               Email = e.Email,
                               PrimaryAddress = e.PrimaryAddress,
                               SecoundaryAddress = e.SecoundaryAddress,
                               Notes = e.Notes,
                               Phone = e.Phone,
                               CustType = e.CustType,
                               ParentCustomer = e.Customers.Name,

                               TotalSalesValue = (decimal)e.OpBalance + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount),
                               TotalSalesReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount),
                               TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
                               TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),

                               TotalDue =
                               (decimal)e.OpBalance
                               + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                               + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                               - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                               + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount)
                               - e.AccountsDailyTransaction.Where(x => x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount),

                               LastSalesDate = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SalesDate.ToString("dd-MMM-yy") ?? "",
                               LastInvoiceNo = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
                               LastSoldProduct = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",

                           };

            var finalduesummary = querydue.Where(x => x.TotalDue > 0).ToList();

            List<CustomerDueSummary> duecustomer = new List<CustomerDueSummary>();


            foreach (var item in finalduesummary)
            {
                CustomerDueSummary x = new CustomerDueSummary();
                x.CustomerName = item.Name;
                x.TotalSales = item.TotalSalesValue - item.TotalSalesReturnValue;
                x.TotalReceived = item.TotalCollection - item.TotalAmountBack;
                x.TotalDue = item.TotalDue;

                duecustomer.Add(x);
            };

            List<CustomerDueSummary> cashduecustomer = saleslistall.ToList()
            .GroupBy(x => new { walkincustomer = x.CustomerName, CustomerName = x.CustomerModel.Name })
            .Select(g => new CustomerDueSummary { CustomerName = g.Key.CustomerName.ToLower().Contains("customer") ? g.Key.walkincustomer : g.Key.CustomerName, OpBalance = g.Sum(x => x.CustomerModel.OpBalance), TotalSales = g.Sum(x => x.NetAmount), TotalReceived = g.Sum(x => x.SalesPayments.Sum(x => x.Amount)), TotalDue = g.Sum(x => x.NetAmount) - g.Sum(x => x.SalesPayments.Sum(x => x.Amount)) })
            .Where(x => (Convert.ToDecimal(x.OpBalance) + x.TotalSales - x.TotalReceived > 0))
            .ToList().OrderByDescending(x => Convert.ToDecimal(x.OpBalance) + x.TotalSales - x.TotalReceived)
            .ToList();


            duecustomer.AddRange(cashduecustomer);



            #region noneed

            // List<CustomerDueSummary> duecustomermore = saleslist.Include(x => x.SalesPayments).Include(x => x.CustomerModel).Where(x => x.SalesPayments.Count() == 0)
            //.GroupBy(x => new { walkincustomer = x.CustomerName, CustomerName = x.CustomerModel.Name })
            //.Select(g => new CustomerDueSummary { CustomerName = g.Key.CustomerName.ToLower().Contains("customer") ? g.Key.walkincustomer : g.Key.CustomerName, TotalSales = g.Sum(x => x.NetAmount), TotalReceived = decimal.Parse("0"), TotalDue = g.Sum(x => x.NetAmount) })
            //.Where(x => (x.TotalSales - x.TotalReceived > 0))
            //.ToList().OrderByDescending(x => x.TotalSales - x.TotalReceived)
            //.ToList();


            // duecustomer.AddRange(duecustomermore);


            //foreach (var item in duecustomermore)
            //{
            //    duecustomer.Add(item);
            //}






            // //List<SupplierDueSummary> duesupplier = purchasepaymentlist
            // //.GroupBy(x => new { walkinsupplier = x.PurchaseMain.SupplierName, SupplierName = x.PurchaseMain.SupplierModel.SupplierName, NetAmount = x.PurchaseMain.NetAmount })
            // //.Select(g => new SupplierDueSummary { SupplierName = g.Key.SupplierName.ToLower().Contains("supplier") ? g.Key.walkinsupplier : g.Key.SupplierName, TotalPurchase = g.Key.NetAmount, TotalPaid = g.Sum(x => x.Amount) , TotalDue = g.Key.NetAmount - g.Sum(x => x.Amount) })
            // //.Where(x => (x.TotalPurchase - x.TotalPaid > 0))
            // //.ToList().OrderByDescending(x => x.TotalPurchase - x.TotalPaid)
            // //.ToList();
            // List<SupplierDueSummary> duesupplier = purchaselistall.ToList()
            // .GroupBy(x => new { walkinsupplier = x.SupplierName, SupplierName = x.SupplierModel.SupplierName })
            // .Select(g => new SupplierDueSummary { SupplierName = g.Key.SupplierName.ToLower().Contains("supplier") ? g.Key.walkinsupplier : g.Key.SupplierName, TotalPurchase = g.Sum(x => x.NetAmount), TotalPaid = g.Sum(x => x.PurchasePayments.Sum(x => x.Amount)), TotalDue = g.Sum(x => x.NetAmount) - g.Sum(x => x.PurchasePayments.Sum(x => x.Amount)) })
            // .Where(x => (x.TotalPurchase - x.TotalPaid > 0))
            // .ToList().OrderByDescending(x => x.TotalPurchase - x.TotalPaid)
            // .ToList();


            // List<SupplierDueSummary> duesupplierrmore = purchaselist.Include(x => x.PurchasePayments).Include(x => x.SupplierModel).Where(x => x.PurchasePayments.Count() == 0)
            //.GroupBy(x => new { walkinsupplier = x.SupplierName, SupplierName = x.SupplierModel.SupplierName })
            //.Select(g => new SupplierDueSummary { SupplierName = g.Key.SupplierName.ToLower().Contains("supplier") ? g.Key.walkinsupplier : g.Key.SupplierName, TotalPurchase = g.Sum(x => x.NetAmount), TotalPaid = decimal.Parse("0")  , TotalDue = g.Sum(x => x.NetAmount) })
            //.Where(x => (x.TotalPurchase - x.TotalPaid > 0))
            //.ToList().OrderByDescending(x => x.TotalPurchase - x.TotalPaid)
            //.ToList();

            // foreach (var item in duesupplierrmore)
            // {
            //     duesupplier.Add(item);
            // }

            //var duesupplier = _supplierRepository.All().Include(x => x.AccountsDailyTransaction).Select(p => new SupplierDueSummary
            //{ 
            //  SupplierName = p.SupplierName,
            //  TotalPurchase = ((p.AccountsDailyTransaction.Where(x=>x.TransactionType.Contains("System Purchase")).Sum(x=>x.TransactionAmount)) - (p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("System Purchase Return")).Sum(x => x.TransactionAmount))),
            //  TotalPaid = p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount) - p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
            //  TotalDue = (p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("System Purchase")).Sum(x => x.TransactionAmount) + p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)) - (p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount) + p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("System Purchase Return")).Sum(x => x.TransactionAmount))
            //}).ToList().Where(x=>x.TotalDue != 0);

            #endregion

            var duesupplier = (from p in _supplierRepository.All().Include(x => x.AccountsDailyTransaction)
                               let TotalPurchase = p.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase" && x.IsDelete == false).Sum(x => (decimal)x.TransactionAmount)
                               let TotalPaid = p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && x.IsDelete == false).Sum(x => (decimal)x.TransactionAmount) - p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received") && x.IsDelete == false).Sum(x => (decimal)x.TransactionAmount)
                               let TotalReturn = p.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("System Purchase Return") && x.IsDelete == false).Sum(x => (decimal)x.TransactionAmount)
                               select new SupplierDueSummary
                               {
                                   SupplierName = p.SupplierName,
                                   TotalPurchase = TotalPurchase - TotalReturn,
                                   TotalPaid = TotalPaid,
                                   TotalDue = TotalPurchase - TotalReturn - TotalPaid
                               }).ToList().Where(x => x.TotalDue != 0);



            #region noneed

            // var duesupplierabc = from i in _transactionRepository.All().Where(x => x.Supplier != null).ToList()
            //           join j in _supplierRepository.All() on i.SupplierId equals j.Id
            //           //var abc = select new { j.SupplierName , i.TransactionType , i.TransactionAmount } 
            //           //group i by 1 into g
            //           group i by 1 into g
            //           select new SupplierDueSummary
            //           {
            //               SupplierName = g.Select(x=>x.Supplier.SupplierName).ToString(),
            //               TotalPurchase = g.Select(x => x.TransactionType == "System Purchase" ? x.TransactionAmount : 0).Sum() - g.Select(x => x.TransactionType == "System Purchase Return" ? x.TransactionAmount : 0).Sum(),
            //               TotalPaid = g.Select(x => x.TransactionType == "System Purchase" ? x.TransactionAmount : 0).Sum() - g.Select(x => x.TransactionType == "System Purchase" ? x.TransactionAmount : 0).Sum()
            //           };

            //List<SupplierDueSummary> duesupplier = duesupplierabc.ToList();

            //           var SupplierLedgerDue = _transactionRepository.All().Where(x => x.TransactionType == "System Purchase" && x.Supplier != null).Sum(x => x.TransactionAmount) -
            //_transactionRepository.All().Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount) -
            //_transactionRepository.All().Where(x => x.TransactionType.Contains("Paid") && x.Supplier != null).Sum(x => x.TransactionAmount) +
            //_transactionRepository.All().Where(x => x.TransactionType.Contains("Received") && x.Supplier != null).Sum(x => x.TransactionAmount);

            #endregion

            if (accountheadlistpermission.Count() > 0)
            {
                AccountHeadListfahad = accountheadlistpermission.Where(x => x.AccountHeadList.AccountCategorys.AccountCategoryName == "Cash" || x.AccountHeadList.AccountCategorys.AccountCategoryName == "Bank")
                .Where(x => x.AccountHeadList.AccType == "L").OrderBy(x => x.AccountHeadList.AccountBalance)//.Include(x=>x.vUnit).Include(x=>x.Category);
                .Select(x => new AccountHeadModel
                {
                    Id = x.AccountHeadList.Id,
                    NumericNumber = x.AccountHeadList.NumericNumber,
                    AccCode = x.AccountHeadList.AccCode,
                    AccName = x.AccountHeadList.AccName,
                    AccType = x.AccountHeadList.AccType,
                    AccountCategory = x.AccountHeadList.AccountCategorys != null ? x.AccountHeadList.AccountCategorys.AccountCategoryName : "",
                    vAccountGroupHead = x.AccountHeadList.vAccountGroupHead,
                    isSystem = x.AccountHeadList.isSystem,
                    AccountBalance = x.AccountHeadList.AccountBalance
                }).ToList();

            }
            else
            {
                AccountHeadListfahad = accountheadlist.Where(x => x.AccountCategorys.AccountCategoryName == "Cash" || x.AccountCategorys.AccountCategoryName == "Bank").Where(x => x.AccType == "L").OrderBy(x => x.AccountBalance)//.Include(x=>x.vUnit).Include(x=>x.Category);
                       .Select(e => new AccountHeadModel
                       {
                           Id = e.Id,
                           NumericNumber = e.NumericNumber,
                           AccCode = e.AccCode,
                           AccName = e.AccName,
                           AccType = e.AccType,
                           AccountCategory = e.AccountCategorys != null ? e.AccountCategorys.AccountCategoryName : "",
                           vAccountGroupHead = e.vAccountGroupHead,
                           isSystem = e.isSystem,
                           AccountBalance = e.AccountBalance
                       }).ToList();
            }








            var openingincomelist = _transactionRepository.All()
                .Include(x => x.DebitAccount).ThenInclude(x => x.AccountCategorys)
                .Include(x => x.CreditAccount).ThenInclude(x => x.AccountCategorys)
                .Where(x => x.InputDate.Date < dtFrom)
                .Where(x => (x.CreditAccount.AccountCategorys.AccountType == "Income") || (x.DebitAccount.AccountCategorys.AccountType == "Income"))
                .Select(x => new { AccName = "Previous Transaction", TransactionAmount = x.TransactionAmount });

            var openingincomesummary = openingincomelist
            .GroupBy(x => new { AccName = x.AccName != null ? x.AccName : "=N/A=" })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName, TransactionAmount = g.Sum(x => x.TransactionAmount), TransactionExpenseAmount = 0 }).ToList();



            var openingexpenselist = _transactionRepository.All()
            .Include(x => x.DebitAccount).ThenInclude(x => x.AccountCategorys)
            .Where(x => x.InputDate.Date < dtFrom)
            .Where(x => (x.DebitAccount.AccountCategorys.AccountType == "Expense") || (x.DebitAccount.AccountCategorys.AccountType == "Consumption"))
            .Select(x => new { AccName = "Previous Transaction", TransactionAmount = x.TransactionAmount });

            var openingexpensesummary = openingexpenselist
            .GroupBy(x => new { AccName = x.AccName != null ? x.AccName : "=N/A=" })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName, TransactionAmount = 0, TransactionExpenseAmount = g.Sum(x => x.TransactionAmount) }).ToList();



            var incomelist = _transactionRepository.All()
                .Include(x => x.DebitAccount).ThenInclude(x => x.AccountCategorys)
                .Include(x => x.CreditAccount).ThenInclude(x => x.AccountCategorys)
                .Where(x => x.InputDate.Date >= dtFrom && x.InputDate.Date <= dtTo)
                .Where(x => (x.CreditAccount.AccountCategorys.AccountType == "Income") || (x.DebitAccount.AccountCategorys.AccountType == "Income"))
                .Select(x => new { AccName = x.DebitAccount.AccName != null ? x.DebitAccount.AccName : x.CreditAccount.AccName, TransactionAmount = x.TransactionAmount });



            var incomesummary = incomelist
            .GroupBy(x => new { AccName = x.AccName != null ? x.AccName : "=N/A=" })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName, TransactionAmount = g.Sum(x => x.TransactionAmount), TransactionExpenseAmount = 0 }).ToList();







            var expenselist = _transactionRepository.All()
            .Include(x => x.DebitAccount).ThenInclude(x => x.AccountCategorys)
            //.Include(x => x.CreditAccount).ThenInclude(x => x.AccountCategory)
            .Where(x => x.InputDate.Date >= dtFrom && x.InputDate.Date <= dtTo)
            .Where(x => (x.DebitAccount.AccountCategorys.AccountType == "Expense") || (x.DebitAccount.AccountCategorys.AccountType == "Consumption"));

            var expensesummary = expenselist
            .GroupBy(x => new { AccName = x.DebitAccount.AccName != null ? x.DebitAccount.AccName : x.CreditAccount.AccName })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName, TransactionAmount = 0, TransactionExpenseAmount = g.Sum(x => x.TransactionAmount) }).ToList();


            openingincomesummary.AddRange(openingexpensesummary);
            openingincomesummary.AddRange(incomesummary);
            openingincomesummary.AddRange(expensesummary);

            var finalincomesummary = openingincomesummary
            .GroupBy(x => new { AccName = x.AccName })
            .Select(g => new DayWiseTransaction { AccName = g.Key.AccName, TransactionAmount = g.Sum(x => x.TransactionAmount), TransactionExpenseAmount = g.Sum(x => x.TransactionExpenseAmount) }).ToList();


            //incomesummary.AddRange(expensesummary);


            var assetlist = _accountHeadRepository.All()
             .Include(x => x.vAccountGroupHead)
             .Where(x => x.AccountCategorys.AccountType == "Asset" && ((x.AccountCategorys.AccountCategoryName.ToLower() != "Cash".ToLower()) && (x.AccountCategorys.AccountCategoryName.ToLower() != "Bank".ToLower()))).Where(x => x.AccType == "L" && x.AccountBalance != 0).OrderBy(x => x.AccountBalance)//.Include(x=>x.vUnit).Include(x=>x.Category);
             .Select(e => new AccountHeadModel
             {
                 Id = e.Id,
                 NumericNumber = e.NumericNumber,
                 AccCode = e.AccCode,
                 AccName = e.AccName,
                 AccType = e.AccType,
                 AccountCategory = e.AccountCategorys.AccountCategoryName ?? "",
                 vAccountGroupHead = e.vAccountGroupHead,
                 isSystem = e.isSystem,
                 AccountBalance = e.AccountBalance
             });



            var liabilitylist = _accountHeadRepository.All()
             .Include(x => x.vAccountGroupHead)
             .Where(x => x.AccountCategorys.AccountType == "Liability").Where(x => x.AccType == "L" && x.AccountBalance != 0).OrderBy(x => x.AccountBalance)//.Include(x=>x.vUnit).Include(x=>x.Category);
             .Select(e => new AccountHeadModel
             {
                 Id = e.Id,
                 NumericNumber = e.NumericNumber,
                 AccCode = e.AccCode,
                 AccName = e.AccName,
                 AccType = e.AccType,
                 AccountCategory = e.AccountCategorys != null ? e.AccountCategorys.AccountCategoryName : "",
                 vAccountGroupHead = e.vAccountGroupHead,
                 isSystem = e.isSystem,
                 AccountBalance = e.AccountBalance
             });




            var dashboard = new SummaryViewModel
            {
                DayWiseSales = daywisesales.ToList(),
                //DayWiseSalesReturn = daywisesalesReturn.ToList(),

                DayWisePurchase = daywisepurchase.ToList(),
                DayWiseReceived = receivedsummary.ToList(),
                DayWisePaid = paidsummary.ToList(),
                CustomerWiseDue = duecustomer,
                SupplierWiseDue = duesupplier.ToList(),
                AccountHeadBalance = AccountHeadListfahad.ToList(),
                DayWiseIncome = finalincomesummary.ToList(),
                AssetBalance = assetlist.ToList(),
                LiabilityBalance = liabilitylist.ToList(),

                //DayWiseExpense = expensesummary.ToList(),

                FromDate = FromDate,
                ToDate = ToDate


                //DayWisePurchase = daywisepurchase.Select(p => new
                //{
                //    p.PurchaseDate,
                //    p.TotalPurchaseCount,
                //    p.TotalPurchaseSum
                //}
                //).ToList(),
                //HeadWiseReceived = receivedsummary.Select(p => new
                //{
                //    p.AccName,
                //    p.TotalReceivedSum
                //}
                //).ToList(),
                //HeadWisePaid = paidsummary.Select(p => new
                //{
                //    p.AccName,
                //    p.TotalPaidSum
                //}
                //).ToList()

            };
            //ViewBag.Dashboard = dashboard;
            return View(dashboard);
        }



        #endregion

        #region Dashboard
        public IActionResult Index(int Refresh = 1)
        {

            try
            {
                DateTime today = DateTime.Today;
                DateTime today_Plus_Threedays = today.AddDays(3);

                DateTime month = new DateTime(today.Year, today.Month, 1);
                DateTime first = month.AddMonths(-1);
                DateTime last = month.AddDays(-1);


                DateTime Currentfirst = new DateTime(today.Year, today.Month, 1);
                DateTime Currentlast = Currentfirst.AddMonths(1).AddDays(-1);

                //var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                //Exec [prcProcessMonthlySubscriptionFee] 1, '01-Jan-2021','31-JAN-2021'/


                if (Refresh == 1)
                {
                    var query = $"Exec prcProcessAccountData '{ComId}'";

                    SqlParameter[] sqlParameter = new SqlParameter[1];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    Helper.ExecProc("prcProcessAccountData", sqlParameter);
                }


                SqlParameter[] sqlParameter2 = new SqlParameter[4];
                sqlParameter2[0] = new SqlParameter("@Criteria", "MonthlySales");
                sqlParameter2[1] = new SqlParameter("@FromDate", today);
                sqlParameter2[2] = new SqlParameter("@ToDate", today);
                sqlParameter2[3] = new SqlParameter("@ComId", ComId);

                List<MonthlySalesModel> monthlysales = Helper.ExecProcMapTList<MonthlySalesModel>("prcGetDashboard", sqlParameter2).ToList();




                SqlParameter[] sqlParameter3 = new SqlParameter[4];
                sqlParameter3[0] = new SqlParameter("@Criteria", "TopSellingCategory");
                sqlParameter3[1] = new SqlParameter("@FromDate", today);
                sqlParameter3[2] = new SqlParameter("@ToDate", today);
                sqlParameter3[3] = new SqlParameter("@ComId", ComId);

                List<CategoryWiseSalesModel> categorysales = Helper.ExecProcMapTList<CategoryWiseSalesModel>("prcGetDashboard", sqlParameter3).ToList();



                SqlParameter[] sqlParameter4 = new SqlParameter[4];
                sqlParameter4[0] = new SqlParameter("@Criteria", "StockQty");
                sqlParameter4[1] = new SqlParameter("@FromDate", today);
                sqlParameter4[2] = new SqlParameter("@ToDate", today);
                sqlParameter4[3] = new SqlParameter("@ComId", ComId);

                var stockqtyvalue = Helper.ExecProcMapTList<StockQtyValue>("prcGetDashboard", sqlParameter4).FirstOrDefault();


                SqlParameter[] sqlParameter5 = new SqlParameter[4];
                sqlParameter5[0] = new SqlParameter("@Criteria", "DayWiseSales");
                sqlParameter5[1] = new SqlParameter("@FromDate", today);
                sqlParameter5[2] = new SqlParameter("@ToDate", today);
                sqlParameter5[3] = new SqlParameter("@ComId", ComId);

                List<DailySalesModel> daywisesales = Helper.ExecProcMapTList<DailySalesModel>("prcGetDashboard", sqlParameter5).ToList();


                string dateOnlyString = today.ToString("dd-MMM-yyyy");

                SqlParameter[] sqlParameter6 = new SqlParameter[4];
                sqlParameter6[0] = new SqlParameter("@Criteria", "DayWisePurchase");
                sqlParameter6[1] = new SqlParameter("@FromDate", dateOnlyString);
                sqlParameter6[2] = new SqlParameter("@ToDate", dateOnlyString);
                sqlParameter6[3] = new SqlParameter("@ComId", ComId);

                List<DailySalesModel> daywisepurchase = Helper.ExecProcMapTList<DailySalesModel>("prcGetDashboard", sqlParameter6).ToList();

                ViewBag.DashboardData = new
                {
                    MonthlySales = monthlysales,
                    CategoryWiseSales = categorysales,
                    DayWiseSales = daywisesales,
                    DayWisePurchase = daywisepurchase

                    //StockQtyValue = stockqtyvalue

                };




                var custoemrheaddue = _customerRepository.All().Sum(x => x.OpBalance);
                var supplierheaddue = _supplierRepository.All().Sum(x => x.OpBalance);

                var dashboard = new DashboardViewModel
                {
                    Products = _productRepository.All().Count(),
                    //UnderROL = _productRepository.All().Where(x => x.ROL >= 20).Count(), ////totalpurchase - totalsales < rolqty
                    QuotationValue = _saleRepository.All().Where(x => x.DocTypeList.DocType == "Quotation").Sum(x => x.NetAmount),
                    POValue = _purchaseRepository.All().Where(x => x.DocTypeList.DocType == "Purchase Order").Sum(x => x.NetAmount),





                    CustomerDue = _saleRepository.All().Where(x => x.DocTypeList.DocType != "Quotation").Sum(x => x.NetAmount) - _salesPaymentRepository.All().Where(x => x.SalesMain.IsDelete == false && x.SalesMain.DocTypeList.DocType != "Quotation").Sum(x => x.Amount) + Convert.ToDecimal(custoemrheaddue),
                    SupplierDue = _purchaseRepository.All().Where(x => x.DocTypeList.DocType != "Purchase Order").Sum(x => x.NetAmount) - _purchasePaymentRepository.All().Where(x => x.PurchaseMain.IsDelete == false && x.PurchaseMain.DocTypeList.DocType != "Purchase Order").Sum(x => x.Amount) + Convert.ToDecimal(supplierheaddue),

                    //CustomerLedgerDue = Convert.ToDecimal(custoemrheaddue) + _transactionRepository.All().Where(x => x.TransactionType == "System Sales" && x.Customer != null).Sum(x => x.TransactionAmount) -
                    //_transactionRepository.All().Where(x => x.TransactionType == "System Sales Return" && x.Customer != null).Sum(x => x.TransactionAmount) -
                    //_transactionRepository.All().Where(x => x.TransactionType.Contains("Received") && x.Customer != null).Sum(x => x.TransactionAmount) +
                    //_transactionRepository.All().Where(x => x.TransactionType.Contains("Paid") && x.Customer != null).Sum(x => x.TransactionAmount),

                    CustomerLedgerDue =
                               Convert.ToDecimal(custoemrheaddue)
                                + _transactionRepository.All().Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                + _transactionRepository.All().Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                - _transactionRepository.All().Where(x => x.TransactionType.Contains("Received") && x.Customer != null).Sum(x => x.TransactionAmount)
                                + _transactionRepository.All().Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("CustomerDiscount") && x.Customer != null).Sum(x => x.TransactionAmount)
                                - _transactionRepository.All().Where(x => x.TransactionCategory.Contains("CustomerDiscount") && x.Customer != null).Sum(x => x.TransactionAmount),



                    SupplierLedgerDue =
                    Convert.ToDecimal(supplierheaddue) +
                                +_transactionRepository.All().Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount)
                                - _transactionRepository.All().Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount)
                                - _transactionRepository.All().Where(x => x.TransactionType.Contains("Paid") && x.Supplier != null).Sum(x => x.TransactionAmount)
                                + _transactionRepository.All().Where(x => x.TransactionType.Contains("Received") && x.Supplier != null).Sum(x => x.TransactionAmount)
                                + _transactionRepository.All().Where(x => x.TransactionType.Contains("Received") && !x.TransactionCategory.Contains("SupplierDiscount") && x.Supplier != null).Sum(x => x.TransactionAmount)
                                - _transactionRepository.All().Where(x => x.TransactionCategory.Contains("SupplierDiscount") && x.Supplier != null).Sum(x => x.TransactionAmount),



                    //Convert.ToDecimal(supplierheaddue) +
                    //            +_transactionRepository.All().Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount)
                    //            - _transactionRepository.All().Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount)

                    //            - _transactionRepository.All().Where(x => x.TransactionType.Contains("Paid") && x.Supplier != null).Sum(x => x.TransactionAmount)
                    //            //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received") && !x.TransactionCategory.Contains("SupplierDiscount")).Sum(x => x.TransactionAmount)
                    //            - _transactionRepository.All().Where(x => x.TransactionCategory.Contains("SupplierDiscount") && x.Supplier != null).Sum(x => x.TransactionAmount),




                    //SupplierLedgerDue = Convert.ToDecimal(supplierheaddue) + _transactionRepository.All().Where(x => x.TransactionType == "System Purchase" && x.Supplier != null).Sum(x => x.TransactionAmount) -
                    //_transactionRepository.All().Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount) -
                    //_transactionRepository.All().Where(x => x.TransactionType.Contains("Paid") && x.Supplier != null).Sum(x => x.TransactionAmount) +
                    //_transactionRepository.All().Where(x => x.TransactionType.Contains("Received") && x.Supplier != null).Sum(x => x.TransactionAmount),

                    //SupplierLedgerDue = _purchaseRepository.All().Sum(x => x.NetAmount) - _purchasePaymentRepository.All().Sum(x => x.Amount),


                    Suppliers = _supplierRepository.All().Count(),
                    Customers = _customerRepository.All().Count(),

                    TotalPurchase = _purchaseRepository.All().Where(x => x.DocTypeList.DocType != "Purchase Order").Count(),
                    TotalPurchaseValue = _purchaseRepository.All().Where(x => x.DocTypeList.DocType != "Purchase Order").Sum(x => x.NetAmount),
                    TotalSales = _saleRepository.All().Where(x => x.DocTypeList.DocType != "Quotation").Count(),
                    TotalSaleValue = _saleRepository.All().Where(x => x.DocTypeList.DocType != "Quotation").Sum(x => x.NetAmount),


                    TotalSaleableSerial = _purchaseBatchItemsRepository.All().Where(x => x.IsUsed == false && x.IsDelete == false && x.IsReturn == false && x.PurchaseItems.IsDelete == false).Count(),
                    TotalSerialSold = _purchaseBatchItemsRepository.All().Where(x => x.IsUsed == true).Count(),

                    Accounts = _accountHeadRepository.All().Where(x => x.IsDelete == false && x.AccType == "L").Count(),
                    //ReceiveHead = _accountHeadRepository.All().Where(x => x.AccountCategory.ToLower() == "Income".ToLower() && x.AccType == "L").Count(),
                    //PaymentHead = _accountHeadRepository.All().Where(x => x.AccountCategory.ToLower() == "Expense".ToLower() && x.AccType == "L").Count(),
                    //CashBankHead = _accountHeadRepository.All().Where(x => x.AccountCategory.ToLower() == "Asset".ToLower() && x.AccType == "L").Count(),

                    //Post = _transactionRepository.All().Where(x => x.isPost == true).Count() + _saleRepository.All().Where(x => x.isPosted == true).Count() +
                    //_purchaseRepository.All().Where(x => x.isPosted == true).Count() + _salesReturnRepository.All().Where(x => x.isPosted == true).Count() +
                    //_purchaseReturnRepository.All().Where(x => x.isPosted == true).Count() + _damageRepository.All().Where(x => x.isPosted == true).Count() +
                    //_issueRepository.All().Where(x => x.isPosted == true).Count() + _internaltransferRepository.All().Where(x => x.isPosted == true).Count(),


                    UnPost = _transactionRepository.All().Where(x => x.isPost == false).Count() + _saleRepository.All().Where(x => x.isPosted == false && x.DocTypeList.DocType != "Quotation").Count() +
                    _purchaseRepository.All().Where(x => x.isPosted == false && x.DocTypeList.DocType != "Purchase Order").Count() + _salesReturnRepository.All().Where(x => x.isPosted == false).Count() +
                    _purchaseReturnRepository.All().Where(x => x.isPosted == false).Count() + _damageRepository.All().Where(x => x.isPosted == false).Count() +
                    _issueRepository.All().Where(x => x.isPosted == false).Count() + _internaltransferRepository.All().Where(x => x.isPosted == false).Count(),


                    TotalReceive = _transactionRepository.All().Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
                    TotalPayment = _transactionRepository.All().Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),


                    LastFiveSales = _saleRepository.All().Include(x => x.CustomerModel).Include(x => x.SalesPayments).OrderByDescending(x => x.SalesDate).Take(5).ToList(),
                    LastFivePurchase = _purchaseRepository.All().Include(x => x.SupplierModel).Include(x => x.PurchasePayments)//.Include(x => x.CreditAccount)
                    .OrderByDescending(x => x.PurchaseDate).Take(5).ToList(),
                    LastFiveReceive = _transactionRepository.All().Include(x => x.DebitAccount).Include(x => x.CreditAccount).Where(x => x.TransactionType.Contains("Received")).OrderByDescending(x => x.InputDate).Take(5).ToList(),
                    LastFivePayments = _transactionRepository.All().Include(x => x.DebitAccount).Include(x => x.CreditAccount).Where(x => x.TransactionType.Contains("Paid")).OrderByDescending(x => x.InputDate).Take(5).ToList(),




                    CurrMonthAddedProduct = (from x in _productRepository.All() where x.CreateDate >= Currentfirst && x.CreateDate <= Currentlast select x).Count(),
                    //PrevMonthAddedProduct = (from x in _productRepository.All() where x.CreateDate >= first && x.CreateDate <= last select x).Count(),


                    //CurrMonthAddedProduct = _productRepository.All(x => x.CreateDate >= Currentfirst && x.CreateDate <= Currentlast).Count(),
                    //PrevMonthAddedProduct = _productRepository.All(x => x.CreateDate >= first && x.CreateDate <= last).Count(),

                    CurrMonthPayment = _transactionRepository.All().Where(x => x.TransactionType.Contains("Paid") && x.InputDate >= Currentfirst && x.InputDate <= Currentlast).Sum(x => x.TransactionAmount),
                    PrevMonthPayment = _transactionRepository.All().Where(x => x.TransactionType.Contains("Paid") && x.InputDate >= first && x.InputDate <= last).Sum(x => x.TransactionAmount),

                    CurrMonthReceive = _transactionRepository.All().Where(x => x.TransactionType.Contains("Received") && x.InputDate >= Currentfirst && x.InputDate <= Currentlast).Sum(x => x.TransactionAmount),
                    PrevMonthReceive = _transactionRepository.All().Where(x => x.TransactionType.Contains("Received") && x.InputDate >= first && x.InputDate <= last).Sum(x => x.TransactionAmount),

                    //fahad

                    CurrMonthSalesQty = (from x in _saleRepository.All() where x.SalesDate >= Currentfirst && x.SalesDate <= Currentlast select x).Count(),
                    //PrevMonthSalesQty = (from x in _saleRepository.All() where x.SalesDate >= first && x.SalesDate <= last select x).Count(),


                    //PrevMonthSalesQty = _saleRepository.All(x => x.SalesDate >= first && x.SalesDate <= last).Count(),
                    //CurrMonthSalesQty = _saleRepository.All(x => x.SalesDate >= Currentfirst && x.SalesDate <= Currentlast).Count(),


                    CurrMonthSalesValue = (from x in _saleRepository.All() where x.SalesDate >= Currentfirst && x.SalesDate <= Currentlast select x).Sum(x => x.NetAmount),
                    //PrevMonthSalesValue = (from x in _saleRepository.All() where x.SalesDate >= first && x.SalesDate <= last select x).Sum(x => x.NetAmount),




                    CurrMonthPurchaseQty = (from x in _purchaseRepository.All() where x.PurchaseDate >= Currentfirst && x.PurchaseDate <= Currentlast select x).Count(),
                    //PrevMonthPurchaseQty = (from x in _purchaseRepository.All() where x.PurchaseDate >= first && x.PurchaseDate <= last select x).Count(),


                    CurrMonthPurchaseValue = (from x in _purchaseRepository.All() where x.PurchaseDate >= Currentfirst && x.PurchaseDate <= Currentlast select x).Sum(x => x.NetAmount),
                    //PrevMonthPurchaseValue = (from x in _purchaseRepository.All() where x.PurchaseDate >= first && x.PurchaseDate <= last select x).Sum(x => x.NetAmount),

                    StockQty = stockqtyvalue.TotalQty,
                    StockValue = stockqtyvalue.TotalValue

                };
                return View(dashboard);


            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public IActionResult ServiceDashboard()
        {


            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");

            //Exec [prcProcessMonthlySubscriptionFee] 1, '01-Jan-2021','31-JAN-2021'/
            var query = $"Exec prcProcessInternetServiceData '{ComId}'";

            SqlParameter[] sqlParameter = new SqlParameter[1];
            sqlParameter[0] = new SqlParameter("@ComId", ComId);
            Helper.ExecProc("prcProcessInternetServiceData", sqlParameter);




            var today = DateTime.Today;
            var today_Plus_Threedays = today.AddDays(3);

            var month = new DateTime(today.Year, today.Month, 1);
            var first = month.AddMonths(-1);
            var last = month.AddDays(-1);


            var Currentfirst = new DateTime(today.Year, today.Month, 1);
            var Currentlast = Currentfirst.AddMonths(1).AddDays(-1);


            var dashboard = new InternetServiceDashboardViewModel
            {
                TotalCashReceived = _invoiceBillRepository.All().Where(x => x.AccountReceiveByHead.vAccountGroupHead.AccName.ToLower().Contains("Cash".ToLower())).Sum(x => x.ReceivedAmount),
                TotalBankReceived = _invoiceBillRepository.All().Where(x => x.AccountReceiveByHead.vAccountGroupHead.AccName.ToLower().Contains("Bank".ToLower()) && (!x.AccountReceiveByHead.AccName.ToLower().Contains("bkash"))).Sum(x => x.ReceivedAmount),
                TotalBkashMerchantReceived = _invoiceBillRepository.All().Where(x => x.AccountReceiveByHead.AccName.ToLower().Contains("Merchant".ToLower())).Sum(x => x.ReceivedAmount),
                TotalBkashPersonalReceived = _invoiceBillRepository.All().Where(x => x.AccountReceiveByHead.AccName.ToLower().Contains("Personal".ToLower())).Sum(x => x.ReceivedAmount),
                //TotalOtherReceived = _invoiceBillRepository.All().Where(x => x.AccountReceiveByHead.vAccountGroupHead.AccName.ToLower().Contains("Cash".ToLower()).Sum(x => x.BillAmount),

                TodaysBilledAmount = _invoiceBillRepository.All().Where(x => x.BilledDate == DateTime.Now.Date).Sum(x => x.BillAmount),
                TotalDue = _invoiceBillRepository.All().Sum(x => x.BillAmount - (x.ReceivedAmount + x.BadDebt + x.Discount)),

                TodaysReceivedAmount = _invoiceBillRepository.All().Where(x => x.ReceivedDate == DateTime.Now.Date).Sum(x => x.ReceivedAmount),
                TotalBilledAmount = _invoiceBillRepository.All().Sum(x => x.BillAmount),
                TotalReceivedAmount = _invoiceBillRepository.All().Sum(x => x.ReceivedAmount),
                TotalBadDebtAmount = _invoiceBillRepository.All().Sum(x => x.BadDebt),
                TotalDiscountAmount = _invoiceBillRepository.All().Sum(x => x.Discount),

                LastMonthReceived = _invoiceBillRepository.All().Where(x => x.ReceivedDate >= first && x.ReceivedDate <= last).Sum(x => x.ReceivedAmount),
                LastMonthDue = _invoiceBillRepository.All().Where(x => x.BilledDate >= first && x.BilledDate <= last).Sum(x => ((x.BillAmount) - (x.ReceivedAmount + x.BadDebt + x.Discount))),
                LastMonthExpense = _transactionRepository.All().Where(x => x.InputDate >= first && x.InputDate <= last && x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

                CurrentMonthReceived = _invoiceBillRepository.All().Where(x => x.ReceivedDate >= Currentfirst && x.ReceivedDate <= Currentlast).Sum(x => x.ReceivedAmount),
                CurrentMonthDue = _invoiceBillRepository.All().Where(x => x.BilledDate >= Currentfirst && x.BilledDate <= Currentlast).Sum(x => ((x.BillAmount) - (x.ReceivedAmount + x.BadDebt + x.Discount))),
                CurrentMonthExpense = _transactionRepository.All().Where(x => x.InputDate >= Currentfirst && x.InputDate <= Currentlast && x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

                LastFiveBilled = _invoiceBillRepository.All().OrderByDescending(x => x.Id).Take(5).ToList(),
                LastFiveReceived = _invoiceBillRepository.All().Include(x => x.AccountReceiveByHead).Where(x => x.ReceivedAmount > 0).OrderByDescending(x => x.Id).Take(5).ToList(),

                TotalRegisteredUser = _InternetUserRepository.All().Count(),// _invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                TotalActiveUser = _InternetUserRepository.All().Where(x => x.UserStatus.UserStatusShort.ToLower().Contains("active")).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                TotalInactiveUser = _InternetUserRepository.All().Where(x => x.UserStatus.UserStatusShort.ToLower().Contains("disabled")).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                TotalExpiredUser = _InternetUserRepository.All().Where(x => x.UserStatus.UserStatusShort.ToLower().Contains("expired")).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),

                ExpiringInThreeDays = _InternetUserRepository.All().Where(x => x.UserStatus.UserStatusShort.ToLower().Contains("expiring in 3 days")).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                TodayExpired = _InternetUserRepository.All().Where(x => x.UserStatus.UserStatusShort.ToLower().Contains("expiring today")).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),


                //ExpiringInThreeDays = _InternetUserRepository.All().Where(x => x.LastExpiredDate >= DateTime.Now.Date && x.LastExpiredDate <= DateTime.Now.Date.AddDays(3)).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                //TodayExpired = _InternetUserRepository.All().Where(x => x.LastExpiredDate >= DateTime.Now.Date && x.LastExpiredDate <= today_Plus_Threedays).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),



                TotalTerminatedUsers = _InternetUserRepository.All().Where(x => x.UserStatus.UserStatusShort.ToLower().Contains("terminated")).Count(),

            };
            return View(dashboard);
        }


        [AllowAnonymous]
        public IActionResult CustomerDashboard()
        {


            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");
            var CustomerId = HttpContext.Session.GetInt32("CustomerId");


            ////Exec [prcProcessMonthlySubscriptionFee] 1, '01-Jan-2021','31-JAN-2021'/
            //var query = $"Exec prcProcessInternetServiceData '{ComId}'";

            //SqlParameter[] sqlParameter = new SqlParameter[1];
            //sqlParameter[0] = new SqlParameter("@ComId", ComId);
            //Helper.ExecProc("prcProcessInternetServiceData", sqlParameter);




            var today = DateTime.Today;
            var today_Plus_Threedays = today.AddDays(3);

            var month = new DateTime(today.Year, today.Month, 1);
            var first = month.AddMonths(-1);
            var last = month.AddDays(-1);


            var Currentfirst = new DateTime(today.Year, today.Month, 1);
            var Currentlast = Currentfirst.AddMonths(1).AddDays(-1);
            //var expireddate = _SubscriptionActivationRepository.All().Where(x => x.LuserId == UserId).OrderByDescending(x => x.ActiveToDate).FirstOrDefault().ActiveToDate;
            //var abcremaining = (expireddate.Date - DateTime.Now.Date).TotalDays;

            var customers = _customerRepository.All().Where(x => x.Id == CustomerId)
                .Select(e => new CustomerResultList
                {
                    Name = e.Name,
                    PrimaryAddress = e.PrimaryAddress,
                    Phone = e.Phone,
                    CustType = e.CustType,
                    //TotalSalesValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount),

                    //TotalSalesReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount),
                    //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

                    //TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
                    //TotalDue = (decimal)e.OpBalance 
                    //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount) 
                    //- e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount) 
                    //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount) 
                    //+ e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

                    //TotalDue =
                    //            (decimal)e.OpBalance
                    //            + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                    //            + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                    //            - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                    //            + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount)
                    //            - e.AccountsDailyTransaction.Where(x => x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount),

                    //LastSalesDate = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SalesDate.ToString("dd-MMM-yy") ?? "",
                    //LastInvoiceNo = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
                    //LastSoldProduct = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",




                    TotalDue = Convert.ToDecimal(e.OpBalance)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("PaidToCustomer")).Sum(x => x.TransactionAmount)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && x.TransactionCategory.Contains("PaidToCustomer")).Sum(x => x.TransactionAmount),



                }).FirstOrDefault();



            //.Select new
            //{
            //    Name = e.Name,
            //    PrimaryAddress = e.PrimaryAddress,
            //    Phone = e.Phone,
            //    CustType = e.CustType,
            //    //TotalSalesValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount),

            //    //TotalSalesReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount),
            //    //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

            //    //TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
            //    TotalDue = (decimal)e.OpBalance + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount) + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
            //    //LastSalesDate = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SalesDate.ToString("dd-MMM-yy") ?? "",
            //    //LastInvoiceNo = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
            //    //LastSoldProduct = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",

            //}; //.Include(x=>x.vUnit).Include(x=>x.Category);
            //var query = from e in customers//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

            //            select new 
            //            {
            //                Name = e.Name,
            //                PrimaryAddress = e.PrimaryAddress,
            //                Phone = e.Phone,
            //                CustType = e.CustType,
            //                //TotalSalesValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount),

            //                //TotalSalesReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount),
            //                //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

            //                //TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
            //                TotalDue = (decimal)e.OpBalance + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount) + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
            //                //LastSalesDate = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SalesDate.ToString("dd-MMM-yy") ?? "",
            //                //LastInvoiceNo = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
            //                //LastSoldProduct = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",

            //            };


            var dashboard = new CustomerDashboardViewModel
            {
                LedgerBalance = customers.TotalDue,
                //TotalClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                //TodayClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Date == DateTime.Now.Date).Count(),
                //CurrentMonthClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Month == DateTime.Now.Date.Month).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                //LastMontClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Month == DateTime.Now.Date.AddMonths(-1).Month).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                //LastFiveClickedFrom = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).OrderByDescending(x => x.Id).Take(5).ToList(),
                //LastFiveCreatedLink = _shortLinkRepository.All().Include(x => x.ShortLinkHitList).Where(x => x.ComId == ComId).OrderByDescending(x => x.Id).Take(5).ToList(),
                //UserExpiredDate = expireddate,
                //RemainingDays = int.Parse(abcremaining.ToString())
            };
            return View(dashboard);
        }


        [AllowAnonymous]
        public IActionResult SupplierDashboard()
        {


            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");
            var SupplierId = HttpContext.Session.GetInt32("SupplierId");


            ////Exec [prcProcessMonthlySubscriptionFee] 1, '01-Jan-2021','31-JAN-2021'/
            //var query = $"Exec prcProcessInternetServiceData '{ComId}'";

            //SqlParameter[] sqlParameter = new SqlParameter[1];
            //sqlParameter[0] = new SqlParameter("@ComId", ComId);
            //Helper.ExecProc("prcProcessInternetServiceData", sqlParameter);




            var today = DateTime.Today;
            var today_Plus_Threedays = today.AddDays(3);

            var month = new DateTime(today.Year, today.Month, 1);
            var first = month.AddMonths(-1);
            var last = month.AddDays(-1);


            var Currentfirst = new DateTime(today.Year, today.Month, 1);
            var Currentlast = Currentfirst.AddMonths(1).AddDays(-1);
            //var expireddate = _SubscriptionActivationRepository.All().Where(x => x.LuserId == UserId).OrderByDescending(x => x.ActiveToDate).FirstOrDefault().ActiveToDate;
            //var abcremaining = (expireddate.Date - DateTime.Now.Date).TotalDays;

            var suppliers = _supplierRepository.All().Where(x => x.Id == SupplierId)
                .Select(e => new SupplierResultList
                {
                    Name = e.SupplierName,
                    Address = e.PrimaryAddress,
                    Phone = e.Phone,
                    SupType = e.SupType,
                    //TotalPurchaseValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount),

                    //TotalPurchaseReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount),
                    //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),


                    //TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),

                    TotalDue =
                                (decimal)e.OpBalance
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received") && !x.TransactionCategory.Contains("SupplierDiscount")).Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionCategory.Contains("SupplierDiscount")).Sum(x => x.TransactionAmount),



                    //TotalDue = (decimal)e.OpBalance + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount) + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
                    //LastPurchaseDate = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseDate.ToString("dd-MMM-yy") ?? "",
                    //LastInvoiceNo = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
                    //LastSoldProduct = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",

                }).FirstOrDefault();



            //.Select new
            //{
            //    Name = e.Name,
            //    PrimaryAddress = e.PrimaryAddress,
            //    Phone = e.Phone,
            //    CustType = e.CustType,
            //    //TotalPurchaseValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount),

            //    //TotalPurchaseReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount),
            //    //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

            //    //TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
            //    TotalDue = (decimal)e.OpBalance + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount) + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
            //    //LastPurchaseDate = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseDate.ToString("dd-MMM-yy") ?? "",
            //    //LastInvoiceNo = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
            //    //LastSoldProduct = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",

            //}; //.Include(x=>x.vUnit).Include(x=>x.Category);
            //var query = from e in suppliers//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

            //            select new 
            //            {
            //                Name = e.Name,
            //                PrimaryAddress = e.PrimaryAddress,
            //                Phone = e.Phone,
            //                CustType = e.CustType,
            //                //TotalPurchaseValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount),

            //                //TotalPurchaseReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount),
            //                //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

            //                //TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
            //                TotalDue = (decimal)e.OpBalance + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount) + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
            //                //LastPurchaseDate = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseDate.ToString("dd-MMM-yy") ?? "",
            //                //LastInvoiceNo = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
            //                //LastSoldProduct = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",

            //            };


            var dashboard = new SupplierDashboardViewModel
            {
                LedgerBalance = suppliers.TotalDue,
                //TotalClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                //TodayClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Date == DateTime.Now.Date).Count(),
                //CurrentMonthClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Month == DateTime.Now.Date.Month).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                //LastMontClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Month == DateTime.Now.Date.AddMonths(-1).Month).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                //LastFiveClickedFrom = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).OrderByDescending(x => x.Id).Take(5).ToList(),
                //LastFiveCreatedLink = _shortLinkRepository.All().Include(x => x.ShortLinkHitList).Where(x => x.ComId == ComId).OrderByDescending(x => x.Id).Take(5).ToList(),
                //UserExpiredDate = expireddate,
                //RemainingDays = int.Parse(abcremaining.ToString())
            };
            return View(dashboard);
        }


        public IActionResult IndexURLShortener()
        {


            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");

            ////Exec [prcProcessMonthlySubscriptionFee] 1, '01-Jan-2021','31-JAN-2021'/
            //var query = $"Exec prcProcessInternetServiceData '{ComId}'";

            //SqlParameter[] sqlParameter = new SqlParameter[1];
            //sqlParameter[0] = new SqlParameter("@ComId", ComId);
            //Helper.ExecProc("prcProcessInternetServiceData", sqlParameter);




            var today = DateTime.Today;
            var today_Plus_Threedays = today.AddDays(3);

            var month = new DateTime(today.Year, today.Month, 1);
            var first = month.AddMonths(-1);
            var last = month.AddDays(-1);


            var Currentfirst = new DateTime(today.Year, today.Month, 1);
            var Currentlast = Currentfirst.AddMonths(1).AddDays(-1);
            var expireddate = _SubscriptionActivationRepository.All().Where(x => x.LuserId == UserId).OrderByDescending(x => x.ActiveToDate).FirstOrDefault().ActiveToDate;
            var abcremaining = (expireddate.Date - DateTime.Now.Date).TotalDays;
            var dashboard = new UrlShortenDashboardViewModel
            {
                TotalLink = _shortLinkRepository.All().Count(),// _invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                TotalClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                TodayClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Date == DateTime.Now.Date).Count(),
                CurrentMonthClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Month == DateTime.Now.Date.Month).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                LastMontClicked = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).Where(x => x.CreateDate.Month == DateTime.Now.Date.AddMonths(-1).Month).Count(),//_invoiceBillRepository.All().GroupBy(p => p.UserId).Count(),
                LastFiveClickedFrom = _shortLinkHitRepository.All().Include(x => x.ShortLinkInfo).Where(x => x.ShortLinkInfo.ComId == ComId).OrderByDescending(x => x.Id).Take(5).ToList(),
                LastFiveCreatedLink = _shortLinkRepository.All().Include(x => x.ShortLinkHitList).Where(x => x.ComId == ComId).OrderByDescending(x => x.Id).Take(5).ToList(),
                UserExpiredDate = expireddate,
                RemainingDays = int.Parse(abcremaining.ToString())
            };
            return View(dashboard);
        }
        #endregion

        #region customer
        public IActionResult CustomerList(string filter = "All")
        {
            try
            {



                ViewBag.FromDate = DateTime.Now.Date;
                ViewBag.ToDate = DateTime.Now.Date;

                ViewBag.filter = filter;
                //return View(_customerRepository.All());


                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var customerid = "";
                //if (ReferanceId > 0)
                //{
                //    customerid = ReferanceId.ToString();
                //}
                string dtFrom = DateTime.Now.Date.ToString("dd-MMM-yy");
                string dtTo = DateTime.Now.Date.ToString("dd-MMM-yy");
                var Type = "Customer";


                var quary = $"Exec Acc_CustomerBalance  '" + ComId + "','" + customerid + "',0,'" + dtFrom + "' ,'" + dtTo + "','" + Type + "',1";


                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@CustomerId", customerid);
                parameters[2] = new SqlParameter("@UrlLink", "");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[5] = new SqlParameter("@LedgerFor", Type);
                parameters[6] = new SqlParameter("@BalanceUpdate", "1");


                Helper.ExecProc("Acc_CustomerBalance", parameters);


                return View();
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        [HttpGet]
        public ActionResult AddCustomer()
        {
            ViewBag.ActionType = "Create";
            ViewBag.CustomerGroupHead = _customerRepository.GetCustomerGroupHeadForDropDown(0);
            ViewBag.TradeTerms = _tradeTermsRepository.GetAllForDropDown();
            ViewBag.SalesRepresentative = _employeeRepository.GetAllForDropDown();


            CustomerModel abc = new CustomerModel();
            abc.OpBalance = 0;
            return View(abc);
        }




        [AllowAnonymous]
        public JsonResult GetCustomersDropDown()
        {
            return Json(_customerRepository.GetCustomerLedgerHeadForDropDown());

        }




        [AllowAnonymous]
        public JsonResult GetCultureInfo(int CurrencyId)
        {

            var CurrencyInfo = _countryRepository.All().Where(x => x.Id == CurrencyId)
                .Select(x => new
                {
                    x.Id,
                    x.CultureInfo,
                    x.CurrencySymbol,
                    x.CurrencyShortName
                }).FirstOrDefault();

            return Json(CurrencyInfo);

        }



        [AllowAnonymous]
        public JsonResult GetCustomerListOld(string Status)
        {
            try
            {
                //var products= _context.Products.ToList();


                var customers = _customerRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);
                var query = from e in customers//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new CustomerResultList
                            {
                                Id = e.Id,
                                Name = e.Name,
                                Email = e.Email,
                                PrimaryAddress = e.PrimaryAddress,
                                SecoundaryAddress = e.SecoundaryAddress,
                                Notes = e.Notes,
                                Phone = e.Phone,
                                CustType = e.CustType,
                                ParentCustomer = e.Customers.Name,
                                OpBalance = e.OpBalance,


                                TotalSalesValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount),
                                TotalSalesReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount),
                                TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
                                TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),


                                TotalDue = Convert.ToDecimal(e.OpBalance)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("PaidToCustomer")).Sum(x => x.TransactionAmount)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && x.TransactionCategory.Contains("PaidToCustomer")).Sum(x => x.TransactionAmount),

                                //TotalDue =
                                //(decimal)e.OpBalance
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount),

                                //TotalDue =
                                //(decimal)e.OpBalance
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),


                                LastSalesDate = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SalesDate.ToString("dd-MMM-yy") ?? "",
                                LastInvoiceNo = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
                                LastSoldProduct = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",

                            };

                if (Status == "Due")
                {
                    query = query.Where(x => x.TotalDue > 0);
                }

                var parser = new Parser<CustomerResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
                //throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult GetCustomerList(string Status, int page = 1, decimal size = 5)
        {
            try
            {
                //var products= _context.Products.ToList();
                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var customers = _customerRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);

                decimal TotalRecordCount = customers.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);



                decimal skip = (page - 1) * size;


                var query = from e in customers//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new
                            {
                                Id = e.Id,
                                Name = e.Name,
                                Email = e.Email,
                                PrimaryAddress = e.PrimaryAddress,
                                SecoundaryAddress = e.SecoundaryAddress,
                                Notes = e.Notes,
                                Phone = e.Phone,
                                CustType = e.CustType,
                                ParentCustomer = e.Customers.Name,
                                OpBalance = e.OpBalance,


                                TotalSalesValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount),
                                TotalSalesReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount),
                                TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
                                TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),


                                TotalDue = Convert.ToDecimal(e.OpBalance)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("PaidToCustomer")).Sum(x => x.TransactionAmount)
                                + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && x.TransactionCategory.Contains("PaidToCustomer")).Sum(x => x.TransactionAmount),

                                //TotalDue =
                                //(decimal)e.OpBalance
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount),

                                //TotalDue =
                                //(decimal)e.OpBalance
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),


                                LastSalesDate = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SalesDate.ToString("dd-MMM-yy") ?? "",
                                LastInvoiceNo = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().SaleCode ?? "",
                                LastSoldProduct = e.Sales.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",

                            };

                if (Status == "Due")
                {
                    query = query.Where(x => x.TotalDue > 0);
                }

                var abcd = query.OrderBy(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = page;
                pageinfo.PageSize = int.Parse(size.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

                //var parser = new Parser<CustomerResultList>(Request.Form, query);
                //return Json(parser.Parse());

            }
            catch (Exception ex)
            {
                return Json(ex.Message);
                //throw ex;
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddCustomer(CustomerModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _customerRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Name.ToString());


                }
                else
                {
                    _customerRepository.Update(model, model.Id);

                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());

                }
                return RedirectToAction("CustomerList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditCustomer(int customerId)
        {
            ViewBag.ActionType = "Edit";
            ViewBag.CustomerGroupHead = _customerRepository.GetCustomerGroupHeadForDropDown(customerId);
            ViewBag.TradeTerms = _tradeTermsRepository.GetAllForDropDown();
            ViewBag.SalesRepresentative = _employeeRepository.GetAllForDropDown();
            var customer = _customerRepository.Find(customerId);
            return View("AddCustomer", customer);
        }


        public ActionResult DeleteCustomer(int customerId)
        {
            var model = _customerRepository.Find(customerId);
            if (model != null)
            {
                _customerRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Name);



                return RedirectToAction("CustomerList");
            }
            return RedirectToAction("CustomerList");
        }
        #endregion

        #region supplier
        public IActionResult supplierList(string filter = "All")
        {
            ViewBag.FromDate = DateTime.Now.Date;
            ViewBag.ToDate = DateTime.Now.Date;

            ViewBag.filter = filter;
            //return View(_supplierRepository.All());
            return View();

        }

        [HttpGet]
        public ActionResult Addsupplier()
        {
            ViewBag.ActionType = "Create";
            ViewBag.SupplierGroupHead = _supplierRepository.GetSupplierGroupHeadForDropDown();
            SupplierModel abc = new SupplierModel();
            abc.OpBalance = 0;
            return View(abc);
        }


        //[AllowAnonymous]
        //public IActionResult SubsidiaryLedger(string rptFormat, int Id, string Type, string FromDate, string ToDate, int isViewPageReport = 0, int IsPosted = 1)
        //{
        //    try
        //    {
        //        //var weburl = HttpContext.Session.GetString("weburl"); //"https://pqstec.com/invoiceapps/Home/login/?ReturnUrl=%2Finvoiceapps%2FAdmin%2FInvoiceBillList";// 
        //        string weburl = configuration.GetSection("hostimage").Value;
        //        HttpContext.Session.SetString("weburl", weburl);

        //        //errorlog(weburl);

        //        var UserId = HttpContext.Session.GetInt32("UserId");
        //        var ComId = HttpContext.Session.GetInt32("ComId");
        //        string UrlLink = "";
        //        string redirectUrl = "";
        //        var reportname = "rptTransactionLedger";
        //        //string FromDate = "1-jan-2020";
        //        //string ToDate = "31-Dec-2023";


        //        string filename = "";

        //        if (Type == "Supplier")
        //        {
        //            filename = _supplierRepository.All().Where(x => x.Id == Id).Select(x => x.SupplierName).Single();
        //        }
        //        else if (Type == "SupplierNotPosted")
        //        {
        //            filename = _supplierRepository.All().Where(x => x.Id == Id).Select(x => x.SupplierName).Single();
        //        }
        //        else if (Type == "Customer")
        //        {
        //            filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //        }
        //        else if (Type == "AllCustomerBalance")
        //        {
        //            //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //            redirectUrl = Url.Action("CustomerLedgerBalanceViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
        //            return Json(new { Url = redirectUrl });
        //        }
        //        else if (Type == "AllCustomerAgingBalance")
        //        {
        //            //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //            redirectUrl = Url.Action("CustomerAgingBalanceViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
        //            return Json(new { Url = redirectUrl });
        //        }
        //        else if (Type == "AllCustomerBalance_AllSales")
        //        {
        //            //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //            redirectUrl = Url.Action("CustomerBalanceAllSalesViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
        //            return Json(new { Url = redirectUrl });
        //        }
        //        else if (Type == "AllCustomerBalance_AllSalesQty")
        //        {
        //            //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //            redirectUrl = Url.Action("CustomerBalanceAllSalesQtyViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
        //            return Json(new { Url = redirectUrl });
        //        }




        //        else if (Type == "EmployeeList")
        //        {
        //            filename = _employeeRepository.All().Where(x => x.Id == Id).Select(x => x.EmployeeName).Single();
        //        }
        //        else if (Type == "AllEmployeeBalance")
        //        {
        //            redirectUrl = Url.Action("EmployeeBalanceViewReport", "Admin", new { ReferanceId = Id, FromDate = FromDate, ToDate = ToDate, Type = Type });
        //            return Json(new { Url = redirectUrl });
        //        }
        //        else if ((Type == "EmployeeNotPosted"))
        //        {
        //            filename = _employeeRepository.All().Where(x => x.Id == Id).Select(x => x.EmployeeName).Single();
        //        }




        //        else if (Type == "RewardPointSummary")
        //        {
        //            //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //            redirectUrl = Url.Action("CustomerRewardBalanceSummaryViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
        //            return Json(new { Url = redirectUrl });
        //        }
        //        else if (Type == "RewardPointDetails")
        //        {
        //            //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //            redirectUrl = Url.Action("CustomerRewardBalanceDetailsViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
        //            return Json(new { Url = redirectUrl });
        //        }



        //        else if (Type == "AllSupplierBalance")
        //        {
        //            //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //            redirectUrl = Url.Action("SupplierLedgerBalanceViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
        //            return Json(new { Url = redirectUrl });
        //        }
        //        else if ((Type == "CustomerNotPosted") || (Type == "CustomerRewardPointNotPosted"))
        //        {
        //            filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
        //        }
        //        else if (Type == "Account")
        //        {
        //            filename = _accountHeadRepository.All().Where(x => x.Id == Id).Select(x => x.AccName).Single();
        //        }
        //        else if (Type == "SupplierPerformanceIMEI")
        //        {
        //            string ReferanceId = "";
        //            if (Id > 0)
        //            {
        //                filename = _supplierRepository.All().Where(x => x.Id == Id).Select(x => x.SupplierName).Single();
        //                ReferanceId = Id.ToString();
        //            }
        //            else
        //            {
        //                filename = "All_Supplier_IMEI_Performance";

        //            }
        //            redirectUrl = Url.Action("ProductPerformanceBySupplierViewReport", "Admin", new { ReferanceId = ReferanceId, dtFrom = FromDate, dtTo = ToDate, Type = "IMEI" });
        //            return Json(new { Url = redirectUrl });
        //        }
        //        else if (Type == "SupplierPerformanceALL")
        //        {


        //            string ReferanceId = "";
        //            if (Id > 0)
        //            {
        //                filename = _supplierRepository.All().Where(x => x.Id == Id).Select(x => x.SupplierName).Single();
        //                ReferanceId = Id.ToString();
        //            }
        //            else
        //            {
        //                filename = "All_Supplier_Performance_ALL";

        //            }


        //            redirectUrl = Url.Action("ProductPerformanceBySupplierViewReport", "Admin", new { ReferanceId = ReferanceId, dtFrom = FromDate, dtTo = ToDate, Type = "ALL" });
        //            return Json(new { Url = redirectUrl });
        //        }
        //        else if (Type == "Accounts Receivable")
        //        {
        //            filename = _accountHeadRepository.All().Where(x => x.Id == Id).Select(x => x.AccName).Single();
        //        }
        //        else
        //        {
        //            filename = _accountHeadRepository.All().Where(x => x.Id == Id).Select(x => x.AccName).Single();
        //            Type = _accountHeadRepository.All().Include(x => x.AccountCategorys).Where(x => x.Id == Id).FirstOrDefault().AccountCategorys.AccountType;
        //        }


        //        if (isViewPageReport == 1)
        //        {
        //            redirectUrl = Url.Action("AccountsLedgerViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type, IsPosted = IsPosted });
        //            return Json(new { Url = redirectUrl });
        //        }



        //        //reportname = "rptTransactionLedger";
        //        filename = "Ledger_From_" + FromDate + "To_" + ToDate;
        //        HttpContext.Session.SetString("ReportQuery", "Exec Accounts_LedgerList '" + ComId + "','" + Id + "',0,'" + UrlLink + "','" + FromDate + "', '" + ToDate + "' ,'" + Type + "','" + IsPosted + "' ");



        //        var abcd = HttpContext.Session.GetString("ReportQuery");
        //        HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Accounts/" + reportname + ".rdlc");
        //        HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));
        //        //HttpContext.Session.SetString("ReportType", rptFormat);


        //        string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
        //        redirectUrl = callBackUrl;



        //        return Json(new { Url = redirectUrl });

        //    }

        //    catch (Exception ex)
        //    {
        //        // If Sucess== 0 then Unable to perform Save/Update Operation and send Exception to View as JSON
        //        return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
        //    }

        //    return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
        //    //return RedirectToAction("Index", "ReportViewer");
        //}



        [AllowAnonymous]
        public ActionResult EmployeeBalanceViewReport(int ReferanceId, string FromDate, string ToDate, string Type)
        {
            try
            {


                DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date);
                DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date);

                if (FromDate == null || FromDate == "")
                {
                }
                else
                {
                    dtFrom = Convert.ToDateTime(FromDate);

                }
                if (ToDate == null || ToDate == "")
                {
                }
                else
                {
                    dtTo = Convert.ToDateTime(ToDate);

                }


                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var employeeid = "";
                if (ReferanceId > 0)
                {
                    employeeid = ReferanceId.ToString();
                }

                var quary = $"Exec Acc_EmployeeBalance  '" + ComId + "','" + employeeid + "',0,'" + dtFrom + "' ,'" + dtTo + "','" + Type + "'";


                SqlParameter[] parameters = new SqlParameter[8];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@EmployeeId", employeeid);
                parameters[2] = new SqlParameter("@UrlLink", "");
                parameters[3] = new SqlParameter("@FromDate", (dtFrom));
                parameters[4] = new SqlParameter("@ToDate", (dtTo));
                parameters[5] = new SqlParameter("@LedgerFor", "");
                parameters[6] = new SqlParameter("@BalanceUpdate", 0);
                parameters[7] = new SqlParameter("@SalarySheetId", 0);

                List<EmployeeLedgerModel> employeebalancelist = Helper.ExecProcMapTList<EmployeeLedgerModel>("Acc_EmployeeBalance ", parameters);



                //var datasetabc = new System.Data.DataSet();
                //datasetabc = Helper.ExecProcMapDS(quary);
                //var b = DataTableConverter<EmployeeLedgerModel>.ConvertDataTableToObject(datasetabc.Tables[0]);
                //var c = b;

                //return View(b);
                return View(employeebalancelist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }















        [AllowAnonymous]
        public IActionResult SubsidiaryLedger(string rptFormat, int Id, string Type, string FromDate, string ToDate, int isViewPageReport = 0, int IsPosted = 1)
        {
            try
            {
                //var weburl = HttpContext.Session.GetString("weburl"); //"https://pqstec.com/invoiceapps/Home/login/?ReturnUrl=%2Finvoiceapps%2FAdmin%2FInvoiceBillList";// 
                string weburl = configuration.GetSection("hostimage").Value;
                HttpContext.Session.SetString("weburl", weburl);

                //errorlog(weburl);

                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                string UrlLink = "";
                string redirectUrl = "";
                var reportname = "rptTransactionLedger";
                //string FromDate = "1-jan-2020";
                //string ToDate = "31-Dec-2023";


                string filename = "";

                if (Type == "Supplier")
                {
                    filename = _supplierRepository.All().Where(x => x.Id == Id).Select(x => x.SupplierName).Single();
                }
                else if (Type == "SupplierNotPosted")
                {
                    filename = _supplierRepository.All().Where(x => x.Id == Id).Select(x => x.SupplierName).Single();
                }
                else if (Type == "Customer")
                {
                    filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                }
                else if (Type == "AllCustomerBalance")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("CustomerLedgerBalanceViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }
                else if (Type == "AllCustomerAgingBalance")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("CustomerAgingBalanceViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }
                else if (Type == "AllSupplierAgingBalance")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("SupplierAgingBalanceViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }
                else if (Type == "AllCustomerBalance_AllSales")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("CustomerBalanceAllSalesViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }
                else if (Type == "AllCustomerBalance_AllSalesQty")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("CustomerBalanceAllSalesQtyViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }




                else if (Type == "EmployeeList")
                {
                    filename = _employeeRepository.All().Where(x => x.Id == Id).Select(x => x.EmployeeName).Single();
                }
                else if (Type == "AllEmployeeBalance")
                {
                    redirectUrl = Url.Action("EmployeeBalanceViewReport", "Admin", new { ReferanceId = Id, FromDate = FromDate, ToDate = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }
                else if ((Type == "EmployeeNotPosted"))
                {
                    filename = _employeeRepository.All().Where(x => x.Id == Id).Select(x => x.EmployeeName).Single();
                }



                else if (Type == "RewardPointSummary")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("CustomerRewardBalanceSummaryViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }
                else if (Type == "RewardPointDetails")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("CustomerRewardBalanceDetailsViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }



                else if (Type == "AllSupplierBalance")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("SupplierLedgerBalanceViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type });
                    return Json(new { Url = redirectUrl });
                }
                else if ((Type == "CustomerNotPosted") || (Type == "CustomerIsNotPosted") || (Type == "CustomerRewardPointNotPosted"))
                {
                    filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                }
                else if (Type == "Account")
                {
                    filename = _accountHeadRepository.All().Where(x => x.Id == Id).Select(x => x.AccName).Single();
                }
                else if (Type == "SupplierPerformanceIMEI")
                {
                    string ReferanceId = "";
                    if (Id > 0)
                    {
                        filename = _supplierRepository.All().Where(x => x.Id == Id).Select(x => x.SupplierName).Single();
                        ReferanceId = Id.ToString();
                    }
                    else
                    {
                        filename = "All_Supplier_IMEI_Performance";

                    }
                    redirectUrl = Url.Action("ProductPerformanceBySupplierViewReport", "Admin", new { ReferanceId = ReferanceId, dtFrom = FromDate, dtTo = ToDate, Type = "IMEI" });
                    return Json(new { Url = redirectUrl });
                }
                else if (Type == "SupplierPerformanceALL")
                {


                    string ReferanceId = "";
                    if (Id > 0)
                    {
                        filename = _supplierRepository.All().Where(x => x.Id == Id).Select(x => x.SupplierName).Single();
                        ReferanceId = Id.ToString();
                    }
                    else
                    {
                        filename = "All_Supplier_Performance_ALL";

                    }


                    redirectUrl = Url.Action("ProductPerformanceBySupplierViewReport", "Admin", new { ReferanceId = ReferanceId, dtFrom = FromDate, dtTo = ToDate, Type = "ALL" });
                    return Json(new { Url = redirectUrl });
                }
                else if (Type == "Accounts Receivable")
                {
                    filename = _accountHeadRepository.All().Where(x => x.Id == Id).Select(x => x.AccName).Single();
                }
                else
                {
                    filename = _accountHeadRepository.All().Where(x => x.Id == Id).Select(x => x.AccName).Single();
                    Type = _accountHeadRepository.All().Include(x => x.AccountCategorys).Where(x => x.Id == Id).FirstOrDefault().AccountCategorys.AccountType;
                }


                if (isViewPageReport == 1)
                {
                    redirectUrl = Url.Action("AccountsLedgerViewReport", "Admin", new { ReferanceId = Id, dtFrom = FromDate, dtTo = ToDate, Type = Type, IsPosted = IsPosted });
                    return Json(new { Url = redirectUrl });
                }



                //reportname = "rptTransactionLedger";
                filename = "Ledger_From_" + FromDate + "To_" + ToDate;
                HttpContext.Session.SetString("ReportQuery", "Exec Accounts_LedgerList '" + ComId + "','" + Id + "',0,'" + UrlLink + "','" + FromDate + "', '" + ToDate + "' ,'" + Type + "','" + IsPosted + "' ");



                var abcd = HttpContext.Session.GetString("ReportQuery");
                HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Accounts/" + reportname + ".rdlc");
                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));
                //HttpContext.Session.SetString("ReportType", rptFormat);


                string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                redirectUrl = callBackUrl;



                return Json(new { Url = redirectUrl });

            }

            catch (Exception ex)
            {
                // If Sucess== 0 then Unable to perform Save/Update Operation and send Exception to View as JSON
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
            //return RedirectToAction("Index", "ReportViewer");
        }



        [AllowAnonymous]
        public ActionResult CustomerLedgerBalanceViewReport(int ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var customerid = "";
                if (ReferanceId > 0)
                {
                    customerid = ReferanceId.ToString();
                }

                var quary = $"Exec Acc_CustomerBalance  '" + ComId + "','" + customerid + "',0,'" + dtFrom + "' ,'" + dtTo + "','" + Type + "',0";


                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@CustomerId", customerid);
                parameters[2] = new SqlParameter("@UrlLink", "-");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[5] = new SqlParameter("@LedgerFor", Type);
                parameters[6] = new SqlParameter("@BalanceUpdate", 0);




                List<CustomerLedgerModel> customerbalancelist = Helper.ExecProcMapTList<CustomerLedgerModel>("Acc_CustomerBalance", parameters);


                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(customerbalancelist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public ActionResult SupplierAgingBalanceViewReport(int ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var customerid = "";
                if (ReferanceId > 0)
                {
                    customerid = ReferanceId.ToString();
                }

                var quary = $"Exec [Acc_rptSupplierAging]  '" + ComId + "','" + UserId + "','" + dtFrom + "' ,'" + dtTo + "','18',0,1,'-'";


                SqlParameter[] parameters = new SqlParameter[8];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@LUserId", UserId);
                parameters[2] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[3] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[4] = new SqlParameter("@Currency", "18");
                parameters[5] = new SqlParameter("@Chkfc", "0");
                parameters[6] = new SqlParameter("@WarehouseId", "1");
                parameters[7] = new SqlParameter("@urlLink", "-");


                List<SupplierLedgerModel> customerbalancelist = Helper.ExecProcMapTList<SupplierLedgerModel>("Acc_rptSupplierAging", parameters);


                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(customerbalancelist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        [AllowAnonymous]
        public ActionResult CustomerAgingBalanceViewReport(int ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var customerid = "";
                if (ReferanceId > 0)
                {
                    customerid = ReferanceId.ToString();
                }

                var quary = $"Exec [Acc_rptCustomerAging]  '" + ComId + "','" + UserId + "','" + dtFrom + "' ,'" + dtTo + "','18',0,1,'-'";


                SqlParameter[] parameters = new SqlParameter[8];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@LUserId", UserId);
                parameters[2] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[3] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[4] = new SqlParameter("@Currency", "18");
                parameters[5] = new SqlParameter("@Chkfc", "0");
                parameters[6] = new SqlParameter("@WarehouseId", "1");
                parameters[7] = new SqlParameter("@urlLink", "-");


                List<CustomerLedgerModel> customerbalancelist = Helper.ExecProcMapTList<CustomerLedgerModel>("Acc_rptCustomerAging", parameters);


                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(customerbalancelist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public ActionResult CustomerBalanceAllSalesViewReport(int ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var customerid = "";
                if (ReferanceId > 0)
                {
                    customerid = ReferanceId.ToString();
                }

                var quary = $"Exec Acc_CustomerBalance_AllSales  '" + ComId + "','" + customerid + "','-','" + dtFrom + "' ,'" + dtTo + "',0, 1";


                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@CustomerId", customerid);
                parameters[2] = new SqlParameter("@UrlLink", "-");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[5] = new SqlParameter("@SalesId", 0);
                parameters[6] = new SqlParameter("@IsReport", 1);





                List<CustomerLedgerModel> customerbalancelist = Helper.ExecProcMapTList<CustomerLedgerModel>("Acc_CustomerBalance_AllSales", parameters);


                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(customerbalancelist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public ActionResult CustomerBalanceAllSalesQtyViewReport(int ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var customerid = "";
                if (ReferanceId > 0)
                {
                    customerid = ReferanceId.ToString();
                }

                var quary = $"Exec Acc_CustomerBalance_Quantity  '" + ComId + "','" + customerid + "','-','" + dtFrom + "' ,'" + dtTo + "',0, 1";


                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@CustomerId", customerid);
                parameters[2] = new SqlParameter("@UrlLink", "-");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[5] = new SqlParameter("@SalesId", 0);
                parameters[6] = new SqlParameter("@IsReport", 1);





                List<CustomerLedgerQtyModel> customerbalancelist = Helper.ExecProcMapTList<CustomerLedgerQtyModel>("Acc_CustomerBalance_Quantity", parameters);


                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(customerbalancelist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public ActionResult ProductPerformanceBySupplierViewReport(int ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var quary = $"Exec Inventory_ProductPerformance  '" + ComId + "','" + ReferanceId + "','" + dtFrom + "' ,'" + dtTo + "'";


                SqlParameter[] parameters = new SqlParameter[4];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@Id", ReferanceId);
                parameters[2] = new SqlParameter("@FromDate", dtFrom);
                parameters[3] = new SqlParameter("@ToDate", dtTo);


                List<ProductPerformance> TrialBalanceReport = Helper.ExecProcMapTList<ProductPerformance>("Inventory_ProductPerformance", parameters);

                return View(TrialBalanceReport);


                //var productperformance = _productRepository.All()
                //.Include(x => x.SalesItems).ThenInclude(x => x.SalesModel).ThenInclude(x => x.CustomerModel)
                //.Include(x => x.PurchaseItems).ThenInclude(x => x.PurchaseModel).ThenInclude(x => x.SupplierModel)
                //.Include(x => x.CompanyList).ThenInclude(x => x.storeinfo).ThenInclude(x => x.SalesReportStyle)
                //.Where(x => x.PurchaseItems.FirstOrDefault().PurchaseModel.SupplierId == ReferanceId);

                //            return View(productperformance);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public ActionResult AccountsLedgerViewReport(int ReferanceId, string dtFrom, string dtTo, string Type, int IsPosted = 1)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var quary = $"Exec Accounts_LedgerList  '" + ComId + "','" + ReferanceId + "',0, '','" + dtFrom + "' ,'" + dtTo + "','" + Type + "','" + IsPosted + "'";


                SqlParameter[] parameters = new SqlParameter[8];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@Id", ReferanceId);
                parameters[2] = new SqlParameter("@IncomeHead", 0);
                parameters[3] = new SqlParameter("@UrlLink", "");
                parameters[4] = new SqlParameter("@FromDate", dtFrom);
                parameters[5] = new SqlParameter("@ToDate", dtTo);
                parameters[6] = new SqlParameter("@LedgerFor", Type);
                parameters[7] = new SqlParameter("@IsPosted", IsPosted);



                List<SubsidiaryLedgerModel> TrialBalanceReport = Helper.ExecProcMapTList<SubsidiaryLedgerModel>("Accounts_LedgerList", parameters);

                return View(TrialBalanceReport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        public partial class SubsidiaryLedgerModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }




            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public string? SLNo { get; set; }
            public string? Particulars { get; set; }
            public string? Amount { get; set; }


            public string? ReferanceName { get; set; }
            public string? InputDate { get; set; }
            public string? Name { get; set; }


            public string? Type { get; set; }
            public string? ReceivePayName { get; set; }
            public string? ReferanceDocNo { get; set; }

            public string? TransactionId { get; set; }
            public string? SalesId { get; set; }
            public string? SalesReturnId { get; set; }
            public string? PurchaseId { get; set; }
            public string? PurchaseReturnId { get; set; }

            public string? IssueId { get; set; }
            public string? DamageId { get; set; }

            public string? DisplayCode { get; set; }

            public int? isSystem { get; set; }
        }

        public partial class CustomerLedgerModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public string? SLNo { get; set; }

            public int? CustomerId { get; set; }

            public string? CustomerName { get; set; }
            public string? CustomerCode { get; set; }


            public string? PhoneNo { get; set; }
            public string? PrimaryAddress { get; set; }

            public string? FromDate { get; set; }
            public string? ToDate { get; set; }

            public string? OpeningBalance { get; set; }

            public string? SalesAmount { get; set; }
            public string? SalesPayment { get; set; }
            public string? SalesReturn { get; set; }

            public string? SalesReturnPayment { get; set; }
            public string? AccountsTransaction { get; set; }
            public string? FinalAmount { get; set; }
            public string? Discount { get; set; }


            public int? isSystem { get; set; }



            public string? ForwardSalesBalanceQty { get; set; }
            public string? ReturnSalesBalanceQty { get; set; }
            public string? TokenSalesBalanceQty { get; set; }
            public string? TotalBalanceQty { get; set; }
            public string? CustomerLedgerBalance { get; set; }



            public string? ZeroToThirtyDays { get; set; }
            public string? ThirtyToSixtyDays { get; set; }
            public string? SixtyToNinetyDays { get; set; }
            public string? OverNinetyDays { get; set; }

        }

        public partial class CustomerLedgerQtyModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public string? SLNo { get; set; }

            public string? TransactionDate { get; set; }
            public string? DisplayCode { get; set; }
            public string? DocType { get; set; }

            public int? CustomerId { get; set; }
            public int? SalesId { get; set; }
            public int? TransactionId { get; set; }

            public string? CustomerName { get; set; }

            public string? PhoneNo { get; set; }
            public string? PrimaryAddress { get; set; }

            public string? FromDate { get; set; }
            public string? ToDate { get; set; }


            public string? IssueQuantity { get; set; }

            public string? ReturnQuantity { get; set; }
            public string? ForwardSalesQuantity { get; set; }
            public string? TokenNetQuantity { get; set; }

            public string? SalesQuantity { get; set; }
            public string? SalesAmount { get; set; }
            public string? CollectionAmount { get; set; }

        }


        public partial class ProductPerformance
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }


            public string? ProductCode { get; set; }
            public string? ProductName { get; set; }
            public string? SupplierName { get; set; }
            public float PurchaseQty { get; set; }
            public float SalesQty { get; set; }

            public float TotalPurchaseValue { get; set; }
            public float TotalSalesValue { get; set; }
            public float TotalSoldCostValue { get; set; }
            public float TotalSoldAvgCostValue { get; set; }






        }

        ///need to develop by all report or something else
        [AllowAnonymous]
        [HttpPost, ActionName("SetSessionLedgerReport")]
        ////[Authorize(Roles = "Admin, SuperAdmin , Commercial-Admin ")]
        //[OverridableAuthorize]
        //[ValidateAntiForgeryToken]
        public JsonResult SetSessionLedgerReport(string rptFormat, string action, string FromDate, string ToDate, string InternetUserId, string Id)
        {
            try
            {
                var ComId = (HttpContext.Session.GetInt32("ComId"));
                string UrlLink = "";
                var reportname = "";
                var filename = "";
                string redirectUrl = "";

                if (action == "SupplierLedgerReport")
                {
                    reportname = "rptTransactionLedger";
                    filename = "Ledger_From_" + FromDate + "To_" + ToDate;
                    HttpContext.Session.SetString("ReportQuery", "Exec Accounts_LedgerList '" + ComId + "','" + Id + "',0," + UrlLink + ",'" + FromDate + "', '" + ToDate + "' , 'Supplier'  ");

                }
                //else if (action == "PrintSubLedger")
                //{

                //    reportname = "rptInternetUserLedger";
                //    filename = "rptInternetUserLedger_" + InternetUserId;
                //    HttpContext.Session.SetString("ReportQuery", "Exec InternetService_LedgerList '" + ComId + "','" + InternetUserId + "','" + FromDate + "','" + ToDate + "','" + UrlLink + "'   ");


                //}


                var abcd = HttpContext.Session.GetString("ReportQuery");
                HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Accounts/" + reportname + ".rdlc");
                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));
                HttpContext.Session.SetString("ReportType", rptFormat);


                string DataSourceName = "DataSet1";
                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");// Session["ReportPath"].ToString();
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
                clsReport.strDSNMain = DataSourceName;
                string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                redirectUrl = callBackUrl;

                return Json(new { Url = redirectUrl });

            }

            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            //return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
            //return RedirectToAction("Index");

        }






        [AllowAnonymous]
        public JsonResult GetsupplierList(string Status, bool IncludingInative, int pageNo = 1, decimal pageSize = 10, string searchquery = "")
        {
            try
            {
                //var products= _context.Products.ToList();


                var suppliers = _supplierRepository.All().Include(x => x.AccountsDailyTransaction).AsQueryable();//.Include(x=>x.vUnit).Include(x=>x.Category);


                //if (searchquery?.Length > 1)
                //{
                //    suppliers = suppliers.Where(x => x.SupplierName.ToLower().Contains(searchquery.ToLower()) || x.Notes.ToLower().Contains(searchquery.ToLower()));
                //}


                if (searchquery?.Length > 1)
                {


                    var searchitem = JsonConvert.DeserializeObject<SupplierListFilterData>(searchquery);

                    if (searchitem.pageIndex != null)
                    {
                        pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                        pageSize = searchitem.pageSize.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())


                    }





                    if (searchitem.SupplierName != null)
                    {
                        suppliers = suppliers.Where(x => x.SupplierName.ToLower().Contains(searchitem.SupplierName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                    if (searchitem.Notes != null)
                    {
                        suppliers = suppliers.Where(x => x.Notes.ToLower().Contains(searchitem.Notes.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                    if (searchitem.ClBalance != null)
                    {
                        suppliers = suppliers.Where(x => x.ClBalance.ToString().Contains(searchitem.ClBalance.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                    if (searchitem.Address != null)
                    {
                        suppliers = suppliers.Where(x => x.PrimaryAddress.ToLower().Contains(searchitem.Address.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }



                }


                if (Status == "Due")
                {
                    suppliers = suppliers.Where(x => x.ClBalance > 0);
                }

                decimal TotalRecordCount = suppliers.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);





                decimal skip = (pageNo - 1) * pageSize;

                // Get total number of records
                int total = suppliers.Count();



                var query = from e in suppliers//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)
                                               //let TotalPurchase = (decimal)e.OpBalance + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase" && x.IsDelete == false).Sum(x => (decimal)x.TransactionAmount)
                                               //let TotalPaid = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && x.IsDelete == false).Sum(x => (decimal)x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received") && x.IsDelete == false).Sum(x => (decimal)x.TransactionAmount)
                                               //let TotalReturn = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("System Purchase Return") && x.IsDelete == false).Sum(x => (decimal)x.TransactionAmount)
                            select new// SupplierResultList
                            {
                                Id = e.Id,
                                Name = e.SupplierName,
                                SupType = e.SupType,
                                ParentSupplier = e.Suppliers.SupplierName,
                                Email = e.Email,
                                Address = e.PrimaryAddress,
                                Notes = e.Notes,
                                Phone = e.Phone,
                                e.ClBalance,




                                //TotalPurchaseValue = TotalPurchase - TotalReturn,//e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount),
                                ////TotalPurchaseReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount),
                                //TotalPayment = TotalPaid,//e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
                                ////TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
                                ////TotalDue = 0,//e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount) - e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount) + e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),


                                //TotalDue =
                                //(decimal)e.OpBalance
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid") && !x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionCategory.Contains("CustomerDiscount")).Sum(x => x.TransactionAmount),






                                //LastPurchaseDate = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseDate.ToString("dd-MMM-yy") ?? "",
                                //LastInvoiceNo = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseCode ?? "",
                                //LastPurchaseProduct = e.Purchase.OrderByDescending(x => x.Id).FirstOrDefault().Items.OrderByDescending(x => x.Id).FirstOrDefault().Product.Name ?? "",




                                //TotalPurchaseValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount),
                                //TotalPurchaseReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount),
                                //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
                                //TotalPayment = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),

                                //TotalDue =
                                //(decimal)e.OpBalance
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount)

                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount)
                                ////- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received") && !x.TransactionCategory.Contains("SupplierDiscount")).Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionCategory.Contains("SupplierDiscount")).Sum(x => x.TransactionAmount),


                                //TotalDue =
                                //(decimal)e.OpBalance
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount)
                                //+ e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received") && !x.TransactionCategory.Contains("SupplierDiscount")).Sum(x => x.TransactionAmount)
                                //- e.AccountsDailyTransaction.Where(x => x.TransactionCategory.Contains("SupplierDiscount")).Sum(x => x.TransactionAmount),
                                //TotalPurchaseValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase").Sum(x => x.TransactionAmount),
                                //TotalPurchaseReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Purchase Return").Sum(x => x.TransactionAmount),
                                //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),
                                //TotalPayment = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),




                                //TotalSalesValue = (decimal)e.OpBalance + e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales").Sum(x => x.TransactionAmount),
                                //TotalSalesReturnValue = e.AccountsDailyTransaction.Where(x => x.TransactionType == "System Sales Return").Sum(x => x.TransactionAmount),
                                //TotalAmountBack = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Paid")).Sum(x => x.TransactionAmount),
                                //TotalCollection = e.AccountsDailyTransaction.Where(x => x.TransactionType.Contains("Received")).Sum(x => x.TransactionAmount),





                            };



                //if (Status == "Due")
                //{
                //    query = query.Where(x => x.TotalPurchaseValue - x.TotalPayment != 0);
                //}

                //var parser = new Parser<SupplierResultList>(Request.Form, query);
                //return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);





                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, SupplierList = abcd, PageInfo = pageinfo });



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Addsupplier(SupplierModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _supplierRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.SupplierName.ToString());
                    return Json(new { success = "1", message = "Data Save Successfully" });

                }
                else
                {
                    _supplierRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.SupplierName.ToString());
                    return Json(new { success = "1", message = "Data updated Successfully" });

                }
                return RedirectToAction("SupplierList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult UploadSupplierImage(IFormFile file, [FromForm] string PurchaseIdAbc)
        {
            var Supplierinfo = _supplierRepository.Find(int.Parse(PurchaseIdAbc));

            string filePath = configuration.GetValue<string>("MediaManager:VoucherFilePath");
            var folderPath = filePath + "/";
            var filename = string.Empty;

            if (file != null && file.Length > 0)
            {
                filename = Supplierinfo.Id + '_' + Supplierinfo.ComId + file.FileName;

                var path = Path.Combine(
                    Directory.GetCurrentDirectory(), "wwwroot/Content/SupplierImages",
                    filename);

                using (var stream = new FileStream(path, FileMode.Create))
                {
                    file.CopyTo(stream);
                }
                Supplierinfo.FilePath = $"/Content/SupplierImages/{filename}";

                string serverFolder = Path.Combine(_webHostEnvironment.WebRootPath, folderPath);
                serverFolder += Guid.NewGuid().ToString() + "_" + file.FileName;
                file.CopyToAsync(new FileStream(serverFolder, FileMode.Create));
                Supplierinfo.SupplierFilePath = serverFolder;
            }

            // Update the Supplierinfo object even when no file was selected
            Supplierinfo.FilePath = Supplierinfo.FilePath;
            Supplierinfo.SupplierFilePath = Supplierinfo.SupplierFilePath;
            _supplierRepository.Update(Supplierinfo, Supplierinfo.Id);

            return Json(new { status = "File upload Successfully." });
        }



        //[HttpPost]
        ////[AllowAnonymous]
        //[OverridableAuthorize]
        //public IActionResult AddUpdatesupplierQB(SupplierModel model)
        //{

        //    try
        //    {
        //        var errors = ModelState.Where(x => x.Value.Errors.Any())
        //    .Select(x => new { x.Key, x.Value.Errors });

        //        //if (ModelState.IsValid)
        //        //{
        //        if (model.Id == 0)
        //        {
        //            //if (model.AccCode == null || model.AccCode == "")
        //            //{
        //            //    var parentdata = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.Id == model.ParentId).FirstOrDefault();
        //            //    var accountdatamaxid = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.ParentId == model.ParentId).OrderByDescending(x => x.Id).FirstOrDefault();
        //            //    model.AccCode = parentdata.AccCode + (accountdatamaxid.NumericNumber + 1).ToString().PadLeft(2, '0').ToString();
        //            //    model.NumericNumber = accountdatamaxid.NumericNumber + 1;
        //            //}

        //            _supplierRepository.Insert(model);



        //            TempData["Message"] = "Data Save Successfully";
        //            TempData["Status"] = "1";
        //            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.AccName.ToString());


        //            //procedure call to insert accounthead by multicurrency starts
        //            var ComId = HttpContext.Session.GetInt32("ComId");
        //            var LuserId = (HttpContext.Session.GetInt32("UserId"));
        //            var queryname = "procSetAccountHeadForSupplierCustomer";

        //            var viewquery = $"Exec {queryname} '{ComId}' '{model.LuserId}' '{"Supplier"}' '{model.Id}' '{model.SupplierCurrencyId}'";

        //            Console.WriteLine(viewquery);
        //            SqlParameter[] parameters = new SqlParameter[5];
        //            parameters[0] = new SqlParameter("@ComId", ComId);
        //            parameters[1] = new SqlParameter("@LuserId", model.LuserId);
        //            parameters[2] = new SqlParameter("@Criteria", "Supplier");
        //            parameters[3] = new SqlParameter("@SupplierId", model.Id);
        //            parameters[4] = new SqlParameter("@CurrencyId", model.SupplierCurrencyId);

        //            var datasetabc = new System.Data.DataSet();
        //            datasetabc = Helper.ExecProcMapDS(queryname, parameters);

        //            return Json(new { success = "1", message = "Data Save Successfully", Id = model.Id });

        //        }
        //        else
        //        {
        //            _supplierRepository.Update(model, model.Id);


        //            TempData["Message"] = "Data Update Successfully";
        //            TempData["Status"] = "2";
        //            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.AccName.ToString());
        //            return Json(new { success = "1", message = "Data Update Successfully", Id = model.Id });

        //        }
        //        //return RedirectToAction("BillListQB", "Accounts");
        //        //}
        //        //else
        //        //{

        //        //    return Json(new { error = true, message = "failed to save Supplier" });
        //        //}
        //        //else
        //        //{
        //        //    if (model.Id == 0)
        //        //    {
        //        //        ViewBag.ActionType = "Create";



        //        //    }
        //        //    else
        //        //    {
        //        //        ViewBag.ActionType = "Edit";
        //        //        //ViewBag.AccountGroupHead = _supplierRepository.GetAccountGroupHeadForDropDown();
        //        //    }
        //        //}
        //        //return View(model);
        //    }
        //    catch (Exception ex)
        //    {

        //        return Json(new { error = true, message = ex.Message });
        //    }
        //}


        [HttpGet]
        public ActionResult Editsupplier(int SupplierId)
        {
            ViewBag.ActionType = "Edit";
            ViewBag.SupplierGroupHead = _supplierRepository.GetSupplierGroupHeadForDropDown();
            var supplier = _supplierRepository.Find(SupplierId);
            return View("Addsupplier", supplier);
        }
        //[HttpGet]
        ////[AllowAnonymous]
        //[OverridableAuthorize]
        //public JsonResult GetSupplierForEdit(int SupplierId)
        //{
        //    try
        //    {

        //        var supplierData = _supplierRepository.All().Where(x => x.Id == SupplierId)
        //            .Select(x => new
        //            {
        //                x.Id,
        //                x.Title,
        //                x.FirstName,
        //                x.MiddleName,
        //                x.LastName,
        //                x.Suffix,
        //                x.SupplierName,
        //                x.CompanyName,
        //                x.Email,
        //                x.Phone,
        //                x.MobileNo,
        //                x.Fax,
        //                x.Other,
        //                x.Website,
        //                x.StreetAddress,
        //                x.City,
        //                x.Province,
        //                x.PostalCode,
        //                x.Country,
        //                x.Notes,
        //                x.BusinessIdNo,
        //                x.BillingRate,
        //                x.FilePath,
        //                TermsId = x.PaymentTermsId,
        //                TermName = x.PaymentTermsInfo.TermName,
        //                x.AccountNo,
        //                ExpenseCategoryId = x.AccIdExpenseCategory,
        //                ExpenseCategoryName = x.ExpenseCategoryAccount.AccName,
        //                x.ClBalance,
        //                x.OpBalance,
        //                //x.AsOf,
        //                AsOf = x.AsOf.HasValue ? x.AsOf.Value.ToString("dd-MMM-yyyy") : null
        //            }).FirstOrDefault();

        //        //return Json(singleCustomer);
        //        return Json(new { success = "1", data = supplierData });


        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { success = "0", message = ex });
        //        //throw ex;
        //    }
        //}

        public ActionResult Deletesupplier(int Id)
        {
            var model = _supplierRepository.Find(Id);
            if (model != null)
            {
                _supplierRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.SupplierName);



                return RedirectToAction("SupplierList");
            }
            return RedirectToAction("SupplierList");
        }
        #endregion

        #region SubscriptionActivation
        public IActionResult SubscriptionActivationList()
        {
            //return View(_SubscriptionActivationRepository.All());
            return View();

        }

        [HttpGet]
        public ActionResult AddSubscriptionActivation()
        {
            ViewBag.ActionType = "Create";


            ViewBag.User = _userAccountRepository.GetAllUserForDropDownNoComId();
            ViewBag.SubscrtiptionType = _subscriptionTypeRepository.GetActiveForDropDown();

            return View();
        }


        public class SubscriptionActivationResultList : SubscriptionActivationModel
        {
            public string? UserName { get; set; }
            public string? CompanyName { get; set; }


            public string? Email { get; set; }

            public string? UserMobile { get; set; }

            public string? SubscriptionTypeName { get; set; }
            public string? ActivateFromDateString { get; set; }
            public string? ActivateToDateString { get; set; }

        }

        [AllowAnonymous]
        public JsonResult GetSubscriptionActivationList()
        {
            try
            {
                //var products= _context.Products.ToList();


                var SubscriptionActivations = _SubscriptionActivationRepository.All()
                    .Include(x => x.UserAccount).ThenInclude(x => x.CompanyList);
                //.Include(x=>x.vUnit).Include(x=>x.Category);
                var query = from e in SubscriptionActivations//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new SubscriptionActivationResultList
                            {
                                Id = e.Id,
                                Amount = e.Amount,

                                ValidityDay = e.ValidityDay,
                                IsActive = e.IsActive,
                                Email = e.UserAccount.Email,


                                ActivateFromDateString = e.ActiveFromDate.ToString("dd-MMM-yy"),
                                ActivateToDateString = e.ActiveToDate.ToString("dd-MMM-yy"),
                                SubscriptionTypeName = e.SubscriptionType.SubscriptionName,

                                UserName = e.UserAccount.Name,
                                UserMobile = e.UserAccount.PhoneNumber,


                                CompanyName = e.UserAccount.CompanyList.CompanyName,

                                Remarks = e.Remarks
                            };



                var parser = new Parser<SubscriptionActivationResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddSubscriptionActivation(SubscriptionActivationModel model)
        {
            var errors = ModelState.Where(x => x.Value.Errors.Any())
               .Select(x => new { x.Key, x.Value.Errors });

            if (ModelState.IsValid)
            {
                //model.ValidityDay = (model.ActiveToDate - model.ActiveFromDate).TotalDays;



                if (model.Id == 0)
                {
                    _SubscriptionActivationRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Remarks);

                }
                else
                {

                    var userinfo = _userAccountRepository.All(false).Where(x => x.Id == model.LuserId).OrderByDescending(x => x.Id).FirstOrDefault();
                    if (userinfo.IsEmailVerified == false)
                    {
                        userinfo.OTP = "";
                        userinfo.IsEmailVerified = true;
                    }

                    _SubscriptionActivationRepository.Update(model, model.Id);


                    ////for auto update all of the user if update just only one user same Company permission type user
                    var usercomid = _userAccountRepository.All(false).Where(x => x.Id == model.LuserId).FirstOrDefault().ComId;
                    var companypermission = _companyPermissionRepository.All().Where(x => x.ComId == usercomid).ToList();

                    foreach (var item in companypermission)
                    {

                        var subscriptionactivationuser = _SubscriptionActivationRepository.All().Where(x => x.LuserId == item.LuserId).FirstOrDefault();
                        if (subscriptionactivationuser != null)
                        {
                            subscriptionactivationuser.ActiveToDate = model.ActiveToDate;
                            subscriptionactivationuser.SubscriptionTypeId = model.SubscriptionTypeId;
                            subscriptionactivationuser.Amount = model.Amount;
                            subscriptionactivationuser.Remarks = model.Remarks;

                            subscriptionactivationuser.ValidityDay = (model.ActiveToDate - DateTime.Now.Date).Days;
                            if (subscriptionactivationuser.ValidityDay > 0)
                            {
                                subscriptionactivationuser.IsActive = true;
                            }
                            else
                            {
                                subscriptionactivationuser.IsActive = false;
                            }

                            _SubscriptionActivationRepository.Update(subscriptionactivationuser, subscriptionactivationuser.Id);
                        }


                    }
                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Remarks);
                    //_SubscriptionActivationRepository.Update(model, model.Id);


                    //TempData["Message"] = "Data Update Successfully";
                    //TempData["Status"] = "2";
                    //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Remarks);

                }
                return RedirectToAction("SubscriptionActivationList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditSubscriptionActivation(int SubscriptionActivationId)
        {
            ViewBag.ActionType = "Edit";
            var SubscriptionActivation = _SubscriptionActivationRepository.Find(SubscriptionActivationId);
            ViewBag.User = _userAccountRepository.GetAllUserForDropDownNoComId();
            ViewBag.SubscrtiptionType = _subscriptionTypeRepository.GetActiveForDropDown();

            return View("AddSubscriptionActivation", SubscriptionActivation);
        }

        public ActionResult DeleteSubscriptionActivation(int SubscriptionActivationId)
        {
            var model = _SubscriptionActivationRepository.Find(SubscriptionActivationId);
            if (model != null)
            {
                _SubscriptionActivationRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Remarks);



                return RedirectToAction("SubscriptionActivationList");
            }
            return RedirectToAction("SubscriptionActivationList");
        }
        #endregion


        #region SubscriptionActivationCompany
        public IActionResult SubscriptionActivationCompanyList()
        {
            //return View(_SubscriptionActivationCompanyRepository.All());
            return View();

        }

        [HttpGet]
        public ActionResult AddSubscriptionActivationCompany()
        {
            ViewBag.ActionType = "Create";


            ViewBag.Company = _companyRepository.GetAllForDropDownSuperAdmin();
            ViewBag.SubscrtiptionType = _subscriptionTypeRepository.GetActiveForDropDown();

            return View();
        }


        public class SubscriptionActivationCompanyResultList : SubscriptionActivationCompanyModel
        {
            public string? UserName { get; set; }
            public string? CompanyName { get; set; }


            public string? Email { get; set; }

            public string? UserMobile { get; set; }

            public string? SubscriptionTypeName { get; set; }
            public string? ActivateFromDateString { get; set; }
            public string? ActivateToDateString { get; set; }

        }

        [AllowAnonymous]
        public JsonResult GetSubscriptionActivationCompanyList()
        {
            try
            {
                //var products= _context.Products.ToList();


                var SubscriptionActivationCompanys = _SubscriptionActivationCompanyRepository.All()
                    //.Include(x => x.UserAccount)
                    .Include(x => x.CompanyList);
                //.Include(x=>x.vUnit).Include(x=>x.Category);
                var query = from e in SubscriptionActivationCompanys//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new SubscriptionActivationCompanyResultList
                            {
                                Id = e.Id,
                                Amount = e.Amount,
                                ValidityDay = e.ValidityDay,
                                IsActive = e.IsActive,
                                Email = e.CompanyList.comEmail,
                                ActivateFromDateString = e.ActiveFromDate.ToString("dd-MMM-yy"),
                                ActivateToDateString = e.ActiveToDate.ToString("dd-MMM-yy"),
                                SubscriptionTypeName = e.SubscriptionType.SubscriptionName,
                                UserName = e.CompanyList.ContPerson,
                                UserMobile = e.CompanyList.comPhone,
                                CompanyName = e.CompanyList.CompanyName,
                                Remarks = e.Remarks
                            };

                var parser = new Parser<SubscriptionActivationCompanyResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddSubscriptionActivationCompany(SubscriptionActivationCompanyModel model)
        {
            if (ModelState.IsValid)
            {
                //model.ValidityDay = (model.ActiveToDate - model.ActiveFromDate).TotalDays;

                if (model.Id == 0)
                {
                    _SubscriptionActivationCompanyRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Remarks);

                }
                else
                {
                    _SubscriptionActivationCompanyRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Remarks);

                }
                return RedirectToAction("SubscriptionActivationCompanyList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditSubscriptionActivationCompany(int SubscriptionActivationCompanyId)
        {
            ViewBag.ActionType = "Edit";
            var SubscriptionActivationCompany = _SubscriptionActivationCompanyRepository.Find(SubscriptionActivationCompanyId);
            ViewBag.Company = _companyRepository.GetAllForDropDownSuperAdmin();
            ViewBag.SubscrtiptionType = _subscriptionTypeRepository.GetActiveForDropDown();

            return View("AddSubscriptionActivationCompany", SubscriptionActivationCompany);
        }

        public ActionResult DeleteSubscriptionActivationCompany(int SubscriptionActivationCompanyId)
        {
            var model = _SubscriptionActivationCompanyRepository.Find(SubscriptionActivationCompanyId);
            if (model != null)
            {
                _SubscriptionActivationCompanyRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Remarks);



                return RedirectToAction("SubscriptionActivationCompanyList");
            }
            return RedirectToAction("SubscriptionActivationCompanyList");
        }
        #endregion


        #region CreditBalance
        public IActionResult CreditBalanceList()
        {
            //return View(_CreditBalanceRepository.All());
            return View();

        }

        [HttpGet]
        public ActionResult AddCreditBalance()
        {
            ViewBag.ActionType = "Create";


            ViewBag.Company = _companyRepository.GetAllForDropDownSuperAdmin();
            ViewBag.Package = _SoftwarePackageRepository.GetAllForDropDown();


            return View();
        }


        public class CreditBalanceResultList : CreditBalanceModel
        {
            public string? CompanyName { get; set; }
            public string? PurchaseDateString { get; set; }
            public string? ValidityDateString { get; set; }
            [Column(TypeName = "decimal(18,4)")]
            public decimal Amount { get; set; }

            public int ValidityDay { get; set; }
            public int CreditBalance { get; set; }



        }

        [AllowAnonymous]
        public JsonResult GetCreditBalanceList()
        {
            try
            {
                //var products= _context.Products.ToList();
                var ComId = HttpContext.Session.GetInt32("ComId");

                var UserRole = HttpContext.Session.GetString("UserRole");
                var CreditBalances = _CreditBalanceRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);

                if (UserRole != "SuperAdmin")
                {
                    CreditBalances = CreditBalances.Where(x => x.ComId == ComId);
                }


                var query = from e in CreditBalances//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new CreditBalanceResultList
                            {
                                Id = e.Id,
                                PurchaseQuantity = e.PurchaseQuantity,
                                UsedQuantity = e.UsedQuantity,
                                PurchaseRate = e.PurchaseRate,
                                PurchaseDateString = e.ActivationDate.ToString("dd-MMM-yy"),
                                ValidityDateString = e.ValidityDate.ToString("dd-MMM-yy"),
                                CompanyName = e.CompanyList.CompanyName,
                                Amount = e.PurchaseQuantity * e.PurchaseRate,
                                ValidityDay = (int)((e.ValidityDate.Date - DateTime.Now.Date).TotalDays),
                                CreditBalance = e.PurchaseQuantity - e.UsedQuantity,//e.PurchaseQuantity - _creditUsedLogRepository.All().Sum(x=>x.Quantity),

                                Remarks = e.Remarks
                            };



                var parser = new Parser<CreditBalanceResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddCreditBalance(CreditBalanceModel model)
        {
            //if (ModelState.IsValid)
            {
                //model.ValidityDay = (model.ActiveToDate - model.ActiveFromDate).TotalDays;

                if (model.Id == 0)
                {
                    _CreditBalanceRepository.Insert(model);


                    var wallet = new WalletModel();
                    wallet.PurchaseDate = model.ActivationDate;
                    wallet.UsedAmount = model.PurchaseQuantity * model.PurchaseRate;
                    wallet.ValidityDate = model.ValidityDate;
                    wallet.ComId = model.ComId;
                    wallet.LuserId = model.LuserId;
                    wallet.RechargeAmount = 0;
                    wallet.IsSystem = true;
                    wallet.IsPost = false;
                    wallet.Remarks = "Auto Insert for Service Purchase";
                    _WalletRepository.Insert(wallet);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Remarks);

                }
                else
                {
                    _CreditBalanceRepository.Update(model, model.Id);


                    var wallet = _WalletRepository.All().Where(x => x.CreditBalanceId == model.Id).FirstOrDefault();

                    wallet.PurchaseDate = model.ActivationDate;
                    wallet.UsedAmount = model.PurchaseQuantity * model.PurchaseRate;
                    wallet.ValidityDate = model.ValidityDate;
                    wallet.ComId = model.ComId;
                    wallet.LuserId = model.LuserId;
                    wallet.RechargeAmount = 0;
                    wallet.IsSystem = true;
                    wallet.IsPost = false;
                    wallet.Remarks = "Auto Insert for Service Purchase";
                    _WalletRepository.Update(wallet, wallet.Id);



                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Remarks);

                }
                return RedirectToAction("CreditBalanceList");
            }
            //else
            //{
            //    if (model.Id == 0)
            //    {
            //        ViewBag.ActionType = "Create";
            //    }
            //    else
            //    {
            //        ViewBag.ActionType = "Edit";
            //    }
            //}
            return View(model);
        }

        [HttpGet]
        public ActionResult EditCreditBalance(int CreditBalanceId)
        {
            ViewBag.ActionType = "Edit";
            var CreditBalance = _CreditBalanceRepository.Find(CreditBalanceId);
            ViewBag.Company = _companyRepository.GetAllForDropDownSuperAdmin();
            ViewBag.Package = _SoftwarePackageRepository.GetAllForDropDown();


            return View("AddCreditBalance", CreditBalance);
        }

        public ActionResult DeleteCreditBalance(int CreditBalanceId)
        {
            var model = _CreditBalanceRepository.Find(CreditBalanceId);
            if (model != null)
            {
                _CreditBalanceRepository.Delete(model);


                var walletuseddata = _WalletRepository.Find(model.Id);
                _WalletRepository.Delete(walletuseddata);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Remarks);



                return RedirectToAction("CreditBalanceList");
            }
            return RedirectToAction("CreditBalanceList");
        }
        #endregion


        #region Wallet
        public IActionResult WalletList()
        {
            //return View(_WalletRepository.All());
            return View();

        }

        [HttpGet]
        public ActionResult AddWallet()
        {
            ViewBag.ActionType = "Create";

            WalletModel abc = new WalletModel();
            abc.UsedAmount = 0;
            abc.PurchaseDate = DateTime.Now.Date;
            abc.ValidityDate = DateTime.Now.Date;
            abc.RemainingBalance = 0;
            abc.RechargeAmount = 0;
            abc.IsPost = false;
            abc.IsSystem = false;




            ViewBag.Company = _companyRepository.GetAllForDropDownSuperAdmin();
            ViewBag.User = _userAccountRepository.GetAllUserForDropDownNoComId();


            return View(abc);
        }


        public class WalletResultList : WalletModel
        {
            public string? CompanyName { get; set; }

            public string? UserName { get; set; }
            public string? Email { get; set; }



            public string? PurchaseDateString { get; set; }
            public string? ValidityDateString { get; set; }
            [Column(TypeName = "decimal(18,4)")]
            public decimal Amount { get; set; }

            public int ValidityDay { get; set; }
            public int Wallet { get; set; }



        }

        [AllowAnonymous]
        public JsonResult GetWalletList()
        {
            try
            {
                //var products= _context.Products.ToList();
                var ComId = HttpContext.Session.GetInt32("ComId");

                var UserRole = HttpContext.Session.GetString("UserRole");
                var Wallets = _WalletRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);

                if (UserRole != "SuperAdmin")
                {
                    Wallets = Wallets.Where(x => x.ComId == ComId);
                }


                var query = from e in Wallets//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new WalletResultList
                            {
                                Id = e.Id,
                                RechargeAmount = e.RechargeAmount,
                                UsedAmount = e.UsedAmount,
                                RemainingBalance = e.RechargeAmount - e.UsedAmount,
                                PurchaseDateString = e.PurchaseDate.ToString("dd-MMM-yy"),
                                ValidityDateString = e.ValidityDate.ToString("dd-MMM-yy"),
                                CompanyName = e.CompanyList.CompanyName,
                                UserName = e.UserList.Email,
                                ValidityDay = (int)((e.ValidityDate.Date - DateTime.Now.Date).TotalDays),
                                Remarks = e.Remarks,
                                RechargeBy = e.RechargeBy
                            };



                var parser = new Parser<WalletResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        [AllowAnonymous]
        public JsonResult GetUserBalanceList()
        {
            try
            {
                //var products= _context.Products.ToList();
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");


                var UserRole = HttpContext.Session.GetString("UserRole");
                var Wallets = _userAccountRepository.All().Include(x => x.UserWallet).Where(x => x.UserWallet.Count > 0);//.Include(x=>x.vUnit).Include(x=>x.Category);
                //var Wallets = _userAccountRepository.All(false).Include(x => x.UserWallet).Where(x => x.UserWallet.Count > 0);//.Include(x=>x.vUnit).Include(x=>x.Category);

                //if (UserRole != "SuperAdmin")
                //{
                //    Wallets = Wallets.Where(x => x.Id == UserId.GetValueOrDefault());
                //}


                var query = from e in Wallets//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new WalletResultList
                            {
                                RechargeAmount = e.UserWallet.Sum(x => x.RechargeAmount),
                                UsedAmount = e.UserWallet.Sum(x => x.UsedAmount),
                                RemainingBalance = e.UserWallet.Sum(x => x.RechargeAmount) - e.UserWallet.Sum(x => x.UsedAmount),
                                PurchaseDateString = e.UserWallet.Max(x => x.PurchaseDate).ToString("dd-MMM-yy"),
                                ValidityDateString = e.UserWallet.Max(x => x.ValidityDate).ToString("dd-MMM-yy"),
                                CompanyName = e.CompanyList.CompanyName,
                                Email = e.Email,
                                UserName = e.Name,
                                //ValidityDay = (int)((e.UserWallet.Max(x => x.ValidityDate) - DateTime.Now.Date).TotalDays)
                            };



                var parser = new Parser<WalletResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddWallet(WalletModel model)
        {
            //if (ModelState.IsValid)
            {
                //model.ValidityDay = (model.ActiveToDate - model.ActiveFromDate).TotalDays;

                if (model.Id == 0)
                {
                    _WalletRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Remarks);

                }
                else
                {
                    _WalletRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Remarks);

                }
                return RedirectToAction("WalletList");
            }
            //else
            //{
            //    if (model.Id == 0)
            //    {
            //        ViewBag.ActionType = "Create";
            //    }
            //    else
            //    {
            //        ViewBag.ActionType = "Edit";
            //    }
            //}
            return View(model);
        }

        [HttpGet]
        public ActionResult EditWallet(int WalletId)
        {
            ViewBag.ActionType = "Edit";
            var Wallet = _WalletRepository.Find(WalletId);

            ViewBag.Company = _companyRepository.GetAllForDropDownSuperAdmin();
            ViewBag.User = _userAccountRepository.GetAllUserForDropDownNoComId();


            return View("AddWallet", Wallet);
        }

        public ActionResult DeleteWallet(int WalletId)
        {
            var model = _WalletRepository.Find(WalletId);
            if (model != null)
            {
                _WalletRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Remarks);



                return RedirectToAction("WalletList");
            }
            return RedirectToAction("WalletList");
        }
        #endregion


        #region InternetUser
        public IActionResult InternetUserList(string filter = "All")
        {

            if (filter != "All")
            {
                var internetuserstatusid = _internetUserStatusRepository.All().Where(x => x.UserStatusShort == filter).FirstOrDefault().Id;
                ViewBag.StatusId = internetuserstatusid;


            }
            ViewBag.InternetUserStatusId = _internetUserStatusRepository.GetAllForDropDown();



            //var UserId = HttpContext.Session.GetInt32("UserId");
            //var ComId = HttpContext.Session.GetInt32("ComId");

            ////Exec [prcProcessMonthlySubscriptionFee] 1, '01-Jan-2021','31-JAN-2021'/
            //var query = $"Exec prcProcessInternetServiceData '{ComId}'";

            //SqlParameter[] sqlParameter = new SqlParameter[1];
            //sqlParameter[0] = new SqlParameter("@ComId", ComId);
            //Helper.ExecProc("prcProcessInternetServiceData", sqlParameter);

            //TempData["Message"] = "Data Process Successfully";

            ViewBag.filter = filter;
            //return View(_InternetUserRepository.All());
            return View();

        }

        [HttpGet]
        public ActionResult AddInternetUser()
        {
            ViewBag.ActionType = "Create";
            ViewBag.PackageId = _internetPackageRepository.GetAllForDropDown();
            ViewBag.UserStatusId = _internetUserStatusRepository.GetAllForDropDown();
            return View();
        }

        public class InternetUserResultList : InternetUserModel
        {

            public string? PackageName { get; set; }
            public string? UserStatusName { get; set; }

            public string? LastBilledDateString { get; set; }
            public string? LastExpiredDateString { get; set; }
            public string? LastReceivedDateString { get; set; }
            public string? CreateDateString { get; set; }

            [Column(TypeName = "decimal(18,4)")]
            public decimal TotalBill { get; set; }
            [Column(TypeName = "decimal(18,4)")]
            public decimal TotalReceive { get; set; }
            //public decimal TotalDue { get; set; }





        }
        [AllowAnonymous]
        public JsonResult GetInternetUserList(string filter = "All")
        {
            try
            {
                //var products= _context.Products.ToList();


                //1   Active Active
                //2   Expired Expired
                //3   Disabled Disabled
                //4   Terminated Terminated
                //5   InActive InActive
                //6   Expiring In 3 Days Expiring In 3 Days
                //7   Expiring Today  Expiring Today
                //8   Online Online
                //9   Offline Offline



                var InternetUsers = _InternetUserRepository.All(true);//.Include(x=>x.vUnit).Include(x=>x.Category);

                if (filter == "All")
                {
                    InternetUsers = _InternetUserRepository.All();
                }
                else if (filter == "Due List")
                {
                    InternetUsers = _InternetUserRepository.All().Where(x => x.TotalDue > 0);

                }
                else
                {
                    InternetUsers = _InternetUserRepository.All().Where(x => x.UserStatus.UserStatusShort == filter);
                }

                //else if (filter == "Active")
                //{
                //    InternetUsers = _InternetUserRepository.All().Where(x => x.UserStatusId == 1);
                //}
                //else if (filter == "InActive")
                //{
                //    InternetUsers = _InternetUserRepository.All().Where(x => x.UserStatusId == 2);
                //}
                //else if (filter == "Terminated")
                //{
                //    InternetUsers = _InternetUserRepository.All().Where(x => x.UserStatusId == 3);
                //}
                //else if (filter == "Expired")
                //{
                //    InternetUsers = _InternetUserRepository.All().Where(x => x.UserStatusId == 3);
                //}
                //else if (filter == "Expiring Today")
                //{
                //    InternetUsers = _InternetUserRepository.All().Where(x => x.UserStatusId == 3);
                //}
                //else if (filter == "Expiring In 3 Days")
                //{
                //    InternetUsers = _InternetUserRepository.All().Where(x => x.UserStatusId == 3);
                //}



                var query = from e in InternetUsers//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new InternetUserResultList
                            {
                                Id = e.Id,
                                UserId = e.UserId,
                                Password = e.Password,
                                UserName = e.UserName,


                                LastBilledDateString = e.LastBilledDate.ToString("dd-MMM-yy"),
                                LastExpiredDateString = e.LastExpiredDate != null ? e.LastExpiredDate.GetValueOrDefault().ToString("dd-MMM-yy") : null,
                                LastReceivedDateString = e.LastReceivedDate != null ? e.LastReceivedDate.GetValueOrDefault().ToString("dd-MMM-yy") : null,

                                MobileNo = e.MobileNo,
                                Address = e.Address,

                                Amount = e.Amount,
                                ONUMac = e.ONUMac,
                                IPAddress = e.IPAddress,
                                ConnectionPointAddress = e.ConnectionPointAddress,

                                Description = e.Description,
                                CreateDateString = e.CreateDate != null ? e.CreateDate.ToString("dd-MMM-yy") : null,
                                CreatedBy = e.CreatedBy,

                                NationalIdCard = e.NationalIdCard,
                                UserStatusName = e.UserStatus != null ? e.UserStatus.UserStatusLong : null,  //e.UserStatus.HasValue == true ? "" : e.UserStatus.UserStatusLong, // e.UserStatus.UserStatusLong,
                                ImagePath = e.ImagePath,
                                UserType = e.UserType,


                                PackageName = e.InternetPackageList != null ? e.InternetPackageList.PackageName : null,  //e.InternetPackageList.PackageName

                                TotalBill = e.InvoiceBill.Sum(x => x.BillAmount),
                                TotalReceive = e.InvoiceBill.Sum(x => x.ReceivedAmount),
                                //TotalDue = e.InvoiceBill.Sum(x => x.BillAmount - (x.ReceivedAmount + x.BadDebt + x.Discount)),
                                TotalDue = e.TotalDue,
                                PaidStatus = e.PaidStatus
                            };



                var parser = new Parser<InternetUserResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddInternetUser(InternetUserModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _InternetUserRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.UserName.ToString());

                }
                else
                {
                    _InternetUserRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.UserName.ToString());

                }
                return RedirectToAction("InternetUserList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditInternetUser(int InternetUserId)
        {
            ViewBag.ActionType = "Edit";
            ViewBag.PackageId = _internetPackageRepository.GetAllForDropDown();
            ViewBag.UserStatusId = _internetUserStatusRepository.GetAllForDropDown();

            var InternetUser = _InternetUserRepository.Find(InternetUserId);
            return View("AddInternetUser", InternetUser);
        }

        public ActionResult DeleteInternetUser(int InternetUserId)
        {
            var model = _InternetUserRepository.Find(InternetUserId);
            if (model != null)
            {
                _InternetUserRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.UserName);



                return RedirectToAction("InternetUserList");
            }
            return RedirectToAction("InternetUserList");
        }
        #endregion

        #region ExpireDateExtend
        public IActionResult ExpireDateExtendList()
        {
            //return View(_ExpireDateExtendRepository.All());



            return View();

        }

        [HttpGet]
        public ActionResult AddExpireDateExtend()
        {
            ViewBag.ActionType = "Create";

            ExpireDateExtendModel abc = new ExpireDateExtendModel();
            abc.OldExpireDate = DateTime.Now.Date;
            abc.NewExpiredDate = DateTime.Now.Date;

            //ViewBag.PackageId = _internetPackageRepository.GetAllForDropDown();
            //ViewBag.UserStatusId = _internetUserStatusRepository.GetAllForDropDown();
            return View();
        }

        public class ExpireDateExtendResultList : ExpireDateExtendModel
        {
            public string? NewExpiredDateString { get; set; }
            public string? OldExpireDateString { get; set; }
            //public string? UserId { get; set; }
            //public string? UserName { get; set; }




        }

        [AllowAnonymous]
        public JsonResult GetExpireDateExtendList()
        {
            try
            {
                //var products= _context.Products.ToList();


                var ExpireDateExtends = _expireDateExtendRepository.All();
                var query = from e in ExpireDateExtends

                            select new ExpireDateExtendResultList
                            {
                                Id = e.Id,
                                UserId = e.InternetUserList.UserId,
                                UserName = e.InternetUserList.UserName,
                                InternetUserId = e.InternetUserId,
                                OldExpireDateString = e.OldExpireDate.ToString("dd-MMM-yy"),
                                NewExpiredDateString = e.NewExpiredDate.ToString("dd-MMM-yy"),
                                Note = e.Note,
                                TotalDays = int.Parse((e.NewExpiredDate - e.OldExpireDate).TotalDays.ToString()),
                                CreateDate = e.CreateDate,
                                //UserName = e.InternetUserList != null ? e.InternetUserList.UserName : null
                            };



                var parser = new Parser<ExpireDateExtendResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddExpireDateExtend(ExpireDateExtendModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    if (model.Note == null) model.Note = "Validity Extend";

                    _expireDateExtendRepository.Insert(model);

                    var internetuserdata = _InternetUserRepository.Find(model.InternetUserId);
                    internetuserdata.LastExpiredDate = model.NewExpiredDate;
                    _InternetUserRepository.Update(internetuserdata, internetuserdata.Id);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Note.DefaultIfEmpty().ToString());

                }
                else
                {
                    if (model.Note == null) model.Note = "Validity Extend";
                    _expireDateExtendRepository.Update(model, model.Id);

                    var internetuserdata = _InternetUserRepository.Find(model.InternetUserId);
                    internetuserdata.LastExpiredDate = model.NewExpiredDate;
                    _InternetUserRepository.Update(internetuserdata, internetuserdata.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Note.DefaultIfEmpty().ToString());

                }
                return RedirectToAction("ExpireDateExtendList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditExpireDateExtend(int ExpireDateExtendId)
        {
            ViewBag.ActionType = "Edit";
            //ViewBag.PackageId = _internetPackageRepository.GetAllForDropDown();
            //ViewBag.UserStatusId = _internetUserStatusRepository.GetAllForDropDown();

            //var ExpireDateExtend = _expireDateExtendRepository.Find(ExpireDateExtendId);


            var ExpireDateExtend = _expireDateExtendRepository.All().Include(x => x.InternetUserList).Where(x => x.Id == ExpireDateExtendId).FirstOrDefault();

            if (ExpireDateExtend != null)
            {
                ExpireDateExtend.UserId = ExpireDateExtend.InternetUserList.UserId;
                ExpireDateExtend.UserName = ExpireDateExtend.InternetUserList.UserName;
            }


            return View("AddExpireDateExtend", ExpireDateExtend);
        }

        public ActionResult DeleteExpireDateExtend(int ExpireDateExtendId)
        {
            var model = _expireDateExtendRepository.Find(ExpireDateExtendId);
            if (model != null)
            {
                _expireDateExtendRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Note);



                return RedirectToAction("ExpireDateExtendList");
            }
            return RedirectToAction("ExpireDateExtendList");
        }
        #endregion

        #region UserTerminate
        public IActionResult UserTerminateList()
        {
            //return View(_UserTerminateRepository.All());
            return View();

        }

        [HttpGet]
        public ActionResult AddUserTerminate()
        {
            ViewBag.ActionType = "Create";

            UserTerminateModel abc = new UserTerminateModel();
            abc.TerminateDate = DateTime.Now.Date;
            abc.NextFollowDate = DateTime.Now.Date;


            //ViewBag.PackageId = _internetPackageRepository.GetAllForDropDown();
            //ViewBag.UserStatusId = _internetUserStatusRepository.GetAllForDropDown();
            return View(abc);
        }

        public class UserTerminateResultList : UserTerminateModel
        {
            public string? TerminateDateString { get; set; }
            public string? NextFollowDateString { get; set; }
            public string? CreateDateString { get; set; }


        }

        [AllowAnonymous]
        public JsonResult GetUserTerminateList()
        {
            try
            {
                //var products= _context.Products.ToList();


                var UserTerminates = _userTerminateRepository.All();
                var query = from e in UserTerminates

                            select new UserTerminateResultList
                            {
                                Id = e.Id,
                                InternetUserId = e.InternetUserId,
                                //e.LastReceivedDate != null ? e.LastReceivedDate.GetValueOrDefault().ToString("dd-MMM-yy") : null,
                                TerminateDateString = e.TerminateDate != null ? e.TerminateDate.ToString("dd-MMM-yy") : null,
                                NextFollowDateString = e.NextFollowDate != null ? e.NextFollowDate.ToString("dd-MMM-yy") : null,
                                CreateDateString = e.CreateDate != null ? e.CreateDate.ToString("dd-MMM-yy") : null,

                                Note = e.Note,
                                DeviceUpdate = e.DeviceUpdate,
                                MobileNoIfNecessary = e.MobileNoIfNecessary,
                                CreateDate = e.CreateDate,
                                UserName = e.InternetUserList != null ? e.InternetUserList.UserId : null

                            };



                var parser = new Parser<UserTerminateResultList>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddUserTerminate(UserTerminateModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _userTerminateRepository.Insert(model);

                    var internetuserdata = _InternetUserRepository.Find(model.InternetUserId);
                    internetuserdata.UserStatusId = 2;
                    _InternetUserRepository.Update(internetuserdata, internetuserdata.Id);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Note.ToString());




                }
                else
                {
                    _userTerminateRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Note.ToString());

                }
                return RedirectToAction("UserTerminateList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditUserTerminate(int UserTerminateId)
        {
            ViewBag.ActionType = "Edit";
            //ViewBag.PackageId = _internetPackageRepository.GetAllForDropDown();
            //ViewBag.UserStatusId = _internetUserStatusRepository.GetAllForDropDown();

            var UserTerminate = _userTerminateRepository.All().Include(x => x.InternetUserList).Where(x => x.Id == UserTerminateId).FirstOrDefault();

            if (UserTerminate != null)
            {
                UserTerminate.UserId = UserTerminate.InternetUserList.UserId;
                UserTerminate.UserName = UserTerminate.InternetUserList.UserName;
            }

            return View("AddUserTerminate", UserTerminate);

        }

        public ActionResult DeleteUserTerminate(int UserTerminateId)
        {
            var model = _userTerminateRepository.Find(UserTerminateId);
            if (model != null)
            {
                _userTerminateRepository.Delete(model);


                var internetuserdata = _InternetUserRepository.Find(model.InternetUserId);
                internetuserdata.UserStatusId = 1;
                _InternetUserRepository.Update(internetuserdata, internetuserdata.Id);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Note);



                return RedirectToAction("UserTerminateList");
            }
            return RedirectToAction("UserTerminateList");
        }
        #endregion

        #region Product
        public IActionResult ProductList()
        {
            ViewBag.FromDate = DateTime.Now.Date;
            ViewBag.ToDate = DateTime.Now.Date;

            SelectListItem abc = new SelectListItem() { Text = "Warehouse", Value = "" };

            var x = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
            if (x.Count() == 0)
            {
                x = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                x.Append(abc);
            }
            else
            {
                x.Append(abc);
            }

            ViewBag.WarehouseId = x.ToList();



            //ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
            ViewBag.BrandId = _brandRepository.GetAllForDropDown();
            ViewBag.ModelId = _productRepository.GetModelDropDown();


            //var products = _productRepository.All();
            //return View(products);
            return View();
        }


        [AllowAnonymous]

        public IActionResult SupplierProductList()
        {
            SelectListItem abc = new SelectListItem() { Text = "Please Select", Value = "" };

            var x = _FromWarehousePermissionRepository.GetAllForDropDown();
            if (x.Count() == 0)
            {
                x = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            }
            else
            {
                x.Append(abc);
            }

            ViewBag.WarehouseId = x;



            //ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
            ViewBag.BrandId = _brandRepository.GetAllForDropDown();
            //var products = _productRepository.All();
            //return View(products);
            return View();
        }













        //Admin/ProductList/A9CF7D4A-E8CD-419A-8E4A-BFB6DFF21A5F/40473
        //[Route("[controller]/SharedProductList/{SecretKey}")]///{ProductId}
        [AllowAnonymous]
        public IActionResult SharedProductList(Guid SecretKey)//, int? ProductId
        {

            var linksharedata = _linkShareRepository.All(false).Where(x => x.SecretKey == SecretKey).FirstOrDefault();
            HttpContext.Session.SetInt32("ComId", linksharedata.ComId);
            HttpContext.Session.SetInt32("UserId", linksharedata.LuserId);
            //            string weburl = configuration.GetSection("hostimage").Value;
            //HttpContext.Session.SetString("weburl", weburl);

            ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
            ViewBag.BrandId = _brandRepository.GetAllForDropDown();

            ViewBag.BrandName = _productRepository.All().Include(x => x.Brand)
                .GroupBy(x => new { BrandName = x.Brand.BrandName })
                .Select(g => new SelectListItem { Text = g.Key.BrandName, Value = g.Count().ToString() }).ToList();




            return View();
        }





        [AllowAnonymous]
        public IActionResult CustomerProductList(int? ComId)
        {

            ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
            ViewBag.BrandId = _brandRepository.GetAllForDropDown();
            //ViewBag.BrandName = _categoryRepository.GetAllForDropDown();

            //ViewBag.BrandName = from p in _productRepository.All()
            //              group p.BrandName by p.BrandName into g
            //              select new { BrandName = g.Key, Cars = g.ToList() };


            ViewBag.BrandName = _productRepository.All().Include(x => x.Brand)
                .GroupBy(x => new { BrandName = x.Brand.BrandName })
                .Select(g => new SelectListItem { Text = g.Key.BrandName, Value = g.Count().ToString() }).ToList();




            return View();
        }


        [AllowAnonymous]
        [HttpPost, ActionName("ProductDeleteAction")]

        public JsonResult ProductDeleteAction(string[] ProductId, string CommandType)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                //var saleslist = SalesId.TrimStart('[').TrimEnd(']').Split(',');


                if (CommandType == "cntrlh")
                {
                    foreach (var item in ProductId)
                    {
                        var singlesaledata = _productRepository.Find(int.Parse(item));
                        singlesaledata.IsDelete = true;

                        _productRepository.Update(singlesaledata, int.Parse(item));
                    }


                }
                else if (CommandType == "cntrlu")
                {
                    foreach (var item in ProductId)
                    {
                        var singlesaledata = _productRepository.Find(int.Parse(item));
                        singlesaledata.IsDelete = false;

                        _productRepository.Update(singlesaledata, int.Parse(item));
                    }

                }

                return Json(new { Success = 1, ex = "Command Executed Successfully." });

            }

            catch (Exception ex)
            {
                // If Sucess== 0 then Unable to perform Save/Update Operation and send Exception to View as JSON
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            //return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
            //return RedirectToAction("Index");

        }

        [AllowAnonymous]
        [HttpPost, ActionName("ProductReport")]
        public JsonResult ProductReport(string rptFormat, string action, string CategoryId, string ProductId, string FromDate, string ToDate, string WarehouseId, string BrandId, string ModelId, string SupplierId, string CustomerId, int? BDPOId, string ColorName, string SizeName)
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                var ComId = HttpContext.Session.GetInt32("ComId");

                var reportname = "";
                var filename = "";
                string redirectUrl = "";
                if (action == "PrintProductList")
                {
                    if (ProductId == null)
                    {
                        ProductId = "";
                    }

                    reportname = "rptProductList";
                    filename = "Product_List_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec Inv_rptProductList '" + ComId + "', '" + CategoryId + "' ,'" + WarehouseId + "' , 0 ,'" + BrandId + "','" + ModelId + "','" + ProductId + "'");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");
                }
                else if (action == "PrintProductListWithoutZero") /// mr. asif saheb requirement when he going for print.
                {
                    if (ProductId == null)
                    {
                        ProductId = "";
                    }
                    reportname = "rptProductList";
                    filename = "Product_List_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec Inv_rptProductList '" + ComId + "', '" + CategoryId + "' ,'" + WarehouseId + "' , 1,'" + BrandId + "' ,'" + ModelId + "','" + ProductId + "'");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");
                }
                else if (action == "PrintMismatchProductList") /// mr. asif saheb requirement when he going for print.
                {

                    reportname = "rptProductList";
                    filename = "Product_List_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec Inv_rptProductList_Mismatch '" + ComId + "', '" + CategoryId + "' ,'" + WarehouseId + "' , 1,'" + BrandId + "' ,'" + ModelId + "'");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");
                }
                else if (action == "ShareProductList") /// mr. asif saheb requirement when he going for print.
                {

                    reportname = "rptProductListShare";
                    filename = "Product_List_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec Inv_rptProductList '" + ComId + "', '" + CategoryId + "' ,'" + WarehouseId + "' , 1,'" + BrandId + "' ,'" + ModelId + "'");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");
                }
                else if (action == "PrintLedger")
                {

                    reportname = "rptPrdLedger_GTR";
                    filename = "ProductLedger_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec Inv_rptPrdLedger '" + ComId + "', '" + FromDate + "','" + ToDate + "', '" + ProductId + "', '" + WarehouseId + "'");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");

                }
                else if (action == "PrintLedgerNotPosted")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("ProductLedgerNotPostedViewReport", "Admin", new { ProductId = ProductId, WarehouseId = WarehouseId, dtFrom = FromDate, dtTo = ToDate, Type = action });
                    return Json(new { Url = redirectUrl });

                }
                else if (action == "prdregistervalue")
                {
                    reportname = "rptPrdRegister_Value";
                    filename = "PrdRegister_Value_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec Inv_rptPrdRegister_Value '" + ComId + "', '" + FromDate + "','" + ToDate + "', '" + ProductId + "', '" + WarehouseId + "' , '" + CategoryId + "', 0,'" + BrandId + "','" + ModelId + "'");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");

                }
                else if (action == "prdregistervaluesummary")
                {
                    reportname = "rptPrdRegister_Value_Summary";
                    filename = "PrdRegister_Value_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec Inv_rptPrdRegister_Value_Summary '" + ComId + "', '" + FromDate + "','" + ToDate + "', '" + ProductId + "', '" + WarehouseId + "' , '" + CategoryId + "', 0,'" + BrandId + "','" + ModelId + "'");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");

                }
                else if (action == "prdregistervaluecategorysummary")
                {
                    reportname = "rptPrdRegister_Value_Category_Summary";
                    filename = "PrdRegister_Value_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec Inv_rptPrdRegister_Value_Summary '" + ComId + "', '" + FromDate + "','" + ToDate + "', '" + ProductId + "', '" + WarehouseId + "' , '" + CategoryId + "', 0,'" + BrandId + "','" + ModelId + "'");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");

                }
                else if (action == "rptPrdAvgRateCalculation")
                {

                    reportname = "rptPrdAvgRateCalculation";
                    filename = "rptPrdAvgRateCalculation" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec [Inv_rptPrdAvgRateCalculation] '" + ComId + "', '" + FromDate + "','" + ToDate + "', '" + WarehouseId + "' ,'0','0','0','0','" + ProductId + "'");

                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/Inventory/" + reportname + ".rdlc");

                }
                else if (action == "CategoryWiseTopSales")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("ProductAnalysisViewReport", "Admin", new { dtFrom = FromDate, dtTo = ToDate, Type = action });
                    return Json(new { Url = redirectUrl });
                }
                else if (action == "ProductWiseTopSales")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("ProductAnalysisViewReport", "Admin", new { dtFrom = FromDate, dtTo = ToDate, Type = action });
                    return Json(new { Url = redirectUrl });
                }
                else if (action == "ProductWiseStockCalculation")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("ProductStockViewReport", "Admin", new { dtFrom = FromDate, dtTo = ToDate, Type = action, WarehouseId = WarehouseId, CategoryId = CategoryId, BrandId = BrandId, SizeName = SizeName, ColorName = ColorName, ModelName = ModelId, SupplierId = SupplierId });
                    return Json(new { Url = redirectUrl });
                }
                else if (action == "ProductWiseStockCalculationTabulator")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("ProductStockViewReportTabulator", "Admin", new { dtFrom = FromDate, dtTo = ToDate, Type = action, WarehouseId = WarehouseId, CategoryId = CategoryId, BrandId = BrandId, SizeName = SizeName, ColorName = ColorName, ModelName = ModelId, SupplierId = SupplierId });
                    return Json(new { Url = redirectUrl });
                }
                //else if (action == "CreatePurchaseForMinusStock")
                //{
                //    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                //    //redirectUrl = Url.Action("ProductStockPurchaseViewReport", "Admin", new { dtFrom = FromDate, dtTo = ToDate, Type = action, WarehouseId = WarehouseId });
                //    redirectUrl = Url.Action("AddPurchaseBatch", "Purchase", new { PurchaseId = -1 });

                //    //return RedirectToAction("AddPurchaseBatch", "Purchase");
                //    return Json(new { Url = redirectUrl });
                //}
                else if (action == "BDPOWiseSummary")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("BDPOWiseSummaryViewReport", "Admin", new { ReferanceId = BDPOId, dtFrom = FromDate, dtTo = ToDate, Type = action });
                    return Json(new { Url = redirectUrl });
                }
                else if (action == "BuyerWiseItemStock")
                {
                    //filename = _customerRepository.All().Where(x => x.Id == Id).Select(x => x.Name).Single();
                    redirectUrl = Url.Action("BuyerWiseItemStockViewReport", "Admin", new { dtFrom = FromDate, dtTo = ToDate, Type = action, SupplierId = SupplierId, BuyerId = CustomerId });
                    return Json(new { Url = redirectUrl });



                    //var result = "";
                    ////var ComId = HttpContext.Session.GetInt32("ComId");
                    //var UserId = HttpContext.Session.GetInt32("UserId");

                    //if (ComId == null)
                    //{
                    //    result = "Please Login first";
                    //}
                    //var URLLink = "";


                    //var quary = $"Exec [Inv_BuyerWiseItemsStock]  '" + ComId + "','" + FromDate + "' ,'" + ToDate + "','" + action + "','" + URLLink + "','" + CustomerId + "'";


                    //SqlParameter[] parameters = new SqlParameter[6];
                    //parameters[0] = new SqlParameter("@ComId", ComId);
                    //parameters[1] = new SqlParameter("@FromDate", DateTime.Parse(FromDate));
                    //parameters[2] = new SqlParameter("@ToDate", DateTime.Parse(ToDate));
                    //parameters[3] = new SqlParameter("@Type", action);
                    //parameters[4] = new SqlParameter("@UrlLink", URLLink);
                    //parameters[5] = new SqlParameter("@BuyerId", CustomerId);


                    //List<BuyerWiseItemsStockModel> Inv_BuyerWiseItemsStock = Helper.ExecProcMapTList<BuyerWiseItemsStockModel>("Inv_BuyerWiseItemsStock", parameters);

                    //return Json(new { Url = "" , data = Inv_BuyerWiseItemsStock });

                }




                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));


                string DataSourceName = "DataSet1";

                //HttpContext.Session.SetObject("Acc_rptList", postData);

                //Common.Classes.clsMain.intHasSubReport = 0;
                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");// Session["ReportPath"].ToString();
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
                clsReport.strDSNMain = DataSourceName;

                //var ConstrName = "ApplicationServices";
                //string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Repository.GenerateReport(clsReport.strReportPathMain, clsReport.strQueryMain, ConstrName, rptFormat);

                string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                redirectUrl = callBackUrl;



                return Json(new { Url = redirectUrl });

            }

            catch (Exception ex)
            {
                // If Sucess== 0 then Unable to perform Save/Update Operation and send Exception to View as JSON
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
            //return RedirectToAction("Index");


        }


        public class productinfo
        {
            public string? productid { get; set; }
            public string? quantity { get; set; }
        }

        [AllowAnonymous]
        [HttpPost, ActionName("BarcodeReport")]

        public JsonResult BarcodeReport(string rptFormat, string action, List<productinfo> productinfo, int? WarehouseMain)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");


                var reportname = "rptProductTag_36Pcs";
                var filename = "Barcode_";
                string redirectUrl = "";

                if (action == "PrintBarcode")
                {

                    var BarcodeReportStyle = _storeSettingRepository.All().Include(x => x.BarcodeReportStyle).FirstOrDefault().BarcodeReportStyle;


                    if (BarcodeReportStyle != null)
                    {
                        reportname = "rptProductTag_" + BarcodeReportStyle.ReportStyleName.ToString();
                    }
                    else
                    {
                        //reportname = "rptProductSmallTag_" + ReportStyle.ToString();

                    }


                    var abcd = _barcodePrintRepository.All().Where(x => x.LuserId == UserId).ToList();
                    _barcodePrintRepository.RemoveRange(abcd);


                    var barcodelist = new List<BarcodePrintModel>();
                    foreach (var item in productinfo)
                    {

                        for (int i = 0; i < int.Parse(item.quantity); i++)
                        {
                            BarcodePrintModel abc = new BarcodePrintModel();

                            abc.Id = 0;
                            abc.ProductId = int.Parse(item.productid);
                            abc.Quantity = 1;
                            abc.WarehosueId = WarehouseMain;

                            barcodelist.Add(abc);
                        }
                    }

                    _barcodePrintRepository.AddRange(barcodelist);


                    //reportname = "rptProductSmallTag";
                    filename = "Barcode_Print_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec POS_rptPrintBarcode '" + ComId + "', '" + UserId + "' ");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/POS/" + reportname + ".rdlc");
                }


                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));


                string DataSourceName = "DataSet1";

                //HttpContext.Session.SetObject("Acc_rptList", postData);

                //Common.Classes.clsMain.intHasSubReport = 0;
                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");// Session["ReportPath"].ToString();
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
                clsReport.strDSNMain = DataSourceName;

                //var ConstrName = "ApplicationServices";
                //string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Repository.GenerateReport(clsReport.strReportPathMain, clsReport.strQueryMain, ConstrName, rptFormat);

                string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                redirectUrl = callBackUrl;
                return Json(new { Url = redirectUrl });

            }

            catch (Exception ex)
            {
                // If Sucess== 0 then Unable to perform Save/Update Operation and send Exception to View as JSON
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
            //return RedirectToAction("Index");

        }



        [AllowAnonymous]
        public ActionResult ProductAnalysisViewReport(string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }
                var URLLink = "";
                var TopSize = 20;



                var quary = $"Exec [ProductAnalysisReport]  '" + ComId + "','" + dtFrom + "' ,'" + dtTo + "','" + Type + "','" + URLLink + "','" + TopSize + "'";


                SqlParameter[] parameters = new SqlParameter[6];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[2] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[3] = new SqlParameter("@Type", Type);
                parameters[4] = new SqlParameter("@UrlLink", URLLink);
                parameters[5] = new SqlParameter("@TopSize", TopSize);


                List<ProductAnalysisViewModel> productanalysisreport = Helper.ExecProcMapTList<ProductAnalysisViewModel>("ProductAnalysisReport", parameters);

                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(productanalysisreport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        public class HeadWiseReport
        {
            public string? WarehouseId { get; set; }
            public string? FromDate { get; set; }
            public string? ToDate { get; set; }


        }

        [AllowAnonymous]
        public ActionResult ProductStockViewReportTabulator(string WarehouseId, string dtFrom, string dtTo)
        {
            try
            {
                var abc = new HeadWiseReport();
                abc.FromDate = dtFrom;
                abc.ToDate = dtTo;

                if (WarehouseId != null)
                {
                    abc.WarehouseId = WarehouseId;
                }
                else
                {
                    abc.WarehouseId = "";
                }


                //ViewBag.FromDate = dtFrom;
                //ViewBag.ToDate = dtTo;

                //if (WarehouseId != null)
                //{
                //    ViewBag.WarehouseId = WarehouseId;


                //}
                //else {
                //    ViewBag.WarehouseId = "";
                //}


                return View(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }

        }



        [AllowAnonymous]
        public ActionResult ProductStockViewReport(string dtFrom, string dtTo, string Type, int? WarehouseId, int? CategoryId, int? BrandId, string SizeName, string ColorName, string ModelName, string SupplierId)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }
                var URLLink = "";
                var TopSize = 20;



                var quary = $"Exec [ProductAnalysisReport]  '" + ComId + "','" + dtFrom + "' ,'" + dtTo + "','" + Type + "','" + URLLink + "','" + TopSize + "','" + WarehouseId + "','" + CategoryId + "','" + BrandId + "','" + SizeName + "','" + ColorName + "','" + ModelName + "','" + SupplierId + "'";


                SqlParameter[] parameters = new SqlParameter[13];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[2] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[3] = new SqlParameter("@Type", Type);
                parameters[4] = new SqlParameter("@UrlLink", URLLink);
                parameters[5] = new SqlParameter("@TopSize", TopSize);
                parameters[6] = new SqlParameter("@WarehouseId", WarehouseId);

                parameters[7] = new SqlParameter("@CategoryId", CategoryId);
                parameters[8] = new SqlParameter("@BrandId", BrandId);
                parameters[9] = new SqlParameter("@SizeName", SizeName);
                parameters[10] = new SqlParameter("@ColorName", ColorName);

                parameters[11] = new SqlParameter("@ModelName", ModelName);
                parameters[12] = new SqlParameter("@SupplierId", SupplierId);


                List<ProductAnalysisViewModel> productanalysisreport = Helper.ExecProcMapTList<ProductAnalysisViewModel>("ProductAnalysisReport", parameters);

                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(productanalysisreport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }




        public partial class BDPOSummaryModel
        {
            public ICollection<BDPOSummaryModelDetails> BDPOSummaryDetails { get; set; }
            public virtual StoreSettingModel CompanyList { get; set; }

        }


        public partial class EmployeeSummaryModel
        {
            public ICollection<EmployeeSummaryModelDetails> EmployeeSummaryDetails { get; set; }
            public virtual StoreSettingModel CompanyList { get; set; }

        }


        public partial class EmployeeSummaryModelDetails
        {
            public string? Caption { get; set; }
            public string? Type { get; set; }
            public string? TransactionDate { get; set; }
            public int EmployeeId { get; set; }
            public string? JoiningDate { get; set; }
            public string? EmployeeCode { get; set; }
            public string? EmployeeName { get; set; }
            public string? AccName { get; set; }
            public double Amount { get; set; }
        }

        public partial class BDPOSummaryModelDetails
        {
            public string? Caption { get; set; }
            public string? Type { get; set; }
            public string? EntryDate { get; set; }
            public string? DocCode { get; set; }
            public string? StyleNo { get; set; }
            public string? ProductCode { get; set; }
            public string? ProductName { get; set; }
            public string? ColorName { get; set; }
            public string? Location { get; set; }

            public string? SizeName { get; set; }
            public double Quantity { get; set; }

            public double POQty { get; set; }
            public double GRRQty { get; set; }
            public double IssueQty { get; set; }


        }


        [AllowAnonymous]
        public ActionResult BDPOWiseSummaryViewReport(string ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }
                if (ReferanceId == null)
                {
                    ReferanceId = "";
                }


                var quary = $"Exec Inv_BDPOWiseSummary  '" + ComId + "','" + ReferanceId + "',0,'" + DateTime.Parse(dtFrom) + "' ,'" + DateTime.Parse(dtTo) + "','" + Type + "'";


                SqlParameter[] parameters = new SqlParameter[6];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@PurchaseId", ReferanceId);
                parameters[2] = new SqlParameter("@UrlLink", "");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[5] = new SqlParameter("@LedgerFor", Type);



                List<BDPOWiseDetailsModel> BDPODetailslist = Helper.ExecProcMapTList<BDPOWiseDetailsModel>("Inv_BDPOWiseSummary", parameters);

                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(BDPODetailslist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public ActionResult EmployeeWiseDetailsDataViewReport(string ReferanceId, string dtFrom, string dtTo, string Type)
        {



            try
            {

                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                if (ComId == null)
                {
                    result = "Please Login first";
                }
                var quary = $"EXEC HR_Employee_Loan_Details '{ComId}','{ReferanceId}',{""},'{dtFrom}','{dtTo}', ";

                SqlParameter[] parameters = new SqlParameter[5];

                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@EmployeeId", ReferanceId);
                parameters[2] = new SqlParameter("@UrlLink", "-");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));

                var storesummarydetails = new EmployeeSummaryModel();
                storesummarydetails.CompanyList = _storeSettingRepository.All().Where(x => x.ComId == ComId).FirstOrDefault();

                storesummarydetails.EmployeeSummaryDetails = Helper.ExecProcMapTList<EmployeeSummaryModelDetails>("HR_Employee_Loan_Details", parameters);



                return View(storesummarydetails);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }


        }




        [AllowAnonymous]
        public ActionResult BDPOWiseDetailsDataViewReport(string ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {

                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                if (ComId == null)
                {
                    result = "Please Login first";
                }
                var quary = $"EXEC Inv_BDPOWiseDetails '{ComId}','{ReferanceId}',{""},'{dtFrom}','{dtTo}', ";

                SqlParameter[] parameters = new SqlParameter[5];

                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@PurchaseId", ReferanceId);
                parameters[2] = new SqlParameter("@UrlLink", "-");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));

                var storesummarydetails = new BDPOSummaryModel();
                storesummarydetails.CompanyList = _storeSettingRepository.All().Where(x => x.ComId == ComId).FirstOrDefault();

                storesummarydetails.BDPOSummaryDetails = Helper.ExecProcMapTList<BDPOSummaryModelDetails>("Inv_BDPOWiseDetails", parameters);



                return View(storesummarydetails);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }









            //try
            //{
            //    var result = "";
            //    var ComId = HttpContext.Session.GetInt32("ComId");
            //    var UserId = HttpContext.Session.GetInt32("UserId");

            //    if (ComId == null)
            //    {
            //        result = "Please Login first";
            //    }
            //    if (ReferanceId == null)
            //    {
            //        ReferanceId = "";
            //    }


            //    var quary = $"Exec Inv_BDPOWiseDetails  '" + ComId + "','" + ReferanceId + "',0,'" + DateTime.Parse(dtFrom) + "' ,'" + DateTime.Parse(dtTo) + "','" + Type + "'";


            //    SqlParameter[] parameters = new SqlParameter[6];
            //    parameters[0] = new SqlParameter("@ComId", ComId);
            //    parameters[1] = new SqlParameter("@PurchaseId", ReferanceId);
            //    parameters[2] = new SqlParameter("@UrlLink", "");
            //    parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
            //    parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
            //    parameters[5] = new SqlParameter("@LedgerFor", Type);



            //    List<BDPOWiseDetailsModel> BDPODetailslist = Helper.ExecProcMapTList<BDPOWiseDetailsModel>("Inv_BDPOWiseDetails", parameters);

            //    //if (Type.ToLower().Contains("notposted"))
            //    //{
            //    //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
            //    //}


            //    return View(BDPODetailslist);

            //    //return Json(new { bookingDeliveryChallan, ex = result });
            //}
            //catch (Exception ex)
            //{

            //    throw ex;
            //}
        }

        [AllowAnonymous]
        public ActionResult CustomerRewardBalanceSummaryViewReport(int ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var customerid = "";
                if (ReferanceId > 0)
                {
                    customerid = ReferanceId.ToString();
                }

                var quary = $"Exec Acc_CustomerRewardPointSummaryBalance  '" + ComId + "','" + customerid + "',0,'" + dtFrom + "' ,'" + dtTo + "','" + Type + "'";


                SqlParameter[] parameters = new SqlParameter[6];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@CustomerId", customerid);
                parameters[2] = new SqlParameter("@UrlLink", "");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[5] = new SqlParameter("@LedgerFor", Type);



                List<CustomerLedgerModel> customerbalancelist = Helper.ExecProcMapTList<CustomerLedgerModel>("Acc_CustomerRewardPointSummaryBalance", parameters);

                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(customerbalancelist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        [AllowAnonymous]
        public JsonResult GetProductStockViewReport(string dtFrom, string dtTo, string Type, int? WarehouseId, int? CategoryId, int? BrandId, string SizeName, string ColorName, string ModelName, string SupplierId)
        {

            var result = "";
            var ComId = HttpContext.Session.GetInt32("ComId");
            var UserId = HttpContext.Session.GetInt32("UserId");

            if (ComId == null)
            {
                result = "Please Login first";
            }
            var URLLink = "";
            var TopSize = 20;

            //if (comid == null)
            //{
            //    result = "Please Login first";
            //}

            var quary = $"Exec [ProductAnalysisReport]  '" + ComId + "','" + dtFrom + "' ,'" + dtTo + "','" + Type + "','" + URLLink + "','" + TopSize + "','" + WarehouseId + "','" + CategoryId + "','" + BrandId + "','" + SizeName + "','" + ColorName + "','" + ModelName + "','" + SupplierId + "'";


            SqlParameter[] parameters = new SqlParameter[13];
            parameters[0] = new SqlParameter("@ComId", ComId);
            parameters[1] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
            parameters[2] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
            parameters[3] = new SqlParameter("@Type", Type);
            parameters[4] = new SqlParameter("@UrlLink", URLLink);
            parameters[5] = new SqlParameter("@TopSize", TopSize);
            parameters[6] = new SqlParameter("@WarehouseId", WarehouseId);

            parameters[7] = new SqlParameter("@CategoryId", CategoryId);
            parameters[8] = new SqlParameter("@BrandId", BrandId);
            parameters[9] = new SqlParameter("@SizeName", SizeName);
            parameters[10] = new SqlParameter("@ColorName", ColorName);

            parameters[11] = new SqlParameter("@ModelName", ModelName);
            parameters[12] = new SqlParameter("@SupplierId", SupplierId);



            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS("ProductAnalysisReport", parameters);
            //datasetabc.Tables[0].TableName = "HeadWiseDetailsList";
            //datasetabc.Tables[1].TableName = "HeadWiseDetailsList";


            var abc = Helper.ConvertDataSetasJSON(datasetabc);

            //var storesummarydetails = new StoreDetailsModel();
            //storesummarydetails.CompanyList = storeSettingRepository.All().Where(x => x.ComId == comid).FirstOrDefault();
            // , StoreInfo = storesummarydetails.CompanyList

            return Json(new { Success = 1, data = abc });

        }





        [AllowAnonymous]
        public ActionResult ProductStockPurchaseViewReport(string dtFrom, string dtTo, string Type, int? WarehouseId)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }
                var URLLink = "";
                var TopSize = 20;



                var quary = $"Exec [ProductAnalysisReport]  '" + ComId + "','" + dtFrom + "' ,'" + dtTo + "','" + Type + "','" + URLLink + "','" + TopSize + "','" + WarehouseId + "'";
                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[2] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[3] = new SqlParameter("@Type", Type);
                parameters[4] = new SqlParameter("@UrlLink", URLLink);
                parameters[5] = new SqlParameter("@TopSize", TopSize);
                parameters[6] = new SqlParameter("@WarehouseId", WarehouseId);
                List<ProductAnalysisViewModel> productanalysisreport = Helper.ExecProcMapTList<ProductAnalysisViewModel>("ProductAnalysisReport", parameters);
                ViewBag.MinusStockInfo = productanalysisreport;

                @ViewBag.IsCopy = "1";
                ViewBag.ActionType = "Create";
                int PurchaseId = 0;
                ViewBag.Suppliers = _supplierRepository.GetAllForDropDown();
                if (_FromWarehousePermissionRepository.GetAllForDropDown().Count() > 0) { ViewBag.Warehouse = _FromWarehousePermissionRepository.GetAllForDropDown(); } else { ViewBag.Warehouse = _warehouseRepository.GetWarehouseLedgerHeadForDropDown(); }

                ViewBag.Category = _categoryRepository.GetAllForDropDown();
                ViewBag.Unit = _unitRepository.GetAllForDropDown();
                ViewBag.DocType = _docTypeRepository.GetPurchaseDocForDropDown();
                ViewBag.Currency = _countryRepository.GetCurrencyList();
                //return redirect("","AddPurchaseBatch",model: PurchaseId);

                return RedirectToAction("AddPurchaseBatch", "Purchase");

                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                //return View(productanalysisreport);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public ActionResult ProductLedgerNotPostedViewReport(int ProductId, string dtFrom, string dtTo, string WarehouseId = "")
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var customerid = "";
                if (ProductId > 0)
                {
                    customerid = ProductId.ToString();
                }

                var quary = $"Exec Inv_LedgerReportRunTime  '" + ComId + "','-','" + ProductId + "','" + WarehouseId + "','" + dtFrom + "' ,'" + dtTo + "', 1";


                SqlParameter[] parameters = new SqlParameter[7];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@UrlLink", "-");
                parameters[2] = new SqlParameter("@ProductId", ProductId);
                parameters[3] = new SqlParameter("@WarehouseId", WarehouseId);
                parameters[4] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[5] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[6] = new SqlParameter("@IsReport", 1);

                List<ProductLedgerViewModel> customerbalancelist = Helper.ExecProcMapTList<ProductLedgerViewModel>("Inv_LedgerReportRunTime", parameters);

                return View(customerbalancelist);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }




        [HttpGet]
        [AllowAnonymous]

        public ActionResult PurchaseBarcodeReport(int PurchaseId)
        {
            try
            {
                var action = "PrintBarcode";
                var rptFormat = "pdf";


                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");


                var reportname = "rptProductTag_36Pcs";
                var filename = "Barcode_";
                string redirectUrl = "";
                var purchaseinfo = _purchaseRepository.All().Where(x => x.Id == PurchaseId).Include(x => x.Items).FirstOrDefault();

                if (action == "PrintBarcode")
                {

                    var BarcodeReportStyle = _storeSettingRepository.All().Include(x => x.BarcodeReportStyle).FirstOrDefault().BarcodeReportStyle;

                    if (BarcodeReportStyle != null)
                    {
                        reportname = "rptProductTag_" + BarcodeReportStyle.ReportStyleName.ToString();
                    }
                    else
                    {
                        //reportname = "rptProductTag_" + ReportStyle.ToString();

                    }


                    var abcd = _barcodePrintRepository.All().Where(x => x.LuserId == UserId).ToList();
                    _barcodePrintRepository.RemoveRange(abcd);


                    var barcodelist = new List<BarcodePrintModel>();
                    foreach (var item in purchaseinfo.Items)
                    {
                        int Quantity = int.Parse(item.Quantity.ToString());

                        for (int i = 0; i < Quantity; i++)
                        {
                            BarcodePrintModel abc = new BarcodePrintModel();

                            abc.Id = 0;
                            abc.ProductId = int.Parse(item.ProductId.ToString());
                            abc.Quantity = 1;
                            abc.WarehosueId = item.WarehouseId;

                            barcodelist.Add(abc);
                        }
                    }

                    _barcodePrintRepository.AddRange(barcodelist);


                    //reportname = "rptProductTag";
                    filename = "Barcode_Print_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec POS_rptPrintBarcode '" + ComId + "', '" + UserId + "' ");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/POS/" + reportname + ".rdlc");
                }


                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));


                string DataSourceName = "DataSet1";

                //HttpContext.Session.SetObject("Acc_rptList", postData);

                //Common.Classes.clsMain.intHasSubReport = 0;
                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");// Session["ReportPath"].ToString();
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
                clsReport.strDSNMain = DataSourceName;

                //var ConstrName = "ApplicationServices";
                //string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Repository.GenerateReport(clsReport.strReportPathMain, clsReport.strQueryMain, ConstrName, rptFormat);

                //string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                //redirectUrl = callBackUrl;
                //return Json(new { Url = redirectUrl });

                return RedirectToAction("Index", "ReportViewer");
            }

            catch (Exception ex)
            {
                // If Sucess== 0 then Unable to perform Save/Update Operation and send Exception to View as JSON
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
            //return RedirectToAction("Index");

        }


        public class ProductResult : ProductModel
        {
            //public int Id { get; set; }
            public string? CategoryName { get; set; }
            public string? BrandName { get; set; }

            public string? UnitName { get; set; }

            public string? VariantName { get; set; }



            //public string? Name { get; set; }
            //public string? Code { get; set; }
            public string? ProductBarcode { get; set; }
            //public string? Description { get; set; }
            //public double CostPrice { get; set; }
            //public double Price { get; set; }

            public List<WarehouseResult> WarehouseList { get; set; }
            public List<WarehouseResult> AvgCost { get; set; }
            public List<WarehouseResult> CostingValue { get; set; }
            public List<WarehouseResult> SalesValue { get; set; }
            public List<WarehouseResult> ROL123 { get; set; }

            public double stock { get; set; }

            public double TotalPurchase { get; set; }
            public double TotalTransferIn { get; set; }
            public double TotalTransferOut { get; set; }




            public string? LastPurchaseDate { get; set; }
            public string? LastReceivedDate { get; set; }

            public string? LastPurchaseSupplier { get; set; }


            public double TotalSales { get; set; }
            public double TotalIssue { get; set; }
            public double TotalDamage { get; set; }


            public double TotalSalesReturn { get; set; }
            public double TotalPurchaseReturn { get; set; }


            public double ROLStock1 { get; set; }
            public double ROLStock2 { get; set; }
            public double ROLStock3 { get; set; }


            public string? LastSalesDate { get; set; }
            public string? LastIssueDate { get; set; }

            public string? LastSalesCustomer { get; set; }

            public double CurrentStock { get; set; }
            public string? SupplierName { get; set; }

            public object BatchSerial { get; set; }



        }



        //public class WarehouseResult
        //{
        //    //public int Id { get; set; }

        //    public int? WarehouseId { get; set; }

        //    public int CostCalculatedId { get; set; }

        //    public string? WhShortName { get; set; }
        //    public double CurrentStock { get; set; }
        //    public double AverageCosting { get; set; }

        //    public double CostingValue { get; set; }

        //    public double SalesValue { get; set; }

        //    //public int? WarehouseId { get; set; }


        //    //public decimal CostingValue { get; set; }
        //    //public decimal SalesValue { get; set; }
        //}


        public class Foo
        {
            public int Id { get; set; }
            public int? ParentId { get; set; }
            // other props
        }

        List<CategoryModel> GetChildren(List<CategoryModel> foos, int id)
        {
            return foos
                .Where(x => x.CategoryParentId == id)
                .Union(foos.Where(x => x.CategoryParentId == id)
                    .SelectMany(y => GetChildren(foos, y.Id))
                ).ToList();
        }





        public static List<int> TraverseTree(List<CategoryModel> list, List<int> arraycategoryid)
        {
            //List<int> arraycategoryid = new List<int>();

            foreach (var item in list)
            {
                arraycategoryid.Add(item.Id);
                if (item.ChildCategoryList != null)
                {
                    TraverseTree(item.ChildCategoryList.ToList(), arraycategoryid);
                }
            }

            return arraycategoryid;
        }

        //public static List<int> BaseCompnayTree(List<StoreSettingModel> list, List<int> arraycomid)
        //{
        //    //List<int> arraycategoryid = new List<int>();

        //    foreach (var item in list)
        //    {
        //        arraycomid.Add(item.Id);
        //        if (item.CompanyList != null)
        //        {
        //            BaseCompnayTree(item.CompanyList.ToList(), arraycomid);
        //        }
        //    }

        //    return arraycomid;
        //}

        [AllowAnonymous]

        public JsonResult GetProductListForDropDown(int? CategoryId, int pageNo = 1, decimal pageSize = 10, string searchquery = "")
        {
            try
            {

                var products = _productRepository.All();//.Take(200);//.Include(x=>x.vUnit).Include(x=>x.Category);

                if (searchquery?.Length > 1)
                {
                    products = products.Where(x => x.Name.ToLower().Contains(searchquery.ToLower()) || x.Code.ToLower().Contains(searchquery.ToLower()));
                }
                if (CategoryId != null)
                {
                    products = products.Where(x => x.CategoryId == CategoryId);
                }


                decimal TotalRecordCount = products.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);





                decimal skip = (pageNo - 1) * pageSize;

                // Get total number of records
                int total = products.Count();

                //var products = productslist.OrderBy(c => c.Id)
                //                .Skip(skip)
                //                .Take(pageSize)
                //                .ToList();



                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                }

                List<int?> permitwarehouselist = new List<int?>();

                foreach (var item in warehouselist)
                {
                    permitwarehouselist.Add(int.Parse(item.Value.ToString()));
                }


                var query = (from p in products

                                 //let costcallist = p.CostCalculated
                             let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))

                         .GroupBy(st => new { st.WarehouseId, st.ProductId })
                             .Select(grouping => grouping.Max(row => row.Id))
                             .ToArray()

                             //let  SubThings = p.CostCalculateds.GroupBy(st=>new {st.WarehouseId,st.ProductId}).Select(grouping => grouping.Max(row => row.Id)).ToList()

                             //let  LastPurchase = p.PurchaseItems.Sum(st=>new {st.ProductId}).Select(grouping => grouping.Max(row => row.Id)).ToList()


                             let WarehouseQty =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new WarehouseResult
                             {
                                 CostCalculatedId = x.Id,
                                 //WarehouseId = x.WarehouseId, 
                                 WhShortName = x.Warehouse.WhShortName,
                                 CurrentStock = x.CurrQty + x.PrevQty,
                                 AverageCosting = x.CalculatedPrice,
                                 CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                                 SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))
                             //.Where(x => x.CostCalculatedId == 86)
                             .ToList()
                             ?? null

                             select new ProductResult
                             {
                                 Id = p.Id,
                                 Name = p.Name,
                                 Code = p.Code,
                                 Price = p.Price,
                                 CostPrice = p.CostPrice,

                                 UnitName = p.Unit.UnitName,

                                 CategoryName = p.Category.Name,
                                 BrandName = p.Brand != null ? p.Brand.BrandName : "",
                                 ModelName = p.ModelName,
                                 VariantName = p.SizeName,
                                 SizeName = p.SizeName,
                                 ColorName = p.ColorName,

                                 //ROL = p.ROL,
                                 //ROQ = p.ROQ,
                                 //MOQ = p.MOQ,
                                 OldPrice = p.OldPrice,
                                 ImagePath = p.ImagePath,



                                 ProductBarcode = p.Code,
                                 Description = p.Description,

                                 WarehouseList = WarehouseQty
                             });


                //var parser = new Parser<ProductResult>(Request.Form, query);
                //return Json(parser.Parse());


                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, ProductList = abcd, PageInfo = pageinfo });
                //return Json(abcd, pageinfo);

            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
                return Json(ex.Message);
            }
        }




        [AllowAnonymous]
        public async Task<IActionResult> GetProductListOld(int? CategoryId, int? WarehouseId, string ROL, string BrandName, int? BrandId, string ModelId)
        {
            try
            {

                var products = _productRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);

                if (CategoryId != null)
                {
                    List<int> arraycategoryid = new List<int>();
                    arraycategoryid.Add(CategoryId.GetValueOrDefault());


                    List<CategoryModel> resultlist = _categoryRepository.All().Where(x => x.Id == CategoryId).SelectMany(x => x.ChildCategoryList).ToList();

                    arraycategoryid = TraverseTree(resultlist, arraycategoryid).ToList();

                    products = products.Where(p => arraycategoryid.Contains(p.CategoryId.GetValueOrDefault()));


                    //var categorylist = _categoryRepository.All().ToList();

                    //var abc  = GetChildren(result, CategoryId.GetValueOrDefault());

                    //var arrayabc = abc.Select(x => x.Id).ToList();

                    //var job = _categoryRepository.All()
                    //    .Include(x => x.Categories.Select(q => q.catego))
                    //    .Where(x => x.JobID == id)
                    //    .SingleOrDefault();



                    //var list = _categoryRepository.All().Where(x=>x.Id == CategoryId).ToList();

                    //arraycategoryid = TraverseTree(resultlist, arraycategoryid).ToList();

                    //for (int i = 0; i < result.Count(); i++)
                    //{
                    //    Console.WriteLine($"{result[i].Id} - {result[i].CategoryParentId}");
                    //    arraycategoryid.Add(result[i].Id);
                    //}

                    //Console.ReadKey();
                    //Console.ReadKey();



                    //products = products.Where(p => arraycategoryid.Contains(p.CategoryId.GetValueOrDefault()));
                    //products = products.Where(p => p.CategoryId == CategoryId);


                }

                //if (BrandName != null)
                //{
                //    products = products.Where(p => p.BrandName == BrandName);
                //}

                if (BrandId != null)
                {
                    products = products.Where(p => p.BrandId == BrandId);
                }



                //if (BrandId != null)
                //{
                //    products = products.Where(p => p.BrandId == BrandId);
                //}


                if (ModelId != "Model")
                {
                    //products = products.Where(p => p.ModelName.Contains(ModelId));
                    products = products.Where(p => p.ModelName == ModelId);

                }


                //if (WarehouseId != null)
                //{
                //    products = products.Where(p => p.WarehouseId == WarehouseId);
                //}
                //if (ROL.Length > 0)
                //{
                //    if (ROL == "ROL1")
                //    {
                //        products = products.Where(p => p.ROLStatus == 1);
                //    }
                //    else if (ROL == "ROL2")
                //    {
                //        products = products.Where(p => p.ROLStatus == 2);
                //    }
                //    else if (ROL == "ROL3")
                //    {
                //        products = products.Where(p => p.ROLStatus == 3);
                //    }

                //}

                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                }

                List<int?> permitwarehouselist = new List<int?>();

                if (WarehouseId != null)
                {
                    warehouselist = warehouselist.Where(x => x.Value == WarehouseId.ToString());
                }

                foreach (var item in warehouselist)
                {
                    permitwarehouselist.Add(int.Parse(item.Value.ToString()));
                }






                var query = (from p in products

                             let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))
                             //.Where(x=>x.Warehouse.Contains(warehouselist))
                             .GroupBy(st => new { st.WarehouseId, st.ProductId })
                             .Select(grouping => grouping.Max(row => row.Id))
                             .ToArray()



                             //let  SubThings = p.CostCalculateds.GroupBy(st=>new {st.WarehouseId,st.ProductId}).Select(grouping => grouping.Max(row => row.Id)).ToList()

                             //let  LastPurchase = p.PurchaseItems.Sum(st=>new {st.ProductId}).Select(grouping => grouping.Max(row => row.Id)).ToList()


                             let WarehouseQty =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new WarehouseResult
                             {
                                 CostCalculatedId = x.Id,
                                 WarehouseId = x.WarehouseId,
                                 WhShortName = x.Warehouse.WhShortName,
                                 CurrentStock = x.CurrQty + x.PrevQty,
                                 AverageCosting = x.CalculatedPrice,
                                 CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                                 SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))

                             //.Where(x => x.CostCalculatedId == 86)
                             .ToList()
                             ?? null


                             let CurrentStockCalc =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new
                             {
                                 CostCalculatedId = x.Id,
                                 CurrentStock = x.CurrQty + x.PrevQty,

                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))
                             .Sum(x => x.CurrentStock)

                             select new ProductResult
                             {
                                 Id = p.Id,
                                 Name = p.Name,
                                 LocalName = p.LocalName,

                                 Code = p.Code,
                                 Price = p.Price,
                                 WholeSalePrice = p.WholeSalePrice,

                                 UnitName = p.Unit.UnitName,
                                 CategoryName = p.Category.Name,

                                 BrandName = p.Brand != null ? p.Brand.BrandName : "",
                                 ROL = p.ROL,
                                 ROLTwo = p.ROLTwo,
                                 ROLThree = p.ROLThree,

                                 ROQ = p.ROQ,
                                 MOQ = p.MOQ,
                                 OldPrice = p.OldPrice,

                                 SizeName = p.SizeName,
                                 ColorName = p.ColorName,
                                 ModelName = p.ModelName,

                                 ProductBarcode = p.Code,
                                 Description = p.Description,
                                 CostPrice = p.CostPrice,
                                 SupplierName = p.SupplierModel != null ? p.SupplierModel.SupplierName : "",
                                 TotalPurchase = p.PurchaseItems.Sum(x => x.Quantity),


                                 TotalSales = p.SalesItems.Sum(x => x.Quantity),
                                 TotalIssue = p.IssueItems.Sum(x => x.Quantity),
                                 TotalDamage = p.DamageItems.Sum(x => x.Quantity),

                                 TotalSalesReturn = p.SalesReturnItems.Sum(x => x.Quantity),
                                 TotalPurchaseReturn = p.PurchaseReturnItems.Sum(x => x.Quantity),

                                 TotalTransferIn = p.InternalTransferItems.Sum(x => x.Quantity),
                                 TotalTransferOut = p.InternalTransferItems.Sum(x => x.Quantity),


                                 LastPurchaseDate = p.PurchaseItems.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseModel.PurchaseDate.ToString("dd-MMM-yy") ?? "",
                                 LastReceivedDate = p.InternalTransferItems.OrderByDescending(x => x.Id).FirstOrDefault().InternalTransferModel.InternalTransferDate.ToString("dd-MMM-yy") ?? "",

                                 LastSalesDate = p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.SalesDate.ToString("dd-MMM-yy") ?? "",
                                 LastIssueDate = p.IssueItems.OrderByDescending(x => x.Id).FirstOrDefault().IssueModel.IssueDate.ToString("dd-MMM-yy") ?? "",


                                 //LastPurchaseDate = (DateTime)p.PurchaseItems.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseModel.PurchaseDate,
                                 //LastSalesDate = p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.SalesDate,

                                 LastPurchaseSupplier = p.PurchaseItems.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseModel.SupplierModel.SupplierName ?? null,
                                 LastSalesCustomer = p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.CustomerModel.Name ?? "" + " - " + p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.CustomerName ?? "",

                                 WarehouseList = WarehouseQty,
                                 CurrentStock = CurrentStockCalc,

                                 ImagePath = p.ImagePath,

                                 BatchSerial = p.PurchaseBatchItems.Where(x => x.IsUsed == false).Select(x => new
                                 {
                                     BatchSerialNo = x.BatchSerialNo,
                                     BatchQty = x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity),
                                     Amount = (x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity)) * x.PurchaseItems.Price,
                                     PurchaseDate = x.PurchaseItems.PurchaseModel.PurchaseDate.ToString("dd-MMM-yy"),
                                     //SupplierName = x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName + " " + x.PurchaseItems.PurchaseModel.SupplierName + " " + x.PurchaseItems.PurchaseModel.PhoneNo
                                     SupplierName = (x.PurchaseItems.PurchaseModel.SupplierName.Length == 0 || x.PurchaseItems.PurchaseModel.SupplierName == null) ? x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName : x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName + " - " + x.PurchaseItems.PurchaseModel.SupplierName,
                                 })
                             });


                if (ROL == "ROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.ROL > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.ROLTwo > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.ROLThree > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.CurrentStock >= 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.CurrentStock >= x.ROL));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.CurrentStock >= x.ROLTwo));
                    return Json(parser.Parse());
                }
                else
                {
                    var parser = new Parser<ProductResult>(Request.Form, query);
                    return Json(parser.Parse());
                }

                //var parser = new Parser<ProductResult>(Request.Form, query);
                //return Json(parser.Parse());


                //dynamic abcd = parser.Parse();
                //return Json(abcd);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult GetProductListBOM(int? CategoryId, int? WarehouseId, string ROL, string BrandName, int? BrandId, int stockCount, string ModelId, int page = 1, decimal size = 5, string searchquery = "")
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var products = _productRepository.All().Where(x => x.IsDelete == false);//.Include(x=>x.vUnit).Include(x=>x.Category);
                var taburesquest = JsonConvert.DeserializeObject<TabulatorRequest>(searchquery);

                foreach (var item in taburesquest.Filter)
                {
                    if (item.Field == "Name")
                    {
                        products = products.Where(x => x.Name.ToLower().Contains(item.Value.ToLower()));
                    }

                    if (item.Field == "Code")
                    {
                        products = products.Where(x => x.Code.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "ModelName")
                    {
                        products = products.Where(x => x.ModelName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "LocalName")
                    {
                        products = products.Where(x => x.LocalName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "CategoryName")
                    {
                        products = products.Where(x => x.Category.Name.ToLower().Contains(item.Value.ToLower()));
                    }

                    if (item.Field == "Description")
                    {
                        products = products.Where(x => x.Description.ToLower().Contains(item.Value.ToLower()));
                    }

                    if (item.Field == "ColorName")
                    {
                        products = products.Where(x => x.ColorName.ToLower().Contains(item.Value.ToLower()));
                    }

                    if (item.Field == "SizeName")
                    {
                        products = products.Where(x => x.SizeName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "UnitName")
                    {
                        products = products.Where(x => x.Unit.UnitName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "BrandName")
                    {
                        products = products.Where(x => x.Brand.BrandName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "SupplierName")
                    {
                        products = products.Where(x => x.SupplierModel.SupplierName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "CostPrice")
                    {
                        products = products.Where(x => x.CostPrice.ToString().ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "Price")
                    {
                        products = products.Where(x => x.Price.ToString().ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "RunTimeLiveStock")
                    {
                        products = products.Where(x => x.RunTimeLiveStock.ToString().ToLower().Contains(item.Value.ToLower()));
                    }

                }
                //var linqexpress= taburesquest.GetCombinedFilterExpression();
                //if (!string.IsNullOrEmpty(linqexpress))
                //{
                //    products= products.Where(linqexpress);
                //}

                //if (searchquery?.Length > 1)
                //{
                //    products = products.Where(x =>
                //        x.Name.ToLower().Contains(searchquery.ToLower()) ||
                //        x.Category.Name.ToLower().Contains(searchquery.ToLower()) ||
                //        x.Code.ToLower().Contains(searchquery.ToLower()) ||
                //        x.Price.ToString().ToLower().Contains(searchquery.ToLower()) ||
                //        x.CostPrice.ToString().ToLower().Contains(searchquery.ToLower())
                //    );
                //}

                if (stockCount == 1)
                {
                    var allStocks = _productRepository.All().Where(x => x.ROL > 0).Select(x => x.Id).Distinct().ToList();

                    products = products
                          .Where(s => s.ComId == comid && allStocks.Contains(s.Id));
                }
                else if (stockCount == 2)
                {
                    var availableStocks = _productRepository.All().Where(x => x.RunTimeLiveStock > x.ROL).Select(x => x.Id).Distinct().ToList();

                    products = products
                          .Where(s => s.ComId == comid && availableStocks.Contains(s.Id));
                }
                else if (stockCount == 3)
                {
                    var lowStocks = _productRepository.All().Where(x => x.RunTimeLiveStock < x.ROL).Select(x => x.Id).Distinct().ToList();

                    products = products
                         .Where(s => s.ComId == comid && lowStocks.Contains(s.Id));
                }
                else if (stockCount == 4)
                {
                    var outStocks = _productRepository.All().Where(x => x.RunTimeLiveStock == 0).Select(x => x.Id).Distinct().ToList();

                    products = products
                         .Where(s => s.ComId == comid && outStocks.Contains(s.Id));
                }


                if (CategoryId != null)
                {
                    List<int> arraycategoryid = new List<int>();
                    arraycategoryid.Add(CategoryId.GetValueOrDefault());


                    List<CategoryModel> resultlist = _categoryRepository.All().Where(x => x.Id == CategoryId).SelectMany(x => x.ChildCategoryList).ToList();

                    arraycategoryid = TraverseTree(resultlist, arraycategoryid).ToList();

                    products = products.Where(p => arraycategoryid.Contains(p.CategoryId.GetValueOrDefault()));



                }

                if (BrandId != null)
                {
                    products = products.Where(p => p.BrandId == BrandId);
                }





                if (ModelId != "Model" && ModelId != null)
                {
                    //products = products.Where(p => p.ModelName.Contains(ModelId));
                    products = products.Where(p => p.ModelName == ModelId);

                }




                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                }

                List<int?> permitwarehouselist = new List<int?>();

                if (WarehouseId != null)
                {
                    warehouselist = warehouselist.Where(x => x.Value == WarehouseId.ToString());
                }

                foreach (var item in warehouselist)
                {
                    permitwarehouselist.Add(int.Parse(item.Value.ToString()));
                }



                decimal TotalRecordCount = products.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / taburesquest.Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                int skip = (taburesquest.Page - 1) * taburesquest.Size;



                var query = (from p in products

                             let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))
                             //.Where(x=>x.Warehouse.Contains(warehouselist))
                             .GroupBy(st => new { st.WarehouseId, st.ProductId })
                             .Select(grouping => grouping.Max(row => row.Id))
                             .ToArray()



                             let WarehouseQty =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new WarehouseResult
                             {
                                 CostCalculatedId = x.Id,
                                 WarehouseId = x.WarehouseId,
                                 WhShortName = x.Warehouse.WhShortName,
                                 CurrentStock = x.CurrQty + x.PrevQty,
                                 AverageCosting = x.CalculatedPrice,
                                 CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                                 SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))

                             //.Where(x => x.CostCalculatedId == 86)
                             .ToList()
                             ?? null


                             let CurrentStockCalc =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new
                             {
                                 CostCalculatedId = x.Id,
                                 CurrentStock = x.CurrQty + x.PrevQty,

                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))
                             .Sum(x => x.CurrentStock)

                             select new ProductResult
                             {
                                 Id = p.Id,
                                 Name = p.Name,
                                 LocalName = p.LocalName,

                                 Code = p.Code,
                                 Price = p.Price,
                                 WholeSalePrice = p.WholeSalePrice,

                                 UnitName = p.Unit.UnitName,
                                 UnitId = p.Unit.Id,
                                 CategoryId = p.Category.Id,
                                 CategoryName = p.Category.Name,

                                 BrandName = p.Brand != null ? p.Brand.BrandName : "",
                                 ROL = p.ROL,
                                 ROLTwo = p.ROLTwo,
                                 ROLThree = p.ROLThree,

                                 ROQ = p.ROQ,
                                 MOQ = p.MOQ,
                                 OldPrice = p.OldPrice,

                                 SizeName = p.SizeName,
                                 ColorName = p.ColorName,
                                 ModelName = p.ModelName,

                                 RunTimeLiveStock = p.RunTimeLiveStock,

                                 ProductBarcode = p.Code,
                                 Description = p.Description,
                                 CostPrice = p.CostPrice,
                                 SupplierName = p.SupplierModel != null ? p.SupplierModel.SupplierName : "",




                                 WarehouseList = WarehouseQty,
                                 AvgCost = WarehouseQty,
                                 CostingValue = WarehouseQty,
                                 SalesValue = WarehouseQty,
                                 ROL123 = WarehouseQty,
                                 CurrentStock = CurrentStockCalc,

                                 ImagePath = p.ImagePath,

                                 BatchSerial = p.PurchaseBatchItems.Where(x => x.IsUsed == false).Select(x => new
                                 {
                                     BatchSerialNo = x.BatchSerialNo,
                                     BatchQty = x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity),
                                     Amount = (x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity)) * x.PurchaseItems.Price,
                                     PurchaseDate = x.PurchaseItems.PurchaseModel.PurchaseDate.ToString("dd-MMM-yy"),
                                     PurchaseCode = x.PurchaseItems.PurchaseModel.PurchaseCode,
                                     //SupplierName = x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName + " " + x.PurchaseItems.PurchaseModel.SupplierName + " " + x.PurchaseItems.PurchaseModel.PhoneNo
                                     SupplierName = (x.PurchaseItems.PurchaseModel.SupplierName.Length == 0 || x.PurchaseItems.PurchaseModel.SupplierName == null) ? x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName : x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName + " - " + x.PurchaseItems.PurchaseModel.SupplierName,
                                 })
                             });


                if (ROL == "ROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.ROL > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.ROLTwo > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.ROLThree > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.CurrentStock >= 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.CurrentStock >= x.ROL));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.CurrentStock >= x.ROLTwo));
                    return Json(parser.Parse());
                }
                else
                {
                    //var parser = new Parser<ProductResult>(Request.Form, query);
                    //return Json(parser.Parse());

                    var abcd = query.OrderByDescending(x => x.Id).Skip(skip).Take(taburesquest.Size).ToList();
                    var pageinfo = new PagingInfo();
                    pageinfo.PageCount = int.Parse(PageCount.ToString());
                    pageinfo.PageNo = taburesquest.Page;
                    pageinfo.PageSize = taburesquest.Size;
                    pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                    //return  abcd;
                    return Json(new { Success = 1, error = false, data = abcd, page = taburesquest.Page, size = taburesquest.Size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

                }

                //var parser = new Parser<ProductResult>(Request.Form, query);
                //return Json(parser.Parse());


                //dynamic abcd = parser.Parse();
                //return Json(abcd);



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult GetProductList1(int? CategoryId, int? WarehouseId, string ROL, string BrandName, int? BrandId, int stockCount, string ModelId, int page = 1, decimal size = 5, string searchquery = "")
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var products = _productRepository.All().Where(x => x.IsDelete == false);//.Include(x=>x.vUnit).Include(x=>x.Category);
                var taburesquest = JsonConvert.DeserializeObject<TabulatorRequest>(searchquery);

                foreach (var item in taburesquest.Filter)
                {
                    if (item.Field == "Name")
                    {
                        products = products.Where(x => x.Name.ToLower().Contains(item.Value.ToLower()));
                    }

                    if (item.Field == "Code")
                    {
                        products = products.Where(x => x.Code.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "ModelName")
                    {
                        products = products.Where(x => x.ModelName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "LocalName")
                    {
                        products = products.Where(x => x.LocalName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "CategoryName")
                    {
                        products = products.Where(x => x.Category.Name.ToLower().Contains(item.Value.ToLower()));
                    }

                    if (item.Field == "Description")
                    {
                        products = products.Where(x => x.Description.ToLower().Contains(item.Value.ToLower()));
                    }

                    if (item.Field == "ColorName")
                    {
                        products = products.Where(x => x.ColorName.ToLower().Contains(item.Value.ToLower()));
                    }

                    if (item.Field == "SizeName")
                    {
                        products = products.Where(x => x.SizeName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "UnitName")
                    {
                        products = products.Where(x => x.Unit.UnitName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "BrandName")
                    {
                        products = products.Where(x => x.Brand.BrandName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "SupplierName")
                    {
                        products = products.Where(x => x.SupplierModel.SupplierName.ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "CostPrice")
                    {
                        products = products.Where(x => x.CostPrice.ToString().ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "Price")
                    {
                        products = products.Where(x => x.Price.ToString().ToLower().Contains(item.Value.ToLower()));
                    }
                    if (item.Field == "RunTimeLiveStock")
                    {
                        products = products.Where(x => x.RunTimeLiveStock.ToString().ToLower().Contains(item.Value.ToLower()));
                    }

                }
                //var linqexpress= taburesquest.GetCombinedFilterExpression();
                //if (!string.IsNullOrEmpty(linqexpress))
                //{
                //    products= products.Where(linqexpress);
                //}

                //if (searchquery?.Length > 1)
                //{
                //    products = products.Where(x =>
                //        x.Name.ToLower().Contains(searchquery.ToLower()) ||
                //        x.Category.Name.ToLower().Contains(searchquery.ToLower()) ||
                //        x.Code.ToLower().Contains(searchquery.ToLower()) ||
                //        x.Price.ToString().ToLower().Contains(searchquery.ToLower()) ||
                //        x.CostPrice.ToString().ToLower().Contains(searchquery.ToLower())
                //    );
                //}

                if (stockCount == 1)
                {
                    var allStocks = _productRepository.All().Where(x => x.ROL > 0).Select(x => x.Id).Distinct().ToList();

                    products = products
                          .Where(s => s.ComId == comid && allStocks.Contains(s.Id));
                }
                else if (stockCount == 2)
                {
                    var availableStocks = _productRepository.All().Where(x => x.RunTimeLiveStock > x.ROL).Select(x => x.Id).Distinct().ToList();

                    products = products
                          .Where(s => s.ComId == comid && availableStocks.Contains(s.Id));
                }
                else if (stockCount == 3)
                {
                    var lowStocks = _productRepository.All().Where(x => x.RunTimeLiveStock < x.ROL).Select(x => x.Id).Distinct().ToList();

                    products = products
                         .Where(s => s.ComId == comid && lowStocks.Contains(s.Id));
                }
                else if (stockCount == 4)
                {
                    var outStocks = _productRepository.All().Where(x => x.RunTimeLiveStock == 0).Select(x => x.Id).Distinct().ToList();

                    products = products
                         .Where(s => s.ComId == comid && outStocks.Contains(s.Id));
                }


                if (CategoryId != null)
                {
                    List<int> arraycategoryid = new List<int>();
                    arraycategoryid.Add(CategoryId.GetValueOrDefault());


                    List<CategoryModel> resultlist = _categoryRepository.All().Where(x => x.Id == CategoryId).SelectMany(x => x.ChildCategoryList).ToList();

                    arraycategoryid = TraverseTree(resultlist, arraycategoryid).ToList();

                    products = products.Where(p => arraycategoryid.Contains(p.CategoryId.GetValueOrDefault()));



                }

                if (BrandId != null)
                {
                    products = products.Where(p => p.BrandId == BrandId);
                }





                if (ModelId != "Model" && ModelId != null)
                {
                    //products = products.Where(p => p.ModelName.Contains(ModelId));
                    products = products.Where(p => p.ModelName == ModelId);

                }




                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                }

                List<int?> permitwarehouselist = new List<int?>();

                if (WarehouseId != null)
                {
                    warehouselist = warehouselist.Where(x => x.Value == WarehouseId.ToString());
                }

                foreach (var item in warehouselist)
                {
                    permitwarehouselist.Add(int.Parse(item.Value.ToString()));
                }



                decimal TotalRecordCount = products.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / taburesquest.Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                int skip = (taburesquest.Page - 1) * taburesquest.Size;



                var query = (from p in products

                             let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))
                             //.Where(x=>x.Warehouse.Contains(warehouselist))
                             .GroupBy(st => new { st.WarehouseId, st.ProductId })
                             .Select(grouping => grouping.Max(row => row.Id))
                             .ToArray()



                             let WarehouseQty =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new WarehouseResult
                             {
                                 CostCalculatedId = x.Id,
                                 WarehouseId = x.WarehouseId,
                                 WhShortName = x.Warehouse.WhShortName,
                                 CurrentStock = x.CurrQty + x.PrevQty,
                                 AverageCosting = x.CalculatedPrice,
                                 CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                                 SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))

                             //.Where(x => x.CostCalculatedId == 86)
                             .ToList()
                             ?? null


                             let CurrentStockCalc =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new
                             {
                                 CostCalculatedId = x.Id,
                                 CurrentStock = x.CurrQty + x.PrevQty,

                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))
                             .Sum(x => x.CurrentStock)

                             select new ProductResult
                             {
                                 Id = p.Id,
                                 Name = p.Name,
                                 LocalName = p.LocalName,

                                 Code = p.Code,
                                 Price = p.Price,
                                 WholeSalePrice = p.WholeSalePrice,

                                 UnitName = p.Unit.UnitName,
                                 UnitId = p.Unit.Id,
                                 CategoryId = p.Category.Id,
                                 CategoryName = p.Category.Name,

                                 BrandName = p.Brand != null ? p.Brand.BrandName : "",
                                 ROL = p.ROL,
                                 ROLTwo = p.ROLTwo,
                                 ROLThree = p.ROLThree,

                                 ROQ = p.ROQ,
                                 MOQ = p.MOQ,
                                 OldPrice = p.OldPrice,

                                 SizeName = p.SizeName,
                                 ColorName = p.ColorName,
                                 ModelName = p.ModelName,

                                 RunTimeLiveStock = p.RunTimeLiveStock,

                                 ProductBarcode = p.Code,
                                 Description = p.Description,
                                 CostPrice = p.CostPrice,
                                 SupplierName = p.SupplierModel != null ? p.SupplierModel.SupplierName : "",




                                 WarehouseList = WarehouseQty,
                                 AvgCost = WarehouseQty,
                                 CostingValue = WarehouseQty,
                                 SalesValue = WarehouseQty,
                                 ROL123 = WarehouseQty,
                                 CurrentStock = CurrentStockCalc,

                                 ImagePath = p.ImagePath,

                                 BatchSerial = p.PurchaseBatchItems.Where(x => x.IsUsed == false).Select(x => new
                                 {
                                     BatchSerialNo = x.BatchSerialNo,
                                     BatchQty = x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity),
                                     Amount = (x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity)) * x.PurchaseItems.Price,
                                     PurchaseDate = x.PurchaseItems.PurchaseModel.PurchaseDate.ToString("dd-MMM-yy"),
                                     PurchaseCode = x.PurchaseItems.PurchaseModel.PurchaseCode,
                                     //SupplierName = x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName + " " + x.PurchaseItems.PurchaseModel.SupplierName + " " + x.PurchaseItems.PurchaseModel.PhoneNo
                                     SupplierName = (x.PurchaseItems.PurchaseModel.SupplierName.Length == 0 || x.PurchaseItems.PurchaseModel.SupplierName == null) ? x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName : x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName + " - " + x.PurchaseItems.PurchaseModel.SupplierName,
                                 })
                             });


                if (ROL == "ROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.ROL > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.ROLTwo > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.ROLThree > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.CurrentStock >= 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.CurrentStock >= x.ROL));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.CurrentStock >= x.ROLTwo));
                    return Json(parser.Parse());
                }
                else
                {
                    //var parser = new Parser<ProductResult>(Request.Form, query);
                    //return Json(parser.Parse());

                    var abcd = query.OrderByDescending(x => x.Id).Skip(skip).Take(taburesquest.Size).ToList();
                    var pageinfo = new PagingInfo();
                    pageinfo.PageCount = int.Parse(PageCount.ToString());
                    pageinfo.PageNo = taburesquest.Page;
                    pageinfo.PageSize = taburesquest.Size;
                    pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                    //return  abcd;
                    return Json(new { Success = 1, error = false, data = abcd, page = taburesquest.Page, size = taburesquest.Size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

                }

                //var parser = new Parser<ProductResult>(Request.Form, query);
                //return Json(parser.Parse());


                //dynamic abcd = parser.Parse();
                //return Json(abcd);



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult GetProductList(int? CategoryId, int? WarehouseId, string ROL, string BrandName, int? BrandId, int stockCount, string ModelId, int page = 1, decimal size = 5, string searchquery = "")
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var products = _productRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);

                if (searchquery?.Length > 1)
                {
                    products = products.Where(x =>
                        x.Name.ToLower().Contains(searchquery.ToLower()) ||
                        x.Category.Name.ToLower().Contains(searchquery.ToLower()) ||
                        x.Code.ToLower().Contains(searchquery.ToLower()) ||
                        x.Price.ToString().ToLower().Contains(searchquery.ToLower()) ||
                        x.CostPrice.ToString().ToLower().Contains(searchquery.ToLower())
                    );

                }

                if (stockCount == 1)
                {
                    var allStocks = _productRepository.All().Where(x => x.ComId == comid).Select(x => x.Id).Distinct().ToList();

                    products = products
                          .Where(s => s.ComId == comid && allStocks.Contains(s.Id));
                }
                else if (stockCount == 2)
                {
                    var availableStocks = _productRepository.All().Where(x => x.RunTimeLiveStock > x.ROL).Select(x => x.Id).Distinct().ToList();

                    products = products
                          .Where(s => s.ComId == comid && availableStocks.Contains(s.Id));
                }
                else if (stockCount == 3)
                {
                    var lowStocks = _productRepository.All().Where(x => x.RunTimeLiveStock < x.ROL).Select(x => x.Id).Distinct().ToList();

                    products = products
                         .Where(s => s.ComId == comid && lowStocks.Contains(s.Id));
                }
                else if (stockCount == 4)
                {
                    var outStocks = _productRepository.All().Where(x => x.RunTimeLiveStock == 0).Select(x => x.Id).Distinct().ToList();

                    products = products
                         .Where(s => s.ComId == comid && outStocks.Contains(s.Id));
                }


                if (CategoryId != null)
                {
                    List<int> arraycategoryid = new List<int>();
                    arraycategoryid.Add(CategoryId.GetValueOrDefault());


                    List<CategoryModel> resultlist = _categoryRepository.All().Where(x => x.Id == CategoryId).SelectMany(x => x.ChildCategoryList).ToList();

                    arraycategoryid = TraverseTree(resultlist, arraycategoryid).ToList();

                    products = products.Where(p => arraycategoryid.Contains(p.CategoryId.GetValueOrDefault()));



                }

                if (BrandId != null)
                {
                    products = products.Where(p => p.BrandId == BrandId);
                }





                if (ModelId != "Model" && ModelId != null)
                {
                    //products = products.Where(p => p.ModelName.Contains(ModelId));
                    products = products.Where(p => p.ModelName == ModelId);

                }




                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                }

                List<int?> permitwarehouselist = new List<int?>();

                if (WarehouseId != null)
                {
                    warehouselist = warehouselist.Where(x => x.Value == WarehouseId.ToString());
                }

                foreach (var item in warehouselist)
                {
                    permitwarehouselist.Add(int.Parse(item.Value.ToString()));
                }



                decimal TotalRecordCount = products.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                decimal skip = (page - 1) * size;



                var query = (from p in products

                             let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))
                             //.Where(x=>x.Warehouse.Contains(warehouselist))
                             .GroupBy(st => new { st.WarehouseId, st.ProductId })
                             .Select(grouping => grouping.Max(row => row.Id))
                             .ToArray()



                             let WarehouseQty =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new WarehouseResult
                             {
                                 CostCalculatedId = x.Id,
                                 WarehouseId = x.WarehouseId,
                                 WhShortName = x.Warehouse.WhShortName,
                                 CurrentStock = x.CurrQty + x.PrevQty,
                                 AverageCosting = x.CalculatedPrice,
                                 CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                                 SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))

                             //.Where(x => x.CostCalculatedId == 86)
                             .ToList()
                             ?? null


                             let CurrentStockCalc =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new
                             {
                                 CostCalculatedId = x.Id,
                                 CurrentStock = x.CurrQty + x.PrevQty,

                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))
                             .Sum(x => x.CurrentStock)

                             select new ProductResult
                             {
                                 Id = p.Id,
                                 Name = p.Name,
                                 LocalName = p.LocalName,

                                 Code = p.Code,
                                 Price = p.Price,
                                 WholeSalePrice = p.WholeSalePrice,

                                 UnitName = p.Unit.UnitName,
                                 UnitId = p.Unit.Id,
                                 CategoryId = p.Category.Id,
                                 CategoryName = p.Category.Name,

                                 BrandName = p.Brand != null ? p.Brand.BrandName : "",
                                 ROL = p.ROL,
                                 ROLTwo = p.ROLTwo,
                                 ROLThree = p.ROLThree,

                                 ROQ = p.ROQ,
                                 MOQ = p.MOQ,
                                 OldPrice = p.OldPrice,

                                 SizeName = p.SizeName,
                                 ColorName = p.ColorName,
                                 ModelName = p.ModelName,

                                 RunTimeLiveStock = p.RunTimeLiveStock,

                                 ProductBarcode = p.Code,
                                 Description = p.Description,
                                 CostPrice = p.CostPrice,
                                 SupplierName = p.SupplierModel != null ? p.SupplierModel.SupplierName : "",




                                 WarehouseList = WarehouseQty,
                                 AvgCost = WarehouseQty,
                                 CostingValue = WarehouseQty,
                                 SalesValue = WarehouseQty,
                                 ROL123 = WarehouseQty,
                                 CurrentStock = CurrentStockCalc,

                                 ImagePath = p.ImagePath,

                                 BatchSerial = p.PurchaseBatchItems.Where(x => x.IsUsed == false).Select(x => new
                                 {
                                     BatchSerialNo = x.BatchSerialNo,
                                     BatchQty = x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity),
                                     Amount = (x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity)) * x.PurchaseItems.Price,
                                     PurchaseDate = x.PurchaseItems.PurchaseModel.PurchaseDate.ToString("dd-MMM-yy"),
                                     PurchaseCode = x.PurchaseItems.PurchaseModel.PurchaseCode,
                                     //SupplierName = x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName + " " + x.PurchaseItems.PurchaseModel.SupplierName + " " + x.PurchaseItems.PurchaseModel.PhoneNo
                                     SupplierName = (x.PurchaseItems.PurchaseModel.SupplierName.Length == 0 || x.PurchaseItems.PurchaseModel.SupplierName == null) ? x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName : x.PurchaseItems.PurchaseModel.SupplierModel.SupplierName + " - " + x.PurchaseItems.PurchaseModel.SupplierName,
                                 })
                             });


                if (ROL == "ROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.ROL > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.ROLTwo > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.ROLThree > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.CurrentStock >= 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.CurrentStock >= x.ROL));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.CurrentStock >= x.ROLTwo));
                    return Json(parser.Parse());
                }
                else
                {
                    //var parser = new Parser<ProductResult>(Request.Form, query);
                    //return Json(parser.Parse());

                    var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();
                    var pageinfo = new PagingInfo();
                    pageinfo.PageCount = int.Parse(PageCount.ToString());
                    pageinfo.PageNo = page;
                    pageinfo.PageSize = int.Parse(size.ToString());
                    pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                    //return  abcd;
                    return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

                }

                //var parser = new Parser<ProductResult>(Request.Form, query);
                //return Json(parser.Parse());


                //dynamic abcd = parser.Parse();
                //return Json(abcd);



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public JsonResult GetProductListForDuplicate(string productCode, string ColorName, string SizeName, string ModelName)
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var products = _productRepository.All().Where(x => x.Code.ToLower().Contains(productCode.ToLower()) && x.ColorName.ToLower().Contains(ColorName.ToLower()) && x.SizeName.ToLower().Contains(SizeName.ToLower())
                                && x.ModelName.ToLower().Contains(ModelName.ToLower())).ToList();




                //return  abcd;
                return Json(new { Success = 1, error = false, data = products });



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult GetSupplierProductList(int? CategoryId, int? WarehouseId, string ROL, string BrandName, int? BrandId)
        {
            try
            {
                var SupplierId = HttpContext.Session.GetInt32("SupplierId");

                var products = _productRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);


                if (SupplierId != null)
                {

                    products = products.Where(p => p.SupplierId == SupplierId);

                }
                if (CategoryId != null)
                {
                    List<int> arraycategoryid = new List<int>();
                    arraycategoryid.Add(CategoryId.GetValueOrDefault());


                    List<CategoryModel> resultlist = _categoryRepository.All().Where(x => x.Id == CategoryId).SelectMany(x => x.ChildCategoryList).ToList();

                    arraycategoryid = TraverseTree(resultlist, arraycategoryid).ToList();

                    products = products.Where(p => arraycategoryid.Contains(p.CategoryId.GetValueOrDefault()));


                    //var categorylist = _categoryRepository.All().ToList();

                    //var abc  = GetChildren(result, CategoryId.GetValueOrDefault());

                    //var arrayabc = abc.Select(x => x.Id).ToList();

                    //var job = _categoryRepository.All()
                    //    .Include(x => x.Categories.Select(q => q.catego))
                    //    .Where(x => x.JobID == id)
                    //    .SingleOrDefault();



                    //var list = _categoryRepository.All().Where(x=>x.Id == CategoryId).ToList();

                    //arraycategoryid = TraverseTree(resultlist, arraycategoryid).ToList();

                    //for (int i = 0; i < result.Count(); i++)
                    //{
                    //    Console.WriteLine($"{result[i].Id} - {result[i].CategoryParentId}");
                    //    arraycategoryid.Add(result[i].Id);
                    //}

                    //Console.ReadKey();
                    //Console.ReadKey();



                    //products = products.Where(p => arraycategoryid.Contains(p.CategoryId.GetValueOrDefault()));
                    //products = products.Where(p => p.CategoryId == CategoryId);


                }

                //if (BrandName != null)
                //{
                //    products = products.Where(p => p.BrandName == BrandName);
                //}

                if (BrandId != null)
                {
                    products = products.Where(p => p.BrandId == BrandId);
                }
                //if (WarehouseId != null)
                //{
                //    products = products.Where(p => p.WarehouseId == WarehouseId);
                //}
                //if (ROL.Length > 0)
                //{
                //    if (ROL == "ROL1")
                //    {
                //        products = products.Where(p => p.ROLStatus == 1);
                //    }
                //    else if (ROL == "ROL2")
                //    {
                //        products = products.Where(p => p.ROLStatus == 2);
                //    }
                //    else if (ROL == "ROL3")
                //    {
                //        products = products.Where(p => p.ROLStatus == 3);
                //    }

                //}

                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                }

                List<int?> permitwarehouselist = new List<int?>();

                foreach (var item in warehouselist)
                {
                    permitwarehouselist.Add(int.Parse(item.Value.ToString()));
                }


                var query = (from p in products

                             let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))
                             //.Where(x=>x.Warehouse.Contains(warehouselist))
                             .GroupBy(st => new { st.WarehouseId, st.ProductId })
                             .Select(grouping => grouping.Max(row => row.Id))
                             .ToArray()



                             //let  SubThings = p.CostCalculateds.GroupBy(st=>new {st.WarehouseId,st.ProductId}).Select(grouping => grouping.Max(row => row.Id)).ToList()

                             //let  LastPurchase = p.PurchaseItems.Sum(st=>new {st.ProductId}).Select(grouping => grouping.Max(row => row.Id)).ToList()


                             let WarehouseQty =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new WarehouseResult
                             {
                                 CostCalculatedId = x.Id,
                                 WarehouseId = x.WarehouseId,
                                 WhShortName = x.Warehouse.WhShortName,
                                 CurrentStock = x.CurrQty + x.PrevQty,
                                 AverageCosting = x.CalculatedPrice,
                                 CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                                 SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))

                             //.Where(x => x.CostCalculatedId == 86)
                             .ToList()
                             ?? null


                             let CurrentStockCalc =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new
                             {
                                 CostCalculatedId = x.Id,
                                 CurrentStock = x.CurrQty + x.PrevQty,

                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))
                             .Sum(x => x.CurrentStock)

                             select new ProductResult
                             {
                                 Id = p.Id,
                                 Name = p.Name,
                                 LocalName = p.LocalName,

                                 Code = p.Code,
                                 Price = p.Price,
                                 WholeSalePrice = p.WholeSalePrice,

                                 UnitName = p.Unit.UnitName,
                                 CategoryName = p.Category.Name,

                                 BrandName = p.Brand.BrandName,
                                 ROL = p.ROL,
                                 ROLTwo = p.ROLTwo,
                                 ROLThree = p.ROLThree,

                                 ROQ = p.ROQ,
                                 MOQ = p.MOQ,
                                 OldPrice = p.OldPrice,

                                 SizeName = p.SizeName,
                                 ColorName = p.ColorName,
                                 ModelName = p.ModelName,

                                 ProductBarcode = p.Code,
                                 Description = p.Description,
                                 CostPrice = p.CostPrice,

                                 TotalPurchase = p.PurchaseItems.Sum(x => x.Quantity),


                                 TotalSales = p.SalesItems.Sum(x => x.Quantity),
                                 TotalIssue = p.IssueItems.Sum(x => x.Quantity),
                                 TotalDamage = p.DamageItems.Sum(x => x.Quantity),

                                 TotalSalesReturn = p.SalesReturnItems.Sum(x => x.Quantity),
                                 TotalPurchaseReturn = p.PurchaseReturnItems.Sum(x => x.Quantity),

                                 TotalTransferIn = p.InternalTransferItems.Sum(x => x.Quantity),
                                 TotalTransferOut = p.InternalTransferItems.Sum(x => x.Quantity),


                                 LastPurchaseDate = p.PurchaseItems.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseModel.PurchaseDate.ToString("dd-MMM-yy") ?? "",
                                 LastReceivedDate = p.InternalTransferItems.OrderByDescending(x => x.Id).FirstOrDefault().InternalTransferModel.InternalTransferDate.ToString("dd-MMM-yy") ?? "",

                                 LastSalesDate = p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.SalesDate.ToString("dd-MMM-yy") ?? "",
                                 LastIssueDate = p.IssueItems.OrderByDescending(x => x.Id).FirstOrDefault().IssueModel.IssueDate.ToString("dd-MMM-yy") ?? "",


                                 //LastPurchaseDate = (DateTime)p.PurchaseItems.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseModel.PurchaseDate,
                                 //LastSalesDate = p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.SalesDate,

                                 LastPurchaseSupplier = p.PurchaseItems.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseModel.SupplierModel.SupplierName ?? null,
                                 LastSalesCustomer = p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.CustomerModel.Name ?? "" + " - " + p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.CustomerName ?? "",

                                 WarehouseList = WarehouseQty,
                                 CurrentStock = CurrentStockCalc,
                                 ImagePath = p.ImagePath

                             });


                if (ROL == "ROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.ROL > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.ROLTwo > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "ROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.ROLThree > 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL1")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROL && x.CurrentStock >= 0));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL2")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLTwo && x.CurrentStock >= x.ROL));
                    return Json(parser.Parse());
                }
                else if (ROL == "OnlyROL3")
                {
                    var parser = new Parser<ProductResult>(Request.Form, query.Where(x => x.CurrentStock < x.ROLThree && x.CurrentStock >= x.ROLTwo));
                    return Json(parser.Parse());
                }

                else
                {
                    var parser = new Parser<ProductResult>(Request.Form, query);
                    return Json(parser.Parse());
                }




                //dynamic abcd = parser.Parse();
                //return Json(abcd);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        //[AllowAnonymous]
        //public JsonResult ProductSyncWithWalton()
        //{
        //    try
        //    {
        //        var ComId = HttpContext.Session.GetInt32("ComId");
        //        var SelectedBusinessTypes = _storeSettingRepository.All().FirstOrDefault();

        //        if (SelectedBusinessTypes.BusinessTypeId > 0)
        //        {
        //            var businesstypename = _businessTypeRepository.Find(SelectedBusinessTypes.BusinessTypeId).BusinessTypeName.ToLower();

        //            if (businesstypename.Contains("waltonmarcel"))
        //            {
        //                SqlParameter[] sqlParameter1 = new SqlParameter[3];
        //                sqlParameter1[0] = new SqlParameter("@comId", ComId);
        //                sqlParameter1[1] = new SqlParameter("@TableName", "Product");
        //                sqlParameter1[2] = new SqlParameter("@BrandName", businesstypename);

        //                Helper.ExecProc("prcAutoInsert", sqlParameter1);
        //            }

        //        }


        //        return Json(new { Url = SelectedBusinessTypes.StoreName });

        //    }

        //    catch (Exception ex)
        //    {
        //        return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
        //    }

        //}



        public IActionResult ProductSync()
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var SelectedBusinessTypes = _storeSettingRepository.All().FirstOrDefault();

                if (SelectedBusinessTypes.BusinessTypeId > 0)
                {
                    var businesstypename = _businessTypeRepository.Find(SelectedBusinessTypes.BusinessTypeId).BusinessTypeName.ToLower();
                    var query = $"Exec prcAutoInsert '{ComId}','Product','{businesstypename}'";
                    //if (businesstypename.Contains("waltonmarcel"))
                    //{
                    SqlParameter[] sqlParameter1 = new SqlParameter[3];
                    sqlParameter1[0] = new SqlParameter("@comId", ComId);
                    sqlParameter1[1] = new SqlParameter("@TableName", "Product");
                    sqlParameter1[2] = new SqlParameter("@BrandName", businesstypename);

                    Helper.ExecProc("prcAutoInsert", sqlParameter1);
                    //}

                }


                ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
                ViewBag.BrandId = _brandRepository.GetAllForDropDown();
                //var products = _productRepository.All();
                //return View(products);
                return View("ProductList");

            }

            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }


        }




        [HttpGet]
        public IActionResult AddProduct(int IsPrevRef = 0)
        {
            ViewBag.ActionType = "Create";
            ViewBag.Category = _categoryRepository.GetAllForDropDown();
            ViewBag.Brand = _brandRepository.GetAllForDropDown();
            ViewBag.ProductSize = _SizeRepository.GetAllForDropDown();
            ViewBag.ProductColor = _ColorRepository.GetAllForDropDown();

            ViewBag.ProductColorArray = _ColorRepository.GetAllForDropDown();
            ViewBag.ProductSizeArray = _SizeRepository.GetAllForDropDown();
            ViewBag.ParentProduct = _productRepository.GetComplexProductDropDown();

            ViewBag.Unit = _unitRepository.GetAllForDropDown();
            ViewBag.Warrenty = _warrentyRepository.GetAllForDropDown();

            ViewBag.Inventory = _accountHeadRepository.GetInventoryDropdown();
            ViewBag.Consumption = _accountHeadRepository.GetConsumptionDropdown();
            ViewBag.Sales = _accountHeadRepository.GetSalesDropdown();
            ViewBag.SalesVAT = _accountHeadRepository.GetSalesVATDropdown();
            ViewBag.PurchaseVAT = _accountHeadRepository.GetPurchaseVATDropdown();
            ViewBag.Supplier = _supplierRepository.GetSupplierLedgerHeadForDropDown();






            if (IsPrevRef == 1)
            {
                var lastproductdata = _productRepository.All().OrderByDescending(x => x.Id).FirstOrDefault();
                if (lastproductdata != null)
                {
                    lastproductdata.Id = 0;
                    lastproductdata.ImagePath = "";

                    return View(lastproductdata);
                }
            }
            else
            {

                var lastproductdata = _productRepository.All().OrderByDescending(x => x.Id).FirstOrDefault();
                //var productdata = new ProductModel();
                bool isConvertible = false;
                int myInt = 0;


                if (lastproductdata != null)
                {
                    isConvertible = int.TryParse(lastproductdata.Code, out myInt);

                    if (isConvertible && lastproductdata.Code.Length <= 8)
                    {
                        lastproductdata.Code = (myInt + 1).ToString();
                    }
                    else
                    {
                        lastproductdata.Code = "";
                    }

                    lastproductdata.Id = 0;
                    lastproductdata.ImagePath = "";
                    lastproductdata.Name = "";
                    lastproductdata.BrandId = null;
                    lastproductdata.ModelName = "";
                    lastproductdata.ColorName = "";
                    lastproductdata.Description = "";
                    lastproductdata.SizeName = "";
                    lastproductdata.PCTN = 0;
                    lastproductdata.ProductType = "S";
                    lastproductdata.ProductColorArray = null;
                    lastproductdata.ProductSizeArray = null;


                    lastproductdata.ProductSizeList = "";
                    lastproductdata.ProductColorList = "";


                    lastproductdata.Price = 0;
                    lastproductdata.WholeSalePrice = 0;
                    lastproductdata.CostPrice = 0;


                    //lastproductdata.Code = "";// lastproductdata.Code;
                    lastproductdata.PCTN = 0;
                    lastproductdata.ROL = 0;
                    lastproductdata.ROLTwo = 0;
                    lastproductdata.ROLThree = 0;

                    lastproductdata.CommissionAmount = 0;
                    lastproductdata.CommissionPer = 0;




                    return View(lastproductdata);
                }
            }

            ProductModel abc = new ProductModel();
            return View(abc);

        }


        [HttpGet]
        public IActionResult AddSupplierProduct(int IsPrevRef = 0)
        {
            ViewBag.ActionType = "Create";
            ViewBag.Category = _categoryRepository.GetAllForDropDown();
            ViewBag.Brand = _brandRepository.GetAllForDropDown();

            ViewBag.ProductSize = _SizeRepository.GetAllForDropDown();
            ViewBag.ProductColor = _ColorRepository.GetAllForDropDown();

            ViewBag.ProductColorArray = _ColorRepository.GetAllForDropDown();
            ViewBag.ProductSizeArray = _SizeRepository.GetAllForDropDown();
            ViewBag.ParentProduct = _productRepository.GetComplexProductDropDown();

            ViewBag.Unit = _unitRepository.GetAllForDropDown();
            ViewBag.Warrenty = _warrentyRepository.GetAllForDropDown();

            ViewBag.Inventory = _accountHeadRepository.GetInventoryDropdown();
            ViewBag.Consumption = _accountHeadRepository.GetConsumptionDropdown();
            ViewBag.Sales = _accountHeadRepository.GetSalesDropdown();
            ViewBag.SalesVAT = _accountHeadRepository.GetSalesVATDropdown();
            ViewBag.PurchaseVAT = _accountHeadRepository.GetPurchaseVATDropdown();
            ViewBag.Supplier = _supplierRepository.GetSupplierLedgerHeadForDropDown();


            if (IsPrevRef == 1)
            {
                var lastproductdata = _productRepository.All().OrderByDescending(x => x.Id).FirstOrDefault();
                if (lastproductdata != null)
                {
                    lastproductdata.Id = 0;
                    lastproductdata.ImagePath = "";

                    return View(lastproductdata);
                }
            }
            else
            {

                var lastproductdata = _productRepository.All().OrderByDescending(x => x.Id).FirstOrDefault();
                //var productdata = new ProductModel();
                bool isConvertible = false;
                int myInt = 0;


                if (lastproductdata != null)
                {
                    isConvertible = int.TryParse(lastproductdata.Code, out myInt);

                    if (isConvertible && lastproductdata.Code.Length < 5)
                    {
                        lastproductdata.Code = (myInt + 1).ToString();
                    }
                    else
                    {
                        lastproductdata.Code = "";
                    }

                    lastproductdata.Id = 0;
                    lastproductdata.ImagePath = "";
                    lastproductdata.Name = "";
                    lastproductdata.BrandId = null;
                    lastproductdata.BrandId = null;
                    lastproductdata.ModelName = "";
                    lastproductdata.ColorName = "";
                    lastproductdata.Description = "";
                    lastproductdata.SizeName = "";
                    lastproductdata.PCTN = 0;

                    lastproductdata.Price = 0;
                    lastproductdata.WholeSalePrice = 0;
                    lastproductdata.CostPrice = 0;


                    //lastproductdata.Code = "";// lastproductdata.Code;
                    lastproductdata.PCTN = 0;
                    lastproductdata.ROL = 0;
                    lastproductdata.ROLTwo = 0;
                    lastproductdata.ROLThree = 0;

                    lastproductdata.CommissionAmount = 0;
                    lastproductdata.CommissionPer = 0;




                    return View(lastproductdata);
                }
            }

            ProductModel abc = new ProductModel();
            return View(abc);

        }



        [AllowAnonymous]
        public JsonResult BrandReferance(string query)
        {


            var Referancedb = _productRepository.All()
                    .Where(x => x.Brand.BrandName.ToLower().Contains(query.ToLower())).Take(10)
                    .Select(m => new { BrandName = m.Brand.BrandName })
                    .Distinct()
                    .ToList();


            List<SelectListItem> Referance = new List<SelectListItem>();

            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.BrandName, Value = "0" });

                }
            }

            return Json(Referance);

        }
        [AllowAnonymous]
        public JsonResult SizeReferance(string query)
        {


            var Referancedb = _productRepository.All()
                    .Where(x => x.SizeName.ToLower().Contains(query.ToLower())).Take(10)
                    .Select(m => new { SizeName = m.SizeName })
                    .Distinct()
                    .ToList();


            List<SelectListItem> Referance = new List<SelectListItem>();

            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.SizeName, Value = "0" });

                }
            }

            return Json(Referance);

        }
        [AllowAnonymous]
        public JsonResult ColorReferance(string query)
        {


            var Referancedb = _productRepository.All()
                    .Where(x => x.ColorName.ToLower().Contains(query.ToLower())).Take(10)
                    .Select(m => new { ColorName = m.ColorName })
                    .Distinct()
                    .ToList();


            List<SelectListItem> Referance = new List<SelectListItem>();

            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.ColorName, Value = "0" });

                }
            }

            return Json(Referance);

        }


        [AllowAnonymous]
        public JsonResult ModelReferance(string query)
        {


            var Referancedb = _productRepository.All()
                    .Where(x => x.ModelName.ToLower().Contains(query.ToLower())).Take(10)
                    .Select(m => new { ModelName = m.ModelName })
                    .Distinct()
                    .ToList();


            List<SelectListItem> Referance = new List<SelectListItem>();

            if (Referancedb != null)
            {
                foreach (var x in Referancedb)
                {
                    Referance.Add(new SelectListItem { Text = x.ModelName, Value = "0" });

                }
            }

            return Json(Referance);

        }


        [AllowAnonymous]
        public IActionResult Download(string file)
        {
            string filepath = AppDomain.CurrentDomain.BaseDirectory + "wwwroot\\Content\\Download\\" + file;
            if (!System.IO.File.Exists(filepath))
            {
                return NotFound();
            }

            var fileBytes = System.IO.File.ReadAllBytes(filepath);
            var response = new FileContentResult(fileBytes, "application/octet-stream")
            {
                FileDownloadName = file
            };
            return response;
        }

        [HttpPost]
        [AllowAnonymous]
        //[Obsolete]
        public IActionResult UploadFiles(IFormCollection fileData, string type)
        {
            try
            {

                ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
                ViewBag.BrandId = _brandRepository.GetAllForDropDown();
                ViewBag.ModelId = _productRepository.GetModelDropDown();

                #region excelupload
                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var conString = db.Database.GetDbConnection().ConnectionString;


                if (userid.ToString() == "" || userid == null)
                {

                    return BadRequest();
                }

                if (type == "Product")
                {
                    type = "Temp_Product";
                }
                else if (type == "Customers")
                {
                    type = "Temp_Customer";
                }
                else if (type == "Suppliers")
                {
                    type = "Temp_Supplier";
                }


                IList<IFormFile> files = HttpContext.Request.Form.Files.ToList();
                //string filePath=string.Empty ;

                //var upload = Path.Combine("C:\\D drive");
                foreach (IFormFile file in files)
                {
                    //string upload = Path.Combine("~/Content/Upload/");
                    //string uploadlocation = Path.Combine("Content/Upload/");
                    string uploadlocation = Path.GetFullPath("wwwroot/Content/Upload/");

                    if (!Directory.Exists(uploadlocation))
                    {
                        Directory.CreateDirectory(uploadlocation);
                    }

                    string filePath = uploadlocation + Path.GetFileName(file.FileName);
                    string extension = Path.GetExtension(file.FileName);
                    var fileStream = new FileStream(filePath, FileMode.Create);
                    file.CopyTo(fileStream);
                    fileStream.Close();


                    ReadExcelFile(userid.ToString(), comid.ToString(), conString, filePath, type);



                    #region process to insert into real table

                    var query = $"Exec prcAutoInsert '{comid}','{type}','','{userid}'";
                    //if (businesstypename.Contains("waltonmarcel"))
                    //{
                    SqlParameter[] sqlParameter1 = new SqlParameter[4];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", type);
                    sqlParameter1[2] = new SqlParameter("@BrandName", "");
                    sqlParameter1[3] = new SqlParameter("@UserId", userid);


                    Helper.ExecProc("prcAutoInsert", sqlParameter1);
                    //}
                    TempData["Message"] = "Excel Upload Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), "0", "Create", "ExcelUpload");



                    #endregion

                    //}
                }

                return Json(new { message = "Excel upload Successfully." });

                #endregion

                //return Json(new { Success = 1 });
            }
            catch (Exception ex)
            {
                TempData["Message"] = "Excel Upload Failed";
                TempData["Status"] = "3";

                return Json(new { Success = 0, message = ex.Message.ToString() });
                return View("ProductList");

            }

        }


        [HttpPost]
        [AllowAnonymous]
        //[Obsolete]
        public IActionResult UploadStock(IFormCollection fileData)
        {
            try
            {

                ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
                ViewBag.BrandId = _brandRepository.GetAllForDropDown();

                #region excelupload
                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var conString = db.Database.GetDbConnection().ConnectionString;


                if (userid.ToString() == "" || userid == null)
                {

                    return BadRequest();
                }



                IList<IFormFile> files = HttpContext.Request.Form.Files.ToList();
                //string filePath=string.Empty ;

                //var upload = Path.Combine("C:\\D drive");
                foreach (IFormFile file in files)
                {
                    //string upload = Path.Combine("~/Content/Upload/");
                    //string uploadlocation = Path.Combine("Content/Upload/");
                    string uploadlocation = Path.GetFullPath("wwwroot/Content/Upload/");

                    if (!Directory.Exists(uploadlocation))
                    {
                        Directory.CreateDirectory(uploadlocation);
                    }

                    string filePath = uploadlocation + Path.GetFileName(file.FileName);
                    string extension = Path.GetExtension(file.FileName);
                    var fileStream = new FileStream(filePath, FileMode.Create);
                    file.CopyTo(fileStream);
                    fileStream.Close();


                    //if (file.Length > 0)
                    //{
                    //    var filePath = Path.Combine(upload, file.FileName);

                    //    var fileStream = new FileStream(filePath, FileMode.Create);
                    //    file.CopyTo(fileStream);


                    //    string extension = Path.GetExtension(file.FileName);

                    ReadExcelFile(userid.ToString(), comid.ToString(), conString, filePath, "");



                    #region process to insert into real table

                    var query = $"Exec prcAutoInsert '{comid}','Temp_Product_Stock','','{userid}'";
                    //if (businesstypename.Contains("waltonmarcel"))
                    //{
                    SqlParameter[] sqlParameter1 = new SqlParameter[4];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", "Temp_Product_Stock");
                    sqlParameter1[2] = new SqlParameter("@BrandName", "");
                    sqlParameter1[3] = new SqlParameter("@UserId", userid);


                    Helper.ExecProc("prcAutoInsert", sqlParameter1);
                    //}
                    TempData["Message"] = "Excel Upload Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), "0", "Create", "Stock ExcelUpload");



                    #endregion

                    //}
                }

                return View("ProductList");

                #endregion

                //return Json(new { Success = 1 });
            }
            catch (Exception ex)
            {
                TempData["Message"] = "Excel Upload Failed";
                TempData["Status"] = "3";

                return Json(new { Success = 0, ex = ex.Message.ToString() });

            }

        }




        [HttpPost]
        [AllowAnonymous]
        //[Obsolete]
        public IActionResult UploadFilesCustomer(IFormCollection fileData)
        {
            try
            {

                ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
                ViewBag.BrandId = _brandRepository.GetAllForDropDown();

                #region excelupload
                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var conString = db.Database.GetDbConnection().ConnectionString;


                if (userid.ToString() == "" || userid == null)
                {

                    return BadRequest();
                }



                IList<IFormFile> files = HttpContext.Request.Form.Files.ToList();
                //string filePath=string.Empty ;

                //var upload = Path.Combine("C:\\D drive");
                foreach (IFormFile file in files)
                {
                    //string upload = Path.Combine("~/Content/Upload/");
                    //string uploadlocation = Path.Combine("Content/Upload/");
                    string uploadlocation = Path.GetFullPath("wwwroot/Content/Upload/");

                    if (!Directory.Exists(uploadlocation))
                    {
                        Directory.CreateDirectory(uploadlocation);
                    }

                    string filePath = uploadlocation + Path.GetFileName(file.FileName);
                    string extension = Path.GetExtension(file.FileName);
                    var fileStream = new FileStream(filePath, FileMode.Create);
                    file.CopyTo(fileStream);
                    fileStream.Close();



                    ReadExcelFileCustomer(userid.ToString(), comid.ToString(), conString, filePath);



                    #region process to insert into real table

                    var query = $"Exec prcAutoInsert '{comid}','Temp_Customer','','{userid}'";
                    //if (businesstypename.Contains("waltonmarcel"))
                    //{
                    SqlParameter[] sqlParameter1 = new SqlParameter[4];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", "Temp_Customer");
                    sqlParameter1[2] = new SqlParameter("@BrandName", "");
                    sqlParameter1[3] = new SqlParameter("@UserId", userid);


                    Helper.ExecProc("prcAutoInsert", sqlParameter1);
                    //}
                    TempData["Message"] = "Excel Upload Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), "0", "Create", "Customer Excel Upload");



                    #endregion

                    //}
                }

                return View("CustomerList");

                #endregion

                //return Json(new { Success = 1 });
            }
            catch (Exception ex)
            {
                TempData["Message"] = "Excel Upload Failed";
                TempData["Status"] = "3";

                return Json(new { Success = 0, ex = ex.Message.ToString() });
                return View("ProductList");

            }

        }


        [HttpPost]
        [AllowAnonymous]
        //[Obsolete]
        public IActionResult UploadFilesSupplier(IFormCollection fileData)
        {
            try
            {

                ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
                ViewBag.BrandId = _brandRepository.GetAllForDropDown();

                #region excelupload
                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var conString = db.Database.GetDbConnection().ConnectionString;


                if (userid.ToString() == "" || userid == null)
                {

                    return BadRequest();
                }



                IList<IFormFile> files = HttpContext.Request.Form.Files.ToList();
                //string filePath=string.Empty ;

                //var upload = Path.Combine("C:\\D drive");
                foreach (IFormFile file in files)
                {
                    //string upload = Path.Combine("~/Content/Upload/");
                    //string uploadlocation = Path.Combine("Content/Upload/");
                    string uploadlocation = Path.GetFullPath("wwwroot/Content/Upload/");

                    if (!Directory.Exists(uploadlocation))
                    {
                        Directory.CreateDirectory(uploadlocation);
                    }

                    string filePath = uploadlocation + Path.GetFileName(file.FileName);
                    string extension = Path.GetExtension(file.FileName);
                    var fileStream = new FileStream(filePath, FileMode.Create);
                    file.CopyTo(fileStream);
                    fileStream.Close();



                    ReadExcelFileSupplier(userid.ToString(), comid.ToString(), conString, filePath);



                    #region process to insert into real table

                    var query = $"Exec prcAutoInsert '{comid}','Temp_Supplier','','{userid}'";
                    //if (businesstypename.Contains("waltonmarcel"))
                    //{
                    SqlParameter[] sqlParameter1 = new SqlParameter[4];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", "Temp_Supplier");
                    sqlParameter1[2] = new SqlParameter("@BrandName", "");
                    sqlParameter1[3] = new SqlParameter("@UserId", userid);


                    Helper.ExecProc("prcAutoInsert", sqlParameter1);
                    //}
                    TempData["Message"] = "Excel Upload Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), "0", "Create", "Supplier Excel Upload");



                    #endregion

                    //}
                }

                return View("SupplierList");

                #endregion

                //return Json(new { Success = 1 });
            }
            catch (Exception ex)
            {
                TempData["Message"] = "Excel Upload Failed";
                TempData["Status"] = "3";

                return Json(new { Success = 0, ex = ex.Message.ToString() });
                return View("ProductList");

            }

        }




        [HttpPost]
        [AllowAnonymous]
        //[Obsolete]
        public IActionResult UploadFilesAccounts(IFormCollection fileData)
        {
            try
            {

                ViewBag.WarehouseId = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                ViewBag.CategoryId = _categoryRepository.GetAllForDropDown();
                ViewBag.BrandId = _brandRepository.GetAllForDropDown();

                #region excelupload
                var userid = HttpContext.Session.GetInt32("UserId");
                var comid = HttpContext.Session.GetInt32("ComId");

                var conString = db.Database.GetDbConnection().ConnectionString;


                if (userid.ToString() == "" || userid == null)
                {

                    return BadRequest();
                }



                IList<IFormFile> files = HttpContext.Request.Form.Files.ToList();
                //string filePath=string.Empty ;

                //var upload = Path.Combine("C:\\D drive");
                foreach (IFormFile file in files)
                {
                    //string upload = Path.Combine("~/Content/Upload/");
                    //string uploadlocation = Path.Combine("Content/Upload/");
                    string uploadlocation = Path.GetFullPath("wwwroot/Content/Upload/");

                    if (!Directory.Exists(uploadlocation))
                    {
                        Directory.CreateDirectory(uploadlocation);
                    }

                    string filePath = uploadlocation + Path.GetFileName(file.FileName);
                    string extension = Path.GetExtension(file.FileName);
                    var fileStream = new FileStream(filePath, FileMode.Create);
                    file.CopyTo(fileStream);
                    fileStream.Close();



                    ReadExcelFileAccounts(userid.ToString(), comid.ToString(), conString, filePath);



                    #region process to insert into real table

                    var query = $"Exec prcAutoInsert '{comid}','Temp_Accounts','','{userid}'";
                    //if (businesstypename.Contains("waltonmarcel"))
                    //{
                    SqlParameter[] sqlParameter1 = new SqlParameter[4];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    sqlParameter1[1] = new SqlParameter("@TableName", "Temp_Accounts");
                    sqlParameter1[2] = new SqlParameter("@BrandName", "");
                    sqlParameter1[3] = new SqlParameter("@UserId", userid);


                    Helper.ExecProc("prcAutoInsert", sqlParameter1);
                    //}
                    TempData["Message"] = "Excel Upload Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), "0", "Create", "Accounts Excel Upload");



                    #endregion

                    //}
                }

                return View("AccountsList");

                #endregion

                //return Json(new { Success = 1 });
            }
            catch (Exception ex)
            {
                TempData["Message"] = "Excel Upload Failed";
                TempData["Status"] = "3";

                return Json(new { Success = 0, ex = ex.Message.ToString() });
                return View("ProductList");

            }

        }



        public static string GetCellValue(SpreadsheetDocument document, Cell cell)
        {


            SharedStringTablePart stringTablePart = document.WorkbookPart.SharedStringTablePart;
            var x = cell.StyleIndex;

            if (cell.CellValue == null) { return ""; }

            string value = cell.CellValue.InnerXml;

            if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
            {
                string a = stringTablePart.SharedStringTable.ChildElements[Int32.Parse(value)].InnerText;
                return a;
            }
            else
            {
                return value;
            }
        }


        public bool IsNumeric(string value)
        {
            return value.All(char.IsNumber);
        }

        static void ReadExcelFile(string userid, string comid, string conString, string filepath, string tablename)
        {

            //Save the uploaded Excel file.
            //string filePath = Server.MapPath("~/Files/") + Path.GetFileName(FileUpload1.PostedFile.FileName);
            //FileUpload1.SaveAs(filePath);

            //Open the Excel file in Read Mode using OpenXml.
            using (SpreadsheetDocument doc = SpreadsheetDocument.Open(filepath, false))
            {
                //Read the first Sheet from Excel file.
                Sheet sheet = doc.WorkbookPart.Workbook.Sheets.GetFirstChild<Sheet>();

                //Get the Worksheet instance.
                Worksheet worksheet = (doc.WorkbookPart.GetPartById(sheet.Id.Value) as WorksheetPart).Worksheet;

                //Fetch all the rows present in the Worksheet.
                IEnumerable<Row> rows = worksheet.GetFirstChild<SheetData>().Descendants<Row>();

                //Create a new DataTable.
                DataTable dt = new DataTable();

                //Loop through the Worksheet rows.
                foreach (Row row in rows)
                {
                    //Use the first row to add columns to DataTable.
                    if (row.RowIndex.Value == 1)
                    {
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Columns.Add(GetValue(doc, cell));
                        }
                        dt.Columns.Add("LuserId");
                        dt.Columns.Add("ComId");
                    }
                    else
                    {
                        bool isEmptyRow = true;
                        DataRow newRow = dt.NewRow();
                        int i = 0;
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            string cellValue = GetValue(doc, cell);
                            if (!string.IsNullOrEmpty(cellValue))
                            {
                                isEmptyRow = false;
                            }
                            newRow[i] = cellValue;
                            i++;
                        }

                        if (!isEmptyRow)
                        {
                            dt.Rows.Add(newRow);
                            newRow["LuserId"] = userid;
                            newRow["ComId"] = comid;
                        }
                    }
                    //else
                    //{
                    //    //Add rows to DataTable.
                    //    dt.Rows.Add();
                    //    int i = 0;
                    //    foreach (Cell cell in row.Descendants<Cell>())
                    //    {
                    //        dt.Rows[dt.Rows.Count - 1][i] = GetValue(doc, cell);
                    //        i++;
                    //    }
                    //}
                }


                for (int i = dt.Rows.Count - 1; i >= 0; i--)
                {
                    DataRow dr = dt.Rows[i];
                    //if (dr[0] == "" || dr[0] == null)
                    //    dr.Delete();

                    dr["LuserId"] = userid;
                    dr["ComId"] = comid;

                }
                dt.AcceptChanges();




                #region details ///details table function///

                string table_Details = tablename;
                //SqlConnection con = new SqlConnection(conString);
                //SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                //con.Open();
                //cmd.ExecuteNonQuery();
                //con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dt.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dt);

                    conn.Close();
                }
                #endregion


            }


        }


        static void ReadExcelFileCustomer(string userid, string comid, string conString, string filepath)
        {

            //Save the uploaded Excel file.
            //string filePath = Server.MapPath("~/Files/") + Path.GetFileName(FileUpload1.PostedFile.FileName);
            //FileUpload1.SaveAs(filePath);

            //Open the Excel file in Read Mode using OpenXml.
            using (SpreadsheetDocument doc = SpreadsheetDocument.Open(filepath, false))
            {
                //Read the first Sheet from Excel file.
                Sheet sheet = doc.WorkbookPart.Workbook.Sheets.GetFirstChild<Sheet>();

                //Get the Worksheet instance.
                Worksheet worksheet = (doc.WorkbookPart.GetPartById(sheet.Id.Value) as WorksheetPart).Worksheet;

                //Fetch all the rows present in the Worksheet.
                IEnumerable<Row> rows = worksheet.GetFirstChild<SheetData>().Descendants<Row>();

                //Create a new DataTable.
                DataTable dt = new DataTable();

                //Loop through the Worksheet rows.
                foreach (Row row in rows)
                {
                    //Use the first row to add columns to DataTable.
                    if (row.RowIndex.Value == 1)
                    {
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Columns.Add(GetValue(doc, cell));
                        }
                        dt.Columns.Add("LuserId");
                        dt.Columns.Add("ComId");
                    }
                    else
                    {
                        //Add rows to DataTable.
                        dt.Rows.Add();
                        int i = 0;
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Rows[dt.Rows.Count - 1][i] = GetValue(doc, cell);
                            i++;
                        }
                    }
                }


                for (int i = dt.Rows.Count - 1; i >= 0; i--)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr[0] == "" || dr[0] == null)
                        dr.Delete();

                    dr["LuserId"] = userid;
                    dr["ComId"] = comid;

                }
                dt.AcceptChanges();


                //GridView1.DataSource = dt;
                //GridView1.DataBind();


                #region details ///details table function///
                //var conString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;

                string table_Details = "Temp_Customer";
                //string connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                SqlConnection con = new SqlConnection(conString);
                SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                con.Open();
                cmd.ExecuteNonQuery();
                //Response.Redirect("done.aspx");
                con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dt.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dt);

                    conn.Close();
                }
                #endregion


            }


        }

        static void ReadExcelFileSupplier(string userid, string comid, string conString, string filepath)
        {

            //Save the uploaded Excel file.
            //string filePath = Server.MapPath("~/Files/") + Path.GetFileName(FileUpload1.PostedFile.FileName);
            //FileUpload1.SaveAs(filePath);

            //Open the Excel file in Read Mode using OpenXml.
            using (SpreadsheetDocument doc = SpreadsheetDocument.Open(filepath, false))
            {
                //Read the first Sheet from Excel file.
                Sheet sheet = doc.WorkbookPart.Workbook.Sheets.GetFirstChild<Sheet>();

                //Get the Worksheet instance.
                Worksheet worksheet = (doc.WorkbookPart.GetPartById(sheet.Id.Value) as WorksheetPart).Worksheet;

                //Fetch all the rows present in the Worksheet.
                IEnumerable<Row> rows = worksheet.GetFirstChild<SheetData>().Descendants<Row>();

                //Create a new DataTable.
                DataTable dt = new DataTable();

                //Loop through the Worksheet rows.
                foreach (Row row in rows)
                {
                    //Use the first row to add columns to DataTable.
                    if (row.RowIndex.Value == 1)
                    {
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Columns.Add(GetValue(doc, cell));
                        }
                        dt.Columns.Add("LuserId");
                        dt.Columns.Add("ComId");
                    }
                    else
                    {
                        //Add rows to DataTable.
                        dt.Rows.Add();
                        int i = 0;
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Rows[dt.Rows.Count - 1][i] = GetValue(doc, cell);
                            i++;
                        }
                    }
                }


                for (int i = dt.Rows.Count - 1; i >= 0; i--)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr[0] == "" || dr[0] == null)
                        dr.Delete();

                    dr["LuserId"] = userid;
                    dr["ComId"] = comid;

                }
                dt.AcceptChanges();


                //GridView1.DataSource = dt;
                //GridView1.DataBind();


                #region details ///details table function///
                //var conString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;

                string table_Details = "Temp_Supplier";
                //string connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                SqlConnection con = new SqlConnection(conString);
                SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                con.Open();
                cmd.ExecuteNonQuery();
                //Response.Redirect("done.aspx");
                con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dt.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dt);

                    conn.Close();
                }
                #endregion


            }


        }

        static void ReadExcelFileAccounts(string userid, string comid, string conString, string filepath)
        {

            //Save the uploaded Excel file.
            //string filePath = Server.MapPath("~/Files/") + Path.GetFileName(FileUpload1.PostedFile.FileName);
            //FileUpload1.SaveAs(filePath);

            //Open the Excel file in Read Mode using OpenXml.
            using (SpreadsheetDocument doc = SpreadsheetDocument.Open(filepath, false))
            {
                //Read the first Sheet from Excel file.
                Sheet sheet = doc.WorkbookPart.Workbook.Sheets.GetFirstChild<Sheet>();

                //Get the Worksheet instance.
                Worksheet worksheet = (doc.WorkbookPart.GetPartById(sheet.Id.Value) as WorksheetPart).Worksheet;

                //Fetch all the rows present in the Worksheet.
                IEnumerable<Row> rows = worksheet.GetFirstChild<SheetData>().Descendants<Row>();

                //Create a new DataTable.
                DataTable dt = new DataTable();

                //Loop through the Worksheet rows.
                foreach (Row row in rows)
                {
                    //Use the first row to add columns to DataTable.
                    if (row.RowIndex.Value == 1)
                    {
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Columns.Add(GetValue(doc, cell));
                        }
                        dt.Columns.Add("LuserId");
                        dt.Columns.Add("ComId");
                    }
                    else
                    {
                        //Add rows to DataTable.
                        dt.Rows.Add();
                        int i = 0;
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            dt.Rows[dt.Rows.Count - 1][i] = GetValue(doc, cell);
                            i++;
                        }
                    }
                }


                for (int i = dt.Rows.Count - 1; i >= 0; i--)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr[0] == "" || dr[0] == null)
                        dr.Delete();

                    dr["LuserId"] = userid;
                    dr["ComId"] = comid;

                }
                dt.AcceptChanges();


                //GridView1.DataSource = dt;
                //GridView1.DataBind();


                #region details ///details table function///
                //var conString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;

                string table_Details = "Temp_Accounts";
                //string connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                SqlConnection con = new SqlConnection(conString);
                SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                con.Open();
                cmd.ExecuteNonQuery();
                //Response.Redirect("done.aspx");
                con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dt.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dt);

                    conn.Close();
                }
                #endregion


            }


        }

        private static string GetValue(SpreadsheetDocument doc, Cell cell)
        {
            string value = cell.CellValue != null ? cell.CellValue.InnerText : "";
            if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
            {
                var index = int.Parse(cell.InnerText);
                var returnData = doc.WorkbookPart.SharedStringTablePart.SharedStringTable.ChildElements[index].InnerText;
                return returnData;
            }
            if (value.Contains('.'))
            {
                if (double.TryParse(value, out double result))
                {
                    return result.ToString("F4");
                }
            }
            return value;
        }






        static void ReadExcelFileABC(string userid, string comid, string conString, string filepath)
        {
            try
            {

                DataTable dt0 = new DataTable();
                DataTable dt1 = new DataTable();



                using (SpreadsheetDocument spreadSheetDocument = SpreadsheetDocument.Open(filepath, false))
                {

                    WorkbookPart workbookPart = spreadSheetDocument.WorkbookPart;
                    IEnumerable<Sheet> sheets = spreadSheetDocument.WorkbookPart.Workbook.GetFirstChild<Sheets>().Elements<Sheet>();


                    foreach (var everysheet in sheets)
                    {
                        string relationshipId = everysheet.Id.Value;
                        string SheetName = everysheet.Name;

                        WorksheetPart worksheetPart = (WorksheetPart)spreadSheetDocument.WorkbookPart.GetPartById(relationshipId);
                        Worksheet workSheet = worksheetPart.Worksheet;
                        SheetData sheetData = workSheet.GetFirstChild<SheetData>();
                        IEnumerable<Row> rows = sheetData.Descendants<Row>();


                        if (SheetName == "ProductList")
                        {
                            foreach (Cell cell in rows.ElementAt(0))
                            {

                                dt0.Columns.Add(GetCellValue(spreadSheetDocument, cell));
                            }

                            int countcolumn = dt0.Columns.Count;
                            dt0.Columns.Add("LuserId");
                            dt0.Columns.Add("ComId");




                            foreach (Row row in rows) //this will also include your header row...
                            {
                                if (row.RowIndex > 0 && row.RowIndex <= rows.Count())
                                {
                                    DataRow tempRow = dt0.NewRow();

                                    for (int i = 0; i < countcolumn; i++)
                                    {
                                        tempRow[i] = GetCellValue(spreadSheetDocument, row.Descendants<Cell>().ElementAt(i));

                                        Console.WriteLine(dt0.Columns[i].ColumnName.ToUpper().Contains("DATE".ToUpper()));

                                        if (dt0.Columns[i].ColumnName.ToUpper().Contains("DATE".ToUpper()))
                                        {
                                            if (tempRow[i].ToString().Length > 1 && tempRow[i].ToString().IsNumeric())
                                            {
                                                tempRow[i] = string.Format("{0}", DateTime.FromOADate(int.Parse(tempRow[i].ToString())));
                                            }
                                        }
                                        //else if (dt0.Columns[i].ColumnName.ToUpper().Contains("LuserId".ToUpper()))
                                        //{
                                        //    tempRow[i] = userid.ToString();
                                        //}

                                    }
                                    //Console.WriteLine(row.RowIndex.ToString());
                                    tempRow["LuserId"] = userid;
                                    tempRow["ComId"] = comid;

                                    dt0.Rows.Add(tempRow);
                                }


                            }

                            dt0.Rows.RemoveAt(0); //...so i'm taking it out here.

                        }
                        //else if (SheetName == "LCInfo")
                        //{

                        //    foreach (Cell cell in rows.ElementAt(0))
                        //    {
                        //        dt1.Columns.Add(GetCellValue(spreadSheetDocument, cell));
                        //    }

                        //    int countcolumn = dt1.Columns.Count;
                        //    //dt1.Columns.Add("LuserId");



                        //    foreach (Row row in rows) //this will also include your header row...
                        //    {
                        //        if (row.RowIndex > 0 && row.RowIndex < rows.Count() - 2)
                        //        {
                        //            DataRow tempRow = dt1.NewRow();

                        //            for (int i = 0; i < countcolumn; i++)
                        //            {
                        //                tempRow[i] = GetCellValue(spreadSheetDocument, row.Descendants<Cell>().ElementAt(i));
                        //            }
                        //            Console.WriteLine(row.RowIndex.ToString());
                        //            dt1.Rows.Add(tempRow);
                        //        }
                        //    }

                        //    dt1.Rows.RemoveAt(0); //...so i'm taking it out here.
                        //}
                    }
                }



                #region details ///details table function///
                //var conString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;

                string table_Details = "Temp_Product";
                //string connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                SqlConnection con = new SqlConnection(conString);
                SqlCommand cmd = new SqlCommand("delete from dbo." + table_Details + " where LuserId   in ('" + userid + "', '')", con);
                con.Open();
                cmd.ExecuteNonQuery();
                //Response.Redirect("done.aspx");
                con.Close();



                using (SqlConnection conn = new SqlConnection(conString))
                {



                    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                    {
                        //bulkCopy.DestinationTableName = table;
                        DestinationTableName = "dbo." + table_Details // "+"_Temp
                    };
                    conn.Open();




                    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Details, null });
                    foreach (DataColumn sourceColumn in dt0.Columns)
                    {
                        foreach (DataRow row in schema.Rows)
                        {
                            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                            {
                                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                                break;
                            }
                            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                        }
                    }
                    bulkCopy.WriteToServer(dt0);

                    conn.Close();
                }
                #endregion






                //#region Master //// master table function

                //string table_Master = "Temp_COM_MasterLC_Masters";
                ////String connectionString = ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString;
                ////SqlConnection con = new SqlConnection(connectionString);
                //cmd = new SqlCommand("delete from dbo." + table_Master + " where  userid is null or userid   in ('" + userid + "', '')", con);
                //con.Open();
                //cmd.ExecuteNonQuery();
                ////Response.Redirect("done.aspx");
                //con.Close();




                //using (SqlConnection conn = new SqlConnection(conString))
                //{



                //    SqlBulkCopy bulkCopy = new SqlBulkCopy(conn)
                //    {
                //        //bulkCopy.DestinationTableName = table;
                //        DestinationTableName = "dbo." + table_Master // "+"_Temp
                //    };
                //    conn.Open();


                //    DataTable calculatetable = CustomTable(dt1, userid);  ////for convert row into a column and save into a datatable

                //    DataTable schema = conn.GetSchema("Columns", new[] { null, null, table_Master, null });
                //    foreach (DataColumn sourceColumn in calculatetable.Columns)
                //    {
                //        foreach (DataRow row in schema.Rows)
                //        {
                //            if (string.Equals(sourceColumn.ColumnName, (string)row["COLUMN_NAME"], StringComparison.OrdinalIgnoreCase))
                //            {
                //                bulkCopy.ColumnMappings.Add(sourceColumn.ColumnName, (string)row["COLUMN_NAME"]);
                //                break;
                //            }
                //            //bulkCopy.ColumnMappings.Add("LuserId", (string)row["COLUMN_NAME"]);
                //        }
                //    }
                //    bulkCopy.WriteToServer(calculatetable);
                //}
                //#endregion

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static DataTable CustomTable(DataTable excelTable, string currentuserid)
        {
            DataTable table = new DataTable();


            for (int index = 0; index < excelTable.Rows.Count; index++)
            {
                DataRow excelRow = excelTable.Rows[index];

                //var col  = table.Columns.Add("Category", typeof(String));
                string x = excelTable.Rows[index][1].ToString();
                if (x.Length > 1)
                {
                    //var col = 
                    table.Columns.Add(x, typeof(string));
                }




            }
            table.Columns.Add("Id", typeof(int));
            table.Columns.Add("SL", typeof(int));
            table.Columns.Add("LuserId", typeof(string));



            table.Rows.Add();
            DataRow fahad = table.Rows[0];
            object userid = currentuserid;
            fahad["SL"] = 1;
            fahad["Id"] = 1;
            fahad["LuserId"] = currentuserid;

            int i = 0;
            for (int index = 0; index < excelTable.Rows.Count; index++)
            {
                var colname = table.Columns[i].ColumnName.ToUpper();

                DataRow excelRow = excelTable.Rows[index];
                string x = excelTable.Rows[index][2].ToString();


                if (colname.Contains("date".ToUpper()))
                {
                    if (x.Length > 1 && x.IsNumeric())
                    {

                        fahad[i] = string.Format("{0}", DateTime.FromOADate(int.Parse(excelRow["Information"].ToString())));

                        //i++;
                    }
                }
                else
                {

                    //var col  = table.Columns.Add("Category", typeof(String));

                    if (x.Length > 1)
                    {

                        fahad[i] = string.Format("{0}", excelRow["Information"].ToString());

                    }

                }
                i++;

            }
            return table;
        } /// <summary>

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddProduct(ProductModel model, IFormFile logoPostedFileBase)
        {

            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });
            //if (!ModelState.IsValid)
            //{
            //    return View(model);
            //}
            ////_productRepository.Insert(model);
            ////return RedirectToAction("ProductList");


            //if (model.Id == 0)
            //{
            //    _productRepository.Insert(model);
            //}
            //else
            //{
            //    _productRepository.Update(model, model.Id);
            //}
            //return RedirectToAction("ProductList");



            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {

                    //if (model.BrandName == null)
                    //{
                    //    model.BrandName = "";
                    //}

                    if (model.Description == null)
                    {
                        model.Description = "";
                    }

                    if (model.ModelName == null)
                    {
                        model.ModelName = "";
                    }

                    if (model.SizeName == null)
                    {
                        model.SizeName = "";
                    }

                    if (model.ColorName == null)
                    {
                        model.ColorName = "";
                    }

                    if (model.LocalName == null)
                    {
                        model.LocalName = "";
                    }

                    #region colormodelinsert
                    var text = "";
                    List<ProductColorModel> productcolorlist = new List<ProductColorModel>();
                    if (model.ProductColorArray != null)
                    {
                        for (int i = 0; i < model.ProductColorArray.Length; i++)
                        {
                            text += model.ProductColorArray[i] + ",";

                            ProductColorModel itemgroupsingle = new ProductColorModel();
                            itemgroupsingle.ProductId = itemgroupsingle.ProductId;
                            itemgroupsingle.ColorId = int.Parse(model.ProductColorArray[i]);
                            productcolorlist.Add(itemgroupsingle);
                        }
                        model.ProductColorList = text.TrimEnd(',');
                        model.ColorList = productcolorlist;
                    }
                    #endregion


                    #region sizemodelinsert
                    text = "";
                    List<ProductSizeModel> productsizelist = new List<ProductSizeModel>();
                    if (model.ProductSizeArray != null)
                    {
                        for (int i = 0; i < model.ProductSizeArray.Length; i++)
                        {
                            text += model.ProductSizeArray[i] + ",";

                            ProductSizeModel itemgroupsingle = new ProductSizeModel();
                            itemgroupsingle.ProductId = itemgroupsingle.ProductId;
                            itemgroupsingle.SizeId = int.Parse(model.ProductSizeArray[i]);
                            productsizelist.Add(itemgroupsingle);
                        }
                        model.ProductSizeList = text.TrimEnd(',');
                        model.SizeList = productsizelist;
                    }
                    #endregion



                    _productRepository.Insert(model);


                    #region process to insert into real table

                    var query = $"Exec prcAutoInsert '{model.ComId}','Complex_Product_Insert','{model.Id}','{model.LuserId}'";
                    SqlParameter[] sqlParameter1 = new SqlParameter[4];
                    sqlParameter1[0] = new SqlParameter("@ComId", model.ComId);
                    sqlParameter1[1] = new SqlParameter("@TableName", "Complex_Product_Insert");
                    sqlParameter1[2] = new SqlParameter("@BrandName", model.Id); // brandname by product id cause no need to make extra parameter
                    sqlParameter1[3] = new SqlParameter("@UserId", model.LuserId);

                    Helper.ExecProc("prcAutoInsert", sqlParameter1);

                    #endregion



                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Name.ToString());

                }
                else
                {
                    //if (model.BrandName == null)
                    //{
                    //    model.BrandName = "";
                    //}

                    if (model.Description == null)
                    {
                        model.Description = "";
                    }

                    if (model.ModelName == null)
                    {
                        model.ModelName = "";
                    }

                    if (model.SizeName == null)
                    {
                        model.SizeName = "";
                    }

                    if (model.ColorName == null)
                    {
                        model.ColorName = "";
                    }

                    if (model.LocalName == null)
                    {
                        model.LocalName = "";
                    }



                    #region remove child data 
                    if (model.ProductColorArray != null)
                    {
                        int[] colorvalues = Array.ConvertAll(model.ProductColorArray, s => int.Parse(s));
                        if (colorvalues != null)
                        {
                            var existproductcolor = _productRepository.All().Where(x => x.ParentProductId == model.Id)
                                .Where(x => !colorvalues.Contains(x.ColorId.GetValueOrDefault()))
                                //.Where(x => !sizevalues.Contains(x.SizeId.GetValueOrDefault()))
                                .ToList();
                            _productRepository.RemoveRange(existproductcolor);
                        }
                    }


                    if (model.ProductSizeArray != null)
                    {
                        int[] sizevalues = Array.ConvertAll(model.ProductSizeArray, s => int.Parse(s));

                        if (sizevalues != null)
                        {
                            var existproductsize = _productRepository.All().Where(x => x.ParentProductId == model.Id)
                             //.Where(x => !colorvalues.Contains(x.ColorId.GetValueOrDefault()))
                             .Where(x => !sizevalues.Contains(x.SizeId.GetValueOrDefault()))
                             .ToList();
                            _productRepository.RemoveRange(existproductsize);

                        }

                    }
                    #endregion



                    #region colormodelinsert

                    var existcolorlisttable = _productColorRepository.All().Where(x => x.ProductId == model.Id).ToList();
                    _productColorRepository.RemoveRange(existcolorlisttable);

                    var text = "";
                    List<ProductColorModel> productcolorlist = new List<ProductColorModel>();
                    //List<ProductColorModel> productcolorlist = _productColorRepository.All().Where(x=>x.ProductId == model.ParentProductId && x.ColorId == model.);

                    if (model.ProductColorArray != null)
                    {
                        for (int i = 0; i < model.ProductColorArray.Length; i++)
                        {
                            text += model.ProductColorArray[i] + ",";

                            //var existcolorlist = _productColorRepository.All().Where(x => x.ProductId == model.ParentProductId && x.ColorId == int.Parse(model.ProductColorArray[i]));
                            //if (existcolorlist != null)
                            {
                                ProductColorModel itemgroupsingle = new ProductColorModel();
                                itemgroupsingle.ProductId = model.Id;
                                itemgroupsingle.ColorId = int.Parse(model.ProductColorArray[i]);
                                productcolorlist.Add(itemgroupsingle);
                            }
                            //else { 

                            //}

                        }
                        model.ProductColorList = text.TrimEnd(',');
                        model.ColorList = productcolorlist;
                        _productColorRepository.AddRange(productcolorlist);

                    }
                    #endregion


                    #region sizemodelinsert

                    var existsizelisttable = _productSizeRepository.All().Where(x => x.ProductId == model.Id).ToList();
                    _productSizeRepository.RemoveRange(existsizelisttable);

                    text = "";
                    List<ProductSizeModel> productsizelist = new List<ProductSizeModel>();
                    if (model.ProductSizeArray != null)
                    {
                        for (int i = 0; i < model.ProductSizeArray.Length; i++)
                        {
                            text += model.ProductSizeArray[i] + ",";

                            //var existsizelist = _productSizeRepository.All().Where(x => x.ProductId == model.ParentProductId && x.SizeId == int.Parse(model.ProductSizeArray[i]));
                            //if (existsizelist != null)
                            {
                                ProductSizeModel itemgroupsingle = new ProductSizeModel();
                                itemgroupsingle.ProductId = model.Id;
                                itemgroupsingle.SizeId = int.Parse(model.ProductSizeArray[i]);
                                productsizelist.Add(itemgroupsingle);
                            }

                        }

                        model.ProductSizeList = text.TrimEnd(',');
                        model.SizeList = productsizelist;
                        _productSizeRepository.AddRange(productsizelist);
                    }


                    //var existitem = _productRepository.All().Where(x => x.ParentProductId == model.Id);



                    #endregion
                    _productRepository.Update(model, model.Id);


                    #region process to insert into Product table

                    var query = $"Exec prcAutoInsert '{model.ComId}','Complex_Product_Update','{model.Id}','{model.LuserId}'";
                    SqlParameter[] sqlParameter1 = new SqlParameter[4];
                    sqlParameter1[0] = new SqlParameter("@ComId", model.ComId);
                    sqlParameter1[1] = new SqlParameter("@TableName", "Complex_Product_Update");
                    sqlParameter1[2] = new SqlParameter("@BrandName", model.Id); // brandname by product id cause no need to make extra parameter
                    sqlParameter1[3] = new SqlParameter("@UserId", model.LuserId);

                    Helper.ExecProc("prcAutoInsert", sqlParameter1);

                    #endregion





                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());

                }

                if (logoPostedFileBase != null && logoPostedFileBase.Length > 0)
                {
                    var filename = model.Id + "_" + model.Code + "_" + model.Name + "_" + logoPostedFileBase.FileName;

                    var path = Path.Combine(
                     Directory.GetCurrentDirectory(), "wwwroot/Content/ProductImages",
                     filename);

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        logoPostedFileBase.CopyTo(stream);
                    }
                    model.ImagePath = $"/Content/ProductImages/{filename}";
                }
                else
                {
                    var products = _productRepository.Find(model.Id);
                    if (products != null)
                        model.ImagePath = products.ImagePath;
                }
                _productRepository.Update(model, model.Id);


                //TempData["Message"] = "Data Update Successfully";
                //TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());



                return RedirectToAction("AddProduct");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);



        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddSupplierProduct(ProductModel model, IFormFile logoPostedFileBase)
        {

            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });
            //if (!ModelState.IsValid)
            //{
            //    return View(model);
            //}
            ////_productRepository.Insert(model); 
            ////return RedirectToAction("ProductList");


            //if (model.Id == 0)
            //{
            //    _productRepository.Insert(model);
            //}
            //else
            //{
            //    _productRepository.Update(model, model.Id);
            //}
            //return RedirectToAction("ProductList");
            var SupplierId = HttpContext.Session.GetInt32("SupplierId");

            model.SupplierId = SupplierId;


            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {

                    //if (model.BrandName == null)
                    //{
                    //    model.BrandName = "";
                    //}

                    if (model.Description == null)
                    {
                        model.Description = "";
                    }

                    if (model.ModelName == null)
                    {
                        model.ModelName = "";
                    }

                    if (model.SizeName == null)
                    {
                        model.SizeName = "";
                    }

                    if (model.ColorName == null)
                    {
                        model.ColorName = "";
                    }

                    if (model.LocalName == null)
                    {
                        model.LocalName = "";
                    }

                    _productRepository.Insert(model);

                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Name.ToString());

                }
                else
                {
                    //if (model.BrandName == null)
                    //{
                    //    model.BrandName = "";
                    //}

                    if (model.Description == null)
                    {
                        model.Description = "";
                    }

                    if (model.ModelName == null)
                    {
                        model.ModelName = "";
                    }

                    if (model.SizeName == null)
                    {
                        model.SizeName = "";
                    }

                    if (model.ColorName == null)
                    {
                        model.ColorName = "";
                    }

                    if (model.LocalName == null)
                    {
                        model.LocalName = "";
                    }

                    _productRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());

                }

                if (logoPostedFileBase != null && logoPostedFileBase.Length > 0)
                {
                    var filename = model.Id + "_" + model.Code + "_" + model.Name + "_" + logoPostedFileBase.FileName;

                    var path = Path.Combine(
                     Directory.GetCurrentDirectory(), "wwwroot/Content/ProductImages",
                     filename);

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        logoPostedFileBase.CopyTo(stream);
                    }
                    model.ImagePath = $"/Content/ProductImages/{filename}";
                }
                else
                {
                    var products = _productRepository.Find(model.Id);
                    if (products != null)
                        model.ImagePath = products.ImagePath;
                }
                _productRepository.Update(model, model.Id);


                //TempData["Message"] = "Data Update Successfully";
                //TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());



                return RedirectToAction("AddSupplierProduct");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);



        }

        //[HttpPost]
        //public IActionResult CreateProduct(ProductModel product)
        //{
        //    try
        //    {
        //        var errors = ModelState.Where(x => x.Value.Errors.Any())
        //    .Select(x => new { x.Key, x.Value.Errors });

        //        if (ModelState.IsValid)
        //        {

        //            {
        //                _productRepository.Insert(product);
        //                //    return Json("Product Added Successfully");

        //                return Json(new { Success = 1, data = product, ex = "Product Added Successfully" }); ;
        //            }
        //        }
        //        else
        //        {
        //            return Json(new { Success = 3, ex = "Model State Not Valid" });
        //        }
        //    }
        //    catch (Exception e)
        //    {
        //        return Json(new { Success = 3, ex = e.Message });

        //    }


        //}



        [HttpPost]
        public IActionResult SaveProductModal([FromBody] ProductModel model)
        {
            try
            {


                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });


                if (!ModelState.IsValid)
                {
                    //return Json("Model is not valid");
                    return Json(new { Success = 3, ex = errors });
                }
                _productRepository.Insert(model);



                TempData["Message"] = "Data Save Successfully";
                TempData["Status"] = "1";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Name.ToString());

                return Json(new { Success = 1, ex = "Product Added Successfully" });
                //return Json("Product Added Successfully");

            }
            catch (Exception ex)
            {

                return Json(new { Success = 0, ex = ex.InnerException });
            }
        }


        [HttpGet]
        public IActionResult EditProduct(int productId, int isView = 0)
        {
            ViewBag.ActionType = "Edit";

            if (isView == 1)
            {
                ViewBag.ActionType = "View";
            }


            var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
            if (warehouselist.Count() == 0)
            {
                warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            }

            List<int?> permitwarehouselist = new List<int?>();


            foreach (var item in warehouselist)
            {
                permitwarehouselist.Add(int.Parse(item.Value.ToString()));
            }





            var products = _productRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);
            var query = (from p in products.Where(x => x.Id == productId)

                         let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))
                         //.Where(x=>x.Warehouse.Contains(warehouselist))
                         .GroupBy(st => new { st.WarehouseId, st.ProductId })
                         .Select(grouping => grouping.Max(row => row.Id))
                         .ToArray()


                         let WarehouseQty =
                         //p.CostCalculated != null ?
                         p.CostCalculated.OrderByDescending(x => x.Id)
                         .Select(x => new WarehouseResult
                         {
                             CostCalculatedId = x.Id,
                             WarehouseId = x.WarehouseId,
                             WhShortName = x.Warehouse.WhShortName,
                             CurrentStock = x.CurrQty + x.PrevQty,
                             AverageCosting = x.CalculatedPrice,
                             CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                             SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                         })
                         .Where(x => costcallist.Contains(x.CostCalculatedId))

                         //.Where(x => x.CostCalculatedId == 86)
                         .ToList()
                         ?? null


                         let CurrentStockCalc =
                         //p.CostCalculated != null ?
                         p.CostCalculated.OrderByDescending(x => x.Id)
                         .Select(x => new
                         {
                             CostCalculatedId = x.Id,
                             CurrentStock = x.CurrQty + x.PrevQty,

                         })
                         .Where(x => costcallist.Contains(x.CostCalculatedId))
                         .Sum(x => x.CurrentStock)

                         select new ProductResult
                         {
                             //    Id = p.Id,
                             //    Name = p.Name,
                             //    LocalName = p.LocalName,

                             //    Code = p.Code,
                             //    Price = p.Price,
                             //    WholeSalePrice = p.WholeSalePrice,

                             //    UnitName = p.Unit.UnitName,
                             //    CategoryName = p.Category.Name,

                             //    BrandName = p.Brand != null ? p.Brand.BrandName : "",
                             //    ROL = p.ROL,
                             //    ROLTwo = p.ROLTwo,
                             //    ROLThree = p.ROLThree,

                             //    ROQ = p.ROQ,
                             //    MOQ = p.MOQ,
                             //    OldPrice = p.OldPrice,

                             //    SizeName = p.SizeName,
                             //    ColorName = p.ColorName,
                             //    ModelName = p.ModelName,

                             //    ProductBarcode = p.Code,
                             //    Description = p.Description,
                             //    CostPrice = p.CostPrice,
                             //    SupplierName = p.SupplierModel != null ? p.SupplierModel.SupplierName : "",
                             //    TotalPurchase = p.PurchaseItems.Sum(x => x.Quantity),


                             //    TotalSales = p.SalesItems.Sum(x => x.Quantity),
                             //    TotalIssue = p.IssueItems.Sum(x => x.Quantity),
                             //    TotalDamage = p.DamageItems.Sum(x => x.Quantity),

                             //    TotalSalesReturn = p.SalesReturnItems.Sum(x => x.Quantity),
                             //    TotalPurchaseReturn = p.PurchaseReturnItems.Sum(x => x.Quantity),

                             //    TotalTransferIn = p.InternalTransferItems.Sum(x => x.Quantity),
                             //    TotalTransferOut = p.InternalTransferItems.Sum(x => x.Quantity),


                             //    LastPurchaseDate = p.PurchaseItems.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseModel.PurchaseDate.ToString("dd-MMM-yy") ?? "",
                             //    LastReceivedDate = p.InternalTransferItems.OrderByDescending(x => x.Id).FirstOrDefault().InternalTransferModel.InternalTransferDate.ToString("dd-MMM-yy") ?? "",

                             //    LastSalesDate = p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.SalesDate.ToString("dd-MMM-yy") ?? "",
                             //    LastIssueDate = p.IssueItems.OrderByDescending(x => x.Id).FirstOrDefault().IssueModel.IssueDate.ToString("dd-MMM-yy") ?? "",

                             //    LastPurchaseSupplier = p.PurchaseItems.OrderByDescending(x => x.Id).FirstOrDefault().PurchaseModel.SupplierModel.SupplierName ?? null,
                             //    LastSalesCustomer = p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.CustomerModel.Name ?? "" + " - " + p.SalesItems.OrderByDescending(x => x.Id).FirstOrDefault().SalesModel.CustomerName ?? "",
                             //    ImagePath = p.ImagePath,

                             WarehouseList = WarehouseQty,
                             CurrentStock = CurrentStockCalc




                         }).FirstOrDefault();

            ViewBag.WarehouseQty = query;

            var product = _productRepository.All()
                .Include(x => x.PurchaseBatchItems.Where(x => x.IsUsed == false)).ThenInclude(x => x.PurchaseItems).ThenInclude(x => x.PurchaseModel).ThenInclude(x => x.SupplierModel)
                .Where(x => x.Id == productId).FirstOrDefault();

            ViewBag.Category = _categoryRepository.GetAllForDropDown();
            ViewBag.Brand = _brandRepository.GetAllForDropDown();
            ViewBag.ProductSize = _SizeRepository.GetAllForDropDown();
            ViewBag.ProductColor = _ColorRepository.GetAllForDropDown();


            ViewBag.ProductColorArray = _ColorRepository.GetAllForDropDown();
            //ViewBag.ProductSizeArray = _SizeRepository.GetAllForDropDown();
            ViewBag.ParentProduct = _productRepository.GetComplexProductDropDown().Where(x => x.Value != productId.ToString());

            ViewBag.Unit = _unitRepository.GetAllForDropDown();
            ViewBag.Warrenty = _warrentyRepository.GetAllForDropDown();


            ViewBag.Inventory = _accountHeadRepository.GetInventoryDropdown();
            ViewBag.Consumption = _accountHeadRepository.GetConsumptionDropdown();
            ViewBag.Sales = _accountHeadRepository.GetSalesDropdown();
            ViewBag.SalesVAT = _accountHeadRepository.GetSalesVATDropdown();
            ViewBag.PurchaseVAT = _accountHeadRepository.GetPurchaseVATDropdown();
            ViewBag.Supplier = _supplierRepository.GetSupplierLedgerHeadForDropDown();



            string sizedesc = product.ProductSizeList;
            if (sizedesc == null)
            {
                ViewBag.ProductSizeArray = new MultiSelectList(_SizeRepository.All(), "Id", "SizeName");
            }
            else
            {
                string[] split = sizedesc.Split(',');
                ViewBag.ProductSizeArray = new MultiSelectList(_SizeRepository.All(), "Id", "SizeName", split);
            }


            string colordesc = product.ProductColorList;
            if (colordesc == null)
            {
                ViewBag.ProductColorArray = new MultiSelectList(_ColorRepository.All(), "Id", "ColorName");
            }
            else
            {
                string[] split = colordesc.Split(',');
                ViewBag.ProductColorArray = new MultiSelectList(_ColorRepository.All(), "Id", "ColorName", split);
            }



            return View("AddProduct", product);
        }



        [HttpGet]
        public IActionResult BarcodeProduct(int ProductId, int Qty)
        {


            try
            {
                var action = "PrintBarcode";
                var rptFormat = "pdf";


                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");


                var reportname = "rptProductTag_36Pcs";
                var filename = "Barcode_";
                string redirectUrl = "";
                var purchaseinfo = _productRepository.All().Where(x => x.Id == ProductId).FirstOrDefault();

                if (action == "PrintBarcode")
                {

                    var BarcodeReportStyle = _storeSettingRepository.All().Include(x => x.BarcodeReportStyle).FirstOrDefault().BarcodeReportStyle;

                    if (BarcodeReportStyle != null)
                    {
                        reportname = "rptProductTag_" + BarcodeReportStyle.ReportStyleName.ToString();
                    }
                    else
                    {
                        //reportname = "rptProductTag_" + ReportStyle.ToString();

                    }


                    var abcd = _barcodePrintRepository.All().Where(x => x.LuserId == UserId).ToList();
                    _barcodePrintRepository.RemoveRange(abcd);


                    var barcodelist = new List<BarcodePrintModel>();


                    if (reportname.Contains("rptProductTag_36Pcs"))
                    {
                        Qty = 36;
                    }

                    for (int i = 0; i < Qty; i++)
                    {
                        BarcodePrintModel abc = new BarcodePrintModel();

                        abc.Id = 0;
                        abc.ProductId = ProductId;
                        abc.Quantity = 1;
                        abc.WarehosueId = _warehouseRepository.All().Where(x => x.WhType == "L").FirstOrDefault().Id;

                        barcodelist.Add(abc);
                    }


                    _barcodePrintRepository.AddRange(barcodelist);


                    //reportname = "rptProductTag";
                    filename = "Barcode_Print_" + DateTime.Now.Date;
                    HttpContext.Session.SetString("ReportQuery", "Exec POS_rptPrintBarcode '" + ComId + "', '" + UserId + "' ");
                    HttpContext.Session.SetString("ReportPath", "~/ReportViewer/POS/" + reportname + ".rdlc");
                }


                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));


                string DataSourceName = "DataSet1";

                //HttpContext.Session.SetObject("Acc_rptList", postData);

                //Common.Classes.clsMain.intHasSubReport = 0;
                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");// Session["ReportPath"].ToString();
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
                clsReport.strDSNMain = DataSourceName;

                //var ConstrName = "ApplicationServices";
                //string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat }); //Repository.GenerateReport(clsReport.strReportPathMain, clsReport.strQueryMain, ConstrName, rptFormat);

                //string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                //redirectUrl = callBackUrl;
                //return Json(new { Url = redirectUrl });

                return RedirectToAction("Index", "ReportViewer");


                //return View("AddProduct", product);

            }

            catch (Exception ex)
            {
                // If Sucess== 0 then Unable to perform Save/Update Operation and send Exception to View as JSON
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
            //return RedirectToAction("Index");








        }




        [HttpGet]
        public IActionResult ViewProduct(int productId)
        {
            ViewBag.ActionType = "View";
            //var product = _productRepository.Find(productId);

            var product = _productRepository.All()
                .Include(x => x.Category)
                .Include(x => x.Unit)

                .Include(x => x.Brand)
                .Include(x => x.ProductSizeList)
                .Include(x => x.ColorList)


                .Include(x => x.ParentProduct)
                .Include(x => x.Warrenty)
                .Include(x => x.InventoryAccounts)
                .Include(x => x.ConsumptionAccount)
                .Include(x => x.SalesAccount)
                .Include(x => x.SalesVATAccount)
                .Include(x => x.PurchaseVATAccount)



                //.Include(x => x.SalesItems).ThenInclude(x => x.BatchSerialItems).ThenInclude
                .Include(x => x.SalesReturnItems)
                .Include(x => x.PurchaseItems)
                .Include(x => x.PurchaseReturnItems)
                .Include(x => x.PurchaseBatchItems)






                .Where(x => x.Id == productId);



            //ViewBag.Category = _categoryRepository.GetAllForDropDown();
            //ViewBag.Brand = _brandRepository.GetAllForDropDown();
            //ViewBag.ProductSize = _SizeRepository.GetAllForDropDown();
            //ViewBag.ProductColor = _ColorRepository.GetAllForDropDown();


            //ViewBag.ProductColorArray = _ColorRepository.GetAllForDropDownWtihValue();
            ////ViewBag.ProductSizeArray = _SizeRepository.GetAllForDropDown();
            //ViewBag.ParentProduct = _productRepository.GetComplexProductDropDown().Where(x => x.Value != productId.ToString());

            //ViewBag.Unit = _unitRepository.GetAllForDropDown();
            //ViewBag.Warrenty = _warrentyRepository.GetAllForDropDown();


            //ViewBag.Inventory = _accountHeadRepository.GetInventoryDropdown();
            //ViewBag.Consumption = _accountHeadRepository.GetConsumptionDropdown();
            //ViewBag.Sales = _accountHeadRepository.GetSalesDropdown();
            //ViewBag.SalesVAT = _accountHeadRepository.GetSalesVATDropdown();
            //ViewBag.PurchaseVAT = _accountHeadRepository.GetPurchaseVATDropdown();
            //ViewBag.Supplier = _supplierRepository.GetSupplierLedgerHeadForDropDown();





            return View("AddProduct", product);
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult EditSupplierProduct(int productId)
        {
            ViewBag.ActionType = "Edit";
            var product = _productRepository.Find(productId);
            ViewBag.Category = _categoryRepository.GetAllForDropDown();
            ViewBag.Brand = _brandRepository.GetAllForDropDown();

            ViewBag.ProductSize = _SizeRepository.GetAllForDropDown();
            ViewBag.ProductColor = _ColorRepository.GetAllForDropDown();

            ViewBag.ProductColorArray = _ColorRepository.GetAllForDropDown();
            ViewBag.ProductSizeArray = _SizeRepository.GetAllForDropDown();
            ViewBag.ParentProduct = _productRepository.GetComplexProductDropDown();

            ViewBag.Unit = _unitRepository.GetAllForDropDown();
            ViewBag.Warrenty = _warrentyRepository.GetAllForDropDown();


            ViewBag.Inventory = _accountHeadRepository.GetInventoryDropdown();
            ViewBag.Consumption = _accountHeadRepository.GetConsumptionDropdown();
            ViewBag.Sales = _accountHeadRepository.GetSalesDropdown();
            ViewBag.SalesVAT = _accountHeadRepository.GetSalesVATDropdown();
            ViewBag.PurchaseVAT = _accountHeadRepository.GetPurchaseVATDropdown();
            ViewBag.Supplier = _supplierRepository.GetSupplierLedgerHeadForDropDown();

            return View("AddSupplierProduct", product);
        }
        [AllowAnonymous]
        [HttpGet]
        public IActionResult CopyProduct(int productId)
        {
            ViewBag.ActionType = "Create";
            var product = _productRepository.Find(productId);
            product.Id = 0;
            ViewBag.Category = _categoryRepository.GetAllForDropDown();
            ViewBag.Brand = _brandRepository.GetAllForDropDown();

            ViewBag.ProductSize = _SizeRepository.GetAllForDropDown();
            ViewBag.ProductColor = _ColorRepository.GetAllForDropDown();

            ViewBag.ProductColorArray = _ColorRepository.GetAllForDropDown();
            ViewBag.ProductSizeArray = _SizeRepository.GetAllForDropDown();
            ViewBag.ParentProduct = _productRepository.GetComplexProductDropDown();

            ViewBag.Unit = _unitRepository.GetAllForDropDown();
            ViewBag.Warrenty = _warrentyRepository.GetAllForDropDown();


            ViewBag.Inventory = _accountHeadRepository.GetInventoryDropdown();
            ViewBag.Consumption = _accountHeadRepository.GetConsumptionDropdown();
            ViewBag.Sales = _accountHeadRepository.GetSalesDropdown();
            ViewBag.SalesVAT = _accountHeadRepository.GetSalesVATDropdown();
            ViewBag.PurchaseVAT = _accountHeadRepository.GetPurchaseVATDropdown();
            ViewBag.Supplier = _supplierRepository.GetSupplierLedgerHeadForDropDown();

            return View("AddProduct", product);
        }
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult EditProduct(ProductModel model)
        //{
        //    if (!ModelState.IsValid)
        //    {
        //        return View(model);
        //    }
        //    _productRepository.Update(model, model.Id);
        //    return RedirectToAction("ProductList");
        //}
        [AllowAnonymous]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteProduct(int productId)
        {
            var model = _productRepository.Find(productId);

            if (model != null)
            {
                if (_costCalculatedRepository.All().Where(x => x.ProductId == productId).Count() > 1)
                {
                    TempData["Message"] = "Data Delete Not Possible";
                    TempData["Status"] = "3";
                    return RedirectToAction("ProductList");
                }

                _productRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Name);


                return RedirectToAction("ProductList");
            }
            return RedirectToAction("ProductList");
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult DeleteSupplierProduct(int productId)
        {
            var model = _productRepository.Find(productId);

            if (model != null)
            {
                if (_costCalculatedRepository.All().Where(x => x.ProductId == productId).Count() > 1)
                {
                    TempData["Message"] = "Data Delete Not Possible";
                    TempData["Status"] = "3";
                    return RedirectToAction("ProductList");
                }

                _productRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Name);


                return RedirectToAction("SupplierProductList");
            }
            return RedirectToAction("SupplierProductList");
        }

        [AllowAnonymous]
        [HttpGet]
        public ActionResult ProductReport()
        {
            //if (From.HasValue && To.HasValue)
            //    return View(_productRepository.All().Where(x => x.IsDelete == false));
            //return View(new List<ProductModel>());


            if (_productRepository.All().Count() == 0)
            {
                TempData["Msg"] = "No Product is Available.";
                return RedirectToAction("Index");
            }
            var prouctlist = _productRepository.All().ToList();


            //if (prouctlist != null)
            //{

            //        ProductReport paymentReport = new ProductReport();
            //        byte[] bytes = paymentReport.CreateReport(prouctlist);
            //        return File(bytes, "application/pdf");

            //}
            return RedirectToAction("index");








        }



        [HttpGet]
        public ActionResult BarcodeGenerate()
        {
            return View();
        }


        [HttpGet]
        public ActionResult BarcodePrint()
        {
            return View();
        }


        //[HttpPost]
        //public ActionResult BarcodeGenerate(int productId, int quantity)
        //{
        //    {
        //        Document doc = new Document(new iTextSharp.text.Rectangle(24, 12), 5, 5, 1, 1);
        //        try
        //        {

        //            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(
        //              Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "/codes.pdf", FileMode.Create));
        //            doc.Open();

        //            DataTable dt = new DataTable();
        //            dt.Columns.Add("ID");
        //            dt.Columns.Add("Price");
        //            for (int i = 0; i < 20; i++)
        //            {
        //                DataRow row = dt.NewRow();
        //                row["ID"] = "ZS00000000000000" + i.ToString();
        //                row["Price"] = "100," + i.ToString();
        //                dt.Rows.Add(row);
        //            }
        //            //System.Drawing.Image img1 = null;
        //            for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                if (i != 0)
        //                    doc.NewPage();
        //                PdfContentByte cb1 = writer.DirectContent;
        //                BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_BOLDITALIC, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        //                cb1.SetFontAndSize(bf, 2.0f);
        //                cb1.BeginText();
        //                cb1.SetTextMatrix(1.2f, 9.5f);
        //                cb1.ShowText("Safi Garments");
        //                cb1.EndText();

        //                PdfContentByte cb2 = writer.DirectContent;
        //                BaseFont bf1 = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                cb2.SetFontAndSize(bf1, 1.3f);
        //                cb2.BeginText();
        //                cb2.SetTextMatrix(17.5f, 1.0f);
        //                cb2.ShowText(dt.Rows[i]["Price"].ToString());
        //                cb2.EndText();

        //                iTextSharp.text.pdf.PdfContentByte cb = writer.DirectContent;
        //                iTextSharp.text.pdf.Barcode128 bc = new Barcode128();
        //                bc.TextAlignment = Element.ALIGN_LEFT;
        //                bc.Code = dt.Rows[i]["ID"].ToString();
        //                bc.StartStopText = false;
        //                bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
        //                bc.Extended = true;

        //                //System.Drawing.Image bimg = 
        //                //  bc.CreateDrawingImage(System.Drawing.Color.Black, System.Drawing.Color.White);
        //                //img1 = bimg;

        //                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
        //                  iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

        //                cb.SetTextMatrix(1.5f, 3.0f);
        //                img.ScaleToFit(60, 5);
        //                img.SetAbsolutePosition(1.5f, 1);
        //                cb.AddImage(img);
        //            }
        //        }
        //        catch
        //        {
        //        }
        //        finally
        //        {
        //            doc.Close();
        //        }
        //    }

        //    //if (ModelState.IsValid)
        //    //{
        //    //    ProductReport paymentReport = new ProductReport();
        //    //    byte[] bytes = paymentReport.CreateReport();
        //    //    return File(bytes, "application/pdf");
        //    //}
        //    return RedirectToAction("BarcodeGenerate");
        //}
        #endregion

        #region store

        public IActionResult CompanyList()
        {
            var UserRole = HttpContext.Session.GetString("UserRole");
            if (UserRole == "SuperAdmin")
            {
                return View(_storeSettingRepository.All(false).Include(x => x.BusinessType));
            }



            var ComId = HttpContext.Session.GetInt32("ComId");
            var BaseComId = HttpContext.Session.GetInt32("BaseComId");
            var UserId = HttpContext.Session.GetInt32("UserId");
            return View(_storeSettingRepository.All(false).Include(x => x.CompanyList).Include(x => x.BusinessType).Where(x => x.BaseComId == BaseComId));
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult AddCompany()
        {
            ViewBag.Country = _countryRepository.GetAllForDropDown();
            ViewBag.BusinessType = _businessTypeRepository.GetActiveForDropDown();
            ViewBag.TimeZone = _timeZoneSettingsRepository.GetAllForDropDown();

            return View(new StoreSettingModel());
        }



        [HttpGet]
        public IActionResult Settings(int? SettingsId)
        {
            ViewBag.Country = _countryRepository.GetAllForDropDown();
            ViewBag.BusinessType = _businessTypeRepository.GetActiveForDropDown();
            ViewBag.InvoiceReportStyle = _ReportStyleRepository.GetAllInvoiceReportForDropDown();
            ViewBag.PurchaseReportStyle = _ReportStyleRepository.GetAllPurchaseReportForDropDown();
            ViewBag.FiscalYearType = _fiscalYearTypeRepository.GetAllForDropDown();
            ViewBag.TimeZoneSettings = _timeZoneSettingsRepository.GetAllForDropDown();



            ViewBag.BarcodeReportStyle = _ReportStyleRepository.GetAllBarcodeReportForDropDown();
            ViewBag.VoucherNoCreatedType = _accVoucherCreatedTypeRepository.GetAllForDropDown();


            var ComId = HttpContext.Session.GetInt32("ComId");
            var UserId = HttpContext.Session.GetInt32("UserId");

            //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;
            var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;

            if (SettingsId != null && useraccount == "SuperAdmin")
            {
                ComId = SettingsId;
            }
            else if (SettingsId != null && useraccount == "Admin")
            {
                ComId = SettingsId;
            }


            var storesettings = _storeSettingRepository.All(false)
                .Include(x => x.BusinessType).Where(x => x.ComId == ComId).FirstOrDefault();


            if (storesettings != null)
            {
                if (storesettings.BusinessTypeId == 0)
                {
                    ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();
                }
                return View(storesettings);
            }
            else
            {
                var signinmodel = _companyRepository.Find(ComId.GetValueOrDefault());
                //var signinmodel = _companyRepository.All().Where(x=>x.Id == ComId).FirstOrDefault();

                storesettings.StoreName = signinmodel.CompanyName;
                storesettings.DecimalField = 2;

                storesettings.Phone = signinmodel.comPhone;
                storesettings.Email = signinmodel.comEmail;
                storesettings.Web = signinmodel.comWeb;
                storesettings.BusinessTypeId = signinmodel.BusinessTypeId;
                storesettings.SubscriptionTypeId = signinmodel.SubscriptionTypeId;

                storesettings.VoucherNoCreatedTypeId = null;
                storesettings.isMultiCurrency = true;
                storesettings.isMultiDebitCredit = true;
                storesettings.isVoucherDistributionEntry = false;
                storesettings.isChequeDetails = true;

                storesettings.isSMSService = false;
                storesettings.isEmailSerivce = false;
                storesettings.IsSignature = false;



                //storesettings.Currency = "BDT ";
                storesettings.CountryId = 18;

                storesettings.Address = "=N/A=";
                storesettings.Logo = "/Content/Storeimages/0.png";
                storesettings.ComId = ComId.GetValueOrDefault();

                //storesettings.Email = signinmodel.Email;

                _storeSettingRepository.Insert(storesettings);
            }


            return View(new StoreSettingModel());
        }


        #region custom form style
        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetCustomFormStyleList()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.ComId = ComId;
            var customformstyle = _customFormStyleRepository.All()
                .Include(x => x.DocTypeList)
                .Select(x => new
                {
                    x.Id,
                    x.Name,
                    x.DocTypeList.DocType,
                    x.DocTypeId,
                    x.UpdateDate,
                    x.IsDefault,
                    x.ComId
                });
            return Json(customformstyle);
        }
        [AllowAnonymous]
        public IActionResult CustomFormStyleList(string FromDate, string ToDate, int? UserList, int? Warehouse, string Type, string msg)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.ComId = ComId;
            ViewBag.msg = msg;
            return View();
        }


        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetDataForCustomFormStyle()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var queryname = "getDataForCustomForm";

            var viewquery = $"Exec {queryname} '{ComId}'";

            Console.WriteLine(viewquery);
            SqlParameter[] parameters = new SqlParameter[1];
            parameters[0] = new SqlParameter("@ComId", ComId);

            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS(queryname, parameters);
            return Json(new { data = datasetabc, ex = "" });
        }

        //for pdf
        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetDataForCustomFormStyleForPdf(int SalesId)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var queryname = "getDataForCustomForm_sales";

            var viewquery = $"Exec {queryname} '{ComId}' '{SalesId}'";

            Console.WriteLine(viewquery);
            SqlParameter[] parameters = new SqlParameter[2];
            parameters[0] = new SqlParameter("@ComId", ComId);
            parameters[1] = new SqlParameter("@SalesId", SalesId);

            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS(queryname, parameters);
            return Json(new { data = datasetabc, ex = "" });
        }
        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetDataForCustomFormStyleForPdfForExpense(int PurchaseId)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var queryname = "getDataForCustomForm_expenses";

            var viewquery = $"Exec {queryname} '{ComId}' '{PurchaseId}'";

            Console.WriteLine(viewquery);
            SqlParameter[] parameters = new SqlParameter[2];
            parameters[0] = new SqlParameter("@ComId", ComId);
            parameters[1] = new SqlParameter("@PurchaseId", PurchaseId);

            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS(queryname, parameters);
            return Json(new { data = datasetabc, ex = "" });
        }

        [AllowAnonymous]
        [HttpGet]
        //public IActionResult InvoiceFormStylePreview(string type = "", int id = 0)
        public IActionResult CustomFormStylePreview(string type = "", int id = 0)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                if (id > 0)
                {

                    if (type == "RunningSalesReport")
                    {
                        var DocType = _saleRepository.All().Where(x => x.Id == id).FirstOrDefault().DocTypeId;

                        var customrFormStyle = _customFormStyleRepository.All(false)
                   .Where(x => x.DocTypeId == DocType && x.IsDefault == true).FirstOrDefault();

                        if (customrFormStyle != null)
                        {
                            ViewBag.DocTypeId = DocType;
                            ViewBag.type = type;
                            ViewBag.id = id;
                            return View(customrFormStyle);
                        }
                        else
                        {
                            customrFormStyle = _customFormStyleRepository.All(false)
                             .Where(x => x.DocTypeList.DocType == "Invoice" && x.IsDefault == true).FirstOrDefault();
                            if (customrFormStyle != null)
                            {
                                ViewBag.type = type;
                                ViewBag.id = id;
                                return View(customrFormStyle);
                            }
                            else
                            {
                                customrFormStyle = _customFormStyleRepository.All(false)
                             .Where(x => x.DocTypeList.DocType == "Default Sales Form Style").FirstOrDefault();
                                ViewBag.type = type;
                                ViewBag.id = id;
                                return View(customrFormStyle);
                                //ViewBag.msg = "Please make default at least one style for sales";
                                //return RedirectToAction("CustomFormStyleList", new { msg = ViewBag.msg });
                            }

                        }

                    }
                    if (type == "RunningExpnesesReport")
                    {
                        var DocType = _purchaseRepository.All().Where(x => x.Id == id).FirstOrDefault().DocTypeId;

                        var customrFormStyle = _customFormStyleRepository.All(false)
                   .Where(x => x.DocTypeId == DocType && x.IsDefault == true).FirstOrDefault();
                        if (customrFormStyle != null)
                        {
                            ViewBag.DocTypeId = DocType;
                            ViewBag.type = type;
                            ViewBag.id = id;
                            return View(customrFormStyle);
                        }
                        else
                        {
                            customrFormStyle = _customFormStyleRepository.All(false)
                             .Where(x => x.DocTypeList.DocType == "Expense" && x.IsDefault == true).FirstOrDefault();
                            if (customrFormStyle != null)
                            {
                                ViewBag.type = type;
                                ViewBag.id = id;
                                return View(customrFormStyle);
                            }
                            else
                            {
                                customrFormStyle = _customFormStyleRepository.All(false)
                             .Where(x => x.DocTypeList.DocType == "Default Expenses Form Style").FirstOrDefault();
                                ViewBag.type = type;
                                ViewBag.id = id;
                                return View(customrFormStyle);
                                //ViewBag.msg = "Please make default at least one style for expenses";
                                //return RedirectToAction("CustomFormStyleList", new { msg = ViewBag.msg });
                            }


                        }
                    }
                    else
                    {
                        var customrFormStyle = _customFormStyleRepository.All(false)
                   .Where(x => x.Id == id && x.IsDelete == false).FirstOrDefault();
                        var DocType = _docTypeRepository.All().Where(x => x.DocFor == "Sales" && x.DocType == type).FirstOrDefault();
                        ViewBag.DocTypeId = DocType.Id;
                        ViewBag.type = type;
                        ViewBag.id = id;
                        return View(customrFormStyle);
                    }
                }
                var DocTypeId = _docTypeRepository.All().Where(x => x.DocFor == "Sales" && x.DocType == type).FirstOrDefault();
                ViewBag.DocTypeId = DocTypeId.Id;

                return View(new CustomFormStyleModel());
            }
            catch (Exception ex)
            {
                return RedirectToAction("CustomFormStyleList");
            }
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult CustomFormStyle(string type, int id = 0)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                var customrFormStyle = _customFormStyleRepository.All(false)
                    .Where(x => x.Id == id && x.IsDelete == false).FirstOrDefault();

                var DocType = (type == "Expense" || type == "Purchase" || type == "Purchase Order" || type == "Opening Stock" || type == "Bill" || type == "Stock Adjustment" || type == "Cheque" || type == "Supplier credit" || type == "Payment" || type == "Purchase Payment")
                    ? _docTypeRepository.All().Where(x => x.DocFor == "Purchase" && x.DocType == type).FirstOrDefault()
                    : _docTypeRepository.All().Where(x => x.DocFor == "Sales" && x.DocType == type).FirstOrDefault();

                if (id > 0)
                {
                    ViewBag.DocTypeId = DocType?.Id;
                    ViewBag.Docfor = DocType.DocFor;
                    return View(customrFormStyle);
                }

                ViewBag.Docfor = DocType.DocFor;
                ViewBag.DocTypeId = DocType?.Id;

                return View(new CustomFormStyleModel());
            }
            catch (Exception ex)
            {
                // Handle the exception here
                ViewBag.Error = ex.Message;
                return View("ErrorView"); // You need to create an ErrorView.cshtml to display the error.
            }
        }


        [AllowAnonymous]
        [HttpPost]
        public IActionResult CustomFormStyle(CustomFormStyleModel model, IFormFile logoPostedFileBase)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var errors = ModelState.Where(x => x.Value.Errors.Any())
           .Select(x => new { x.Key, x.Value.Errors });


            if (!ModelState.IsValid) return View(model);
            if (model.Id > 0)
            {

                _customFormStyleRepository.Update(model, model.Id);
                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
            }
            else
            {
                _customFormStyleRepository.Insert(model);



            }

            return RedirectToAction("CustomFormStyleList");
            //return Ok();
            //return RedirectToAction("CustomFormStyle",model: model.Id);
        }



        [HttpPost]
        [AllowAnonymous]
        public IActionResult RenameCustomForm(CustomFormStyleModel model)
        {
            try
            {
                if (!ModelState.IsValid)
                    return Json(new { success = "0", message = "Invalid ModelState" });

                var existingModel = _customFormStyleRepository.Find(model.Id);

                if (existingModel == null)
                    return Json(new { success = "0", message = "Record not found" });

                existingModel.Name = model.Name;
                existingModel.DocTypeId = model.DocTypeId;

                _customFormStyleRepository.Update(existingModel, existingModel.Id);

                return Json(new { success = "1", message = "Data Update Successfully" });
            }
            catch (Exception ex)
            {
                return Json(new { success = "0", message = ex.Message });
            }
        }



        [AllowAnonymous]
        [HttpPost]
        public IActionResult SaveColumnOrder([FromBody] CustomFormStyleModel model)
        {
            var errors = ModelState.Where(x => x.Value.Errors.Any())
           .Select(x => new { x.Key, x.Value.Errors });


            if (!ModelState.IsValid) return View(model);

            var customFormStyle = _customFormStyleRepository.Find(model.Id);

            if (customFormStyle == null)
            {
                return NotFound(); // or handle accordingly
            }

            // Update the ColumnOrder property
            customFormStyle.ColumnOrder = JsonConvert.SerializeObject(model.ColumnOrder);

            // Save the updated CustomFormStyleModel
            _customFormStyleRepository.Update(customFormStyle, customFormStyle.Id);

            return Ok(new { Message = "Column order saved successfully" });
        }
        [HttpGet]
        [AllowAnonymous]

        public JsonResult InactiveCustomFormStyle(int id)
        {
            try
            {


                var model = _customFormStyleRepository.Find(id);

                if (model != null)
                {
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _customFormStyleRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _customFormStyleRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." });
                throw ex;
            }
        }

        [HttpGet]
        [AllowAnonymous]

        public JsonResult MakeDefaultCustomFormStyle(int id)
        {
            try
            {


                var model = _customFormStyleRepository.Find(id);

                if (model != null)
                {
                    if (model.IsDefault == false)
                    {
                        model.IsDefault = true;
                        _customFormStyleRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Default set" });

                    }
                    else if (model.IsDefault == true)
                    {
                        model.IsDefault = false;
                        _customFormStyleRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Default cleare!." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." });
                throw ex;
            }
        }
        #endregion







        #region currency list
        [AllowAnonymous]
        [HttpGet]
        public IActionResult currencycenterData()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.ComId = ComId;
            var customformstyle = _companyCurrencyRepository.All().Where(x => x.IsDelete == false)
                .Include(x => x.Currency)
                .Select(x => new
                {
                    x.Id,
                    x.ComId,
                    x.Currency.CurrencyShortName,
                    CurrencyRate = x.CurrencyRate == null ? "Unavailable" : x.CurrencyRate,
                    x.UpdateDate,
                    x.AsOf
                });
            return Json(customformstyle);
        }
        [AllowAnonymous]
        public IActionResult currencycenter(string FromDate, string ToDate, int? UserList, int? Warehouse, string Type, string msg)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.ComId = ComId;
            ViewBag.msg = msg;
            return View();
        }
        [AllowAnonymous]
        public IActionResult GetCurrencyDropdowForCurrencyCenter()
        {
            var x = _countryRepository.GetCurrencyList().ToList();
            return Json(x);
        }

        [AllowAnonymous]
        [HttpPost]
        public IActionResult saveCompanyCurrency(CompanyCurrencyModel model)
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });


                if (!ModelState.IsValid) return View(model);

                var currencies = _companyCurrencyRepository.All().FirstOrDefault();
                if (model.Id > 0)
                {

                    _companyCurrencyRepository.Update(model, model.Id);
                    return Json(new { success = "1", msg = "Updated Successfully" });
                }
                else
                {
                    if (currencies == null || currencies.CurrencyId != model.CurrencyId)
                    {
                        _companyCurrencyRepository.Insert(model);
                        return Json(new { success = "1", msg = "Saved Successfully" });
                    }
                    else
                    {
                        return Json(new { success = "1", msg = "Already added!" });
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpGet]
        [AllowAnonymous]

        public JsonResult InactiveCopmanyCurrency(int id)
        {
            try
            {


                var model = _companyCurrencyRepository.Find(id);

                if (model != null)
                {
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _companyCurrencyRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _companyCurrencyRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." });
                throw ex;
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public IActionResult CurrencyRateSet(CompanyCurrencyModel model)
        {
            try
            {
                if (!ModelState.IsValid)
                    return Json(new { success = "0", message = "Invalid ModelState" });

                var existingModel = _companyCurrencyRepository.Find(model.Id);

                if (existingModel == null)
                    return Json(new { success = "0", message = "Record not found" });

                existingModel.CurrencyRate = model.CurrencyRate;
                existingModel.AsOf = model.AsOf;

                _companyCurrencyRepository.Update(existingModel, existingModel.Id);

                return Json(new { success = "1", message = "Data Update Successfully" });
            }
            catch (Exception ex)
            {
                return Json(new { success = "0", message = ex.Message });
            }
        }


        [HttpGet]
        [AllowAnonymous]
        public IActionResult GetCurrencyRateForExpense(int CurrencyId, DateTime? purchaseDate)
        {
            if (purchaseDate == null)
            {
                purchaseDate = DateTime.Now;
            }

            purchaseDate = Convert.ToDateTime(purchaseDate);

            var isCurrencyExists = _companyCurrencyRepository.All().Where(x => x.CurrencyId == CurrencyId && x.AsOf <= purchaseDate).ToList();

            int currenciesData = 0;

            if (isCurrencyExists != null && isCurrencyExists.Count != 0)

            {
                currenciesData = _companyCurrencyRepository.All().Where(x => x.CurrencyId == CurrencyId && x.AsOf <= purchaseDate).OrderBy(x => x.Id).LastOrDefault().Id;
            }
            else
            {
                currenciesData = _companyCurrencyRepository.All().Where(x => x.CurrencyId == CurrencyId && x.AsOf >= purchaseDate).OrderBy(x => x.Id).FirstOrDefault().Id;
            }

            var currencies = _companyCurrencyRepository.All().Where(x => x.Id == currenciesData)
                 .Include(x => x.Currency)
                .Select(x => new
                {
                    x.Id,
                    x.CurrencyId,
                    x.Currency.CurrencyShortName,
                    x.Currency.FlagClass,
                    x.CurrencyRate
                }).ToList();
            if (currencies != null)
            {
                return Json(currencies);

            }
            else
            {
                return Json(new { success = "0", msg = "Please add currency in currency center list" });

            }
        }


        [HttpGet]
        [AllowAnonymous]
        public IActionResult GetCurrencyRateForSales(int CustomerId, DateTime? salesdate)
        {
            if (salesdate == null)
            {
                salesdate = DateTime.Now;
            }
            var CustomerInfo = _customerRepository.All().Where(x => x.Id == CustomerId).FirstOrDefault();

            var currencyId = 0;

            if (CustomerInfo == null)
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                currencyId = _storeSettingRepository.All(true, true).Where(x => x.ComId == ComId).FirstOrDefault().CurrencyId;
            }
            else
            {
                currencyId = CustomerInfo.CustomerCurrencyId;
            }

            var currencyExists = _companyCurrencyRepository.All().Where(x => x.CurrencyId == currencyId && x.AsOf <= salesdate).ToList();

            var currenciesData = 0;


            if (currencyExists != null && currencyExists.Count != 0)
            {
                currenciesData = _companyCurrencyRepository.All().Where(x => x.CurrencyId == currencyId && x.AsOf <= salesdate).OrderBy(x => x.Id).LastOrDefault().Id;
            }
            else
            {
                currenciesData = _companyCurrencyRepository.All().Where(x => x.CurrencyId == currencyId && x.AsOf >= salesdate).OrderBy(x => x.Id).FirstOrDefault().Id;
            }



            var currencies = _companyCurrencyRepository.All().Where(x => x.Id == currenciesData)
                 .Include(x => x.Currency).OrderBy(x => x.Id)
                .Select(x => new
                {
                    x.Id,
                    x.CurrencyId,
                    x.Currency.CurrencyShortName,
                    x.Currency.FlagClass,
                    x.CurrencyRate
                }).FirstOrDefault();

            if (currenciesData > 0)
            {
                return Json(currencies);
            }
            else
            {
                return Json(new { success = "0", msg = "Please add currency in currency center list" });
            }
        }

        #endregion







        #region budget region
        [AllowAnonymous]
        [HttpGet]
        public IActionResult budgetListData()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.ComId = ComId;
            var budget = _budgetMainRepository.All().Where(x => x.IsDelete == false)
                .Include(x => x.BudgetSubs)
                .Select(x => new
                {
                    x.Id,
                    x.ComId,
                    x.Name,
                    x.FiscalYearId,
                    x.Acc_FiscalYears.FYName,
                    CreateDate = x.CreateDate.ToString("dd-MMM-yyyy"),
                    UpdateDate = x.UpdateDate.ToString("dd-MMM-yyyy"),
                });
            return Json(budget);
        }

        [AllowAnonymous]
        public IActionResult budgets(string FromDate, string ToDate, int? UserList, int? Warehouse, string Type, string msg)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.ComId = ComId;
            ViewBag.msg = msg;
            return View();
        }

        [AllowAnonymous]
        public IActionResult createbudget(int? BudgetId)
        {
            if (BudgetId > 0)
            {
                ViewBag.ActionType = "Edit";
                var ComId = HttpContext.Session.GetInt32("ComId");
                ViewBag.ComId = ComId;
                ViewBag.BudgetId = BudgetId;
                return View(model: BudgetId);
            }
            else
            {
                ViewBag.ActionType = "Create";
                var ComId = HttpContext.Session.GetInt32("ComId");
                ViewBag.ComId = ComId;
                ViewBag.BudgetId = 0;
                return View(model: BudgetId);
            }

        }



        [HttpPost]
        [AllowAnonymous]
        public IActionResult AddBudget([FromBody] Acc_BudgetMainModel model, string doctype, int CopyBill = 0)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });


                if (ModelState.IsValid)
                {
                    if (model.Id > 0)
                    {

                        _budgetMainRepository.Update(model, model.Id);

                        if (model.BudgetSubs != null)
                        {
                            foreach (BudgetSubModel item in model.BudgetSubs)
                            {
                                if (item.Id > 0 && item.AccId > 0)
                                {
                                    _budgetSubRepository.Update(item, item.Id);

                                }
                                else
                                {
                                    _budgetSubRepository.Insert(item);

                                }
                            }
                        }
                        TempData["Message"] = "Data Update Successfully";
                        TempData["Status"] = "2";
                        return Json(new { error = false, message = "Budget updated successfully", Id = model.Id });
                    }
                    else
                    {

                        foreach (var item in model.BudgetSubs.Where(x => x.IsDelete == false))
                        {

                            item.CreateDate = DateTime.Now;
                            item.UpdateDate = DateTime.Now;
                            item.ComId = int.Parse(ComId.ToString());
                            item.LuserId = int.Parse(UserId.ToString());
                        }
                        _budgetMainRepository.Insert(model);
                        TempData["Message"] = "Data Save Successfully";
                        TempData["Status"] = "1";
                        return Json(new { error = false, message = "Budget saved successfully", Id = model.Id, Doctype = doctype });
                    }
                }
                else
                {

                    return Json(new { error = true, message = "failed to save Purchase" });
                }



            }
            catch (Exception ex)
            {

                return Json(new { error = true, message = ex.Message });
            }
        }



        [HttpGet]
        [AllowAnonymous]

        public JsonResult InactiveBudget(int id)
        {
            try
            {
                var model = _budgetMainRepository.Find(id);

                if (model != null)
                {
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _budgetMainRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _budgetMainRepository.Update(model, id);
                        return Json(new { success = "1", msg = "Restored Successfully." });
                    }

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." });
                throw ex;
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetBudget(int PurchaseId)
        {
            try
            {
                var purchasequery = _budgetMainRepository.All().Where(x => x.Id == PurchaseId);

                var purchase = purchasequery
                  .Include(x => x.BudgetSubs)
                  .Select(p => new
                  {
                      Id = p.Id,
                      p.ComId,
                      p.Name,
                      p.FiscalYearId,
                      p.Interval,
                      p.PreFillId,
                      BudgetSubs = p.BudgetSubs.Where(x => x.IsDelete == false).Select(x =>


                         new
                         {
                             BudgetId = x.BudgetId,
                             Id = x.Id,
                             x.AccId,
                             AccName = x.Acc_ChartOfAccount.AccName,
                             AccCode = x.Acc_ChartOfAccount.AccCode,
                             AccType = x.Acc_ChartOfAccount.AccType,
                             GroupHead = x.Acc_ChartOfAccount.vAccountGroupHead.AccName,
                         }).ToList()
                  }).FirstOrDefault();


                return Json(new { Success = 1, data = purchase, ex = "Data Load Successfully" });
            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }



        [AllowAnonymous]
        public JsonResult GetBudgetData(int BudgetId = 0, int FyId = 0)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                if (FyId > 0)
                {
                    var queryname = "procGetBudgetDataByFiscal";
                    var viewquery = $"Exec {queryname} '{ComId}', '{FyId}' ,'{BudgetId}'";
                    Console.WriteLine(viewquery);
                    SqlParameter[] parameters = new SqlParameter[3];
                    parameters[0] = new SqlParameter("@ComId", ComId);
                    parameters[1] = new SqlParameter("@FYId", FyId);
                    parameters[2] = new SqlParameter("@BudgetId", BudgetId);

                    var datasetabc = new System.Data.DataSet();
                    datasetabc = Helper.ExecProcMapDS(queryname, parameters);

                    return Json(new { data = datasetabc, ex = "" });
                }
                else
                {
                    var queryname = "ProcGetDataForBudget";
                    var viewquery = $"Exec {queryname} '{UserId}' ,'{ComId}' ,'{BudgetId}'";
                    Console.WriteLine(viewquery);
                    SqlParameter[] parameters = new SqlParameter[3];
                    parameters[0] = new SqlParameter("@UserId", UserId);
                    parameters[1] = new SqlParameter("@ComId", ComId);
                    parameters[2] = new SqlParameter("@BudgetId", BudgetId);

                    var datasetabc = new System.Data.DataSet();
                    datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                    return Json(new { data = datasetabc, ex = "" });
                }


            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public JsonResult GetBudgetVSActualReporData(int FyId = 0, int BudgetId = 0)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");
                var queryname = "RptProcGetBudgetVSActual";
                var viewquery = $"Exec {queryname} '{ComId}' ,'{FyId}','{BudgetId}'";
                Console.WriteLine(viewquery);
                SqlParameter[] parameters = new SqlParameter[3];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@FYId", FyId);
                parameters[2] = new SqlParameter("@BudgetId ", BudgetId);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS(queryname, parameters);
                return Json(new { data = datasetabc, ex = "" });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public ActionResult BudgetVSActualReport(int UserId, int ComId, DateTime dtFrom, DateTime dtTo, int CountryId, string criteria, int FyId = 0, int BudgetId = 0)
        {
            ViewBag.Criteria = criteria;
            ViewBag.dtFrom = dtFrom;
            ViewBag.dtTo = dtTo;
            ViewBag.FyId = FyId;
            ViewBag.BudgetId = BudgetId;
            ViewBag.FyName = _budgetMainRepository.All().Where(x => x.Id == BudgetId).Select(x => new { x.Acc_FiscalYears.FYName });
            return View();
        }

        #endregion




        #region Account and Store Settings All starts
        [AllowAnonymous]
        [HttpGet]
        public IActionResult AccountAndSettings(int? SettingsId)
        {
            ViewBag.Country = _countryRepository.GetAllForDropDown();

            ViewBag.BusinessType = _businessTypeRepository.GetActiveForDropDown();

            ViewBag.TaxForm = _taxFormRepository.GetActiveForDropDown();

            ViewBag.InvoiceReportStyle = _ReportStyleRepository.GetAllInvoiceReportForDropDown();
            ViewBag.PurchaseReportStyle = _ReportStyleRepository.GetAllPurchaseReportForDropDown();
            ViewBag.FiscalYearType = _fiscalYearTypeRepository.GetAllForDropDown();

            ViewBag.TimeZoneSettings = _timeZoneSettingsRepository.GetAllForDropDown();

            ViewBag.BarcodeReportStyle = _ReportStyleRepository.GetAllBarcodeReportForDropDown();
            ViewBag.VoucherNoCreatedType = _accVoucherCreatedTypeRepository.GetAllForDropDown();


            var ComId = HttpContext.Session.GetInt32("ComId");
            var UserId = HttpContext.Session.GetInt32("UserId");

            //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;
            var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;

            if (SettingsId != null && useraccount == "SuperAdmin")
            {
                ComId = SettingsId;
            }
            else if (SettingsId != null && useraccount == "Admin")
            {
                ComId = SettingsId;
            }


            var storesettings = _storeSettingRepository.All(false)
                .Include(x => x.TermsInfo)
                .Include(x => x.DocTypeList)
                .Include(x => x.FinancialYears)
                .Include(x => x.AccountingMethods)
                .Include(x => x.TaxRates)
                .Include(x => x.DateFormats)
                .Include(x => x.NumberFormats)
                .Include(x => x.SignOutDurations)
                .Include(x => x.Languages)
                .Include(x => x.BusinessType).Where(x => x.ComId == ComId).FirstOrDefault();
            ViewBag.Terms = new SelectList(_termRepository.GetAlltermsForDropDown(), "Id", "TermName", storesettings.TermsId ?? null);
            ViewBag.Doctypes = new SelectList(_docTypeRepository.GetAllDocTypeSalesForDropDown(), "Id", "DocType", storesettings.DocTypeId);


            ViewBag.FinacialYears = new SelectList(_variableRepository.GetAllVariableForDropDown("FinancialYear"), "Id", "VariableName", storesettings.FinancialYearId);
            ViewBag.AccountingMethod = new SelectList(_variableRepository.GetAllVariableForDropDown("Accounting Method"), "Id", "VariableName", storesettings.AccountingMethodId);
            ViewBag.TaxRate = new SelectList(_variableRepository.GetAllVariableForDropDown("Tax rate"), "Id", "VariableName", storesettings.TaxRateId);
            ViewBag.DateFormat = new SelectList(_variableRepository.GetAllVariableForDropDown("Language"), "Id", "VariableName", storesettings.DateFormatId);
            ViewBag.NumberFormat = new SelectList(_variableRepository.GetAllVariableForDropDown("Date format"), "Id", "VariableName", storesettings.NumberFormatId);
            ViewBag.SignoutDuration = new SelectList(_variableRepository.GetAllVariableForDropDown("Number format"), "Id", "VariableName", storesettings.SignOutDurationId);
            ViewBag.Languages = new SelectList(_variableRepository.GetAllVariableForDropDown("Signout duration"), "Id", "VariableName", storesettings.LanguageId);




            var companysettings = _companyRepository.All();


            if (storesettings != null)
            {
                if (storesettings.BusinessTypeId == 0)
                {
                    ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();
                }
                return View(storesettings);
            }
            else
            {
                var signinmodel = _companyRepository.Find(ComId.GetValueOrDefault());
                //var signinmodel = _companyRepository.All().Where(x=>x.Id == ComId).FirstOrDefault();

                storesettings.StoreName = signinmodel.CompanyName;
                storesettings.DecimalField = 2;

                storesettings.Phone = signinmodel.comPhone;
                storesettings.Email = signinmodel.comEmail;
                storesettings.Web = signinmodel.comWeb;
                storesettings.BusinessTypeId = signinmodel.BusinessTypeId;
                storesettings.SubscriptionTypeId = signinmodel.SubscriptionTypeId;

                storesettings.VoucherNoCreatedTypeId = null;
                storesettings.isMultiCurrency = true;
                storesettings.isMultiDebitCredit = true;
                storesettings.isVoucherDistributionEntry = false;
                storesettings.isChequeDetails = true;

                storesettings.isSMSService = false;
                storesettings.isEmailSerivce = false;
                storesettings.IsSignature = false;



                //storesettings.Currency = "BDT ";
                storesettings.CountryId = 18;

                storesettings.Address = "=N/A=";
                storesettings.Logo = "/Content/Storeimages/0.png";
                storesettings.ComId = ComId.GetValueOrDefault();

                //storesettings.Email = signinmodel.Email;

                _storeSettingRepository.Insert(storesettings);
            }


            return View(new StoreSettingModel());
        }




        [AllowAnonymous]
        [HttpPost]
        public IActionResult AccountAndSettings(StoreSettingModel model, IFormFile logoPostedFileBase)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var errors = ModelState.Where(x => x.Value.Errors.Any())
           .Select(x => new { x.Key, x.Value.Errors });


            if (!ModelState.IsValid) return View(model);

            if (logoPostedFileBase != null && logoPostedFileBase.Length > 0)
            {
                var filename = +model.Id + "_" + model.StoreName + "_" + logoPostedFileBase.FileName;
                var path = Path.Combine(
                 Directory.GetCurrentDirectory(), "wwwroot/Images",
                 filename);

                using (var stream = new FileStream(path, FileMode.Create))
                {
                    logoPostedFileBase.CopyTo(stream);
                }
                model.Logo = $"/Images/{filename}";
            }
            else
            {

                var settings = _storeSettingRepository.Find(model.Id);
                if (settings != null)
                    model.Logo = settings.Logo;
            }


            if (model.Id > 0)
            {
                CompanyModel companyinfo = _companyRepository.All().Where(x => x.Id == ComId).FirstOrDefault();


                companyinfo.PrimaryAddress = model.Address;
                companyinfo.BusinessTypeId = model.BusinessTypeId;
                companyinfo.CompanyName = model.StoreName;
                //companyinfo.DecimalField = model.DecimalField;

                companyinfo.comPhone = model.Phone;
                companyinfo.comEmail = model.Email;
                companyinfo.comWeb = model.Web;
                //companyinfo.CountryId = model.CountryId;


                //companyinfo.VoucherNoCreatedTypeId = model.VoucherNoCreatedTypeId;
                //companyinfo.isMultiCurrency = model.isMultiCurrency;
                //companyinfo.isMultiDebitCredit = model.isMultiDebitCredit;
                //companyinfo.isVoucherDistributionEntry = model.isVoucherDistributionEntry;
                //companyinfo.isChequeDetails = model.isChequeDetails;


                //companyinfo.isSMSService = model.isSMSService;
                //companyinfo.isEmailSerivce = model.isEmailSerivce;
                //companyinfo.IsSignature = model.IsSignature;

                _storeSettingRepository.Update(model, model.Id);
                _companyRepository.Update(companyinfo, model.ComId);


                HttpContext.Session.SetString("TaxPer", model != null ? model.TaxPer.ToString() : "0.00");
                HttpContext.Session.SetInt32("isTaxExcluded", model != null ? model.isTaxExcluded != false ? 1 : 0 : 0);


                //HttpContext.Session.SetString("isMultiDebitCredit", company.isMultiDebitCredit.ToString());
                //HttpContext.Session.SetString("isMultiCurrency", company.isMultiCurrency.ToString());
                //HttpContext.Session.SetString("isVoucherDistributionEntry", company.isVoucherDistributionEntry.ToString());
                //HttpContext.Session.SetString("isChequeDetails", company.isChequeDetails.ToString());

                HttpContext.Session.SetString("isMultiDebitCredit", model != null ? model.isMultiDebitCredit.ToString() : "false");
                HttpContext.Session.SetString("isMultiCurrency", model != null ? model.isMultiCurrency.ToString() : "false");
                HttpContext.Session.SetString("isVoucherDistributionEntry", model != null ? model.isVoucherDistributionEntry.ToString() : "false");
                HttpContext.Session.SetString("isChequeDetails", model != null ? model.isChequeDetails.ToString() : "false");

                HttpContext.Session.SetString("isSMSService", model != null ? model.isSMSService.ToString() : "false");
                HttpContext.Session.SetString("isEmailSerivce", model != null ? model.isEmailSerivce.ToString() : "false");
                HttpContext.Session.SetString("IsSignature", model != null ? model.IsSignature.ToString() : "false");


                HttpContext.Session.SetInt32("defaultcurrencyid", model.CountryId);



                HttpContext.Session.SetString("ShortCutKey", model.ShortCutKey != null ? model.ShortCutKey : "q"); // "y"
                HttpContext.Session.SetString("SearchType", model.isScanner == true ? "Scanner" : "Manual"); // "Scanner"
                HttpContext.Session.SetString("barcodeprefixforweightscale", model.BarcodePrefixForWeightScale != null ? model.BarcodePrefixForWeightScale : "99"); // "Scanner"  



                HttpContext.Session.SetInt32("BaseComId", model.BaseComId);

                //HttpContext.Session.SetInt32("BusinessTypeId", company.BusinessTypeId);
                //HttpContext.Session.SetString("BusinessType", _businessTypeRepository.Find(company.BusinessTypeId).BusinessTypeName);


                //HttpContext.Session.SetString("CompanyName", company.CompanyName != null ? company.CompanyName : "");
                //HttpContext.Session.SetString("PrimaryAddress", company.PrimaryAddress != null ? company.PrimaryAddress : "");
                //HttpContext.Session.SetString("SecoundaryAddress", company.SecoundaryAddress != null ? company.SecoundaryAddress : "");
                //HttpContext.Session.SetString("comPhone", company.comPhone != null ? company.comPhone : "");
                //HttpContext.Session.SetString("comWeb", company.comWeb != null ? company.comWeb : "");
                //HttpContext.Session.SetString("comEmail", company.comEmail != null ? company.comEmail : "");
                HttpContext.Session.SetString("CaptionOne", "CaptionOne");
                HttpContext.Session.SetString("CaptionTwo", "CaptionTwo");
                HttpContext.Session.SetString("PrintDate", DateTime.Now.Date.ToString("dd-MMM-yy"));
                HttpContext.Session.SetString("comImagePath", model != null ? model.Logo != null ? model.Logo : "" : "");

                HttpContext.Session.SetString("TaxPer", model != null ? model.TaxPer.ToString() : "0.00"); // fahad


                HttpContext.Session.SetInt32("isTaxExcluded", model != null ? model.isTaxExcluded != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("isFixedSalesValue", model != null ? model.IsFixedSalesValue != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("isMultiSelect", model != null ? model.isMultiSelect != false ? 1 : 0 : 0);

                HttpContext.Session.SetInt32("IsFirstLetterUpperCase", model != null ? model.IsFirstLetterUpperCase != false ? 1 : 0 : 0);


                HttpContext.Session.SetInt32("IsSerialSales", model != null ? model.IsSerialSales != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsIndDiscount", model != null ? model.IsIndDiscount != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsSalesDescription", model != null ? model.IsSalesDescription != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsVatLogin", model != null ? model.IsVatLogin != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("isMultiCurrency", model != null ? model.isMultiCurrency != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsTermsCondition", model != null ? model.IsTermsCondition != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsDefaultDisAmount", model != null ? model.IsDefaultDisAmount != false ? 1 : 0 : 0);


                HttpContext.Session.SetInt32("DecimalField", model != null ? model.DecimalField : 0);

                HttpContext.Session.SetInt32("IsFixedDiscountMainValue", model != null ? model.IsFixedDiscountMainValue != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsFixedDiscountRowValue", model != null ? model.IsFixedDiscountRowValue != false ? 1 : 0 : 0);
                HttpContext.Session.SetString("MaxDiscountMainValue", model != null ? model.MaxDiscountMainValue.ToString() : "0.00");
                HttpContext.Session.SetString("MaxDiscountPercentageMainValue", model != null ? model.MaxDiscountPercentageMainValue.ToString() : "0.00");
                HttpContext.Session.SetString("MaxDiscountRowValue", model != null ? model.MaxDiscountRowValue.ToString() : "0.00");


                HttpContext.Session.SetInt32("PrintProductName", model != null ? model.PrintProductName != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintProductCode", model != null ? model.PrintProductCode != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintProductDescription", model != null ? model.PrintProductDescription != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintBrandName", model != null ? model.PrintBrandName != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintModelName", model != null ? model.PrintModelName != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintSizeName", model != null ? model.PrintSizeName != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("VisibleSalesCommission", model != null ? model.VisibleSalesCommission != false ? 1 : 0 : 0);



                var storeinfo = _storeSettingRepository.All().Where(x => x.ComId == ComId)
                    .Include(x => x.SalesReportStyle)
                    .Include(x => x.PurchaseReportStyle)
                    .Include(x => x.BarcodeReportStyle)
                    .Include(x => x.TimeZones)
                    .Include(x => x.Currency)
                    .Include(x => x.TermsInfo)
                    .FirstOrDefault();

                HttpContext.Session.SetString("SalesReportStyle", storeinfo.SalesReportStyle != null ? storeinfo.SalesReportStyle.ReportStyleName : "Style1");
                HttpContext.Session.SetString("PurchaseReportStyle", storeinfo.PurchaseReportStyle != null ? storeinfo.PurchaseReportStyle.ReportStyleName : "Style1");
                HttpContext.Session.SetString("BarcodeReportStyle", storeinfo.BarcodeReportStyle != null ? storeinfo.BarcodeReportStyle.ReportStyleName : "Style1");

                HttpContext.Session.SetString("defaultcurrencyname", storeinfo.Currency.CurrencyShortName.ToString());
                HttpContext.Session.SetInt32("TimeZoneSettingsId", storeinfo != null ? storeinfo.TimeZoneSettingsId : 36);
                //HttpContext.Session.SetInt32("termsId", storeinfo.TermsId.GetValueOrDefault());
                //HttpContext.Session.SetString("TermName", storeinfo.TermsInfo.TermName);
                HttpContext.Session.SetString("TimeZoneSettingsName", storeinfo != null ? storeinfo.TimeZones.TimeZoneName : "");
                HttpContext.Session.SetString("TimeZoneSettingsNameJquery", storeinfo != null ? storeinfo.TimeZones.TimeZoneNameJquery : "");
                //ViewBag.Terms = new SelectList(_termRepository.GetAlltermsForDropDown(), "Id", "TermName", storeinfo.TermsId);

                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.StoreName.ToString());
            }
            else
            {
                var UserId = HttpContext.Session.GetInt32("UserId");

                //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;
                var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;

                //if (useraccount == "SuperAdmin")
                //{

                var BaseComId = HttpContext.Session.GetInt32("BaseComId");
                var previousinfo = _storeSettingRepository.All(false).Where(x => x.ComId == BaseComId.GetValueOrDefault()).FirstOrDefault();

                model.SubscriptionTypeId = previousinfo.SubscriptionTypeId;
                model.SalesReportStyleId = previousinfo.SalesReportStyleId;
                model.PurchaseReportStyleId = previousinfo.PurchaseReportStyleId;

                model.BarcodeReportStyleId = previousinfo.BarcodeReportStyleId;
                model.VoucherNoCreatedTypeId = previousinfo.VoucherNoCreatedTypeId;

                model.isChequeDetails = previousinfo.isChequeDetails;
                model.isMultiCurrency = previousinfo.isMultiCurrency;
                model.isMultiDebitCredit = previousinfo.isMultiDebitCredit;
                model.isVoucherDistributionEntry = previousinfo.isVoucherDistributionEntry;

                model.isSMSService = previousinfo.isSMSService;
                model.isEmailSerivce = previousinfo.isEmailSerivce;
                model.IsSignature = previousinfo.IsSignature;



                //model.Logo = previousinfo.Logo;



                CompanyModel companyinfo = new CompanyModel();

                companyinfo.PrimaryAddress = model.Address;
                companyinfo.BusinessTypeId = model.BusinessTypeId;
                companyinfo.CompanyName = model.StoreName;
                //companyinfo.DecimalField = model.DecimalField;

                companyinfo.comPhone = model.Phone;
                companyinfo.comEmail = model.Email;
                companyinfo.comWeb = model.Web;
                //companyinfo.CountryId = model.CountryId;
                companyinfo.SubscriptionTypeId = model.SubscriptionTypeId;



                //companyinfo.VoucherNoCreatedTypeId = model.VoucherNoCreatedTypeId;
                //companyinfo.isMultiCurrency = model.isMultiCurrency;
                //companyinfo.isMultiDebitCredit = model.isMultiDebitCredit;
                //companyinfo.isVoucherDistributionEntry = model.isVoucherDistributionEntry;
                //companyinfo.isChequeDetails = model.isChequeDetails;

                //companyinfo.isSMSService = model.isSMSService;
                //companyinfo.isEmailSerivce = model.isEmailSerivce;




                _companyRepository.Insert(companyinfo);
                HttpContext.Session.SetInt32("ComId", companyinfo.Id);

                model.ComId = companyinfo.Id;
                model.BaseComId = BaseComId.GetValueOrDefault();


                _storeSettingRepository.Insert(model);



                //var UserId = HttpContext.Session.GetInt32("UserId");
                var companypermission = new CompanyPermissionModel();
                companypermission.LuserId = UserId.GetValueOrDefault();
                companypermission.ComId = companyinfo.Id;

                _companyPermissionRepository.Insert(companypermission);





                var validitydays = _subscriptionTypeRepository.All().FirstOrDefault().ValidityDay;

                SubscriptionActivationModel subscriptionActivation = new SubscriptionActivationModel();
                subscriptionActivation.IsActive = true;
                subscriptionActivation.IsDelete = false;
                subscriptionActivation.LuserId = UserId.GetValueOrDefault();
                subscriptionActivation.Remarks = "Auto Entry by System";
                subscriptionActivation.SubscriptionTypeId = 1;
                subscriptionActivation.ActiveFromDate = DateTime.Now.Date;
                subscriptionActivation.ActiveToDate = DateTime.Now.Date.AddDays(validitydays);


                _SubscriptionActivationRepository.Insert(subscriptionActivation);





                //////Auto Unit Input by System 
                UnitModel Units = new UnitModel();
                Units.UnitName = "Pcs";
                Units.UnitShortName = "Pcs";
                Units.UnitNameBangla = "";
                _unitRepository.Insert(Units);


                var businesstypename = _businessTypeRepository.Find(model.BusinessTypeId).BusinessTypeName;
                if (businesstypename.ToLower().Contains("walton") || businesstypename.ToLower().Contains("marcel"))
                {
                    //////Auto Category Input by System 
                    CategoryModel categorydata = new CategoryModel();
                    categorydata.Name = "Electronics";
                    categorydata.Description = "Electronics";
                    _categoryRepository.Insert(categorydata);
                }
                else
                {
                    //////Auto Category Input by System 
                    CategoryModel categorydata = new CategoryModel();
                    categorydata.Name = "=N/A=";
                    categorydata.Description = "=N/A=";
                    _categoryRepository.Insert(categorydata);
                }



                CustomerModel customerdata = new CustomerModel();
                customerdata.Name = "Walk In Customer";
                customerdata.CustomerCurrencyId = model.CountryId;
                customerdata.Phone = "";
                customerdata.ComId = companyinfo.Id;
                _customerRepository.Insert(customerdata);


                SupplierModel supplierdata = new SupplierModel();
                supplierdata.SupplierName = "Cash Supplier";
                supplierdata.SupplierCurrencyId = model.CountryId;
                supplierdata.Phone = "";
                supplierdata.ComId = companyinfo.Id;
                _supplierRepository.Insert(supplierdata);


                WarehouseModel warehousedata = new WarehouseModel();
                warehousedata.WhName = "Main";
                warehousedata.WhShortName = "Main";
                warehousedata.WhType = "L";
                warehousedata.ComId = companyinfo.Id;
                _warehouseRepository.Insert(warehousedata);



                SqlParameter[] sqlParameter = new SqlParameter[2];
                sqlParameter[0] = new SqlParameter("@comId", companyinfo.Id);
                sqlParameter[1] = new SqlParameter("@TableName", "AccountHead");
                //sqlParameter[2] = new SqlParameter("@BrandName", "");

                Helper.ExecProc("prcAutoInsert", sqlParameter);




                ///fiscal year Creation
                var PrevYear = DateTime.Now.Year - 1;
                var fromdate = new DateTime(PrevYear, 1, 1);
                var todate = new DateTime(PrevYear, 12, 31);

                SqlParameter[] sqlParameterfy = new SqlParameter[4];
                sqlParameterfy[0] = new SqlParameter("@comid", ComId);
                sqlParameterfy[1] = new SqlParameter("@dtFrom", fromdate);
                sqlParameterfy[2] = new SqlParameter("@dtTo", todate);
                sqlParameterfy[3] = new SqlParameter("@UserId", UserId);
                Helper.ExecProc("Acc_prcCloseFiscalYearManual", sqlParameterfy);
                ///fiscal year Creation



                var CompanyUserList = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.LuserId == UserId).Select(x => new SelectListItem { Text = x.CompanyList.CompanyName, Value = x.ComId.ToString() }).ToList();
                //x.ComId == ComId && 
                //if (CompanyUserList.Count > 0)
                //{
                HttpContext.Session.SetObject("UserCompanys", CompanyUserList);





                //}


            }

            return RedirectToAction("AccountAndSettings");
        }






        [HttpPost]
        [AllowAnonymous]
        public IActionResult AccountAndSettingPost([FromBody] StoreSettingModel model, int CopyBill = 0)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                Console.WriteLine(errors);

                if (ModelState.IsValid)
                {
                    if (model.Id > 0)
                    {
                        _storeSettingRepository.Update(model, model.Id);
                        TempData["Message"] = "Data Update Successfully";
                        TempData["Status"] = "2";

                        return Json(new { error = false, message = "Data updated successfully", Id = model.Id });
                    }
                    else
                    {

                        _storeSettingRepository.Insert(model);


                        TempData["Message"] = "Data Save Successfully";
                        TempData["Status"] = "1";
                        return Json(new { error = false, message = "Data saved successfully", Id = model.Id });
                    }

                }
                else
                {

                    return Json(new { error = true, message = "failed to save Data" });
                }



            }
            catch (Exception ex)
            {

                return Json(new { error = true, message = ex.Message });
            }
        }














        #endregion

















        [AllowAnonymous]
        public List<SelectListItem> GetCurrencyDropdown()
        {
            var x = _countryRepository.GetCurrencyList().ToList();
            return x;
        }

        //previous ok code
        //[AllowAnonymous]
        //public List<SelectListItem> GetDocStatusDropdown()
        //{
        //    var x = _docStatusRepository.GetAllForDropDown().ToList();
        //    return x;
        //}


        //[AllowAnonymous]
        //public List<SelectListItem> GetTimeZoneDropdown()
        //{
        //    var x = ;
        //    return x;
        //}

        [AllowAnonymous]
        public List<SelectListItem> GetFiscalYearDropdown()
        {
            var x = _countryRepository.GetCurrencyList().ToList();
            return x;
        }

        [HttpPost]
        public IActionResult Settings(StoreSettingModel model, IFormFile logoPostedFileBase)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var errors = ModelState.Where(x => x.Value.Errors.Any())
           .Select(x => new { x.Key, x.Value.Errors });


            //if (!ModelState.IsValid) return View(model);

            if (logoPostedFileBase != null && logoPostedFileBase.Length > 0)
            {
                var filename = +model.Id + "_" + model.StoreName + "_" + logoPostedFileBase.FileName;
                var path = Path.Combine(
                 Directory.GetCurrentDirectory(), "wwwroot/Images",
                 filename);

                using (var stream = new FileStream(path, FileMode.Create))
                {
                    logoPostedFileBase.CopyTo(stream);
                }
                model.Logo = $"/Images/{filename}";
            }
            else
            {

                var settings = _storeSettingRepository.Find(model.Id);
                if (settings != null)
                    model.Logo = settings.Logo;
            }


            if (model.Id > 0)
            {
                CompanyModel companyinfo = _companyRepository.All().Where(x => x.Id == ComId).FirstOrDefault();


                companyinfo.PrimaryAddress = model.Address;
                companyinfo.BusinessTypeId = model.BusinessTypeId;
                companyinfo.CompanyName = model.StoreName;
                //companyinfo.DecimalField = model.DecimalField;

                companyinfo.comPhone = model.Phone;
                companyinfo.comEmail = model.Email;
                companyinfo.comWeb = model.Web;
                //companyinfo.CountryId = model.CountryId;


                //companyinfo.VoucherNoCreatedTypeId = model.VoucherNoCreatedTypeId;
                //companyinfo.isMultiCurrency = model.isMultiCurrency;
                //companyinfo.isMultiDebitCredit = model.isMultiDebitCredit;
                //companyinfo.isVoucherDistributionEntry = model.isVoucherDistributionEntry;
                //companyinfo.isChequeDetails = model.isChequeDetails;


                //companyinfo.isSMSService = model.isSMSService;
                //companyinfo.isEmailSerivce = model.isEmailSerivce;
                //companyinfo.IsSignature = model.IsSignature;




                _storeSettingRepository.Update(model, model.Id);
                _companyRepository.Update(companyinfo, model.ComId);


                HttpContext.Session.SetString("TaxPer", model != null ? model.TaxPer.ToString() : "0.00");
                HttpContext.Session.SetInt32("isTaxExcluded", model != null ? model.isTaxExcluded != false ? 1 : 0 : 0);


                //HttpContext.Session.SetString("isMultiDebitCredit", company.isMultiDebitCredit.ToString());
                //HttpContext.Session.SetString("isMultiCurrency", company.isMultiCurrency.ToString());
                //HttpContext.Session.SetString("isVoucherDistributionEntry", company.isVoucherDistributionEntry.ToString());
                //HttpContext.Session.SetString("isChequeDetails", company.isChequeDetails.ToString());

                HttpContext.Session.SetString("isMultiDebitCredit", model != null ? model.isMultiDebitCredit.ToString() : "true");
                HttpContext.Session.SetString("isMultiCurrency", model != null ? model.isMultiCurrency.ToString() : "false");
                HttpContext.Session.SetString("isVoucherDistributionEntry", model != null ? model.isVoucherDistributionEntry.ToString() : "false");
                HttpContext.Session.SetString("isChequeDetails", model != null ? model.isChequeDetails.ToString() : "false");

                HttpContext.Session.SetString("isSMSService", model != null ? model.isSMSService.ToString() : "false");
                HttpContext.Session.SetString("isEmailSerivce", model != null ? model.isEmailSerivce.ToString() : "false");
                HttpContext.Session.SetString("IsSignature", model != null ? model.IsSignature.ToString() : "false");


                HttpContext.Session.SetInt32("defaultcurrencyid", model.CountryId);



                HttpContext.Session.SetString("ShortCutKey", model.ShortCutKey != null ? model.ShortCutKey : "q"); // "y"
                HttpContext.Session.SetString("SearchType", model.isScanner == true ? "Scanner" : "Manual"); // "Scanner"
                HttpContext.Session.SetString("barcodeprefixforweightscale", model.BarcodePrefixForWeightScale != null ? model.BarcodePrefixForWeightScale : "99"); // "Scanner"  



                HttpContext.Session.SetInt32("BaseComId", model.BaseComId);

                //HttpContext.Session.SetInt32("BusinessTypeId", company.BusinessTypeId);
                //HttpContext.Session.SetString("BusinessType", _businessTypeRepository.Find(company.BusinessTypeId).BusinessTypeName);


                //HttpContext.Session.SetString("CompanyName", company.CompanyName != null ? company.CompanyName : "");
                //HttpContext.Session.SetString("PrimaryAddress", company.PrimaryAddress != null ? company.PrimaryAddress : "");
                //HttpContext.Session.SetString("SecoundaryAddress", company.SecoundaryAddress != null ? company.SecoundaryAddress : "");
                //HttpContext.Session.SetString("comPhone", company.comPhone != null ? company.comPhone : "");
                //HttpContext.Session.SetString("comWeb", company.comWeb != null ? company.comWeb : "");
                //HttpContext.Session.SetString("comEmail", company.comEmail != null ? company.comEmail : "");
                HttpContext.Session.SetString("CaptionOne", "CaptionOne");
                HttpContext.Session.SetString("CaptionTwo", "CaptionTwo");
                HttpContext.Session.SetString("PrintDate", DateTime.Now.Date.ToString("dd-MMM-yy"));
                HttpContext.Session.SetString("comImagePath", model != null ? model.Logo != null ? model.Logo : "" : "");

                HttpContext.Session.SetString("TaxPer", model != null ? model.TaxPer.ToString() : "0.00"); // fahad


                HttpContext.Session.SetInt32("isTaxExcluded", model != null ? model.isTaxExcluded != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("isFixedSalesValue", model != null ? model.IsFixedSalesValue != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("isMultiSelect", model != null ? model.isMultiSelect != false ? 1 : 0 : 0);

                HttpContext.Session.SetInt32("IsFirstLetterUpperCase", model != null ? model.IsFirstLetterUpperCase != false ? 1 : 0 : 0);


                HttpContext.Session.SetInt32("IsSerialSales", model != null ? model.IsSerialSales != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsIndDiscount", model != null ? model.IsIndDiscount != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsSalesDescription", model != null ? model.IsSalesDescription != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsVatLogin", model != null ? model.IsVatLogin != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("isMultiCurrency", model != null ? model.isMultiCurrency != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsTermsCondition", model != null ? model.IsTermsCondition != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsDefaultDisAmount", model != null ? model.IsDefaultDisAmount != false ? 1 : 0 : 0);


                HttpContext.Session.SetInt32("DecimalField", model != null ? model.DecimalField : 0);

                HttpContext.Session.SetInt32("IsFixedDiscountMainValue", model != null ? model.IsFixedDiscountMainValue != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("IsFixedDiscountRowValue", model != null ? model.IsFixedDiscountRowValue != false ? 1 : 0 : 0);
                HttpContext.Session.SetString("MaxDiscountMainValue", model != null ? model.MaxDiscountMainValue.ToString() : "0.00");
                HttpContext.Session.SetString("MaxDiscountPercentageMainValue", model != null ? model.MaxDiscountPercentageMainValue.ToString() : "0.00");
                HttpContext.Session.SetString("MaxDiscountRowValue", model != null ? model.MaxDiscountRowValue.ToString() : "0.00");


                HttpContext.Session.SetInt32("PrintProductName", model != null ? model.PrintProductName != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintProductCode", model != null ? model.PrintProductCode != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintProductDescription", model != null ? model.PrintProductDescription != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintBrandName", model != null ? model.PrintBrandName != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintModelName", model != null ? model.PrintModelName != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("PrintSizeName", model != null ? model.PrintSizeName != false ? 1 : 0 : 0);
                HttpContext.Session.SetInt32("VisibleSalesCommission", model != null ? model.VisibleSalesCommission != false ? 1 : 0 : 0);



                var storeinfo = _storeSettingRepository.All().Where(x => x.ComId == ComId)
                    .Include(x => x.SalesReportStyle)
                    .Include(x => x.PurchaseReportStyle)
                    .Include(x => x.BarcodeReportStyle)
                    .Include(x => x.TimeZones)
                    .Include(x => x.Currency)
                    .FirstOrDefault();

                HttpContext.Session.SetString("SalesReportStyle", storeinfo.SalesReportStyle != null ? storeinfo.SalesReportStyle.ReportStyleName : "Style1");
                HttpContext.Session.SetString("PurchaseReportStyle", storeinfo.PurchaseReportStyle != null ? storeinfo.PurchaseReportStyle.ReportStyleName : "Style1");
                HttpContext.Session.SetString("BarcodeReportStyle", storeinfo.BarcodeReportStyle != null ? storeinfo.BarcodeReportStyle.ReportStyleName : "Style1");

                HttpContext.Session.SetString("defaultcurrencyname", storeinfo.Currency.CurrencyShortName.ToString());
                HttpContext.Session.SetInt32("TimeZoneSettingsId", storeinfo != null ? storeinfo.TimeZoneSettingsId : 36);
                HttpContext.Session.SetString("TimeZoneSettingsName", storeinfo != null ? storeinfo.TimeZones.TimeZoneName : "");
                HttpContext.Session.SetString("TimeZoneSettingsNameJquery", storeinfo != null ? storeinfo.TimeZones.TimeZoneNameJquery : "");


                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.StoreName.ToString());
            }
            else
            {
                var UserId = HttpContext.Session.GetInt32("UserId");

                //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;
                var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;

                //if (useraccount == "SuperAdmin")
                //{

                var BaseComId = HttpContext.Session.GetInt32("BaseComId");
                var previousinfo = _storeSettingRepository.All(false).Where(x => x.ComId == BaseComId.GetValueOrDefault()).FirstOrDefault();

                model.SubscriptionTypeId = previousinfo.SubscriptionTypeId;
                model.SalesReportStyleId = previousinfo.SalesReportStyleId;
                model.PurchaseReportStyleId = previousinfo.PurchaseReportStyleId;

                model.BarcodeReportStyleId = previousinfo.BarcodeReportStyleId;
                model.VoucherNoCreatedTypeId = previousinfo.VoucherNoCreatedTypeId;

                model.isChequeDetails = previousinfo.isChequeDetails;
                model.isMultiCurrency = previousinfo.isMultiCurrency;
                model.isMultiDebitCredit = previousinfo.isMultiDebitCredit;
                model.isVoucherDistributionEntry = previousinfo.isVoucherDistributionEntry;

                model.isSMSService = previousinfo.isSMSService;
                model.isEmailSerivce = previousinfo.isEmailSerivce;
                model.IsSignature = previousinfo.IsSignature;



                //model.Logo = previousinfo.Logo;



                CompanyModel companyinfo = new CompanyModel();

                companyinfo.PrimaryAddress = model.Address;
                companyinfo.BusinessTypeId = model.BusinessTypeId;
                companyinfo.CompanyName = model.StoreName;
                //companyinfo.DecimalField = model.DecimalField;

                companyinfo.comPhone = model.Phone;
                companyinfo.comEmail = model.Email;
                companyinfo.comWeb = model.Web;
                //companyinfo.CountryId = model.CountryId;
                companyinfo.SubscriptionTypeId = model.SubscriptionTypeId;



                //companyinfo.VoucherNoCreatedTypeId = model.VoucherNoCreatedTypeId;
                //companyinfo.isMultiCurrency = model.isMultiCurrency;
                //companyinfo.isMultiDebitCredit = model.isMultiDebitCredit;
                //companyinfo.isVoucherDistributionEntry = model.isVoucherDistributionEntry;
                //companyinfo.isChequeDetails = model.isChequeDetails;

                //companyinfo.isSMSService = model.isSMSService;
                //companyinfo.isEmailSerivce = model.isEmailSerivce;




                _companyRepository.Insert(companyinfo);
                HttpContext.Session.SetInt32("ComId", companyinfo.Id);

                model.ComId = companyinfo.Id;
                model.BaseComId = BaseComId.GetValueOrDefault();


                _storeSettingRepository.Insert(model);



                //var UserId = HttpContext.Session.GetInt32("UserId");
                var companypermission = new CompanyPermissionModel();
                companypermission.LuserId = UserId.GetValueOrDefault();
                companypermission.ComId = companyinfo.Id;

                _companyPermissionRepository.Insert(companypermission);





                var validitydays = _subscriptionTypeRepository.All().FirstOrDefault().ValidityDay;

                SubscriptionActivationModel subscriptionActivation = new SubscriptionActivationModel();
                subscriptionActivation.IsActive = true;
                subscriptionActivation.IsDelete = false;
                subscriptionActivation.LuserId = UserId.GetValueOrDefault();
                subscriptionActivation.Remarks = "Auto Entry by System";
                subscriptionActivation.SubscriptionTypeId = 1;
                subscriptionActivation.ActiveFromDate = DateTime.Now.Date;
                subscriptionActivation.ActiveToDate = DateTime.Now.Date.AddDays(validitydays);


                _SubscriptionActivationRepository.Insert(subscriptionActivation);





                //////Auto Unit Input by System 
                UnitModel Units = new UnitModel();
                Units.UnitName = "Pcs";
                Units.UnitShortName = "Pcs";
                Units.UnitNameBangla = "";
                _unitRepository.Insert(Units);


                var businesstypename = _businessTypeRepository.Find(model.BusinessTypeId).BusinessTypeName;
                if (businesstypename.ToLower().Contains("walton") || businesstypename.ToLower().Contains("marcel"))
                {
                    //////Auto Category Input by System 
                    CategoryModel categorydata = new CategoryModel();
                    categorydata.Name = "Electronics";
                    categorydata.Description = "Electronics";
                    _categoryRepository.Insert(categorydata);
                }
                else
                {
                    //////Auto Category Input by System 
                    CategoryModel categorydata = new CategoryModel();
                    categorydata.Name = "=N/A=";
                    categorydata.Description = "=N/A=";
                    _categoryRepository.Insert(categorydata);
                }



                CustomerModel customerdata = new CustomerModel();
                customerdata.Name = "Walk In Customer";
                customerdata.CustomerCurrencyId = model.CountryId;
                customerdata.Phone = "";
                customerdata.ComId = companyinfo.Id;
                _customerRepository.Insert(customerdata);


                SupplierModel supplierdata = new SupplierModel();
                supplierdata.SupplierName = "Cash Supplier";
                supplierdata.SupplierCurrencyId = model.CountryId;
                supplierdata.Phone = "";
                supplierdata.ComId = companyinfo.Id;
                _supplierRepository.Insert(supplierdata);


                WarehouseModel warehousedata = new WarehouseModel();
                warehousedata.WhName = "Main";
                warehousedata.WhShortName = "Main";
                warehousedata.WhType = "L";
                warehousedata.ComId = companyinfo.Id;
                _warehouseRepository.Insert(warehousedata);



                SqlParameter[] sqlParameter = new SqlParameter[2];
                sqlParameter[0] = new SqlParameter("@comId", companyinfo.Id);
                sqlParameter[1] = new SqlParameter("@TableName", "AccountHead");
                //sqlParameter[2] = new SqlParameter("@BrandName", "");

                Helper.ExecProc("prcAutoInsert", sqlParameter);




                ///fiscal year Creation
                var PrevYear = DateTime.Now.Year - 1;
                var fromdate = new DateTime(PrevYear, 1, 1);
                var todate = new DateTime(PrevYear, 12, 31);

                SqlParameter[] sqlParameterfy = new SqlParameter[4];
                sqlParameterfy[0] = new SqlParameter("@comid", ComId);
                sqlParameterfy[1] = new SqlParameter("@dtFrom", fromdate);
                sqlParameterfy[2] = new SqlParameter("@dtTo", todate);
                sqlParameterfy[3] = new SqlParameter("@UserId", UserId);
                Helper.ExecProc("Acc_prcCloseFiscalYearManual", sqlParameterfy);
                ///fiscal year Creation



                var CompanyUserList = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.LuserId == UserId).Select(x => new SelectListItem { Text = x.CompanyList.CompanyName, Value = x.ComId.ToString() }).ToList();
                //x.ComId == ComId && 
                //if (CompanyUserList.Count > 0)
                //{
                HttpContext.Session.SetObject("UserCompanys", CompanyUserList);





                //}


            }

            return RedirectToAction("Settings");
        }
        #endregion

        #region json




        [AllowAnonymous]
        public JsonResult ProductSearch(string query)
        {
            //var UserId = HttpContext.Session.GetInt32("UserId");
            //var ComId = HttpContext.Session.GetInt32("ComId");

            ////|| (x.BrandName.ToLower().Contains(query.ToLower()))  need to check by fahad
            var abc = _productRepository.All().Include(x => x.Category)
                .Where(x => (x.Name.ToLower().Contains(query.ToLower())) || (x.Description.ToLower().Contains(query.ToLower())) || (x.Code.ToLower().Contains(query.ToLower())) || (x.ModelName.ToLower().Contains(query.ToLower())) || (x.SizeName.ToLower().Contains(query.ToLower())) || (x.ColorName.ToLower().Contains(query.ToLower())) || (x.Category.Name.ToLower().Contains(query.ToLower()))).ToList()
                        .Select(p => new
                        {
                            Id = p.Id,
                            Name = p.Name,
                            SizeName = p.SizeName ?? "",
                            //BrandName = p.BrandName ?? "",
                            BrandName = p.Brand != null ? p.Brand.BrandName : "",
                            //BrandName = p.BrandId,

                            ColorName = p.ColorName ?? "",
                            ModelName = p.ModelName ?? "",
                            Category = p.Category,
                            Code = p.Code,
                            Description = p.Description ?? "",
                            Price = p.Price,
                            CostPrice = p.CostPrice


                        }).Take(10);

            return Json(abc);
        }



        [AllowAnonymous]
        public JsonResult CustomerSearchByPhoneNo(string query)
        {
            try
            {
                return Json(_saleRepository.All().Where(x => (x.PhoneNo.ToLower().Contains(query.ToLower()) || (x.CustomerName.ToLower().Contains(query.ToLower()))))
                      .GroupBy(x => new { x.PhoneNo, x.CustomerName, x.PrimaryAddress })
                      .Select(g => new { PhoneNo = g.Key.PhoneNo == null ? "" : g.Key.PhoneNo, CustomerName = g.Key.CustomerName == null ? "" : g.Key.CustomerName, PrimaryAddress = g.Key.PrimaryAddress == null ? "" : g.Key.PrimaryAddress }).ToList()
                      .Take(10));

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult SupplierSearchByPhoneNo(string query)
        {
            return Json(_purchaseRepository.All().Where(x => (x.PhoneNo.ToLower().Contains(query.ToLower()) || (x.SupplierName.ToLower().Contains(query.ToLower()))))
                  .GroupBy(x => new { x.PhoneNo, x.SupplierName, x.PrimaryAddress })
                  .Select(g => new { PhoneNo = g.Key.PhoneNo == null ? "" : g.Key.PhoneNo, SupplierName = g.Key.SupplierName == null ? "" : g.Key.SupplierName, PrimaryAddress = g.Key.PrimaryAddress == null ? "" : g.Key.PrimaryAddress }).ToList()
                  .Take(10));
        }



        [AllowAnonymous]
        public JsonResult SalesSearchByInvoiceNo(string query)
        {
            return Json(_saleRepository.All().Where(x => (x.SaleCode.ToLower().Contains(query.ToLower()) || (x.CustomerName.ToLower().Contains(query.ToLower())) || (x.PhoneNo.ToLower().Contains(query.ToLower())))).Where(x => x.isPosted == true)
                  .Select(g => new
                  {
                      SaleCode = g.SaleCode,
                      CustomerName = g.CustomerName == null ? g.CustomerModel.Name : g.CustomerName,
                      PrimaryAddress = g.PrimaryAddress == null ? "" : g.PrimaryAddress,
                      PhoneNo = g.PhoneNo == null ? "" : g.PhoneNo,
                      SaleId = g.Id,
                      CustomerId = g.CustomerId
                  }).ToList().Take(10));
        }


        [AllowAnonymous]
        public JsonResult PurchaseSearchByInvoiceNo(string query)
        {
            return Json(_purchaseRepository.All().Where(x => (x.PurchaseCode.ToLower().Contains(query.ToLower()) || (x.SupplierName.ToLower().Contains(query.ToLower())) || (x.PhoneNo.ToLower().Contains(query.ToLower())))).Where(x => x.isPosted == true)
                  .Select(g => new
                  {
                      PurchaseCode = g.PurchaseCode,
                      SupplierName = g.SupplierName == null ? g.SupplierModel.SupplierName : g.SupplierName,
                      PrimaryAddress = g.PrimaryAddress == null ? "" : g.PrimaryAddress,
                      PhoneNo = g.PhoneNo == null ? "" : g.PhoneNo,
                      PurchaseId = g.Id,
                      SupplierId = g.SupplierId
                  }).ToList().Take(10));
        }

        [AllowAnonymous]
        public JsonResult ProductSearchAvgCostingTest(string query, int WarehouseId)
        {
            //var UserId = HttpContext.Session.GetInt32("UserId");
            //var ComId = HttpContext.Session.GetInt32("ComId");
            //|| (x.BrandName.ToLower().Contains(query.ToLower())) // need to add by fahad
            return Json(
                _productRepository.All().Include(x => x.Category).Include(x => x.CostCalculated)
                .Where(x => (x.Name.ToLower().Contains(query.ToLower())) || (x.Description.ToLower().Contains(query.ToLower())) || (x.Code.ToLower().Contains(query.ToLower())) || (x.ModelName.ToLower().Contains(query.ToLower())) || (x.SizeName.ToLower().Contains(query.ToLower())) || (x.ColorName.ToLower().Contains(query.ToLower())) || (x.Category.Name.ToLower().Contains(query.ToLower()))).ToList()
                //.Where(x=>x.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x=>x.Id))
                .Select(p => new
                {
                    Id = p.Id,
                    Name = p.Name,
                    SizeName = p.SizeName ?? "",
                    //BrandName = p.BrandName ?? "",
                    BrandName = p.Brand != null ? p.Brand.BrandName : "",
                    //BrandName = p.Brand ? p.BrandName : "",

                    ColorName = p.ColorName ?? "",
                    Category = p.Category,
                    Code = p.Code,
                    Description = p.Description ?? "",
                    Price = p.Price,
                    WholeSalePrice = p.WholeSalePrice > 0 ? p.WholeSalePrice : p.Price,
                    PCTN = p.PCTN,
                    CommissionAmount = p.CommissionAmount,
                    CommissionPer = p.CommissionPer,

                    ProductDiscountAmount = p.ProductDiscountAmount,
                    ProductDiscountPer = p.ProductDiscountPer,

                    //CommissionAmount = p.CommissionPer > 0 ? (p.Price* p.CommissionPer)/100 : p.CommissionAmount ,
                    CostPrice = p.CostCalculated.Where(x => x.WarehouseId == WarehouseId) != null ? p.CostPrice : p.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x => x.Id).FirstOrDefault().CalculatedPrice
                    //CostPrice = p.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x => x.Id).FirstOrDefault().CalculatedPrice == null ? "a" : "b" 
                })
                .Take(10));
        }





        [AllowAnonymous]
        public JsonResult ProductSearchAvgCosting(string query, int WarehouseId)
        {

            var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
            if (warehouselist.Count() == 0)
            {
                warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            }

            List<int?> permitwarehouselist = new List<int?>();

            foreach (var item in warehouselist)
            {
                permitwarehouselist.Add(int.Parse(item.Value.ToString()));
            }


            //var UserId = HttpContext.Session.GetInt32("UserId");
            //var ComId = HttpContext.Session.GetInt32("ComId");

            /// || (x.BrandName.ToLower().Contains(query.ToLower()))  need to check by fahad
            var products = _productRepository.All().Include(x => x.Category).Include(x => x.CostCalculated)
            .Where(x => (x.Name.ToLower().Contains(query.ToLower())) || (x.Description.ToLower().Contains(query.ToLower())) || (x.Code.ToLower().Contains(query.ToLower())) || (x.ModelName.ToLower().Contains(query.ToLower())) || (x.SizeName.ToLower().Contains(query.ToLower())) || (x.ColorName.ToLower().Contains(query.ToLower())) || (x.Category.Name.ToLower().Contains(query.ToLower()))).Take(10);


            var querylist = (from p in products

                                 //let costcallist = p.CostCalculated
                             let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))

                             .GroupBy(st => new { st.WarehouseId, st.ProductId })
                             .Select(grouping => grouping.Max(row => row.Id))
                             .ToArray()

                             let WarehouseQty =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new WarehouseResult
                             {
                                 CostCalculatedId = x.Id,
                                 //WarehouseId = x.WarehouseId, 
                                 WhShortName = x.Warehouse.WhShortName,
                                 CurrentStock = x.CurrQty + x.PrevQty,
                                 AverageCosting = x.CalculatedPrice,
                                 CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                                 SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))
                             //.Where(x => x.CostCalculatedId == 86)
                             .ToList()
                             ?? null


                             let CurrentStockCalc =
                             //p.CostCalculated != null ?
                             p.CostCalculated.OrderByDescending(x => x.Id)
                             .Select(x => new
                             {
                                 CostCalculatedId = x.Id,
                                 CurrentStock = x.CurrQty + x.PrevQty,

                             })
                             .Where(x => costcallist.Contains(x.CostCalculatedId))
                             .Sum(x => x.CurrentStock)

                             select new
                             {
                                 Id = p.Id,
                                 Name = p.Name,
                                 SizeName = p.SizeName ?? "",
                                 BrandName = p.Brand != null ? p.Brand.BrandName : "",
                                 ColorName = p.ColorName ?? "",
                                 Category = p.Category,
                                 Code = p.Code,
                                 Description = p.Description ?? "",
                                 Price = p.Price,
                                 WholeSalePrice = p.WholeSalePrice > 0 ? p.WholeSalePrice : p.Price,
                                 PCTN = p.PCTN,

                                 CommissionAmount = p.CommissionAmount,
                                 CommissionPer = p.CommissionPer,


                                 ProductDiscountAmount = p.ProductDiscountAmount,
                                 ProductDiscountPer = p.ProductDiscountPer,


                                 CostPrice = p.CostCalculated.Where(x => x.WarehouseId == WarehouseId) != null ? p.CostPrice : p.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x => x.Id).FirstOrDefault().CalculatedPrice,

                                 WarehouseList = WarehouseQty,
                                 CurrentStock = CurrentStockCalc,
                                 ImagePath = p.ImagePath

                             });


            return Json(querylist);
        }

        [AllowAnonymous]
        public JsonResult ProductSearchByScan(string query, int WarehouseId)
        {
            //var UserId = HttpContext.Session.GetInt32("UserId");
            //var ComId = HttpContext.Session.GetInt32("ComId");

            //return Json(
            //    _productRepository.All().Include(x => x.Category).Include(x => x.CostCalculated)
            //    .Where(x => ((x.Name.ToLower().Contains(query.ToLower())) || (x.SizeName.ToLower().Contains(query.ToLower())) || (x.Category.Name.ToLower().Contains(query.ToLower())) || (x.Code.ToLower() == query.ToLower()))).ToList()
            //    //.Where(x=>x.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x=>x.Id))
            //    .Select(p => new
            //    {
            //        Id = p.Id,
            //        Name = p.Name,
            //        SizeName = p.SizeName ?? "",
            //        BrandName = p.BrandName ?? "",
            //        ColorName = p.ColorName ?? "",
            //        Category = p.Category,
            //        Code = p.Code,
            //        Description = p.Description ?? "",
            //        Price = p.Price,
            //        WholeSalePrice = p.WholeSalePrice > 0 ? p.WholeSalePrice : p.Price,
            //        PCTN = p.PCTN,
            //        CommissionAmount = p.CommissionAmount,
            //        CommissionPer = p.CommissionPer,
            //        //CommissionAmount = p.CommissionPer > 0 ? (p.Price* p.CommissionPer)/100 : p.CommissionAmount ,
            //        CostPrice = p.CostCalculated.Where(x => x.WarehouseId == WarehouseId) != null ? p.CostPrice : p.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x => x.Id).FirstOrDefault().CalculatedPrice
            //        //CostPrice = p.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x => x.Id).FirstOrDefault().CalculatedPrice == null ? "a" : "b" 
            //    })
            //    .Take(10));



            ///warehouse data perfect

            //var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown();
            //if (warehouselist.Count() == 0)
            //{
            //    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            //}

            //List<int?> permitwarehouselist = new List<int?>();

            //foreach (var item in warehouselist)
            //{
            //    permitwarehouselist.Add(int.Parse(item.Value.ToString()));
            //}



            var products = _productRepository.All().Include(x => x.Category).Include(x => x.CostCalculated)
            .Where(x => ((x.Name.ToLower().Contains(query.ToLower())) || (x.SizeName.ToLower().Contains(query.ToLower())) || (x.ColorName.ToLower().Contains(query.ToLower())) || (x.Category.Name.ToLower().Contains(query.ToLower())) || (x.Code.ToLower() == query.ToLower()))).Take(10);


            var querylist = (from p in products

                                 //   //let costcallist = p.CostCalculated

                                 //    let costcallist = p.CostCalculated.Where(x => permitwarehouselist.Contains(x.WarehouseId))
                                 //.GroupBy(st => new { st.WarehouseId, st.ProductId })
                                 //    .Select(grouping => grouping.Max(row => row.Id))
                                 //    .ToArray()

                                 //let WarehouseQty =
                                 ////p.CostCalculated != null ?
                                 //p.CostCalculated.OrderByDescending(x => x.Id)
                                 //.Select(x => new WarehouseResult
                                 //{
                                 //    CostCalculatedId = x.Id,
                                 //    //WarehouseId = x.WarehouseId, 
                                 //    WhShortName = x.Warehouse.WhShortName,
                                 //    CurrentStock = x.CurrQty + x.PrevQty,
                                 //    AverageCosting = x.CalculatedPrice,
                                 //    CostingValue = (x.CalculatedPrice) * (x.CurrQty + x.PrevQty),
                                 //    SalesValue = (double)p.Price * (x.CurrQty + x.PrevQty)
                                 //})
                                 //.Where(x => costcallist.Contains(x.CostCalculatedId))
                                 ////.Where(x => x.CostCalculatedId == 86)
                                 //.ToList()
                                 //?? null


                                 //let CurrentStockCalc =
                                 ////p.CostCalculated != null ?
                                 //p.CostCalculated.OrderByDescending(x => x.Id)
                                 //.Select(x => new
                                 //{
                                 //    CostCalculatedId = x.Id,
                                 //    CurrentStock = x.CurrQty + x.PrevQty,

                                 //})
                                 //.Where(x => costcallist.Contains(x.CostCalculatedId))
                                 //.Sum(x => x.CurrentStock)

                             select new
                             {
                                 Id = p.Id,
                                 Name = p.Name,
                                 SizeName = p.SizeName ?? "",
                                 BrandName = p.Brand != null ? p.Brand.BrandName : "",
                                 ColorName = p.ColorName ?? "",
                                 Category = p.Category,
                                 Code = p.Code,
                                 Description = p.Description ?? "",
                                 Price = p.Price,
                                 WholeSalePrice = p.WholeSalePrice > 0 ? p.WholeSalePrice : p.Price,
                                 PCTN = p.PCTN,
                                 CommissionAmount = p.CommissionAmount,
                                 CommissionPer = p.CommissionPer,

                                 ProductDiscountAmount = p.ProductDiscountAmount,
                                 ProductDiscountPer = p.ProductDiscountPer,


                                 CostPrice = p.CostCalculated.Where(x => x.WarehouseId == WarehouseId) != null ? p.CostPrice : p.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x => x.Id).FirstOrDefault().CalculatedPrice,

                                 WarehouseList = new WarehouseResult(),//WarehouseQty,
                                 //CurrentStock = CurrentStockCalc,
                                 ImagePath = p.ImagePath

                             });


            return Json(querylist);









        }


        [AllowAnonymous]
        public JsonResult GlobalSearch(string query)
        {

            var FromDate = DateTime.Now.Date;
            var ToDate = DateTime.Now.Date;

            var ComId = HttpContext.Session.GetInt32("ComId");
            var RoleName = HttpContext.Session.GetString("UserRole");
            var UserId = HttpContext.Session.GetInt32("UserId");

            var testquery = $"Exec prcGlobalSearch '{ComId}','{RoleName}','{query}','','','{UserId}' ,'{1}'";
            var datasetabc = new System.Data.DataSet();
            datasetabc = Helper.ExecProcMapDS(testquery);
            var monthlysales = DataTableConverter<GlobalSearchModel>.ConvertDataTableToObject(datasetabc.Tables[0]);
            return Json(monthlysales);

        }


        public class GlobalSearchModel
        {
            public string? SearchText { get; set; }
            public string? EntryDate { get; set; }
            public string? Figure { get; set; }
            public string? ClickableLink { get; set; }
            public string? Controller { get; set; }
            public string? Action { get; set; }

            public string? IdValue { get; set; }

        }

        //[AllowAnonymous]
        //public JsonResult ProductSearch(string query)
        //{
        //    //var UserId = HttpContext.Session.GetInt32("UserId");
        //    //var ComId = HttpContext.Session.GetInt32("ComId");

        //    return Json(
        //        _productRepository.All().Include(x => x.Category).Include(x => x.CostCalculated)
        //        .Where(x => ((x.Name.ToLower().Contains(query.ToLower())) || (x.SizeName.ToLower().Contains(query.ToLower())) || (x.Category.Name.ToLower().Contains(query.ToLower())) || (x.Code.ToLower() == query.ToLower()))).ToList()
        //        //.Where(x=>x.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x=>x.Id))
        //        .Select(p => new
        //        {
        //            Id = p.Id,
        //            Name = p.Name,
        //            SizeName = p.SizeName ?? "",
        //            BrandName = p.BrandName ?? "",
        //            ColorName = p.ColorName ?? "",
        //            Category = p.Category,
        //            Code = p.Code,
        //            Description = p.Description ?? "",
        //            Price = p.Price,
        //            WholeSalePrice = p.WholeSalePrice > 0 ? p.WholeSalePrice : p.Price,
        //            PCTN = p.PCTN,
        //            CommissionAmount = p.CommissionAmount,
        //            CommissionPer = p.CommissionPer,
        //            //CommissionAmount = p.CommissionPer > 0 ? (p.Price* p.CommissionPer)/100 : p.CommissionAmount ,
        //            CostPrice = p.CostPrice
        //            //CostPrice = p.CostCalculated.Where(x => x.WarehouseId == WarehouseId).OrderByDescending(x => x.Id).FirstOrDefault().CalculatedPrice == null ? "a" : "b" 
        //        })
        //        .Take(10));
        //}


        [AllowAnonymous]
        public JsonResult ProductsBatchSerial(string query, int ProductId = 0, int WarehouseId = 0)
        {
            //var UserId = HttpContext.Session.GetInt32("UserId");
            //var ComId = HttpContext.Session.GetInt32("ComId");

            //return Json(_purchaseBatchItemsRepository.All().Where(x => (x.BatchSerialNo.ToLower().Contains(query.ToLower())) && (x.ProductId == ProductId )).Take(10));
            return Json(_purchaseBatchItemsRepository.All().Include(x => x.PurchaseItems).Where(p => (p.BatchSerialNo.ToLower().Contains(query.ToLower())) && (p.ProductId == ProductId && p.PurchaseItems.WarehouseId == WarehouseId) && (p.IsUsed == false) && (p.IsReturn == false))
                 //Select new { ID = p.Id, BatchSerialNo = p.BatchSerialNo })
                 //.Select(p => new { Id = p.Id, BatchSerialNo = p.BatchSerialNo })
                 .Select(p => new { id = p.Id, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price " + p.PurchaseItems.Price, title = p.PurchaseItems.Price })
                //.Select(p => p.BatchSerialNo)
                .Take(10));
        }

        [AllowAnonymous]
        public JsonResult ProductsBatchSerialForSalesReturn(string query, int ProductId = 0, int WarehouseId = 0)
        {
            return Json(_salesBatchItemsRepository.All().Include(x => x.PurchaseBatchItems).Where(p => (p.PurchaseBatchItems.BatchSerialNo.ToLower().Contains(query.ToLower())) && (p.PurchaseBatchItems.ProductId == ProductId && p.PurchaseBatchItems.PurchaseItems.WarehouseId == WarehouseId) && (p.IsUsed == false))
                 .Select(p => new { id = p.Id, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price " + p.PurchaseBatchItems.PurchaseItems.Price, title = p.PurchaseBatchItems.PurchaseItems.Price })
                .Take(10));
        }

        [AllowAnonymous]
        public JsonResult ProductsBatchSerialMultiSelect(int ProductId = 0, int SaleId = 0, int WarehouseId = 0)
        {
            try
            {

                //var UserId = HttpContext.Session.GetInt32("UserId");
                //var ComId = HttpContext.Session.GetInt32("ComId");

                //return Json(_purchaseBatchItemsRepository.All().Where(x => (x.BatchSerialNo.ToLower().Contains(query.ToLower())) && (x.ProductId == ProductId )).Take(10));

                //var abc = _purchaseBatchItemsRepository.All().Where(p => (p.ProductId == ProductId) && (p.IsUsed == false))
                // //Select new { ID = p.Id, BatchSerialNo = p.BatchSerialNo })
                // .Select(p => new { Value = p.Id, Text = p.BatchSerialNo , CostPrice = p.PurchaseItems.Price }).ToList();


                //var abcd = _salesBatchItemsRepository.All().Include(x => x.SalesItems).Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId) && (p.IsUsed == false) && (p.SalesItems.SalesId == SaleId))
                // .Select(p => new { Value = p.PurchaseBatchId, Text = p.PurchaseBatchItems.BatchSerialNo , CostPrice = p.PurchaseBatchItems.PurchaseItems.Price }).ToList();


                //var abc = _purchaseBatchItemsRepository.All().Where(p => (p.ProductId == ProductId) && (p.IsUsed == false) && (p.IsReturn == false) && (p.PurchaseItems.IsDelete == false && p.PurchaseItems.WarehouseId == WarehouseId))
                // //Select new { ID = p.Id, BatchSerialNo = p.BatchSerialNo })
                // .Select(p => new { id = p.Id, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price : " + String.Format("{0:0.##}", (Math.Round(p.PurchaseItems.Price, 0) + Math.Round(p.PurchaseItems.IndShippingProportion / p.PurchaseItems.Quantity, 0))).ToString() + " Qty : " + (p.PurchaseBatchQuantity - p.SalesBatchItems.Sum(x => x.SalesBatchQuantity)).ToString(), title = String.Format("{0:0.##}", (Math.Round(p.PurchaseItems.Price, 0) + Math.Round(p.PurchaseItems.IndShippingProportion / p.PurchaseItems.Quantity, 0))).ToString() + " Ind. Org. Cost : " + (p.PurchaseBatchPrice).ToString() }).ToList();


                //var abcd = _salesBatchItemsRepository.All().Include(x => x.SalesItems).Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId) && (p.IsUsed == false && p.PurchaseBatchItems.PurchaseItems.WarehouseId == WarehouseId) && (p.SalesItems.SalesId == SaleId))
                // .Select(p => new { id = p.PurchaseBatchId, text = p.PurchaseBatchItems.BatchSerialNo, html = p.PurchaseBatchItems.BatchSerialNo + " Cost Price " + String.Format("{0:0.##}", (Math.Round(p.PurchaseBatchItems.PurchaseItems.Price, 0) + Math.Round(p.PurchaseBatchItems.PurchaseItems.IndShippingProportion / p.PurchaseBatchItems.PurchaseItems.Quantity, 0))).ToString() + " Qty : " + (p.PurchaseBatchItems.PurchaseBatchQuantity - p.PurchaseBatchItems.SalesBatchItems.Sum(x => x.SalesBatchQuantity)).ToString(), title = String.Format("{0:0.##}", (Math.Round(p.PurchaseBatchItems.PurchaseItems.Price, 0) + Math.Round(p.PurchaseBatchItems.PurchaseItems.IndShippingProportion / p.PurchaseBatchItems.PurchaseItems.Quantity, 0))).ToString() }).ToList();



                var abc = _purchaseBatchItemsRepository.All().Where(p => (p.ProductId == ProductId) && (p.IsUsed == false) && (p.IsReturn == false) && (p.PurchaseBatchQuantity - p.SalesBatchItems.Sum(x => x.SalesBatchQuantity) > 0) && (p.PurchaseItems.IsDelete == false && p.PurchaseItems.WarehouseId == WarehouseId))
                 //Select new { ID = p.Id, BatchSerialNo = p.BatchSerialNo })
                 .Select(p => new { id = p.Id, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price : " + String.Format("{0:0.##}", (Math.Round(p.PurchaseItems.Price, 0) + Math.Round(p.PurchaseItems.IndShippingProportion / p.PurchaseItems.Quantity, 0))).ToString() + " Qty : " + (p.PurchaseBatchQuantity - p.SalesBatchItems.Sum(x => x.SalesBatchQuantity)).ToString(), title = String.Format("{0:0.##}", (Math.Round(p.PurchaseItems.Price, 0) + Math.Round(p.PurchaseItems.IndShippingProportion / p.PurchaseItems.Quantity, 0))).ToString() + " Ind. Org. Cost : " + (p.PurchaseBatchPrice).ToString() }).ToList();


                var abcd = _salesBatchItemsRepository.All().Include(x => x.SalesItems).Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId) && (p.PurchaseBatchItems.IsUsed == true && p.PurchaseBatchItems.PurchaseItems.WarehouseId == WarehouseId) && (p.SalesItems.SalesId == SaleId))
                 .Select(p => new { id = p.PurchaseBatchId, text = p.PurchaseBatchItems.BatchSerialNo, html = p.PurchaseBatchItems.BatchSerialNo + " Cost Price " + String.Format("{0:0.##}", (Math.Round(p.PurchaseBatchItems.PurchaseItems.Price, 0) + Math.Round(p.PurchaseBatchItems.PurchaseItems.IndShippingProportion / p.PurchaseBatchItems.PurchaseItems.Quantity, 0))).ToString() + " Qty : " + (p.PurchaseBatchItems.PurchaseBatchQuantity - p.PurchaseBatchItems.SalesBatchItems.Sum(x => x.SalesBatchQuantity)).ToString(), title = String.Format("{0:0.##}", (Math.Round(p.PurchaseBatchItems.PurchaseItems.Price, 0) + Math.Round(p.PurchaseBatchItems.PurchaseItems.IndShippingProportion / p.PurchaseBatchItems.PurchaseItems.Quantity, 0))).ToString() }).ToList();




                abc.AddRange(abcd);
                //.Select(p => p.BatchSerialNo)
                //.Take(10)


                return Json(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        [AllowAnonymous]
        public JsonResult ProductsBatchSerialMultiSelectForSalesRetrun(int ProductId = 0, int SaleReturnId = 0, int WarehouseId = 0)
        {
            try
            {
                var abc = _salesBatchItemsRepository.All().Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId) && (p.PurchaseBatchItems.PurchaseItems.WarehouseId == WarehouseId))
                 .Select(p => new { id = p.PurchaseBatchId, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price " + p.PurchaseBatchItems.PurchaseItems.Price, title = String.Format("{0:0.##}", (Math.Round(p.PurchaseBatchItems.PurchaseItems.Price, 0) + Math.Round(p.PurchaseBatchItems.PurchaseItems.IndShippingProportion / p.PurchaseBatchItems.PurchaseItems.Quantity, 0))).ToString() }).ToList();

                var abcd = _salesReturnBatchItemsRepository.All().Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId) && (p.SalesReturnItems.SalesReturnId == SaleReturnId && p.PurchaseBatchItems.PurchaseItems.WarehouseId == WarehouseId))
                 .Select(p => new { id = p.PurchaseBatchId, text = p.PurchaseBatchItems.BatchSerialNo, html = p.PurchaseBatchItems.BatchSerialNo + " Cost Price " + p.PurchaseBatchItems.PurchaseItems.Price, title = String.Format("{0:0.##}", (Math.Round(p.PurchaseBatchItems.PurchaseItems.Price, 0) + Math.Round(p.PurchaseBatchItems.PurchaseItems.IndShippingProportion / p.PurchaseBatchItems.PurchaseItems.Quantity, 0))).ToString() }).ToList();

                abc.AddRange(abcd);

                //var withDupes = abc;
                //var noDupes = withDupes.Distinct().ToList();



                return Json(abc.Distinct().ToList());

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public JsonResult ProductsBatchSerialMultiSelectForSalesExchange(int ProductId = 0, int SaleReturnId = 0, int WarehouseId = 0)
        {
            try
            {//fahad
                //var abc = _salesBatchItemsRepository.All().Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId) && (p.IsUsed == false && p.PurchaseBatchItems.PurchaseItems.WarehouseId == WarehouseId))
                // .Select(p => new { id = p.PurchaseBatchId, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price " + p.PurchaseBatchItems.PurchaseItems.Price, title = String.Format("{0:0.##}", (Math.Round(p.PurchaseBatchItems.PurchaseItems.Price, 0) + Math.Round(p.PurchaseBatchItems.PurchaseItems.IndShippingProportion / p.PurchaseBatchItems.PurchaseItems.Quantity, 0))).ToString() }).ToList();

                var abc = _purchaseBatchItemsRepository.All().Where(p => (p.ProductId == ProductId) && (p.IsUsed == false) && (p.IsReturn == false) && (p.PurchaseBatchQuantity - p.SalesBatchItems.Sum(x => x.SalesBatchQuantity) > 0) && (p.PurchaseItems.IsDelete == false && p.PurchaseItems.WarehouseId == WarehouseId))
             //Select new { ID = p.Id, BatchSerialNo = p.BatchSerialNo })
             .Select(p => new { id = p.Id, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price : " + String.Format("{0:0.##}", (Math.Round(p.PurchaseItems.Price, 0) + Math.Round(p.PurchaseItems.IndShippingProportion / p.PurchaseItems.Quantity, 0))).ToString() + " Qty : " + (p.PurchaseBatchQuantity - p.SalesBatchItems.Sum(x => x.SalesBatchQuantity)).ToString(), title = String.Format("{0:0.##}", (Math.Round(p.PurchaseItems.Price, 0) + Math.Round(p.PurchaseItems.IndShippingProportion / p.PurchaseItems.Quantity, 0))).ToString() + " Ind. Org. Cost : " + (p.PurchaseBatchPrice).ToString() }).ToList();



                var abcd = _salesExchangeBatchItemsRepository.All().Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId && p.PurchaseBatchItems.PurchaseItems.WarehouseId == WarehouseId) && (p.SalesExchangeItems.SalesReturnId == SaleReturnId))
                 .Select(p => new { id = p.PurchaseBatchId, text = p.PurchaseBatchItems.BatchSerialNo, html = p.PurchaseBatchItems.BatchSerialNo + " Cost Price " + p.PurchaseBatchItems.PurchaseItems.Price, title = String.Format("{0:0.##}", (Math.Round(p.PurchaseBatchItems.PurchaseItems.Price, 0) + Math.Round(p.PurchaseBatchItems.PurchaseItems.IndShippingProportion / p.PurchaseBatchItems.PurchaseItems.Quantity, 0))).ToString() }).ToList();

                abc.AddRange(abcd);

                return Json(abc.Distinct().ToList());

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult ProductsBatchSerialMultiSelectForPurchaseRetrun(int ProductId = 0, int PurchaseReturnId = 0, int WarehouseId = 0)
        {
            try
            {
                var abc = _purchaseBatchItemsRepository.All().Where(p => (p.ProductId == ProductId && p.PurchaseItems.WarehouseId == WarehouseId)) // && (p.IsUsed == false)
                 .Select(p => new { id = p.Id, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price " + p.PurchaseItems.Price, title = p.PurchaseItems.Price }).ToList();

                //var abcd = _purchaseReturnBatchItemsRepository.All().Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId) && (p.IsUsed == false) && (p.PurchaseReturnItems.PurchaseReturnId == PurchaseReturnId))
                // .Select(p => new { id = p.PurchaseBatchId, text = p.PurchaseBatchItems.BatchSerialNo, html = p.PurchaseBatchItems.BatchSerialNo + " Cost Price " + p.PurchaseBatchItems.PurchaseItems.Price, title = p.PurchaseBatchItems.PurchaseItems.Price }).ToList();

                //abc.AddRange(abcd);

                return Json(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult ProductsBatchSerialMultiSelectForSalesRetrunLoad(int ProductId = 0, int SaleId = 0, int WarehouseId = 0)
        {
            try
            {
                var abc = _salesBatchItemsRepository.All().Include(x => x.PurchaseBatchItems).Where(p => (p.ProductId == ProductId) && (p.IsUsed == false && p.PurchaseBatchItems.PurchaseItems.WarehouseId == WarehouseId) && p.SalesItems.SalesId == SaleId)
                 .Select(p => new { id = p.PurchaseBatchItems.Id, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price " + p.PurchaseBatchItems.PurchaseItems.Price, title = p.PurchaseBatchItems.PurchaseItems.Price }).ToList();


                return Json(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public JsonResult ProductsBatchSerialMultiSelectForPurchaseRetrunLoad(int ProductId = 0, int PurchaseId = 0, int WarehouseId = 0)
        {
            try
            {
                var abc = _purchaseBatchItemsRepository.All().Where(p => (p.ProductId == ProductId) && p.PurchaseItems.PurchaseId == PurchaseId && p.PurchaseItems.WarehouseId == WarehouseId)
                 .Select(p => new { id = p.Id, text = p.BatchSerialNo, html = p.BatchSerialNo + " Cost Price " + p.PurchaseItems.Price, title = p.PurchaseItems.Price }).ToList();


                return Json(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        [AllowAnonymous]
        public JsonResult ProductsSerialSearchByBarcode(string query, int WarehouseId = 0)
        {
            try
            {
                var abc = _purchaseBatchItemsRepository.All().Include(x => x.PurchaseItems).Include(x => x.Products).Where(x => (x.BatchSerialNo.ToLower().Contains(query.ToLower())) && x.IsUsed == false && (x.PurchaseItems.IsDelete == false && x.PurchaseItems.WarehouseId == WarehouseId)).Take(10) //&& (x.IsReturn == false)
                   .Select(x => new
                   {
                       Id = x.Id,
                       BatchSerialNo = x.BatchSerialNo + " Cost Price : " + String.Format("{0:0.##}", (Math.Round(x.PurchaseItems.Price, 0) + Math.Round(x.PurchaseItems.IndShippingProportion / x.PurchaseItems.Quantity, 0))).ToString() + " Qty : " + (x.PurchaseBatchQuantity - x.SalesBatchItems.Sum(x => x.SalesBatchQuantity)).ToString() + " Ind. Org. Cost : " + (x.PurchaseBatchPrice).ToString(),
                       ProductName = x.Products.Name + " " + x.Products.ColorName + " " + x.Products.SizeName + " " + x.Products.ModelName + " " + x.Products.Code,
                       ProductId = x.Products.Id,
                       CostPrice = x.Products.CostPrice,
                       SalePrice = x.Products.Price,
                       WholeSalePrice = x.Products.WholeSalePrice > 0 ? x.Products.WholeSalePrice : x.Products.Price,
                       PCTN = x.Products.PCTN,
                       CommissionAmount = x.Products.CommissionAmount,
                       CommissionPer = x.Products.CommissionPer,

                       ProductDiscountAmount = x.Products.ProductDiscountAmount,
                       ProductDiscountPer = x.Products.ProductDiscountPer

                       //CommissionAmount = x.Products.CommissionPer > 0 ? (x.Products.Price * x.Products.CommissionPer) / 100 : x.Products.CommissionAmount
                   });

                return Json(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public JsonResult ProductsSerialSearchByBarcodeForSalesReturn(string query, int? WarehouseId)
        {
            try
            {
                var abc = _salesBatchItemsRepository.All().Include(x => x.PurchaseBatchItems).Include(x => x.Products).Where(x => (x.BatchSerialNo.ToLower().Contains(query.ToLower()))).Take(10)// && x.IsUsed == false
                   .Select(x => new
                   {
                       Id = x.PurchaseBatchId,
                       BatchSerialNo = x.BatchSerialNo + " Cost Price " + x.PurchaseBatchItems.PurchaseItems.Price,
                       ProductName = x.Products.Name + " " + x.Products.ColorName + " " + x.Products.SizeName + " " + x.Products.ModelName + " " + x.Products.Code,
                       ProductId = x.Products.Id,
                       CostPrice = x.Products.CostPrice,
                       SalePrice = x.Products.Price,
                       CommissionAmount = x.Products.CommissionAmount,
                       CommissionPer = x.Products.CommissionPer,

                       ProductDiscountAmount = x.Products.ProductDiscountAmount,
                       ProductDiscountPer = x.Products.ProductDiscountPer,

                       PCTN = x.Products.PCTN

                       //CommissionAmount = x.Products.CommissionPer > 0 ? (x.Products.Price * x.Products.CommissionPer) / 100 : x.Products.CommissionAmount
                   });

                return Json(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        [AllowAnonymous]
        public JsonResult internetuserIddata(string query)
        {
            try
            {


                var invoiceuserinfo = _InternetUserRepository.All().Where(x => x.UserId.ToLower().Contains(query.ToLower())).Take(10)
                .Select(x => new { UserId = x.UserId, UserName = x.UserName, Id = x.Id })
                //.GroupBy(x => new { x.UserId, x.UserName })
                //.Select(g => new { UserId = g.Key.UserId, UserName = g.Key.UserName, Id = g.Max(x => x.Id) })
                .ToList();


                return Json(invoiceuserinfo);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        [AllowAnonymous]
        public JsonResult internetuserIddataforExpire(string query)
        {
            try
            {


                var invoiceuserinfo = _InternetUserRepository.All().Where(x => x.UserId.ToLower().Contains(query.ToLower())).Take(10)
                .Select(x => new { UserId = x.UserId, UserName = x.UserName, Id = x.Id, LastExpireDate = x.LastExpiredDate.GetValueOrDefault().ToString("dd-MMM-yy"), testdate = x.LastExpiredDate })
                //.GroupBy(x => new { x.UserId, x.UserName })
                //.Select(g => new { UserId = g.Key.UserId, UserName = g.Key.UserName, Id = g.Max(x => x.Id) })
                .ToList();


                return Json(invoiceuserinfo);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }




        [AllowAnonymous]
        public JsonResult billuserIddata(string query)
        {
            try
            {


                //var UserId = HttpContext.Session.GetInt32("UserId");
                //var ComId = HttpContext.Session.GetInt32("ComId");

                //var invoicebills = _invoiceBillRepository.All().Select(x => new { x.Id, x.UserId, x.UserName, x.BillAmount });//.Include(x=>x.vUnit).Include(x=>x.Category);

                //var invoiceuserinfo = (from e in invoicebills.Where(x => x.UserId.ToLower().Contains(query.ToLower()))
                //                       group e by e.UserId into r
                //                       select r.OrderByDescending(d => d.Id).FirstOrDefault());

                //var invoiceuserinfo = (from row in _invoiceBillRepository.All()
                //                      group row by new
                //                      {
                //                          row.UserId,
                //                          row.UserName,
                //                      } into gr
                //                      select gr.Single(result => result.Id == gr.Max(sub => sub.Id)))                                   ;

                //select new ProductResult
                //{
                //    Id = p.Id,
                //    Name = p.Name,
                //    Code = p.Code,
                //    Price = p.Price,
                //    Unit = p.Unit.UnitName,
                //    Category = p.Category.Name
                //});

                //var invoiceuserinfo = (_invoiceBillRepository.All()
                ////Group by Category
                //.GroupBy(x => new { x.UserId, x.UserName})
                ////For each Category, select Category and max Date within the Category
                ////This would create an anonymous object, you could do a "new Entity" instead if you want
                //.Select(g => new { UserId = g.Key.UserId , UserName = g.Key.UserName , Id = g.Max(x => x.Id) })
                //.ToList());


                //var invoiceuserinfo = from e in _invoiceBillRepository.All()
                //                          //.Where(x => x.UserId.Contains("F21"))
                //                      group e by e.UserId into r
                //                      select r.OrderByDescending(d => d.Id).FirstOrDefault();

                // var invoiceuserinfo = (from e in _invoiceBillRepository.All()
                //.Select(x => new { x.Id, x.UserId, x.UserName, x.BillAmount })
                //.Where(x => x.UserId.ToLower().Contains("f21"))
                // group e by e.UserId into r
                // select r.OrderByDescending(d => d.Id).FirstOrDefault()).ToListAsync();

                var invoiceuserinfo = _invoiceBillRepository.All().Where(x => x.UserId.ToLower().Contains(query.ToLower()))
                .GroupBy(x => new { x.UserId, x.UserName, x.InternetUserId })
                .Select(g => new { UserId = g.Key.UserId, UserName = g.Key.UserName, InternetUserId = g.Key.InternetUserId, Id = g.Max(x => x.Id) })
                .ToList().Take(20);

                if (invoiceuserinfo.Count() == 0)
                {

                    var internetuserinfo = _InternetUserRepository.All().Where(x => x.UserId.ToLower().Contains(query.ToLower()))
                         .Select(g => new { UserId = g.UserId, UserName = g.UserName, InternetUserId = g.Id, Id = g.Id })
                         .ToList().Take(20);

                    return Json(internetuserinfo);

                }


                return Json(invoiceuserinfo);
            }
            catch (Exception ex)
            {

                throw ex;
            }

            //return Json(_invoiceBillRepository.All().Where(x => x.UserId.ToLower().Contains(query.ToLower())).Take(10));
        }
        [AllowAnonymous]
        public JsonResult BillAmountbyId(int query)
        {
            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");

            var invoiceuserinfo = _invoiceBillRepository.All().Where(x => x.Id == query).FirstOrDefault();
            int? InternetUserId = null;
            if (invoiceuserinfo.InternetUserId == null)
            {

                InternetUserId = _InternetUserRepository.All().Where(x => x.UserId == invoiceuserinfo.UserId).FirstOrDefault().Id;
                invoiceuserinfo.InternetUserId = InternetUserId;

            }

            return Json(invoiceuserinfo);

            //return Json(_invoiceBillRepository.All().GroupBy(x=>x.UserId).Where(x => x.UserName.ToLower().Contains(query.ToLower())).Take(10));

        }
        [AllowAnonymous]
        public JsonResult billuserNamedata(string query)
        {
            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");

            var invoiceuserinfo = _invoiceBillRepository.All().Where(x => x.UserName.Contains(query.ToLower()))
                                    .GroupBy(x => x.UserId)
                                    .Select(grp => grp.OrderByDescending(x => x.Id).First())
                                    .ToList();

            return Json(invoiceuserinfo.Take(10));

            //return Json(_invoiceBillRepository.All().GroupBy(x=>x.UserId).Where(x => x.UserName.ToLower().Contains(query.ToLower())).Take(10));

        }


        #endregion

        #region UserAccount 

        public IActionResult UserAccountList()
        {

            var ComId = HttpContext.Session.GetInt32("ComId");
            var UserId = HttpContext.Session.GetInt32("UserId");
            var BaseComId = HttpContext.Session.GetInt32("BaseComId");

            var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;
            if (useraccount == "SuperAdmin") //|| useraccount == "Admin"
            {
                var abc = _userAccountRepository.All(false).Where(x => x.CompanyList.storeinfo.FirstOrDefault().BaseComId == BaseComId).Select(
                        x => new UserAccountViewModelList
                        {
                            Id = x.Id,
                            Name = x.Name,
                            Email = x.Email,
                            PhoneNumber = x.PhoneNumber,
                            IsEmailVerified = x.IsEmailVerified,
                            EmployeeName = x.EmployeeList.EmployeeName,
                            RoleRemarks = x.UserRole.RoleRemarks,
                            ValidityDay = x.UserActivationList.OrderByDescending(x => x.ValidityDay).FirstOrDefault().ValidityDay,//x.UserActivationList.OrderByDescending(x=>x.ValidityDay).FirstOrDefault().ValidityDay,
                            ActiveToDate = x.UserActivationList.OrderByDescending(x => x.ValidityDay).FirstOrDefault().ActiveToDate.ToString("dd-MMM-yy") ?? "",//x.UserActivationList.OrderByDescending(x => x.ValidityDay).FirstOrDefault().ActiveToDate,
                            LastLoginDate = x.UserloginInfo.OrderByDescending(x => x.CreateDate).FirstOrDefault().CreateDate.ToString("dd-MMM-yy") ?? "",//x.UserloginInfo.OrderByDescending(x => x.CreateDate).FirstOrDefault().CreateDate,
                            LastTransactionDate = x.UserTransaction.OrderByDescending(x => x.CreateDate).FirstOrDefault().CreateDate.ToString("dd-MMM-yy") ?? "",
                            IsInacitve = x.IsInacitve,
                            IsBaseUser = x.IsBaseUser

                        }
                    ).ToList();


                //var x = _userAccountRepository.All().Include(x => x.UserRole)
                //    .Include(x => x.UserActivationList.OrderByDescending(o => o.ValidityDay).Take(1))
                //    .Include(x => x.EmployeeList);
                //    //.Include(x => x.UserloginInfo.OrderByDescending(o => o.Id).Take(1))
                //    //.Include(x => x.UserTransaction.OrderByDescending(e => e.Id).Take(1));

                return View(abc);


            }
            else
            {
                var abc = _companyPermissionRepository.All().Where(x => x.ComId == ComId && x.UserList.IsDelete == false && x.UserList.IsInacitve == false).Include(x => x.UserList).Select(
                    x => new UserAccountViewModelList
                    {
                        Id = x.UserList.Id,
                        Name = x.UserList.Name,
                        Email = x.UserList.Email,
                        PhoneNumber = x.UserList.PhoneNumber,
                        IsEmailVerified = x.UserList.IsEmailVerified,
                        EmployeeName = x.UserList.EmployeeList.EmployeeName,
                        RoleRemarks = x.UserList.UserRole.RoleRemarks,
                        ValidityDay = x.UserList.UserActivationList.OrderByDescending(x => x.ValidityDay).FirstOrDefault().ValidityDay,//x.UserActivationList.OrderByDescending(x=>x.ValidityDay).FirstOrDefault().ValidityDay,
                        ActiveToDate = x.UserList.UserActivationList.OrderByDescending(x => x.ValidityDay).FirstOrDefault().ActiveToDate.ToString("dd-MMM-yy") ?? "",//x.UserActivationList.OrderByDescending(x => x.ValidityDay).FirstOrDefault().ActiveToDate,
                        LastLoginDate = x.UserList.UserloginInfo.OrderByDescending(x => x.CreateDate).FirstOrDefault().CreateDate.ToString("dd-MMM-yy") ?? "",//x.UserloginInfo.OrderByDescending(x => x.CreateDate).FirstOrDefault().CreateDate,
                        LastTransactionDate = x.UserList.UserTransaction.OrderByDescending(x => x.CreateDate).FirstOrDefault().CreateDate.ToString("dd-MMM-yy") ?? "",
                        IsInacitve = x.UserList.IsInacitve,
                        IsBaseUser = x.UserList.IsBaseUser

                    }
                ).ToList();

                return View(abc);
            }

            return View();

        }


        [HttpGet]
        public ActionResult UserAccount(int BusinessTypeId, int ComId)
        {
            ViewBag.Role = _userRoleRepository.GetAllForDropDownWithCondition(BusinessTypeId, ComId);

            //ViewBag.Warehouse = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            ViewBag.Employee = _employeeRepository.GetAllForDropDown();

            //ViewBag.ActionType = "Create";
            //var BusinessTypeId = 0;
            ////ViewBag.Role = _userRoleRepository.GetAllForDropDown();
            //var ComId = HttpContext.Session.GetInt32("ComId");

            ////var ComId = HttpContext.Session.GetInt32("ComId");
            //var SelectedBusinessTypes = _storeSettingRepository.All().FirstOrDefault();

            //if (SelectedBusinessTypes != null)
            //    BusinessTypeId = SelectedBusinessTypes.BusinessTypeId;

            //ViewBag.Role = _userRoleRepository.GetAllForDropDownWithCondition(BusinessTypeId, ComId);

            ////ViewBag.Warehouse = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            //ViewBag.Employee = _employeeRepository.GetAllForDropDown();

            //ViewBag.UserCount = _userAccountRepository.All().Count();

            //var softwarepackage = _packageActivationRepository.All().Where(x => x.ActiveYesNo == true).Include(x => x.SoftwarePackage).OrderByDescending(x => x.Id).FirstOrDefault();
            //if (softwarepackage != null)
            //{
            //    ViewBag.PackageUserCount = softwarepackage.SoftwarePackage.UserCount;
            //}
            //else
            //{
            //    ViewBag.PackageUserCount = 0;
            //}
            return View();

        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> UserAccount(UserCreateDto model)
        {
            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

            if (!ModelState.IsValid)
            {
                return View();
            }

            var ComId = Convert.ToInt32(HttpContext.Session.GetInt32("ComId"));
            var UserId = Convert.ToInt32(HttpContext.Session.GetInt32("UserId"));
            var BaseComId = Convert.ToInt32(HttpContext.Session.GetInt32("BaseComId"));
            if (model.Id == "0")
            {
                //HttpClient client = new HttpClient();
                //var token = Request.Cookies["access_token"];
                //client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                //var reponse = await client.PostAsJsonAsync("https://localhost:7074/api/UserCompany/AddnewUser", model);
                //if (reponse.IsSuccessStatusCode)
                //{


                var usercount = _userAccountRepository.All().Count();
                var softwarepackageusercount = 0;
                var softwarepackage = _packageActivationRepository.All().Where(x => x.ActiveYesNo == true).Include(x => x.SoftwarePackage).OrderByDescending(x => x.Id).FirstOrDefault();
                if (softwarepackage != null)
                {
                    softwarepackageusercount = softwarepackage.SoftwarePackage.UserCount;
                }

                //var softwarepackageusercount = _packageActivationRepository.All().Where(x => x.ActiveYesNo == true).Include(x => x.SoftwarePackage).OrderByDescending(x => x.Id).FirstOrDefault().SoftwarePackage.UserCount;

                if (softwarepackageusercount > 0 && softwarepackageusercount >= usercount)
                {
                    TempData["Message"] = "Maximum User already Created For you Active Package.";
                    TempData["Status"] = "2";
                    return RedirectToAction("UserAccount");
                }
                //var user = await reponse.Content.ReadFromJsonAsync<UserCompanyIDDto>();
                var useraccount = new UserAccountModel
                {
                    ComId = ComId,
                    BaseComId = BaseComId,
                    LuserId = UserId,
                    IsBaseUser = model.IsBaseUser,
                    Email = model.Email,
                    OTP = model.OTP,
                    PhoneNumber = model.PhoneNumber,
                    Name = model.Fullname,
                    UniqueUserId = string.Empty, //user.UserId,
                    Password = model.Password,
                    UserRoleId = model.UserRoleId,
                    IsEmailVerified = true,
                    EmployeeId = model.EmployeeId


                };
                _userAccountRepository.Insert(useraccount);

                SubscriptionActivationModel abc = new SubscriptionActivationModel();
                abc.LuserId = useraccount.Id;
                abc.IsActive = true;
                abc.ActiveFromDate = DateTime.Now.Date;
                abc.ActiveToDate = DateTime.Now.Date.AddDays(2);
                abc.SubscriptionTypeId = 1;
                abc.Remarks = "Auto Insert After User Create";
                abc.Amount = 0;
                abc.ValidityDay = 2;

                _SubscriptionActivationRepository.Insert(abc);

                var companycount = _storeSettingRepository.All().Where(x => x.BaseComId == BaseComId).ToList().Count();

                if (companycount == 1)
                {
                    CompanyPermissionModel xyz = new CompanyPermissionModel();
                    xyz.LuserId = useraccount.Id;
                    xyz.ComId = ComId;
                    xyz.isChecked = true;
                    xyz.isDefault = true;

                    _companyPermissionRepository.Insert(xyz);
                }
                //}

                //}
                //return View(); // _userAccountRepository.All()
            }
            else
            {
                int id = Convert.ToInt32(model.Id);
                var useraccount = new UserAccountModel
                {
                    Id = id,
                    ComId = ComId,
                    BaseComId = BaseComId,
                    LuserId = UserId,
                    IsBaseUser = model.IsBaseUser,
                    Email = model.Email,
                    OTP = model.OTP,
                    PhoneNumber = model.PhoneNumber,
                    Name = model.Fullname,
                    UniqueUserId = string.Empty, //user.UserId,
                    Password = model.Password,
                    UserRoleId = model.UserRoleId,
                    IsEmailVerified = true,
                    EmployeeId = model.EmployeeId

                };
                _userAccountRepository.Update(useraccount, id);
            }
            return RedirectToAction("UserAccount");


        }
        [HttpGet]
        public ActionResult EditUserAccount(int UserAccountId)
        {
            ViewBag.ActionType = "Edit";
            var BusinessTypeId = 0;

            var SelectedBusinessTypes = _storeSettingRepository.All().FirstOrDefault();

            if (SelectedBusinessTypes != null)
                BusinessTypeId = SelectedBusinessTypes.BusinessTypeId;
            var ComId = HttpContext.Session.GetInt32("ComId");

            var UserAccount = _userAccountRepository.Find(UserAccountId);

            var UserCreateDto = new UserCreateDto();
            if (UserAccount != null)
            {
                UserCreateDto.Fullname = UserAccount.Name;
                UserCreateDto.Id = UserAccount.Id.ToString();
                UserCreateDto.UserName = UserAccount.Name;
                UserCreateDto.PhoneNumber = UserAccount.PhoneNumber;
                UserCreateDto.Email = UserAccount.Email;
                UserCreateDto.Password = UserAccount.Password;
                UserCreateDto.UserRoleId = UserAccount.UserRoleId;
                UserCreateDto.EmployeeId = UserAccount.EmployeeId;
                UserCreateDto.IsBaseUser = UserAccount.IsBaseUser;
                UserCreateDto.OTP = UserAccount.OTP;
            }


            ViewBag.Role = _userRoleRepository.GetAllForDropDownWithCondition(BusinessTypeId, ComId);
            //ViewBag.Warehouse = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            ViewBag.Employee = _employeeRepository.GetAllForDropDown();

            //return View("UserAccount", UserAccount);
            return View("UserAccount", UserCreateDto);
        }

        public ActionResult DeleteUserAccount(int UserAccountId)
        {
            var model = _userAccountRepository.Find(UserAccountId);

            var useractivationlist = _SubscriptionActivationRepository.All().Where(x => x.LuserId == UserAccountId).ToList();
            if (model != null)
            {

                _SubscriptionActivationRepository.RemoveRange(useractivationlist);

                _userAccountRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Name);


                return RedirectToAction("UserAccount");
            }
            return RedirectToAction("UserAccount");
        }



        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult EditUserAccount(UserAccountModel model)
        //{
        //    var errors = ModelState.Where(x => x.Value.Errors.Any())
        //.Select(x => new { x.Key, x.Value.Errors });

        //    if (!ModelState.IsValid)
        //        return View(model);


        //    //model.LuserId = 0;
        //    _userAccountRepository.Update(model, model.Id);


        //    TempData["Message"] = "Data Update Successfully";
        //    TempData["Status"] = "2";
        //    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());

        //    return RedirectToAction("UserAccount");
        //}

        #endregion UserAccount

        #region vgm
        public IActionResult VGMList()
        {
            return View(_vgmRepository.All());
        }

        [HttpGet]
        public ActionResult AddVGM()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddVGM(VGMModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _vgmRepository.Insert(model);



                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.NameofShipper.ToString());

                }
                else
                {
                    _vgmRepository.Update(model, model.Id);



                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.NameofShipper.ToString());

                }
                return RedirectToAction("VGMList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditVGM(int vgmId)
        {
            ViewBag.ActionType = "Edit";
            var vgm = _vgmRepository.Find(vgmId);
            return View("AddVGM", vgm);
        }

        public ActionResult DeleteVGM(int vgmId)
        {
            var model = _vgmRepository.Find(vgmId);
            if (model != null)
            {
                _vgmRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.NameofShipper);


                return RedirectToAction("VGMList");
            }
            return RedirectToAction("VGMList");
        }


        //public ActionResult VGMReport(int VGMId, int style)
        //{
        //    if (_storeSettingRepository.All().Count() == 0)
        //    {
        //        TempData["Msg"] = "Setup store setting first then print VGMData invoice";
        //        return RedirectToAction("Index");
        //    }
        //    var store = _storeSettingRepository.All().FirstOrDefault();

        //    var VGMData = _vgmRepository.All().SingleOrDefault(x => x.Id == VGMId);
        //    //VGMData.Items = VGMDataItemRepository.All().Where(x => x.VGMDatasId == VGM).ToList();
        //    if (VGMData != null)
        //    {
        //        var VGMDatas = new VGMReportViewModel
        //        {
        //            company = store,
        //            VGMdata = VGMData
        //        };
        //        if (style == 2)
        //        {
        //            VGMReportClass paymentReport = new VGMReportClass(configuration);
        //            byte[] bytes = paymentReport.CreateReport(VGMDatas);
        //            return File(bytes, "application/pdf");
        //        }
        //    }
        //    return RedirectToAction("index");
        //}

        #endregion

        #region shortlink
        public IActionResult ShortLinkList()
        {
            return View(_shortLinkRepository.All().Include(x => x.ShortLinkHitList));
        }

        [HttpGet]
        public ActionResult AddShortLink()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddShortLink(ShortLinkModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    var abc = _shortLinkRepository.All().Where(x => x.Url == model.Url).FirstOrDefault();

                    if (abc == null)
                    {
                        _shortLinkRepository.Insert(model);
                    }



                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Url.ToString());

                }
                else
                {
                    _shortLinkRepository.Update(model, model.Id);



                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Url.ToString());

                }
                return RedirectToAction("ShortLinkList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditShortLink(int shortlinkId)
        {
            ViewBag.ActionType = "Edit";
            var shortlink = _shortLinkRepository.Find(shortlinkId);
            return View("AddShortLink", shortlink);
        }

        public ActionResult DeleteShortLink(int shortlinkId)
        {
            var model = _shortLinkRepository.Find(shortlinkId);
            if (model != null)
            {
                _shortLinkRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Url);


                return RedirectToAction("ShortLinkList");
            }
            return RedirectToAction("ShortLinkList");
        }



        #endregion

        #region AccountHead



        public class GroupHeadWithCategory
        {
            public int AccId { get; set; }
            public string? AccName { get; set; }
            public int? CategoryId { get; set; }
            public string? CategoryName { get; set; }



        }

        public IActionResult AccountHeadList()
        {
            ViewBag.FromDate = DateTime.Now.Date;
            ViewBag.ToDate = DateTime.Now.Date;

            //var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");
            ViewBag.AccountCategoryId = _accountCategoryRepository.GetAllForDropDown();
            ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();
            //Exec [prcProcessMonthlySubscriptionFee] 1, '01-Jan-2021','31-JAN-2021'/
            var query = $"Exec prcProcessAccountData '{ComId}'";



            var AccountGroupHead = _accountHeadRepository.All().Include(x => x.AccountCategorys)
                .Where(x => x.AccType == "G")
            .Select(x => new GroupHeadWithCategory
            {
                AccName = x.AccName + " - [ " + x.AccCode + " ]",
                AccId = x.Id,
                CategoryName = x.AccountCategorys.AccountCategoryName,
                CategoryId = x.AccountCategoryId
            }).ToList();


            ViewBag.AccountGroupHeadWithCategory = AccountGroupHead;


            SqlParameter[] sqlParameter = new SqlParameter[1];
            sqlParameter[0] = new SqlParameter("@ComId", ComId);
            Helper.ExecProc("prcProcessAccountData", sqlParameter);

            //return View(_accountHeadRepository.All());
            return View();

        }
        [AllowAnonymous]
        public JsonResult GetAccountHeadList()
        {
            try
            {
                //var products= _context.Products.ToList();

                var accountheadlist = _accountHeadRepository.All().Include(x => x.vAccountGroupHead);//.Include(x=>x.vUnit).Include(x=>x.Category);
                var query = from e in accountheadlist.Where(x => x.isSystem == false)//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id) //let vAccountGroupHead = e.vAccountGroupHead.AccName
                            select new AccountHeadModel
                            {
                                Id = e.Id,
                                NumericNumber = e.NumericNumber,
                                AccCode = e.AccCode,

                                AccName = e.AccName,
                                AccType = e.AccType,

                                //AccountCategory = e.AccountCategory,
                                AccountCategory = e.AccountCategorys.AccountCategoryName ?? "",

                                vAccountGroupHead = e.vAccountGroupHead,
                                isSystem = e.isSystem,
                                AccountBalance = e.AccountBalance
                                //,  AccountBalance = e.AccountsTransaction.Where(x => x.TransactionType.ToLower().Contains("received")).Sum(x=>x.TransactionAmount) - e.AccountsTransaction.Where(x => x.TransactionType.ToLower().Contains("paid")).Sum(x => x.TransactionAmount)
                            };

                var parser = new Parser<AccountHeadModel>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }



        public class COAFilterData
        {
            public int CategoryId { get; set; }
            public string? AccName { get; set; }
            public string? AccCode { get; set; }
            public string? CategoryName { get; set; }
            public string? ParentName { get; set; }

            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }
        public class ProductListFilterData
        {
            public int CategoryId { get; set; }

            public int ProductId { get; set; }
            public string? ProductName { get; set; }
            public string? ProductCode { get; set; }
            public string? CategoryName { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }

        public class ItemListFilterData
        {
            public string ItemDescCode { get; set; }
            public string ItemDescHSCode { get; set; }
            public string ItemDescName { get; set; }
            public string ItemDescShortName { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }

        public class BoxCategoryFilterData
        {
            public string MeasurementName { get; set; }
            public string MeasurementNo { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }

        public class BuyerPOListFilterData
        {
            public string? BuyerPO { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }

        public class UnitListFilterData
        {
            public string? UnitName { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }



        public class ContainerListFilterData
        {
            public string? ContainerName { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }


        public class SupplierListFilterData
        {
            public string? SupplierName { get; set; }
            public string? Notes { get; set; }
            public string? ClBalance { get; set; }
            public string? Email { get; set; }
            public string? Address { get; set; }
            public string? Phone { get; set; }

            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }

        public class VoucherFilterData
        {
            public int VoucherId { get; set; }
            public int UserList { get; set; }


            public string? VoucherNo { get; set; }
            public string? VoucherDesc { get; set; }
            public string? VoucherTypeName { get; set; }


            public string? VoucherDate { get; set; }
            public string? VAmount { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }

        public class gatepassFilterData
        {
            public int GatePassId { get; set; }
            public int UserList { get; set; }

            public string? GatePassCode { get; set; }
            public string? Description { get; set; }

            public string? GatePassDate { get; set; }
            public string? ManualNo { get; set; }
            public string? BuyerName { get; set; }
            public string? StyleNo { get; set; }
            public string? Transport { get; set; }
            public bool isPosted { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }
        [AllowAnonymous]
        public JsonResult GetBanksAccountHeads()
        {
            return Json(_accountHeadRepository.All().Where(x => x.AccType == "L" && ((x.AccountCategorys.AccountType.ToUpper() == "Asset".ToUpper()) || (x.AccountCategorys.AccountType.ToUpper() == "Liability".ToUpper()) || (x.AccountCategorys.AccountCategoryName.ToUpper() == "Cash".ToUpper()) || (x.AccountCategorys.AccountCategoryName.ToUpper() == "Bank".ToUpper()))));   //_accountHeadRepository.GetAssetLiabilityHeadForDropDown()
        }



        [AllowAnonymous]
        public JsonResult GetCOAList(int? CategoryId, string AccType, bool IncludingInative, int pageNo = 1, decimal pageSize = 10, string searchquery = "", string dropdownSearch = "") // string VoucherType
        {
            try
            {
                //var products= _context.Products.ToList();
                if (dropdownSearch == null)
                {
                    dropdownSearch = "";
                }
                var accountheadlist = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.IsDelete == false);//.Include(x=>x.vUnit).Include(x=>x.Category);



                //if (VoucherType == "Cash")
                //{
                //    accountheadlist = accountheadlist.Where(x => x.AccountCategorys.AccountCategoryName != "Bank").ToList();

                //}


                if (searchquery?.Length > 1)
                {


                    var searchitem = JsonConvert.DeserializeObject<COAFilterData>(searchquery);

                    if (searchitem.pageIndex != null)
                    {
                        pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                        pageSize = searchitem.pageSize.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())


                    }





                    if (searchitem.AccName != null)
                    {
                        accountheadlist = accountheadlist.Where(x => x.AccName.ToLower().Contains(searchitem.AccName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                    if (searchitem.AccCode != null)
                    {
                        accountheadlist = accountheadlist.Where(x => x.AccCode.ToLower().Contains(searchitem.AccCode.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }


                    if (searchitem.CategoryName != null)
                    {
                        accountheadlist = accountheadlist.Where(x => x.AccountCategorys.AccountCategoryName.ToLower().Contains(searchitem.CategoryName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                    if (searchitem.ParentName != null)
                    {
                        accountheadlist = accountheadlist.Where(x => x.vAccountGroupHead.AccName.ToLower().Contains(searchitem.ParentName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                }

                if ((dropdownSearch.Length > 1) || (dropdownSearch == ""))
                {
                    accountheadlist = accountheadlist.Where(x => x.AccType == "L" && x.AccName.ToLower().Contains(dropdownSearch.ToLower()) || x.AccCode.ToLower().Contains(dropdownSearch.ToLower()));
                }


                if (AccType != null && AccType.Length > 0)
                {
                    accountheadlist = accountheadlist.Where(x => x.AccType == AccType);
                }


                decimal TotalRecordCount = accountheadlist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);





                decimal skip = (pageNo - 1) * pageSize;

                // Get total number of records
                int total = accountheadlist.Count();



                var query = from e in accountheadlist.Include(x => x.AccountCategorys).Include(x => x.vAccountGroupHead)//.Where(x => x.isSystem == false)//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id) //let vAccountGroupHead = e.vAccountGroupHead.AccName
                            select new
                            {
                                Id = e.Id,
                                NumericNumber = e.NumericNumber,
                                AccCode = e.AccCode,
                                AccName = e.AccName,
                                AccType = e.AccType,
                                AccountCategory = e.AccountCategorys.AccountCategoryName ?? "",
                                AccountType = e.AccountCategorys.AccountType ?? "",
                                ParentName = e.vAccountGroupHead.AccName,
                                isSystem = e.isSystem,
                                isInactive = e.isInactive,
                                CurrencyId = e.CountryId,
                                CurrencyShortName = e.Currency.CurrencyShortName,
                                AccountBalance = e.AccountBalance,
                                CurrencyRate = 1
                            };

                //var parser = new Parser<AccountHeadModel>(Request.Form, query);
                //return Json(parser.Parse());





                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, AccountHeadList = abcd, PageInfo = pageinfo });









                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }



        [AllowAnonymous]
        public JsonResult GetProductSearchList(int? CategoryId, bool IncludingInative, int pageNo = 1, decimal pageSize = 10, string searchquery = "", string dropdownSearch = "", int Warehouse = 0)
        {
            try
            {
                //var products= _context.Products.ToList();
                if (dropdownSearch == null)
                {
                    dropdownSearch = "";
                }
                var productlist = _productRepository.All().Include(x => x.Category).Where(x => x.IsDelete == false);//.Include(x=>x.vUnit).Include(x=>x.Category);






                if (searchquery?.Length > 1)
                {


                    var searchitem = JsonConvert.DeserializeObject<ProductListFilterData>(searchquery);

                    if (searchitem.pageIndex != null)
                    {
                        pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                        pageSize = searchitem.pageSize.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())


                    }





                    if (searchitem.ProductName != null)
                    {
                        productlist = productlist.Where(x => x.Name.ToLower().Contains(searchitem.ProductName.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }

                    if (searchitem.ProductCode != null)
                    {
                        productlist = productlist.Where(x => x.Code.ToLower().Contains(searchitem.ProductCode.ToLower())); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())

                    }



                }

                if ((dropdownSearch.Length > 1) || (dropdownSearch == ""))
                {
                    productlist = productlist.Where(x => x.Name.ToLower().Contains(dropdownSearch.ToLower()) || x.Code.ToLower().Contains(dropdownSearch.ToLower()));
                }



                decimal TotalRecordCount = productlist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);





                decimal skip = (pageNo - 1) * pageSize;

                // Get total number of records
                int total = productlist.Count();



                var query = from e in productlist.Include(x => x.Category).Include(x => x.Brand).Where(x => x.isSystem == false)//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id) //let vAccountGroupHead = e.vAccountGroupHead.AccName
                            select new
                            {
                                Id = e.Id,

                                ProductCode = e.Code,
                                ProductName = e.Name,
                                SizeName = e.Size.SizeName ?? "",
                                ColorName = e.Color.ColorName ?? "",
                                CategoryName = e.Category.Name ?? "",
                                BrandName = e.Brand.BrandName ?? "",
                                Price = e.Price,
                                CostPrice = e.CostPrice,
                                isSystem = e.isSystem,
                                e.UnitId,
                                Unit = e.Unit.UnitName
                            };

                //var parser = new Parser<AccountHeadModel>(Request.Form, query);
                //return Json(parser.Parse());
                if (Warehouse > 0)
                {
                    var productwarehouse = _productWarehouseRepository.All().Where(x => x.WarehouseId == Warehouse).Select(x => x.ProductId).ToList();
                    var otherproduct = _productWarehouseRepository.All().Where(x => x.WarehouseId != Warehouse).Select(x => x.ProductId).ToList();
                    //query = query.Where(e => productwarehouse.Contains(e.Id));
                    query = from q in query
                            where productwarehouse.Contains(q.Id) || !otherproduct.Contains(q.Id)
                            select q;
                }





                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, ProductList = abcd, PageInfo = pageinfo });









                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }




        [HttpGet]
        public ActionResult AddAccountHead(int AccountHeadId = 0)
        {
            ViewBag.ActionType = "Create";
            int defaultcurrency = 18;
            ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();
            ViewBag.AccumulatedDepId = new SelectList(_accountHeadRepository.All().Where(x => x.AccCode.Contains("1-3-1")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            ViewBag.DepExpenseId = new SelectList(_accountHeadRepository.All().Where(x => x.AccCode.Contains("4-2-2")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            ViewBag.CountryId = new SelectList(_countryRepository.All().Where(x => x.isActive == true), "Id", "CurrencyShortName", defaultcurrency).ToList();
            ViewBag.AccountCategoryId = _accountCategoryRepository.GetAllForDropDown();


            var AccountHeaddata = new AccountHeadModel();

            if (AccountHeadId > 0)
            {
                AccountHeaddata = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.Id == AccountHeadId).FirstOrDefault();
                AccountHeaddata.ParentId = AccountHeadId;

            }
            else
            {
                AccountHeaddata = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).OrderByDescending(x => x.Id).FirstOrDefault();
            }

            if (AccountHeaddata != null)
            {
                AccountHeaddata.Id = 0;
                AccountHeaddata.AccType = "L";
                AccountHeaddata.AccName = "";

                //AccountHeaddata.AccCode = AccountHeaddata.vAccountGroupHead.AccCode + (AccountHeaddata.NumericNumber + 1).ToString().PadLeft(2, '0').ToString();
                AccountHeaddata.NumericNumber = AccountHeaddata.NumericNumber + 1;
            }


            return View(AccountHeaddata);
        }



        [HttpPost]
        [AllowAnonymous]
        public JsonResult ParentAccountInfo(int id)
        {
            try
            {

                var AccountHeadList = _accountHeadRepository.All().Include(x => x.vAccountGroupHead)
                   .Where(y => y.ParentId == id)
                   .Select(g => new
                   {
                       g.AccName,
                       g.AccCode,
                       g.NumericNumber,
                       ParentCode = g.vAccountGroupHead.AccCode
                   }).ToList();



                string MaxAccCode = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(y => y.Id == id).SingleOrDefault().AccCode + "01";
                int SLNO = 1;
                if (AccountHeadList.Count != 0)
                {

                    var length = AccountHeadList.LastOrDefault().AccCode.Length;

                    if (length > 7)
                    {
                        //MaxAccCode = (int.Parse(AccountHeadList.LastOrDefault().AccCode.Substring(AccountHeadList.LastOrDefault().AccCode.Length - 6)) + 1).ToString();
                        MaxAccCode = (Int64.Parse(AccountHeadList.LastOrDefault().AccCode) + 1).ToString();
                    }
                    else
                    {
                        MaxAccCode = (Int64.Parse(AccountHeadList.LastOrDefault().AccCode) + 1).ToString();
                    }

                    SLNO = int.Parse(MaxAccCode.Replace(AccountHeadList.LastOrDefault().AccCode, "0").ToString()) + 1;
                }

                //var maxacccode  = 

                var AccountHeadinfo = _accountHeadRepository.All().Include(x => x.vAccountGroupHead)
                    .Where(y => y.Id == id)
                    .Select(g => new
                    {
                        g.AccountCategoryId,
                        AccCode = MaxAccCode,
                        g.NumericNumber
                    }).SingleOrDefault();

                //var maxacccode = int.Parse(AccountHeadinfo.AccCode) + 1;
                //AccountHeadinfo.AccCode = maxacccode.ToString();





                return Json(new { AccountHeadinfo = AccountHeadinfo, AccountHeadList = AccountHeadList });
            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }


        [HttpPost]
        [AllowAnonymous]
        public JsonResult ParentListByCategoryId(int CategoryId)
        {
            try
            {
                //var selectedCategory = _accountCategoryRepository.All().FirstOrDefault(x => x.Id == CategoryId);

                var accountcategoryinfo = _accountCategoryRepository.All().Where(x => x.Id == CategoryId).FirstOrDefault().AccountCategoryName;

                var accountheadlistbycategory = _accountHeadRepository.All().Where(x => x.AccName.ToLower() == accountcategoryinfo.ToLower()).FirstOrDefault();

                var AccountHeadList = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Include(x => x.AccountCategorys)
                   .Where(y => y.AccountCategoryId == CategoryId && y.AccType == "G")
                   .Select(g => new
                   {
                       g.Id,
                       g.AccName,
                       g.AccCode,
                       g.NumericNumber,
                       ParentCode = g.vAccountGroupHead.AccCode,
                       CategoryId = g.AccountCategoryId,
                       CategoryName = g.AccountCategorys.AccountCategoryName,

                   }).ToList();

                //previous if block
                if (AccountHeadList.Count == 0)
                {
                    var parentid = _accountHeadRepository.All().Where(y => y.AccountCategoryId == CategoryId && y.AccType == "L").FirstOrDefault().ParentId;


                    var parentAccountHead = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Include(x => x.AccountCategorys)
                        .Where(y => y.Id == parentid)
                        .Select(g => new
                        {
                            g.vAccountGroupHead.Id,
                            g.vAccountGroupHead.AccName,
                            g.vAccountGroupHead.AccCode,
                            g.vAccountGroupHead.NumericNumber,
                            ParentCode = "",
                            CategoryId = g.vAccountGroupHead.AccountCategoryId,
                            CategoryName = g.vAccountGroupHead.AccountCategorys.AccountCategoryName
                        });//.FirstOrDefault();

                    if (parentAccountHead != null)
                    {
                        AccountHeadList.AddRange(parentAccountHead);
                    }
                }

                else
                {
                    var OtherAccountHeadList = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Include(x => x.AccountCategorys)
                       .Where(y => y.vAccountGroupHead.AccountCategoryId == CategoryId && y.AccType == "G")
                       .Select(g => new
                       {
                           g.Id,
                           g.AccName,
                           g.AccCode,
                           g.NumericNumber,
                           ParentCode = g.vAccountGroupHead.AccCode,
                           CategoryId = g.AccountCategoryId,
                           CategoryName = g.AccountCategorys.AccountCategoryName,

                       }).ToList();

                    AccountHeadList.AddRange(OtherAccountHeadList);
                }

                return Json(new { ParentHeadList = AccountHeadList });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }





        //[HttpPost]
        //[AllowAnonymous]
        //public JsonResult ParentListByCategoryId(int CategoryId)
        //{
        //    try
        //    {
        //        var accountcategoryinfo = _accountCategoryRepository.All().Where(x => x.Id == CategoryId).FirstOrDefault().AccountCategoryName;

        //        var accountheadlistbycategory = _accountHeadRepository.All().Where(x => x.AccName.ToLower() == accountcategoryinfo.ToLower()).FirstOrDefault();

        //        //trying code by mahin start

        //        //trying code by mahin end

        //        var AccountHeadList = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Include(x => x.AccountCategorys)
        //           .Where(y => y.AccountCategoryId == CategoryId && y.AccType == "G")
        //           .Select(g => new
        //           {
        //               g.Id,
        //               g.AccName,
        //               g.AccCode,
        //               g.NumericNumber,
        //               ParentCode = g.vAccountGroupHead.AccCode,
        //               CategoryId = g.AccountCategoryId,
        //               CategoryName = g.AccountCategorys.AccountCategoryName,

        //           }).ToList();


        //        //if (CategoryId > 0)
        //        //{
        //        //    var OtherAccountHeadList = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Include(x => x.AccountCategorys)
        //        // .Where(y => y.ParentId == CategoryId && y.vAccountGroupHead.AccType == "L")
        //        // .Select(g => new
        //        // {
        //        //     g.Id,
        //        //     g.AccName,
        //        //     g.AccCode,
        //        //     g.NumericNumber,
        //        //     ParentCode = g.vAccountGroupHead.AccCode,
        //        //     CategoryId = g.AccountCategoryId,
        //        //     CategoryName = g.AccountCategorys.AccountCategoryName,

        //        // }).ToList();

        //        //    AccountHeadList.AddRange(OtherAccountHeadList);

        //        //}

        //        var OtherAccountHeadList = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Include(x => x.AccountCategorys)
        //           .Where(y => y.vAccountGroupHead.AccountCategoryId == CategoryId && y.vAccountGroupHead.AccType == "G")
        //           .Select(g => new
        //           {
        //               g.Id,
        //               g.AccName,
        //               g.AccCode,
        //               g.NumericNumber,
        //               ParentCode = g.vAccountGroupHead.AccCode,
        //               CategoryId = g.AccountCategoryId,
        //               CategoryName = g.AccountCategorys.AccountCategoryName,

        //           }).ToList();

        //        AccountHeadList.AddRange(OtherAccountHeadList);
        //        //AccountHeadList.AddRange(accountheadlistbycategory);



        //        return Json(new { ParentHeadList = AccountHeadList });
        //    }

        //    catch (Exception ex)
        //    {
        //        return Json(new { success = false, values = ex.Message.ToString() });
        //    }
        //}


        [HttpPost]
        [AllowAnonymous]
        public JsonResult PrevPurchaseList(int id)
        {
            try
            {



                var PrevPurchaseList = (from g in _purchaseItemsRepository.All().Include(x => x.Product)
                                        .Include(x => x.PurchaseModel).ThenInclude(x => x.SupplierModel)
                                        .Include(x => x.PurchaseModel).ThenInclude(x => x.DocTypeList)
                                        .Where(y => y.ProductId == id && y.PurchaseModel.DocTypeList.DocType != "Purchase Order")
                                        let SalesUnitPriceRow = g.Product.SalesItems.Where(x => x.ProductId == g.ProductId).OrderByDescending(x => x.SalesModel.SalesDate >= g.PurchaseModel.PurchaseDate).FirstOrDefault().Price
                                        select new
                                        {
                                            g.ProductId,
                                            PurchaseCode = g.PurchaseModel.PurchaseCode,
                                            PurchaseDate = g.PurchaseModel.PurchaseDate.ToString("dd-MMM-yy"),
                                            ProductName = g.Product.Name,
                                            SupplierName = g.PurchaseModel.SupplierModel.SupplierName,
                                            Quantity = g.Quantity,
                                            UnitPrice = g.Price,
                                            Amount = g.Amount,
                                            //SalesUnitPrice = g.SalesUnitPrice,
                                            SalesUnitPrice = g.SalesUnitPrice == 0 ? SalesUnitPriceRow : g.SalesUnitPrice,
                                            ProfitPer = g.ProfitPer == 0 ? ((SalesUnitPriceRow - g.Price) / g.Price) * 100 : g.ProfitPer
                                        }).ToList().TakeLast(10);






                //var PrevPurchaseList = _purchaseItemsRepository.All().Include(x => x.Product)
                //    .Include(x => x.PurchaseModel).ThenInclude(x => x.SupplierModel)
                //    .Include(x => x.PurchaseModel).ThenInclude(x => x.DocTypeList)
                //    .Where(y => y.ProductId == id && y.PurchaseModel.DocTypeList.DocType != "Purchase Order")
                //    .Select(g => new
                //    {
                //        g.ProductId,
                //        PurchaseCode = g.PurchaseModel.PurchaseCode,
                //        PurchaseDate = g.PurchaseModel.PurchaseDate.ToString("dd-MMM-yy"),
                //        ProductName = g.Product.Name,
                //        SupplierName = g.PurchaseModel.SupplierModel.SupplierName,
                //        Quantity = g.Quantity,
                //        UnitPrice = g.Price,
                //        Amount = g.Amount,
                //        //SalesUnitPrice = g.SalesUnitPrice,
                //        SalesUnitPrice = g.SalesUnitPrice == 0 ?  1 : g.SalesUnitPrice,
                //        ProfitPer = g.ProfitPer

                //    }).ToList().TakeLast(10);



                return Json(new { PrevPurchaseList = PrevPurchaseList });
            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }

        [AllowAnonymous]
        [HttpPost]
        // public ActionResult AddAccountHeadByJson(AccountHeadModel model)
        public IActionResult AddAccountHeadABC(AccountHeadModel model)
        {

            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    if (model.AccCode == null || model.AccCode == "")
                    {
                        var parentdata = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.Id == model.ParentId).FirstOrDefault();
                        var accountdatamaxid = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.ParentId == model.ParentId).OrderByDescending(x => x.Id).FirstOrDefault();
                        model.AccCode = parentdata.AccCode + (accountdatamaxid.NumericNumber + 1).ToString().PadLeft(2, '0').ToString();
                        model.NumericNumber = accountdatamaxid.NumericNumber + 1;
                    }

                    _accountHeadRepository.Insert(model);



                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.AccName.ToString());
                    return Json(new { success = "1", message = "Data Save Successfully" });

                }
                else
                {
                    _accountHeadRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.AccName.ToString());
                    return Json(new { success = "1", message = "Data Update Successfully" });

                }
                return RedirectToAction("AccountHeadList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";



                }
                else
                {
                    ViewBag.ActionType = "Edit";
                    ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();
                }
            }
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddAccountHead(AccountHeadModel model)
        {

            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    if (model.AccCode == null || model.AccCode == "")
                    {
                        var parentdata = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.Id == model.ParentId).FirstOrDefault();
                        var accountdatamaxid = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.ParentId == model.ParentId).OrderByDescending(x => x.Id).FirstOrDefault();
                        model.AccCode = parentdata.AccCode + (accountdatamaxid.NumericNumber + 1).ToString().PadLeft(2, '0').ToString();
                        model.NumericNumber = accountdatamaxid.NumericNumber + 1;
                    }

                    _accountHeadRepository.Insert(model);



                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.AccName.ToString());

                    return RedirectToAction("AddAccountHead");

                }
                else
                {
                    _accountHeadRepository.Update(model, model.Id);

                    //if (model.AccType == "G" && model.ParentId != previousinfo.ParentId)
                    if (model.AccType == "G")
                    {
                        ///for updating child 
                        SqlParameter[] sqlParameter = new SqlParameter[2];
                        sqlParameter[0] = new SqlParameter("@ComId", model.ComId);
                        sqlParameter[1] = new SqlParameter("@ParentCode", model.AccCode);

                        Helper.ExecProc("[Acc_AccCodeSerializationByParentCode]", sqlParameter);

                    }

                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.AccName.ToString());

                    return RedirectToAction("AccountHeadList");

                }

            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";



                }
                else
                {
                    ViewBag.ActionType = "Edit";
                    ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditAccountHead(int AccountHeadId)
        {
            ViewBag.ActionType = "Edit";
            var AccountHead = _accountHeadRepository.Find(AccountHeadId);
            ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();
            ViewBag.AccumulatedDepId = new SelectList(_accountHeadRepository.All().Where(x => x.AccCode.Contains("1-3-1")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            ViewBag.DepExpenseId = new SelectList(_accountHeadRepository.All().Where(x => x.AccCode.Contains("4-2-2")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            ViewBag.CountryId = new SelectList(_countryRepository.All().Where(x => x.isActive == true), "Id", "CurrencyShortName", AccountHead.CountryId).ToList();
            ViewBag.AccountCategoryId = _accountCategoryRepository.GetAllForDropDown();



            return View("AddAccountHead", AccountHead);
        }

        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetTerm(int TermId)
        {
            try
            {

                var accountData = _termRepository.AllData().Where(x => x.Id == TermId)
                    .Select(x => new
                    {
                        x.Id,
                        x.TermName,
                        x.DueInFixedDays,
                        x.DueByDayOfMonth,
                        x.DueNextMonthWithinDays,
                    }).FirstOrDefault();

                //return Json(singleCustomer);
                return Json(new { success = "1", data = accountData });
            }
            catch (Exception ex)
            {
                return Json(new { success = "0", message = ex });
                //throw ex;
            }
        }


        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetAccountHead(int AccountHeadId)
        {
            try
            {

                var accountData = _accountHeadRepository.All().Where(x => x.Id == AccountHeadId)
                    .Select(x => new
                    {
                        x.Id,
                        x.AccName,
                        x.AccountCategoryId,
                        CategoryName = x.AccountCategorys.AccountCategoryName,
                        x.ParentId,
                        parentName = x.vAccountGroupHead.AccName,
                        x.AccCode,
                        x.AccType,
                        x.CountryId,
                        x.OpDebit,
                        x.OpCredit,
                        x.Description,
                    }).FirstOrDefault();

                //return Json(singleCustomer);
                return Json(new { success = "1", data = accountData });


            }
            catch (Exception ex)
            {
                return Json(new { success = "0", message = ex });
                //throw ex;
            }
        }
        //[HttpGet]
        //public ActionResult AddAccountHeadUnder(int AccountHeadId)
        //{
        //    ViewBag.ActionType = "Create";
        //    var AccountHead = _accountHeadRepository.Find(AccountHeadId);
        //    AccountHead.Id = 0;
        //    AccountHead.AccName = "";
        //    ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();

        //    return View("AddAccountHead", AccountHead);
        //}
        [HttpGet]
        public ActionResult DeleteAccountHead(int AccountHeadId)
        {
            var model = _accountHeadRepository.Find(AccountHeadId);

            if (model != null)
            {
                if (_accVoucherSubRepository.All().Where(x => x.AccId == AccountHeadId).ToList().Count() > 1)
                {
                    TempData["Message"] = "Data Delete Not Possible";
                    TempData["Status"] = "3";
                    return RedirectToAction("AccountHeadList");
                }

                _accountHeadRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccName);


                return RedirectToAction("AccountHeadList");
            }
            return RedirectToAction("AccountHeadList");


            //ViewBag.ActionType = "Delete";
            //var AccountHead = _accountHeadRepository.Find(AccountHeadId);
            //ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();
            //ViewBag.AccumulatedDepId = new SelectList(_accountHeadRepository.All().Where(x => x.AccCode.Contains("1-3-1")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            //ViewBag.DepExpenseId = new SelectList(_accountHeadRepository.All().Where(x => x.AccCode.Contains("4-2-2")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            //ViewBag.CountryId = new SelectList(_countryRepository.All().Where(x => x.isActive == true), "Id", "CurrencyShortName", AccountHead.CountryId).ToList();

            //return View("AddAccountHead", AccountHead);
        }




        [HttpGet]
        [AllowAnonymous]

        public JsonResult InactiveTerm(int TermId)
        {
            try
            {


                var model = _termRepository.Find(TermId);

                if (model != null)
                {

                    //_accountHeadRepository.Delete(model);
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _termRepository.Update(model, TermId);
                        return Json(new { success = "1", msg = "Inactivated Successfully" });

                    }
                    else if (model.IsDelete == true)
                    {
                        model.IsDelete = false;
                        _termRepository.Update(model, TermId);
                        return Json(new { success = "1", msg = "Activated Successfully." });
                    }

                    //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Data Deleted Successfully", model.Id.ToString(), "Delete", model.AccName);

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }







        [HttpPost]
        [AllowAnonymous]

        public JsonResult BatchDeleteBill(int BillId)
        {
            try
            {


                var model = _purchaseRepository.Find(BillId);

                if (model != null)
                {

                    //_accountHeadRepository.Delete(model);
                    if (model.IsDelete == false)
                    {
                        model.IsDelete = true;
                        _purchaseRepository.Update(model, BillId);
                        return Json(new { success = "1", msg = "Deleted Successfully" });

                    }
                    //else if (model.IsDelete == true)
                    //{
                    //    model.IsDelete = false;
                    //    _purchaseRepository.Update(model, BillId);
                    //    return Json(new { success = "1", msg = "Restored Successfully." });
                    //}

                    //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Data Deleted Successfully", model.Id.ToString(), "Delete", model.AccName);

                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }








        [HttpPost]
        [AllowAnonymous]
        public JsonResult BatchDeleteSupplier(List<int> ids)
        {
            try
            {
                if (ids != null && ids.Count > 0)
                {
                    foreach (var id in ids)
                    {
                        var model = _supplierRepository.Find(id);

                        if (model != null && model.IsDelete == false)
                        {
                            model.IsDelete = true;
                            _supplierRepository.Update(model, id);
                        }
                    }

                    return Json(new { success = "1", msg = "Batch Inactivated Successfully" });
                }
                else
                {
                    return Json(new { success = "0", msg = "No items found to Inactivate." });
                }
            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "Error: " + ex.Message });
            }
        }



        [HttpPost]
        [AllowAnonymous]
        public JsonResult RestoreBatchDeletedSupplier(List<int> ids)
        {
            try
            {
                if (ids != null && ids.Count > 0)
                {
                    foreach (var id in ids)
                    {
                        var model = _supplierRepository.Find(id);

                        if (model != null && model.IsDelete == true)
                        {
                            model.IsDelete = false;
                            _supplierRepository.Update(model, id);
                        }
                    }

                    return Json(new { success = "1", msg = "Batch Activated Successfully" });
                }
                else
                {
                    return Json(new { success = "0", msg = "No items found to Activate." });
                }
            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "Error: " + ex.Message });
            }
        }







        [HttpGet]
        [AllowAnonymous]

        public JsonResult InactiveCOA(int AccountHeadId)
        {
            try
            {


                var model = _accountHeadRepository.Find(AccountHeadId);

                if (model != null)
                {
                    if (_accVoucherSubRepository.All().Where(x => x.AccId == AccountHeadId).ToList().Count() > 1)
                    {
                        return Json(new { success = "0", msg = "Already in use in voucher" });
                    }

                    //_accountHeadRepository.Delete(model);
                    if (model.isInactive == false)
                    {
                        model.isInactive = true;
                        _accountHeadRepository.Update(model, AccountHeadId);
                    }
                    else if (model.isInactive == true)
                    {
                        return Json(new { success = "0", msg = "It Is Already Inactivated." });
                    }

                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Data Deleted Successfully", model.Id.ToString(), "Delete", model.AccName);

                    return Json(new { success = "1", msg = "Inactivated Successfully" });
                }
                return Json(new { success = "0", msg = "No items found to Inactivate." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }

        [HttpGet]
        [AllowAnonymous]

        public JsonResult DeleteCOA(int AccountHeadId)
        {
            try
            {


                var model = _accountHeadRepository.Find(AccountHeadId);

                if (model != null)
                {
                    if (_accVoucherSubRepository.All().Where(x => x.AccId == AccountHeadId).ToList().Count() > 1)
                    {
                        return Json(new { success = "0", msg = "Already in use in voucher" });
                    }

                    _accountHeadRepository.Delete(model);
                    //_accountHeadRepository.Isdeletetrue(model);

                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Data Deleted Successfully", model.Id.ToString(), "Delete", model.AccName);

                    return Json(new { success = "1", msg = "Deleted Successfully" });
                }
                return Json(new { success = "0", msg = "No items found to delete." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }



        //[HttpGet]
        ////[AllowAnonymous]
        //[OverridableAuthorize]

        //public JsonResult DeleteSupplierQB(int SupplierId)
        //{
        //    try
        //    {


        //        var model = _supplierRepository.Find(SupplierId);

        //        if (model != null)
        //        {
        //            //if (_accVoucherSubRepository.All().Where(x => x.AccId == AccountHeadId).ToList().Count() > 1)
        //            //{
        //            //    return Json(new { success = "0", msg = "Already in use in voucher" });
        //            //}

        //            _supplierRepository.Delete(model);
        //            //_accountHeadRepository.Isdeletetrue(model);

        //            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), "Data Deleted Successfully", model.Id.ToString(), "Delete", model.AccName);

        //            return Json(new { success = "1", msg = "Deleted Successfully" });
        //        }
        //        return Json(new { success = "0", msg = "No items found to delete." });

        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
        //        throw ex;
        //    }
        //}

        [HttpPost]
        public ActionResult DeleteAccountHeadList(int AccountHeadId)
        {
            var model = _accountHeadRepository.Find(AccountHeadId);

            if (model != null)
            {
                if (_accVoucherSubRepository.All().Where(x => x.AccId == AccountHeadId).ToList().Count() > 1)
                {
                    TempData["Message"] = "Data Delete Not Possible";
                    TempData["Status"] = "3";
                    return RedirectToAction("AccountHeadList");
                }

                _accountHeadRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccName);

                return Json(new { success = "1", message = TempData["Message"] });
            }
            return Json(new { success = false, message = "Error deleting data" });
        }


        //[HttpPost, ActionName("DeleteAccountHead")]
        //      [ValidateAntiForgeryToken]
        [HttpPost]
        [AllowAnonymous]
        public JsonResult DeleteAccount(int AccountHeadTestId)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");


                AccountHeadModel model = _accountHeadRepository.All().Where(c => c.ComId == ComId && c.Id == AccountHeadTestId).FirstOrDefault();


                int ExistAccIdVoucher = _transactionRepository.All().Where(x => x.DebitAccountId == model.Id).Count();
                int ExistAccIdVoucherPayType = _transactionRepository.All().Where(x => x.CreditAccountId == model.Id).Count();
                int ExistAccIdSubAccountsHead = _accountHeadRepository.All().Where(x => x.ParentId == model.Id && x.ComId == ComId).Count();



                ///blocking for existing data in the voucher
                //////blocking for it have some sub account or ledger account
                if (ExistAccIdVoucher > 0)
                {

                    return Json(new { Success = 0, ex = new Exception("Unable to Delete . Not Possible to Change the Type. Cause It Already Contains Some Voucher.").Message.ToString() });

                }
                else if (ExistAccIdSubAccountsHead > 0 || ExistAccIdVoucherPayType > 0)
                {

                    return Json(new { Success = 0, ex = new Exception("Unable to Delete . Not Possible to Change the Type. Cause It Already Contains Some Sub Accounts Head / Group").Message.ToString() });

                }
                else
                {
                    _accountHeadRepository.Delete(model);

                    TempData["Message"] = "Data Delete Successfully";
                    TempData["Status"] = "3";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccName + " " + model.AccCode);



                    return Json(new { Success = 1, AccId = model.ParentId, ex = "Delete Done Successfully." });

                }


                //return Json(new { Success = 1, AccId = model.ParentId, ex = "" });

            }
            catch (Exception ex)
            {

                return Json(new { Success = 0, ex = ex.Message.ToString() });

            }

        }

        //[HttpPost]
        //public ActionResult DeleteAccountHead(AccountHeadModel model)
        //{
        //    var AccountHead = _accountHeadRepository.Find(model.Id);
        //    try
        //    {



        //        //ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();
        //        _accountHeadRepository.Delete(model);

        //        TempData["Message"] = "Data Delete Successfully";
        //        TempData["Status"] = "3";
        //        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccName);

        //        return View("AccountHeadList", AccountHead);

        //    }
        //    catch (Exception ex)
        //    {
        //        ViewBag.ActionType = "Delete";

        //        ViewBag.AccountGroupHead = _accountHeadRepository.GetAccountGroupHeadForDropDown();

        //        return View("AddAccountHead", AccountHead);
        //        //throw ex;
        //    }
        //}

        public ActionResult COATreeEditable()
        {
            var ComId = (HttpContext.Session.GetInt32("ComId"));

            var all = _accountHeadRepository.All().Include(x => x.AccountCategorys).Where(a => a.ComId == ComId).OrderBy(a => a.ParentId).ToList();

            return View(all);
        }

        [AllowAnonymous]
        public IActionResult ExternalURL()
        {

            return View();
        }


        public ActionResult RemoveAccountHead(int AccountHeadId)
        {
            var model = _accountHeadRepository.Find(AccountHeadId);
            if (model != null)
            {
                _accountHeadRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccName);


                return RedirectToAction("AccountHeadList");
            }
            return RedirectToAction("AccountHeadList");
        }
        #endregion

        #region AccountHeadSystem
        public IActionResult AccountHeadSystemList()
        {

            //var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");

            //Exec [prcProcessMonthlySubscriptionFee] 1, '01-Jan-2021','31-JAN-2021'/
            var query = $"Exec prcProcessAccountData '{ComId}'";

            SqlParameter[] sqlParameter = new SqlParameter[1];
            sqlParameter[0] = new SqlParameter("@ComId", ComId);
            Helper.ExecProc("prcProcessAccountData", sqlParameter);

            //return View(_accountHeadSystemRepository.All());
            return View();

        }
        [AllowAnonymous]
        public JsonResult GetAccountHeadSystemList()
        {
            try
            {
                //var products= _context.Products.ToList();

                var accountheadSystemlist = _accountHeadSystemRepository.All().Include(x => x.vAccountGroupHead);//.Include(x=>x.vUnit).Include(x=>x.Category);
                var query = from e in accountheadSystemlist.Where(x => x.isSystem == false)//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id) //let vAccountGroupHead = e.vAccountGroupHead.AccName
                            select new AccountHeadSystemModel
                            {
                                Id = e.Id,
                                NumericNumber = e.NumericNumber,
                                AccCode = e.AccCode,

                                AccName = e.AccName,
                                AccType = e.AccType,

                                //AccountCategory = e.AccountCategory,
                                AccountCategory = e.AccountCategorys.AccountCategoryName ?? "",

                                vAccountGroupHead = e.vAccountGroupHead,
                                isSystem = e.isSystem,
                            };

                var parser = new Parser<AccountHeadSystemModel>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpGet]
        public ActionResult AddAccountHeadSystem(int AccountHeadSystemId = 0)
        {
            ViewBag.ActionType = "Create";
            int defaultcurrency = 18;
            ViewBag.AccountGroupHead = _accountHeadSystemRepository.GetAccountGroupHeadForDropDown();
            ViewBag.AccumulatedDepId = new SelectList(_accountHeadSystemRepository.All().Where(x => x.AccCode.Contains("1-3-1")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            ViewBag.DepExpenseId = new SelectList(_accountHeadSystemRepository.All().Where(x => x.AccCode.Contains("4-2-2")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            ViewBag.CountryId = new SelectList(_countryRepository.All().Where(x => x.isActive == true), "Id", "CurrencyShortName", defaultcurrency).ToList();
            ViewBag.AccountCategoryId = _accountCategoryRepository.GetAllForDropDown();


            var AccountHeadSystemdata = new AccountHeadSystemModel();

            if (AccountHeadSystemId > 0)
            {
                AccountHeadSystemdata = _accountHeadSystemRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.Id == AccountHeadSystemId).FirstOrDefault();
                AccountHeadSystemdata.ParentId = AccountHeadSystemId;

            }
            else
            {
                AccountHeadSystemdata = _accountHeadSystemRepository.All().Include(x => x.vAccountGroupHead).OrderByDescending(x => x.Id).FirstOrDefault();
            }

            if (AccountHeadSystemdata != null)
            {
                AccountHeadSystemdata.Id = 0;
                AccountHeadSystemdata.AccType = "L";
                AccountHeadSystemdata.AccName = "";

                //AccountHeadSystemdata.AccCode = AccountHeadSystemdata.vAccountGroupHead.AccCode + (AccountHeadSystemdata.NumericNumber + 1).ToString().PadLeft(2, '0').ToString();
                AccountHeadSystemdata.NumericNumber = AccountHeadSystemdata.NumericNumber + 1;
            }


            return View(AccountHeadSystemdata);
        }



        [HttpPost]
        [AllowAnonymous]
        public JsonResult ParentAccountSystemInfo(int id)
        {
            try
            {

                var AccountHeadSysteminfo = _accountHeadSystemRepository.All().Include(x => x.vAccountGroupHead)
                    .Where(y => y.Id == id)
                    .Select(g => new
                    {
                        g.AccountCategoryId,
                        g.AccCode,
                        g.NumericNumber
                    }).SingleOrDefault();


                var AccountHeadSystemList = _accountHeadSystemRepository.All().Include(x => x.vAccountGroupHead)
                    .Where(y => y.ParentId == id)
                    .Select(g => new
                    {
                        g.AccName,
                        g.AccCode,
                        g.NumericNumber
                    }).ToList();



                return Json(new { AccountHeadSysteminfo = AccountHeadSysteminfo, AccountHeadSystemList = AccountHeadSystemList });
            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddAccountHeadSystem(AccountHeadSystemModel model)
        {

            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    if (model.AccCode == null || model.AccCode == "")
                    {
                        var parentdata = _accountHeadSystemRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.Id == model.ParentId).FirstOrDefault();
                        var accountdatamaxid = _accountHeadSystemRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.ParentId == model.ParentId).OrderByDescending(x => x.Id).FirstOrDefault();
                        model.AccCode = parentdata.AccCode + (accountdatamaxid.NumericNumber + 1).ToString().PadLeft(2, '0').ToString();
                        model.NumericNumber = accountdatamaxid.NumericNumber + 1;
                    }

                    _accountHeadSystemRepository.Insert(model);



                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.AccName.ToString());

                }
                else
                {
                    _accountHeadSystemRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.AccName.ToString());

                }
                return RedirectToAction("AccountHeadSystemList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                    ViewBag.AccountGroupHead = _accountHeadSystemRepository.GetAccountGroupHeadForDropDown();
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditAccountHeadSystem(int AccountHeadSystemId)
        {
            ViewBag.ActionType = "Edit";
            var AccountHeadSystem = _accountHeadSystemRepository.Find(AccountHeadSystemId);
            ViewBag.AccountGroupHead = _accountHeadSystemRepository.GetAccountGroupHeadForDropDown();
            ViewBag.AccumulatedDepId = new SelectList(_accountHeadSystemRepository.All().Where(x => x.AccCode.Contains("1-3-1")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            ViewBag.DepExpenseId = new SelectList(_accountHeadSystemRepository.All().Where(x => x.AccCode.Contains("4-2-2")).Select(s => new { Text = s.AccName + " - [ " + s.AccCode + " ] " + " - [ " + s.AccType + " ] ", Value = s.Id }).ToList(), "Value", "Text").ToList();
            ViewBag.AccountCategoryId = _accountCategoryRepository.GetAllForDropDown();



            return View("AddAccountHeadSystem", AccountHeadSystem);
        }
        //[HttpGet]
        //public ActionResult AddAccountHeadSystemUnder(int AccountHeadSystemId)
        //{
        //    ViewBag.ActionType = "Create";
        //    var AccountHeadSystem = _accountHeadSystemRepository.Find(AccountHeadSystemId);
        //    AccountHeadSystem.Id = 0;
        //    AccountHeadSystem.AccName = "";
        //    ViewBag.AccountGroupHead = _accountHeadSystemRepository.GetAccountGroupHeadForDropDown();

        //    return View("AddAccountHeadSystem", AccountHeadSystem);
        //}
        [HttpGet]
        public ActionResult DeleteAccountHeadSystem(int AccountHeadSystemId)
        {
            var model = _accountHeadSystemRepository.Find(AccountHeadSystemId);

            if (model != null)
            {
                if (_accVoucherSubRepository.All().Where(x => x.AccId == AccountHeadSystemId).ToList().Count() > 1)
                {
                    TempData["Message"] = "Data Delete Not Possible";
                    TempData["Status"] = "3";
                    return RedirectToAction("AccountHeadSystemList");
                }

                _accountHeadSystemRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccName);


                return RedirectToAction("AccountHeadSystemList");
            }
            return RedirectToAction("AccountHeadSystemList");



        }

        //[HttpPost, ActionName("DeleteAccountHeadSystem")]
        //      [ValidateAntiForgeryToken]
        [HttpPost]
        [AllowAnonymous]
        public JsonResult DeleteAccountHeadSystemTest(int AccountHeadSystemTestId)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");


                AccountHeadSystemModel model = _accountHeadSystemRepository.All().Where(c => c.Id == AccountHeadSystemTestId).FirstOrDefault();


                int ExistAccIdVoucher = _transactionRepository.All().Where(x => x.DebitAccountId == model.Id).Count();
                int ExistAccIdVoucherPayType = _transactionRepository.All().Where(x => x.CreditAccountId == model.Id).Count();
                int ExistAccIdSubAccountsHead = _accountHeadSystemRepository.All().Where(x => x.ParentId == model.Id).Count();



                ///blocking for existing data in the voucher
                //////blocking for it have some sub account or ledger account
                if (ExistAccIdVoucher > 0)
                {

                    return Json(new { Success = 0, ex = new Exception("Unable to Delete . Not Possible to Change the Type. Cause It Already Contains Some Voucher.").Message.ToString() });

                }
                else if (ExistAccIdSubAccountsHead > 0 || ExistAccIdVoucherPayType > 0)
                {

                    return Json(new { Success = 0, ex = new Exception("Unable to Delete . Not Possible to Change the Type. Cause It Already Contains Some Sub Accounts Head / Group").Message.ToString() });

                }
                else
                {
                    _accountHeadSystemRepository.Delete(model);

                    TempData["Message"] = "Data Delete Successfully";
                    TempData["Status"] = "3";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccName + " " + model.AccCode);



                    return Json(new { Success = 1, AccId = model.ParentId, ex = "Delete Done Successfully." });

                }


                //return Json(new { Success = 1, AccId = model.ParentId, ex = "" });

            }
            catch (Exception ex)
            {

                return Json(new { Success = 0, ex = ex.Message.ToString() });

            }

        }



        public ActionResult COATreeInitializationEditable()
        {
            var ComId = (HttpContext.Session.GetInt32("ComId"));
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();

            var all = _accountHeadSystemRepository.All().Include(x => x.AccountCategorys).OrderBy(a => a.ParentId).ToList();

            return View(all);
        }




        public ActionResult RemoveAccountHeadSystem(int AccountHeadSystemId)
        {
            var model = _accountHeadSystemRepository.Find(AccountHeadSystemId);
            if (model != null)
            {
                _accountHeadSystemRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccName);


                return RedirectToAction("AccountHeadSystemList");
            }
            return RedirectToAction("AccountHeadSystemList");
        }
        #endregion


        #region Transaction
        public IActionResult TransactionList()
        {
            ViewBag.User = _userAccountRepository.UserAccountForDropdown();


            SelectListItem abcd = new SelectListItem() { Text = "Please Select", Value = "" };

            var allwarehoue = _FromWarehousePermissionRepository.GetAllForDropDown();
            if (allwarehoue.Count() == 0)
            {
                allwarehoue = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            }
            else
            {
                allwarehoue.Append(abcd);
            }

            ViewBag.Warehouse = allwarehoue;



            //_transactionRepository.All().Include(x => x.Account).Include(x => x.CreditAccount).Where(x=>x.isSystem == false)
            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult ExecuteRecurrTransactionForTrxn()
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");

                var data = recurringDetailsRepository.All().Where(x => x.ComId == ComId && x.TransactionId != null).Include(x => x.Transaction).ToList();

                foreach (var item in data)
                {
                    if (item.TemplateType != "Unscheduled")
                    {
                        string uniqueNumber = "DT-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                        if (item.Interval == "Daily")
                        {
                            if (item.NextDate == DateTime.Today && ((item.occurences > 0 && item.End_ == "After") || (item.PreviousDate != DateTime.Today)))
                            {

                                if (item.occurences > 0 && item.End_ == "After")
                                {
                                    item.NextDate = item.PreviousDate?.AddDays(item.Every_);
                                    item.occurences--;
                                }
                                if (item.PreviousDate != DateTime.Today)
                                {
                                    if (item.PreviousDate?.AddDays(item.Every_) <= item.RecurringEndDate)
                                    {
                                        item.NextDate = item.PreviousDate?.AddDays(item.Every_);
                                    }

                                }
                                if (item.End_ == "None" && item.PreviousDate != DateTime.Today)
                                {
                                    item.NextDate = item.PreviousDate?.AddDays(item.Every_);
                                }
                                item.PreviousDate = DateTime.Today;
                                var salesData = _transactionRepository.All().Where(x => x.Id == item.TransactionId).AsNoTracking().FirstOrDefault();
                                if (salesData != null)
                                {
                                    salesData.Id = 0;
                                    salesData.TransactionCode = uniqueNumber;
                                    salesData.IsRecurring = false;
                                    salesData.InputDate = DateTime.Now;

                                }


                                _transactionRepository.Insert(salesData);
                                recurringDetailsRepository.Update(item, item.Id);
                            }

                        }
                        if (item.Interval == "Weekly")
                        {
                            if (item.NextDate == DateTime.Today && ((item.occurences > 0 && item.End_ == "After") || (item.PreviousDate != DateTime.Today)))
                            {
                                DateTime nextDate = (DateTime)FindNextDate(item.NextDate, item.Every_, item.Week_);

                                if (item.occurences > 0 && item.End_ == "After")
                                {
                                    item.NextDate = nextDate;
                                    item.occurences--;
                                }
                                if (item.PreviousDate != DateTime.Today)
                                {
                                    if (item.PreviousDate?.AddDays(item.Every_) <= item.RecurringEndDate)
                                    {
                                        item.NextDate = nextDate;
                                    }

                                }
                                if (item.End_ == "None" && item.PreviousDate != DateTime.Today)
                                {
                                    item.NextDate = nextDate;
                                }

                                item.PreviousDate = DateTime.Today;

                                var salesData = _transactionRepository.All().Where(x => x.Id == item.TransactionId).FirstOrDefault();
                                if (salesData != null)
                                {

                                    salesData.Id = 0;
                                    salesData.TransactionCode = uniqueNumber;
                                    salesData.IsRecurring = false;
                                    salesData.InputDate = DateTime.Now;

                                }


                                _transactionRepository.Insert(salesData);
                                recurringDetailsRepository.Update(item, item.Id);
                            }
                        }
                        if (item.Interval == "Yearly")
                        {
                            if (item.NextDate == DateTime.Today && ((item.occurences > 0 && item.End_ == "After") || (item.PreviousDate != DateTime.Today)))
                            {
                                int dayOfMonth = GetNumericDay(item.Integer_);
                                DateTime nextDate = GetNextTransactionDate(item.RecurringStartDate, dayOfMonth, item.Month_, 1);
                                if (item.occurences > 0 && item.End_ == "After")
                                {
                                    item.NextDate = nextDate;
                                    item.occurences--;
                                }
                                if (item.PreviousDate != DateTime.Today)
                                {
                                    if (item.PreviousDate?.AddDays(item.Every_) <= item.RecurringEndDate)
                                    {
                                        item.NextDate = nextDate;
                                    }

                                }
                                if (item.End_ == "None" && item.PreviousDate != DateTime.Today)
                                {
                                    item.NextDate = nextDate;
                                }

                                item.PreviousDate = DateTime.Today;

                                var salesData = _transactionRepository.All().Where(x => x.Id == item.TransactionId).FirstOrDefault();
                                if (salesData != null)
                                {

                                    salesData.Id = 0;
                                    salesData.TransactionCode = uniqueNumber;
                                    salesData.IsRecurring = false;
                                    salesData.InputDate = DateTime.Now;

                                }


                                _transactionRepository.Insert(salesData);
                                recurringDetailsRepository.Update(item, item.Id);
                            }
                        }
                        if (item.Interval == "Monthly")
                        {
                            if (item.NextDate == DateTime.Today && ((item.occurences > 0 && item.End_ == "After") || (item.PreviousDate != DateTime.Today)))
                            {
                                if (item.Count_ == "day")
                                {
                                    int dayOfMonth = GetNumericDay(item.Integer_);
                                    DateTime nextDate = GetNextTxnDateForMonth(item.RecurringStartDate, dayOfMonth, item.Every_);
                                    if (item.occurences > 0 && item.End_ == "After")
                                    {
                                        item.NextDate = nextDate;
                                        item.occurences--;
                                    }
                                    if (item.PreviousDate != DateTime.Today)
                                    {
                                        if (item.PreviousDate?.AddDays(item.Every_) <= item.RecurringEndDate)
                                        {
                                            item.NextDate = nextDate;
                                        }

                                    }
                                    if (item.End_ == "None" && item.PreviousDate != DateTime.Today)
                                    {
                                        item.NextDate = nextDate;
                                    }
                                }
                                else
                                {
                                    DateTime nextDate = CalculateNextTransactionDate(item.RecurringStartDate, item.Every_, item.Week_, item.Count_);
                                    if (item.occurences > 0 && item.End_ == "After")
                                    {
                                        item.NextDate = nextDate;
                                        item.occurences--;
                                    }
                                    if (item.PreviousDate != DateTime.Today)
                                    {
                                        if (item.PreviousDate?.AddDays(item.Every_) <= item.RecurringEndDate)
                                        {
                                            item.NextDate = nextDate;
                                        }

                                    }
                                    if (item.End_ == "None" && item.PreviousDate != DateTime.Today)
                                    {
                                        item.NextDate = nextDate;
                                    }
                                }
                                item.PreviousDate = DateTime.Today;

                                var salesData = _transactionRepository.All().Where(x => x.Id == item.TransactionId).FirstOrDefault();
                                if (salesData != null)
                                {

                                    salesData.Id = 0;
                                    salesData.TransactionCode = uniqueNumber;
                                    salesData.IsRecurring = false;
                                    salesData.InputDate = DateTime.Now;

                                }


                                _transactionRepository.Insert(salesData);
                                recurringDetailsRepository.Update(item, item.Id);
                            }



                        }
                    }

                }

                return Json(new { Success = 1, ex = "Data " });
            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }

        static DateTime GetNextTxnDateForMonth(DateTime startDate, int dayOfMonth, int monthInterval)
        {
            DateTime nextDate = startDate.AddMonths(monthInterval);

            nextDate = new DateTime(nextDate.Year, nextDate.Month, dayOfMonth);

            while (nextDate <= startDate)
            {
                nextDate = nextDate.AddMonths(monthInterval);
            }

            return nextDate;
        }
        static DateTime CalculateNextTransactionDate(DateTime startDate, int monthInterval, string weekdayName, string week)
        {
            int weekNumber = 5;
            if (week == "first")
            {
                weekNumber = 1;
            }
            if (week == "second")
            {
                weekNumber = 2;
            }
            if (week == "third")
            {
                weekNumber = 3;
            }
            if (week == "fourth")
            {
                weekNumber = 4;
            }
            DayOfWeek targetDayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), weekdayName);
            DateTime nextWeekday = startDate.AddDays((7 + (targetDayOfWeek - startDate.DayOfWeek)) % 7);
            DateTime targetMonth = nextWeekday.AddMonths(monthInterval);
            int daysToAdd = (weekNumber - 1) * 7;

            return targetMonth.AddDays(daysToAdd);
        }
        static DateTime? FindNextDate(DateTime? startDate, int weeksToSkip, string targetWeekday)
        {
            if (!startDate.HasValue)
            {
                return null;
            }
            DayOfWeek targetDayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), targetWeekday);

            int daysToAdd = (int)targetDayOfWeek - (int)startDate.Value.DayOfWeek + 7 * weeksToSkip;

            DateTime nextDate = startDate.Value.AddDays(daysToAdd);

            return nextDate;
        }

        static int GetNumericDay(string dayOfMonthStr)
        {
            return int.Parse(dayOfMonthStr.Substring(0, dayOfMonthStr.Length - 2));
        }


        static DateTime GetNextTransactionDate(DateTime startDate, int dayOfMonth, string targetMonth, int intervalYears)
        {
            var monthDict = new System.Collections.Generic.Dictionary<string, int>
        {
            {"January", 1}, {"February", 2}, {"March", 3}, {"April", 4},
            {"May", 5}, {"June", 6}, {"July", 7}, {"August", 8},
            {"September", 9}, {"October", 10}, {"November", 11}, {"December", 12}
        };

            DateTime nextDate = new DateTime(startDate.Year, monthDict[targetMonth], dayOfMonth);

            if (nextDate <= startDate)
            {
                nextDate = nextDate.AddYears(intervalYears);
            }

            return nextDate;
        }
        public class TransactionResult
        {
            public int Id { get; set; }

            public int? SalesId { get; set; }
            public int? PurchaseId { get; set; }

            public string? InputDateString { get; set; }
            public string? TransactionCode { get; set; }

            public string? TransactionType { get; set; }

            public string? TransactionCategory { get; set; }

            public DateTime InputDate { get; set; }
            public string? DebitAccountName { get; set; }
            public string? CreditAccountName { get; set; }
            public string? Description { get; set; }
            public string? IncomeExpenseHead { get; set; }

            public string? LocationName { get; set; }

            public string? Customer { get; set; }
            public string? Supplier { get; set; }
            public string? Member { get; set; }
            public string? Employee { get; set; }

            public string? SalesCode { get; set; }
            public string? PurchaseCode { get; set; }


            public bool isPost { get; set; }
            public string? Status { get; set; }


            public decimal TransactionAmount { get; set; }

        }


        [AllowAnonymous]
        public IActionResult GetTransactionListByPage(int? UserId, int isAll, string TransactionCategory, string Status, int? IsPosted, int? WarehouseId, int pageNo = 1, decimal pageSize = 10, string searchquery = "", string FromDate = "", string ToDate = "")
        {
            try
            {
                var ComId = (HttpContext.Session.GetInt32("ComId"));
                var sessionLuserId = (HttpContext.Session.GetInt32("UserId"));
                var UserRole = HttpContext.Session.GetString("UserRole");
                int? vatview = HttpContext.Session.GetInt32("VatViewActivate");


                var TimeZoneSettingsName = HttpContext.Session.GetString("TimeZoneSettingsName");


                DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date);
                DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date);

                if (FromDate == null || FromDate == "")
                {
                }
                else
                {
                    dtFrom = Convert.ToDateTime(FromDate);

                }
                if (ToDate == null || ToDate == "")
                {
                }
                else
                {
                    dtTo = Convert.ToDateTime(ToDate);

                }

                var TransactionList = _transactionRepository.All().Include(x => x.DebitAccount).Include(x => x.CreditAccount).Where(x => x.isSystem == false && x.isReceipt != true && x.isPayment != true && x.IsRecurring == false);
                if (vatview == null || vatview == 0) { }
                else
                {


                }
                var TransactionListDateWise = TransactionList;

                if (searchquery?.Length > 1)
                {


                    var searchitem = JsonConvert.DeserializeObject<TransactionFilterData>(searchquery);

                    if (searchitem.pageIndex != null)
                    {
                        pageNo = searchitem.pageIndex.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())
                        pageSize = searchitem.pageSize.GetValueOrDefault(); // || x.Code.ToLower().Contains(searchitem.Name.ToLower())


                    }







                }



                //UserPermission permission = HttpContext.Session.GetObject<UserPermission>("userpermission");
                //var X = _transactionRepository.All().Where(p => p.ComId == transactionComId && (p.InputDate >= dtFrom && p.InputDate <= dtTo)).ToList();
                //return View(X);


                if (UserRole == "Admin" || UserRole == "SuperAdmin")
                {
                    TransactionListDateWise = TransactionListDateWise.Where(p => (p.InputDate >= dtFrom && p.InputDate <= dtTo));

                }
                else
                {
                    var storesettings = _storeSettingRepository.All().FirstOrDefault();
                    if (storesettings.isBackDatePermission == true)
                    {
                        dtTo = Convert.ToDateTime(DateTime.Now.Date);
                        DateTime dtFromwithprevdate = Convert.ToDateTime(DateTime.Now.Date.AddDays(-storesettings.Days));

                        if (dtFrom < dtFromwithprevdate)
                        {
                            dtFrom = dtFromwithprevdate;
                        }
                    }

                    TransactionListDateWise = TransactionListDateWise.Where(p => (p.InputDate >= dtFrom && p.InputDate <= dtTo));

                    TransactionListDateWise = TransactionListDateWise.Where(p => p.LuserId == sessionLuserId);

                }

                if (UserId == null || UserId == 1)
                {
                    TransactionList = TransactionList.Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo);
                }
                else
                {
                    if (UserRole == "Admin" || UserRole == "SuperAdmin")
                    {
                    }
                    else
                    {

                        TransactionListDateWise = TransactionListDateWise.Where(p => p.LuserId == sessionLuserId);

                    }


                }


                if (WarehouseId != null)
                {
                    TransactionListDateWise = TransactionListDateWise.Where(p => p.WarehouseId == WarehouseId);
                }
                else
                {
                    var arrayabc = _FromWarehousePermissionRepository.All().Where(x => x.LuserIdAllow == sessionLuserId).Select(x => x.WarehouseId).ToList();
                    //int a = 1;
                    //List<int> IDs = new List<int> { 1, 3, 4, 8 };

                    //var warehouselist = _FromWarehousePermissionRepository.All().Select(x=>x.Id);
                    if (arrayabc.Count() > 0)
                    {
                        TransactionListDateWise = TransactionListDateWise.Where(p => arrayabc.Contains((int)p.WarehouseId));
                    }
                }



                if (Status == "Post")
                {
                    TransactionList = TransactionList.Where(p => p.isPost == true);
                }
                else if (Status == "UnPost")
                {
                    TransactionList = TransactionList.Where(p => p.isPost == false);
                }



                if (TransactionCategory != null)
                {
                    TransactionList = TransactionList.Where(p => p.TransactionCategory == TransactionCategory);
                }


                if (WarehouseId != null)
                {
                    TransactionList = TransactionList.Where(p => p.WarehouseId == WarehouseId);
                }

                if (TimeZoneSettingsName.Length > 3)
                {
                    var localtime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));
                    ViewBag.FromDate = localtime.Date.ToString("dd-MMM-yyyy");

                }

                decimal TotalRecordCount = TransactionList.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / pageSize).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                decimal skip = (pageNo - 1) * pageSize;

                // Get total number of records
                int total = TransactionList.Count();


                var query = from e in TransactionList.OrderByDescending(x => x.Id)
                            select new TransactionResult
                            {
                                Id = e.Id,
                                TransactionCode = e.TransactionCode,
                                TransactionType = e.TransactionType,
                                TransactionCategory = e.TransactionCategory,
                                LocationName = e.vWarehouse != null ? e.vWarehouse.WhShortName : "=N/A=",


                                SalesId = e.SalesId,
                                PurchaseId = e.PurchaseId,


                                InputDateString = e.InputDate.ToString("dd-MMM-yy"),
                                InputDate = e.InputDate,
                                DebitAccountName = e.DebitAccount != null ? e.DebitAccount.AccName : "=N/A=",
                                Description = e.Description,
                                CreditAccountName = e.CreditAccount != null ? e.CreditAccount.AccName : "=N/A=",
                                //PayReceiveAccountName = e.AccountPayType != null ? e.AccountPayType.AccName : "=N/A=",
                                //LiabilityAssetHead = e.AccountAssetLiability != null ? e.AccountAssetLiability.AccName : "=N/A=",

                                Customer = e.Customer != null ? e.Customer.Name : null,
                                Supplier = e.Supplier != null ? e.Supplier.SupplierName : null,
                                Member = e.Member != null ? e.Member.MembersNameBng : null,
                                Employee = e.Employee != null ? e.Employee.EmployeeName : null,
                                SalesCode = e.Sales != null ? e.Sales.SaleCode : null,
                                PurchaseCode = e.Purchase != null ? e.Purchase.PurchaseCode : null,

                                isPost = e.isPost,
                                TransactionAmount = e.TransactionAmount,
                                Status = e.isPost != false ? "Posted" : "Not Posted"
                            };


                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(pageSize.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = pageNo;
                pageinfo.PageSize = int.Parse(pageSize.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, VoucherList = abcd, PageInfo = pageinfo });

            }
            catch (Exception ex)
            {
                return Json(new { Success = "0", error = ex.Message });
                //throw ex;
            }

        }




        [AllowAnonymous]
        //public JsonResult GetSupplierList(string Status, string SupCategory)
        ///                                               string TransactionCategory, int? WarehouseId
        public JsonResult GetTransactionList(string FromDate, string ToDate, string TransactionCategory, int? UserId, int? WarehouseId, int page = 1, decimal size = 10, string searchquery = "", string Status = "")
        {
            //Dictionary<string, object> filtersab,
            try
            {
                //var products= _context.Products.ToList();

                //var abc = Name;

                var TransactionList = _transactionRepository.All()
                .Include(x => x.Customer)
                .Include(x => x.Supplier)
                .Include(x => x.Employee)

                .Include(x => x.DebitAccount)
                .Include(x => x.CreditAccount)
                //.Include(x => x.AccountPayType)

                .Include(x => x.Purchase)
                .Include(x => x.Sales)
                .Include(x => x.VoucherMain)
                .Include(x => x.vProduct)
                .Include(x => x.vCategory)



                .Where(x => x.isSystem == false);


                DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date);
                DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date);


                if (FromDate == null || FromDate == "")
                {
                }
                else
                {
                    dtFrom = Convert.ToDateTime(FromDate);

                }
                if (ToDate == null || ToDate == "")
                {
                }
                else
                {
                    dtTo = Convert.ToDateTime(ToDate);

                }



                if (searchquery?.Length > 1)
                {
                    TransactionList = TransactionList.Where(x =>
                       x.Customer.Name.ToLower().Contains(searchquery.ToString().ToLower())
                    || x.Supplier.SupplierName.ToLower().Contains(searchquery.ToString().ToLower())


                    || x.Customer.PrimaryAddress.ToLower().Contains(searchquery.ToString().ToLower())
                    || x.Supplier.PrimaryAddress.ToLower().Contains(searchquery.ToString().ToLower())


                    || x.Supplier.SupplierCode.ToLower().Contains(searchquery.ToString().ToLower())
                    || x.Customer.CustomerCode.ToLower().Contains(searchquery.ToString().ToLower())


                    || x.Sales.SaleCode.ToLower().Contains(searchquery.ToString().ToLower())
                    || x.Purchase.PurchaseCode.ToLower().Contains(searchquery.ToString().ToLower())
                    || x.vProduct.Name.ToLower().Contains(searchquery.ToString().ToLower())
                    || x.vProduct.Code.ToLower().Contains(searchquery.ToString().ToLower())
                    || x.vCategory.Name.ToLower().Contains(searchquery.ToString().ToLower())




                    //|| x.Employee.EmployeeName.ToString().Contains(y.ToString().ToLower())
                    //|| x.Member.MembersNameEng.ToString().Contains(y.ToString().ToLower())


                    || x.TransactionCode.ToLower().Contains(searchquery.ToString().ToLower())

                    //when we added this we got error in searching.
                    //|| x.Account.AccName.DefaultIfEmpty().ToString().Contains(y.ToString().ToLower())
                    //|| x.AccountAssetLiability.AccName.ToString().Contains(y.ToString().ToLower())
                    //|| x.AccountPayType.AccName.ToString().Contains(y.ToString().ToLower())

                    || x.TransactionAmount.ToString().Contains(searchquery.ToString().ToLower())
                    || x.Description.ToLower().Contains(searchquery.ToString().ToLower()));

                }
                else
                {
                    if (UserId == null || UserId == 1)
                    {
                        TransactionList = TransactionList.Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo);
                    }
                    else
                    {
                        //if (UserId == 1)
                        //{
                        //    TransactionList = TransactionList.Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo);
                        //}
                        //else
                        //{
                        TransactionList = TransactionList.Where(p => (p.InputDate >= dtFrom && p.InputDate <= dtTo) && p.LuserId == UserId);
                        //}
                    }



                    if (Status == "Post")
                    {
                        TransactionList = TransactionList.Where(p => p.isPost == true);
                    }
                    else if (Status == "UnPost")
                    {
                        TransactionList = TransactionList.Where(p => p.isPost == false);
                    }



                    if (TransactionCategory != null)
                    {
                        TransactionList = TransactionList.Where(p => p.TransactionCategory == TransactionCategory);
                    }


                    if (WarehouseId != null)
                    {
                        TransactionList = TransactionList.Where(p => p.WarehouseId == WarehouseId);
                    }

                }



                decimal TotalRecordCount = TransactionList.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);



                decimal skip = (page - 1) * size;



                var query = from e in TransactionList.OrderByDescending(x => x.Id)
                            select new
                            {
                                Id = e.Id,
                                TransactionCode = e.TransactionCode,
                                TransactionType = e.TransactionType,
                                TransactionCategory = e.TransactionCategory,
                                LocationName = e.vWarehouse != null ? e.vWarehouse.WhShortName : "=N/A=",


                                SalesId = e.SalesId,
                                PurchaseId = e.PurchaseId,

                                InputDateString = e.InputDate.ToString("dd-MMM-yy"),
                                InputDate = e.InputDate,
                                DebitAccountName = e.DebitAccount != null ? e.DebitAccount.AccName : "=N/A=",
                                Description = e.Description,
                                CreditAccountName = e.CreditAccount != null ? e.CreditAccount.AccName : "=N/A=",
                                //PayReceiveAccountName = e.AccountPayType != null ? e.AccountPayType.AccName : "=N/A=",
                                //LiabilityAssetHead = e.AccountAssetLiability != null ? e.AccountAssetLiability.AccName : "=N/A=",

                                Customer = e.Customer != null ? e.Customer.Name : null,
                                Supplier = e.Supplier != null ? e.Supplier.SupplierName : null,
                                Member = e.Member != null ? e.Member.MembersNameBng : null,
                                Employee = e.Employee != null ? e.Employee.EmployeeName : null,
                                SalesCode = e.Sales != null ? e.Sales.SaleCode : null,
                                PurchaseCode = e.Purchase != null ? e.Purchase.PurchaseCode : null,


                                Product = e.vProduct != null ? e.vProduct.Name : null,
                                Category = e.vCategory != null ? e.vCategory.Name : null,


                                isPost = e.isPost,
                                TransactionAmount = e.TransactionAmount,
                                VoucherNo = e.VoucherMain.VoucherNo,
                                VoucherId = e.VoucherId,
                                Status = e.isPost != false ? "Posted" : "Not Posted"
                            };




                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = page;
                pageinfo.PageSize = int.Parse(size.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });

            }
            catch (Exception ex)
            {
                return Json(ex.Message);
                //throw ex;
            }
        }


        public class TransactionFilterData
        {
            public int TransactionId { get; set; }
            public int UserList { get; set; }

            public string? TransactionCode { get; set; }
            public string? DocTypeName { get; set; }

            public string? InputDate { get; set; }
            public string? TransactionCategory { get; set; }
            public int? pageIndex { get; set; }
            public int? pageSize { get; set; }

        }


        [AllowAnonymous]
        public IActionResult GetTransactionList(string FromDate, string ToDate, int? UserId, int isAll, string TransactionCategory, string Status, int? WarehouseId)
        {
            try
            {
                var ComId = (HttpContext.Session.GetInt32("ComId"));

                var TransactionList = _transactionRepository.All().Where(x => x.isSystem == false);


                DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date);
                DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date);

                if (FromDate == null || FromDate == "")
                {
                }
                else
                {
                    dtFrom = Convert.ToDateTime(FromDate);

                }
                if (ToDate == null || ToDate == "")
                {
                }
                else
                {
                    dtTo = Convert.ToDateTime(ToDate);

                }

                Microsoft.Extensions.Primitives.StringValues y = "";

                var x = Request.Form.TryGetValue("search[value]", out y);

                //UserPermission permission = HttpContext.Session.GetObject<UserPermission>("userpermission");
                //var X = _transactionRepository.All().Where(p => p.ComId == transactionComId && (p.InputDate >= dtFrom && p.InputDate <= dtTo)).ToList();
                //return View(X);

                if (y.ToString().Length > 0)
                {
                }
                else
                {
                    if (UserId == null || UserId == 1)
                    {
                        TransactionList = TransactionList.Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo);
                    }
                    else
                    {
                        //if (UserId == 1)
                        //{
                        //    TransactionList = TransactionList.Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo);
                        //}
                        //else
                        //{
                        TransactionList = TransactionList.Where(p => (p.InputDate >= dtFrom && p.InputDate <= dtTo) && p.LuserId == UserId);
                        //}
                    }



                    if (Status == "Post")
                    {
                        TransactionList = TransactionList.Where(p => p.isPost == true);
                    }
                    else if (Status == "UnPost")
                    {
                        TransactionList = TransactionList.Where(p => p.isPost == false);
                    }



                    if (TransactionCategory != null)
                    {
                        TransactionList = TransactionList.Where(p => p.TransactionCategory == TransactionCategory);
                    }


                    if (WarehouseId != null)
                    {
                        TransactionList = TransactionList.Where(p => p.WarehouseId == WarehouseId);
                    }

                }


                var query = from e in TransactionList.OrderByDescending(x => x.Id)
                            select new TransactionResult
                            {
                                Id = e.Id,
                                TransactionCode = e.TransactionCode,
                                TransactionType = e.TransactionType,
                                TransactionCategory = e.TransactionCategory,
                                LocationName = e.vWarehouse != null ? e.vWarehouse.WhShortName : "=N/A=",


                                SalesId = e.SalesId,
                                PurchaseId = e.PurchaseId,

                                InputDateString = e.InputDate.ToString("dd-MMM-yy"),
                                InputDate = e.InputDate,
                                DebitAccountName = e.DebitAccount != null ? e.DebitAccount.AccName : "=N/A=",
                                Description = e.Description,
                                CreditAccountName = e.CreditAccount != null ? e.CreditAccount.AccName : "=N/A=",
                                //PayReceiveAccountName = e.AccountPayType != null ? e.AccountPayType.AccName : "=N/A=",
                                //LiabilityAssetHead = e.AccountAssetLiability != null ? e.AccountAssetLiability.AccName : "=N/A=",

                                Customer = e.Customer != null ? e.Customer.Name : null,
                                Supplier = e.Supplier != null ? e.Supplier.SupplierName : null,
                                Member = e.Member != null ? e.Member.MembersNameBng : null,
                                Employee = e.Employee != null ? e.Employee.EmployeeName : null,
                                SalesCode = e.Sales != null ? e.Sales.SaleCode : null,
                                PurchaseCode = e.Purchase != null ? e.Purchase.PurchaseCode : null,

                                isPost = e.isPost,
                                TransactionAmount = e.TransactionAmount,
                                Status = e.isPost != false ? "Posted" : "Not Posted"
                            };


                var parser = new Parser<TransactionResult>(Request.Form, query);

                return Json(parser.Parse());

            }
            catch (Exception ex)
            {
                return Json(new { Success = "0", error = ex.Message });
                //throw ex;
            }

        }




        [HttpGet]
        public ActionResult TransactionPrint()
        {
            ViewBag.ActionType = "Create";
            return View();
        }


        [AllowAnonymous]
        public ActionResult TransactionVoucherViewReport(int TransactionId)
        {
            try
            {



                TransactionModel Vouchermain = _transactionRepository.All()
                    .Include(b => b.DebitAccount)
                    .Include(x => x.CreditAccount)
                    .Include(x => x.Sales).ThenInclude(x => x.CustomerModel)
                    .Include(x => x.Purchase).ThenInclude(x => x.SupplierModel)
                    .Include(x => x.Customer)
                    .Include(x => x.Supplier)
                    .Include(x => x.Employee)
                    .Include(x => x.CompanyList).ThenInclude(x => x.storeinfo).ThenInclude(x => x.SalesReportStyle)

                    .Include(x => x.UserAccountList)
                    .Include(x => x.Currency)
                    .Include(x => x.TransactionDetails).ThenInclude(x => x.Sales).ThenInclude(x => x.CustomerModel)
                    .Include(x => x.TransactionDetails).ThenInclude(x => x.Purchase).ThenInclude(x => x.SupplierModel)

                    .Where(x => x.Id == TransactionId).FirstOrDefault();

                return View(Vouchermain);

            }
            catch (Exception ex)
            {

                throw ex;
            }

        }


        [HttpGet]
        public ActionResult AddTransaction(string Type, int RefId = 0, int CustomerId = 0, int SupplierId = 0)
        {
            try
            {
                ViewBag.Type = Type;
                ViewBag.ActionType = "Create";


                ViewBag.Customer = _customerRepository.GetAllForDropDown();
                ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
                ViewBag.Member = _memberRepository.GetAllForDropDown();
                ViewBag.Employee = _employeeRepository.GetAllForDropDown();
                ViewBag.Product = _productRepository.GetAllProductForDropDown().Take(15);
                ViewBag.Category = _categoryRepository.GetAllForDropDown().Take(15);
                //ViewBag.Warehosue = _warehouseRepository.GetAllForDropDown();



                SelectListItem abcd = new SelectListItem() { Text = "Please Select", Value = "" };

                var xxx = _FromWarehousePermissionRepository.GetAllForDropDown();
                if (xxx.Count() == 0)
                {
                    xxx = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                }
                else
                {
                    xxx.Append(abcd);
                }

                ViewBag.Warehouse = xxx;





                if (CustomerId > 0)
                {
                    ViewBag.Sales = _saleRepository.GetAllForDropDownForCustomer(true, CustomerId);
                }
                //else if (RefId > 0)
                //{
                //    ViewBag.Sales = _saleRepository.GetAllForDropDownForCustomer(true, CustomerId);
                //}
                else
                {
                    ViewBag.Sales = _saleRepository.GetAllForDropDown();

                }


                if (SupplierId > 0)
                {
                    ViewBag.Purchase = _purchaseRepository.GetAllForDropDownForSupplier(true, SupplierId);

                }
                else
                {
                    ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();

                }



                ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();
                ViewBag.Currency = _countryRepository.GetCurrencyList();

                var DefaultCurrencyId = HttpContext.Session.GetInt32("defaultcurrencyid");

                TransactionModel abc = new TransactionModel();
                abc.TransactionCode = "DT-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                abc.Id = 0;
                abc.InputDate = DateTime.Now.Date;
                abc.TransactionCategory = Type;
                abc.TransactionAmount = 0;
                abc.CurrencyRate = 1;
                abc.TransactionDetails = new List<TransactionDetailsModel>();
                abc.CurrencyId = DefaultCurrencyId;
                abc.isPost = false;

                if (Type == "Sales")
                {

                    var salesdata = _saleRepository.All().Include(x => x.SalesPayments).Where(x => x.Id == RefId).FirstOrDefault();
                    if (salesdata != null)
                    {
                        abc.SalesId = salesdata.Id;
                        abc.CustomerId = salesdata.CustomerId;
                        abc.TransactionAmount = salesdata.NetAmount - salesdata.SalesPayments.Sum(x => x.Amount);
                    }


                    abc.TransactionType = "Received";
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Collection from Customer Agt. Sales.";
                    ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);



                }
                else if (Type == "Customer")
                {

                    abc.TransactionType = "Received";
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Collection from Customer.";

                    ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();

                    return View(abc);



                }
                else if (Type == "Income")
                {

                    abc.TransactionType = "Received";
                    abc.Description = "Income from Other Source.";

                    ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);



                }
                else if (Type == "ReceivedFromSupplier")
                {

                    abc.TransactionType = "Received";
                    ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();

                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Received From Supplier.";

                    return View(abc);


                }
                else if (Type == "ReceivedFromEmployee")
                {

                    abc.TransactionType = "Received";
                    //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where((x => x.AccName.Contains("Loan To Employee") || x.AccName.Contains("Advance To Employee"))) && (x.AccType == "L")).Select(x => x.Id).FirstOrDefault();


                    abc.CreditAccountId = _accountHeadRepository.All().Where((x => x.AccName.Contains("Loan To Employee") || x.AccName.Contains("Advance To Employee") && x.AccType == "L")).Select(x => x.Id).FirstOrDefault();

                    abc.Description = "Amount Received From Employee.";
                    ViewBag.CreditAccountId = _accountHeadRepository.GetLoanAdvanceHeadForDropDown();
                    ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);

                }
                else if (Type == "Expense")
                {
                    abc.TransactionType = "Paid";
                    //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Paid for Expense.";
                    ViewBag.DebitAccountId = _accountHeadRepository.GetExpenseHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);
                }

                else if (Type == "PaidToCustomer")
                {

                    abc.TransactionType = "Paid";
                    abc.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Paid To Customer.";
                    //ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();
                    ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);

                }
                else if (Type == "PaidToEmployee")
                {

                    abc.TransactionType = "Paid";
                    //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where((x => x.AccName.Contains("Loan To Employee") || x.AccName.Contains("Advance To Employee"))) && (x.AccType == "L")).Select(x => x.Id).FirstOrDefault();


                    abc.DebitAccountId = _accountHeadRepository.All().Where((x => x.AccName.Contains("Loan To Employee") || x.AccName.Contains("Advance To Employee") && x.AccType == "L")).Select(x => x.Id).FirstOrDefault();

                    abc.Description = "Amount Paid To Employee.";
                    ViewBag.DebitAccountId = _accountHeadRepository.GetLoanAdvanceHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);

                }
                else if (Type == "Received")
                {
                    abc.TransactionType = Type;
                    //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Collection from ****.";
                    ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "Supplier")
                {

                    abc.TransactionType = "Paid";
                    abc.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Paid To Supplier Agt. Purchase.";
                    ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);


                }
                else if ((Type == "Purchase") || (Type == "Opening Stock") || (Type == "GRR"))
                {
                    var purchsedata = _purchaseRepository.All().Include(x => x.PurchasePayments).Where(x => x.Id == RefId).FirstOrDefault();

                    if (purchsedata != null)
                    {
                        abc.PurchaseId = purchsedata.Id;
                        abc.SupplierId = purchsedata.SupplierId;
                        abc.TransactionAmount = purchsedata.NetAmount - purchsedata.PurchasePayments.Sum(x => x.Amount);
                    }

                    abc.TransactionType = "Paid";
                    abc.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Paid To Supplier Agt. Purchase.";
                    ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();


                    return View(abc);


                }

                else if (Type == "Contra")
                {
                    abc.TransactionType = "Received";// Type;
                                                     //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Transfer Amount From ____ to ____ .";
                    //ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();
                    ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "CashContra")
                {
                    abc.TransactionType = "Received";// Type;
                                                     //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Cash Withdrawn / Received from Bank.";
                    //ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();
                    ViewBag.DebitAccountId = _accountHeadRepository.GetCashHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetBankHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "BankContra")
                {
                    abc.TransactionType = "Received";// Type;
                                                     //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Cash Deposit To Bank.";

                    ViewBag.CreditAccountId = _accountHeadRepository.GetCashHeadForDropDown();
                    ViewBag.DebitAccountId = _accountHeadRepository.GetBankHeadForDropDown();

                    //ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "CustomerDiscount")
                {
                    abc.TransactionType = "Paid";// Type;
                    abc.Description = "Discount To Customer Agt. Sales Collection.";

                    //ViewBag.AssetLiabilityHead = _accountHeadRepository.GetCashHeadForDropDown();
                    //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    //abc.AccountId = _accountHeadRepository.All().Where(x => x.AccName.ToUpper().Contains("Discount Expense".ToUpper()) && x.AccType == "L").Select(x => x.Id).FirstOrDefault();


                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();       //Accounts Change
                    abc.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.ToUpper().Contains("Discount Expense".ToUpper()) && x.AccType == "L").Select(x => x.Id).FirstOrDefault();


                    ViewBag.DebitAccountId = _accountHeadRepository.GetDiscountExpenseHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    return View(abc);
                }
                else if (Type == "SupplierDiscount")
                {
                    abc.TransactionType = "Received";// Type;
                    abc.Description = "Discount Received From Supplier Agt. Purchase .";


                    //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    //abc.AccountId = _accountHeadRepository.All().Where(x => x.AccName.ToUpper().Contains("Discount Income".ToUpper()) && x.AccType == "L").Select(x => x.Id).FirstOrDefault();


                    abc.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();    //Accounts Change
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.ToUpper().Contains("Discount Income".ToUpper()) && x.AccType == "L").Select(x => x.Id).FirstOrDefault();

                    ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetDiscountIncomeHeadForDropDown();
                    return View(abc);
                }
                else /// other contra like person to person transfer or any account head to other account head transfer
                {

                    abc.TransactionType = Type;
                    //abc.AssetLiabilityAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = " ";
                    //ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    //ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();

                    ViewBag.CreditAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
                    ViewBag.DebitAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();



                    //ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);

                }


                //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeExpenseHeadForDropDown();


                return View(abc);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        [HttpGet]
        public ActionResult AddTransactionDetailsOld(string Type, int RefId = 0)
        {
            try
            {
                ViewBag.Type = Type;
                ViewBag.ActionType = "Create";


                ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();

                ViewBag.Customer = _customerRepository.GetAllForDropDown();
                ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
                ViewBag.Member = _memberRepository.GetAllForDropDown();
                ViewBag.Employee = _employeeRepository.GetAllForDropDown();


                ViewBag.Sales = _saleRepository.GetAllForDropDown();
                ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();
                ViewBag.IncomeExpenseHead = _purchaseRepository.GetAllForDropDown();
                ViewBag.Currency = _countryRepository.GetCurrencyList();


                TransactionModel abc = new TransactionModel();
                abc.TransactionCode = "DT-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                abc.Id = 0;
                abc.InputDate = DateTime.Now.Date;
                abc.TransactionCategory = Type;
                abc.TransactionAmount = 0;
                abc.CurrencyRate = 1;



                if (Type == "Sales")
                {

                    var salesdata = _saleRepository.All().Include(x => x.SalesPayments).Where(x => x.Id == RefId).FirstOrDefault();
                    if (salesdata != null)
                    {
                        abc.SalesId = salesdata.Id;
                        abc.CustomerId = salesdata.CustomerId;
                        abc.TransactionAmount = salesdata.NetAmount - salesdata.SalesPayments.Sum(x => x.Amount);
                    }


                    abc.TransactionType = "Received";
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Collection from Customer Agt. Sales.";
                    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);



                }
                else if (Type == "Customer")
                {

                    abc.TransactionType = "Received";
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Collection from Customer.";
                    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);



                }
                else if (Type == "Received")
                {
                    abc.TransactionType = Type;
                    //abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Collection from ****.";
                    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "Purchase")
                {
                    var purchsedata = _purchaseRepository.All().Include(x => x.PurchasePayments).Where(x => x.Id == RefId).FirstOrDefault();

                    if (purchsedata != null)
                    {
                        abc.PurchaseId = purchsedata.Id;
                        abc.SupplierId = purchsedata.SupplierId;
                        abc.TransactionAmount = purchsedata.NetAmount - purchsedata.PurchasePayments.Sum(x => x.Amount);
                    }

                    abc.TransactionType = "Paid";
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Paid To Supplier Agt. Purchase.";
                    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetExpenseHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "Supplier")
                {

                    abc.TransactionType = "Paid";
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Paid To Supplier Agt. Purchase.";
                    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetExpenseHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "Paid")
                {
                    abc.TransactionType = Type;
                    //abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Paid To **** .";
                    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetExpenseHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "Contra")
                {
                    abc.TransactionType = "Received";// Type;
                                                     //abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Transfer Amount From ____ to ____ .";
                    //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();
                    ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();
                    ViewBag.AssetLiabilityHead = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "CashContra")
                {
                    abc.TransactionType = "Received";// Type;
                                                     //abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Cash Withdrawn / Received from Bank.";
                    //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();
                    ViewBag.CashBankHead = _accountHeadRepository.GetCashHeadForDropDown();
                    ViewBag.AssetLiabilityHead = _accountHeadRepository.GetBankHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "BankContra")
                {
                    abc.TransactionType = "Received";// Type;
                                                     //abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Cash Deposit To Bank.";

                    ViewBag.AssetLiabilityHead = _accountHeadRepository.GetCashHeadForDropDown();
                    ViewBag.CashBankHead = _accountHeadRepository.GetBankHeadForDropDown();

                    //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);


                }
                else if (Type == "CustomerDiscount")
                {
                    abc.TransactionType = "Paid";// Type;
                    abc.Description = "Discount To Customer Agt. Sales Collection.";

                    //ViewBag.AssetLiabilityHead = _accountHeadRepository.GetCashHeadForDropDown();
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.ToUpper().Contains("Discount Expense".ToUpper()) && x.AccType == "L").Select(x => x.Id).FirstOrDefault();


                    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetDiscountExpenseHeadForDropDown();
                    return View(abc);
                }
                else if (Type == "SupplierDiscount")
                {
                    abc.TransactionType = "Received";// Type;
                    abc.Description = "Discount Received From Supplier Agt. Purchase .";


                    abc.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.ToUpper().Contains("Discount Income".ToUpper()) && x.AccType == "L").Select(x => x.Id).FirstOrDefault();

                    //ViewBag.AssetLiabilityHead = _accountHeadRepository.GetCashHeadForDropDown();
                    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetDiscountIncomeHeadForDropDown();
                    return View(abc);
                }
                else /// other contra like person to person transfer or any account head to other account head transfer
                {

                    abc.TransactionType = Type;
                    //abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = " ";
                    ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    ViewBag.CashBankHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();

                    //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();

                    return View(abc);


                }




                //else if (Type == "Received From Customer")
                //{
                //    //var salesdata = _saleRepository.All().Include(x => x.SalesPayments).Where(x => x.Id == RefId).FirstOrDefault();
                //    //abc.SalesId = salesdata.Id;
                //    //abc.CustomerId = salesdata.CustomerId;
                //    abc.TransactionAmount = 0;
                //    abc.TransactionType = "Received";
                //    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                //    abc.Description = "Amount Collection from Customer .";
                //    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();

                //    return View(abc);
                //}
                //else if (Type == "Paid to Supplier")
                //{
                //    //var purchsedata = _purchaseRepository.All().Include(x => x.PurchasePayments).Where(x => x.Id == RefId).FirstOrDefault();
                //    //abc.PurchaseId = purchsedata.Id;
                //    //abc.SupplierId = purchsedata.SupplierId;
                //    abc.TransactionAmount = 0;
                //    abc.TransactionType = "Paid";
                //    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                //    abc.Description = "Amount Paid To Supplier";
                //    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetExpenseHeadForDropDown();

                //    return View(abc);


                //}



                ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeExpenseHeadForDropDown();


                return View(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }

        }



        [HttpGet]
        public ActionResult AddTransactionDetails(string Type, int RefId = 0)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                ViewBag.Type = Type;
                ViewBag.ActionType = "Create";


                //ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();
                //ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();

                ViewBag.Customer = _customerRepository.All().Where(p => p.ComId == ComId).Include(x => x.Currency)
                       .Select(x => new SelectListItem
                       {
                           Text = x.Name + '-' + x.Currency.CurrencyShortName,
                           Value = x.Id.ToString()
                       });

                //ViewBag.Customer = _customerRepository.GetAllForDropDown();
                ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
                //ViewBag.Member = _memberRepository.GetAllForDropDown();
                //ViewBag.Employee = _employeeRepository.GetAllForDropDown();


                //ViewBag.Sales = _saleRepository.GetAllForDropDown();
                //ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();
                //ViewBag.IncomeExpenseHead = _purchaseRepository.GetAllForDropDown();
                ViewBag.Currency = _countryRepository.GetCurrencyList();

                var DefaultCurrencyId = HttpContext.Session.GetInt32("defaultcurrencyid");

                TransactionModel abc = new TransactionModel();
                abc.TransactionCode = "DT-" + DateTime.Now.ToString("ddMMyyHHmmssfff");
                abc.Id = 0;
                abc.InputDate = DateTime.Now.Date;
                abc.TransactionCategory = Type;
                abc.TransactionAmount = 0;
                abc.CurrencyRate = 1;
                abc.CurrencyId = DefaultCurrencyId;



                SelectListItem abcd = new SelectListItem() { Text = "Please Select", Value = "" };

                var xxx = _FromWarehousePermissionRepository.GetAllForDropDown();
                if (xxx.Count() == 0)
                {
                    xxx = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
                }
                else
                {
                    xxx.Append(abcd);
                }

                ViewBag.Warehouse = xxx;


                if (Type == "Customer")
                {



                    abc.TransactionType = "Received";
                    abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Collection from Customer.";

                    if (RefId > 0)
                    {
                        abc.CustomerId = RefId;

                    }


                    ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();

                    return View(abc);


                    //abc.TransactionType = "Received";
                    //abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Sales Receivable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    //abc.Description = "Amount Collection from Customer.";
                    //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeHeadForDropDown();

                    //return View(abc);



                }
                else if (Type == "Supplier")
                {

                    if (RefId > 0)
                    {
                        abc.SupplierId = RefId;

                    }

                    abc.TransactionType = "Paid";
                    abc.DebitAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    abc.Description = "Amount Paid To Supplier Agt. Purchase.";
                    ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                    ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();

                    return View(abc);


                    //abc.TransactionType = "Paid";
                    //abc.CreditAccountId = _accountHeadRepository.All().Where(x => x.AccName.Contains("Purchase Payable") && x.AccType == "L").Select(x => x.Id).FirstOrDefault();
                    //abc.Description = "Amount Paid To Supplier Agt. Purchase.";
                    //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetExpenseHeadForDropDown();

                    //return View(abc);


                }


                return View(abc);

            }
            catch (Exception ex)
            {

                throw ex;
            }

        }


        [AllowAnonymous]
        [HttpGet]
        public ActionResult AddPayment(string Type, int SupplierId = 0)
        {
            @ViewBag.IsCopy = "0";
            ViewBag.ActionType = "Create";
            return View(model: SupplierId);
        }



        //[AllowAnonymous]
        //[HttpGet]
        //public ActionResult AddPayment(string Type, int RefId = 0)
        //{
        //    return View();
        //}







        public class DueTransactionSummary
        {
            public int TransactionId { get; set; }
            public int Id { get; set; }
            public int SupplierId { get; set; }
            public string? DocType { get; set; }
            public string? RefCode { get; set; }
            public string? CreditApplied { get; set; }
            public string? Remarks { get; set; }
            public string? RefDate { get; set; }
            public string? Duedate { get; set; }
            public DateTime DueDate { get; set; }
            public string? PurchaseDate { get; set; }
            public int? RefId { get; set; }
            public int? PurchaseId { get; set; }
            public int? TrxnId { get; set; }
            public int? DocTypeId { get; set; }
            public string? PurchaseCode { get; set; }

            public string? RefName { get; set; }
            public decimal Amount { get; set; }
            public decimal OrgAmount { get; set; }
            public decimal Payment { get; set; }
            public double Discount { get; set; }
            public double CurrencyRate { get; set; }
            public double CurrencyId { get; set; }
            public double VAT { get; set; }
            public double AIT { get; set; }
            public bool CheckBox { get; set; }
            public decimal NetAmount { get; set; }
            public decimal NetAmnt { get; set; }

            public int PaymentType { get; set; } = 0;



        }


        public class DueTransactionSummarySupplierWise
        {
            public int TransactionId { get; set; }
            public int Id { get; set; }
            public int SupplierId { get; set; }
            public string? DocType { get; set; }
            public string? RefCode { get; set; }
            public string? CreditApplied { get; set; }
            public string? Remarks { get; set; }
            public string? RefDate { get; set; }
            public string? Duedate { get; set; }
            public DateTime DueDate { get; set; }
            public string? PurchaseDate { get; set; }
            public int? RefId { get; set; }
            public int? PurchaseId { get; set; }
            public int? DocTypeId { get; set; }
            public string? PurchaseCode { get; set; }

            public string? RefName { get; set; }
            public decimal Payment { get; set; }
            public double Discount { get; set; }
            public double VAT { get; set; }
            public double AIT { get; set; }
            public bool CheckBox { get; set; }
            public decimal NetAmount { get; set; }
            public decimal NetAmnt { get; set; }

            public int PaymentType { get; set; } = 0;



        }


        [AllowAnonymous]
        public ActionResult GetRefDetails(int? CustomerId, int? SupplierId)
        {
            try
            {

                ////int yearid,int monthid
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                var Criteria = "Customer";
                var sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{CustomerId}'";


                if (CustomerId != null)
                {

                    Criteria = "Customer";
                    sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{CustomerId}'";


                    SqlParameter[] sqlParameter = new SqlParameter[3];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    sqlParameter[1] = new SqlParameter("@Criteria", Criteria);
                    sqlParameter[2] = new SqlParameter("@RefId", CustomerId);
                    List<DueTransactionSummary> alldata = Helper.ExecProcMapTList<DueTransactionSummary>("PrcGetRefDetails", sqlParameter).ToList();



                    ////var query = from e in _saleRepository.All().Include(x => x.SalesPayments).Include(x => x.CustomerModel)
                    ////            .Where(x => x.CustomerId == CustomerId && x.NetAmount - x.SalesPayments.Sum(x => x.Amount) > 0)
                    ////            .OrderBy(x => x.Id).ToList()
                    ////                //let TotalReturnPaymentAmount = e.SalesReturn.Sum(x=>x.SalesReturnPayments.Sum(y=>y.Amount))

                    ////            select new DueTransactionSummary
                    ////            {
                    ////                TransactionId = 0,
                    ////                Id = 0,
                    ////                DocType = "Sales",
                    ////                RefCode = e.SaleCode,
                    ////                RefDate = e.SalesDate.ToString("dd-MMM-yy"),
                    ////                RefId = e.Id,
                    ////                RefName = e.CustomerModel.Name + "  " + e.CustomerName,//(e.CustomerName.Length == 0 || e.CustomerName == null) ? e.CustomerModel.Name : e.CustomerModel.Name + " - " + e.CustomerName,
                    ////                Amount = e.NetAmount - e.SalesPayments.Sum(x => x.Amount),

                    ////                Discount = 0.00,
                    ////                VAT = 0.00,
                    ////                AIT = 0.00,
                    ////                NetAmount = e.NetAmount - e.SalesPayments.Sum(x => x.Amount),
                    ////            };

                    ////var opbalanceduefigure = _transactionDetailsRepository.All().Include(x => x.TransactionMain).Where(x => x.SalesId == null || x.PurchaseId == null).Where(x => x.TransactionMain.CustomerId == CustomerId).Sum(x => x.NetAmount);

                    ////var opbalancedue = from e in _customerRepository.All()
                    ////.Where(x => x.Id == CustomerId && x.OpBalance - Convert.ToDouble(opbalanceduefigure) > 0).ToList()
                    ////                   select new DueTransactionSummary
                    ////                   {
                    ////                       TransactionId = 0,
                    ////                       Id = 0,
                    ////                       DocType = "Sales",
                    ////                       RefCode = "Prev. Due.",
                    ////                       RefDate = DateTime.Now.Date.ToString("dd-MMM-yy"),
                    ////                       RefId = null,
                    ////                       RefName = e.Name,
                    ////                       Amount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                    ////                       Discount = 0,
                    ////                       VAT = 0,
                    ////                       AIT = 0,
                    ////                       NetAmount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure)

                    ////                   };


                    //////opbalancedue.Append(query);

                    ////List<DueTransactionSummary> alldata = new List<DueTransactionSummary>();
                    ////alldata.AddRange(query);
                    ////alldata.AddRange(opbalancedue);


                    //var abc = _customerRepository.All().Where(x=>x.Id == CustomerId).Where(x=>x.OpBalance - x.AccountsDailyTransaction.tra)


                    //var res = Helper.ExecProcMapTList<DeliveryChallanDetailInfo>("DeliveryChallanDetailsInformation", sqlParameter);

                    return Json(new { data = alldata, success = "1" });
                }
                else if (SupplierId != null)
                {

                    Criteria = "Supplier";
                    sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{SupplierId}'";


                    SqlParameter[] sqlParameter = new SqlParameter[3];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    sqlParameter[1] = new SqlParameter("@Criteria", Criteria);
                    sqlParameter[2] = new SqlParameter("@RefId", SupplierId);
                    List<DueTransactionSummary> alldata = Helper.ExecProcMapTList<DueTransactionSummary>("PrcGetRefDetails", sqlParameter).ToList();



                    ////var query = from e in _purchaseRepository.All().Include(x => x.PurchasePayments).Include(x => x.SupplierModel).Where(x => x.SupplierId == SupplierId && x.NetAmount - x.PurchasePayments.Sum(x => x.Amount) > 0).OrderBy(x => x.Id).ToList()
                    ////            select new DueTransactionSummary
                    ////            {
                    ////                TransactionId = 0,
                    ////                Id = 0,
                    ////                DocType = "Purchase",
                    ////                RefCode = e.PurchaseCode,
                    ////                RefDate = e.PurchaseDate.ToString("dd-MMM-yy"),
                    ////                RefId = e.Id,
                    ////                RefName = e.SupplierModel.SupplierName + " - " + e.SupplierName,//(e.SupplierName.Length == 0 || e.SupplierName == null) ? e.SupplierModel.SupplierName : e.SupplierModel.SupplierName + " - " + e.SupplierName,
                    ////                Amount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                    ////                Discount = 0.00,
                    ////                NetAmount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                    ////            };



                    ////var opbalanceduefigure = _transactionDetailsRepository.All().Include(x => x.TransactionMain).Where(x => x.SalesId == null || x.PurchaseId == null).Where(x => x.TransactionMain.SupplierId == SupplierId).Sum(x => x.NetAmount);

                    ////var opbalancedue = from e in _supplierRepository.All()
                    ////.Where(x => x.Id == SupplierId && x.OpBalance - Convert.ToDouble(opbalanceduefigure) > 0).ToList()
                    ////                   select new DueTransactionSummary
                    ////                   {
                    ////                       TransactionId = 0,
                    ////                       Id = 0,
                    ////                       DocType = "Purchase",
                    ////                       RefCode = "Prev. Due.",
                    ////                       RefDate = DateTime.Now.Date.ToString("dd-MMM-yy"),
                    ////                       RefId = null,
                    ////                       RefName = e.SupplierName,
                    ////                       Amount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                    ////                       Discount = 0,
                    ////                       NetAmount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure)

                    ////                   };


                    //////opbalancedue.Append(query);

                    ////List<DueTransactionSummary> alldata = new List<DueTransactionSummary>();
                    ////alldata.AddRange(query);
                    ////alldata.AddRange(opbalancedue);



                    //var res = Helper.ExecProcMapTList<DeliveryChallanDetailInfo>("DeliveryChallanDetailsInformation", sqlParameter);

                    return Json(new { data = alldata, success = "1" });
                }


                return Json(new { data = "", success = "1" });

            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }



        [AllowAnonymous]
        public ActionResult GetRefDetailsNewForQb(int? CustomerId, int? SupplierId, int? CurrencyId)  //30-10-2023
        {
            try
            {

                ////int yearid,int monthid
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                var Criteria = "Supplier";
                var sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{SupplierId}'";


                if (CustomerId != null)
                {

                    Criteria = "Customer";
                    sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{CustomerId}'";


                    SqlParameter[] sqlParameter = new SqlParameter[3];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    sqlParameter[1] = new SqlParameter("@Criteria", Criteria);
                    sqlParameter[2] = new SqlParameter("@RefId", CustomerId);
                    List<DueTransactionSummary> alldata = Helper.ExecProcMapTList<DueTransactionSummary>("PrcGetRefDetails", sqlParameter).ToList();


                    return Json(new { data = alldata, success = "1" });
                }
                else if (SupplierId != null)
                {

                    Criteria = "Supplier";
                    sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{SupplierId}'";
                    Console.WriteLine(sqlquery);

                    SqlParameter[] sqlParameter = new SqlParameter[3];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    sqlParameter[1] = new SqlParameter("@Criteria", Criteria);
                    sqlParameter[2] = new SqlParameter("@RefId", SupplierId);
                    List<DueTransactionSummary> alldata = Helper.ExecProcMapTList<DueTransactionSummary>("PrcGetRefDetails", sqlParameter).ToList();

                    Console.WriteLine(alldata);

                    return Json(new { data = alldata, success = "1" });
                    Console.WriteLine(alldata);

                }

                else if (SupplierId == null && CurrencyId == null)
                {

                    Criteria = "Supplier";
                    var nullSupplier = "";
                    sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{nullSupplier}'";
                    Console.WriteLine(sqlquery);

                    SqlParameter[] sqlParameter = new SqlParameter[3];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    sqlParameter[1] = new SqlParameter("@Criteria", Criteria);
                    sqlParameter[2] = new SqlParameter("@RefId", nullSupplier);
                    List<DueTransactionSummary> alldata = Helper.ExecProcMapTList<DueTransactionSummary>("PrcGetRefDetails", sqlParameter).ToList();
                    //var alldata = new System.Data.DataSet();
                    //alldata = Helper.ExecProcMapDS("PrcGetRefDetails", sqlParameter);

                    return Json(new { data = alldata, success = "1" });
                }

                else if (SupplierId == null && CurrencyId != null)
                {

                    Criteria = "Supplier";
                    var nullSupplier = "";
                    sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{nullSupplier}' ,'{CurrencyId}'";
                    Console.WriteLine(sqlquery);

                    SqlParameter[] sqlParameter = new SqlParameter[4];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    sqlParameter[1] = new SqlParameter("@Criteria", Criteria);
                    sqlParameter[2] = new SqlParameter("@RefId", nullSupplier);
                    sqlParameter[3] = new SqlParameter("@CurrencyId", CurrencyId);
                    List<DueTransactionSummary> alldata = Helper.ExecProcMapTList<DueTransactionSummary>("PrcGetRefDetails", sqlParameter).ToList();
                    //var alldata = new System.Data.DataSet();
                    //alldata = Helper.ExecProcMapDS("PrcGetRefDetails", sqlParameter);

                    return Json(new { data = alldata, success = "1" });
                }

                return Json(new { data = "", success = "1" });

            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }


        [AllowAnonymous]
        public ActionResult GetFilteredSupplierTransaction(int? SupplierId, DateTime startDate, DateTime endDate, string criteria)  //30-10-2023
        {
            try
            {

                var ComId = HttpContext.Session.GetInt32("ComId");
                var sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{criteria}' ,'{SupplierId}'";
                Console.WriteLine(sqlquery);

                SqlParameter[] sqlParameter = new SqlParameter[5];
                sqlParameter[0] = new SqlParameter("@ComId", ComId);
                sqlParameter[1] = new SqlParameter("@Criteria", criteria);
                sqlParameter[2] = new SqlParameter("@RefId", SupplierId);
                sqlParameter[3] = new SqlParameter("@StartDate", startDate);
                sqlParameter[4] = new SqlParameter("@EndDate", endDate);
                List<DueTransactionSummary> alldata = Helper.ExecProcMapTList<DueTransactionSummary>("get_FilteredSupplierTransaction", sqlParameter).ToList();

                Console.WriteLine(alldata);

                return Json(new { data = alldata, success = "1" });

            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }

        [AllowAnonymous]
        public ActionResult GetSupplierCredit(int? CustomerId, int? SupplierId, int? CurrencyId)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");

                var Criteria = "Supplier credit";
                var sqlquery = $"EXEC [PrcGetRefDetails] '{ComId}', '{Criteria}' ,'{SupplierId}'";
                Console.WriteLine(sqlquery);

                SqlParameter[] sqlParameter = new SqlParameter[3];
                sqlParameter[0] = new SqlParameter("@ComId", ComId);
                sqlParameter[1] = new SqlParameter("@Criteria", Criteria);
                sqlParameter[2] = new SqlParameter("@RefId", SupplierId);
                List<DueTransactionSummary> alldata = Helper.ExecProcMapTList<DueTransactionSummary>("PrcGetRefDetails", sqlParameter).ToList();

                Console.WriteLine(alldata);

                return Json(new { data = alldata, success = "1" });

            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }


        [AllowAnonymous]
        public ActionResult GetRefDetailsForPayBills()
        {
            try
            {

                var query = from e in _purchaseRepository.All().Include(x => x.PurchasePayments).Include(x => x.SupplierModel).Where(x => x.NetAmount - x.PurchasePayments.Sum(x => x.Amount) > 0 && x.DocTypeList.DocType == "Bill").OrderBy(x => x.Id).ToList()
                            select new DueTransactionSummary
                            {
                                TransactionId = 0,
                                Id = 0,
                                DocType = "Purchase",
                                RefCode = e.PurchaseCode,
                                RefDate = e.PurchaseDate.ToString("dd-MMM-yy"),
                                RefId = e.Id,
                                RefName = e.SupplierModel.SupplierName + " - " + e.SupplierName,//(e.SupplierName.Length == 0 || e.SupplierName == null) ? e.SupplierModel.SupplierName : e.SupplierModel.SupplierName + " - " + e.SupplierName,
                                Amount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                                Discount = 0.00,
                                NetAmount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                            };



                var opbalanceduefigure = _transactionDetailsRepository.All().Include(x => x.TransactionMain).Where(x => x.SalesId == null || x.PurchaseId == null).Sum(x => x.NetAmount);

                var opbalancedue = from e in _supplierRepository.All()
                .Where(x => x.OpBalance - Convert.ToDouble(opbalanceduefigure) > 0).ToList()
                                   select new DueTransactionSummary
                                   {
                                       TransactionId = 0,
                                       Id = 0,
                                       DocType = "Purchase",
                                       RefCode = "Prev. Due.",
                                       RefDate = DateTime.Now.Date.ToString("dd-MMM-yy"),
                                       RefId = null,
                                       RefName = e.SupplierName,
                                       Amount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                       Discount = 0,
                                       NetAmount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                       PaymentType = 1
                                   };


                //opbalancedue.Append(query);

                List<DueTransactionSummary> alldata = new List<DueTransactionSummary>();
                alldata.AddRange(query);
                alldata.AddRange(opbalancedue);



                //var res = Helper.ExecProcMapTList<DeliveryChallanDetailInfo>("DeliveryChallanDetailsInformation", sqlParameter);

                return Json(new { data = alldata, success = "1" });
            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }




        [AllowAnonymous]
        public JsonResult GetPayBills(int? UserId, int? Warehouse, int? IsPosted, int? VoucherTypeId, int? SupplierId, int? DocTypeId, int? Status, int? DeliveryMethod, int? PurchaseDate, int page = 1, decimal size = 5, string searchquery = "", string FromDate = "", string ToDate = "", int CopyBill = 0)
        {
            try
            {
                var CurrentUserId = HttpContext.Session.GetInt32("UserId");

                DateTime dtFrom = DateTime.MinValue;
                DateTime dtTo = DateTime.MaxValue;

                if (!string.IsNullOrEmpty(FromDate))
                    dtFrom = Convert.ToDateTime(FromDate);

                if (!string.IsNullOrEmpty(ToDate))
                    dtTo = Convert.ToDateTime(ToDate);

                var purchaselist = _purchaseRepository.All().Where(x => x.IsDelete == false && x.PurchaseDate >= dtFrom && x.PurchaseDate <= dtTo);

                if (IsPosted != null)
                {
                    if (IsPosted == 1)
                    {
                        purchaselist = purchaselist.Where(x => x.isPosted == true);

                    }
                    else
                    {
                        purchaselist = purchaselist.Where(x => x.isPosted == false);

                    }
                }


                //if (searchquery?.Length > 1)
                //{
                //    var searchitem = JsonConvert.DeserializeObject<PurchaseFilterData>(searchquery);

                //    if (searchitem.PurchaseCode != null)
                //    {
                //        purchaselist = purchaselist.Where(x => x.PurchaseCode.ToLower().Contains(searchitem.PurchaseCode.ToLower()));

                //    }
                //    if (dtFrom != null)
                //    {
                //        purchaselist = purchaselist.Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo);

                //    }

                //}
                //else
                //{
                //}

                if (SupplierId != null)
                {
                    purchaselist = purchaselist.Where(x => x.SupplierId == SupplierId);
                }
                if (DocTypeId != null)
                {
                    purchaselist = purchaselist.Where(x => x.DocTypeId == DocTypeId);
                }
                if (UserId != null)
                {
                    purchaselist = purchaselist.Where(x => x.LuserId == UserId);
                }
                decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);



                decimal skip = (page - 1) * size;


                var query = from e in purchaselist.Include(x => x.Items)
                         .ThenInclude(x => x.Product).ThenInclude(x => x.Category)
                         .Include(x => x.PurchasePayments).ThenInclude(x => x.vChartofAccounts)
                            .Include(x => x.PurchasePayments).ThenInclude(x => x.Transaction)
                            .Include(x => x.PurchaseReturn).ThenInclude(x => x.PurchaseReturnPayments)
                            .Include(x => x.DocTypeList)
                            .Include(x => x.ItemsCategory).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)

                            select new DueTransactionSummary
                            {
                                TransactionId = 0,
                                Id = 0,
                                DocType = "Purchase",
                                RefCode = e.PurchaseCode,
                                RefDate = e.PurchaseDate.ToString("dd-MMM-yy"),
                                RefId = e.Id,
                                PurchaseId = e.Id,
                                PurchaseCode = e.PurchaseCode,
                                DocTypeId = (int)e.DocTypeId,
                                SupplierId = e.SupplierId.GetValueOrDefault(),
                                PurchaseDate = e.PurchaseDate.ToString("dd-MMM-yy"),
                                DueDate = (DateTime)e.DueDate,
                                //CheckBox = e.Id== PurchaseId?true:false,
                                //DueDate = e.DueDate?.ToString("dd-MMM-yy"),
                                RefName = e.SupplierModel.SupplierName + " - " + e.SupplierName,//(e.SupplierName.Length == 0 || e.SupplierName == null) ? e.SupplierModel.SupplierName : e.SupplierModel.SupplierName + " - " + e.SupplierName,
                                                                                                //Amount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                                Discount = 0.00,
                                NetAmount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                            };
                var opbalanceduefigure = _transactionDetailsRepository.All().Include(x => x.TransactionMain).Where(x => x.SalesId == null || x.PurchaseId == null).Where(x => x.TransactionMain.SupplierId == SupplierId).Sum(x => x.NetAmount);

                var opbalancedue = from e in _supplierRepository.All()
                .Where(x => x.Id == SupplierId && x.OpBalance - Convert.ToDouble(opbalanceduefigure) > 0).ToList()
                                   select new DueTransactionSummary
                                   {
                                       TransactionId = 0,
                                       Id = 0,
                                       DocType = "Purchase",
                                       RefCode = "Prev. Due.",
                                       RefDate = DateTime.Now.Date.ToString("dd-MMM-yy"),
                                       RefId = null,
                                       RefName = e.SupplierName,
                                       //Amount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                       Discount = 0,
                                       NetAmount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                       PaymentType = 1
                                   };

                List<DueTransactionSummary> alldata = new List<DueTransactionSummary>();
                alldata.AddRange(query);
                alldata.AddRange(opbalancedue);

                foreach (var item in query)
                {
                    var data = item;
                }

                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = page;
                pageinfo.PageSize = int.Parse(size.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });





            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [AllowAnonymous]
        public ActionResult GetRefDetailsQB(int? CustomerId, int? SupplierId, int? PurchaseId, int page = 1, decimal size = 5, string searchquery = "", string FromDate = "", string ToDate = "")
        {
            try
            {
                DateTime dtFrom = DateTime.MinValue;
                DateTime dtTo = DateTime.MaxValue;

                if (!string.IsNullOrEmpty(FromDate))
                    dtFrom = Convert.ToDateTime(FromDate);

                if (!string.IsNullOrEmpty(ToDate))
                    dtTo = Convert.ToDateTime(ToDate);

                var purchaselist = _purchaseRepository.All().Where(x => x.IsDelete == false && x.DueDate >= dtFrom && x.DueDate <= dtTo);
                decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);
                decimal skip = (page - 1) * size;

                if (CustomerId != null)
                {

                    var query = from e in _saleRepository.All().Include(x => x.SalesPayments).Include(x => x.CustomerModel)
                                .Where(x => x.CustomerId == CustomerId && x.NetAmount - x.SalesPayments.Sum(x => x.Amount) > 0)
                                .OrderBy(x => x.Id).ToList()
                                select new DueTransactionSummary
                                {
                                    TransactionId = 0,
                                    Id = 0,
                                    DocType = "Sales",
                                    RefCode = e.SaleCode,
                                    RefDate = e.SalesDate.ToString("dd-MMM-yy"),
                                    RefId = e.Id,
                                    PurchaseId = e.Id,
                                    RefName = e.CustomerModel.Name + "  " + e.CustomerName,//(e.CustomerName.Length == 0 || e.CustomerName == null) ? e.CustomerModel.Name : e.CustomerModel.Name + " - " + e.CustomerName,
                                    Amount = e.NetAmount - e.SalesPayments.Sum(x => x.Amount),
                                    Discount = 0.00,
                                    VAT = 0.00,
                                    AIT = 0.00,
                                    NetAmount = e.NetAmount - e.SalesPayments.Sum(x => x.Amount),
                                };
                    if (dtFrom != null && dtTo != null)
                    {
                        query = query.Where(p => p.DueDate >= dtFrom && p.DueDate <= dtTo);
                    }


                    var opbalanceduefigure = _transactionDetailsRepository.All().Include(x => x.TransactionMain).Where(x => x.SalesId == null || x.PurchaseId == null).Where(x => x.TransactionMain.CustomerId == CustomerId).Sum(x => x.NetAmount);

                    var opbalancedue = from e in _customerRepository.All()
                    .Where(x => x.Id == CustomerId && x.OpBalance - Convert.ToDouble(opbalanceduefigure) > 0).ToList()
                                       select new DueTransactionSummary
                                       {
                                           TransactionId = 0,
                                           Id = 0,
                                           DocType = "Sales",
                                           RefCode = "Prev. Due.",
                                           RefDate = DateTime.Now.Date.ToString("dd-MMM-yy"),
                                           RefId = null,
                                           RefName = e.Name,
                                           Amount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                           Discount = 0,
                                           VAT = 0,
                                           AIT = 0,
                                           NetAmount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                           PaymentType = 1,
                                       };


                    //opbalancedue.Append(query);

                    List<DueTransactionSummary> alldata = new List<DueTransactionSummary>();
                    alldata.AddRange(query);
                    alldata.AddRange(opbalancedue);


                    //var abc = _customerRepository.All().Where(x=>x.Id == CustomerId).Where(x=>x.OpBalance - x.AccountsDailyTransaction.tra)


                    //var res = Helper.ExecProcMapTList<DeliveryChallanDetailInfo>("DeliveryChallanDetailsInformation", sqlParameter);

                    return Json(new { data = alldata, success = "1" });
                }
                else if (SupplierId != null || size != null || page != null)
                {


                    var query = from e in purchaselist.Include(x => x.PurchasePayments).Include(x => x.SupplierModel).Where(x => x.NetAmount - x.PurchasePayments.Sum(x => x.Amount) > 0).OrderBy(x => x.Id).ToList()
                                select new DueTransactionSummary
                                {
                                    TransactionId = 0,
                                    Id = 0,
                                    DocType = "Purchase",
                                    RefCode = e.PurchaseCode,
                                    RefDate = e.PurchaseDate.ToString("dd-MMM-yy"),
                                    RefId = e.Id,
                                    PurchaseId = e.Id,
                                    PurchaseCode = e.PurchaseCode,
                                    DocTypeId = (int)e.DocTypeId,
                                    SupplierId = e.SupplierId.GetValueOrDefault(),
                                    PurchaseDate = e.PurchaseDate.ToString("dd-MMM-yy"),
                                    DueDate = (DateTime)e.DueDate,
                                    //CheckBox = e.Id== PurchaseId?true:false,
                                    //DueDate = e.DueDate?.ToString("dd-MMM-yy"),
                                    RefName = e.SupplierModel.SupplierName + " - " + e.SupplierName,//(e.SupplierName.Length == 0 || e.SupplierName == null) ? e.SupplierModel.SupplierName : e.SupplierModel.SupplierName + " - " + e.SupplierName,
                                    //Amount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                                    Discount = 0.00,
                                    NetAmount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                                };

                    if (dtFrom != null && dtTo != null)
                    {
                        query = query.Where(p => p.DueDate >= dtFrom && p.DueDate <= dtTo);
                    }




                    var opbalanceduefigure = _transactionDetailsRepository.All().Include(x => x.TransactionMain).Where(x => x.SalesId == null || x.PurchaseId == null).Where(x => x.TransactionMain.SupplierId == SupplierId).Sum(x => x.NetAmount);

                    var opbalancedue = from e in _supplierRepository.All()
                    .Where(x => x.Id == SupplierId && x.OpBalance - Convert.ToDouble(opbalanceduefigure) > 0).ToList()
                                       select new DueTransactionSummary
                                       {
                                           TransactionId = 0,
                                           Id = 0,
                                           DocType = "Purchase",
                                           RefCode = "Prev. Due.",
                                           RefDate = DateTime.Now.Date.ToString("dd-MMM-yy"),
                                           RefId = null,
                                           RefName = e.SupplierName,
                                           //Amount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                           Discount = 0,
                                           NetAmount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                           PaymentType = 1
                                       };


                    //opbalancedue.Append(query);

                    List<DueTransactionSummary> alldata = new List<DueTransactionSummary>();
                    alldata.AddRange(query);
                    alldata.AddRange(opbalancedue);

                    foreach (var item in query)
                    {
                        var data = item;
                    }

                    //var res = Helper.ExecProcMapTList<DeliveryChallanDetailInfo>("DeliveryChallanDetailsInformation", sqlParameter);
                    var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();
                    var pageinfo = new PagingInfo();
                    pageinfo.PageCount = int.Parse(PageCount.ToString());
                    pageinfo.PageNo = page;
                    pageinfo.PageSize = int.Parse(size.ToString());
                    pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                    return Json(new { data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount, success = "1" });
                }

                return Json(new { data = "", success = "1" });

            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }






        [AllowAnonymous]
        public ActionResult GetRefDetailsForTabulator(int? CustomerId, int? SupplierId, int? PurchaseId, int page = 1, decimal size = 5, string searchquery = "", string FromDate = "", string ToDate = "")
        {
            try
            {
                DateTime dtFrom = DateTime.MinValue;
                DateTime dtTo = DateTime.MaxValue;

                if (!string.IsNullOrEmpty(FromDate))
                    dtFrom = Convert.ToDateTime(FromDate);

                if (!string.IsNullOrEmpty(ToDate))
                    dtTo = Convert.ToDateTime(ToDate);

                var purchaselist = _purchaseRepository.All().Where(x => x.IsDelete == false && x.DueDate >= dtFrom && x.DueDate <= dtTo);
                decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);
                decimal skip = (page - 1) * size;

                if (CustomerId != null)
                {

                    var query = from e in _saleRepository.All().Include(x => x.SalesPayments).Include(x => x.CustomerModel)
                                .Where(x => x.CustomerId == CustomerId && x.NetAmount - x.SalesPayments.Sum(x => x.Amount) > 0)
                                .OrderBy(x => x.Id).ToList()
                                select new DueTransactionSummary
                                {
                                    TransactionId = 0,
                                    Id = 0,
                                    DocType = "Sales",
                                    RefCode = e.SaleCode,
                                    RefDate = e.SalesDate.ToString("dd-MMM-yy"),
                                    RefId = e.Id,
                                    PurchaseId = e.Id,
                                    RefName = e.CustomerModel.Name + "  " + e.CustomerName,//(e.CustomerName.Length == 0 || e.CustomerName == null) ? e.CustomerModel.Name : e.CustomerModel.Name + " - " + e.CustomerName,
                                    Amount = e.NetAmount - e.SalesPayments.Sum(x => x.Amount),
                                    Discount = 0.00,
                                    VAT = 0.00,
                                    AIT = 0.00,
                                    NetAmount = e.NetAmount - e.SalesPayments.Sum(x => x.Amount),
                                };
                    if (dtFrom != null && dtTo != null)
                    {
                        query = query.Where(p => p.DueDate >= dtFrom && p.DueDate <= dtTo);
                    }


                    var opbalanceduefigure = _transactionDetailsRepository.All().Include(x => x.TransactionMain).Where(x => x.SalesId == null || x.PurchaseId == null).Where(x => x.TransactionMain.CustomerId == CustomerId).Sum(x => x.NetAmount);

                    var opbalancedue = from e in _customerRepository.All()
                    .Where(x => x.Id == CustomerId && x.OpBalance - Convert.ToDouble(opbalanceduefigure) > 0).ToList()
                                       select new DueTransactionSummary
                                       {
                                           TransactionId = 0,
                                           Id = 0,
                                           DocType = "Sales",
                                           RefCode = "Prev. Due.",
                                           RefDate = DateTime.Now.Date.ToString("dd-MMM-yy"),
                                           RefId = null,
                                           RefName = e.Name,
                                           Amount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                           Discount = 0,
                                           VAT = 0,
                                           AIT = 0,
                                           NetAmount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                           PaymentType = 1,
                                       };


                    //opbalancedue.Append(query);

                    List<DueTransactionSummary> alldata = new List<DueTransactionSummary>();
                    alldata.AddRange(query);
                    alldata.AddRange(opbalancedue);


                    //var abc = _customerRepository.All().Where(x=>x.Id == CustomerId).Where(x=>x.OpBalance - x.AccountsDailyTransaction.tra)


                    //var res = Helper.ExecProcMapTList<DeliveryChallanDetailInfo>("DeliveryChallanDetailsInformation", sqlParameter);

                    return Json(new { data = alldata, success = "1" });
                }
                else if (SupplierId != null || size != null || page != null)
                {


                    var query = from e in purchaselist.Include(x => x.PurchasePayments).Include(x => x.SupplierModel).Where(x => x.SupplierId == SupplierId && x.NetAmount - x.PurchasePayments.Sum(x => x.Amount) > 0).OrderBy(x => x.Id).ToList()  // && x.IsDelete == false && x.DueDate >= dtFrom && x.DueDate <= dtTo
                                select new DueTransactionSummary
                                {
                                    TransactionId = 0,
                                    Id = 0,
                                    DocType = "Purchase",
                                    RefCode = e.PurchaseCode,
                                    RefDate = e.PurchaseDate.ToString("dd-MMM-yy"),
                                    RefId = e.Id,
                                    PurchaseId = e.Id,
                                    PurchaseCode = e.PurchaseCode,
                                    DocTypeId = (int)e.DocTypeId,
                                    SupplierId = e.SupplierId.GetValueOrDefault(),
                                    PurchaseDate = e.PurchaseDate.ToString("dd-MMM-yy"),
                                    DueDate = (DateTime)e.DueDate,
                                    //CheckBox = e.Id== PurchaseId?true:false,
                                    //DueDate = e.DueDate?.ToString("dd-MMM-yy"),
                                    RefName = e.SupplierModel.SupplierName + " - " + e.SupplierName,//(e.SupplierName.Length == 0 || e.SupplierName == null) ? e.SupplierModel.SupplierName : e.SupplierModel.SupplierName + " - " + e.SupplierName,
                                    //Amount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                                    Discount = 0.00,
                                    NetAmount = e.NetAmount - e.PurchasePayments.Sum(x => x.Amount),
                                };

                    if (dtFrom != null && dtTo != null)
                    {
                        query = query.Where(p => p.DueDate >= dtFrom && p.DueDate <= dtTo);
                    }




                    var opbalanceduefigure = _transactionDetailsRepository.All().Include(x => x.TransactionMain).Where(x => x.SalesId == null || x.PurchaseId == null).Where(x => x.TransactionMain.SupplierId == SupplierId).Sum(x => x.NetAmount);

                    var opbalancedue = from e in _supplierRepository.All()
                    .Where(x => x.Id == SupplierId && x.OpBalance - Convert.ToDouble(opbalanceduefigure) > 0).ToList()
                                       select new DueTransactionSummary
                                       {
                                           TransactionId = 0,
                                           Id = 0,
                                           DocType = "Purchase",
                                           RefCode = "Prev. Due.",
                                           RefDate = DateTime.Now.Date.ToString("dd-MMM-yy"),
                                           RefId = null,
                                           RefName = e.SupplierName,
                                           //Amount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                           Discount = 0,
                                           NetAmount = Convert.ToDecimal(e.OpBalance) - Convert.ToDecimal(opbalanceduefigure),
                                           PaymentType = 1
                                       };


                    //opbalancedue.Append(query);

                    List<DueTransactionSummary> alldata = new List<DueTransactionSummary>();
                    alldata.AddRange(query);
                    alldata.AddRange(opbalancedue);

                    foreach (var item in query)
                    {
                        var data = item;
                    }

                    //var res = Helper.ExecProcMapTList<DeliveryChallanDetailInfo>("DeliveryChallanDetailsInformation", sqlParameter);
                    var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();
                    var pageinfo = new PagingInfo();
                    pageinfo.PageCount = int.Parse(PageCount.ToString());
                    pageinfo.PageNo = page;
                    pageinfo.PageSize = int.Parse(size.ToString());
                    pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                    return Json(new { data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount, success = "1" });
                }

                return Json(new { data = "", success = "1" });

            }

            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }







        public string GetSalesCode(int doctypeId)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var docPrefix = docPrefixRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId).FirstOrDefault();

            if (docPrefix.MonthSuffix == false && docPrefix.YearSuffix == false && docPrefix.DateSuffix == false)
            {
                var docNo = docPrefix.LastDocNo + 1;
                var code = docPrefix.DocPrefix + "_" + docNo.ToString();

                docPrefix.LastDocNo += 1;
                docPrefix.LastGeneratedCode = code;
                docPrefixRepository.Update(docPrefix, docPrefix.Id);
                return code;
            }
            else if (docPrefix.YearSuffix == true)
            {
                string yearFormat = docPrefix.Format.Contains("yyyy") ? "yyyy" : "yy";


                DateTime currentDate = DateTime.Now;

                int currentYear = int.Parse(currentDate.ToString(yearFormat));

                if (docPrefix.LastGeneratedCode == null)
                {
                    var docNo = docPrefix.LastDocNo + 1;
                    var code = docPrefix.DocPrefix + "_" + currentYear.ToString() + "_" + docNo.ToString();

                    docPrefix.LastDocNo += 1;
                    docPrefix.LastGeneratedCode = code;
                    docPrefixRepository.Update(docPrefix, docPrefix.Id);
                    return code;
                }
                else
                {
                    int firstUnderscoreIndex = docPrefix.LastGeneratedCode.IndexOf('_');

                    int secondUnderscoreIndex = docPrefix.LastGeneratedCode.IndexOf('_', firstUnderscoreIndex + 1);

                    int yearSubstring = int.Parse(docPrefix.LastGeneratedCode.Substring(firstUnderscoreIndex + 1, secondUnderscoreIndex - firstUnderscoreIndex - 1));

                    if (yearFormat == "yy" && yearSubstring > 100)
                    {
                        yearSubstring = yearSubstring % 100;
                    }

                    if (yearSubstring < currentYear)
                    {
                        var docNo = docPrefix.FirstDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + currentYear.ToString() + "_" + docNo.ToString();

                        docPrefix.LastDocNo = docPrefix.FirstDocNo;
                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                    else
                    {
                        var docNo = docPrefix.LastDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + currentYear.ToString() + "_" + docNo.ToString();

                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                }
            }
            else if (docPrefix.MonthSuffix == true)
            {
                DateTime currentDate = DateTime.Now;

                string[] formatparts = docPrefix.Format.Split('/');


                int currentYear = int.Parse(currentDate.ToString(formatparts[1]));
                int currentMonth = int.Parse(currentDate.ToString(formatparts[0]));

                if (docPrefix.LastGeneratedCode == null)
                {
                    var docNo = docPrefix.LastDocNo + 1;
                    var code = docPrefix.DocPrefix + "_" + currentMonth.ToString() + "/" + currentYear.ToString() + "_" + docNo.ToString();

                    docPrefix.LastDocNo += 1;
                    docPrefix.LastGeneratedCode = code;
                    docPrefixRepository.Update(docPrefix, docPrefix.Id);
                    return code;
                }
                else
                {
                    string[] parts = docPrefix.LastGeneratedCode.Split('_');
                    string[] parts2 = parts[1].Split('/');

                    int month = int.Parse(parts2[0]);
                    int year = int.Parse(parts2[1]);

                    if (month < currentMonth && year <= currentYear)
                    {
                        var docNo = docPrefix.FirstDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + currentMonth.ToString() + "/" + currentYear.ToString() + "_" + docNo.ToString();

                        docPrefix.LastDocNo = docPrefix.FirstDocNo;
                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                    else
                    {
                        var docNo = docPrefix.LastDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + currentMonth.ToString() + "/" + currentYear.ToString() + "_" + docNo.ToString();

                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                }
            }
            else if (docPrefix.DateSuffix == true)
            {
                DateTimeOffset currentDate = DateTimeOffset.Now;

                var dateFormat = docPrefix.Format;
                string formattedDate = $"{currentDate.ToString(dateFormat)}";


                if (docPrefix.LastGeneratedCode == null)
                {
                    var docNo = docPrefix.LastDocNo + 1;
                    var code = docPrefix.DocPrefix + "_" + formattedDate + "_" + docNo.ToString();

                    docPrefix.LastDocNo += 1;
                    docPrefix.LastGeneratedCode = code;
                    docPrefixRepository.Update(docPrefix, docPrefix.Id);
                    return code;
                }
                else
                {
                    string inputString = docPrefix.LastGeneratedCode;
                    string[] parts = inputString.Split('_');

                    string dateString = parts[1];

                    DateTime date = DateTime.Parse(dateString);

                    if (date.Date < currentDate.Date)
                    {
                        var docNo = docPrefix.FirstDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + formattedDate + "_" + docNo.ToString();

                        docPrefix.LastDocNo = docPrefix.FirstDocNo;
                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                    else
                    {
                        var docNo = docPrefix.LastDocNo + 1;
                        var code = docPrefix.DocPrefix + "_" + formattedDate + "_" + docNo.ToString();

                        docPrefix.LastDocNo += 1;
                        docPrefix.LastGeneratedCode = code;
                        docPrefixRepository.Update(docPrefix, docPrefix.Id);
                        return code;
                    }
                }
            }

            return "";
        }





        #region custom function
        public void SendingFunction(string smstype, int Id, string CommandType)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");


                if (smstype == "PaymentReceived")
                {
                    var dailytransaction = _transactionRepository.All().Where(x => x.Id == Id).Include(x => x.Customer).Include(x => x.CompanyList).FirstOrDefault();
                    var storeinfo = _storeSettingRepository.All().Where(x => x.ComId == ComId).FirstOrDefault();


                    if (storeinfo.isEmailSerivce == true)
                    {
                        if (dailytransaction.Customer.Email != null && dailytransaction.Customer.Email.Length > 7)
                        {
                            string mailList = dailytransaction.Customer.Email;
                            string subject = $"Sales order";
                            string body = $"<br/>Bill Amount Received.<br/><br/>Received Date :<b>{dailytransaction.InputDate.ToString("dd-MMM-yy")}</b> <br/> <h1> Transaction No : <b>{dailytransaction.TransactionCode}</b></h1> <br/> Received Amount : <b>{dailytransaction.TransactionAmount}</b>  <br/> <br/>{dailytransaction.CompanyList.CompanyName}";
                            //var hostaddressforsender = Request.GetTypedHeaders().Host.Value;
                            _emailsender.SendEmailAsync(mailList, subject, body);
                        }
                    }

                    if (storeinfo.isSMSService == true)
                    {
                        //if (dailytransaction.CustomerId != null )
                        //{
                        //    if (dailytransaction.Customer.Phone.Length > 10)
                        //    {
                        CreditUsedModel sendsmsmodel = new CreditUsedModel();
                        sendsmsmodel.SMSText = $"Bill Amount Received{Environment.NewLine}Received Date:{dailytransaction.InputDate.ToString("dd-MMM-yy")}{Environment.NewLine}Transaction No:{dailytransaction.TransactionCode}{Environment.NewLine}Rcvd. Amount:{dailytransaction.TransactionAmount}{Environment.NewLine}{dailytransaction.CompanyList.CompanyName}";
                        sendsmsmodel.TextLength = sendsmsmodel.SMSText.Length;
                        sendsmsmodel.Quantity = (sendsmsmodel.SMSText.Length / 160) + 1;
                        sendsmsmodel.SendingDate = DateTime.Now;
                        sendsmsmodel.CommandType = CommandType;
                        //    }
                        //}


                        if (dailytransaction.Customer != null)
                        {
                            if (dailytransaction.Customer.Phone != null && dailytransaction.Customer.Phone.Length > 10)
                            {
                                sendsmsmodel.Remarks = dailytransaction.Customer.Phone + " " + dailytransaction.Customer.Name + " Accounts Daily Transaction Id : " + dailytransaction.Id;

                                var balancesms = _CreditBalanceRepository.All().Where(x => x.ValidityDate >= DateTime.Now.Date && x.PurchaseQuantity - x.UsedQuantity > 0 && x.Type == "SMS").OrderBy(x => x.ValidityDate).FirstOrDefault();

                                if (balancesms != null)
                                {
                                    if (balancesms.PurchaseQuantity - balancesms.UsedQuantity > 0)
                                    {
                                        _smsSender.SendSmsAsync(dailytransaction.Customer.Phone, sendsmsmodel.SMSText);


                                        balancesms.UsedQuantity = balancesms.UsedQuantity + sendsmsmodel.Quantity;
                                        _CreditBalanceRepository.Update(balancesms, balancesms.Id);

                                        _creditUsedLogRepository.Insert(sendsmsmodel);
                                    }
                                }

                            }

                            //_creditUsedLogRepository.Insert(sendsmsmodel);

                            //if (dailytransaction.Customer.Phone != null && dailytransaction.Customer.Phone.Length > 10)
                            //{
                            //    _smsSender.SendSmsAsync(dailytransaction.Customer.Phone, sendsmsmodel.Text);
                            //}

                        }

                    }

                }
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }
        #endregion

        [AllowAnonymous]
        public JsonResult GetTransactionCodes()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var transactionCode = _transactionRepository.All().Where(p => p.ComId == ComId).ToList();

            foreach (var item in transactionCode)
            {
                if (item.TransactionCode == null)
                {
                    item.TransactionCode = "Not found";
                }
            }

            SelectList masterLCList = new SelectList(transactionCode, "Id", "TransactionCode");
            return Json(masterLCList);
        }

        [HttpPost]
        //[ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult AddTransactionQB([FromBody] TransactionModel model)
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                if (ModelState.IsValid)
                {

                    if (model.CustomerId > 0)
                    {
                        var CreditAccountId = _accountHeadRepository.All()   //.Include(x => x.AccountCategory)
                             .Where(x => x.CountryId == model.CurrencyId && x.AccountCategorys.AccountCategoryName.ToLower() == "Accounts Receivable")

                             .FirstOrDefault().Id;

                        if (CreditAccountId != null)
                        {
                            if (model.CreditAccountId == 1)
                            {
                                model.CreditAccountId = _accountHeadRepository.All()
                             .Where(x => x.AccountCategorys.AccountCategoryName.ToLower() == "Adv. Received from Customer")

                             .FirstOrDefault().Id;
                                model.Description = "Advance Receive";
                            }
                            else
                            {
                                model.CreditAccountId = CreditAccountId;
                            }
                        }

                        if (model.TransactionCode.Length == 0)
                        {
                            var doctypeId = _docTypeRepository.All().Where(x => x.DocType == "Receive payment").FirstOrDefault().Id;

                            var docPrefix = docPrefixRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId).FirstOrDefault();
                            if (docPrefix != null)
                            {
                                model.TransactionCode = GetSalesCode(doctypeId);
                            }
                        }


                    }

                    if (model.SupplierId > 0)
                    {
                        var DebitAccountId = _accountHeadRepository.All()   //.Include(x => x.AccountCategory)
                             .Where(x => x.CountryId == model.CurrencyId && x.AccountCategorys.AccountCategoryName.ToLower() == "Accounts Payable")
                             .FirstOrDefault().Id;

                        if (DebitAccountId != null)
                        {
                            if (model.DebitAccountId == 0)
                            {
                                model.DebitAccountId = _accountHeadRepository.All()
                             .Where(x => x.AccountCategorys.AccountCategoryName.ToLower() == "Advance to Supplier")
                             .FirstOrDefault().Id;

                                model.Description = "Advance Payment";
                            }
                            else
                            {
                                model.DebitAccountId = DebitAccountId;
                            }
                        }

                        if (model.ParentTransactionId != null)
                        {
                            if (model.Id == 0)
                            {
                                var temp = _transactionRepository.All().Where(x => x.Id == model.ParentTransactionId).FirstOrDefault();
                                temp.ReceivedAmount = temp.ReceivedAmount + (double)model.AdjustedAmount;
                                temp.LuserId = HttpContext.Session.GetInt32("UserId") ?? 0;
                                _transactionRepository.Update(temp, temp.Id);
                            }
                            else
                            {
                                var oldmodel = _transactionRepository.All().Where(x => x.Id == model.Id).FirstOrDefault();
                                var temp = _transactionRepository.All().Where(x => x.Id == model.ParentTransactionId).FirstOrDefault();
                                temp.ReceivedAmount = temp.ReceivedAmount + (double)model.AdjustedAmount - oldmodel.AdjustedAmount;
                                temp.LuserId = HttpContext.Session.GetInt32("UserId") ?? 0;
                                _transactionRepository.Update(temp, temp.Id);
                            }

                        }

                        if (model.TransactionCode.Length == 0)
                        {
                            var doctypeId = _docTypeRepository.All().Where(x => x.DocType == "Payment").FirstOrDefault();
                            var docPrefix = docPrefixRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId.Id).FirstOrDefault();
                            if (docPrefix != null)
                            {
                                model.TransactionCode = GetSalesCode(doctypeId.Id);
                            }
                        }

                    }



                    var discountexpensedata = _accountHeadRepository.All().Where(x => x.AccName.Contains("Discount Expense")).FirstOrDefault();
                    var discountincomedata = _accountHeadRepository.All().Where(x => x.AccName.Contains("Discount Income")).FirstOrDefault();

                    var vatexpensedata = _accountHeadRepository.All().Where(x => x.AccName.ToLower().Contains("VAT Expense".ToLower())).FirstOrDefault();
                    var aitexpensedata = _accountHeadRepository.All().Where(x => x.AccName.ToLower().Contains("AIT Expense".ToLower())).FirstOrDefault();
                    Console.WriteLine(model);



                    int? discountexpenseid = discountexpensedata != null ? discountexpensedata.Id : null;
                    int? discountincomeid = discountincomedata != null ? discountincomedata.Id : null;
                    int? vatexpenseid = vatexpensedata != null ? vatexpensedata.Id : null;
                    int? aitexpenseid = aitexpensedata != null ? aitexpensedata.Id : null;




                    if (model.Id == 0)
                    {

                        if (model.TransactionCategory == "Sales" || model.TransactionCategory == "CustomerDiscount")
                        {
                            var salesdata = _saleRepository.All().Where(x => x.Id == model.SalesId).FirstOrDefault();
                            if (salesdata != null)
                            {
                                model.CustomerId = salesdata.CustomerId;
                            }

                        }
                        else if (model.TransactionCategory == "Purchase" || model.TransactionCategory == "SupplierDiscount")
                        {
                            var purchasedata = _purchaseRepository.All().Where(x => x.Id == model.PurchaseId).FirstOrDefault();
                            if (purchasedata != null)
                            {
                                model.SupplierId = purchasedata.SupplierId;
                            }
                        }


                        //for (int i = 0; i < model.TransactionTags.Length; i++)
                        //{
                        //    TransactionTagsModel transactiontags = new TransactionTagsModel { tag = (model.TransactionTags[i]), TransactionId = model.Id };
                        //    transactiontags.Id = 0;
                        //    _transactionTagsRepository.Insert(transactiontags);

                        //}




                        model.TransactionTagsList = new List<TransactionTagsModel>();
                        if (model.TransactionTags != null)
                        {
                            for (int i = 0; i < model.TransactionTags.Length; i++)
                            {

                                TransactionTagsModel transactiontags = new TransactionTagsModel { tag = (model.TransactionTags[i]), ComId = ComId.GetValueOrDefault(), LuserId = UserId.GetValueOrDefault() };
                                model.TransactionTagsList.Add(transactiontags);
                            }

                        }
                        foreach (var item in model.TransactionDetails)
                        {
                            item.ComId = ComId.GetValueOrDefault();
                        }

                        _transactionRepository.Insert(model);



                        if (model.PurchaseId > 0)
                        {
                            PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                            purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
                            purchasepayment.AccountHeadId = model.CreditAccountId;
                            purchasepayment.Amount = model.TransactionAmount;
                            purchasepayment.isPosted = false;
                            purchasepayment.RowNo = 999;
                            purchasepayment.TransactionId = model.Id;


                            _purchasePaymentRepository.Insert(purchasepayment);

                        }

                        if (model.TransactionDetails != null)
                        {
                            if (model.DiscountAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = discountexpenseid; //discount expense id
                                abc.Description = "Discount Expense.";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.DiscountAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;
                                _transactionRepository.Insert(abc);
                            }

                            if (model.VATAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = vatexpenseid; //discount expense id
                                abc.Description = "VAT Expense.";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.VATAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;

                                _transactionRepository.Insert(abc);
                            }


                            if (model.AITAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = aitexpenseid; //discount expense id
                                abc.Description = "AIT Expense";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.AITAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;


                                _transactionRepository.Insert(abc);
                            }
                            if (model.DiscountAmount > 0 && model.SupplierId > 0)
                            {
                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.DebitAccountId = model.DebitAccountId;
                                abc.CreditAccountId = discountincomeid; //discount expense id
                                abc.Description = "Discount Income";// model.Description;
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.DiscountAmount;
                                abc.TransactionCategory = "Received";
                                abc.TransactionType = "Received";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.SupplierId = model.SupplierId;


                                _transactionRepository.Insert(abc);


                            }


                            foreach (var item in model.TransactionDetails)
                            {
                                if (item.PurchaseId > 0)
                                {

                                    if (item.NetAmount > 0)
                                    {
                                        PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                                        purchasepayment.PurchaseId = item.PurchaseId.GetValueOrDefault();
                                        purchasepayment.AccountHeadId = model.CreditAccountId;
                                        purchasepayment.Amount = item.NetAmount;
                                        purchasepayment.isPosted = false;
                                        purchasepayment.RowNo = 999;
                                        purchasepayment.TransactionId = model.Id;

                                        _purchasePaymentRepository.Insert(purchasepayment);
                                    }


                                    if (item.Discount > 0)
                                    {
                                        PurchasePaymentModel purchasediscount = new PurchasePaymentModel();
                                        purchasediscount.PurchaseId = item.PurchaseId.GetValueOrDefault();
                                        purchasediscount.AccountHeadId = discountincomeid;
                                        purchasediscount.Amount = item.Discount;
                                        purchasediscount.isPosted = false;
                                        purchasediscount.RowNo = 999;
                                        purchasediscount.TransactionId = model.Id;

                                        _purchasePaymentRepository.Insert(purchasediscount);
                                    }

                                }
                                else if (item.SalesId > 0)
                                {

                                    if (item.NetAmount > 0)
                                    {
                                        SalesPaymentModel salespayment = new SalesPaymentModel();
                                        salespayment.SalesId = item.SalesId.GetValueOrDefault();
                                        salespayment.AccountHeadId = model.DebitAccountId;
                                        salespayment.Amount = item.NetAmount;
                                        salespayment.isPosted = false;
                                        salespayment.RowNo = 999;
                                        salespayment.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespayment);


                                    }
                                    if (item.Discount > 0)
                                    {
                                        SalesPaymentModel salesdiscount = new SalesPaymentModel();
                                        salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salesdiscount.AccountHeadId = discountexpenseid;
                                        salesdiscount.Amount = item.Discount;
                                        salesdiscount.isPosted = false;
                                        salesdiscount.RowNo = 999;
                                        salesdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salesdiscount);
                                    }

                                    if (item.VAT > 0)
                                    {
                                        SalesPaymentModel salesdiscount = new SalesPaymentModel();
                                        salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salesdiscount.AccountHeadId = vatexpenseid;
                                        salesdiscount.Amount = item.VAT;
                                        salesdiscount.isPosted = false;
                                        salesdiscount.RowNo = 997;
                                        salesdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salesdiscount);
                                    }


                                    if (item.Discount > 0)
                                    {
                                        SalesPaymentModel salesdiscount = new SalesPaymentModel();
                                        salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salesdiscount.AccountHeadId = aitexpenseid;
                                        salesdiscount.Amount = item.AIT;
                                        salesdiscount.isPosted = false;
                                        salesdiscount.RowNo = 996;
                                        salesdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salesdiscount);
                                    }

                                }
                            }


                            //return Json(new { Success = 1, Id = model.Id, ex = "Data Save Successfully." });
                            return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully." });

                        }

                        TempData["Message"] = "Data Save Successfully";
                        TempData["Status"] = "1";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.DebitAccount != null ? model.DebitAccount.AccName : "");

                        //SendingFunction("PaymentReceived", model.Id, "Save");
                        //return RedirectToAction("AddTransaction", new { Type = model.TransactionCategory });
                        //return Json(new { Success = 1, Id = model.Id, ex = "Data Save Successfully." });
                        return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully " });
                    }

                    else
                    {
                        var parenttransaction = _transactionRepository.All().Where(x => x.ParentTransactionId == model.Id).ToList();
                        var debitAccountName = _accountHeadRepository.All().Where(x => x.AccName == "Advance to Supplier" && x.ComId == ComId).FirstOrDefault();
                        //if(debitAccountName.Id == model.DebitAccountId)
                        //{
                        //    return Json(new { message = "Unable to save data Due to referrenced transaction." });
                        //}
                        if (parenttransaction.Count() > 0) //.Where(x => x.isPost == true)
                        {
                            return Json(new { message = "Unable to update data Due to referrenced transaction is already posted." });
                        }
                        _transactionRepository.RemoveRange(parenttransaction);

                        var prevtaglist = _transactionTagsRepository.All().Where(x => x.TransactionId == model.Id).ToList();
                        _transactionTagsRepository.RemoveRange(prevtaglist);


                        var purchasepaymentlist = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).ToList(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
                        _purchasePaymentRepository.RemoveRange(purchasepaymentlist);


                        var salespaymentlist = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id).ToList(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
                        _salesPaymentRepository.RemoveRange(salespaymentlist);





                        //model.TransactionTagsList = new List<TransactionTagsModel>();


                        if (model.TransactionTags != null)
                        {
                            var TransactionTagsList = new List<TransactionTagsModel>();


                            for (int i = 0; i < model.TransactionTags.Length; i++)
                            {

                                TransactionTagsModel transactiontags = new TransactionTagsModel { TransactionId = model.Id, tag = (model.TransactionTags[i]), ComId = ComId.GetValueOrDefault(), LuserId = UserId.GetValueOrDefault() };
                                TransactionTagsList.Add(transactiontags);
                            }

                            if (TransactionTagsList.Count > 0)
                            {
                                _transactionTagsRepository.AddRange(TransactionTagsList);

                            }


                        }


                        model.LuserId = HttpContext.Session.GetInt32("UserId") ?? 0;



                        _transactionRepository.Update(model, model.Id);

                        if (model.TransactionDetails != null)
                        {
                            if (model.TransactionDetails.Count() > 0)
                            {
                                foreach (var item in model.TransactionDetails)
                                {
                                    _transactionDetailsRepository.Update(item, item.Id);
                                }
                            }
                        }


                        if (model.SalesId > 0)
                        {
                            var salespayment = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id && x.AccountHeadId != discountexpenseid).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
                                                                                                                                                                               //var salesdiscount = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id && x.AccountHeadId == discountexpenseid).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
                                                                                                                                                                               //SalesPaymentModel salespayment = new SalesPaymentModel();


                            if (salespayment == null)
                            {
                                salespayment = new SalesPaymentModel();
                            }

                            salespayment.SalesId = model.SalesId.GetValueOrDefault();
                            salespayment.AccountHeadId = model.CreditAccountId;
                            salespayment.Amount = model.TransactionAmount;
                            salespayment.isPosted = false;
                            salespayment.RowNo = 999;
                            salespayment.TransactionId = model.Id;


                            var transactioncount = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
                            if (transactioncount > 0)
                            {
                                _salesPaymentRepository.Update(salespayment, salespayment.Id);
                            }
                            else
                            {
                                _salesPaymentRepository.Insert(salespayment);
                            }



                        }
                        else if (model.PurchaseId > 0)
                        {


                            //var transactioncount = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
                            //if (transactioncount > 0)
                            //{

                            var purchasepayment = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();

                            if (purchasepayment == null)
                            {
                                purchasepayment = new PurchasePaymentModel();
                            }

                            //PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                            purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
                            purchasepayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccountId;
                            purchasepayment.Amount = model.TransactionAmount;
                            purchasepayment.isPosted = false;
                            purchasepayment.RowNo = 999;
                            purchasepayment.TransactionId = model.Id;


                            var transactioncount = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
                            if (transactioncount > 0)
                            {
                                _purchasePaymentRepository.Update(purchasepayment, purchasepayment.Id);
                            }
                            else
                            {
                                _purchasePaymentRepository.Insert(purchasepayment);
                            }


                            //_purchasePaymentRepository.Update(purchasepayment, purchasepayment.Id);
                            //}

                            //else
                            //{

                            //    PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                            //    purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
                            //    purchasepayment.AccountHeadId = model.CreditAccountId;
                            //    purchasepayment.Amount = model.TransactionAmount;
                            //    purchasepayment.isPosted = false;
                            //    purchasepayment.RowNo = 999;
                            //    purchasepayment.TransactionId = model.Id;

                            //    _purchasePaymentRepository.Insert(purchasepayment);


                            //}

                        }
                        else if (model.TransactionDetails != null)
                        {

                            if (model.DiscountAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = discountexpenseid; //discount expense id
                                abc.Description = model.Description;
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.DiscountAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;


                                _transactionRepository.Insert(abc);
                            }
                            if (model.VATAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = vatexpenseid; //discount expense id
                                abc.Description = model.Description + ". Entry For VAT Expense";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.VATAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;

                                _transactionRepository.Insert(abc);
                            }
                            if (model.AITAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = aitexpenseid; //discount expense id
                                abc.Description = model.Description + ". Entry For AIT Expense";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.AITAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;

                                _transactionRepository.Insert(abc);
                            }
                            if (model.DiscountAmount > 0 && model.SupplierId > 0)
                            {


                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.DebitAccountId = model.CreditAccountId;
                                abc.CreditAccountId = discountincomeid; //discount expense id
                                abc.Description = model.Description;
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.DiscountAmount;
                                abc.TransactionCategory = "Received";
                                abc.TransactionType = "Received";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.SupplierId = model.SupplierId;


                                _transactionRepository.Insert(abc);


                            }

                            foreach (var item in model.TransactionDetails)
                            {
                                if (item.PurchaseId > 0)
                                {
                                    if (item.NetAmount > 0)
                                    {
                                        PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                                        purchasepayment.PurchaseId = item.PurchaseId.GetValueOrDefault();
                                        purchasepayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccountId;
                                        purchasepayment.Amount = item.NetAmount;
                                        purchasepayment.isPosted = false;
                                        purchasepayment.RowNo = 999;
                                        purchasepayment.TransactionId = model.Id;

                                        _purchasePaymentRepository.Insert(purchasepayment);
                                    }
                                    if (item.Discount > 0)
                                    {

                                        PurchasePaymentModel purchasepaymentdiscount = new PurchasePaymentModel();
                                        purchasepaymentdiscount.PurchaseId = item.PurchaseId.GetValueOrDefault();
                                        purchasepaymentdiscount.AccountHeadId = discountincomeid; //model.CreditAccountId ?? model.DebitAccounId;//fahad test 
                                        purchasepaymentdiscount.Amount = item.Discount;
                                        purchasepaymentdiscount.isPosted = false;
                                        purchasepaymentdiscount.RowNo = 998;
                                        purchasepaymentdiscount.TransactionId = model.Id;

                                        _purchasePaymentRepository.Insert(purchasepaymentdiscount);
                                    }

                                }
                                else if (item.SalesId > 0)
                                {
                                    if (item.NetAmount > 0)
                                    {
                                        SalesPaymentModel salespayment = new SalesPaymentModel();
                                        salespayment.SalesId = item.SalesId.GetValueOrDefault();
                                        salespayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccountId;
                                        salespayment.Amount = item.NetAmount;
                                        salespayment.isPosted = false;
                                        salespayment.RowNo = 999;
                                        salespayment.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespayment);
                                    }

                                    if (item.Discount > 0)
                                    {
                                        SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
                                        salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salespaymentdiscount.AccountHeadId = discountexpenseid;
                                        salespaymentdiscount.Amount = item.Discount;
                                        salespaymentdiscount.isPosted = false;
                                        salespaymentdiscount.RowNo = 999;
                                        salespaymentdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespaymentdiscount);
                                    }


                                    if (item.VAT > 0)
                                    {
                                        SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
                                        salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salespaymentdiscount.AccountHeadId = vatexpenseid;
                                        salespaymentdiscount.Amount = item.VAT;
                                        salespaymentdiscount.isPosted = false;
                                        salespaymentdiscount.RowNo = 999;
                                        salespaymentdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespaymentdiscount);
                                    }




                                    if (item.AIT > 0)
                                    {
                                        SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
                                        salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salespaymentdiscount.AccountHeadId = aitexpenseid;
                                        salespaymentdiscount.Amount = item.AIT;
                                        salespaymentdiscount.isPosted = false;
                                        salespaymentdiscount.RowNo = 999;
                                        salespaymentdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespaymentdiscount);
                                    }

                                }
                            }


                            return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully." });

                        }

                        //SendingFunction("PaymentReceived", model.Id, "Update");

                        TempData["Message"] = "Data Update Successfully";
                        TempData["Status"] = "2";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.DebitAccount != null ? model.DebitAccount.AccName : "");

                    }
                    return Json(new { Success = 1, TransactionId = model.Id, message = "Data Update Successfully." });
                    //return RedirectToAction("TransactionList");

                }
                else
                {
                    if (model.Id == 0)
                    {
                        ViewBag.ActionType = "Create";
                    }
                    else
                    {
                        ViewBag.ActionType = "Edit";
                    }
                }
                return View(model);

            }
            catch (Exception ex)
            {
                return Json(new { message = "Unable to save data." });
                //return Json(ex.Message);
                throw ex;
            }
        }



        [AllowAnonymous]
        [HttpPost]
        public IActionResult DeleteFileName(string fileName)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");

                string[] parts = fileName.Split('/');
                string lastPart = parts[parts.Length - 1];
                string[] subparts = lastPart.Split('_');
                var firstPart = int.Parse(subparts[0]);

                var model = _transactionRepository.Find(firstPart);


                model.FilePath = model.FilePath.Replace(fileName + ";", "");


                // Update model in repository if needed
                _transactionRepository.Update(model, model.Id);

                return Json(new { Success = 1, ex = "Data " });
            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }


        //[HttpPost]
        ////[ValidateAntiForgeryToken]
        //[AllowAnonymous]
        //public ActionResult AddPurchaseTransactionQB([FromBody] PurchaseModel model)
        //{
        //    try
        //    {
        //        var errors = ModelState.Where(x => x.Value.Errors.Any())
        //        .Select(x => new { x.Key, x.Value.Errors });

        //        var UserId = HttpContext.Session.GetInt32("UserId");
        //        var ComId = HttpContext.Session.GetInt32("ComId");
        //        if (ModelState.IsValid)
        //        {
        //            var discountexpensedata = _accountHeadRepository.All().Where(x => x.AccName.Contains("Discount Expense")).FirstOrDefault();
        //            var discountincomedata = _accountHeadRepository.All().Where(x => x.AccName.Contains("Discount Income")).FirstOrDefault();

        //            var vatexpensedata = _accountHeadRepository.All().Where(x => x.AccName.ToLower().Contains("VAT Expense".ToLower())).FirstOrDefault();
        //            var aitexpensedata = _accountHeadRepository.All().Where(x => x.AccName.ToLower().Contains("AIT Expense".ToLower())).FirstOrDefault();




        //            int? discountexpenseid = discountexpensedata != null ? discountexpensedata.Id : null;
        //            int? discountincomeid = discountincomedata != null ? discountincomedata.Id : null;
        //            int? vatexpenseid = vatexpensedata != null ? vatexpensedata.Id : null;
        //            int? aitexpenseid = aitexpensedata != null ? aitexpensedata.Id : null;




        //            if (model.Id == 0)
        //            {

        //                if (model.TransactionCategory == "Sales" || model.TransactionCategory == "CustomerDiscount")
        //                {
        //                    var salesdata = _saleRepository.All().Where(x => x.Id == model.SalesId).FirstOrDefault();
        //                    if (salesdata != null)
        //                    {
        //                        model.CustomerId = salesdata.CustomerId;
        //                    }

        //                }
        //                else if (model.TransactionCategory == "Purchase" || model.TransactionCategory == "SupplierDiscount")
        //                {
        //                    var purchasedata = _purchaseRepository.All().Where(x => x.Id == model.PurchaseId).FirstOrDefault();
        //                    if (purchasedata != null)
        //                    {
        //                        model.SupplierId = purchasedata.SupplierId;
        //                    }
        //                }


        //                //for (int i = 0; i < model.TransactionTags.Length; i++)
        //                //{
        //                //    TransactionTagsModel transactiontags = new TransactionTagsModel { tag = (model.TransactionTags[i]), TransactionId = model.Id };
        //                //    transactiontags.Id = 0;
        //                //    _transactionTagsRepository.Insert(transactiontags);

        //                //}




        //                model.TransactionTagsList = new List<TransactionTagsModel>();
        //                if (model.TransactionTags != null)
        //                {
        //                    for (int i = 0; i < model.TransactionTags.Length; i++)
        //                    {

        //                        TransactionTagsModel transactiontags = new TransactionTagsModel { tag = (model.TransactionTags[i]), ComId = ComId.GetValueOrDefault(), LuserId = UserId.GetValueOrDefault() };
        //                        model.TransactionTagsList.Add(transactiontags);
        //                    }

        //                }


        //                _transactionRepository.Insert(model);


        //                if (model.SalesId > 0)
        //                {
        //                    SalesPaymentModel salespayment = new SalesPaymentModel();
        //                    salespayment.SalesId = model.SalesId.GetValueOrDefault();
        //                    salespayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccounId;
        //                    salespayment.Amount = model.TransactionAmount;
        //                    salespayment.isPosted = false;
        //                    salespayment.RowNo = 999;
        //                    salespayment.TransactionId = model.Id;

        //                    _salesPaymentRepository.Insert(salespayment);
        //                }

        //                if (model.PurchaseId > 0)
        //                {
        //                    PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
        //                    purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
        //                    purchasepayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccounId;
        //                    purchasepayment.Amount = model.TransactionAmount;
        //                    purchasepayment.isPosted = false;
        //                    purchasepayment.RowNo = 999;
        //                    purchasepayment.TransactionId = model.Id;


        //                    _purchasePaymentRepository.Insert(purchasepayment);

        //                }

        //                if (model.TransactionDetails != null)
        //                {
        //                    if (model.DiscountAmount > 0 && model.CustomerId > 0)
        //                    {

        //                        var abc = new TransactionModel();
        //                        abc.TransactionCode = model.TransactionCode;
        //                        abc.CreditAccountId = model.CreditAccountId;
        //                        abc.AccountId = discountexpenseid; //discount expense id
        //                        abc.Description = model.Description;
        //                        abc.IsDelete = model.IsDelete;
        //                        abc.CreateDate = model.CreateDate;
        //                        abc.UpdateDate = model.UpdateDate;
        //                        abc.CurrencyId = model.CurrencyId;
        //                        abc.CurrencyRate = model.CurrencyRate;
        //                        abc.TransactionAmount = model.DiscountAmount;
        //                        abc.TransactionCategory = "Paid";
        //                        abc.TransactionType = "Paid";
        //                        abc.isSystem = true;
        //                        abc.IsDelete = false;
        //                        abc.ComId = model.ComId;
        //                        abc.LuserId = model.LuserId;
        //                        abc.LuserIdUpdate = model.LuserIdUpdate;
        //                        abc.InputDate = model.InputDate;
        //                        abc.isPost = true;
        //                        abc.ParentTransactionId = model.Id;
        //                        abc.WarehouseId = model.WarehouseId;
        //                        abc.CustomerId = model.CustomerId;

        //                        _transactionRepository.Insert(abc);
        //                    }

        //                    if (model.VATAmount > 0 && model.CustomerId > 0)
        //                    {

        //                        var abc = new TransactionModel();
        //                        abc.TransactionCode = model.TransactionCode;
        //                        abc.CreditAccountId = model.CreditAccountId;
        //                        abc.AccountId = vatexpenseid; //discount expense id
        //                        abc.Description = model.Description + ". Entry For VAT Expense";
        //                        abc.IsDelete = model.IsDelete;
        //                        abc.CreateDate = model.CreateDate;
        //                        abc.UpdateDate = model.UpdateDate;
        //                        abc.CurrencyId = model.CurrencyId;
        //                        abc.CurrencyRate = model.CurrencyRate;
        //                        abc.TransactionAmount = model.VATAmount;
        //                        abc.TransactionCategory = "Paid";
        //                        abc.TransactionType = "Paid";
        //                        abc.isSystem = true;
        //                        abc.IsDelete = false;
        //                        abc.ComId = model.ComId;
        //                        abc.LuserId = model.LuserId;
        //                        abc.LuserIdUpdate = model.LuserIdUpdate;
        //                        abc.InputDate = model.InputDate;
        //                        abc.isPost = true;
        //                        abc.ParentTransactionId = model.Id;
        //                        abc.WarehouseId = model.WarehouseId;
        //                        abc.CustomerId = model.CustomerId;

        //                        _transactionRepository.Insert(abc);
        //                    }


        //                    if (model.AITAmount > 0 && model.CustomerId > 0)
        //                    {

        //                        var abc = new TransactionModel();
        //                        abc.TransactionCode = model.TransactionCode;
        //                        abc.CreditAccountId = model.CreditAccountId;
        //                        abc.AccountId = aitexpenseid; //discount expense id
        //                        abc.Description = model.Description + " . Entry For AIT Expense";
        //                        abc.IsDelete = model.IsDelete;
        //                        abc.CreateDate = model.CreateDate;
        //                        abc.UpdateDate = model.UpdateDate;
        //                        abc.CurrencyId = model.CurrencyId;
        //                        abc.CurrencyRate = model.CurrencyRate;
        //                        abc.TransactionAmount = model.AITAmount;
        //                        abc.TransactionCategory = "Paid";
        //                        abc.TransactionType = "Paid";
        //                        abc.isSystem = true;
        //                        abc.IsDelete = false;
        //                        abc.ComId = model.ComId;
        //                        abc.LuserId = model.LuserId;
        //                        abc.LuserIdUpdate = model.LuserIdUpdate;
        //                        abc.InputDate = model.InputDate;
        //                        abc.isPost = true;
        //                        abc.ParentTransactionId = model.Id;
        //                        abc.WarehouseId = model.WarehouseId;
        //                        abc.CustomerId = model.CustomerId;

        //                        _transactionRepository.Insert(abc);
        //                    }
        //                    if (model.DiscountAmount > 0 && model.SupplierId > 0)
        //                    {
        //                        var abc = new TransactionModel();
        //                        abc.TransactionCode = model.TransactionCode;
        //                        abc.CreditAccountId = model.CreditAccountId;
        //                        abc.AccountId = discountincomeid; //discount expense id
        //                        abc.Description = model.Description;
        //                        abc.IsDelete = model.IsDelete;
        //                        abc.CreateDate = model.CreateDate;
        //                        abc.UpdateDate = model.UpdateDate;
        //                        abc.CurrencyId = model.CurrencyId;
        //                        abc.CurrencyRate = model.CurrencyRate;
        //                        abc.TransactionAmount = model.DiscountAmount;
        //                        abc.TransactionCategory = "Received";
        //                        abc.TransactionType = "Received";
        //                        abc.isSystem = true;
        //                        abc.IsDelete = false;
        //                        abc.ComId = model.ComId;
        //                        abc.LuserId = model.LuserId;
        //                        abc.LuserIdUpdate = model.LuserIdUpdate;
        //                        abc.InputDate = model.InputDate;
        //                        abc.isPost = true;
        //                        abc.ParentTransactionId = model.Id;
        //                        abc.WarehouseId = model.WarehouseId;
        //                        abc.SupplierId = model.SupplierId;


        //                        _transactionRepository.Insert(abc);


        //                    }


        //                    foreach (var item in model.TransactionDetails)
        //                    {
        //                        if (item.PurchaseId > 0)
        //                        {

        //                            if (item.NetAmount > 0)
        //                            {
        //                                PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
        //                                purchasepayment.PurchaseId = item.PurchaseId.GetValueOrDefault();
        //                                purchasepayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccounId;
        //                                purchasepayment.Amount = item.NetAmount;
        //                                purchasepayment.isPosted = false;
        //                                purchasepayment.RowNo = 999;
        //                                purchasepayment.TransactionId = model.Id;

        //                                _purchasePaymentRepository.Insert(purchasepayment);
        //                            }


        //                            if (item.Discount > 0)
        //                            {
        //                                PurchasePaymentModel purchasediscount = new PurchasePaymentModel();
        //                                purchasediscount.PurchaseId = item.PurchaseId.GetValueOrDefault();
        //                                purchasediscount.AccountHeadId = discountincomeid;
        //                                purchasediscount.Amount = item.Discount;
        //                                purchasediscount.isPosted = false;
        //                                purchasediscount.RowNo = 999;
        //                                purchasediscount.TransactionId = model.Id;

        //                                _purchasePaymentRepository.Insert(purchasediscount);
        //                            }

        //                        }
        //                        else if (item.SalesId > 0)
        //                        {

        //                            if (item.NetAmount > 0)
        //                            {
        //                                SalesPaymentModel salespayment = new SalesPaymentModel();
        //                                salespayment.SalesId = item.SalesId.GetValueOrDefault();
        //                                salespayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccounId;
        //                                salespayment.Amount = item.NetAmount;
        //                                salespayment.isPosted = false;
        //                                salespayment.RowNo = 999;
        //                                salespayment.TransactionId = model.Id;

        //                                _salesPaymentRepository.Insert(salespayment);
        //                            }
        //                            if (item.Discount > 0)
        //                            {
        //                                SalesPaymentModel salesdiscount = new SalesPaymentModel();
        //                                salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
        //                                salesdiscount.AccountHeadId = discountexpenseid;
        //                                salesdiscount.Amount = item.Discount;
        //                                salesdiscount.isPosted = false;
        //                                salesdiscount.RowNo = 999;
        //                                salesdiscount.TransactionId = model.Id;

        //                                _salesPaymentRepository.Insert(salesdiscount);
        //                            }

        //                            if (item.VAT > 0)
        //                            {
        //                                SalesPaymentModel salesdiscount = new SalesPaymentModel();
        //                                salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
        //                                salesdiscount.AccountHeadId = vatexpenseid;
        //                                salesdiscount.Amount = item.VAT;
        //                                salesdiscount.isPosted = false;
        //                                salesdiscount.RowNo = 997;
        //                                salesdiscount.TransactionId = model.Id;

        //                                _salesPaymentRepository.Insert(salesdiscount);
        //                            }


        //                            if (item.Discount > 0)
        //                            {
        //                                SalesPaymentModel salesdiscount = new SalesPaymentModel();
        //                                salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
        //                                salesdiscount.AccountHeadId = aitexpenseid;
        //                                salesdiscount.Amount = item.AIT;
        //                                salesdiscount.isPosted = false;
        //                                salesdiscount.RowNo = 996;
        //                                salesdiscount.TransactionId = model.Id;

        //                                _salesPaymentRepository.Insert(salesdiscount);
        //                            }

        //                        }
        //                    }


        //                    //return Json(new { Success = 1, Id = model.Id, ex = "Data Save Successfully." });
        //                    return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully." });

        //                }

        //                TempData["Message"] = "Data Save Successfully";
        //                TempData["Status"] = "1";
        //                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Account != null ? model.Account.AccName : "");

        //                //SendingFunction("PaymentReceived", model.Id, "Save");
        //                //return RedirectToAction("AddTransaction", new { Type = model.TransactionCategory });
        //                //return Json(new { Success = 1, Id = model.Id, ex = "Data Save Successfully." });
        //                return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully." });
        //            }
        //            else
        //            {
        //                var parenttransaction = _transactionRepository.All().Where(x => x.ParentTransactionId == model.Id).ToList();
        //                _transactionRepository.RemoveRange(parenttransaction);

        //                var prevtaglist = _transactionTagsRepository.All().Where(x => x.TransactionId == model.Id).ToList();
        //                _transactionTagsRepository.RemoveRange(prevtaglist);


        //                var purchasepaymentlist = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).ToList(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
        //                _purchasePaymentRepository.RemoveRange(purchasepaymentlist);


        //                var salespaymentlist = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id).ToList(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
        //                _salesPaymentRepository.RemoveRange(salespaymentlist);





        //                //model.TransactionTagsList = new List<TransactionTagsModel>();


        //                if (model.TransactionTags != null)
        //                {
        //                    var TransactionTagsList = new List<TransactionTagsModel>();


        //                    for (int i = 0; i < model.TransactionTags.Length; i++)
        //                    {

        //                        TransactionTagsModel transactiontags = new TransactionTagsModel { TransactionId = model.Id, tag = (model.TransactionTags[i]), ComId = ComId.GetValueOrDefault(), LuserId = UserId.GetValueOrDefault() };
        //                        TransactionTagsList.Add(transactiontags);
        //                    }

        //                    if (TransactionTagsList.Count > 0)
        //                    {
        //                        _transactionTagsRepository.AddRange(TransactionTagsList);

        //                    }


        //                }






        //                _transactionRepository.Update(model, model.Id);

        //                if (model.TransactionDetails != null)
        //                {
        //                    if (model.TransactionDetails.Count() > 0)
        //                    {
        //                        foreach (var item in model.TransactionDetails)
        //                        {
        //                            _transactionDetailsRepository.Update(item, item.Id);
        //                        }
        //                    }
        //                }


        //                if (model.SalesId > 0)
        //                {
        //                    var salespayment = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id && x.AccountHeadId != discountexpenseid).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
        //                                                                                                                                                                       //var salesdiscount = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id && x.AccountHeadId == discountexpenseid).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
        //                                                                                                                                                                       //SalesPaymentModel salespayment = new SalesPaymentModel();


        //                    if (salespayment == null)
        //                    {
        //                        salespayment = new SalesPaymentModel();
        //                    }

        //                    salespayment.SalesId = model.SalesId.GetValueOrDefault();
        //                    salespayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccounId;
        //                    salespayment.Amount = model.TransactionAmount;
        //                    salespayment.isPosted = false;
        //                    salespayment.RowNo = 999;
        //                    salespayment.TransactionId = model.Id;


        //                    var transactioncount = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
        //                    if (transactioncount > 0)
        //                    {
        //                        _salesPaymentRepository.Update(salespayment, salespayment.Id);
        //                    }
        //                    else
        //                    {
        //                        _salesPaymentRepository.Insert(salespayment);
        //                    }



        //                }
        //                else if (model.PurchaseId > 0)
        //                {


        //                    //var transactioncount = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
        //                    //if (transactioncount > 0)
        //                    //{

        //                    var purchasepayment = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();

        //                    if (purchasepayment == null)
        //                    {
        //                        purchasepayment = new PurchasePaymentModel();
        //                    }

        //                    //PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
        //                    purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
        //                    purchasepayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccounId;
        //                    purchasepayment.Amount = model.TransactionAmount;
        //                    purchasepayment.isPosted = false;
        //                    purchasepayment.RowNo = 999;
        //                    purchasepayment.TransactionId = model.Id;


        //                    var transactioncount = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
        //                    if (transactioncount > 0)
        //                    {
        //                        _purchasePaymentRepository.Update(purchasepayment, purchasepayment.Id);
        //                    }
        //                    else
        //                    {
        //                        _purchasePaymentRepository.Insert(purchasepayment);
        //                    }


        //                    //_purchasePaymentRepository.Update(purchasepayment, purchasepayment.Id);
        //                    //}

        //                    //else
        //                    //{

        //                    //    PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
        //                    //    purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
        //                    //    purchasepayment.AccountHeadId = model.CreditAccountId;
        //                    //    purchasepayment.Amount = model.TransactionAmount;
        //                    //    purchasepayment.isPosted = false;
        //                    //    purchasepayment.RowNo = 999;
        //                    //    purchasepayment.TransactionId = model.Id;

        //                    //    _purchasePaymentRepository.Insert(purchasepayment);


        //                    //}

        //                }
        //                else if (model.TransactionDetails != null)
        //                {

        //                    if (model.DiscountAmount > 0 && model.CustomerId > 0)
        //                    {

        //                        var abc = new TransactionModel();
        //                        abc.TransactionCode = model.TransactionCode;
        //                        abc.CreditAccountId = model.CreditAccountId;
        //                        abc.AccountId = discountexpenseid; //discount expense id
        //                        abc.Description = model.Description;
        //                        abc.IsDelete = model.IsDelete;
        //                        abc.CreateDate = model.CreateDate;
        //                        abc.UpdateDate = model.UpdateDate;
        //                        abc.CurrencyId = model.CurrencyId;
        //                        abc.CurrencyRate = model.CurrencyRate;
        //                        abc.TransactionAmount = model.DiscountAmount;
        //                        abc.TransactionCategory = "Paid";
        //                        abc.TransactionType = "Paid";
        //                        abc.isSystem = true;
        //                        abc.IsDelete = false;
        //                        abc.ComId = model.ComId;
        //                        abc.LuserId = model.LuserId;
        //                        abc.LuserIdUpdate = model.LuserIdUpdate;
        //                        abc.InputDate = model.InputDate;
        //                        abc.isPost = true;
        //                        abc.ParentTransactionId = model.Id;
        //                        abc.WarehouseId = model.WarehouseId;
        //                        abc.CustomerId = model.CustomerId;


        //                        _transactionRepository.Insert(abc);
        //                    }
        //                    if (model.VATAmount > 0 && model.CustomerId > 0)
        //                    {

        //                        var abc = new TransactionModel();
        //                        abc.TransactionCode = model.TransactionCode;
        //                        abc.CreditAccountId = model.CreditAccountId;
        //                        abc.AccountId = vatexpenseid; //discount expense id
        //                        abc.Description = model.Description + ". Entry For VAT Expense";
        //                        abc.IsDelete = model.IsDelete;
        //                        abc.CreateDate = model.CreateDate;
        //                        abc.UpdateDate = model.UpdateDate;
        //                        abc.CurrencyId = model.CurrencyId;
        //                        abc.CurrencyRate = model.CurrencyRate;
        //                        abc.TransactionAmount = model.VATAmount;
        //                        abc.TransactionCategory = "Paid";
        //                        abc.TransactionType = "Paid";
        //                        abc.isSystem = true;
        //                        abc.IsDelete = false;
        //                        abc.ComId = model.ComId;
        //                        abc.LuserId = model.LuserId;
        //                        abc.LuserIdUpdate = model.LuserIdUpdate;
        //                        abc.InputDate = model.InputDate;
        //                        abc.isPost = true;
        //                        abc.ParentTransactionId = model.Id;
        //                        abc.WarehouseId = model.WarehouseId;
        //                        abc.CustomerId = model.CustomerId;

        //                        _transactionRepository.Insert(abc);
        //                    }
        //                    if (model.AITAmount > 0 && model.CustomerId > 0)
        //                    {

        //                        var abc = new TransactionModel();
        //                        abc.TransactionCode = model.TransactionCode;
        //                        abc.CreditAccountId = model.CreditAccountId;
        //                        abc.AccountId = aitexpenseid; //discount expense id
        //                        abc.Description = model.Description + ". Entry For AIT Expense";
        //                        abc.IsDelete = model.IsDelete;
        //                        abc.CreateDate = model.CreateDate;
        //                        abc.UpdateDate = model.UpdateDate;
        //                        abc.CurrencyId = model.CurrencyId;
        //                        abc.CurrencyRate = model.CurrencyRate;
        //                        abc.TransactionAmount = model.AITAmount;
        //                        abc.TransactionCategory = "Paid";
        //                        abc.TransactionType = "Paid";
        //                        abc.isSystem = true;
        //                        abc.IsDelete = false;
        //                        abc.ComId = model.ComId;
        //                        abc.LuserId = model.LuserId;
        //                        abc.LuserIdUpdate = model.LuserIdUpdate;
        //                        abc.InputDate = model.InputDate;
        //                        abc.isPost = true;
        //                        abc.ParentTransactionId = model.Id;
        //                        abc.WarehouseId = model.WarehouseId;
        //                        abc.CustomerId = model.CustomerId;

        //                        _transactionRepository.Insert(abc);
        //                    }
        //                    if (model.DiscountAmount > 0 && model.SupplierId > 0)
        //                    {


        //                        var abc = new TransactionModel();
        //                        abc.TransactionCode = model.TransactionCode;
        //                        abc.CreditAccountId = model.CreditAccountId;
        //                        abc.AccountId = discountincomeid; //discount expense id
        //                        abc.Description = model.Description;
        //                        abc.IsDelete = model.IsDelete;
        //                        abc.CreateDate = model.CreateDate;
        //                        abc.UpdateDate = model.UpdateDate;
        //                        abc.CurrencyId = model.CurrencyId;
        //                        abc.CurrencyRate = model.CurrencyRate;
        //                        abc.TransactionAmount = model.DiscountAmount;
        //                        abc.TransactionCategory = "Received";
        //                        abc.TransactionType = "Received";
        //                        abc.isSystem = true;
        //                        abc.IsDelete = false;
        //                        abc.ComId = model.ComId;
        //                        abc.LuserId = model.LuserId;
        //                        abc.LuserIdUpdate = model.LuserIdUpdate;
        //                        abc.InputDate = model.InputDate;
        //                        abc.isPost = true;
        //                        abc.ParentTransactionId = model.Id;
        //                        abc.WarehouseId = model.WarehouseId;
        //                        abc.SupplierId = model.SupplierId;


        //                        _transactionRepository.Insert(abc);


        //                    }

        //                    foreach (var item in model.TransactionDetails)
        //                    {
        //                        if (item.PurchaseId > 0)
        //                        {
        //                            if (item.NetAmount > 0)
        //                            {
        //                                PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
        //                                purchasepayment.PurchaseId = item.PurchaseId.GetValueOrDefault();
        //                                purchasepayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccounId;
        //                                purchasepayment.Amount = item.NetAmount;
        //                                purchasepayment.isPosted = false;
        //                                purchasepayment.RowNo = 999;
        //                                purchasepayment.TransactionId = model.Id;

        //                                _purchasePaymentRepository.Insert(purchasepayment);
        //                            }
        //                            if (item.Discount > 0)
        //                            {

        //                                PurchasePaymentModel purchasepaymentdiscount = new PurchasePaymentModel();
        //                                purchasepaymentdiscount.PurchaseId = item.PurchaseId.GetValueOrDefault();
        //                                purchasepaymentdiscount.AccountHeadId = discountincomeid; //model.CreditAccountId ?? model.DebitAccounId;//fahad test 
        //                                purchasepaymentdiscount.Amount = item.Discount;
        //                                purchasepaymentdiscount.isPosted = false;
        //                                purchasepaymentdiscount.RowNo = 998;
        //                                purchasepaymentdiscount.TransactionId = model.Id;

        //                                _purchasePaymentRepository.Insert(purchasepaymentdiscount);
        //                            }

        //                        }
        //                        else if (item.SalesId > 0)
        //                        {
        //                            if (item.NetAmount > 0)
        //                            {
        //                                SalesPaymentModel salespayment = new SalesPaymentModel();
        //                                salespayment.SalesId = item.SalesId.GetValueOrDefault();
        //                                salespayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccounId;
        //                                salespayment.Amount = item.NetAmount;
        //                                salespayment.isPosted = false;
        //                                salespayment.RowNo = 999;
        //                                salespayment.TransactionId = model.Id;

        //                                _salesPaymentRepository.Insert(salespayment);
        //                            }

        //                            if (item.Discount > 0)
        //                            {
        //                                SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
        //                                salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
        //                                salespaymentdiscount.AccountHeadId = discountexpenseid;
        //                                salespaymentdiscount.Amount = item.Discount;
        //                                salespaymentdiscount.isPosted = false;
        //                                salespaymentdiscount.RowNo = 999;
        //                                salespaymentdiscount.TransactionId = model.Id;

        //                                _salesPaymentRepository.Insert(salespaymentdiscount);
        //                            }


        //                            if (item.VAT > 0)
        //                            {
        //                                SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
        //                                salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
        //                                salespaymentdiscount.AccountHeadId = vatexpenseid;
        //                                salespaymentdiscount.Amount = item.VAT;
        //                                salespaymentdiscount.isPosted = false;
        //                                salespaymentdiscount.RowNo = 999;
        //                                salespaymentdiscount.TransactionId = model.Id;

        //                                _salesPaymentRepository.Insert(salespaymentdiscount);
        //                            }




        //                            if (item.AIT > 0)
        //                            {
        //                                SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
        //                                salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
        //                                salespaymentdiscount.AccountHeadId = aitexpenseid;
        //                                salespaymentdiscount.Amount = item.AIT;
        //                                salespaymentdiscount.isPosted = false;
        //                                salespaymentdiscount.RowNo = 999;
        //                                salespaymentdiscount.TransactionId = model.Id;

        //                                _salesPaymentRepository.Insert(salespaymentdiscount);
        //                            }

        //                        }
        //                    }


        //                    return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully." });

        //                }

        //                //SendingFunction("PaymentReceived", model.Id, "Update");

        //                TempData["Message"] = "Data Update Successfully";
        //                TempData["Status"] = "2";
        //                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Account != null ? model.Account.AccName : "");

        //            }
        //            return Json(new { Success = 1, TransactionId = model.Id, message = "Data Update Successfully." });
        //            //return RedirectToAction("TransactionList");

        //        }
        //        else
        //        {
        //            if (model.Id == 0)
        //            {
        //                ViewBag.ActionType = "Create";
        //            }
        //            else
        //            {
        //                ViewBag.ActionType = "Edit";
        //            }
        //        }
        //        return View(model);

        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(ex.Message);
        //        throw ex;
        //    }
        //}


        [HttpPost]
        //[ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult AddTransaction(TransactionModel model)
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                if (ModelState.IsValid)
                {
                    var discountexpensedata = _accountHeadRepository.All().Where(x => x.AccName.Contains("Discount Expense")).FirstOrDefault();
                    var discountincomedata = _accountHeadRepository.All().Where(x => x.AccName.Contains("Discount Income")).FirstOrDefault();

                    var vatexpensedata = _accountHeadRepository.All().Where(x => x.AccName.ToLower().Contains("VAT Expense".ToLower())).FirstOrDefault();
                    var aitexpensedata = _accountHeadRepository.All().Where(x => x.AccName.ToLower().Contains("AIT Expense".ToLower())).FirstOrDefault();




                    int? discountexpenseid = discountexpensedata != null ? discountexpensedata.Id : null;
                    int? discountincomeid = discountincomedata != null ? discountincomedata.Id : null;
                    int? vatexpenseid = vatexpensedata != null ? vatexpensedata.Id : null;
                    int? aitexpenseid = aitexpensedata != null ? aitexpensedata.Id : null;




                    if (model.Id == 0)
                    {

                        if (model.TransactionCategory == "Sales" || model.TransactionCategory == "CustomerDiscount")
                        {
                            var salesdata = _saleRepository.All().Where(x => x.Id == model.SalesId).FirstOrDefault();
                            if (salesdata != null)
                            {
                                model.CustomerId = salesdata.CustomerId;
                            }

                        }
                        else if (model.TransactionCategory == "Purchase" || model.TransactionCategory == "SupplierDiscount")
                        {
                            var purchasedata = _purchaseRepository.All().Where(x => x.Id == model.PurchaseId).FirstOrDefault();
                            if (purchasedata != null)
                            {
                                model.SupplierId = purchasedata.SupplierId;
                            }
                        }


                        //for (int i = 0; i < model.TransactionTags.Length; i++)
                        //{
                        //    TransactionTagsModel transactiontags = new TransactionTagsModel { tag = (model.TransactionTags[i]), TransactionId = model.Id };
                        //    transactiontags.Id = 0;
                        //    _transactionTagsRepository.Insert(transactiontags);

                        //}




                        model.TransactionTagsList = new List<TransactionTagsModel>();
                        if (model.TransactionTags != null)
                        {
                            for (int i = 0; i < model.TransactionTags.Length; i++)
                            {

                                TransactionTagsModel transactiontags = new TransactionTagsModel { tag = (model.TransactionTags[i]), ComId = ComId.GetValueOrDefault(), LuserId = UserId.GetValueOrDefault() };
                                model.TransactionTagsList.Add(transactiontags);
                            }

                        }


                        _transactionRepository.Insert(model);


                        if (model.SalesId > 0)
                        {
                            SalesPaymentModel salespayment = new SalesPaymentModel();
                            salespayment.SalesId = model.SalesId.GetValueOrDefault();
                            salespayment.AccountHeadId = model.DebitAccountId;
                            salespayment.Amount = model.TransactionAmount;
                            salespayment.isPosted = false;
                            salespayment.RowNo = 999;
                            salespayment.TransactionId = model.Id;

                            _salesPaymentRepository.Insert(salespayment);
                        }

                        if (model.PurchaseId > 0)
                        {
                            PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                            purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
                            purchasepayment.AccountHeadId = model.CreditAccountId;
                            purchasepayment.Amount = model.TransactionAmount;
                            purchasepayment.isPosted = false;
                            purchasepayment.RowNo = 999;
                            purchasepayment.TransactionId = model.Id;


                            _purchasePaymentRepository.Insert(purchasepayment);

                        }

                        if (model.TransactionDetails != null)
                        {
                            if (model.DiscountAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = discountexpenseid; //discount expense id
                                abc.Description = model.Description;
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.DiscountAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;

                                _transactionRepository.Insert(abc);
                            }

                            if (model.VATAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = vatexpenseid; //discount expense id
                                abc.Description = model.Description + ". Entry For VAT Expense";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.VATAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;

                                _transactionRepository.Insert(abc);
                            }


                            if (model.AITAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = aitexpenseid; //discount expense id
                                abc.Description = model.Description + " . Entry For AIT Expense";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.AITAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;

                                _transactionRepository.Insert(abc);
                            }
                            if (model.DiscountAmount > 0 && model.SupplierId > 0)
                            {
                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = discountincomeid; //discount expense id
                                abc.Description = model.Description;
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.DiscountAmount;
                                abc.TransactionCategory = "Received";
                                abc.TransactionType = "Received";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.SupplierId = model.SupplierId;


                                _transactionRepository.Insert(abc);


                            }


                            foreach (var item in model.TransactionDetails)
                            {
                                if (item.PurchaseId > 0)
                                {

                                    if (item.NetAmount > 0)
                                    {
                                        PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                                        purchasepayment.PurchaseId = item.PurchaseId.GetValueOrDefault();
                                        purchasepayment.AccountHeadId = model.CreditAccountId;
                                        purchasepayment.Amount = item.NetAmount;
                                        purchasepayment.isPosted = false;
                                        purchasepayment.RowNo = 999;
                                        purchasepayment.TransactionId = model.Id;

                                        _purchasePaymentRepository.Insert(purchasepayment);
                                    }


                                    if (item.Discount > 0)
                                    {
                                        PurchasePaymentModel purchasediscount = new PurchasePaymentModel();
                                        purchasediscount.PurchaseId = item.PurchaseId.GetValueOrDefault();
                                        purchasediscount.AccountHeadId = discountincomeid;
                                        purchasediscount.Amount = item.Discount;
                                        purchasediscount.isPosted = false;
                                        purchasediscount.RowNo = 999;
                                        purchasediscount.TransactionId = model.Id;

                                        _purchasePaymentRepository.Insert(purchasediscount);
                                    }

                                }
                                else if (item.SalesId > 0)
                                {

                                    if (item.NetAmount > 0)
                                    {
                                        SalesPaymentModel salespayment = new SalesPaymentModel();
                                        salespayment.SalesId = item.SalesId.GetValueOrDefault();
                                        salespayment.AccountHeadId = model.DebitAccountId;
                                        salespayment.Amount = item.NetAmount;
                                        salespayment.isPosted = false;
                                        salespayment.RowNo = 999;
                                        salespayment.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespayment);
                                    }
                                    if (item.Discount > 0)
                                    {
                                        SalesPaymentModel salesdiscount = new SalesPaymentModel();
                                        salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salesdiscount.AccountHeadId = discountexpenseid;
                                        salesdiscount.Amount = item.Discount;
                                        salesdiscount.isPosted = false;
                                        salesdiscount.RowNo = 999;
                                        salesdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salesdiscount);
                                    }

                                    if (item.VAT > 0)
                                    {
                                        SalesPaymentModel salesdiscount = new SalesPaymentModel();
                                        salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salesdiscount.AccountHeadId = vatexpenseid;
                                        salesdiscount.Amount = item.VAT;
                                        salesdiscount.isPosted = false;
                                        salesdiscount.RowNo = 997;
                                        salesdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salesdiscount);
                                    }


                                    if (item.Discount > 0)
                                    {
                                        SalesPaymentModel salesdiscount = new SalesPaymentModel();
                                        salesdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salesdiscount.AccountHeadId = aitexpenseid;
                                        salesdiscount.Amount = item.AIT;
                                        salesdiscount.isPosted = false;
                                        salesdiscount.RowNo = 996;
                                        salesdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salesdiscount);
                                    }

                                }
                            }


                            //return Json(new { Success = 1, Id = model.Id, ex = "Data Save Successfully." });
                            return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully." });

                        }

                        TempData["Message"] = "Data Save Successfully";
                        TempData["Status"] = "1";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.DebitAccount != null ? model.DebitAccount.AccName : "");

                        //SendingFunction("PaymentReceived", model.Id, "Save");
                        //return RedirectToAction("AddTransaction", new { Type = model.TransactionCategory });
                        //return Json(new { Success = 1, Id = model.Id, ex = "Data Save Successfully." });
                        return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully." });
                    }
                    else
                    {
                        var parenttransaction = _transactionRepository.All().Where(x => x.ParentTransactionId == model.Id).ToList();
                        _transactionRepository.RemoveRange(parenttransaction);

                        var prevtaglist = _transactionTagsRepository.All().Where(x => x.TransactionId == model.Id).ToList();
                        _transactionTagsRepository.RemoveRange(prevtaglist);


                        var purchasepaymentlist = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).ToList(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
                        _purchasePaymentRepository.RemoveRange(purchasepaymentlist);


                        var salespaymentlist = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id).ToList(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
                        _salesPaymentRepository.RemoveRange(salespaymentlist);





                        //model.TransactionTagsList = new List<TransactionTagsModel>();


                        if (model.TransactionTags != null)
                        {
                            var TransactionTagsList = new List<TransactionTagsModel>();


                            for (int i = 0; i < model.TransactionTags.Length; i++)
                            {

                                TransactionTagsModel transactiontags = new TransactionTagsModel { TransactionId = model.Id, tag = (model.TransactionTags[i]), ComId = ComId.GetValueOrDefault(), LuserId = UserId.GetValueOrDefault() };
                                TransactionTagsList.Add(transactiontags);
                            }

                            if (TransactionTagsList.Count > 0)
                            {
                                _transactionTagsRepository.AddRange(TransactionTagsList);

                            }


                        }






                        _transactionRepository.Update(model, model.Id);

                        if (model.TransactionDetails != null)
                        {
                            if (model.TransactionDetails.Count() > 0)
                            {
                                foreach (var item in model.TransactionDetails)
                                {
                                    _transactionDetailsRepository.Update(item, item.Id);
                                }
                            }
                        }


                        if (model.SalesId > 0)
                        {
                            var salespayment = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id && x.AccountHeadId != discountexpenseid).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
                                                                                                                                                                               //var salesdiscount = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id && x.AccountHeadId == discountexpenseid).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();
                                                                                                                                                                               //SalesPaymentModel salespayment = new SalesPaymentModel();


                            if (salespayment == null)
                            {
                                salespayment = new SalesPaymentModel();
                            }

                            salespayment.SalesId = model.SalesId.GetValueOrDefault();
                            salespayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccountId;
                            salespayment.Amount = model.TransactionAmount;
                            salespayment.isPosted = false;
                            salespayment.RowNo = 999;
                            salespayment.TransactionId = model.Id;


                            var transactioncount = _salesPaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
                            if (transactioncount > 0)
                            {
                                _salesPaymentRepository.Update(salespayment, salespayment.Id);
                            }
                            else
                            {
                                _salesPaymentRepository.Insert(salespayment);
                            }



                        }
                        else if (model.PurchaseId > 0)
                        {


                            //var transactioncount = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
                            //if (transactioncount > 0)
                            //{

                            var purchasepayment = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).FirstOrDefault(); ////Where(x => x.SalesId == model.SalesId && x.RowNo == 999 && x.isPosted == false).FirstOrDefault();

                            if (purchasepayment == null)
                            {
                                purchasepayment = new PurchasePaymentModel();
                            }

                            //PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                            purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
                            purchasepayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccountId;
                            purchasepayment.Amount = model.TransactionAmount;
                            purchasepayment.isPosted = false;
                            purchasepayment.RowNo = 999;
                            purchasepayment.TransactionId = model.Id;


                            var transactioncount = _purchasePaymentRepository.All().Where(x => x.TransactionId == model.Id).Count();
                            if (transactioncount > 0)
                            {
                                _purchasePaymentRepository.Update(purchasepayment, purchasepayment.Id);
                            }
                            else
                            {
                                _purchasePaymentRepository.Insert(purchasepayment);
                            }


                            //_purchasePaymentRepository.Update(purchasepayment, purchasepayment.Id);
                            //}

                            //else
                            //{

                            //    PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                            //    purchasepayment.PurchaseId = model.PurchaseId.GetValueOrDefault();
                            //    purchasepayment.AccountHeadId = model.CreditAccountId;
                            //    purchasepayment.Amount = model.TransactionAmount;
                            //    purchasepayment.isPosted = false;
                            //    purchasepayment.RowNo = 999;
                            //    purchasepayment.TransactionId = model.Id;

                            //    _purchasePaymentRepository.Insert(purchasepayment);


                            //}

                        }
                        else if (model.TransactionDetails != null)
                        {

                            if (model.DiscountAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = discountexpenseid; //discount expense id
                                abc.Description = model.Description;
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.DiscountAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;


                                _transactionRepository.Insert(abc);
                            }
                            if (model.VATAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = vatexpenseid; //discount expense id
                                abc.Description = model.Description + ". Entry For VAT Expense";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.VATAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;

                                _transactionRepository.Insert(abc);
                            }
                            if (model.AITAmount > 0 && model.CustomerId > 0)
                            {

                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.CreditAccountId = model.CreditAccountId;
                                abc.DebitAccountId = aitexpenseid; //discount expense id
                                abc.Description = model.Description + ". Entry For AIT Expense";
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.AITAmount;
                                abc.TransactionCategory = "Paid";
                                abc.TransactionType = "Paid";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.CustomerId = model.CustomerId;

                                _transactionRepository.Insert(abc);
                            }
                            if (model.DiscountAmount > 0 && model.SupplierId > 0)
                            {


                                var abc = new TransactionModel();
                                abc.TransactionCode = model.TransactionCode;
                                abc.DebitAccountId = model.CreditAccountId;
                                abc.CreditAccountId = discountincomeid; //discount expense id
                                abc.Description = model.Description;
                                abc.IsDelete = model.IsDelete;
                                abc.CreateDate = model.CreateDate;
                                abc.UpdateDate = model.UpdateDate;
                                abc.CurrencyId = model.CurrencyId;
                                abc.CurrencyRate = model.CurrencyRate;
                                abc.TransactionAmount = model.DiscountAmount;
                                abc.TransactionCategory = "Received";
                                abc.TransactionType = "Received";
                                abc.isSystem = true;
                                abc.IsDelete = false;
                                abc.ComId = model.ComId;
                                abc.LuserId = model.LuserId;
                                abc.LuserIdUpdate = model.LuserIdUpdate;
                                abc.InputDate = model.InputDate;
                                abc.isPost = true;
                                abc.ParentTransactionId = model.Id;
                                abc.WarehouseId = model.WarehouseId;
                                abc.SupplierId = model.SupplierId;


                                _transactionRepository.Insert(abc);


                            }

                            foreach (var item in model.TransactionDetails)
                            {
                                if (item.PurchaseId > 0)
                                {
                                    if (item.NetAmount > 0)
                                    {
                                        PurchasePaymentModel purchasepayment = new PurchasePaymentModel();
                                        purchasepayment.PurchaseId = item.PurchaseId.GetValueOrDefault();
                                        purchasepayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccountId;
                                        purchasepayment.Amount = item.NetAmount;
                                        purchasepayment.isPosted = false;
                                        purchasepayment.RowNo = 999;
                                        purchasepayment.TransactionId = model.Id;

                                        _purchasePaymentRepository.Insert(purchasepayment);
                                    }
                                    if (item.Discount > 0)
                                    {

                                        PurchasePaymentModel purchasepaymentdiscount = new PurchasePaymentModel();
                                        purchasepaymentdiscount.PurchaseId = item.PurchaseId.GetValueOrDefault();
                                        purchasepaymentdiscount.AccountHeadId = discountincomeid; //model.CreditAccountId ?? model.DebitAccounId;//fahad test 
                                        purchasepaymentdiscount.Amount = item.Discount;
                                        purchasepaymentdiscount.isPosted = false;
                                        purchasepaymentdiscount.RowNo = 998;
                                        purchasepaymentdiscount.TransactionId = model.Id;

                                        _purchasePaymentRepository.Insert(purchasepaymentdiscount);
                                    }

                                }
                                else if (item.SalesId > 0)
                                {
                                    if (item.NetAmount > 0)
                                    {
                                        SalesPaymentModel salespayment = new SalesPaymentModel();
                                        salespayment.SalesId = item.SalesId.GetValueOrDefault();
                                        salespayment.AccountHeadId = model.CreditAccountId ?? model.DebitAccountId;
                                        salespayment.Amount = item.NetAmount;
                                        salespayment.isPosted = false;
                                        salespayment.RowNo = 999;
                                        salespayment.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespayment);
                                    }

                                    if (item.Discount > 0)
                                    {
                                        SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
                                        salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salespaymentdiscount.AccountHeadId = discountexpenseid;
                                        salespaymentdiscount.Amount = item.Discount;
                                        salespaymentdiscount.isPosted = false;
                                        salespaymentdiscount.RowNo = 999;
                                        salespaymentdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespaymentdiscount);
                                    }


                                    if (item.VAT > 0)
                                    {
                                        SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
                                        salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salespaymentdiscount.AccountHeadId = vatexpenseid;
                                        salespaymentdiscount.Amount = item.VAT;
                                        salespaymentdiscount.isPosted = false;
                                        salespaymentdiscount.RowNo = 999;
                                        salespaymentdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespaymentdiscount);
                                    }




                                    if (item.AIT > 0)
                                    {
                                        SalesPaymentModel salespaymentdiscount = new SalesPaymentModel();
                                        salespaymentdiscount.SalesId = item.SalesId.GetValueOrDefault();
                                        salespaymentdiscount.AccountHeadId = aitexpenseid;
                                        salespaymentdiscount.Amount = item.AIT;
                                        salespaymentdiscount.isPosted = false;
                                        salespaymentdiscount.RowNo = 999;
                                        salespaymentdiscount.TransactionId = model.Id;

                                        _salesPaymentRepository.Insert(salespaymentdiscount);
                                    }

                                }
                            }


                            return Json(new { Success = 1, TransactionId = model.Id, message = "Data Save Successfully." });

                        }

                        //SendingFunction("PaymentReceived", model.Id, "Update");

                        TempData["Message"] = "Data Update Successfully";
                        TempData["Status"] = "2";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.DebitAccount != null ? model.DebitAccount.AccName : "");

                    }
                    return Json(new { Success = 1, TransactionId = model.Id, message = "Data Update Successfully." });
                    //return RedirectToAction("TransactionList");

                }
                else
                {
                    if (model.Id == 0)
                    {
                        ViewBag.ActionType = "Create";
                    }
                    else
                    {
                        ViewBag.ActionType = "Edit";
                    }
                }
                return View(model);

            }
            catch (Exception ex)
            {
                return Json(ex.Message);
                throw ex;
            }
        }




        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetTransaction(int TransactionId, int isCopy = 0)
        {
            try
            {
                var transactionquery = _transactionRepository.All().Where(x => x.Id == TransactionId);
                TransactionModel transactiondata = transactionquery.FirstOrDefault();

                if (transactiondata == null)
                {
                    return Json(new { Success = 0, ex = "No Data Found." });
                }

                if (isCopy == 0)
                {
                    transactionquery = transactionquery.Where(x => x.isPost == false);
                }
                else if (isCopy == 1)
                {
                    transactionquery = transactionquery.Where(x => x.IsDelete == true);
                }

                transactiondata = transactionquery.FirstOrDefault();

                if (transactiondata == null)
                {
                    return Json(new { Success = 0, ex = "Transaction Already Posted." });
                }


                //var SRowNo = 0;

                //var isMultiDebitCredit = HttpContext.Session.GetString("isMultiDebitCredit").ToLower();

                //if (isMultiDebitCredit == "true")
                //{
                //    SRowNo = -1;
                //}



                var transaction = transactionquery
               //.Include(x => x.VoucherSubs).ThenInclude(x => x.Acc_ChartOfAccount).ThenInclude(x => x.vAccountGroupHead)
               .Include(x => x.TransactionTagsList)
               .Select(p => new
               {
                   p.Id,
                   p.TransactionCode,
                   p.Description,
                   p.TransactionType,
                   p.TransactionCategory,
                   p.WarehouseId,
                   InputDate = p.InputDate.ToString("dd-MMM-yy"),
                   p.TransactionTagsList,
                   p.CurrencyId,
                   p.CurrencyRate,
                   p.TransactionAmount,
                   p.TransactionFilePath,
                   p.CreditAccountId,
                   p.DebitAccountId,
                   p.TransactionTags,


               }).FirstOrDefault();


                //SalesItemsModel a = new SalesItemsModel { Name = "abc", Amount = 2.5, Id = 1, IsDelete = false, Price = 2.5, Quantity = 1, SalesId = 5};
                //voucher.Items.Add(a);
                return Json(new { Success = 1, transaction = transaction, ex = "Data Load Successfully" });

            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }


        public class CombinedTransaction
        {
            public int Id { get; set; }
            public string? TransactionCode { get; set; }
            public string? Description { get; set; }
            public string? TransactionType { get; set; }
            public string? TransactionCategory { get; set; }
            public int? WarehouseId { get; set; }
            public string? PaymentDate { get; set; }
            public string? RefNo { get; set; }
            public ICollection<TransactionTagsModel> TransactionTagsList { get; set; }
            public int? CurrencyId { get; set; }
            public double CurrencyRate { get; set; }
            public decimal TransactionAmount { get; set; }
            public string? TransactionFilePath { get; set; }
            public int? CreditAccountId { get; set; }
            public int? DebitAccountId { get; set; }
            public string[]? TransactionTags { get; set; }
            public string? Email { get; set; }
            public string? PrimaryAddress { get; set; }
            public int? SupplierId { get; set; }
            public List<CombinedTransactionDetail> TransactionDetails { get; set; }
        }

        public class CombinedTransactionDetail
        {
            public int Id { get; set; }
            public int TransactionId { get; set; }
            public string? RefCode { get; set; }
            public string? PurchaseCode { get; set; }
            public int? RefId { get; set; }
            public int? SupplierId { get; set; }
            public DateTime PurchaseDate { get; set; }
            public DateTime? DueDate { get; set; }
            public string? RefDate { get; set; }
            public decimal NetAmount { get; set; }
            public double CurrencyRate { get; set; }
            public float Amount { get; set; }
            public float OrgAmount { get; set; }
            public decimal ExchangeLossGain { get; set; }
            public int? TrxnId { get; set; }
        }


        [HttpGet]
        [AllowAnonymous]
        public JsonResult GetTransactionQB(int TransactionId, int SupplierId, int page = 1, decimal size = 5, string searchquery = "", string FromDate = "", string ToDate = "", int isCopy = 0)
        {
            try
            {
                var transactionquery = _transactionRepository.All().Where(x => x.Id == TransactionId); //x.SupplierId == SupplierId
                var purchaselist = _purchaseRepository.All().Where(x => x.SupplierId == SupplierId);

                decimal TransactionCount = transactionquery.Count();
                decimal PurchaseCount = purchaselist.Count();

                decimal TotalRecordCount = TransactionCount + PurchaseCount;

                //decimal TotalRecordCount = purchaselist.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);
                decimal skip = (page - 1) * size;
                //Console.WriteLine(transactionSupplierWise);
                TransactionModel transactiondata = transactionquery.FirstOrDefault();

                if (transactiondata == null)
                {
                    return Json(new { Success = 0, ex = "No Data Found." });
                }

                if (isCopy == 0)
                {
                    transactionquery = transactionquery.Where(x => x.isPost == false);
                }
                else if (isCopy == 1)
                {
                    transactionquery = transactionquery.Where(x => x.IsDelete == false);
                }
                else if (isCopy == 2)
                {
                    transactionquery = transactionquery.Where(x => x.IsDelete == false);
                }

                transactiondata = transactionquery.FirstOrDefault();

                if (transactiondata == null)
                {
                    return Json(new { Success = 0, ex = "Transaction Already Posted." });
                }

                var transaction = transactionquery
               .Include(x => x.TransactionDetails)
               .Include(x => x.Supplier)
               .Include(x => x.Purchase)
               .Select(p => new
               {
                   p.Id,
                   TransactionDetailsAmountSum = p.TransactionDetails.Where(x => !x.IsDelete).Sum(x => x.NetAmount),
                   TransactionDetailsCreditSum = p.TransactionDetails.Where(x => !x.IsDelete && x.Purchase.DocTypeList.DocType == "Supplier credit").Sum(x => x.NetAmount),
                   p.TransactionCode,
                   p.Description,
                   p.TransactionType,
                   p.TransactionCategory,
                   p.WarehouseId,
                   PaymentDate = p.InputDate.ToString("dd-MMM-yy"),
                   RefNo = p.TransactionCode,
                   p.TransactionTagsList,
                   p.CurrencyId,
                   p.CurrencyRate,
                   p.TransactionFilePath,
                   p.CreditAccountId,
                   p.DebitAccount,
                   p.CreditAccount,
                   p.FiscalMonthId,
                   p.TransactionTags,
                   p.FilePath,
                   Email = p.Supplier.Email,
                   PrimaryAddress = p.Supplier.PrimaryAddress,
                   SupplierId = p.SupplierId,
                   p.TransactionAmount,
                   isCopy = isCopy,
                   TransactionDetails = p.TransactionDetails.Where(x => x.IsDelete == false && x.Purchase.DocTypeList.DocType != "Supplier credit").Select(x => new CombinedTransactionDetail
                   {
                       Id = x.Id,
                       TransactionId = x.TransactionId,
                       RefCode = x.Purchase != null ? x.Purchase.PurchaseCode : "Prev. Due",
                       PurchaseCode = x.Purchase != null ? x.Purchase.PurchaseCode : "",
                       RefId = x.PurchaseId,
                       PurchaseDate = x.Purchase != null ? x.Purchase.PurchaseDate : p.Supplier.CreateDate,
                       RefDate = x.Purchase != null ? x.Purchase.PurchaseDate.ToString("dd-MMM-yy") : p.Supplier.CreateDate.ToString("dd-MMM-yy"),
                       DueDate = x.Purchase != null ? x.Purchase.DueDate : p.Supplier.CreateDate,
                       SupplierId = x.TransactionMain.SupplierId,
                       NetAmount = x.NetAmount,
                       Amount = x.Amount,
                       ExchangeLossGain = x.ExchangeLossGain,
                       CurrencyRate = x.Purchase != null ? x.Purchase.CurrencyRate : 1,
                   })
                   .ToList(),
                   CreditDetails = p.TransactionDetails.Where(x => x.IsDelete == false && x.Purchase.DocTypeList.DocType == "Supplier credit").Select(x => new CombinedTransactionDetail
                   {
                       Id = x.Id,
                       TransactionId = x.TransactionId,
                       RefCode = x.Purchase.PurchaseCode,
                       PurchaseCode = x.Purchase.PurchaseCode,
                       RefId = x.PurchaseId,  // Use the appropriate property for Purchase Id
                       SupplierId = x.TransactionMain.SupplierId,
                       PurchaseDate = x.Purchase.PurchaseDate,
                       DueDate = x.Purchase.DueDate == null ? x.Purchase.PurchaseDate : x.Purchase.DueDate,
                       RefDate = x.Purchase.PurchaseDate.ToString("dd-MMM-yy"),
                       NetAmount = x.NetAmount,
                       Amount = x.Amount,
                       OrgAmount = x.Amount,
                       TrxnId = 0,
                       CurrencyRate = x.Purchase != null ? x.Purchase.CurrencyRate : 1
                   })
                   .ToList()
               }).FirstOrDefault();

                // var purchaselistDetails = purchaselist
                //.Select(purchase => new CombinedTransactionDetail
                //{
                //    Id = purchase.Id,
                //    TransactionId = 0, // Set to an appropriate default value
                //    RefCode = purchase.PurchaseCode,
                //    PurchaseCode = purchase.PurchaseCode,
                //    PurchaseId = purchase.Id,
                //    SupplierId = purchase.SupplierId,
                //    PurchaseDate = purchase.PurchaseDate,
                //    DueDate = purchase.DueDate,
                //    NetAmount = purchase.NetAmount,
                //    Amount = 0, // Set to an appropriate default value
                //});

                // query.TransactionDetails.AddRange(purchaselistDetails);

                //var transaction = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString()));

                var data = _transactionRepository.All().Where(x => x.Id == TransactionId).FirstOrDefault();
                if (data.ParentTransactionId != null)
                {
                    var advdata = _transactionRepository.All().Where(x => x.Id == data.ParentTransactionId).FirstOrDefault();
                    var advDataOpeningBal = _transactionRepository.All().Where(x => x.ParentTransactionId == advdata.Id && x.Id != TransactionId).Select(x => x.AdjustedAmount).Sum();

                    if (advdata != null)
                    {
                        var tempData = new CombinedTransactionDetail();

                        tempData.Id = 0;
                        tempData.TransactionId = data.Id;
                        tempData.RefCode = "Adv. Payment";
                        tempData.PurchaseCode = "Adv. Payment";
                        tempData.RefId = 0;
                        tempData.SupplierId = advdata.SupplierId;
                        tempData.PurchaseDate = advdata.InputDate;
                        tempData.DueDate = advdata.InputDate;
                        tempData.RefDate = advdata.InputDate.ToString();
                        tempData.NetAmount = (decimal)data.AdjustedAmount;
                        tempData.Amount = (float)((double)advdata.TransactionAmount - advDataOpeningBal);
                        tempData.OrgAmount = (float)advdata.TransactionAmount;
                        tempData.TrxnId = advdata.Id;
                        tempData.CurrencyRate = advdata.CurrencyRate;

                        transaction.CreditDetails.Add(tempData);
                    }
                }



                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = page;
                pageinfo.PageSize = int.Parse(size.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());


                return Json(new { Success = 1, transaction = transaction, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount, ex = "Data Load Successfully" });

            }
            catch (Exception e)
            {
                return Json(e.ToString());
            }

        }



        [HttpGet]
        public ActionResult EditTransactionBBB(int TransactionId)
        {
            ViewBag.ActionType = "Edit";
            var Voucher = _transactionRepository.Find(TransactionId);
            //ViewBag.VoucherTypeId = _VoucherTypeRepository.GetAllForDropDown();

            if (Voucher.isPost == false)
            {

                ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();

                ViewBag.Customer = _customerRepository.GetAllForDropDown();
                ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
                ViewBag.Member = _memberRepository.GetAllForDropDown();
                ViewBag.Employee = _employeeRepository.GetAllForDropDown();
                ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeExpenseHeadForDropDown();
                ViewBag.Currency = _countryRepository.GetCurrencyList();
                ViewBag.Sales = _saleRepository.GetAllForDropDown();
                ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();

                return View("EditTransaction", model: TransactionId);

            }

            return View("TransactionList");
        }


        //[HttpGet]
        //public ActionResult EditTransaction(int TransactionId)
        //{
        //    ViewBag.ActionType = "Edit";
        //    ViewBag.isCopy = 0;



        //    //var Transaction = _transactionRepository.Find(TransactionId);
        //    var Transaction = _transactionRepository.All()
        //        .Include(x => x.Customer)
        //        .Include(x => x.Supplier)
        //        .Include(x => x.vWarehouse)
        //        .Include(x => x.TransactionDetails).ThenInclude(x => x.Sales).ThenInclude(x => x.CustomerModel)
        //        .Include(x => x.TransactionDetails).ThenInclude(x => x.Purchase).ThenInclude(x => x.SupplierModel)
        //        .Include(z => z.TransactionTagsList)
        //        .Where(x => x.Id == TransactionId).FirstOrDefault();

        //    //Transaction.TransactionTagsText = String.Join(" ", Transaction.TransactionTagsList.Select(x => x.tag));


        //    ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeExpenseHeadForDropDown();


        //    if (Transaction.TransactionCategory == null)
        //    {
        //        ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
        //        ViewBag.CashBankHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
        //    }
        //    else
        //    {
        //        ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
        //        ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();
        //    }


        //    ViewBag.Customer = _customerRepository.GetAllForDropDown();
        //    ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
        //    ViewBag.Member = _memberRepository.GetAllForDropDown();
        //    ViewBag.Employee = _employeeRepository.GetAllForDropDown();
        //    ViewBag.Type = Transaction.TransactionCategory;
        //    ViewBag.Currency = _countryRepository.GetCurrencyList();


        //    SelectListItem abcd = new SelectListItem() { Text = "Please Select", Value = "" };

        //    var xxx = _FromWarehousePermissionRepository.GetAllForDropDown();
        //    if (xxx.Count() == 0)
        //    {
        //        xxx = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
        //    }
        //    else
        //    {
        //        xxx.Append(abcd);
        //    }

        //    ViewBag.Warehouse = xxx;




        //    var saleslist = _saleRepository.GetAllForDropDown().ToList();
        //    var saleslistedit = _salesPaymentRepository.All().Include(x => x.SalesMain).Where(x => x.TransactionId == Transaction.Id)
        //    .Select(x => new SelectListItem
        //    {
        //        Text = x.SalesMain.SaleCode + " - " + x.SalesMain.CustomerModel.Name + "  " + x.SalesMain.CustomerName + " - " + x.SalesMain.NetAmount,
        //        Value = x.SalesId.ToString()
        //    }).ToList();
        //    saleslist.AddRange(saleslistedit);
        //    ViewBag.Sales = saleslist;



        //    var purchaselist = _purchaseRepository.GetAllForDropDown().ToList();
        //    //var purchaselistedit = _purchasePaymentRepository.All().Include(x=>x.PurchaseMain).Where(x => x.TransactionId == Transaction.Id)
        //    var purchaselistedit = _transactionRepository.All().Include(x => x.Purchase).Where(x => x.Id == Transaction.Id)

        //    .Select(x => new SelectListItem
        //    {
        //        Text = x.Purchase.PurchaseCode + " - " + x.Purchase.SupplierModel.SupplierName + "  " + x.Purchase.SupplierName + " - " + x.Purchase.NetAmount,
        //        Value = x.PurchaseId.ToString()
        //    }).ToList();
        //    purchaselist.AddRange(purchaselistedit);
        //    ViewBag.Purchase = purchaselist;


        //    // ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();

        //    var amount = Transaction.TransactionAmount;
        //    ViewBag.Amount = amount;

        //    if (Transaction.TransactionDetails.Count() == 0)
        //    {
        //        return View("AddTransaction", Transaction);
        //    }
        //    else
        //    {
        //        return View("AddTransactionDetails", Transaction);
        //    }

        //    return View("AddTransaction", Transaction);
        //}


        [HttpGet]
        public ActionResult EditTransaction(int TransactionId, int IsCopy = 0)
        {
            ViewBag.ActionType = "Edit";
            //var Transaction = _transactionRepository.Find(TransactionId);
            var Transactionquery = _transactionRepository.All()
                .Include(x => x.Customer)
                .Include(x => x.Supplier)
                .Include(x => x.vWarehouse)
                .Include(x => x.TransactionTagsList)
                .Include(x => x.TransactionDetails).ThenInclude(x => x.Sales).ThenInclude(x => x.CustomerModel)
                .Include(x => x.TransactionDetails).ThenInclude(x => x.Purchase).ThenInclude(x => x.SupplierModel)
                .Include(x => x.Sales).ThenInclude(x => x.SalesPayments.Where(x => x.TransactionId != TransactionId))
                .Include(x => x.Purchase).ThenInclude(x => x.PurchasePayments.Where(x => x.TransactionId != TransactionId))

                .Where(x => x.Id == TransactionId);

            var Transaction = new TransactionModel();

            if (IsCopy == 1)
            {
                Transaction = Transactionquery.Where(x => x.isSystem == false).FirstOrDefault();

                //ViewBag.ActionType = "Copy";
                //Transaction.Id = 0;
                //Transaction.InputDate = DateTime.Now.Date;
                //Transaction.TransactionCode = "DT-" + DateTime.Now.ToString("ddMMyyHHmmssfff");

            }
            else
            {
                Transaction = Transactionquery.Where(x => x.isPost == false).FirstOrDefault();

            }



            if (Transaction == null)
            {
                TempData["Message"] = "Data is Posted..";
                TempData["Status"] = "2";

                return RedirectToAction("TransactionList");
            }


            if (Transaction.TransactionCategory == "Customer")
            {

                foreach (var item in Transaction.TransactionDetails)
                {
                    if (item.Sales != null)
                    {
                        item.PrevReceived = item.Sales.NetAmount - item.Sales.SalesPayments.Sum(x => x.Amount);

                    }
                    else
                    {
                        item.Amount = float.Parse(item.NetAmount.ToString());
                    }
                }

            }

            if (Transaction.TransactionCategory == "Supplier")
            {

                foreach (var item in Transaction.TransactionDetails)
                {
                    if (item.Purchase != null)
                    {

                        item.PrevReceived = item.Purchase.NetAmount - item.Purchase.PurchasePayments.Sum(x => x.Amount);

                    }
                    else
                    {
                        item.Amount = float.Parse(item.NetAmount.ToString());
                    }
                }

            }

            //if (Transaction.TransactionCategory == null)
            //{
            //    ViewBag.DebitAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
            //    ViewBag.CreditAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
            //}
            //else
            //{
            //    ViewBag.DebitAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
            //    ViewBag.CreditAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
            //}

            var Type = Transaction.TransactionCategory;

            if (Type == "Sales")
            {
                ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
            }
            else if (Type == "Customer")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            }
            else if (Type == "Income")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();
            }
            else if (Type == "ReceivedFromSupplier")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            }
            else if (Type == "Expense")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetExpenseHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
            }
            else if (Type == "PaidToCustomer")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
            }
            else if (Type == "PaidToEmployee")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetLoanAdvanceHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
            }
            else if (Type == "Received")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetIncomeHeadForDropDown();
            }
            else if (Type == "Supplier")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
            }
            else if ((Type == "Purchase") || (Type == "Opening Stock") || (Type == "GRR"))
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
            }
            else if (Type == "Contra")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetCashBankHeadForDropDown();
            }
            else if (Type == "CashContra")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetCashHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetBankHeadForDropDown();
            }
            else if (Type == "BankContra")
            {
                ViewBag.CreditAccountId = _accountHeadRepository.GetCashHeadForDropDown();
                ViewBag.DebitAccountId = _accountHeadRepository.GetBankHeadForDropDown();
            }
            else if (Type == "CustomerDiscount")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetDiscountExpenseHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            }
            else if (Type == "SupplierDiscount")
            {
                ViewBag.DebitAccountId = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
                ViewBag.CreditAccountId = _accountHeadRepository.GetDiscountIncomeHeadForDropDown();
            }
            else /// other contra like person to person transfer or any account head to other account head transfer
            {
                ViewBag.CreditAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
                ViewBag.DebitAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
            }




            ViewBag.Customer = _customerRepository.GetAllForDropDown();
            ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
            ViewBag.Member = _memberRepository.GetAllForDropDown();
            ViewBag.Employee = _employeeRepository.GetAllForDropDown();
            ViewBag.Type = Transaction.TransactionCategory;
            ViewBag.Currency = _countryRepository.GetCurrencyList();
            ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeExpenseHeadForDropDown();
            ViewBag.Product = _productRepository.GetAllProductForDropDown().Take(15);
            ViewBag.Category = _categoryRepository.GetAllForDropDown().Take(15);

            SelectListItem abcd = new SelectListItem() { Text = "Please Select", Value = "" };

            var xxx = _FromWarehousePermissionRepository.GetAllForDropDown();
            if (xxx.Count() == 0)
            {
                xxx = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            }
            else
            {
                xxx.Append(abcd);
            }

            ViewBag.Warehouse = xxx;




            var saleslist = _saleRepository.GetAllForDropDown();

            if (Transaction.CustomerId != null)
            {
                saleslist = _saleRepository.GetAllForDropDownForCustomer(true, Transaction.CustomerId.GetValueOrDefault());
            }
            var finalsaleslist = saleslist.ToList();

            var saleslistedit = _salesPaymentRepository.All().Include(x => x.SalesMain).Where(x => x.TransactionId == Transaction.Id)
            .Select(x => new SelectListItem
            {
                Text = x.SalesMain.SaleCode + " - " + x.SalesMain.CustomerModel.Name + "  " + x.SalesMain.CustomerName + " - " + x.SalesMain.NetAmount,
                Value = x.SalesId.ToString()
            }).ToList();
            finalsaleslist.AddRange(saleslistedit);
            ViewBag.Sales = finalsaleslist;



            var purchaselist = _purchaseRepository.GetAllForDropDown();

            if (Transaction.SupplierId != null)
            {
                purchaselist = _purchaseRepository.GetAllForDropDownForSupplier(true, Transaction.SupplierId.GetValueOrDefault());
            }
            var finalpurchaselist = purchaselist.ToList();

            //var purchaselistedit = _purchasePaymentRepository.All().Include(x=>x.PurchaseMain).Where(x => x.TransactionId == Transaction.Id)
            var purchaselistedit = _transactionRepository.All().Include(x => x.Purchase).Where(x => x.Id == Transaction.Id)

            .Select(x => new SelectListItem
            {
                Text = x.Purchase.PurchaseCode + " - " + x.Purchase.SupplierModel.SupplierName + "  " + x.Purchase.SupplierName + " - " + x.Purchase.NetAmount,
                Value = x.PurchaseId.ToString()
            }).ToList();
            finalpurchaselist.AddRange(purchaselistedit);
            ViewBag.Purchase = purchaselist;


            // ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();

            var amount = Transaction.TransactionAmount;
            ViewBag.Amount = amount.ToString("0.00"); ;

            if (Transaction.TransactionDetails.Count() == 0)
            {
                if (IsCopy == 1)
                {
                    ViewBag.ActionType = "Copy";
                    Transaction.Id = 0;
                    Transaction.InputDate = DateTime.Now.Date;
                    Transaction.TransactionCode = "DT-" + DateTime.Now.ToString("ddMMyyHHmmssfff");

                }

                return View("AddTransaction", Transaction);

            }
            else
            {
                return View("AddTransactionDetails", Transaction);
            }



            return View("AddTransaction", Transaction);
        }

        [HttpGet]
        public ActionResult ViewTransaction(int TransactionId)
        {
            ViewBag.ActionType = "View";
            //ViewBag.ActionType = "Edit";
            //var Transaction = _transactionRepository.Find(TransactionId);
            var Transaction = _transactionRepository.All()
                .Include(x => x.Customer)
                .Include(x => x.Supplier)
                .Include(x => x.vWarehouse)
                .Include(x => x.TransactionTagsList)
                .Include(x => x.TransactionDetails).ThenInclude(x => x.Sales).ThenInclude(x => x.CustomerModel)
                .Include(x => x.TransactionDetails).ThenInclude(x => x.Purchase).ThenInclude(x => x.SupplierModel)
                .Include(x => x.Sales).ThenInclude(x => x.SalesPayments.Where(x => x.TransactionId != TransactionId))
                .Include(x => x.Purchase).ThenInclude(x => x.PurchasePayments.Where(x => x.TransactionId != TransactionId))

                .Where(x => x.Id == TransactionId).FirstOrDefault();


            if (Transaction.TransactionCategory == "Customer")
            {

                foreach (var item in Transaction.TransactionDetails)
                {
                    if (item.Sales != null)
                    {
                        item.PrevReceived = item.Sales.NetAmount - item.Sales.SalesPayments.Sum(x => x.Amount);

                    }
                    else
                    {
                        item.Amount = float.Parse(item.NetAmount.ToString());
                    }
                }

            }



            if (Transaction.TransactionCategory == "Supplier")
            {

                foreach (var item in Transaction.TransactionDetails)
                {
                    if (item.Purchase != null)
                    {

                        item.PrevReceived = item.Purchase.NetAmount - item.Purchase.PurchasePayments.Sum(x => x.Amount);

                    }
                    else
                    {
                        item.Amount = float.Parse(item.NetAmount.ToString());
                    }
                }

            }

            ViewBag.DebitAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
            ViewBag.CreditAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();

            //if (Transaction.TransactionCategory == null)
            //{
            //    ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            //    ViewBag.CashBankHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            //}
            //else
            //{
            //    ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            //    ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();
            //}


            ViewBag.Customer = _customerRepository.GetAllForDropDown();
            ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
            ViewBag.Member = _memberRepository.GetAllForDropDown();
            ViewBag.Employee = _employeeRepository.GetAllForDropDown();
            ViewBag.Type = Transaction.TransactionCategory;
            ViewBag.Currency = _countryRepository.GetCurrencyList();
            ViewBag.Product = _productRepository.GetAllProductForDropDown().Take(15);
            ViewBag.Category = _categoryRepository.GetAllForDropDown().Take(15);
            //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeExpenseHeadForDropDown();


            SelectListItem abcd = new SelectListItem() { Text = "Please Select", Value = "" };

            var xxx = _FromWarehousePermissionRepository.GetAllForDropDown();
            if (xxx.Count() == 0)
            {
                xxx = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            }
            else
            {
                xxx.Append(abcd);
            }

            ViewBag.Warehouse = xxx;




            var saleslist = _saleRepository.GetAllForDropDown().ToList();
            var saleslistedit = _salesPaymentRepository.All().Include(x => x.SalesMain).Where(x => x.TransactionId == Transaction.Id)
            .Select(x => new SelectListItem
            {
                Text = x.SalesMain.SaleCode + " - " + x.SalesMain.CustomerModel.Name + "  " + x.SalesMain.CustomerName + " - " + x.SalesMain.NetAmount,
                Value = x.SalesId.ToString()
            }).ToList();
            saleslist.AddRange(saleslistedit);
            ViewBag.Sales = saleslist;



            var purchaselist = _purchaseRepository.GetAllForDropDown().ToList();
            //var purchaselistedit = _purchasePaymentRepository.All().Include(x=>x.PurchaseMain).Where(x => x.TransactionId == Transaction.Id)
            var purchaselistedit = _transactionRepository.All().Include(x => x.Purchase).Where(x => x.Id == Transaction.Id)

            .Select(x => new SelectListItem
            {
                Text = x.Purchase.PurchaseCode + " - " + x.Purchase.SupplierModel.SupplierName + "  " + x.Purchase.SupplierName + " - " + x.Purchase.NetAmount,
                Value = x.PurchaseId.ToString()
            }).ToList();
            purchaselist.AddRange(purchaselistedit);
            ViewBag.Purchase = purchaselist;


            // ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();

            if (Transaction.TransactionDetails.Count() == 0)
            {

                return View("AddTransaction", Transaction);

            }
            else
            {
                return View("AddTransactionDetails", Transaction);
            }



            return View("AddTransaction", Transaction);
        }


        [HttpGet]
        [AllowAnonymous]
        public ActionResult EditTransactionQB(int TransactionId)
        {
            ViewBag.ActionType = "Edit";
            ViewBag.isCopy = 0;

            var tID = TransactionId;

            //var Transaction = _transactionRepository.Find(TransactionId);
            var Transaction = _transactionRepository.All()
                .Include(x => x.Customer)
                .Include(x => x.Supplier)
                .Include(x => x.vWarehouse)
                .Include(x => x.TransactionDetails).ThenInclude(x => x.Sales).ThenInclude(x => x.CustomerModel)
                .Include(x => x.TransactionDetails).ThenInclude(x => x.Purchase).ThenInclude(x => x.SupplierModel)
                .Include(z => z.TransactionTagsList)
                //.Where(x => x.Id == TransactionId).FirstOrDefault()
                .Select(p => new
                {
                    p.Id,
                    p.TransactionCode,
                    p.Description,
                    p.TransactionType,
                    p.TransactionCategory,
                    p.WarehouseId,
                    InputDate = p.InputDate.ToString("dd-MMM-yy"),
                    p.TransactionTagsList,
                    p.CurrencyId,
                    p.CurrencyRate,
                    p.TransactionAmount,
                    p.TransactionFilePath,
                    p.CreditAccountId,
                    p.DebitAccountId,
                    p.TransactionTags,
                    TransactionDetails = p.TransactionDetails.Where(x => x.IsDelete == false).Select(x =>
                     new
                     {
                         Id = x.Id,
                         TransactionId = x.TransactionId,
                         RefCode = x.Purchase.PurchaseCode,
                         PurchaseCode = x.Purchase.PurchaseCode,
                         x.PurchaseId,
                         SupplierId = x.TransactionMain.SupplierId,
                         PurchaseDate = x.Purchase.PurchaseDate,
                         DueDate = x.Purchase.DueDate,
                         NetAmount = x.NetAmount - x.Purchase.PurchasePayments.Sum(x => x.Amount),
                         Amount = x.Amount,
                     }).ToList()

                }).FirstOrDefault();
            return Json(new { Success = 1, transaction = Transaction, ex = "Data Load Successfully" });

            //Transaction.TransactionTagsText = String.Join(" ", Transaction.TransactionTagsList.Select(x => x.tag));


            //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeExpenseHeadForDropDown();


            //if (Transaction.TransactionCategory == null)
            //{
            //    ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            //    ViewBag.CashBankHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            //}
            //else
            //{
            //    ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
            //    ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();
            //}


            //ViewBag.Customer = _customerRepository.GetAllForDropDown();
            //ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
            //ViewBag.Member = _memberRepository.GetAllForDropDown();
            //ViewBag.Employee = _employeeRepository.GetAllForDropDown();
            //ViewBag.Type = Transaction.TransactionCategory;
            //ViewBag.Currency = _countryRepository.GetCurrencyList();


            //SelectListItem abcd = new SelectListItem() { Text = "Please Select", Value = "" };

            //var xxx = _FromWarehousePermissionRepository.GetAllForDropDown();
            //if (xxx.Count() == 0)
            //{
            //    xxx = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
            //}
            //else
            //{
            //    xxx.Append(abcd);
            //}

            //ViewBag.Warehouse = xxx;




            //var saleslist = _saleRepository.GetAllForDropDown().ToList();
            //var saleslistedit = _salesPaymentRepository.All().Include(x => x.SalesMain).Where(x => x.TransactionId == Transaction.Id)
            //.Select(x => new SelectListItem
            //{
            //    Text = x.SalesMain.SaleCode + " - " + x.SalesMain.CustomerModel.Name + "  " + x.SalesMain.CustomerName + " - " + x.SalesMain.NetAmount,
            //    Value = x.SalesId.ToString()
            //}).ToList();
            //saleslist.AddRange(saleslistedit);
            //ViewBag.Sales = saleslist;



            //var purchaselist = _purchaseRepository.GetAllForDropDown().ToList();
            ////var purchaselistedit = _purchasePaymentRepository.All().Include(x=>x.PurchaseMain).Where(x => x.TransactionId == Transaction.Id)
            //var purchaselistedit = _transactionRepository.All().Include(x => x.Purchase).Where(x => x.Id == Transaction.Id)

            //.Select(x => new SelectListItem
            //{
            //    Text = x.Purchase.PurchaseCode + " - " + x.Purchase.SupplierModel.SupplierName + "  " + x.Purchase.SupplierName + " - " + x.Purchase.NetAmount,
            //    Value = x.PurchaseId.ToString()
            //}).ToList();
            //purchaselist.AddRange(purchaselistedit);
            //ViewBag.Purchase = purchaselist;


            //// ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();

            //var amount = Transaction.TransactionAmount;
            //ViewBag.Amount = amount;

            //if (Transaction.TransactionDetails.Count() == 0)
            //{
            //    return View("AddPayment", Transaction);
            //}
            //else
            //{
            //    return View("AddTransactionDetails", Transaction);
            //}

            //return View("AddPayment", Transaction);
        }



        //[HttpGet]
        //public ActionResult ViewTransaction(int TransactionId)
        //{
        //    ViewBag.ActionType = "View";
        //    //var Transaction = _transactionRepository.Find(TransactionId);
        //    var Transaction = _transactionRepository.All()
        //        .Include(x => x.Customer)
        //        .Include(x => x.Supplier)
        //        .Include(x => x.vWarehouse)
        //        .Include(x => x.TransactionDetails).ThenInclude(x => x.Sales).ThenInclude(x => x.CustomerModel)
        //        .Include(x => x.TransactionDetails).ThenInclude(x => x.Purchase).ThenInclude(x => x.SupplierModel)
        //        .Where(x => x.Id == TransactionId).FirstOrDefault();

        //    //ViewBag.IncomeExpenseHead = _accountHeadRepository.GetIncomeExpenseHeadForDropDown();
        //    //ViewBag.AssetLiabilityHead = _accountHeadRepository.GetAssetLiabilityHeadForDropDown();
        //    //ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();

        //    ViewBag.DebitAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();
        //    ViewBag.CreditAccountId = _accountHeadRepository.GetAccountLedgerHeadForDropDown();

        //    ViewBag.Customer = _customerRepository.GetAllForDropDown();
        //    ViewBag.Supplier = _supplierRepository.GetAllForDropDown();
        //    ViewBag.Member = _memberRepository.GetAllForDropDown();
        //    ViewBag.Employee = _employeeRepository.GetAllForDropDown();
        //    ViewBag.Type = Transaction.TransactionCategory;
        //    ViewBag.Currency = _countryRepository.GetCurrencyList();

        //    ViewBag.Sales = _saleRepository.GetAllForDropDown();
        //    ViewBag.Purchase = _purchaseRepository.GetAllForDropDown();




        //    SelectListItem abcd = new SelectListItem() { Text = "Please Select", Value = "" };

        //    var xxx = _FromWarehousePermissionRepository.GetAllForDropDown();
        //    if (xxx.Count() == 0)
        //    {
        //        xxx = _warehouseRepository.GetWarehouseLedgerHeadForDropDown();
        //    }
        //    else
        //    {
        //        xxx.Append(abcd);
        //    }

        //    ViewBag.Warehouse = xxx;

        //    if (Transaction.TransactionDetails.Count() == 0)
        //    {
        //        return View("AddTransaction", Transaction);
        //    }
        //    else
        //    {
        //        return View("AddTransactionDetails", Transaction);
        //    }
        //    return View("AddTransaction", Transaction);
        //}



        [HttpGet]
        [AllowAnonymous]
        public JsonResult DeleteTransaction(int TransactionId)
        {
            try
            {
                //var model = _transactionRepository.Find(TransactionId);
                var model = _transactionRepository.All().Include(x => x.TransactionDetails).Where(x => x.Id == TransactionId).FirstOrDefault();
                var parentmodel = _transactionRepository.All().Include(x => x.TransactionDetails).Where(x => x.ParentTransactionId == TransactionId).FirstOrDefault();

                if (parentmodel != null)
                {
                    _transactionRepository.Delete(parentmodel);
                }

                if (model != null)
                {
                    if (model.SalesId > 0)
                    {
                        var modelsalespayments = _salesPaymentRepository.All().Where(x => x.TransactionId == TransactionId).ToList();
                        _salesPaymentRepository.RemoveRange(modelsalespayments);

                    }
                    else if (model.PurchaseId > 0)
                    {
                        var modelpurchasepayments = _purchasePaymentRepository.All().Where(x => x.TransactionId == TransactionId).ToList();
                        _purchasePaymentRepository.RemoveRange(modelpurchasepayments);
                    }
                    else if (model.TransactionDetails.Count() != 0)
                    {
                        foreach (var item in model.TransactionDetails)
                        {
                            if (item.SalesId > 0)
                            {
                                var itemsalespayments = _salesPaymentRepository.All().Where(x => x.TransactionId == TransactionId).ToList();
                                _salesPaymentRepository.RemoveRange(itemsalespayments);

                            }
                            else if (item.PurchaseId > 0)
                            {
                                var itempurchasepayments = _purchasePaymentRepository.All().Where(x => x.TransactionId == TransactionId).ToList();
                                _purchasePaymentRepository.RemoveRange(itempurchasepayments);
                            }


                        }

                    }

                    _transactionRepository.Delete(model);


                    TempData["Message"] = "Data Delete Successfully";
                    TempData["Status"] = "3";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.DebitAccount != null ? model.DebitAccount.AccName : "");


                    return Json(new { success = "1", msg = "Deleted Successfully" });

                }
                return Json(new { success = "0", msg = "No items found to delete." });


            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }


        }


        [HttpGet]
        [OverridableAuthorize]
        public JsonResult DeleteTransactionPurchase(int TransactionId)
        {
            try
            {
                //var model = _transactionRepository.Find(TransactionId);
                var model = _transactionRepository.All().Include(x => x.TransactionDetails).Where(x => x.Id == TransactionId).FirstOrDefault();
                var parentmodel = _transactionRepository.All().Include(x => x.TransactionDetails).Where(x => x.ParentTransactionId == TransactionId).FirstOrDefault();

                if (parentmodel != null)
                {
                    _transactionRepository.Delete(parentmodel);
                }

                if (model != null)
                {
                    if (model.SalesId > 0)
                    {
                        var modelsalespayments = _salesPaymentRepository.All().Where(x => x.TransactionId == TransactionId).ToList();
                        _salesPaymentRepository.RemoveRange(modelsalespayments);

                    }
                    else if (model.PurchaseId > 0)
                    {
                        var modelpurchasepayments = _purchasePaymentRepository.All().Where(x => x.TransactionId == TransactionId).ToList();
                        _purchasePaymentRepository.RemoveRange(modelpurchasepayments);
                    }
                    else if (model.TransactionDetails.Count() != 0)
                    {
                        foreach (var item in model.TransactionDetails)
                        {
                            if (item.SalesId > 0)
                            {
                                var itemsalespayments = _salesPaymentRepository.All().Where(x => x.TransactionId == TransactionId).ToList();
                                _salesPaymentRepository.RemoveRange(itemsalespayments);

                            }
                            else if (item.PurchaseId > 0)
                            {
                                var itempurchasepayments = _purchasePaymentRepository.All().Where(x => x.TransactionId == TransactionId).ToList();
                                _purchasePaymentRepository.RemoveRange(itempurchasepayments);
                            }


                        }

                    }

                    _transactionRepository.Delete(model);


                    TempData["Message"] = "Data Delete Successfully";
                    TempData["Status"] = "3";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.DebitAccount != null ? model.DebitAccount.AccName : "");


                    return Json(new { success = "1", msg = "Deleted Successfully" });

                }
                return Json(new { success = "0", msg = "No items found to delete." });


            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }


        }


        [AllowAnonymous]
        public JsonResult LastTransaction(int? transactionid, string transactiontypesearch)
        {
            try
            {


                var UserId = HttpContext.Session.GetInt32("UserId");
                //var ComId = HttpContext.Session.GetInt32("ComId");

                var abc = _transactionRepository.All()//.Include(x => x.AccountId).Include(x => x.UserAccountList)
                    .Where(x => x.TransactionType == transactiontypesearch && x.isSystem == false && x.Id != transactionid)
                            .Select(p => new
                            {
                                Id = p.Id,
                                TransactionCode = p.TransactionCode,
                                TransactionDate = p.InputDate.ToString("dd-MMM-yy"),
                                TransactionDesc = p.Description ?? "",
                                Amount = p.TransactionAmount,
                                TransactionType = p.TransactionType

                            }).OrderByDescending(x => x.Id).Take(5).ToList();
                ////var currentdate = DateTime.Now.Date;
                //var LastTransactionDate = DateTime.Now.Date.ToString("dd-MMM-yy");
                //string LastTransactionCode = "Auto Generated";
                //if (abc != null)
                //{
                //    LastTransactionDate = abc.Count() > 0 ? abc.FirstOrDefault().TransactionDate : LastTransactionDate;
                //    LastTransactionCode = abc.Count() > 0 ? LastTransactionCode : LastTransactionCode;


                //}

                //return Json(new { PrevVoucherList = abc, LastVoucherDate = LastVoucerhDate.ToString("dd-MMM-yy"), LastVoucherNo = abc.FirstOrDefault().VoucherNo });
                return Json(new { PrevTransactionList = abc });

            }
            catch (Exception ex)
            {
                return Json(new { Success = "0", error = ex.Message });
                throw ex;
            }

        }

        #endregion

        //[HttpPost]
        //[AllowAnonymous]
        //public IActionResult UploadImageAAA(IFormFile file, [FromForm] string TransactionIdabc)  //write by munna
        //{
        //    try
        //    {

        //    var transactioninfo = _transactionRepository.Find(int.Parse(TransactionIdabc));

        //    string filePath = configuration.GetValue<string>("MediaManager:TransactionFilePath");
        //    var folderPath = filePath + "/";
        //    var filename = string.Empty;

        //    if (file != null && file.Length > 0)
        //    {


        //        string serverFolder = Path.Combine(_webHostEnvironment.WebRootPath, folderPath);

        //         filename += Guid.NewGuid().ToString() + "_" + file.FileName;

        //            serverFolder = Path.Combine(serverFolder, filename);
        //        file.CopyToAsync(new FileStream(serverFolder, FileMode.Create));
        //            //transactioninfo.TransactionFilePath = serverFolder;
        //            transactioninfo.TransactionFilePath = $"{folderPath}{filename}";

        //        }

        //        // Update the voucherinfo object even when no file was selected
        //        transactioninfo.FilePath = transactioninfo.FilePath;
        //    transactioninfo.TransactionFilePath = transactioninfo.TransactionFilePath;
        //    _transactionRepository.Update(transactioninfo, transactioninfo.Id);

        //    return Json(new { status = "File upload Successfully." });

        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { status = ex.Message });
        //        throw ex;
        //    }
        //}


        [HttpPost]
        [AllowAnonymous]
        public IActionResult UploadImage(IFormFile file, [FromForm] string TransactionIdabc)
        {
            try
            {

                var transactioninfo = _transactionRepository.Find(int.Parse(TransactionIdabc));

                string filePath = configuration.GetValue<string>("MediaManager:TransactionFilePath");
                var folderPath = filePath + "/";
                var filename = string.Empty;

                if (file != null && file.Length > 0)
                {
                    filename = transactioninfo.Id + '_' + transactioninfo.ComId + file.FileName;

                    var path = Path.Combine(
                        Directory.GetCurrentDirectory(), "wwwroot/Content/TransactionImages",
                        filename);

                    using (var stream = new FileStream(path, FileMode.Create))
                    {
                        file.CopyTo(stream);
                    }
                    transactioninfo.FilePath = $"/Content/TransactionImages/{filename}";

                    string serverFolder = Path.Combine(_webHostEnvironment.WebRootPath, folderPath);
                    serverFolder += Guid.NewGuid().ToString() + "_" + file.FileName;
                    file.CopyToAsync(new FileStream(serverFolder, FileMode.Create));
                    transactioninfo.TransactionFilePath = serverFolder;
                }

                // Update the voucherinfo object even when no file was selected
                transactioninfo.FilePath = transactioninfo.FilePath;
                transactioninfo.TransactionFilePath = transactioninfo.TransactionFilePath;
                _transactionRepository.Update(transactioninfo, transactioninfo.Id);

                return Json(new { status = "File upload Successfully." });

            }
            catch (Exception ex)
            {
                return Json(new { status = ex.Message });
                throw ex;
            }
        }



        #region invoiceBillforfnf
        [HttpGet]
        public ActionResult AddInvoiceBill()
        {
            ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();
            ViewBag.ActionType = "Create";
            return View();
        }
        [AllowAnonymous]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult AddInvoiceBill(InvoiceBillModel model)
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                   .Select(x => new { x.Key, x.Value.Errors });


                if (ModelState.IsValid)
                {
                    if (model.Id == 0)
                    {
                        model.ExpiredDate = model.BilledDate.AddMonths(1);
                        if (model.ReceivedAmount == 0)
                            model.ReceivedDate = null;


                        _invoiceBillRepository.Insert(model);

                        var internetuser = _InternetUserRepository.All().Where(x => x.UserId == model.UserId).FirstOrDefault();
                        if (internetuser == null)
                        {
                            internetuser = new InternetUserModel();
                            internetuser.UserId = model.UserId;
                            internetuser.UserName = model.UserName;
                            internetuser.Amount = model.BillAmount;
                            internetuser.CreatedOn = model.CreateDate;
                            internetuser.CreatedBy = "System";
                            internetuser.LastBilledDate = model.BilledDate;
                            internetuser.UserStatusId = 1;
                            internetuser.IsDelete = false;


                            internetuser.LastReceivedDate = model.ReceivedAmount == 0 ? model.ReceivedDate : null; //model.ReceivedDate;
                            internetuser.LastExpiredDate = model.BilledDate.AddMonths(1);

                            //internetuser.Amount = model.BillAmount;
                            _InternetUserRepository.Insert(internetuser);


                            model.InternetUserId = internetuser.Id;
                            _invoiceBillRepository.Update(model, model.Id);
                        }
                        else
                        {

                            internetuser.LastReceivedDate = model.ReceivedAmount == 0 ? model.ReceivedDate : null; //model.ReceivedDate;
                            internetuser.LastExpiredDate = model.BilledDate.AddMonths(1);

                            //var expiredatedata = _expireDateExtendRepository.All().Where(x => x.InternetUserId == internetuser.Id).OrderByDescending(x => x.Id).FirstOrDefault().NewExpiredDate;
                            //if (expiredatedata != null && expiredatedata > internetuser.LastExpiredDate)
                            //{
                            //    internetuser.LastExpiredDate = expiredatedata;

                            //}

                            _InternetUserRepository.Update(internetuser, internetuser.Id);

                        }


                        TempData["Message"] = "Data Save Successfully";
                        TempData["Status"] = "1";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.UserId != null ? model.UserName : "");

                    }
                    else
                    {
                        model.ExpiredDate = model.BilledDate.AddMonths(1);
                        if (model.ReceivedAmount == 0)
                            model.ReceivedDate = null;

                        _invoiceBillRepository.Update(model, model.Id);


                        var internetuser = _InternetUserRepository.All().Where(x => x.Id == model.InternetUserId).FirstOrDefault();
                        if (internetuser != null)
                        {
                            //internetuser = new InternetUserModel();
                            internetuser.UserId = model.UserId;
                            internetuser.UserName = model.UserName;
                            internetuser.Amount = model.BillAmount;
                            internetuser.CreatedOn = model.CreateDate;
                            internetuser.CreatedBy = "System";
                            internetuser.LastBilledDate = model.BilledDate;
                            internetuser.LastReceivedDate = model.ReceivedAmount == 0 ? model.ReceivedDate : null; //model.ReceivedDate;
                            internetuser.LastExpiredDate = model.BilledDate.AddMonths(1);

                            //internetuser.Amount = model.BillAmount;
                            _InternetUserRepository.Update(internetuser, internetuser.Id);
                        }


                        TempData["Message"] = "Data Update Successfully";
                        TempData["Status"] = "2";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.UserId != null ? model.UserName : "");

                    }

                    return Json(new { Success = 1, Id = model.Id, ex = TempData["Message"] });

                    //return RedirectToAction("AddInvoiceBill");
                }
                else
                {
                    if (model.Id == 0)
                    {
                        ViewBag.ActionType = "Create";
                    }
                    else
                    {
                        ViewBag.ActionType = "Edit";
                    }

                    //return View(model);
                    return Json(new { Success = 0, Id = model.Id, ex = "Some Error Occured !!!" });
                }
            }
            catch (Exception ex)
            {

                return Json(new { Success = 0, Id = model.Id, ex = ex });
            }
        }


        [HttpGet]
        public ActionResult EditInvoiceBill(int InvoiceBillId)
        {
            ViewBag.ActionType = "Edit";
            //var Transaction = _invoiceBillRepository.Find(InvoiceBillId);

            var Transaction = _invoiceBillRepository.All().Where(x => x.Id == InvoiceBillId).Include(x => x.InternetUserList).FirstOrDefault();


            ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();




            return View("AddInvoiceBill", Transaction);
        }

        [HttpGet]
        public ActionResult ViewInvoiceBill(int InvoiceBillId)
        {
            ViewBag.ActionType = "View";
            var Transaction = _invoiceBillRepository.Find(InvoiceBillId);
            ViewBag.CashBankHead = _accountHeadRepository.GetCashBankHeadForDropDown();

            return View("AddInvoiceBill", Transaction);
        }

        public ActionResult DeleteInvoicebill(int InvoiceBillId)
        {
            var model = _invoiceBillRepository.Find(InvoiceBillId);
            if (model != null)
            {
                _invoiceBillRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.UserId != null ? model.UserName : "");


                return RedirectToAction("InvoiceBillList");
            }
            return RedirectToAction("InvoiceBillList");
        }


        public IActionResult InvoicebillList()
        {
            ViewBag.User = _userAccountRepository.UserAccountForDropdown();
            //ViewBag.User = _invoiceBillRepository.UserAccountForDropdown();

            return View();
        }
        [AllowAnonymous]
        public IActionResult InvoiceBillPrint(int InvoiceBillId)
        {

            string weburl = configuration.GetSection("hostimage").Value;
            HttpContext.Session.SetString("weburl", weburl);

            //var weburl = HttpContext.Session.GetString("weburl"); //"https://pqstec.com/invoiceapps/Home/login/?ReturnUrl=%2Finvoiceapps%2FAdmin%2FInvoiceBillList";// 
            //var origin = weburl;
            //var controllerName = this.ControllerContext.RouteData.Values["Controller"].ToString().ToLower();

            //String St = weburl.ToLower();

            //int pFrom = St.IndexOf("/") + "/".Length;
            //int pTo = St.LastIndexOf("/" + controllerName);

            //string result = "";
            //if (pTo < 1)
            //{
            //    result = origin;

            //}
            //else
            //{
            //    result = St.Substring(pFrom, pTo - pFrom);
            //    result = origin + "/" + result;

            //}

            errorlog(weburl);

            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");


            string reportname = "rptInvoiceBill";

            //var ab = _invoiceBillRepository.Find(InvoiceBillId).BillNo;
            string filename = _invoiceBillRepository.All().Where(x => x.Id == InvoiceBillId).Select(x => x.UserId + "_" + x.BillNo).Single();
            //var filename = "Invoice_BIll_";
            //string apppath = "";

            HttpContext.Session.SetString("ReportQuery", "Exec  [rptInvoiceBill] '" + InvoiceBillId + "','" + ComId + "', '" + weburl + "'");
            HttpContext.Session.SetString("ReportPath", "~/ReportViewer/POS/" + reportname + ".rdlc");
            HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));

            HttpContext.Session.SetObject("rptList", postData);


            return RedirectToAction("Index", "ReportViewer");
        }





        [AllowAnonymous]
        public IActionResult InternetUserLedgerPrint(string InternetUserId)
        {
            //var weburl = HttpContext.Session.GetString("weburl"); //"https://pqstec.com/invoiceapps/Home/login/?ReturnUrl=%2Finvoiceapps%2FAdmin%2FInvoiceBillList";// 

            string weburl = configuration.GetSection("hostimage").Value;
            HttpContext.Session.SetString("weburl", weburl);

            errorlog(weburl);

            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");
            string UrlLink = "";
            //string redirectUrl = "";
            string reportname = "rptInvoiceBill";
            string FromDate = "1-jan-2020";
            string ToDate = "31-Dec-2023";


            string filename = _InternetUserRepository.All().Where(x => x.UserId == InternetUserId).Select(x => x.UserId + "_" + x.UserName).Single();
            reportname = "rptInternetUserLedger";
            filename = "rptInternetUserLedger_" + filename;
            HttpContext.Session.SetString("ReportQuery", "Exec InternetService_LedgerList '" + ComId + "','" + InternetUserId + "','" + FromDate + "','" + ToDate + "','" + UrlLink + "'   ");



            HttpContext.Session.SetString("ReportPath", "~/ReportViewer/InternetService/" + reportname + ".rdlc");
            HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));
            HttpContext.Session.SetObject("rptList", postData);


            return RedirectToAction("Index", "ReportViewer");
        }

        public class InvoiceBillResultList : InvoiceBillModel
        {
            public decimal DueAmount { get; set; }
            public string? BilledDateString { get; set; }
            public string? ExpiredDateString { get; set; }
            public string? NextFollowDateString { get; set; }

            public string? ReceivedDateString { get; set; }
            public string? ReceivedByHead { get; set; }



        }

        [AllowAnonymous]
        public JsonResult GetInvoiceDueList(string id)
        {

            var deliveryChallanList = _invoiceBillRepository.All().Where(p => p.UserId == id && ((p.ReceivedAmount + p.Discount + p.BadDebt) != p.BillAmount)).ToList().Take(5);

            List<InvoiceBillResultList> data = new List<InvoiceBillResultList>();

            foreach (var item in deliveryChallanList)
            {
                InvoiceBillResultList asdf = new InvoiceBillResultList();
                asdf.Id = item.Id;
                asdf.BillNo = item.BillNo;
                asdf.UserId = item.UserId;
                asdf.UserName = item.UserName;
                asdf.BilledDateString = item.BilledDate.ToString("dd-MMM-yy");
                asdf.BillAmount = item.BillAmount;
                asdf.ReceivedAmount = item.ReceivedAmount;
                asdf.Discount = item.Discount;
                asdf.BadDebt = item.BadDebt;
                asdf.DueAmount = item.BillAmount - (item.ReceivedAmount + item.BadDebt + item.Discount);
                asdf.Description = item.Description;


                //asdf.DeliveryDate = DateTime.Parse(item.DeliveryDate.ToString()).ToString("dd-MMM-yy");
                //asdf.DeliveryQty = item.DeliveryQty;

                data.Add(asdf);
            }

            return Json(data.OrderByDescending(x => x.Id));
            //return Json(new { Success = 1, data = asdf }, JsonRequestBehavior.AllowGet);
        }


        public void errorlog(string ex)
        {
            string filePath = @"C:\DevelopmentError\DevelopmentFile.txt";


            using (StreamWriter writer = new StreamWriter(filePath, true))
            {
                writer.WriteLine(ex);
                writer.WriteLine("-----------------------------------------------------------------------------");
                writer.WriteLine("Date : " + DateTime.Now.ToString());
                writer.WriteLine();


            }
        }
        [AllowAnonymous]
        [HttpPost, ActionName("InvoiceBillReportList")]
        ////[Authorize(Roles = "Admin, SuperAdmin , Commercial-Admin ")]
        //[OverridableAuthorize]
        //[ValidateAntiForgeryToken]
        public JsonResult SetSessionInvoiceBillReport(string rptFormat, string action, string FromDate, string ToDate, string InternetUserId, string UserId)
        {
            try
            {
                var ComId = (HttpContext.Session.GetInt32("ComId"));
                string UrlLink = "";
                var reportname = "";
                var filename = "";
                string redirectUrl = "";

                if (action == "PrintInvoiceSummary")
                {
                    reportname = "rptProductList";
                    filename = "InvoiceSummary_From_" + FromDate + "To_" + ToDate;
                    HttpContext.Session.SetString("ReportQuery", "Exec rptInvoiceSummary '" + ComId + "','" + FromDate + "', '" + ToDate + "' ");
                }
                else if (action == "PrintSubLedger")
                {

                    reportname = "rptInternetUserLedger";
                    filename = "rptInternetUserLedger_" + InternetUserId;
                    HttpContext.Session.SetString("ReportQuery", "Exec InternetService_LedgerList '" + ComId + "','" + InternetUserId + "','" + FromDate + "','" + ToDate + "','" + UrlLink + "'   ");


                }


                var abcd = HttpContext.Session.GetString("ReportQuery");
                HttpContext.Session.SetString("ReportPath", "~/ReportViewer/InternetService/" + reportname + ".rdlc");
                HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));
                HttpContext.Session.SetString("ReportType", rptFormat);


                string DataSourceName = "DataSet1";
                clsReport.strReportPathMain = HttpContext.Session.GetString("ReportPath");// Session["ReportPath"].ToString();
                clsReport.strQueryMain = HttpContext.Session.GetString("ReportQuery");
                clsReport.strDSNMain = DataSourceName;
                string callBackUrl = this.Url.Action("Index", "ReportViewer", new { reporttype = rptFormat });
                redirectUrl = callBackUrl;

                return Json(new { Url = redirectUrl });

            }

            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException.InnerException.Message.ToString() });
            }

            //return Json(new { Success = 0, ex = new Exception("Unable to Open").Message.ToString() });
            //return RedirectToAction("Index");

        }


        [AllowAnonymous]
        public IActionResult GetInvoiceBillList(string FromDate, string ToDate, int? UserId, int isAll, string Status)
        {
            try
            {
                var ComId = (HttpContext.Session.GetInt32("ComId"));

                DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date);
                DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date);

                if (FromDate == null || FromDate == "")
                {
                }
                else
                {
                    dtFrom = Convert.ToDateTime(FromDate);

                }
                if (ToDate == null || ToDate == "")
                {
                }
                else
                {
                    dtTo = Convert.ToDateTime(ToDate);

                }

                Microsoft.Extensions.Primitives.StringValues y = "";

                var x = Request.Form.TryGetValue("search[value]", out y);

                var invoicebill = _invoiceBillRepository.All().Where(x => x.isSystem == false);

                if (Status == "Received")
                {
                    invoicebill = invoicebill.Where(x => x.ReceivedAmount > 0);
                }
                else if (Status == "BadDebt")
                {
                    invoicebill = invoicebill.Where(x => x.BadDebt > 0);
                }
                else if (Status == "Discount")
                {
                    invoicebill = invoicebill.Where(x => x.Discount > 0);
                }
                else if (Status == "LastMonthDue")
                {
                    invoicebill = invoicebill.Where(x => x.ReceivedAmount == 0 && x.BilledDate.Month == DateTime.Now.Date.AddMonths(-1).Month && x.BilledDate.Year == DateTime.Now.Date.AddMonths(-1).Year);
                }




                if (y.ToString().Length > 0)
                {

                }
                else
                {
                    if (UserId == null)
                    {


                        if (Status == "LastMonthDue")
                        {

                        }
                        else
                        {
                            invoicebill = invoicebill.Where(p => p.BilledDate >= dtFrom && p.BilledDate <= dtTo);

                        }




                    }
                    else
                    {
                        if (UserId == 1)
                        {

                            invoicebill = invoicebill.Where(p => p.BilledDate >= dtFrom && p.BilledDate <= dtTo);

                        }
                        else
                        {
                            invoicebill = invoicebill.Where(p => (p.BilledDate >= dtFrom && p.BilledDate <= dtTo) && p.LuserId == UserId);
                        }
                    }

                }

                //invoicebill = invoicebill.OrderByDescending(x => x.Id);


                var query = from e in invoicebill
                            select new InvoiceBillResultList
                            {
                                Id = e.Id,
                                BillNo = e.BillNo,
                                UserId = e.UserId,
                                UserName = e.UserName,
                                //BilledDate = e.BilledDate,
                                BilledDateString = e.BilledDate.ToString("dd-MMM-yy"),
                                //ReceivedDateString = e.ReceivedDate.GetValueOrDefault().ToString("dd-MMM-yy"),// e.ReceivedDate.HasValue == true ? e.ReceivedDate.ToString("dd-MMM-yy") : "",  //e.ReceivedDate != null ? e.ReceivedDate.ToString("dd-MMM-yy") : "", //e.ReceivedDate.ToString("dd-MMM-yy"),
                                ExpiredDateString = e.ExpiredDate.GetValueOrDefault().ToString("dd-MMM-yy"),
                                NextFollowDateString = e.NextFollowDate != null ? e.NextFollowDate.GetValueOrDefault().ToString("dd-MMM-yy") : null,

                                //ReceivedDate = e.ReceivedDate,
                                BillAmount = e.BillAmount,
                                ReceivedAmount = e.ReceivedAmount,
                                Description = e.Description,
                                Discount = e.Discount,
                                BadDebt = e.BadDebt,
                                isPost = e.isPost,
                                InWords = e.InWords,
                                Balance = e.BillAmount - e.Discount - e.BadDebt - e.ReceivedAmount,
                                ReceivedByHead = e.AccountReceiveByHead != null ? e.AccountReceiveByHead.AccName : null,
                                ReceivedDateString = e.AccountReceiveByHead != null ? e.ReceivedDate.GetValueOrDefault().ToString("dd-MMM-yy") : null



                            };
                var parser = new Parser<InvoiceBillResultList>(Request.Form, query);
                return Json(parser.Parse());
            }
            catch (Exception ex)
            {
                return Json(new { Success = "0", error = ex.Message });
                //throw ex;
            }

        }


        #endregion

        #region Warehouse
        public IActionResult WarehouseList()
        {
            return View(_warehouseRepository.All());
        }

        [HttpGet]
        public ActionResult AddWarehouse()
        {
            ViewBag.ActionType = "Create";
            ViewBag.WarehouseGroupHead = _warehouseRepository.GetWarehouseGroupHeadForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddWarehouse(WarehouseModel model)
        {

            var errors = ModelState.Where(x => x.Value.Errors.Any())
    .Select(x => new { x.Key, x.Value.Errors });

            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _warehouseRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.WhName.ToString());

                }
                else
                {
                    _warehouseRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.WhName.ToString());

                }
                return RedirectToAction("WarehouseList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpPost]
        //[ValidateAntiForgeryToken]
        [AllowAnonymous]
        public ActionResult AddWarehouse2(WarehouseModel model)
        {


            if (model.Id == 0)
            {
                _warehouseRepository.Insert(model);

            }
            return Json(new { error = false, Id = model.Id, message = "Warehouse created successfully" });
        }

        [AllowAnonymous]
        public JsonResult GetParentWarehouse()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var buyerGroup = _warehouseRepository.GetWarehouseGroupHeadForDropDown();
            return Json(buyerGroup);
        }

        [AllowAnonymous]
        public JsonResult GetWarehouse()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var buyerGroup = _warehouseRepository.GetAllForDropDown();
            return Json(buyerGroup);
        }

        [HttpGet]
        public ActionResult EditWarehouse(int WarehouseId)
        {
            ViewBag.ActionType = "Edit";
            var Warehouse = _warehouseRepository.Find(WarehouseId);
            ViewBag.WarehouseGroupHead = _warehouseRepository.GetWarehouseGroupHeadForDropDown();
            return View("AddWarehouse", Warehouse);
        }

        public ActionResult DeleteWarehouse(int WarehouseId)
        {
            var model = _warehouseRepository.Find(WarehouseId);
            if (model != null)
            {
                _warehouseRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.WhName);


                return RedirectToAction("WarehouseList");
            }
            return RedirectToAction("WarehouseList");
        }
        #endregion

        #region Category
        public IActionResult CategoryList()
        {
            return View(_categoryRepository.All());
        }

        [HttpGet]
        public ActionResult AddCategory(int IsPartialView = 0)
        {
            ViewBag.ActionType = "Create";
            ViewBag.CategoryGroupHead = _categoryRepository.GetAllForDropDown();
            ViewBag.IsPartialView = IsPartialView;

            CategoryModel cm = new CategoryModel();
            cm.IsPartialView = IsPartialView;
            return View(cm);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddCategory(CategoryModel model)
        {
            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

            ViewBag.IsPartialView = model.IsPartialView;
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _categoryRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Name.ToString());

                }
                else
                {
                    _categoryRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());

                }
                if (model.IsPartialView == 1)
                {

                    ViewBag.ActionType = "Create";
                    ViewBag.CategoryGroupHead = _categoryRepository.GetAllForDropDown();

                    CategoryModel cm = new CategoryModel();
                    cm.IsPartialView = model.IsPartialView;
                    return View(cm);
                }
                return RedirectToAction("CategoryList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public async Task<IActionResult> EditCategory(int CategoryId)
        {
            try
            {



                ViewBag.ActionType = "Edit";
                //var Category = _categoryRepository.Find(CategoryId);
                //var categoryimagepath = _mediaRepository

                var ComId = HttpContext.Session.GetInt32("ComId");

                //var Category = (from p in  _categoryRepository.All().AsEnumerable()
                //                     join g in await _mediaRepository.GetAsyncCollection(ComId) on p.ImagePath equals g.Id into gg /// it should be gallery / media repository
                //                    from g in gg.DefaultIfEmpty()
                //                    //join h in _context.Galleries on p.ProductPicture2 equals h.Id into hh
                //                    //from h in hh.DefaultIfEmpty()
                //                    where p.Id == CategoryId
                //                    select new CategoryModel
                //                    {
                //                        Id = p.Id,
                //                        Name = p.Name,
                //                        ImagePath = p.ImagePath,
                //                        ProductPicturePreview1 = g.Name ?? $"/{g.Name}" 
                //                    }).FirstOrDefault();


                var Category = await (from p in db.Categories
                                      join g in db.Galleries on p.ImagePath equals g.Id into gg
                                      from g in gg.DefaultIfEmpty()
                                      where p.Id == CategoryId
                                      select new CategoryModel
                                      {
                                          Id = p.Id,
                                          Name = p.Name,
                                          ImagePath = p.ImagePath,
                                          //ProductPicture1 = p.ProductPicture1,
                                          ProductPicturePreview1 = g.Name != null ? $"/{g.Name}" : null
                                      }).FirstOrDefaultAsync();

                //var Category = (from p in _categoryRepository.All().AsEnumerable()
                //                join g in db.Galleries.Where(x=>x.ComId == ComId) on p.ImagePath equals g.Id into gg /// it should be gallery / media repository
                //                from g in gg.DefaultIfEmpty()
                //                    //join h in _context.Galleries on p.ProductPicture2 equals h.Id into hh
                //                    //from h in hh.DefaultIfEmpty()
                //                where p.Id == CategoryId
                //                select new CategoryModel
                //                {
                //                    Id = p.Id,
                //                    Name = p.Name,
                //                    ImagePath = p.ImagePath,
                //                    //ProductPicturePreview1 = g.Name ?? $"/{g.Name}"
                //                     ProductPicturePreview1 = g.Name != null ? $"/{g.Name}" : null,
                //                }).FirstOrDefault();

                ViewBag.CategoryGroupHead = _categoryRepository.GetAllForDropDown();
                return View("AddCategory", Category);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public ActionResult DeleteCategory(int CategoryId)
        {
            var model = _categoryRepository.Find(CategoryId);
            if (model != null)
            {
                _categoryRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Name);


                return RedirectToAction("CategoryList");
            }
            return RedirectToAction("CategoryList");

        }
        #endregion

        #region ApprovalSetting
        public IActionResult ApprovalSettingList()
        {
            return View(_docApprovalSettingRepository.All().Include(x => x.ApprovalType).Include(x => x.DocType).Include(x => x.EntryUserList).Include(x => x.VerifyUserList).Include(x => x.CheckUserList).Include(x => x.ApproveUserList));
        }

        [HttpGet]
        public ActionResult AddApprovalSetting()
        {
            ViewBag.ActionType = "Create";

            ViewBag.ApprovalTypeId = _approvalTypeRepository.GetAllForDropDown();
            ViewBag.DocTypeId = _docTypeRepository.GetApprovalDocForDropDown();


            ViewBag.LuserIdEntry = _userAccountRepository.GetAllForDropDown();
            ViewBag.LuserIdCheck = _userAccountRepository.GetAllForDropDown();
            ViewBag.LuserIdVerify = _userAccountRepository.GetAllForDropDown();
            ViewBag.LuserIdApprove = _userAccountRepository.GetAllForDropDown();



            DocApprovalSettingModel cm = new DocApprovalSettingModel();
            return View(cm);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddApprovalSetting(DocApprovalSettingModel model)
        {

            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _docApprovalSettingRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Id.ToString());

                }
                else
                {
                    _docApprovalSettingRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Id.ToString());

                }
                return RedirectToAction("ApprovalSettingList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public async Task<IActionResult> EditApprovalSetting(int DocApprovalSettingId)
        {
            try
            {
                ViewBag.ActionType = "Edit";
                var DocApprovalSetting = _docApprovalSettingRepository.Find(DocApprovalSettingId);


                ViewBag.ApprovalTypeId = _approvalTypeRepository.GetAllForDropDown();
                ViewBag.DocTypeId = _docTypeRepository.GetApprovalDocForDropDown();


                ViewBag.LuserIdEntry = _userAccountRepository.GetAllForDropDown();
                ViewBag.LuserIdCheck = _userAccountRepository.GetAllForDropDown();
                ViewBag.LuserIdVerify = _userAccountRepository.GetAllForDropDown();
                ViewBag.LuserIdApprove = _userAccountRepository.GetAllForDropDown();


                return View("AddApprovalSetting", DocApprovalSetting);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public ActionResult DeleteApprovalSetting(int DocApprovalSettingId)
        {
            var model = _docApprovalSettingRepository.Find(DocApprovalSettingId);
            if (model != null)
            {
                _docApprovalSettingRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Id.ToString());


                return RedirectToAction("ApprovalSettingList");
            }
            return RedirectToAction("ApprovalSettingList");

        }
        #endregion


        #region Brand
        public IActionResult BrandList()
        {
            return View(_brandRepository.All());
        }

        [HttpGet]
        public ActionResult AddBrand(int IsPartialView = 0)
        {
            ViewBag.ActionType = "Create";
            ViewBag.IsPartialView = IsPartialView;

            BrandModel cm = new BrandModel();
            cm.IsPartialView = IsPartialView;
            return View(cm);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddBrand(BrandModel model)
        {
            ViewBag.IsPartialView = model.IsPartialView;
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _brandRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.BrandName.ToString());

                }
                else
                {
                    _brandRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.BrandName.ToString());

                }
                if (model.IsPartialView == 1)
                {

                    ViewBag.ActionType = "Create";

                    BrandModel cm = new BrandModel();
                    cm.IsPartialView = model.IsPartialView;
                    return View(cm);
                }
                return RedirectToAction("BrandList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditBrand(int BrandId)
        {
            ViewBag.ActionType = "Edit";
            var Brand = _brandRepository.Find(BrandId);
            return View("AddBrand", Brand);
        }

        public ActionResult DeleteBrand(int BrandId)
        {
            var model = _brandRepository.Find(BrandId);
            if (model != null)
            {
                _brandRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.BrandName);


                return RedirectToAction("BrandList");
            }
            return RedirectToAction("BrandList");
        }
        #endregion

        #region EmailSetting
        public IActionResult EmailSettingList()
        {
            return View(_emailSettingRepository.All());
        }

        [HttpGet]
        public ActionResult AddEmailSetting()
        {
            ViewBag.ActionType = "Create";
            ViewBag.EmailSettingGroupHead = _emailSettingRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddEmailSetting(EmailSettingModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _emailSettingRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Sender.ToString());

                }
                else
                {
                    _emailSettingRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Sender.ToString());

                }
                return RedirectToAction("EmailSettingList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditEmailSetting(int EmailSettingId)
        {
            ViewBag.ActionType = "Edit";
            var EmailSetting = _emailSettingRepository.Find(EmailSettingId);
            ViewBag.EmailSettingGroupHead = _emailSettingRepository.GetAllForDropDown();
            return View("AddEmailSetting", EmailSetting);
        }

        public ActionResult DeleteEmailSetting(int EmailSettingId)
        {
            var model = _emailSettingRepository.Find(EmailSettingId);
            if (model != null)
            {
                _emailSettingRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Sender);


                return RedirectToAction("EmailSettingList");
            }
            return RedirectToAction("EmailSettingList");
        }
        #endregion

        #region Terms
        public IActionResult TermsList()
        {
            return View(_termsMainRepository.All());
        }

        [HttpGet]
        public ActionResult AddTerms()
        {
            ViewBag.ActionType = "Create";
            ViewBag.TermsGroupHead = _termsMainRepository.GetAllForDropDown();
            return View();
        }

        [AllowAnonymous]
        public List<SelectListItem> GetTerms()
        {
            //var terms = _termRepository.GetAllForDropDown();
            //return Json(terms);

            var x = _termRepository.GetAllForDropDown().ToList();
            return x;
        }
        [AllowAnonymous]
        public List<PaymentTermsModel> GetTermsWithAttr()
        {
            var x = _termRepository.GetAllTerms().ToList();
            return x;
        }
        [AllowAnonymous]
        public List<SelectListItem> GetFiscalYear()
        {
            var x = _accFiscalYearRepository.GetAllForDropDown().ToList();
            return x;
        }
        [AllowAnonymous]
        public List<SelectListItem> GetBudgetName()
        {
            var x = _budgetMainRepository.GetAllForDropDown().ToList();
            return x;
        }
        [AllowAnonymous]
        public List<SelectListItem> GetIndustry()
        {
            //var terms = _termRepository.GetAllForDropDown();
            //return Json(terms);

            var x = _businessTypeRepository.GetAllForDropDown().ToList();
            return x;
        }
        [AllowAnonymous]
        public List<SelectListItem> GetTaxForm()
        {
            //var terms = _termRepository.GetAllForDropDown();
            //return Json(terms);

            var x = _taxFormRepository.GetAllForDropDown().ToList();
            return x;
        }
        [AllowAnonymous]
        public JsonResult GetAllTradeTerms()
        {
            var terms = _termRepository.GetAllForDropDown().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetExpenseHeadList()
        {
            var terms = _accountHeadRepository.GetExpenseHeadForDropDown().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetPurchaseList()
        {
            var terms = _purchaseRepository.AllData();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetTransactiList()
        {
            var transaction = _transactionRepository.AllData();
            return Json(transaction);
        }
        [AllowAnonymous]
        public JsonResult GetDoctypeList()
        {
            var doctypes = _docTypeRepository.GetAllDoctype().ToList().Where(x => x.DocFor == "Sales");
            return Json(doctypes);
        }
        [AllowAnonymous]
        public JsonResult GetDoctypeListt()
        {
            var doctypes = _docTypeRepository.GetSalesDocForDropDown();
            return Json(doctypes);
        }
        [AllowAnonymous]
        public JsonResult GetDoctypeListFoExpense()
        {
            var doctypes = _docTypeRepository.GetAllDoctype().ToList().Where(x => x.DocFor == "Purchase" && x.DocType != "Opening Stock" && x.DocType != "Stock Adjustment");
            return Json(doctypes);
        }
        [AllowAnonymous]
        public JsonResult GetDoctypeListForCustomFormStyle()
        {
            var doctypes = _docTypeRepository.GetSalesDocForDropDown().ToList();  //.Where(x => x.DocFor == "Sales");
            return Json(doctypes);
        }
        [AllowAnonymous]
        public JsonResult GetAllDoctypeListForCustomFormStyle()
        {
            var doctypes = _docTypeRepository.GetAllDoctypeList().ToList();
            return Json(doctypes);
        }
        [AllowAnonymous]
        public JsonResult GetDoctypeListForFilter()
        {
            var doctypes = _docTypeRepository.GetAllDoctype().ToList().Where(x => x.DocFor == "Purchase" || x.DocFor == "Purchase report");
            return Json(doctypes);
        }
        [AllowAnonymous]
        public JsonResult GetStatusList()
        {
            try
            {

                var docstatus = _statusRepository.GetAllDocStatusForExpenses().ToList(); //.Where(x=>x.DocTypeId== 24);
                return Json(docstatus);
            }
            catch (Exception ex)
            {

                throw ex;
            }


        }
        [AllowAnonymous]
        public JsonResult GetCustomer()
        {
            var terms = _customerRepository.GetAllCustomer().ToList();
            return Json(terms);
        }

        [AllowAnonymous]
        public JsonResult GetPurchase()
        {
            var perchase = _purchaseRepository.GetAllPurchase().ToList();
            return Json(perchase);
        }

        //===========actions for dynamic reporting dropdowns starts===========
        [AllowAnonymous]
        public JsonResult GetTemplates()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForTemplate().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetColors()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForColor().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetLogoSizes()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForLogoSize().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetFontSizes()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForFontSize().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetLogoPlacements()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForLogoPlacement().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetFontFamilies()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForFontFamily().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetPageMargins()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForPageMargins().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetGreetingAppeals()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForGreetingAppeal().ToList();
            return Json(terms);
        }
        [AllowAnonymous]
        public JsonResult GetGreetingNames()
        {
            var terms = _reportStyleVariableRepository.GetAllVariableForGreetingName().ToList();
            return Json(terms);
        }
        //============actions for dynamic reporting dropdowns ends============





        [HttpPost]
        [AllowAnonymous]
        //[ValidateAntiForgeryToken]
        public IActionResult AddTerms(TermsMainModel model)
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
                    .Select(x => new { x.Key, x.Value.Errors });

                if (true)
                {

                    if (model.Id == 0)
                    {
                        bool isTermNameExists = _termMainRepository.GetAllTerms().Any(t => t.TermsName == model.TermsName);

                        if (isTermNameExists)
                        {
                            TempData["Message"] = "Name already exists.";
                            TempData["Status"] = "0";
                            return Json(new { success = "2", message = "Name already exists." });
                        }
                        else
                        {
                            _termMainRepository.Insert(model);

                            TempData["Message"] = "Data Save Successfully";
                            TempData["Status"] = "1";
                            tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.TermsName.ToString());
                            return Json(new { success = "1", message = "Data Save Successfully" });
                        }
                    }
                    else
                    {

                        bool isTermNameExists = _termMainRepository.GetAllTerms().Any(t => t.TermsName == model.TermsName);

                        if (isTermNameExists)
                        {
                            TempData["Message"] = "Name already exists.";
                            TempData["Status"] = "0";
                            return Json(new { success = "2", message = "Name already exists." });
                        }
                        else
                        {
                            _termMainRepository.Update(model, model.Id);

                            TempData["Message"] = "Data Update Successfully";
                            TempData["Status"] = "2";
                            tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.TermsName.ToString());
                            return Json(new { success = "1", message = "Data Update Successfully" });
                        }
                    }
                }
                else
                {
                    if (model.Id == 0)
                    {
                        ViewBag.ActionType = "Create";
                    }
                    else
                    {
                        ViewBag.ActionType = "Edit";
                    }
                    return Json(new { error = true, message = "Failed to Save the Data" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { error = true, message = ex.Message });
            }
        }


        [HttpGet]
        public ActionResult EditTerms(int TermsId)
        {
            ViewBag.ActionType = "Edit";
            var Terms = _termsMainRepository.All().Include(x => x.TermsSubs).Where(x => x.Id == TermsId).FirstOrDefault();
            //ViewBag.TermsGroupHead = _termsMainRepository.GetAllForDropDown();
            return View("AddTerms", Terms);
        }

        public ActionResult DeleteTerms(int TermsId)
        {
            var model = _termsMainRepository.Find(TermsId);
            if (model != null)
            {
                _termsMainRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.TermsName);


                return RedirectToAction("TermsList");
            }
            return RedirectToAction("TermsList");
        }



        public JsonResult TermsInfo(int id)
        {
            try
            {

                var termsinfo = _termsSubRepository.All().Include(x => x.TermsMain)
                    .Where(y => y.TermsId == id)
                    .Select(g => new
                    {
                        g.TermsMain,
                        g.Terms,
                        g.TermsDescription
                    });

                return Json(termsinfo);

            }
            catch (Exception ex)
            {
                return Json(new { success = false, values = ex.Message.ToString() });
            }
        }


        #endregion

        #region Department
        public IActionResult DepartmentList()
        {
            return View(_departmentRepository.All());
        }

        [AllowAnonymous]
        public IActionResult GetDepartmentList(string searchquery = "", int page = 1, decimal size = 5)
        {
            var departmentList = _departmentRepository.All();

            if (searchquery?.Length > 1)
            {
                departmentList = departmentList.Where(x =>
                    x.DeptName.ToLower().Contains(searchquery.ToLower())
                );

            }


            decimal TotalRecordCount = departmentList.Count();
            var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
            var PageCount = Math.Ceiling(PageCountabc);
            decimal skip = (page - 1) * size;


            var abcd = departmentList.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();// Take(50);
            var pageinfo = new PagingInfo();
            pageinfo.PageCount = int.Parse(PageCount.ToString());
            pageinfo.PageNo = page;
            pageinfo.PageSize = int.Parse(size.ToString());
            pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

            //return  abcd;
            return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });


            //return Json(new {data = departmentList});
        }

        [HttpGet]
        public ActionResult AddDepartment()
        {
            ViewBag.ActionType = "Create";
            ViewBag.DepartmentGroupHead = _departmentRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddDepartment(Cat_DepartmentModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _departmentRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.DeptName.ToString());

                }
                else
                {
                    _departmentRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.DeptName.ToString());

                }
                return RedirectToAction("DepartmentList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditDepartment(int DepartmentId)
        {
            ViewBag.ActionType = "Edit";
            var Department = _departmentRepository.Find(DepartmentId);
            ViewBag.DepartmentGroupHead = _departmentRepository.GetAllForDropDown();
            return View("AddDepartment", Department);
        }

        public ActionResult DeleteDepartment(int DepartmentId)
        {
            var model = _departmentRepository.Find(DepartmentId);
            if (model != null)
            {
                _departmentRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.DeptName);


                return Json(new { success = "1", msg = "Deleted Successfully" });
            }
            return Json(new { success = "0", msg = "No items found to delete." });
        }
        #endregion

        #region Section
        public IActionResult SectionList()
        {
            return View(_sectionRepository.All());
        }

        [HttpGet]
        public ActionResult AddSection()
        {
            ViewBag.ActionType = "Create";
            ViewBag.DeptId = _departmentRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddSection(Cat_SectionModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _sectionRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.SectName.ToString());

                }
                else
                {
                    _sectionRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.SectName.ToString());

                }
                return RedirectToAction("SectionList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [AllowAnonymous]
        public IActionResult GetSectionList(string searchquery = "", int page = 1, decimal size = 5)
        {
            var sectionList = _sectionRepository.All();
            if (searchquery?.Length > 1)
            {
                sectionList = sectionList.Where(x =>
                    x.SectName.ToLower().Contains(searchquery.ToLower())
                );

            }
            decimal TotalRecordCount = sectionList.Count();
            var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
            var PageCount = Math.Ceiling(PageCountabc);
            decimal skip = (page - 1) * size;


            var abcd = sectionList.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();// Take(50);
            var pageinfo = new PagingInfo();
            pageinfo.PageCount = int.Parse(PageCount.ToString());
            pageinfo.PageNo = page;
            pageinfo.PageSize = int.Parse(size.ToString());
            pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

            //return  abcd;
            return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });


            //return Json(new {data = sectionList});
        }

        [HttpGet]
        public ActionResult EditSection(int SectionId)
        {
            ViewBag.ActionType = "Edit";
            var Section = _sectionRepository.Find(SectionId);
            ViewBag.SectionGroupHead = _sectionRepository.GetAllForDropDown();
            ViewBag.DeptId = _departmentRepository.GetAllForDropDown();
            return View("AddSection", Section);
        }

        public ActionResult DeleteSection(int SectionId)
        {
            var model = _sectionRepository.Find(SectionId);
            if (model != null)
            {
                _sectionRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.SectName);


                return Json(new { success = "1", msg = "Deleted Successfully" });
            }
            return Json(new { success = "0", msg = "No items found to delete." });
        }
        #endregion

        #region Designation
        public IActionResult DesignationList()
        {
            return View(_designationRepository.All());
        }

        [HttpGet]
        public ActionResult AddDesignation()
        {
            ViewBag.ActionType = "Create";
            ViewBag.DesignationGroupHead = _designationRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddDesignation(Cat_DesignationModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _designationRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.DesigName.ToString());

                }
                else
                {
                    _designationRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.DesigName.ToString());

                }
                return RedirectToAction("DesignationList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }




        [AllowAnonymous]
        public IActionResult GetDesignationtList(string searchquery = "", int page = 1, decimal size = 5)
        {
            var DesignationList = _designationRepository.All();

            if (searchquery?.Length > 1)
            {
                DesignationList = DesignationList.Where(x =>
                    x.DesigName.ToLower().Contains(searchquery.ToLower())
                );

            }

            decimal TotalRecordCount = DesignationList.Count();
            var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
            var PageCount = Math.Ceiling(PageCountabc);
            decimal skip = (page - 1) * size;


            var abcd = DesignationList.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();// Take(50);
            var pageinfo = new PagingInfo();
            pageinfo.PageCount = int.Parse(PageCount.ToString());
            pageinfo.PageNo = page;
            pageinfo.PageSize = int.Parse(size.ToString());
            pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());
            return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });
        }

        [HttpGet]
        public ActionResult EditDesignation(int DesignationId)
        {
            ViewBag.ActionType = "Edit";
            var Designation = _designationRepository.Find(DesignationId);
            ViewBag.DesignationGroupHead = _designationRepository.GetAllForDropDown();
            return View("AddDesignation", Designation);
        }

        public ActionResult DeleteDesignation(int DesignationId)
        {
            var model = _designationRepository.Find(DesignationId);
            if (model != null)
            {
                _designationRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.DesigName);


                return Json(new { success = "1", msg = "Deleted Successfully" });
            }
            return Json(new { success = "0", msg = "No items found to delete." });
        }
        #endregion

        #region TaskToDo
        public IActionResult TaskToDoList()
        {
            var UserId = HttpContext.Session.GetInt32("UserId");
            return View(_TaskToDoRepository.All().Where(x => x.LuserId == UserId));
        }

        [HttpGet]
        public ActionResult AddTaskToDo()
        {
            ViewBag.ActionType = "Create";
            ViewBag.Color = _ColorRepository.GetAllForDropDown();
            ViewBag.TaskToDoGroupHead = _TaskToDoRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddTaskToDo(TaskToDoModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _TaskToDoRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.TaskTitle);

                }
                else
                {
                    _TaskToDoRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.TaskTitle);

                }
                return RedirectToAction("TaskToDoList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditTaskToDo(int TaskToDoId)
        {
            ViewBag.ActionType = "Edit";

            var UserId = HttpContext.Session.GetInt32("UserId");
            var TaskToDo = _TaskToDoRepository.All().Where(x => x.Id == TaskToDoId && x.LuserId == UserId).FirstOrDefault();
            ViewBag.TaskToDoGroupHead = _TaskToDoRepository.GetAllForDropDown().Where(x => x.Value != TaskToDoId.ToString());
            ViewBag.Color = _ColorRepository.GetAllForDropDown();
            return View("AddTaskToDo", TaskToDo);
        }

        public ActionResult DeleteTaskToDo(int TaskToDoId)
        {
            var model = _TaskToDoRepository.Find(TaskToDoId);
            if (model != null)
            {
                _TaskToDoRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.TaskTitle);


                return RedirectToAction("TaskToDoList");
            }
            return RedirectToAction("TaskToDoList");
        }
        #endregion

        #region SoftwarePackage
        public IActionResult SoftwarePackageList()
        {
            return View(_SoftwarePackageRepository.All().Include(x => x.BusinessType).Include(x => x.DurationType).Include(x => x.Country));
        }

        [HttpGet]
        public ActionResult AddSoftwarePackage()
        {
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
            ViewBag.Duration = _durationTimeRepository.GetAllForDropDown();
            ViewBag.Country = _countryRepository.GetCurrencyList();




            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddSoftwarePackage(SoftwarePackageModel model)
        {
            var errors = ModelState.Where(x => x.Value.Errors.Any())
            .Select(x => new { x.Key, x.Value.Errors });

            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _SoftwarePackageRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Name.ToString());

                }
                else
                {
                    _SoftwarePackageRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());

                }
                return RedirectToAction("SoftwarePackageList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditSoftwarePackage(int SoftwarePackageId)
        {
            ViewBag.ActionType = "Edit";
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
            ViewBag.Duration = _durationTimeRepository.GetAllForDropDown();
            ViewBag.Country = _countryRepository.GetCurrencyList();

            var SoftwarePackage = _SoftwarePackageRepository.Find(SoftwarePackageId);
            return View("AddSoftwarePackage", SoftwarePackage);
        }

        public ActionResult DeleteSoftwarePackage(int SoftwarePackageId)
        {
            var model = _SoftwarePackageRepository.Find(SoftwarePackageId);
            if (model != null)
            {
                _SoftwarePackageRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Name);


                return RedirectToAction("SoftwarePackageList");
            }
            return RedirectToAction("SoftwarePackageList");
        }
        #endregion

        #region Warrenty
        public IActionResult WarrentyList()
        {
            return View(_warrentyRepository.All().Include(x => x.DurationTime));
        }

        [HttpGet]
        public ActionResult AddWarrenty()
        {
            ViewBag.ActionType = "Create";
            ViewBag.DurationTime = _durationTimeRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddWarrenty(WarrentyModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _warrentyRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Name.ToString());

                }
                else
                {
                    _warrentyRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Name.ToString());

                }
                return RedirectToAction("WarrentyList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
                ViewBag.DurationTime = _durationTimeRepository.GetAllForDropDown();
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditWarrenty(int WarrentyId)
        {
            ViewBag.ActionType = "Edit";
            var Warrenty = _warrentyRepository.Find(WarrentyId);
            ViewBag.DurationTime = _durationTimeRepository.GetAllForDropDown();
            return View("AddWarrenty", Warrenty);
        }

        public ActionResult DeleteWarrenty(int WarrentyId)
        {
            var model = _warrentyRepository.Find(WarrentyId);
            if (model != null)
            {
                _warrentyRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Name);


                return RedirectToAction("WarrentyList");
            }
            return RedirectToAction("WarrentyList");
        }
        #endregion

        #region DurationTime
        public IActionResult DurationTimeList()
        {
            return View(_durationTimeRepository.All());
        }

        [HttpGet]
        public ActionResult AddDurationTime()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddDurationTime(DurationTimeModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _durationTimeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.DurationName.ToString());

                }
                else
                {
                    _durationTimeRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.DurationName.ToString());

                }
                return RedirectToAction("DurationTimeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditDurationTime(int DurationTimeId)
        {
            ViewBag.ActionType = "Edit";
            var DurationTime = _durationTimeRepository.Find(DurationTimeId);
            return View("AddDurationTime", DurationTime);
        }

        public ActionResult DeleteDurationTime(int DurationTimeId)
        {
            var model = _durationTimeRepository.Find(DurationTimeId);
            if (model != null)
            {
                _durationTimeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.DurationName);


                return RedirectToAction("DurationTimeList");
            }
            return RedirectToAction("DurationTimeList");
        }
        #endregion

        #region TradeTerms
        public IActionResult TradeTermsList()
        {
            return View(_tradeTermsRepository.All());
        }

        [HttpGet]
        public ActionResult AddTradeTerms()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddTradeTerms(TradeTermsModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _tradeTermsRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.TradeTermCaption.ToString());

                }
                else
                {
                    _tradeTermsRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.TradeTermCaption.ToString());

                }
                return RedirectToAction("TradeTermsList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditTradeTerms(int TradeTermsId)
        {
            ViewBag.ActionType = "Edit";
            var TradeTerms = _tradeTermsRepository.Find(TradeTermsId);
            return View("AddTradeTerms", TradeTerms);
        }

        public ActionResult DeleteTradeTerms(int TradeTermsId)
        {
            var model = _tradeTermsRepository.Find(TradeTermsId);
            if (model != null)
            {
                _tradeTermsRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.TradeTermCaption);


                return RedirectToAction("TradeTermsList");
            }
            return RedirectToAction("TradeTermsList");
        }
        #endregion

        #region Color
        public IActionResult ColorList()
        {
            return View(_ColorRepository.All());
        }

        [HttpGet]
        public ActionResult AddColor()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddColor(ColorsModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _ColorRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.ColorName);

                }
                else
                {
                    _ColorRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.ColorName);

                }
                return RedirectToAction("ColorList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditColor(int ColorId)
        {
            ViewBag.ActionType = "Edit";
            var Color = _ColorRepository.Find(ColorId);
            return View("AddColor", Color);
        }

        public ActionResult DeleteColor(int ColorId)
        {
            var model = _ColorRepository.Find(ColorId);
            if (model != null)
            {
                _ColorRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.ColorName);


                return RedirectToAction("ColorList");
            }
            return RedirectToAction("ColorList");
        }
        #endregion

        #region Size
        public IActionResult SizeList()
        {
            return View(_SizeRepository.All());
        }

        [HttpGet]
        public ActionResult AddSize()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddSize(SizesModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _SizeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.SizeName);

                }
                else
                {
                    _SizeRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.SizeName);

                }
                return RedirectToAction("SizeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditSize(int SizeId)
        {
            ViewBag.ActionType = "Edit";
            var Size = _SizeRepository.Find(SizeId);
            return View("AddSize", Size);
        }

        public ActionResult DeleteSize(int SizeId)
        {
            var model = _SizeRepository.Find(SizeId);
            if (model != null)
            {
                _SizeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.SizeName);


                return RedirectToAction("SizeList");
            }
            return RedirectToAction("SizeList");
        }
        #endregion

        #region Unit
        public IActionResult UnitList()
        {

            var x = _unitRepository.All().Include(x => x.ProductList).Select(
                x => new UnitModel
                {
                    Id = x.Id,
                    UnitName = x.UnitName,
                    UnitNameBangla = x.UnitNameBangla,
                    UnitShortName = x.UnitShortName,
                    ProductCount = x.ProductList.Count()
                }
                );

            return View(x);
        }

        [HttpGet]
        public ActionResult AddUnit()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddTerm(PaymentTermsModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _termRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.TermName.ToString());

                }
                else
                {
                    _termRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.TermName.ToString());

                }
                return RedirectToAction("AddBillbyType");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddUnit(UnitModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _unitRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.UnitName.ToString());

                }
                else
                {
                    _unitRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.UnitName.ToString());

                }
                return RedirectToAction("UnitList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        //[HttpGet]
        //public ActionResult EditUnit(int UnitId)
        //{
        //    ViewBag.ActionType = "Edit";
        //    var Unit = _unitRepository.Find(UnitId);
        //    return View("AddUnit", Unit);
        //}


        [HttpGet]
        public ActionResult EditUnit(int UnitId)
        {
            try
            {
                var unit = _unitRepository.All().FirstOrDefault(u => u.Id == UnitId);

                if (unit != null)
                {
                    ViewBag.ActionType = "Edit";
                    return PartialView("AddUnit", unit); // Return the "AddUnit" view with unit data
                }
                else
                {
                    // Handle the case when the unit with the specified ID is not found
                    return RedirectToAction("UnitList");
                }
            }
            catch (Exception ex)
            {
                return View();
                throw ex;
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditUnit(UnitModel model)
        {
            if (ModelState.IsValid)
            {
                _unitRepository.Update(model, model.Id);

                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.UnitName.ToString());

                return RedirectToAction("UnitList");
            }
            ModelState.Clear();
            ViewBag.ActionType = "Edit";
            return View("AddUnit", model); // Reuse the "AddUnit" view for editing with validation errors
        }


        public ActionResult DeleteUnit(int UnitId)
        {
            var model = _unitRepository.Find(UnitId);
            if (model != null)
            {
                _unitRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.UnitName);


                return RedirectToAction("UnitList");
            }
            return RedirectToAction("UnitList");
        }
        #endregion

        #region Offer
        public IActionResult OfferList()
        {

            var x = _offerRepository.All().Select(
                x => new OfferModel
                {
                    Id = x.Id,
                    OfferName = x.OfferName,
                    OfferType = x.OfferType,
                    OfferRangeStart = x.OfferRangeStart,
                    OfferRangeEnd = x.OfferRangeEnd,
                    OfferFigure = x.OfferFigure
                }
                );

            return View(x);
        }

        [HttpGet]
        public ActionResult AddOffer()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddOffer(OfferModel model)
        {
            try
            {


                if (ModelState.IsValid)
                {
                    if (model.Id == 0)
                    {
                        _offerRepository.Insert(model);


                        TempData["Message"] = "Data Save Successfully";
                        TempData["Status"] = "1";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.OfferName.ToString());

                    }
                    else
                    {
                        _offerRepository.Update(model, model.Id);


                        TempData["Message"] = "Data Update Successfully";
                        TempData["Status"] = "2";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.OfferName.ToString());

                    }
                    return RedirectToAction("OfferList");
                }
                else
                {
                    if (model.Id == 0)
                    {
                        ViewBag.ActionType = "Create";
                    }
                    else
                    {
                        ViewBag.ActionType = "Edit";
                    }
                }
                return View(model);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpGet]
        public ActionResult EditOffer(int OfferId)
        {
            ViewBag.ActionType = "Edit";
            var Offer = _offerRepository.Find(OfferId);
            return View("AddOffer", Offer);
        }

        public ActionResult DeleteOffer(int OfferId)
        {
            var model = _offerRepository.Find(OfferId);
            if (model != null)
            {
                _offerRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.OfferName);


                return RedirectToAction("OfferList");
            }
            return RedirectToAction("OfferList");
        }
        #endregion

        #region ShippingCharge
        public IActionResult ShippingChargeList()
        {

            var x = _shippingChargeRepository.All().Select(
                x => new ShippingChargeModel
                {
                    Id = x.Id,
                    ShippingLocationName = x.ShippingLocationName,
                    ChargeAmount = x.ChargeAmount
                }
                );

            return View(x);
        }

        [HttpGet]
        public ActionResult AddShippingCharge()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddShippingCharge(ShippingChargeModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _shippingChargeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.ShippingLocationName.ToString());

                }
                else
                {
                    _shippingChargeRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.ShippingLocationName.ToString());

                }
                return RedirectToAction("ShippingChargeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditShippingCharge(int ShippingChargeId)
        {
            ViewBag.ActionType = "Edit";
            var ShippingCharge = _shippingChargeRepository.Find(ShippingChargeId);
            return View("AddShippingCharge", ShippingCharge);
        }

        public ActionResult DeleteShippingCharge(int ShippingChargeId)
        {
            var model = _shippingChargeRepository.Find(ShippingChargeId);
            if (model != null)
            {
                _shippingChargeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.ShippingLocationName);


                return RedirectToAction("ShippingChargeList");
            }
            return RedirectToAction("ShippingChargeList");
        }
        #endregion


        #region LinkShare





        public IActionResult LinkShareList()
        {

            var x = _linkShareRepository.All().Select(
                x => new LinkShareModel
                {
                    Id = x.Id,
                    SecretKey = x.SecretKey
                }
                );

            return View(x);
        }

        [HttpGet]
        public ActionResult AddLinkShare()
        {
            ViewBag.ActionType = "Create";
            var abc = new LinkShareModel();
            abc.SecretKey = Guid.NewGuid(); ;

            return View(abc);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddLinkShare(LinkShareModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _linkShareRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.SecretKey.ToString());

                }
                else
                {
                    _linkShareRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.SecretKey.ToString());

                }
                return RedirectToAction("LinkShareList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditLinkShare(int LinkShareId)
        {
            ViewBag.ActionType = "Edit";
            var LinkShare = _linkShareRepository.Find(LinkShareId);
            return View("AddLinkShare", LinkShare);
        }

        public ActionResult DeleteLinkShare(int LinkShareId)
        {
            var model = _linkShareRepository.Find(LinkShareId);
            if (model != null)
            {
                _linkShareRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.SecretKey.ToString());


                return RedirectToAction("LinkShareList");
            }
            return RedirectToAction("LinkShareList");
        }
        #endregion

        #region InternetPackage
        public IActionResult InternetPackageList()
        {
            return View(_internetPackageRepository.All());
        }

        [HttpGet]
        public ActionResult AddInternetPackage()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddInternetPackage(InternetPackageModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _internetPackageRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.PackageName.ToString());

                }
                else
                {
                    _internetPackageRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.PackageName.ToString());

                }
                return RedirectToAction("InternetPackageList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditInternetPackage(int InternetPackageId)
        {
            ViewBag.ActionType = "Edit";
            var InternetPackage = _internetPackageRepository.Find(InternetPackageId);
            return View("AddInternetPackage", InternetPackage);
        }

        public ActionResult DeleteInternetPackage(int InternetPackageId)
        {
            var model = _internetPackageRepository.Find(InternetPackageId);
            if (model != null)
            {
                _internetPackageRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.PackageName);


                return RedirectToAction("InternetPackageList");
            }
            return RedirectToAction("InternetPackageList");
        }
        #endregion

        #region UserRole
        public IActionResult UserRoleList()
        {
            return View(_userRoleRepository.All().Include(x => x.BusinessType));
        }

        [HttpGet]
        public ActionResult AddUserRole()
        {
            ViewBag.ActionType = "Create";
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddUserRole(UserRoleModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _userRoleRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.RoleName.ToString());

                }
                else
                {
                    _userRoleRepository.Update(model, model.Id);

                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.RoleName.ToString());

                }
                return RedirectToAction("UserRoleList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditUserRole(int UserRoleId)
        {
            ViewBag.ActionType = "Edit";
            //ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();

            var ComId = HttpContext.Session.GetInt32("ComId");
            var BusinessTypeId = _storeSettingRepository.All().Where(x => x.Id == ComId).FirstOrDefault().BusinessTypeId;

            ViewBag.Role = _userRoleRepository.GetAllForDropDownWithCondition(BusinessTypeId, ComId);
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();

            var UserRole = _userRoleRepository.Find(UserRoleId);
            return View("AddUserRole", UserRole);
        }

        public ActionResult DeleteUserRole(int UserRoleId)
        {
            var model = _userRoleRepository.Find(UserRoleId);
            if (model != null)
            {
                _userRoleRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.RoleName);


                return RedirectToAction("UserRoleList");
            }
            return RedirectToAction("UserRoleList");
        }
        #endregion

        #region Menu
        public IActionResult MenuList()
        {
            return View(_menuRepository.All());
        }

        [HttpGet]
        public ActionResult AddMenu()
        {
            ViewBag.ActionType = "Create";
            ViewBag.ParentMenu = _menuRepository.GetParentMenuForDropDown();

            MenuModel abc = _menuRepository.All().OrderByDescending(x => x.Id).FirstOrDefault();
            abc.Id = 0;
            return View(abc);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddMenu(MenuModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    if (model.AllActionName == null)
                    {
                        model.AllActionName = "";


                    }

                    _menuRepository.Insert(model);




                    //var menupermissiondata = _menuPermissionRepository.All().Where(x => x.BusinessTypeId == 0);

                    MenuPermissionModel menupermissiondata = new MenuPermissionModel();
                    menupermissiondata.BusinessTypeId = 0;
                    menupermissiondata.MenuId = model.Id;

                    _menuPermissionRepository.Insert(menupermissiondata);

                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.MenuName.ToString());

                }
                else
                {

                    if (model.AllActionName == null)
                    {
                        model.AllActionName = "";


                    }
                    _menuRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.MenuName.ToString());

                }
                return RedirectToAction("MenuList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditMenu(int MenuId)
        {
            ViewBag.ActionType = "Edit";
            var Menu = _menuRepository.Find(MenuId);
            ViewBag.ParentMenu = _menuRepository.GetParentMenuForDropDown();
            return View("AddMenu", Menu);
        }

        [HttpGet]
        public ActionResult CopyMenu(int MenuId)
        {
            ViewBag.ActionType = "Create";
            var Menu = _menuRepository.Find(MenuId);
            ViewBag.ParentMenu = _menuRepository.GetParentMenuForDropDown();
            Menu.Id = 0;
            return View("AddMenu", Menu);
        }

        public ActionResult DeleteMenu(int MenuId)
        {
            var model = _menuRepository.Find(MenuId);
            if (model != null)
            {
                _menuRepository.Delete(model);



                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.MenuName);


                return RedirectToAction("MenuList");
            }
            return RedirectToAction("MenuList");
        }
        #endregion

        #region AndroidMenu
        public IActionResult AndroidMenuList()
        {
            return View(_androidMenuRepository.All());
        }

        [HttpGet]
        public ActionResult AddAndroidMenu()
        {
            ViewBag.ActionType = "Create";
            //ViewBag.ParentMenu = _androidMenuRepository.GetAndroidMenuForDropDown();

            AndroidMenuModel abc = _androidMenuRepository.All().OrderByDescending(x => x.Id).FirstOrDefault();
            if (abc != null)
            {
                abc.Id = 0;
                return View(abc);
            }
            else
            {
                AndroidMenuModel abcd = new AndroidMenuModel();
                return View(abcd);
            }

        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddAndroidMenu(AndroidMenuModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _androidMenuRepository.Insert(model);




                    //var menupermissiondata = _menuPermissionRepository.All().Where(x => x.BusinessTypeId == 0);

                    //AndroidMenuPermissionModel menupermissiondata = new AndroidMenuPermissionModel();
                    //menupermissiondata.BusinessTypeId = 0;
                    //menupermissiondata.AndroidMenuId = model.Id;

                    //_androidMenuPermissionRepository.Insert(menupermissiondata);

                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.MenuName.ToString());

                }
                else
                {
                    _androidMenuRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.MenuName.ToString());

                }
                return RedirectToAction("AndroidMenuList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditAndroidMenu(int AndroidMenuId)
        {
            ViewBag.ActionType = "Edit";
            var AndroidMenu = _androidMenuRepository.Find(AndroidMenuId);
            //ViewBag.ParentMenu = _androidMenuRepository.GetAndroidMenuForDropDown();
            return View("AddAndroidMenu", AndroidMenu);
        }

        [HttpGet]
        public ActionResult CopyAndroidMenu(int AndroidMenuId)
        {
            ViewBag.ActionType = "Create";
            var AndroidMenu = _androidMenuRepository.Find(AndroidMenuId);
            //ViewBag.ParentMenu = _androidMenuRepository.GetAndroidMenuForDropDown();
            AndroidMenu.Id = 0;
            return View("AddAndroidMenu", AndroidMenu);
        }

        public ActionResult DeleteAndroidMenu(int AndroidMenuId)
        {
            var model = _androidMenuRepository.Find(AndroidMenuId);
            if (model != null)
            {
                _androidMenuRepository.Delete(model);



                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.MenuName);


                return RedirectToAction("AndroidMenuList");
            }
            return RedirectToAction("AndroidMenuList");
        }
        #endregion

        #region SubscriptionType
        public IActionResult SubscriptionTypeList()
        {
            return View(_subscriptionTypeRepository.All().Include(x => x.BusinessType));
        }

        [HttpGet]
        public ActionResult AddSubscriptionType()
        {
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddSubscriptionType(SubscriptionTypeModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _subscriptionTypeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.SubscriptionName.ToString());

                }
                else
                {
                    _subscriptionTypeRepository.Update(model, model.Id);

                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.SubscriptionName.ToString());


                }
                return RedirectToAction("SubscriptionTypeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditSubscriptionType(int SubscriptionTypeId)
        {
            ViewBag.ActionType = "Edit";
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
            var SubscriptionType = _subscriptionTypeRepository.Find(SubscriptionTypeId);
            return View("AddSubscriptionType", SubscriptionType);
        }
        [HttpGet]
        public ActionResult CopySubscriptionType(int SubscriptionTypeId)
        {
            ViewBag.ActionType = "Create";
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
            var SubscriptionType = _subscriptionTypeRepository.Find(SubscriptionTypeId);
            SubscriptionType.Id = 0;
            return View("AddSubscriptionType", SubscriptionType);
        }

        public ActionResult DeleteSubscriptionType(int SubscriptionTypeId)
        {
            var model = _subscriptionTypeRepository.Find(SubscriptionTypeId);
            if (model != null)
            {
                _subscriptionTypeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.SubscriptionName);


                return RedirectToAction("SubscriptionTypeList");
            }
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDown();
            return RedirectToAction("SubscriptionTypeList");
        }
        #endregion

        #region BusinessType
        public IActionResult BusinessTypeList()
        {
            return View(_businessTypeRepository.All());
        }

        [HttpGet]
        public ActionResult AddBusinessType()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpGet]
        public ActionResult AddAccountsReport()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        public IActionResult AccountsReportList()
        {
            return View(_accountsReportRepository.All());
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddBusinessType(BusinessTypeModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _businessTypeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.BusinessTypeName.ToString());

                }
                else
                {
                    _businessTypeRepository.Update(model, model.Id);

                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.BusinessTypeName.ToString());


                }
                return RedirectToAction("BusinessTypeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddAccountsReport(AccountsReportModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _accountsReportRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.Tab.ToString());

                }
                else
                {
                    _accountsReportRepository.Update(model, model.Id);

                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.Tab.ToString());


                }
                return RedirectToAction("AccountsReportList");
                //return RedirectToAction("AddAccountsReport");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditAccountsReport(int AccountsReportId)
        {
            ViewBag.ActionType = "Edit";
            var BusinessType = _accountsReportRepository.Find(AccountsReportId);
            return View("AddAccountsReport", BusinessType);
        }


        [HttpGet]
        public ActionResult EditBusinessType(int BusinessTypeId)
        {
            ViewBag.ActionType = "Edit";
            var BusinessType = _businessTypeRepository.Find(BusinessTypeId);
            return View("AddBusinessType", BusinessType);
        }

        public ActionResult DeleteBusinessType(int BusinessTypeId)
        {
            var model = _businessTypeRepository.Find(BusinessTypeId);
            if (model != null)
            {
                _businessTypeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.BusinessTypeName);


                return RedirectToAction("BusinessTypeList");
            }
            return RedirectToAction("BusinessTypeList");
        }

        public ActionResult DeleteAccountsReport(int AccountsReportId)
        {
            var model = _accountsReportRepository.Find(AccountsReportId);
            if (model != null)
            {
                _accountsReportRepository.Delete(model);


                TempData["Message"] = "Data Deleted Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Tab);


                return RedirectToAction("AccountsReportList");
                //return RedirectToAction("AddAccountsReport");
            }
            return RedirectToAction("AccountsReportList");
            //return RedirectToAction("AddAccountsReport");
        }

        #endregion

        #region AccountCategory
        public IActionResult AccountCategoryList()
        {
            return View(_accountCategoryRepository.All().Include(x => x.ParentCategory));
        }

        [HttpGet]
        public ActionResult AddAccountCategory()
        {
            ViewBag.ActionType = "Create";
            ViewBag.ParentAccountCategoryId = _accountCategoryRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddAccountCategory(AccountCategoryModel model)
        {
            try
            {
                var errors = ModelState.Where(x => x.Value.Errors.Any())
              .Select(x => new { x.Key, x.Value.Errors });

                if (ModelState.IsValid)
                {
                    if (model.Id == 0)
                    {
                        _accountCategoryRepository.Insert(model);


                        TempData["Message"] = "Data Save Successfully";
                        TempData["Status"] = "1";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.AccountCategoryName.ToString());

                    }
                    else
                    {
                        _accountCategoryRepository.Update(model, model.Id);

                        TempData["Message"] = "Data Update Successfully";
                        TempData["Status"] = "2";
                        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.AccountCategoryName.ToString());


                    }
                    return RedirectToAction("AccountCategoryList");
                }
                else
                {
                    if (model.Id == 0)
                    {
                        ViewBag.ActionType = "Create";
                        ViewBag.ParentAccountCategoryId = _accountCategoryRepository.GetAllForDropDown();
                    }
                    else
                    {
                        ViewBag.ActionType = "Edit";
                        ViewBag.ParentAccountCategoryId = _accountCategoryRepository.GetAllForDropDown();
                    }
                }
                return View(model);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [HttpGet]
        public ActionResult EditAccountCategory(int AccountCategoryId)
        {
            ViewBag.ActionType = "Edit";
            var AccountCategory = _accountCategoryRepository.Find(AccountCategoryId);
            ViewBag.ParentAccountCategoryId = _accountCategoryRepository.GetAllForDropDown();
            return View("AddAccountCategory", AccountCategory);
        }

        public ActionResult DeleteAccountCategory(int AccountCategoryId)
        {
            var model = _accountCategoryRepository.Find(AccountCategoryId);
            if (model != null)
            {
                _accountCategoryRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AccountCategoryName);


                return RedirectToAction("AccountCategoryList");
            }
            return RedirectToAction("AccountCategoryList");
        }
        #endregion

        #region ReportStyle
        public IActionResult ReportStyleList()
        {
            return View(_ReportStyleRepository.All());
        }

        [HttpGet]
        public ActionResult AddReportStyle()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddReportStyle(ReportStyleModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _ReportStyleRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.ReportStyleName.ToString());

                }
                else
                {
                    _ReportStyleRepository.Update(model, model.Id);

                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.ReportStyleName.ToString());


                }
                return RedirectToAction("ReportTypeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditReportStyle(int ReportTypeId)
        {
            ViewBag.ActionType = "Edit";
            var ReportType = _ReportStyleRepository.Find(ReportTypeId);
            return View("AddReportType", ReportType);
        }

        public ActionResult DeleteReportStyle(int ReportTypeId)
        {
            var model = _ReportStyleRepository.Find(ReportTypeId);
            if (model != null)
            {
                _ReportStyleRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.ReportStyleName);


                return RedirectToAction("ReportTypeList");
            }
            return RedirectToAction("ReportTypeList");
        }
        #endregion

        #region Menupermission



        public IActionResult MenuPermissionList()
        {
            return View(_menuPermissionRepository.All());
        }

        [HttpGet]
        public ActionResult AddMenuPermissionOld(int? UserRoleId, int? BusinessTypeId)
        {
            ViewBag.ActionType = "Create";

            //ViewBag.Role = _userRoleRepository.GetAllForDropDown();
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();

            //if (UserRoleId == null || BusinessTypeId == null)
            //{
            //    //UserRoleId = _userRoleRepository.All().OrderBy(x => x.Id).FirstOrDefault().Id;
            //    return View();
            //}
            if (BusinessTypeId == null)
            {
                //UserRoleId = _userRoleRepository.All().OrderBy(x => x.Id).FirstOrDefault().Id;
                return View();
            }


            var menu = _menuRepository.All().Include(x => x.ParentMenu).ToList().OrderBy(x => x.DisplayOrder);
            //var menupermission = _menuPermissionRepository.All().Where(x => x.UserRoleId == UserRoleId && x.BusinessTypeId == BusinessTypeId).ToList();
            var menupermission = _menuPermissionRepository.All().Where(x => x.BusinessTypeId == BusinessTypeId).ToList();

            var userrolview = new List<UserRoleMenuView>();

            if (menupermission.Count == 0)
            {
                foreach (var item in menu)
                {
                    UserRoleMenuView xyz = new UserRoleMenuView();
                    xyz.MenuId = item.Id;
                    xyz.Permitted = false;
                    xyz.MenuGroupName = item.MenuGroupName;
                    xyz.ParentMenuName = item.ParentMenu != null ? item.ParentMenu.MenuName : " -- >>";
                    xyz.MenuName = item.MenuName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.BusinessTypeId = int.Parse(BusinessTypeId.ToString());

                    //xyz.IsCreatePermission = false;
                    //xyz.IsDeletePermission = false;
                    //xyz.IsUpdatePermission = false;

                    userrolview.Add(xyz);
                }


            }
            else
            {
                foreach (var item in menu)
                {


                    UserRoleMenuView xyz = new UserRoleMenuView();
                    xyz.MenuId = item.Id;
                    xyz.Permitted = false;
                    xyz.MenuGroupName = item.MenuGroupName;
                    xyz.ParentMenuName = item.ParentMenu != null ? item.ParentMenu.MenuName : " -- >>";
                    xyz.MenuName = item.MenuName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.BusinessTypeId = int.Parse(BusinessTypeId.ToString());

                    foreach (var itemmp in menupermission)
                    {
                        if (itemmp.MenuId == item.Id)
                        {
                            xyz.Id = itemmp.Id;
                            xyz.Permitted = true;
                            //xyz.IsCreatePermission = itemmp.IsCreatePermission;
                            //xyz.IsUpdatePermission = itemmp.IsUpdatePermission;
                            //xyz.IsDeletePermission = itemmp.IsDeletePermission;


                            break;

                        }


                    }

                    userrolview.Add(xyz);

                }




            }
            if (userrolview == null)
            {
                return View();
            }
            //var abc =  _menuRepository.All().AsNoTracking().ToListAsync();
            return View(userrolview);
        }


        [HttpGet]
        [AllowAnonymous]
        public ActionResult AddMenuPermission(int? UserRoleId, int? BusinessTypeId)
        {
            ViewBag.ActionType = "Create";

            //ViewBag.Role = _userRoleRepository.GetAllForDropDown();
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();


            if (BusinessTypeId == null)
            {
                //UserRoleId = _userRoleRepository.All().OrderBy(x => x.Id).FirstOrDefault().Id;
                return View();
            }

            return View();

        }


        [AllowAnonymous]
        public JsonResult GetMenuPermission(int? UserRoleId, int? BusinessTypeId)
        {

            var menu = _menuRepository.All().Include(x => x.ParentMenu).ToList().OrderBy(x => x.DisplayOrder);
            //var menupermission = _menuPermissionRepository.All().Where(x => x.UserRoleId == UserRoleId && x.BusinessTypeId == BusinessTypeId).ToList();
            var menupermission = _menuPermissionRepository.All().Where(x => x.BusinessTypeId == BusinessTypeId).ToList();

            var userrolview = new List<UserRoleMenuView>();

            if (menupermission.Count == 0)
            {
                foreach (var item in menu)
                {
                    UserRoleMenuView xyz = new UserRoleMenuView();
                    xyz.MenuId = item.Id;
                    xyz.Permitted = false;
                    xyz.MenuGroupName = item.MenuGroupName;
                    xyz.ParentMenuName = item.ParentMenu != null ? item.ParentMenu.MenuName : " -- >>";
                    xyz.MenuName = item.MenuName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.BusinessTypeId = int.Parse(BusinessTypeId.ToString());

                    //xyz.IsCreatePermission = false;
                    //xyz.IsDeletePermission = false;
                    //xyz.IsUpdatePermission = false;

                    userrolview.Add(xyz);
                }


            }
            else
            {
                foreach (var item in menu)
                {


                    UserRoleMenuView xyz = new UserRoleMenuView();
                    xyz.MenuId = item.Id;
                    xyz.Permitted = false;
                    xyz.MenuGroupName = item.MenuGroupName;
                    xyz.ParentMenuName = item.ParentMenu != null ? item.ParentMenu.MenuName : " -- >>";
                    xyz.MenuName = item.MenuName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.BusinessTypeId = int.Parse(BusinessTypeId.ToString());

                    foreach (var itemmp in menupermission)
                    {
                        if (itemmp.MenuId == item.Id)
                        {
                            xyz.Id = itemmp.Id;
                            xyz.Permitted = true;
                            //xyz.IsCreatePermission = itemmp.IsCreatePermission;
                            //xyz.IsUpdatePermission = itemmp.IsUpdatePermission;
                            //xyz.IsDeletePermission = itemmp.IsDeletePermission;


                            break;

                        }


                    }

                    userrolview.Add(xyz);

                }




            }
            if (userrolview == null)
            {
                return Json(new { Success = 0, ex = "No Data Found." });
            }
            //var abc =  _menuRepository.All().AsNoTracking().ToListAsync();
            //return Json(userrolview);
            return Json(new { Success = 1, data = userrolview });


        }


        //[HttpPost]
        //public async Task<IActionResult> EditRolePermission(string id, List<NavigationMenuViewModel> viewModel)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        var permissionIds = viewModel.Where(x => x.Permitted).Select(x => x.Id);

        //        await _dataAccessService.SetPermissionsByRoleIdAsync(id, permissionIds);
        //        return RedirectToAction(nameof(Roles));
        //    }

        //    return View(viewModel);
        //}

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddMenuPermissionOld1(List<UserRoleMenuView> model)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var BusinessTypeId = _storeSettingRepository.All().Where(x => x.Id == ComId).FirstOrDefault().BusinessTypeId;

                //ViewBag.Role = _userRoleRepository.GetAllForDropDownWithCondition(BusinessTypeId,ComId);
                ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();
                if (ModelState.IsValid)
                {

                    foreach (var item in model)
                    {

                        if (item.Id == 0)
                        {
                            if (item.Permitted == true)
                            {
                                MenuPermissionModel abc = new MenuPermissionModel();
                                //abc.UserRoleId = item.UserRoleId;
                                abc.MenuId = item.MenuId;
                                abc.Id = item.Id;
                                abc.BusinessTypeId = item.BusinessTypeId;
                                //abc.IsCreatePermission = item.IsCreatePermission;
                                //abc.IsDeletePermission = item.IsDeletePermission;
                                //abc.IsUpdatePermission = item.IsUpdatePermission;

                                abc.CreateDate = DateTime.Now;
                                abc.UpdateDate = DateTime.Now;


                                _menuPermissionRepository.Insert(abc);


                                //TempData["Message"] = "Data Save Successfully";
                                //TempData["Status"] = "1";
                                //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Create", item.MenuName);

                            }

                        }
                        else
                        {
                            if (item.Permitted == true)
                            {
                                MenuPermissionModel abc = new MenuPermissionModel();
                                //abc.UserRoleId = item.UserRoleId;
                                abc.MenuId = item.MenuId;
                                abc.Id = item.Id;
                                abc.BusinessTypeId = item.BusinessTypeId;
                                //abc.IsCreatePermission = item.IsCreatePermission;
                                //abc.IsDeletePermission = item.IsDeletePermission;
                                //abc.IsUpdatePermission = item.IsUpdatePermission;
                                abc.CreateDate = DateTime.Now;
                                abc.UpdateDate = DateTime.Now;

                                _menuPermissionRepository.Update(abc, abc.Id);

                                //TempData["Message"] = "Data Update Successfully";
                                //TempData["Status"] = "2";
                                //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Update", item.MenuName);


                            }
                            else
                            {
                                //MenuPermissionModel abc = new MenuPermissionModel();

                                var singlemodel = _menuPermissionRepository.All().Include(x => x.Menus).Where(x => x.Id == item.Id).FirstOrDefault();

                                //abc.UserRoleId = item.UserRoleId;
                                //abc.MenuId = item.MenuId;
                                //abc.Id = item.Id;



                                _menuPermissionRepository.Delete(singlemodel);

                                //TempData["Message"] = "Data Delete Successfully";
                                //TempData["Status"] = "3";
                                //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), singlemodel.Id.ToString(), "Delete", singlemodel.Menus.MenuName);


                            }




                        }


                    }
                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), BusinessTypeId.ToString(), "Update", "");



                    return View("AddMenuPermission");//?UserRoleId=2
                }

                return RedirectToAction("AddMenuPermission");
            }
            catch (Exception ex)
            {
                // Handle the exception
            }
            //return RedirectToAction("MenuPermissionList");
            return View("AddMenuPermission");
            //return View(model);
        }


        [HttpPost]
        [AllowAnonymous]
        public IActionResult AddMenuPermission([FromBody] List<UserRoleMenuView> model)
        {
            try
            {

                var errors = ModelState.Where(x => x.Value.Errors.Any())
           .Select(x => new { x.Key, x.Value.Errors });

                var ComId = HttpContext.Session.GetInt32("ComId");
                var BusinessTypeId = _storeSettingRepository.All().Where(x => x.ComId == ComId).FirstOrDefault().BusinessTypeId;

                //ViewBag.Role = _userRoleRepository.GetAllForDropDownWithCondition(BusinessTypeId,ComId);
                ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();
                if (ModelState.IsValid)
                {

                    foreach (var item in model)
                    {
                        if (item.Id == 0)
                        {
                            if (item.Permitted == true)
                            {
                                MenuPermissionModel abc = new MenuPermissionModel();
                                //abc.UserRoleId = item.UserRoleId;
                                abc.MenuId = item.MenuId;
                                abc.Id = item.Id;
                                abc.BusinessTypeId = item.BusinessTypeId;
                                //abc.IsCreatePermission = item.IsCreatePermission;
                                //abc.IsDeletePermission = item.IsDeletePermission;
                                //abc.IsUpdatePermission = item.IsUpdatePermission;

                                abc.CreateDate = DateTime.Now;
                                abc.UpdateDate = DateTime.Now;


                                _menuPermissionRepository.Insert(abc);


                                //TempData["Message"] = "Data Save Successfully";
                                //TempData["Status"] = "1";
                                //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Create", item.MenuName);

                            }

                        }
                        else
                        {
                            if (item.Permitted == true)
                            {
                                MenuPermissionModel abc = new MenuPermissionModel();
                                //abc.UserRoleId = item.UserRoleId;
                                abc.MenuId = item.MenuId;
                                abc.Id = item.Id;
                                abc.BusinessTypeId = item.BusinessTypeId;
                                //abc.IsCreatePermission = item.IsCreatePermission;
                                //abc.IsDeletePermission = item.IsDeletePermission;
                                //abc.IsUpdatePermission = item.IsUpdatePermission;
                                abc.CreateDate = DateTime.Now;
                                abc.UpdateDate = DateTime.Now;

                                _menuPermissionRepository.Update(abc, abc.Id);

                                //TempData["Message"] = "Data Update Successfully";
                                //TempData["Status"] = "2";
                                //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Update", item.MenuName);


                            }
                            else
                            {
                                //MenuPermissionModel abc = new MenuPermissionModel();

                                var singlemodel = _menuPermissionRepository.All().Include(x => x.Menus).Where(x => x.Id == item.Id).FirstOrDefault();

                                //abc.UserRoleId = item.UserRoleId;
                                //abc.MenuId = item.MenuId;
                                //abc.Id = item.Id;



                                _menuPermissionRepository.Delete(singlemodel);

                                //TempData["Message"] = "Data Delete Successfully";
                                //TempData["Status"] = "3";
                                //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), singlemodel.Id.ToString(), "Delete", singlemodel.Menus.MenuName);


                            }




                        }


                    }
                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), BusinessTypeId.ToString(), "Update", "");



                    return Json(new { success = 2, message = "Menu Update Successfully" });
                }

                return Json(new { success = 1, message = "Menu Not Updated" });
            }
            catch (Exception ex)
            {
                return Json(new { Success = 1, ex = ex.Message });
            }
            return Json(new { success = 1, message = "Menu Not Updated" });
        }


        [HttpGet]
        public ActionResult EditMenuPermission(int MenuPermissionId)
        {
            ViewBag.ActionType = "Edit";
            var MenuPermission = _menuPermissionRepository.Find(MenuPermissionId);
            return View("AddMenuPermission", MenuPermission);
        }

        public ActionResult DeleteMenuPermission(int MenuPermissionId)
        {
            var model = _menuPermissionRepository.Find(MenuPermissionId);
            if (model != null)
            {
                _menuPermissionRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.Menus.MenuName);


                return RedirectToAction("MenuPermissionList");
            }
            return RedirectToAction("MenuPermissionList");
        }
        #endregion

        #region Companypermission

        public IActionResult CompanyPermissionList()
        {
            return View(_companyPermissionRepository.All());
        }

        [HttpGet]
        public ActionResult AddCompanyPermission(int LuserId)
        {
            ViewBag.ActionType = "Create";

            //ViewBag.Role = _userRoleRepository.GetAllForDropDown();


            var UserId = HttpContext.Session.GetInt32("UserId");
            var BaseComId = HttpContext.Session.GetInt32("BaseComId");


            //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;
            var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;

            if (useraccount == "SuperAdmin") //|| useraccount == "Admin"
            {
                ViewBag.UserList = _userAccountRepository.GetAllUserForDropDownBaseComId();
            }
            else
            {
                ViewBag.UserList = _userAccountRepository.UserAccountForDropdown();
            }

            //AddUserMenuPermission   





            if (LuserId == 0)
            {
                return View();
            }

            //var Company = _companyRepository.All().Include(x=>x.co).ToList().OrderBy(x => x.Id);

            var Company = _storeSettingRepository.All(false).Include(x => x.CompanyList).Where(x => x.BaseComId == BaseComId).ToList().OrderBy(x => x.Id);


            var Companypermission = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.LuserId == LuserId).ToList();

            var userrolview = new List<UserCompanyView>();

            if (Companypermission.Count == 0)
            {
                foreach (var item in Company)
                {
                    UserCompanyView xyz = new UserCompanyView();
                    xyz.ComId = item.ComId;
                    xyz.CompnayName = item.CompanyList.CompanyName;

                    xyz.Permitted = false;
                    xyz.LuserId = LuserId;


                    userrolview.Add(xyz);
                }


            }
            else
            {
                foreach (var item in Company)
                {


                    UserCompanyView xyz = new UserCompanyView();
                    xyz.ComId = item.ComId;
                    xyz.Permitted = false;
                    xyz.CompnayName = item.CompanyList.CompanyName;
                    xyz.LuserId = LuserId;


                    foreach (var itemmp in Companypermission)
                    {
                        if (itemmp.ComId == item.ComId)
                        {
                            xyz.Id = itemmp.Id;
                            xyz.Permitted = true;
                            xyz.CompnayName = itemmp.CompanyList.CompanyName;
                            xyz.LuserId = LuserId;

                            break;

                        }


                    }

                    userrolview.Add(xyz);

                }




            }
            if (userrolview == null)
            {
                return View();
            }
            //var abc =  _CompanyRepository.All().AsNoTracking().ToListAsync();
            return View(userrolview);
        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddCompanyPermission(List<UserCompanyView> model)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");

            //ViewBag.Role = _userRoleRepository.GetAllForDropDownWithCondition(BusinessTypeId,ComId);
            ViewBag.UserList = _userAccountRepository.GetAllForDropDown();
            if (ModelState.IsValid)
            {

                foreach (var item in model)
                {

                    if (item.Id == 0)
                    {
                        if (item.Permitted == true)
                        {
                            CompanyPermissionModel abc = new CompanyPermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.ComId = item.ComId;
                            abc.Id = item.Id;
                            abc.LuserId = item.LuserId;

                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;


                            _companyPermissionRepository.Insert(abc);


                            //TempData["Message"] = "Data Save Successfully";
                            //TempData["Status"] = "1";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Create", item.CompanyName);

                        }

                    }
                    else
                    {
                        if (item.Permitted == true)
                        {
                            CompanyPermissionModel abc = new CompanyPermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.ComId = item.ComId;
                            abc.Id = item.Id;
                            abc.LuserId = item.LuserId;
                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;

                            _companyPermissionRepository.Update(abc, abc.Id);

                            //TempData["Message"] = "Data Update Successfully";
                            //TempData["Status"] = "2";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Update", item.CompanyName);


                        }
                        else
                        {
                            //CompanyPermissionModel abc = new CompanyPermissionModel();

                            var singlemodel = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.Id == item.Id).FirstOrDefault();

                            //abc.UserRoleId = item.UserRoleId;
                            //abc.CompanyId = item.CompanyId;
                            //abc.Id = item.Id;



                            _companyPermissionRepository.Delete(singlemodel);

                            //TempData["Message"] = "Data Delete Successfully";
                            //TempData["Status"] = "3";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), singlemodel.Id.ToString(), "Delete", singlemodel.Companys.CompanyName);


                        }




                    }


                }
                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), "Company Permission", "Update", "");



                return View("AddCompanyPermission");//?UserRoleId=2
            }

            return RedirectToAction("AddCompanyPermission");
            //return RedirectToAction("CompanyPermissionList");

            //return View(model);
        }

        [HttpGet]
        public ActionResult EditCompanyPermission(int CompanyPermissionId)
        {
            ViewBag.ActionType = "Edit";
            ViewBag.UserList = _userAccountRepository.GetAllForDropDown();
            var CompanyPermission = _companyPermissionRepository.Find(CompanyPermissionId);
            return View("AddCompanyPermission", CompanyPermission);
        }

        public ActionResult DeleteCompanyPermission(int CompanyPermissionId)
        {
            var model = _companyPermissionRepository.Find(CompanyPermissionId);
            if (model != null)
            {
                _companyPermissionRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", "LuserId : " + model.LuserId.ToString() + " - ComId : " + model.ComId.ToString());


                return RedirectToAction("CompanyPermissionList");
            }
            return RedirectToAction("CompanyPermissionList");
        }
        #endregion

        #region AndroidMenupermission



        public IActionResult AndroidMenuPermissionList()
        {
            return View(_androidMenuPermissionRepository.All());
        }

        [HttpGet]
        public ActionResult AddAndroidMenuPermission(int? UserRoleId, int? BusinessTypeId)
        {
            ViewBag.ActionType = "Create";

            //ViewBag.Role = _userRoleRepository.GetAllForDropDown();
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();

            //if (UserRoleId == null || BusinessTypeId == null)
            //{
            //    //UserRoleId = _userRoleRepository.All().OrderBy(x => x.Id).FirstOrDefault().Id;
            //    return View();
            //}
            if (BusinessTypeId == null)
            {
                //UserRoleId = _userRoleRepository.All().OrderBy(x => x.Id).FirstOrDefault().Id;
                return View();
            }


            var menu = _androidMenuRepository.All().ToList().OrderBy(x => x.DisplayOrder);
            //var menupermission = _androidMenuPermissionRepository.All().Where(x => x.UserRoleId == UserRoleId && x.BusinessTypeId == BusinessTypeId).ToList();
            var menupermission = _androidMenuPermissionRepository.All().Where(x => x.BusinessTypeId == BusinessTypeId).ToList();

            var userrolview = new List<UserRoleMenuView>();

            if (menupermission.Count == 0)
            {
                foreach (var item in menu)
                {
                    UserRoleMenuView xyz = new UserRoleMenuView();
                    xyz.MenuId = item.Id;
                    xyz.Permitted = false;
                    xyz.MenuGroupName = item.MenuCaption;// item.AndroidMenuGroupName;
                                                         //xyz.ParentMenuName = item.ParentMenu != null ? item.ParentMenu.AndroidMenuName : " -- >>";
                    xyz.MenuName = item.MenuName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.BusinessTypeId = int.Parse(BusinessTypeId.ToString());

                    //xyz.IsCreatePermission = false;
                    //xyz.IsDeletePermission = false;
                    //xyz.IsUpdatePermission = false;

                    userrolview.Add(xyz);
                }


            }
            else
            {
                foreach (var item in menu)
                {


                    UserRoleMenuView xyz = new UserRoleMenuView();
                    xyz.MenuId = item.Id;
                    xyz.Permitted = false;
                    xyz.MenuGroupName = item.MenuCaption;
                    //xyz.ParentMenuName = item.ParentMenu != null ? item.ParentMenu.AndroidMenuName : " -- >>";
                    xyz.MenuName = item.MenuName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.BusinessTypeId = int.Parse(BusinessTypeId.ToString());

                    foreach (var itemmp in menupermission)
                    {
                        if (itemmp.AndroidMenuId == item.Id)
                        {
                            xyz.Id = itemmp.Id;
                            xyz.Permitted = true;
                            //xyz.IsCreatePermission = itemmp.IsCreatePermission;
                            //xyz.IsUpdatePermission = itemmp.IsUpdatePermission;
                            //xyz.IsDeletePermission = itemmp.IsDeletePermission;


                            break;

                        }


                    }

                    userrolview.Add(xyz);

                }




            }
            if (userrolview == null)
            {
                return View();
            }
            //var abc =  _androidMenuRepository.All().AsNoTracking().ToListAsync();
            return View(userrolview);
        }

        //[HttpPost]
        //public async Task<IActionResult> EditRolePermission(string id, List<NavigationAndroidMenuViewModel> viewModel)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        var permissionIds = viewModel.Where(x => x.Permitted).Select(x => x.Id);

        //        await _dataAccessService.SetPermissionsByRoleIdAsync(id, permissionIds);
        //        return RedirectToAction(nameof(Roles));
        //    }

        //    return View(viewModel);
        //}

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddAndroidMenuPermission(List<UserRoleMenuView> model)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");
            var BusinessTypeId = _storeSettingRepository.All().Where(x => x.Id == ComId).FirstOrDefault().BusinessTypeId;

            //ViewBag.Role = _userRoleRepository.GetAllForDropDownWithCondition(BusinessTypeId,ComId);
            ViewBag.BusinessType = _businessTypeRepository.GetAllForDropDownSuperAdmin();
            if (ModelState.IsValid)
            {

                foreach (var item in model)
                {

                    if (item.Id == 0)
                    {
                        if (item.Permitted == true)
                        {
                            AndroidMenuPermissionModel abc = new AndroidMenuPermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.AndroidMenuId = item.MenuId;
                            abc.Id = item.Id;
                            abc.BusinessTypeId = item.BusinessTypeId;
                            //abc.IsCreatePermission = item.IsCreatePermission;
                            //abc.IsDeletePermission = item.IsDeletePermission;
                            //abc.IsUpdatePermission = item.IsUpdatePermission;

                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;


                            _androidMenuPermissionRepository.Insert(abc);


                            //TempData["Message"] = "Data Save Successfully";
                            //TempData["Status"] = "1";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Create", item.AndroidMenuName);

                        }

                    }
                    else
                    {
                        if (item.Permitted == true)
                        {
                            AndroidMenuPermissionModel abc = new AndroidMenuPermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.AndroidMenuId = item.MenuId;
                            abc.Id = item.Id;
                            abc.BusinessTypeId = item.BusinessTypeId;
                            //abc.IsCreatePermission = item.IsCreatePermission;
                            //abc.IsDeletePermission = item.IsDeletePermission;
                            //abc.IsUpdatePermission = item.IsUpdatePermission;
                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;

                            _androidMenuPermissionRepository.Update(abc, abc.Id);

                            //TempData["Message"] = "Data Update Successfully";
                            //TempData["Status"] = "2";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Update", item.AndroidMenuName);


                        }
                        else
                        {
                            //AndroidMenuPermissionModel abc = new AndroidMenuPermissionModel();

                            var singlemodel = _androidMenuPermissionRepository.All().Include(x => x.AndroidMenus).Where(x => x.Id == item.Id).FirstOrDefault();

                            //abc.UserRoleId = item.UserRoleId;
                            //abc.AndroidMenuId = item.AndroidMenuId;
                            //abc.Id = item.Id;



                            _androidMenuPermissionRepository.Delete(singlemodel);

                            //TempData["Message"] = "Data Delete Successfully";
                            //TempData["Status"] = "3";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), singlemodel.Id.ToString(), "Delete", singlemodel.AndroidMenus.AndroidMenuName);


                        }




                    }


                }
                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), BusinessTypeId.ToString(), "Update", "");



                return View("AddAndroidMenuPermission");//?UserRoleId=2
            }

            return RedirectToAction("AddAndroidMenuPermission");
            //return RedirectToAction("AndroidMenuPermissionList");

            //return View(model);
        }

        [HttpGet]
        public ActionResult EditAndroidMenuPermission(int AndroidMenuPermissionId)
        {
            ViewBag.ActionType = "Edit";
            var AndroidMenuPermission = _androidMenuPermissionRepository.Find(AndroidMenuPermissionId);
            return View("AddAndroidMenuPermission", AndroidMenuPermission);
        }

        public ActionResult DeleteAndroidMenuPermission(int AndroidMenuPermissionId)
        {
            var model = _androidMenuPermissionRepository.Find(AndroidMenuPermissionId);
            if (model != null)
            {
                _androidMenuPermissionRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.AndroidMenus.MenuName);


                return RedirectToAction("AndroidMenuPermissionList");
            }
            return RedirectToAction("AndroidMenuPermissionList");
        }
        #endregion

        #region FromWarehousepermission



        public IActionResult FromWarehousePermissionList()
        {
            return View(_FromWarehousePermissionRepository.All());
        }

        [HttpGet]
        public ActionResult AddFromWarehousePermission(int LuserIdAllow)
        {
            ViewBag.ActionType = "Create";
            ViewBag.LuserIdAllow = _userAccountRepository.GetAllForDropDownWithoutBase();

            //if (LuserId == null)
            //{
            //    return View();
            //}


            var Warehouse = _warehouseRepository.All().Include(x => x.Warehouses).Where(x => x.WhType == "L").ToList().OrderBy(x => x.Id);

            var Warehousepermission = _FromWarehousePermissionRepository.All().Include(x => x.WarehouseList).ThenInclude(x => x.Warehouses).Where(x => x.LuserIdAllow == LuserIdAllow).ToList();

            var userrolview = new List<UserWarehouseView>();

            if (Warehousepermission.Count == 0)
            {
                foreach (var item in Warehouse)
                {
                    UserWarehouseView xyz = new UserWarehouseView();
                    xyz.WarehouseId = item.Id;
                    xyz.Permitted = false;
                    xyz.ParentWarehouse = item.Warehouses != null ? item.Warehouses.WhName : " -- >>";
                    xyz.WarehouseName = item.WhName + " - " + item.WhShortName;
                    xyz.LuserIdAllow = int.Parse(LuserIdAllow.ToString());



                    userrolview.Add(xyz);
                }


            }
            else
            {
                foreach (var item in Warehouse)
                {


                    UserWarehouseView xyz = new UserWarehouseView();
                    xyz.WarehouseId = item.Id;
                    xyz.Permitted = false;
                    xyz.ParentWarehouse = item.Warehouses != null ? item.Warehouses.WhName : " -- >>";
                    xyz.WarehouseName = item.WhName + " - " + item.WhShortName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.LuserIdAllow = int.Parse(LuserIdAllow.ToString());

                    foreach (var itemmp in Warehousepermission)
                    {
                        if (itemmp.WarehouseId == item.Id)
                        {
                            xyz.Id = itemmp.Id;
                            xyz.Permitted = true;

                            break;

                        }


                    }

                    userrolview.Add(xyz);

                }




            }
            if (userrolview == null)
            {
                return View();
            }

            return View(userrolview);
        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddFromWarehousePermission(List<UserWarehouseView> model)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");

            ViewBag.LuserIdAllow = _userAccountRepository.GetAllForDropDownWithoutBase();
            if (ModelState.IsValid)
            {

                foreach (var item in model)
                {

                    if (item.Id == 0)
                    {
                        if (item.Permitted == true)
                        {
                            FromWarehousePermissionModel abc = new FromWarehousePermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.WarehouseId = item.WarehouseId;
                            abc.Id = item.Id;
                            abc.LuserIdAllow = item.LuserIdAllow;
                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;


                            _FromWarehousePermissionRepository.Insert(abc);


                            //TempData["Message"] = "Data Save Successfully";
                            //TempData["Status"] = "1";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Create", item.WarehouseName);

                        }

                    }
                    else
                    {
                        if (item.Permitted == true)
                        {
                            FromWarehousePermissionModel abc = new FromWarehousePermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.WarehouseId = item.WarehouseId;
                            abc.Id = item.Id;
                            abc.LuserIdAllow = item.LuserIdAllow;
                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;

                            _FromWarehousePermissionRepository.Update(abc, abc.Id);

                            //TempData["Message"] = "Data Update Successfully";
                            //TempData["Status"] = "2";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Update", item.WarehouseName);


                        }
                        else
                        {
                            //FromWarehousePermissionModel abc = new FromWarehousePermissionModel();

                            var singlemodel = _FromWarehousePermissionRepository.All().Include(x => x.WarehouseList).Where(x => x.Id == item.Id).FirstOrDefault();


                            _FromWarehousePermissionRepository.Delete(singlemodel);

                            //TempData["Message"] = "Data Delete Successfully";
                            //TempData["Status"] = "3";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), singlemodel.Id.ToString(), "Delete", singlemodel.Warehouses.WarehouseName);


                        }




                    }


                }
                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.FirstOrDefault().LuserIdAllow.ToString(), "Update", "");



                return View("AddFromWarehousePermission");//?UserRoleId=2
            }

            return RedirectToAction("AddFromWarehousePermission");
            //return RedirectToAction("WarehousePermissionList");

            //return View(model);
        }

        [HttpGet]
        public ActionResult EditFromWarehousePermission(int WarehousePermissionId)
        {
            ViewBag.ActionType = "Edit";
            var WarehousePermission = _FromWarehousePermissionRepository.Find(WarehousePermissionId);
            return View("AddFromWarehousePermission", WarehousePermission);
        }

        public ActionResult DeleteFromWarehousePermission(int WarehousePermissionId)
        {
            var model = _FromWarehousePermissionRepository.Find(WarehousePermissionId);
            if (model != null)
            {
                _FromWarehousePermissionRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.LuserId.ToString());


                return RedirectToAction("AddFromWarehousePermission");
            }
            return RedirectToAction("AddFromWarehousePermission");
        }
        #endregion

        #region AccountHeadpermission



        public IActionResult AccountHeadPermissionList()
        {
            return View(_AccountHeadPermissionRepository.All());
        }

        [HttpGet]
        public ActionResult AddAccountHeadPermission(int LuserIdAllow)
        {
            ViewBag.ActionType = "Create";
            ViewBag.LuserIdAllow = _userAccountRepository.GetAllForDropDownWithoutBase();

            //if (LuserId == null)
            //{
            //    return View();
            //}


            var AccountHead = _accountHeadRepository.All().Include(x => x.vAccountGroupHead).Where(x => x.AccType == "L").ToList().OrderBy(x => x.Id);

            var AccountHeadpermission = _AccountHeadPermissionRepository.All().Include(x => x.AccountHeadList).ThenInclude(x => x.vAccountGroupHead).Where(x => x.LuserIdAllow == LuserIdAllow).ToList();

            var userrolview = new List<UserAccountHeadView>();

            if (AccountHeadpermission.Count == 0)
            {
                foreach (var item in AccountHead)
                {
                    UserAccountHeadView xyz = new UserAccountHeadView();
                    xyz.AccId = item.Id;
                    xyz.Permitted = false;
                    xyz.ParentAccName = item.vAccountGroupHead != null ? item.vAccountGroupHead.AccName : " -- >>";
                    xyz.AccName = item.AccName;
                    xyz.LuserIdAllow = int.Parse(LuserIdAllow.ToString());



                    userrolview.Add(xyz);
                }


            }
            else
            {
                foreach (var item in AccountHead)
                {


                    UserAccountHeadView xyz = new UserAccountHeadView();
                    xyz.AccId = item.Id;
                    xyz.Permitted = false;
                    xyz.ParentAccName = item.vAccountGroupHead != null ? item.vAccountGroupHead.AccName : " -- >>";
                    xyz.AccName = item.AccName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.LuserIdAllow = int.Parse(LuserIdAllow.ToString());

                    foreach (var itemmp in AccountHeadpermission)
                    {
                        if (itemmp.AccId == item.Id)
                        {
                            xyz.Id = itemmp.Id;
                            xyz.Permitted = true;

                            break;

                        }


                    }

                    userrolview.Add(xyz);

                }




            }
            if (userrolview == null)
            {
                return View();
            }

            return View(userrolview);
        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddAccountHeadPermission(List<UserAccountHeadView> model)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");

            ViewBag.LuserIdAllow = _userAccountRepository.GetAllForDropDownWithoutBase();
            if (ModelState.IsValid)
            {

                foreach (var item in model)
                {

                    if (item.Id == 0)
                    {
                        if (item.Permitted == true)
                        {
                            AccountHeadPermissionModel abc = new AccountHeadPermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.AccId = item.AccId;
                            abc.Id = item.Id;
                            abc.LuserIdAllow = item.LuserIdAllow;
                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;


                            _AccountHeadPermissionRepository.Insert(abc);


                            //TempData["Message"] = "Data Save Successfully";
                            //TempData["Status"] = "1";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Create", item.AccountHeadName);

                        }

                    }
                    else
                    {
                        if (item.Permitted == true)
                        {
                            AccountHeadPermissionModel abc = new AccountHeadPermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.AccId = item.AccId;
                            abc.Id = item.Id;
                            abc.LuserIdAllow = item.LuserIdAllow;
                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;

                            _AccountHeadPermissionRepository.Update(abc, abc.Id);

                            //TempData["Message"] = "Data Update Successfully";
                            //TempData["Status"] = "2";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Update", item.AccountHeadName);


                        }
                        else
                        {
                            //AccountHeadPermissionModel abc = new AccountHeadPermissionModel();

                            var singlemodel = _AccountHeadPermissionRepository.All().Include(x => x.AccountHeadList).Where(x => x.Id == item.Id).FirstOrDefault();


                            _AccountHeadPermissionRepository.Delete(singlemodel);

                            //TempData["Message"] = "Data Delete Successfully";
                            //TempData["Status"] = "3";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), singlemodel.Id.ToString(), "Delete", singlemodel.AccountHeads.AccountHeadName);


                        }




                    }


                }
                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.FirstOrDefault().LuserIdAllow.ToString(), "Update", "");



                return View("AddAccountHeadPermission");//?UserRoleId=2
            }

            return RedirectToAction("AddAccountHeadPermission");
            //return RedirectToAction("AccountHeadPermissionList");

            //return View(model);
        }

        [HttpGet]
        public ActionResult EditAccountHeadPermission(int AccountHeadPermissionId)
        {
            ViewBag.ActionType = "Edit";
            var AccountHeadPermission = _AccountHeadPermissionRepository.Find(AccountHeadPermissionId);
            return View("AddAccountHeadPermission", AccountHeadPermission);
        }

        public ActionResult DeleteAccountHeadPermission(int AccountHeadPermissionId)
        {
            var model = _AccountHeadPermissionRepository.Find(AccountHeadPermissionId);
            if (model != null)
            {
                _AccountHeadPermissionRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.LuserId.ToString());


                return RedirectToAction("AddAccountHeadPermission");
            }
            return RedirectToAction("AddAccountHeadPermission");
        }
        #endregion

        #region ToWarehousepermission



        public IActionResult ToWarehousePermissionList()
        {
            return View(_ToWarehousePermissionRepository.All());
        }

        [HttpGet]
        public ActionResult AddToWarehousePermission(int LuserIdAllow)
        {
            ViewBag.ActionType = "Create";
            ViewBag.LuserIdAllow = _userAccountRepository.GetAllForDropDownWithoutBase();

            //if (LuserIdAllow == null)
            //{
            //    return View();
            //}


            var Warehouse = _warehouseRepository.All().Include(x => x.Warehouses).Where(x => x.WhType == "L").ToList().OrderBy(x => x.Id);

            var Warehousepermission = _ToWarehousePermissionRepository.All().Include(x => x.WarehouseList).ThenInclude(x => x.Warehouses).Where(x => x.LuserIdAllow == LuserIdAllow).ToList();

            var userrolview = new List<UserWarehouseView>();

            if (Warehousepermission.Count == 0)
            {
                foreach (var item in Warehouse)
                {
                    UserWarehouseView xyz = new UserWarehouseView();
                    xyz.WarehouseId = item.Id;
                    xyz.Permitted = false;
                    xyz.ParentWarehouse = item.Warehouses != null ? item.Warehouses.WhName : " -- >>";
                    xyz.WarehouseName = item.WhName + " - " + item.WhShortName;


                    xyz.LuserIdAllow = int.Parse(LuserIdAllow.ToString());


                    userrolview.Add(xyz);
                }


            }
            else
            {
                foreach (var item in Warehouse)
                {


                    UserWarehouseView xyz = new UserWarehouseView();
                    xyz.WarehouseId = item.Id;
                    xyz.Permitted = false;
                    xyz.ParentWarehouse = item.Warehouses != null ? item.Warehouses.WhName : " -- >>";
                    xyz.WarehouseName = item.WhName + " - " + item.WhShortName;

                    //xyz.UserRoleId = int.Parse(UserRoleId.ToString());
                    xyz.LuserIdAllow = int.Parse(LuserIdAllow.ToString());

                    foreach (var itemmp in Warehousepermission)
                    {
                        if (itemmp.WarehouseId == item.Id)
                        {
                            xyz.Id = itemmp.Id;
                            xyz.Permitted = true;

                            break;

                        }


                    }

                    userrolview.Add(xyz);

                }




            }
            if (userrolview == null)
            {
                return View();
            }

            return View(userrolview);
        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddToWarehousePermission(List<UserWarehouseView> model)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");

            ViewBag.LuserIdAllow = _userAccountRepository.GetAllForDropDownWithoutBase();
            if (ModelState.IsValid)
            {

                foreach (var item in model)
                {

                    if (item.Id == 0)
                    {
                        if (item.Permitted == true)
                        {
                            ToWarehousePermissionModel abc = new ToWarehousePermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.WarehouseId = item.WarehouseId;
                            abc.Id = item.Id;
                            abc.LuserIdAllow = item.LuserIdAllow;
                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;


                            _ToWarehousePermissionRepository.Insert(abc);


                            //TempData["Message"] = "Data Save Successfully";
                            //TempData["Status"] = "1";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Create", item.WarehouseName);

                        }

                    }
                    else
                    {
                        if (item.Permitted == true)
                        {
                            ToWarehousePermissionModel abc = new ToWarehousePermissionModel();
                            //abc.UserRoleId = item.UserRoleId;
                            abc.WarehouseId = item.WarehouseId;
                            abc.Id = item.Id;
                            abc.LuserIdAllow = item.LuserIdAllow;
                            abc.CreateDate = DateTime.Now;
                            abc.UpdateDate = DateTime.Now;

                            _ToWarehousePermissionRepository.Update(abc, abc.Id);

                            //TempData["Message"] = "Data Update Successfully";
                            //TempData["Status"] = "2";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), item.Id.ToString(), "Update", item.WarehouseName);


                        }
                        else
                        {
                            //ToWarehousePermissionModel abc = new ToWarehousePermissionModel();

                            var singlemodel = _ToWarehousePermissionRepository.All().Include(x => x.WarehouseList).Where(x => x.Id == item.Id).FirstOrDefault();


                            _ToWarehousePermissionRepository.Delete(singlemodel);

                            //TempData["Message"] = "Data Delete Successfully";
                            //TempData["Status"] = "3";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), singlemodel.Id.ToString(), "Delete", singlemodel.Warehouses.WarehouseName);


                        }




                    }


                }
                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.FirstOrDefault().LuserIdAllow.ToString(), "Update", "");



                return View("AddToWarehousePermission");//?UserRoleId=2
            }

            return RedirectToAction("AddToWarehousePermission");
            //return RedirectToAction("WarehousePermissionList");

            //return View(model);
        }

        [HttpGet]
        public ActionResult EditToWarehousePermission(int WarehousePermissionId)
        {
            ViewBag.ActionType = "Edit";
            var WarehousePermission = _ToWarehousePermissionRepository.Find(WarehousePermissionId);
            return View("AddToWarehousePermission", WarehousePermission);
        }

        public ActionResult DeleteToWarehousePermission(int WarehousePermissionId)
        {
            var model = _ToWarehousePermissionRepository.Find(WarehousePermissionId);
            if (model != null)
            {
                _ToWarehousePermissionRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.LuserId.ToString());


                return RedirectToAction("AddToWarehousePermission");
            }
            return RedirectToAction("AddToWarehousePermission");
        }
        #endregion

        #region MenuPermission_Master



        public IActionResult UserMenuPermissionList()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            var BaseComId = HttpContext.Session.GetInt32("BaseComId");


            List<int> arraycomid = new List<int>();
            List<StoreSettingModel> resultlist = _storeSettingRepository.All(false).Where(x => x.BaseComId == ComId).ToList();

            foreach (var item in resultlist)
            {
                arraycomid.Add(item.ComId);
            }


            //products = products.Where(p => arraycategoryid.Contains(p.CategoryId.GetValueOrDefault()));




            var abc = _userMenuPermissionMasterRepository.All()
                .Include(x => x.Company)
                .ThenInclude(x => x.storeinfo)
                .Include(x => x.UserAccount)
                .Where(x => arraycomid.Contains(x.ComId));

            //.Where(x => x.ComId == ComId);

            return View(abc.ToList());
        }

        [AllowAnonymous]

        public IActionResult UserMenuPermissionTransfer(string MenuPermissionId, int UserId, int ComId)
        {
            try
            {

                var errors = ModelState.Where(x => x.Value.Errors.Any())
               .Select(x => new { x.Key, x.Value.Errors });
                //var model = new GetUserModel();

                var InputUserId = HttpContext.Session.GetInt32("UserId");
                var BaseComId = HttpContext.Session.GetInt32("BaseComId");
                //var ComId = HttpContext.Session.GetInt32("ComId");

                SqlParameter[] sqlParameter = new SqlParameter[4];
                sqlParameter[0] = new SqlParameter("@menuPermissionId", MenuPermissionId);
                sqlParameter[1] = new SqlParameter("@userIdPermission", UserId);
                sqlParameter[2] = new SqlParameter("@comId", ComId);
                sqlParameter[3] = new SqlParameter("@AddedByUserId", InputUserId);
                Helper.ExecProc("prcPermissionTransfer", sqlParameter);


                ViewBag.ActionType = "Edit";

                //List<CompanyModel> CompanyList = _companyRepository.All().Where(x => x.Id == ComId).ToList();
                var CompanyList = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.LuserId == UserId).Select(x => new SelectListItem { Text = x.CompanyList.CompanyName, Value = x.ComId.ToString() }).ToList();
                ViewBag.CompanyList = CompanyList;// new SelectList(CompanyList, "Id", "CompanyName");

                //List<UserAccountModel> AspNetUserList = _userAccountRepository.All().Where(x => x.ComId == ComId).ToList();
                ViewBag.useridPermission = _userAccountRepository.GetAllForDropDown();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDown(); //new SelectList(AspNetUserList, "Id", "Email",null);


                SqlParameter[] sqlParameter2 = new SqlParameter[2];
                sqlParameter2[0] = new SqlParameter("@comid", ComId);
                sqlParameter2[1] = new SqlParameter("@userid", UserId);
                List<MenuPermissionTestModel> menuPermissionList = Helper.ExecProcMapTList<MenuPermissionTestModel>("MenuPermissionInformation", sqlParameter2).ToList();
                ViewBag.MenuList = menuPermissionList;

                return RedirectToAction("UserMenuPermissionList");


            }
            catch (Exception ex)
            {
                return RedirectToAction("UserMenuPermissionList");
                throw ex;
            }
            //return View("AddUserMenuPermission", menuPermission_Master);

            //return View("Create");

        }



        [HttpGet]
        public ActionResult AddUserMenuPermission(int ComId = 0, int UserId = 0, int MenuPermissionId = 0, int isDelete = 0)
        {
            var SessionComId = HttpContext.Session.GetInt32("ComId");
            var SessionUserId = HttpContext.Session.GetInt32("UserId");
            var BaseComId = HttpContext.Session.GetInt32("BaseComId");


            ViewBag.ActionType = "Create";
            if (ComId == 0)
            {
                ComId = SessionComId.GetValueOrDefault();
            }

            if (MenuPermissionId > 0)
            {
                //if (MenuPermissionId == null)
                //{
                //    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                //}
                MenuPermission_MasterModel menuPermission_Master = _userMenuPermissionMasterRepository.All()
                    .Where(x => x.Id == MenuPermissionId)
                    .Include(x => x.MenuPermission_Details)
                    .ThenInclude(x => x.Menus)
                    .ThenInclude(x => x.ParentMenu).FirstOrDefault();
                //if (menuPermission_Master == null)
                //{
                //    return HttpNotFound();
                //}
                ViewBag.ActionType = "Edit";
                List<UserAccountModel> AspNetUserList = _userAccountRepository.All().Where(x => x.ComId == ComId).ToList();
                //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);

                //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == SessionUserId).FirstOrDefault().UserRole.RoleName;
                var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == SessionUserId).FirstOrDefault().UserRole.RoleName;

                if (useraccount == "SuperAdmin") // || useraccount == "Admin"
                {
                    ViewBag.useridPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                    ViewBag.newUserPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();
                }
                else
                {
                    //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDown();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                    //ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDown();

                    ViewBag.useridPermission = _companyPermissionRepository.All().Include(x => x.UserList).Where(x => x.ComId == ComId && x.UserList.IsDelete == false).Select(x => new SelectListItem { Text = x.UserList.Email + " - " + x.UserList.Name, Value = x.LuserId.ToString() }).ToList();
                    ViewBag.newUserPermission = _companyPermissionRepository.All().Include(x => x.UserList).Where(x => x.ComId == ComId && x.UserList.IsDelete == false).Select(x => new SelectListItem { Text = x.UserList.Email + " - " + x.UserList.Name, Value = x.LuserId.ToString() }).ToList();


                }


                // ViewBag.useridPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                //ViewBag.newUserPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase(); //new SelectList(AspNetUserList, "Id", "Email",null);
                //var BaseComId = HttpContext.Session.GetInt32("BaseComId");
                //List<CompanyModel> CompanyList = _companyRepository.All().Where(x => x.Id == BaseComId).ToList();


                //List<CompanyModel> CompanyList = _companyRepository.All().Where(x => x.Id == ComId).ToList();
                //ViewBag.CompanyList = new SelectList(CompanyList, "Id", "CompanyName");
                //ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDownWithoutBase(); //new SelectList(AspNetUserList, "Id", "Email",null);

                //IEnumerable<SelectListItem> CompanyList = _storeSettingRepository.AllByBaseCompany()
                //.Where(x => x.Id > 0)
                //.Select(x => new SelectListItem
                //{
                //    Text = x.CompanyList.CompanyName,
                //    Value = x.CompanyList.Id.ToString()
                //});



                //var CompanyList = HttpContext.Session.GetObject<List<SelectListItem>>("UserCompanys");

                var CompanyList = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.LuserId == UserId).Select(x => new SelectListItem { Text = x.CompanyList.CompanyName, Value = x.ComId.ToString() }).ToList();
                ViewBag.CompanyList = CompanyList;// new SelectList(CompanyList, "Id", "CompanyName");

                //ViewBag.CompanyList = CompanyList;//.Where(x => x.Value == ComId.ToString());


                SqlParameter[] sqlParameter2 = new SqlParameter[2];
                sqlParameter2[0] = new SqlParameter("@comid", ComId);
                sqlParameter2[1] = new SqlParameter("@userid", UserId);
                List<MenuPermissionTestModel> menuPermissionList = Helper.ExecProcMapTList<MenuPermissionTestModel>("MenuPermissionInformation", sqlParameter2).ToList();
                ViewBag.MenuList = menuPermissionList;






                //List<CompanyList> CompanyList = (db.Database.SqlQuery<CompanyList>("[prcgetPermitCompanyList]  @Criteria, @userid", new SqlParameter("Criteria", "CompanyPermission"), new SqlParameter("userid", UserId))).ToList();
                //ViewBag.comid = new SelectList(CompanyList, "ComId", "CompanyShortName");


                return View("AddUserMenuPermission", menuPermission_Master);


            }
            else
            {

                ViewBag.Title = "Create";


                //List<UserAccountModel> AspNetUserList = _userAccountRepository.All().Where(x => x.ComId == ComId).ToList();
                //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                //ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDownWithoutBase(); //new SelectList(AspNetUserList, "Id", "Email",null);


                //List<CompanyModel> CompanyList = _companyRepository.All().Where(x => x.Id == ComId).ToList();
                //ViewBag.CompanyList = new SelectList(CompanyList, "Id", "CompanyName");



                //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == SessionUserId).FirstOrDefault().UserRole.RoleName;
                var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == SessionUserId).FirstOrDefault().UserRole.RoleName;

                if (useraccount == "SuperAdmin") // || useraccount == "Admin"
                {
                    ViewBag.useridPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                    ViewBag.newUserPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();
                }
                else
                {

                    ViewBag.useridPermission = _companyPermissionRepository.All().Include(x => x.UserList).Where(x => x.ComId == ComId && x.UserList.IsDelete == false).Select(x => new SelectListItem { Text = x.UserList.Email + " - " + x.UserList.Name, Value = x.LuserId.ToString() }).ToList();
                    ViewBag.newUserPermission = _companyPermissionRepository.All().Include(x => x.UserList).Where(x => x.ComId == ComId && x.UserList.IsDelete == false).Select(x => new SelectListItem { Text = x.UserList.Email + " - " + x.UserList.Name, Value = x.LuserId.ToString() }).ToList();


                    //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDown();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                    //ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDown();
                }

                //new SelectList(AspNetUserList, "Id", "Email",null);
                //var BaseComId = HttpContext.Session.GetInt32("BaseComId");
                //List<CompanyModel> CompanyList = _companyRepository.All().Where(x => x.Id == BaseComId).ToList();


                //IEnumerable<SelectListItem> CompanyList = _storeSettingRepository.AllByBaseCompany()
                //.Where(x => x.Id > 0)
                //.Select(x => new SelectListItem
                //{
                //    Text = x.CompanyList.CompanyName,
                //    Value = x.CompanyList.Id.ToString()
                //});
                //var userdata = _userAccountRepository.All().Include(x => x.UserRole).Include(x => x.EmployeeList).Where(x => x.Id == UserId).FirstOrDefault();


                //if (userdata.UserRole.RoleName.Contains("SuperAdmin"))
                //{
                //    var CompanyUserList = _companyRepository.All().Select(x => new SelectListItem { Text = x.CompanyName, Value = x.Id.ToString() }).OrderBy(x => x.Value).ToList();


                //    //var CompanyUserList = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.ComId == ComId && x.LuserId == UserId).Select(x => new SelectListItem { Text = x.CompanyList.CompanyName, Value = x.ComId.ToString() }).OrderBy(x=>x.Value).ToList();
                //    if (CompanyUserList.Count > 0)
                //    {
                //        HttpContext.Session.SetObject("UserCompanys", CompanyUserList);
                //    }
                //}
                //else //if (!userdata.UserRole.RoleName.Contains("Admin"))
                //{
                //    /////////////if multi compnay is avaialable but he have only single company permission not the default one.
                //    var CompanyUserList = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.LuserId == UserId).Select(x => new SelectListItem { Text = x.CompanyList.CompanyName, Value = x.ComId.ToString() }).ToList();


                //}



                var CompanyList = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.LuserId == UserId).Select(x => new SelectListItem { Text = x.CompanyList.CompanyName, Value = x.ComId.ToString() }).ToList();
                ViewBag.CompanyList = CompanyList;// new SelectList(CompanyList, "Id", "CompanyName");


                //var CompanyList = HttpContext.Session.GetObject<List<SelectListItem>>("UserCompanys");
                //ViewBag.CompanyList = CompanyList.Where(x => x.Value == ComId.ToString());

                //ViewBag.CompanyList = CompanyList;
                //ViewBag.CompanyList = _companyPermissionRepository.GetAllForDropDown(); //new SelectList(AspNetUserList, "Id", "Email",null);







                if (ComId != null && UserId != null)
                {

                    MenuPermission_MasterModel menuPermission_Master = _userMenuPermissionMasterRepository.All().Include(x => x.MenuPermission_Details).ThenInclude(x => x.Menus).Where(x => x.ComId == ComId && x.LUserIdPermission == UserId).FirstOrDefault();
                    if (menuPermission_Master != null)
                    {
                        ViewBag.ActionType = "Edit";
                    }
                    else
                    {
                        menuPermission_Master = new MenuPermission_MasterModel();
                        if (UserId > 0)
                        {
                            menuPermission_Master.LUserIdPermission = UserId;
                        }
                    }


                    SqlParameter[] sqlParameter2 = new SqlParameter[2];
                    sqlParameter2[0] = new SqlParameter("@comid", ComId);
                    sqlParameter2[1] = new SqlParameter("@userid", UserId);
                    List<MenuPermissionTestModel> menuPermissionList = Helper.ExecProcMapTList<MenuPermissionTestModel>("MenuPermissionInformation", sqlParameter2).ToList();
                    ViewBag.MenuList = menuPermissionList;


                    return View(menuPermission_Master);
                }
                else
                {
                    ViewBag.ActionType = "Create";
                }

                ViewBag.MenuList = null;

                //////ViewBag.CompanyId = new SelectList(db.Companys, "ComId", "CompanyShortName",ComId);
                ////List<CompanyList> CompanyList = (db.Database.SqlQuery<CompanyList>("[prcgetPermitCompanyList]  @Criteria, @userid", new SqlParameter("Criteria", "CompanyPermission"), new SqlParameter("userid", UserId))).ToList();
                ////ViewBag.comid = new SelectList(CompanyList, "ComId", "CompanyShortName"); 

            }
            return View();
        }


        public class MenuPermissionTestModel
        {

            public int ModuleMenuId { get; set; }


            public string? ParentMenuName { get; set; }

            public string? ModuleMenuName { get; set; }

            public string? ActionName { get; set; }

            public string? ControllerName { get; set; }

            public int SLNO { get; set; }

            public bool IsDefault { get; set; }



        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult AddUserMenuPermission(MenuPermission_MasterModel menuPermission_Master)
        {

            var errors = ModelState.Where(x => x.Value.Errors.Any())
           .Select(x => new { x.Key, x.Value.Errors });

            var ComId = HttpContext.Session.GetInt32("ComId");
            try
            {
                //var a =   menuPermission_Master;
                if ((HttpContext.Session.GetString("ComId")) == "0" || (HttpContext.Session.GetString("ComId")) == null)
                {
                    return Json(new { Success = 0, ex = new Exception("Please Login Again for This Transaction").Message.ToString() });
                }
                ViewBag.ActionType = "Create";

                if (ModelState.IsValid)
                {

                    if (menuPermission_Master.Id > 0)
                    {

                        List<MenuPermission_DetailsModel> menuPermission_Detailses = _userMenuPermissionDetailsRepository.All().Where(p => p.MenuPermissionId == menuPermission_Master.Id).ToList();

                        if (menuPermission_Detailses.Count > 0)
                        {
                            _userMenuPermissionDetailsRepository.RemoveRange(menuPermission_Detailses.ToList());
                        }

                        if (menuPermission_Master.MenuPermission_Details != null)
                        {
                            foreach (MenuPermission_DetailsModel ss in menuPermission_Master.MenuPermission_Details)
                            {
                                //ss.DateAdded = DateTime.Now;
                                //ss.DateUpdated = DateTime.Now;

                                _userMenuPermissionDetailsRepository.Insert(ss);
                                //db.SaveChanges();
                            }
                            //db.SaveChanges();

                        }
                        _userMenuPermissionMasterRepository.Update(menuPermission_Master, menuPermission_Master.Id);
                        //db.Entry(menuPermission_Master).State = EntityState.Modified;
                        //db.SaveChanges();
                        return Json(new { Success = "1", ex = "Date Update Successfully" });

                    }
                    else
                    {
                        _userMenuPermissionMasterRepository.Insert(menuPermission_Master);
                        return Json(new { Success = "1", ex = "Date Save Successfully" });
                    }

                    //db.SaveChanges();
                    //return RedirectToAction("Index");
                }
                else
                {
                    return Json(new { Success = "3", ex = "Model is Not Valid" });

                }
                //return Json(new { Success = 1, MenuPermissionId = menuPermission_Master.MenuPermissionId, ex = "" });
                //return Json(new { Success = 1 });
                return Json(new { Success = "1", ex = "Date Save Successfully" });


            }
            catch (Exception ex)
            {
                return Json(new { Success = "3", ex = ex.Message });

                //return Json(new
                //{
                //    success = false,
                //    errors = ex.Message
                //    //ModelState.Keys.SelectMany(k => ModelState[k].Errors).Select(m => m.ErrorMessage).ToArray()
                //});
            }
        }

        [HttpGet]
        public ActionResult EditUserMenuPermission(int MenuPermissionId)
        {
            ViewBag.ActionType = "Edit";
            var MenuPermission = _userMenuPermissionMasterRepository.Find(MenuPermissionId);
            return View("AddUserMenuPermission", MenuPermission);
        }

        public ActionResult DeleteUserMenuPermission(int MenuPermissionId)
        {
            var model = _userMenuPermissionMasterRepository.Find(MenuPermissionId);
            if (model != null)
            {
                _userMenuPermissionMasterRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", "");


                return RedirectToAction("UserMenuPermissionList");
            }
            return RedirectToAction("UserMenuPermissionList");
        }
        #endregion

        #region MobileMenuPermission_Master

        /// <summary>
        /// //need to check by fahad android menu user level permission
        /// </summary>
        /// <returns></returns>

        public IActionResult UserMobileMenuPermissionList()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var abc = _userAndroidMenuPermissionMasterRepository.All().Include(x => x.Company).Include(x => x.UserAccount).Where(x => x.ComId == ComId);

            return View(abc.ToList());
        }

        [AllowAnonymous]
        public IActionResult UserMobileMenuPermissionTransfer(string MobileMenuPermissionId, int UserId, int ComId)
        {
            try
            {


                //var model = new GetUserModel();

                var InputUserId = HttpContext.Session.GetInt32("UserId");
                //var ComId = HttpContext.Session.GetInt32("ComId");

                SqlParameter[] sqlParameter = new SqlParameter[4];
                sqlParameter[0] = new SqlParameter("@menuPermissionId", MobileMenuPermissionId);
                sqlParameter[1] = new SqlParameter("@userIdPermission", UserId);
                sqlParameter[2] = new SqlParameter("@comId", ComId);
                sqlParameter[3] = new SqlParameter("@AddedByUserId", InputUserId);
                Helper.ExecProc("prcPermissionTransferMobile", sqlParameter);


                ViewBag.ActionType = "Edit";

                List<CompanyModel> CompanyList = _companyRepository.All().Where(x => x.Id == ComId).ToList();
                ViewBag.CompanyList = new SelectList(CompanyList, "Id", "CompanyName");

                //List<UserAccountModel> AspNetUserList = _userAccountRepository.All().Where(x => x.ComId == ComId).ToList();
                ViewBag.useridPermission = _userAccountRepository.GetAllForDropDown();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDown(); //new SelectList(AspNetUserList, "Id", "Email",null);


                SqlParameter[] sqlParameter2 = new SqlParameter[2];
                sqlParameter2[0] = new SqlParameter("@comid", ComId);
                sqlParameter2[1] = new SqlParameter("@userid", UserId);
                List<MobileMenuPermissionTestModel> menuPermissionList = Helper.ExecProcMapTList<MobileMenuPermissionTestModel>("MobileMenuPermissionInformation", sqlParameter2).ToList();
                ViewBag.MobileMenuList = menuPermissionList;

                return RedirectToAction("UserMobileMenuPermissionList");


            }
            catch (Exception ex)
            {
                return RedirectToAction("UserMobileMenuPermissionList");
                throw ex;
            }
            //return View("AddUserMobileMenuPermission", menuPermission_Master);

            //return View("Create");

        }



        [HttpGet]
        public ActionResult AddUserMobileMenuPermission(int ComId = 0, int UserId = 0, int MobileMenuPermissionId = 0, int isDelete = 0)
        {
            var SessionComId = HttpContext.Session.GetInt32("ComId");
            var SessionUserId = HttpContext.Session.GetInt32("UserId");
            ViewBag.ActionType = "Create";
            if (ComId == 0)
            {
                ComId = SessionComId.GetValueOrDefault();
            }

            if (MobileMenuPermissionId > 0)
            {
                //if (MobileMenuPermissionId == null)
                //{
                //    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                //}
                AndroidMenuPermission_MasterModel menuPermission_Master = _userAndroidMenuPermissionMasterRepository.All()
                    .Where(x => x.Id == MobileMenuPermissionId)
                    .Include(x => x.AndroidMenuPermission_Details)
                    .ThenInclude(x => x.AndroidMenus)
                    //.ThenInclude(x => x.ParentMobileMenu)
                    .FirstOrDefault();
                //if (menuPermission_Master == null)
                //{
                //    return HttpNotFound();
                //}
                ViewBag.ActionType = "Edit";
                List<UserAccountModel> AspNetUserList = _userAccountRepository.All().Where(x => x.ComId == ComId).ToList();

                //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);

                //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == SessionUserId).FirstOrDefault().UserRole.RoleName;
                var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == SessionUserId).FirstOrDefault().UserRole.RoleName;

                if (useraccount == "SuperAdmin") // || useraccount == "Admin"
                {
                    ViewBag.useridPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                    ViewBag.newUserPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();
                }
                else
                {
                    //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDown();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                    //ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDown();

                    ViewBag.useridPermission = _companyPermissionRepository.All().Include(x => x.UserList).Where(x => x.ComId == ComId).Select(x => new SelectListItem { Text = x.UserList.Email + " - " + x.UserList.Name, Value = x.LuserId.ToString() }).ToList();
                    ViewBag.newUserPermission = _companyPermissionRepository.All().Include(x => x.UserList).Where(x => x.ComId == ComId).Select(x => new SelectListItem { Text = x.UserList.Email + " - " + x.UserList.Name, Value = x.LuserId.ToString() }).ToList();


                }








                //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                //ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDownWithoutBase(); //new SelectList(AspNetUserList, "Id", "Email",null);


                SqlParameter[] sqlParameter2 = new SqlParameter[2];
                sqlParameter2[0] = new SqlParameter("@comid", ComId);
                sqlParameter2[1] = new SqlParameter("@userid", UserId);
                List<MobileMenuPermissionTestModel> menuPermissionList = Helper.ExecProcMapTList<MobileMenuPermissionTestModel>("MobileMenuPermissionInformation", sqlParameter2).ToList();
                ViewBag.MobileMenuList = menuPermissionList;


                List<CompanyModel> CompanyList = _companyRepository.All().Where(x => x.Id == ComId).ToList();
                ViewBag.CompanyList = new SelectList(CompanyList, "Id", "CompanyName");


                //List<CompanyList> CompanyList = (db.Database.SqlQuery<CompanyList>("[prcgetPermitCompanyList]  @Criteria, @userid", new SqlParameter("Criteria", "CompanyPermission"), new SqlParameter("userid", UserId))).ToList();
                //ViewBag.comid = new SelectList(CompanyList, "ComId", "CompanyShortName");


                return View("AddUserMobileMenuPermission", menuPermission_Master);


            }
            else
            {

                ViewBag.Title = "Create";


                //List<UserAccountModel> AspNetUserList = _userAccountRepository.All().Where(x => x.ComId == ComId).ToList();
                //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                //ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDownWithoutBase(); //new SelectList(AspNetUserList, "Id", "Email",null);

                //var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == SessionUserId).FirstOrDefault().UserRole.RoleName;
                var useraccount = _userAccountRepository.All().Include(x => x.UserRole).Where(x => x.Id == SessionUserId).FirstOrDefault().UserRole.RoleName;

                if (useraccount == "SuperAdmin") // || useraccount == "Admin"
                {
                    ViewBag.useridPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                    ViewBag.newUserPermission = _userAccountRepository.GetAllByBaseCompanyForDropDownWithoutBase();
                }
                else
                {

                    ViewBag.useridPermission = _companyPermissionRepository.All().Include(x => x.UserList).Where(x => x.ComId == ComId).Select(x => new SelectListItem { Text = x.UserList.Email + " - " + x.UserList.Name, Value = x.LuserId.ToString() }).ToList();
                    ViewBag.newUserPermission = _companyPermissionRepository.All().Include(x => x.UserList).Where(x => x.ComId == ComId).Select(x => new SelectListItem { Text = x.UserList.Email + " - " + x.UserList.Name, Value = x.LuserId.ToString() }).ToList();


                    //ViewBag.useridPermission = _userAccountRepository.GetAllForDropDown();  //new SelectList(AspNetUserList, "Id", "Email",menuPermission_Master.LUserIdPermission);
                    //ViewBag.newUserPermission = _userAccountRepository.GetAllForDropDown();
                }



                //List<CompanyModel> CompanyList = _companyRepository.All().Where(x => x.Id == ComId).ToList();
                //ViewBag.CompanyList = new SelectList(CompanyList, "Id", "CompanyName");

                var CompanyList = _companyPermissionRepository.All().Include(x => x.CompanyList).Where(x => x.LuserId == UserId).Select(x => new SelectListItem { Text = x.CompanyList.CompanyName, Value = x.ComId.ToString() }).ToList();
                ViewBag.CompanyList = CompanyList;// new SelectList(CompanyList, "Id", "CompanyName");




                if (ComId != null && UserId != null)
                {

                    AndroidMenuPermission_MasterModel menuPermission_Master = _userAndroidMenuPermissionMasterRepository.All().Include(x => x.AndroidMenuPermission_Details).ThenInclude(x => x.AndroidMenus).Where(x => x.ComId == ComId && x.LUserIdPermission == UserId).FirstOrDefault();
                    if (menuPermission_Master != null)
                    {
                        ViewBag.ActionType = "Edit";
                    }
                    else
                    {
                        menuPermission_Master = new AndroidMenuPermission_MasterModel();
                        if (UserId > 0)
                        {
                            menuPermission_Master.LUserIdPermission = UserId;
                        }
                    }


                    SqlParameter[] sqlParameter2 = new SqlParameter[2];
                    sqlParameter2[0] = new SqlParameter("@comid", ComId);
                    sqlParameter2[1] = new SqlParameter("@userid", UserId);
                    List<MobileMenuPermissionTestModel> menuPermissionList = Helper.ExecProcMapTList<MobileMenuPermissionTestModel>("MobileMenuPermissionInformation", sqlParameter2).ToList();
                    ViewBag.MobileMenuList = menuPermissionList;


                    return View(menuPermission_Master);
                }
                else
                {

                }

                ViewBag.MobileMenuList = null;

                //////ViewBag.CompanyId = new SelectList(db.Companys, "ComId", "CompanyShortName",ComId);
                ////List<CompanyList> CompanyList = (db.Database.SqlQuery<CompanyList>("[prcgetPermitCompanyList]  @Criteria, @userid", new SqlParameter("Criteria", "CompanyPermission"), new SqlParameter("userid", UserId))).ToList();
                ////ViewBag.comid = new SelectList(CompanyList, "ComId", "CompanyShortName"); 

            }
            return View();
        }


        public class MobileMenuPermissionTestModel
        {

            public int ModuleMenuId { get; set; }


            //public string? ParentMobileMenuName { get; set; }

            public string? ModuleMenuName { get; set; }

            public string? MenuName { get; set; }
            public string? MenuPage { get; set; }
            public string? MenuRemrks { get; set; }


            //public string? ActionName { get; set; }

            //public string? ControllerName { get; set; }

            public int SLNO { get; set; }

            public bool IsDefault { get; set; }



        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult AddUserMobileMenuPermission(AndroidMenuPermission_MasterModel menuPermission_Master)
        {

            var ComId = HttpContext.Session.GetInt32("ComId");
            try
            {
                //var a =   menuPermission_Master;
                if ((HttpContext.Session.GetString("ComId")) == "0" || (HttpContext.Session.GetString("ComId")) == null)
                {
                    return Json(new { Success = 0, ex = new Exception("Please Login Again for This Transaction").Message.ToString() });
                }
                ViewBag.ActionType = "Create";


                var errors = ModelState.Where(x => x.Value.Errors.Any())
                .Select(x => new { x.Key, x.Value.Errors });

                if (ModelState.IsValid)
                {

                    if (menuPermission_Master.Id > 0)
                    {

                        List<AndroidMenuPermission_DetailsModel> menuPermission_Detailses = _userAndroidMenuPermissionDetailsRepository.All().Where(p => p.AndroidMenuPermissionId == menuPermission_Master.Id).ToList();

                        if (menuPermission_Detailses.Count > 0)
                        {
                            _userAndroidMenuPermissionDetailsRepository.RemoveRange(menuPermission_Detailses.ToList());
                        }

                        if (menuPermission_Master.AndroidMenuPermission_Details != null)
                        {
                            foreach (AndroidMenuPermission_DetailsModel ss in menuPermission_Master.AndroidMenuPermission_Details)
                            {
                                //ss.DateAdded = DateTime.Now;
                                //ss.DateUpdated = DateTime.Now;

                                _userAndroidMenuPermissionDetailsRepository.Insert(ss);
                                //db.SaveChanges();
                            }
                            //db.SaveChanges();

                        }
                        //db.Entry(menuPermission_Master).State = EntityState.Modified;
                        //db.SaveChanges();
                        return Json(new { Success = "1", ex = "Date Update Successfully" });

                    }
                    else
                    {
                        _userAndroidMenuPermissionMasterRepository.Insert(menuPermission_Master);
                        return Json(new { Success = "1", ex = "Date Save Successfully" });
                    }

                    //db.SaveChanges();
                    //return RedirectToAction("Index");
                }
                else
                {
                    return Json(new { Success = "3", ex = "Model is Not Valid" });

                }
                //return Json(new { Success = 1, MobileMenuPermissionId = menuPermission_Master.MobileMenuPermissionId, ex = "" });
                //return Json(new { Success = 1 });
                return Json(new { Success = "1", ex = "Date Save Successfully" });


            }
            catch (Exception ex)
            {
                return Json(new { Success = "3", ex = ex.Message });

                //return Json(new
                //{
                //    success = false,
                //    errors = ex.Message
                //    //ModelState.Keys.SelectMany(k => ModelState[k].Errors).Select(m => m.ErrorMessage).ToArray()
                //});
            }
        }

        [HttpGet]
        public ActionResult EditUserMobileMenuPermission(int MobileMenuPermissionId)
        {
            ViewBag.ActionType = "Edit";
            var MobileMenuPermission = _userAndroidMenuPermissionMasterRepository.Find(MobileMenuPermissionId);
            return View("AddUserMobileMenuPermission", MobileMenuPermission);
        }

        public ActionResult DeleteUserMobileMenuPermission(int MobileMenuPermissionId)
        {
            var model = _userAndroidMenuPermissionMasterRepository.Find(MobileMenuPermissionId);
            if (model != null)
            {
                _userAndroidMenuPermissionMasterRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", "");


                return RedirectToAction("UserMobileMenuPermissionList");
            }
            return RedirectToAction("UserMobileMenuPermissionList");
        }
        #endregion

        #region PostDocument
        //public static List<SelectListItem> DocTypeList = new List<SelectListItem>()
        //{
        //    new SelectListItem() { Text="Purchase", Value="Purchase"},
        //    new SelectListItem() { Text="Sales", Value="Sales"},

        //    new SelectListItem() { Text="Purchase Return", Value="Purchase Return"},
        //    new SelectListItem() { Text="Sales Return", Value="Sales Return"},

        //    new SelectListItem() { Text="Internal Transfer", Value="InternalTransfer"},
        //    new SelectListItem() { Text="Issue", Value="Issue"},
        //    new SelectListItem() { Text="Damage", Value="Damage"},

        //    //new SelectListItem() { Text="Challan", Value="Challan"},
        //    //new SelectListItem() { Text="Received", Value="Received"},

        //    new SelectListItem() { Text="Accounts Transcation", Value="Account"},
        //    new SelectListItem() { Text="Voucher", Value="Voucher"}


        //    //new SelectListItem() { Text="Store Requisition", Value="SRR"},
        //    //new SelectListItem() { Text="Sales", Value="Sales"},
        //    //new SelectListItem() { Text="Purchase Requisition", Value="PR"},
        //    //new SelectListItem() { Text="Purchase Order", Value="PO"},
        //    //new SelectListItem() { Text="Goods Receive", Value="Purchase"}
        //};

        public ViewResult PostDocument(string FromDate, string ToDate, string criteria, string DocType, int? Warehouse)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                int Refresh = 1;
                if (Refresh == 1)
                {
                    var query = $"Exec prcProcessAccountData '{ComId}'";

                    SqlParameter[] sqlParameter = new SqlParameter[1];
                    sqlParameter[0] = new SqlParameter("@ComId", ComId);
                    Helper.ExecProc("prcProcessAccountData", sqlParameter);
                }


                DateTime dtFrom = (DateTime.Now.Date);
                DateTime dtTo = (DateTime.Now.Date);
                var TimeZoneSettingsName = HttpContext.Session.GetString("TimeZoneSettingsName");

                if (FromDate == null || FromDate == "")
                {


                    if (TimeZoneSettingsName.Length > 3)
                    {
                        var localtime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));

                        dtFrom = localtime.Date;
                        ViewBag.FromDate = dtFrom;

                    }

                }
                else
                {
                    //dtFrom = TimeZoneInfo.ConvertTime(Convert.ToDateTime(FromDate), TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));
                    dtFrom = Convert.ToDateTime(FromDate);

                    ViewBag.FromDate = dtFrom;

                }
                if (ToDate == null || ToDate == "")
                {

                    if (TimeZoneSettingsName.Length > 3)
                    {
                        var localtime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));
                        dtTo = localtime.Date;
                        ViewBag.ToDate = dtTo;


                    }
                }
                else
                {
                    //dtTo = TimeZoneInfo.ConvertTime(Convert.ToDateTime(ToDate), TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));

                    dtTo = Convert.ToDateTime(ToDate);
                    ViewBag.ToDate = dtTo;
                }






















                var transactioncomid = HttpContext.Session.GetInt32("ComId");
                //var UserId = HttpContext.Session.GetInt32("UserId");

                var approveComidExist = _docApprovalSettingRepository.All().Where(x => x.ComId == transactioncomid && x.isInactive == false).Count();
                var approveUserExist = _docApprovalSettingRepository.All().Where(x => x.LuserIdCheck == UserId || x.LuserIdVerify == UserId || x.LuserIdApprove == UserId).Count();


                SelectListItem warehouseall = new SelectListItem() { Text = "Please Select", Value = "" };

                var warehouselist = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
                if (warehouselist.Count() == 0)
                {
                    warehouselist = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                    warehouselist.Add(warehouseall);
                }
                //else
                //{
                //    //x.Append(abc);
                //}

                ViewBag.Warehouse = warehouselist.OrderBy(x => x.Value);






                SelectListItem abc = new SelectListItem("All", "All");

                //ViewData["DocType"] = new SelectList(DocTypeList, "Value", "Text").Prepend(abc);
                List<DocumentList> doclist = new List<DocumentList>();
                DocumentList doc;

                ViewData["DocType"] = _docTypeRepository.GetApprovalDocValueForDropDown().Prepend(abc);

                string[] salesDocTypes = new string[] { "Sales", "POS Sales", "SERVICE BILL", "ISSUE BDPO", "Issue", "Retail Sales", "Fuel Sales", "GENERAL SALES", "FORWARD SALES", "RETURN", "TOKEN BILL", "INVOICE", "CHALLAN", "Invoice", "Sales Receipt", "Credit Note" };
                string[] purchaseDocTypes = new string[] { "Purchase", "Opening Stock", "GRR", "DAILY PRODUCTION", "Expense", "Bill", "Purchase Order", "Purchase Payment", "Supplier credit", "Cheque" };


                if (approveComidExist == 0)
                {

                    //DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                    //DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));


                    //ViewBag.FromDate = dtFrom;
                    //ViewBag.ToDate = dtTo;

                    //var TimeZoneSettingsName = HttpContext.Session.GetString("TimeZoneSettingsName");
                    //if (TimeZoneSettingsName.Length > 3)
                    //{
                    //    var localtime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById(TimeZoneSettingsName));


                    //    dtFrom = localtime.Date;
                    //    dtTo = localtime.Date;


                    //    ViewBag.FromDate = localtime.Date;
                    //    ViewBag.ToDate = localtime.Date;

                    //}



                    //DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                    //DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));






                    //DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                    //DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                    //if (criteria == null)
                    //{
                    //    criteria = "UnPost";
                    //}


                    //if (FromDate == null || FromDate == "")
                    //{
                    //}
                    //else
                    //{
                    //    dtFrom = Convert.ToDateTime(FromDate);

                    //}
                    //if (ToDate == null || ToDate == "")
                    //{
                    //    ViewBag.FromDate = dtFrom;
                    //    ViewBag.ToDate = dtTo;
                    //}
                    //else
                    //{
                    //    dtTo = Convert.ToDateTime(ToDate);


                    //}





                    //ViewBag.FromDate = dtFrom;
                    //ViewBag.ToDate = dtTo;






                    if (criteria == null)
                    {
                        criteria = "UnPost";
                    }


                    //if (FromDate == null || FromDate == "")
                    //{
                    //}
                    //else
                    //{
                    //    dtFrom = Convert.ToDateTime(FromDate);

                    //}
                    //if (ToDate == null || ToDate == "")
                    //{
                    //}
                    //else
                    //{
                    //    dtTo = Convert.ToDateTime(ToDate);

                    //}

                    //ViewBag.FromDate = dtFrom;
                    //ViewBag.ToDate = dtTo;




                    //ViewBag.Isleave = false;
                    ViewBag.criteria = criteria;
                    var salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    var purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.DocTypeList).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();


                    var salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    var purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();




                    var issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    var damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();

                    var internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();


                    var transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    var voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();

                    var attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    //var salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();


                    if (DocType == "All")
                    {
                        if (criteria == "All")
                        {

                            if (Warehouse != null)
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate.Date >= dtFrom && p.PurchaseDate.Date <= dtTo && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.WarehouseIdMain == Warehouse).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.WarehouseIdMain == Warehouse).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.WarehouseIdMain == Warehouse).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate.Date >= dtFrom && p.InputDate.Date <= dtTo && p.isSystem == false && p.WarehouseId == Warehouse && p.IsRecurring == false).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isAutoEntry == false && p.WarehouseId == Warehouse).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.WarehouseId == Warehouse).ToList();

                            }
                            else
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false && p.IsPending == false).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate.Date >= dtFrom && p.PurchaseDate.Date <= dtTo && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.IsRecurring == false && p.IsPending == false).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate.Date >= dtFrom && p.InputDate.Date <= dtTo && p.isSystem == false && p.IsRecurring == false).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isAutoEntry == false).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo).ToList();


                            }

                        }
                        else if (criteria == "Post")
                        {
                            if (Warehouse != null)
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate.Date >= dtFrom && p.PurchaseDate.Date <= dtTo && p.isPosted == true && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == true && p.isSystem == false && p.WarehouseId == Warehouse && p.IsRecurring == false).OrderByDescending(o => o.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false && p.WarehouseId == Warehouse).OrderByDescending(o => o.Id).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == true).OrderByDescending(o => o.Id).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == true && p.WarehouseId == Warehouse).ToList();

                            }
                            else
                            {

                                //salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                //purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == true && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                //purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                //salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                //issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                //damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                //internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                //transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == true && p.isSystem == false && p.WarehouseId == Warehouse).OrderByDescending(o => o.Id).ToList();
                                //voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false && p.WarehouseId == Warehouse).OrderByDescending(o => o.Id).ToList();
                                //attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == true).OrderByDescending(o => o.Id).ToList();


                                //salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType))).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();

                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate.Date >= dtFrom && p.PurchaseDate.Date <= dtTo && p.isPosted == true && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == true && p.isSystem == false && p.IsRecurring == false).OrderByDescending(o => o.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false).OrderByDescending(o => o.Id).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == true).OrderByDescending(o => o.Id).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == true).ToList();

                            }

                        }
                        else if (criteria == "UnPost")
                        {
                            if (Warehouse != null)
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == false && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderBy(p => p.Id).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == false && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderBy(p => p.PurchaseDate).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.PurchaseReturnDate).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.SalesReturnDate).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.IssueDate).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.DamageDate).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.InternalTransferDate).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate.Date >= dtFrom && p.InputDate.Date <= dtTo && p.isPost == false && p.isSystem == false && p.WarehouseId == Warehouse && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == false && p.isAutoEntry == false && p.WarehouseId == Warehouse).OrderBy(p => p.Id).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == false).OrderBy(o => o.Id).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == false && p.WarehouseId == Warehouse).ToList();
                            }
                            else
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == false && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false && p.IsPending == false).OrderBy(p => p.Id).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == false && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.IsRecurring == false && p.IsPending == false).OrderBy(p => p.PurchaseDate).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == false).OrderBy(p => p.PurchaseReturnDate).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == false).OrderBy(p => p.SalesReturnDate).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == false).OrderBy(p => p.IssueDate).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == false).OrderBy(p => p.DamageDate).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == false).OrderBy(p => p.InternalTransferDate).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate.Date >= dtFrom && p.InputDate.Date <= dtTo && p.isPost == false && p.isSystem == false && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == false && p.isAutoEntry == false).OrderBy(p => p.Id).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == false).OrderBy(o => o.Id).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == false).ToList();
                            }
                        }

                        foreach (var item in salelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.SaleCode + "";
                            doc.DocumentDate = item.SalesDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.SalesDate;
                            //doc.DocumentType = "Sales";
                            doc.DocumentType = item.DocTypeList == null ? "Sales" : item.DocTypeList.DocType;

                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                                                                       //doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;
                            doc.DocPriority = 2;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;



                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }

                        foreach (var item in purchaselist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.PurchaseCode;
                            doc.DocumentDate = item.PurchaseDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PurchaseDate;
                            doc.DocumentType = item.DocTypeList.DocType;//"Purchase";//
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                                                                       //doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 1;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;

                            doclist.Add(doc);
                        }

                        foreach (var item in purchasereturnlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.PurchaseReturnCode;
                            doc.DocumentDate = item.PurchaseReturnDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PurchaseReturnDate;
                            doc.DocumentType = "PurchaseReturn";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            doc.Remarks = doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 3;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            doclist.Add(doc);
                        }

                        foreach (var item in salereturnlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.SalesReturnCode;
                            doc.DocumentDate = item.SalesReturnDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.SalesReturnDate;
                            doc.DocumentType = "SalesReturn";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;

                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 4;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            doclist.Add(doc);
                        }

                        foreach (var item in issuelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.IssueCode;
                            doc.DocumentDate = item.IssueDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.IssueDate;
                            doc.DocumentType = "Issue";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = (item.GrandTotal.ToString());// float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 5;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;



                            doclist.Add(doc);
                        }

                        foreach (var item in damagelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.DamageCode;
                            doc.DocumentDate = item.DamageDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.DamageDate;
                            doc.DocumentType = "Damage";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";// float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 6;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            doclist.Add(doc);
                        }

                        foreach (var item in internaltransferlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.InternalTransferCode;
                            doc.DocumentDate = item.InternalTransferDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.InternalTransferDate;
                            doc.DocumentType = "InternalTransfer";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";//float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 7;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            doclist.Add(doc);
                        }

                        foreach (var item in transactionlist)
                        {
                            var suppliername = item.Supplier != null ? item.Supplier.SupplierName + " " + item.Supplier.PrimaryAddress : "";
                            var customername = item.Customer != null ? item.Customer.Name + " " + item.Customer.PrimaryAddress : "";
                            var employeename = item.Employee != null ? item.Employee.EmployeeName + " " + item.Employee.EmployeeCode : "";

                            var salecoe = item.Sales != null ? item.Sales.SaleCode : "";
                            var purchasecode = item.Purchase != null ? item.Purchase.PurchaseCode : "";

                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.InputDate;
                            doc.DocumentNo = item.TransactionCode;
                            doc.DocumentDate = item.InputDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.InputDate;
                            doc.DocumentType = "Accounts";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = (item.TransactionAmount + item.DiscountAmount + item.VATAmount + item.AITAmount).ToString(); //(decimal)item.NetIssueValue;
                                                                                                                                         //doc.Remarks = item.Customer != null ? item.Customer.Name : "" + item.Supplier != null ? item.Supplier.SupplierName : "" + item.Sales != null ? item.Sales.SaleCode : "" + item.Purchase != null ? item.Purchase.PurchaseCode : "" +  "Accounts - " + item.TransactionType + " - " + item.Description;
                            doc.Remarks = suppliername + " " + customername + " " + employeename + " " + salecoe + " " + purchasecode + " Accounts - " + item.Description;
                            doc.DocumentStatus = item.isPost == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 8;
                            //doc.Location = "Accounts";
                            doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;

                            doclist.Add(doc);
                        }

                        foreach (var item in voucherlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.VoucherDate;
                            doc.DocumentNo = item.VoucherNo;
                            doc.DocumentDate = item.VoucherDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.VoucherDate;
                            doc.DocumentType = "Voucher - " + item.Acc_VoucherTypes.VoucherTypeName;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.VAmount.ToString(); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.VoucherDesc;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 9;
                            //doc.Location = "Accounts";
                            doc.Location = item.Location == null ? "=N/A=" : item.Location.WhShortName;

                            doclist.Add(doc);
                        }

                        foreach (var item in attendancelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.PunchDateTime;
                            doc.DocumentNo = item.UserAccountList.Name;
                            doc.DocumentDate = item.PunchDateTime.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PunchDateTime;
                            doc.DocumentType = "Attendance";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            // doc.UserInfo = item.Latitude + " " + item.Longitude;
                            doc.NetAmount = item.Latitude + " " + item.Longitude; ; //(decimal)item.NetIssueValue;
                            doc.Remarks = item.LocationName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 10;
                            doc.Location = "Attendance";

                            doclist.Add(doc);
                        }

                        //foreach (var item in salarysheetlist)
                        //{
                        //    doc = new DocumentList();
                        //    doc.DocumentId = item.Id;
                        //    doc.CostCaclculatedId = 0;
                        //    doc.CreatedDate = item.CreateDate;
                        //    doc.DocumentNo = item.SalaryMonth.ToString("dd-MMM-yy");
                        //    doc.DocumentDate = item.SalaryMonth.ToString("dd-MMM-yy");
                        //    doc.OrderDate = item.SalaryMonth;
                        //    doc.DocumentType = "Salary Sheet";
                        //    doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                        //    // doc.UserInfo = item.Latitude + " " + item.Longitude;
                        //    doc.NetAmount = item.SalaryDetailsList.Sum(x => x.NetAmount).ToString(); //(decimal)item.NetIssueValue;
                        //    doc.Remarks = item.SalaryType != null ? item.SalaryType.SalaryType : "";
                        //    doc.DocumentStatus = item.IsPosted == true ? "Posted" : "Not Posted";
                        //    doc.DocPriority = 11;
                        //    doc.Location = item.Location == null ? "=N/A=" : item.Location.WhShortName;

                        //    doclist.Add(doc);
                        //}
                    }

                    else if (DocType == "Sales")
                    {


                        if (criteria == "All")
                        {
                            salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            //salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType))).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                            salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && p.isPosted == false && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                        }

                        if (Warehouse != null)
                        {
                            salelist = salelist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }


                        foreach (var item in salelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.SaleCode + "";
                            doc.DocumentDate = item.SalesDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.SalesDate;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            //doc.DocumentType = "Sales";
                            doc.DocumentType = item.DocTypeList == null ? "Sales" : item.DocTypeList.DocType;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                                                                       //doc.Remarks = item.Remarks + " " + item.Notes;
                                                                       //doc.Remarks = item.Notes;
                            doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;

                            doc.DocPriority = 8;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;

                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";


                            doclist.Add(doc);
                        }
                    }
                    else if ((DocType == "Purchase") || (DocType == "Opening Stock") || (DocType == "GRR"))
                    {
                        if (criteria == "All")
                        {
                            purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.SupplierModel).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.IsRecurring == false).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.SupplierModel).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == true && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.IsRecurring == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.SupplierModel).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == false && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.IsRecurring == false).OrderBy(p => p.PurchaseDate).ToList();
                        }

                        if (Warehouse != null)
                        {
                            purchaselist = purchaselist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }

                        foreach (var item in purchaselist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.PurchaseCode;
                            doc.DocumentDate = item.PurchaseDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PurchaseDate;
                            doc.DocumentType = item.DocTypeList.DocType;// "Purchase";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Remarks + " " + item.Notes;
                            //doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;
                            doc.Remarks = doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Remarks + " " + item.Notes;

                            doc.DocPriority = 8;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Purchase Return")
                    {
                        if (criteria == "All")
                        {
                            purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == false).OrderBy(p => p.PurchaseReturnDate).ToList();
                        }

                        if (Warehouse != null)
                        {
                            purchasereturnlist = purchasereturnlist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }


                        foreach (var item in purchasereturnlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.PurchaseReturnCode;
                            doc.DocumentDate = item.PurchaseReturnDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PurchaseReturnDate;
                            doc.DocumentType = "PurchaseReturn";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            //doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;
                            doc.Remarks = doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;

                            doc.DocPriority = 8;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Sales Return")
                    {
                        if (criteria == "All")
                        {
                            salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == false).OrderBy(p => p.SalesReturnDate).ToList();
                        }


                        if (Warehouse != null)
                        {
                            salereturnlist = salereturnlist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }


                        foreach (var item in salereturnlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.SalesReturnCode;
                            doc.DocumentDate = item.SalesReturnDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.SalesReturnDate;
                            doc.DocumentType = "SalesReturn";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;

                            doc.DocPriority = 4;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Issue")
                    {
                        if (criteria == "All")
                        {
                            issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == false).OrderBy(p => p.IssueDate).ToList();
                        }

                        if (Warehouse != null)
                        {
                            issuelist = issuelist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }

                        foreach (var item in issuelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.IssueCode;
                            doc.DocumentDate = item.IssueDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.IssueDate;
                            doc.DocumentType = "Issue";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = (item.GrandTotal.ToString());// float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocPriority = 5;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Damage")
                    {
                        if (criteria == "All")
                        {
                            damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == false).OrderBy(p => p.DamageDate).ToList();
                        }

                        if (Warehouse != null)
                        {
                            damagelist = damagelist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }

                        foreach (var item in damagelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.DamageCode;
                            doc.DocumentDate = item.DamageDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.DamageDate;
                            doc.DocumentType = "Damage";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";// float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 7;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "InternalTransfer")
                    {
                        if (criteria == "All")
                        {
                            internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == false).OrderBy(p => p.InternalTransferDate).ToList();
                        }

                        if (Warehouse != null)
                        {
                            internaltransferlist = internaltransferlist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }

                        foreach (var item in internaltransferlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.InternalTransferCode;
                            doc.DocumentDate = item.InternalTransferDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.InternalTransferDate;
                            doc.DocumentType = "InternalTransfer";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";//float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocPriority = 7;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Account")
                    {
                        if (criteria == "All")
                        {
                            transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isSystem == false && p.IsRecurring == false).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == true && p.isSystem == false && p.IsRecurring == false).OrderByDescending(o => o.Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == false && p.isSystem == false && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                        }

                        if (Warehouse != null)
                        {
                            transactionlist = transactionlist.Where(x => x.WarehouseId == Warehouse).ToList();
                        }

                        foreach (var item in transactionlist)
                        {
                            var suppliername = item.Supplier != null ? item.Supplier.SupplierName + " " + item.Supplier.PrimaryAddress : "";
                            var customername = item.Customer != null ? item.Customer.Name + " " + item.Customer.PrimaryAddress : "";
                            var employeename = item.Employee != null ? item.Employee.EmployeeName + " " + item.Employee.EmployeeCode : "";

                            var salecoe = item.Sales != null ? item.Sales.SaleCode : "";
                            var purchasecode = item.Purchase != null ? item.Purchase.PurchaseCode : "";

                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.InputDate;
                            doc.DocumentNo = item.TransactionCode;
                            doc.DocumentDate = item.InputDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.InputDate;
                            doc.DocumentType = "Accounts - " + item.TransactionType;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = (item.TransactionAmount + item.DiscountAmount + item.VATAmount + item.AITAmount).ToString();
                            doc.Remarks = suppliername + " " + customername + " " + salecoe + " " + purchasecode + " Accounts - " + item.Description;
                            //doc.Remarks = item.Description;
                            doc.DocPriority = 8;
                            doc.Location = "Accounts";
                            doc.DocumentStatus = item.isPost == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Voucher")
                    {
                        if (criteria == "All")
                        {
                            voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isAutoEntry == false).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            //                    voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false).OrderByDescending(o => o.Id).ToList();

                            voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false).OrderByDescending(o => o.Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == false && p.isAutoEntry == false).OrderBy(p => p.Id).ToList();
                        }

                        if (Warehouse != null)
                        {
                            voucherlist = voucherlist.Where(x => x.WarehouseId == Warehouse).ToList();
                        }

                        foreach (var item in voucherlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.VoucherDate;
                            doc.DocumentNo = item.VoucherNo;
                            doc.DocumentDate = item.VoucherDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.VoucherDate;
                            doc.DocumentType = "Voucher - " + item.Acc_VoucherTypes.VoucherTypeName;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.VAmount.ToString(); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.VoucherDesc;
                            doc.DocPriority = 9;
                            doc.Location = "Voucher";
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Attendance")
                    {
                        if (criteria == "All")
                        {
                            attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo).ToList();

                        }
                        else if (criteria == "Post")
                        {
                            attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == true).OrderByDescending(o => o.Id).ToList();

                        }
                        else if (criteria == "UnPost")
                        {
                            attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == false).OrderBy(p => p.Id).ToList();

                        }
                        foreach (var item in attendancelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.PunchDateTime;
                            doc.DocumentNo = item.UserAccountList.Name;
                            doc.DocumentDate = item.PunchDateTime.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PunchDateTime;
                            doc.DocumentType = "Attendance";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.Latitude + " " + item.Longitude; //(decimal)item.NetIssueValue;
                            doc.Remarks = item.LocationName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 10;
                            doc.Location = "Attendance";

                            doclist.Add(doc);
                        }
                    }
                    //else if (DocType == "SalarySheet")
                    //{
                    //    if (criteria == "All")
                    //    {
                    //        salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo).ToList();

                    //    }
                    //    else if (criteria == "Post")
                    //    {
                    //        salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == true).OrderByDescending(o => o.Id).ToList();

                    //    }
                    //    else if (criteria == "UnPost")
                    //    {
                    //        salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == false).OrderBy(p => p.Id).ToList();

                    //    }
                    //    foreach (var item in salarysheetlist)
                    //    {
                    //        doc = new DocumentList();
                    //        doc.DocumentId = item.Id;
                    //        doc.CostCaclculatedId = 0;
                    //        doc.CreatedDate = item.CreateDate;
                    //        doc.DocumentNo = item.SalaryMonth.ToString("dd-MMM-yy");
                    //        doc.DocumentDate = item.SalaryMonth.ToString("dd-MMM-yy");
                    //        doc.OrderDate = item.SalaryMonth;
                    //        doc.DocumentType = "Salary Sheet";
                    //        doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                    //        // doc.UserInfo = item.Latitude + " " + item.Longitude;
                    //        doc.NetAmount = item.SalaryDetailsList.Sum(x => x.NetAmount).ToString(); //(decimal)item.NetIssueValue;
                    //        doc.Remarks = item.SalaryType != null ? item.SalaryType.SalaryType : "";
                    //        doc.DocumentStatus = item.IsPosted == true ? "Posted" : "Not Posted";
                    //        doc.DocPriority = 11;
                    //        doc.Location = item.Location == null ? "=N/A=" : item.Location.WhShortName;

                    //        doclist.Add(doc);
                    //    }
                    //}
                    if (criteria == "All")
                    {
                        return View(doclist.OrderByDescending(x => x.CostCaclculatedId));
                    }
                    else if (criteria == "Post")
                    {
                        var x = doclist.OrderByDescending(x => x.CostCaclculatedId).ToList();
                        return View(x);
                        //return View(doclist.OrderByDescending(x => x.CostCaclculatedId));

                    }
                    else if (criteria == "UnPost")
                    {
                        var x = doclist.OrderBy(x => x.OrderDate).ThenBy(x => x.DocPriority).ToList();
                        return View(x);

                    }

                    return View(doclist);

                }
                else
                {
                    //DateTime dtFrom = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                    //DateTime dtTo = Convert.ToDateTime(DateTime.Now.Date.ToString("dd-MMM-yy"));
                    //if (criteria == null)
                    //{
                    //    criteria = "UnPost";
                    //}


                    //if (FromDate == null || FromDate == "")
                    //{
                    //}
                    //else
                    //{
                    //    dtFrom = Convert.ToDateTime(FromDate);

                    //}
                    //if (ToDate == null || ToDate == "")
                    //{
                    //}
                    //else
                    //{
                    //    dtTo = Convert.ToDateTime(ToDate);

                    //}

                    //ViewBag.FromDate = dtFrom;
                    //ViewBag.ToDate = dtTo;




                    //ViewBag.Isleave = false;
                    ViewBag.criteria = criteria;
                    var salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    var purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();


                    var salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    var purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();

                    var issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    var damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();

                    var internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();

                    var transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                    var voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();

                    var attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();
                                                                                                                                                               // var salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Take(0).ToList();// _purchaseRepository.All().Include(x=>x.CostCalculations).Include(x => x.Warehouses).Take(0).ToList();


                    if (DocType == "All")
                    {
                        if (criteria == "All")
                        {

                            if (Warehouse != null)
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate.Date >= dtFrom && p.PurchaseDate.Date <= dtTo && p.isPosted == true && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == true && p.isSystem == false && p.WarehouseId == Warehouse && p.IsRecurring == false).OrderByDescending(o => o.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false && p.WarehouseId == Warehouse).OrderByDescending(o => o.Id).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == true).OrderByDescending(o => o.Id).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == true && p.WarehouseId == Warehouse).ToList();

                            }
                            else
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.IsRecurring == false).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate.Date >= dtFrom && p.PurchaseDate.Date <= dtTo && p.IsRecurring == false).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.vWarehouse).Include(x => x.Sales).Include(x => x.Purchase).Where(p => p.InputDate.Date >= dtFrom && p.InputDate.Date <= dtTo && p.isSystem == false && p.IsRecurring == false).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isAutoEntry == false).ToList();

                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo).ToList();
                            }

                        }
                        else if (criteria == "Post")
                        {
                            if (Warehouse != null)
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate.Date >= dtFrom && p.PurchaseDate.Date <= dtTo && p.isPosted == true && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == true && p.WarehouseIdMain == Warehouse).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == true && p.isSystem == false && p.WarehouseId == Warehouse && p.IsRecurring == false).OrderByDescending(o => o.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false && p.WarehouseId == Warehouse).OrderByDescending(o => o.Id).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == true).OrderByDescending(o => o.Id).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == true && p.WarehouseId == Warehouse).ToList();

                            }
                            else
                            {                               
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate.Date >= dtFrom && p.PurchaseDate.Date <= dtTo && p.isPosted == true && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.IsRecurring == false && p.IsPending == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == true && p.isSystem == false && p.IsRecurring == false).OrderByDescending(o => o.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false).OrderByDescending(o => o.Id).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == true).OrderByDescending(o => o.Id).ToList();
                                

                            }

                        }
                        else if (criteria == "UnPost")
                        {

                            if (Warehouse != null)
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == false && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderBy(p => p.Id).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == false && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.WarehouseIdMain == Warehouse && p.IsRecurring == false && p.IsPending == false).OrderBy(p => p.PurchaseDate).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.PurchaseReturnDate).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.SalesReturnDate).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.IssueDate).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.DamageDate).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == false && p.WarehouseIdMain == Warehouse).OrderBy(p => p.InternalTransferDate).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Include(x => x.vWarehouse).Include(x => x.UserAccountList).Where(p => p.InputDate.Date >= dtFrom && p.InputDate.Date <= dtTo && p.isPost == false && p.isSystem == false && p.WarehouseId == Warehouse && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Include(x => x.UserAccountList).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == false && p.isAutoEntry == false && p.WarehouseId == Warehouse).OrderBy(p => p.Id).ToList();
                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == false).OrderBy(o => o.Id).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == false && p.WarehouseId == Warehouse).ToList();
                            }
                            else
                            {
                                salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate.Date >= dtFrom && p.SalesDate.Date <= dtTo && p.isPosted == false && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                                purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.SupplierModel).Include(x => x.DocTypeList).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == false && ((purchaseDocTypes.Contains(p.DocTypeList.DocType))) && p.IsRecurring == false).OrderBy(p => p.PurchaseDate).ToList();
                                purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.SupplierModel).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == false).OrderBy(p => p.PurchaseReturnDate).ToList();
                                salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.CustomerModel).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == false).OrderBy(p => p.SalesReturnDate).ToList();
                                issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == false).OrderBy(p => p.IssueDate).ToList();
                                damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == false).OrderBy(p => p.DamageDate).ToList();
                                internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == false).OrderBy(p => p.InternalTransferDate).ToList();
                                transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.vWarehouse).Include(x => x.Sales).Include(x => x.Purchase).Where(p => p.InputDate.Date >= dtFrom && p.InputDate.Date <= dtTo && p.isPost == false && p.isSystem == false && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                                voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Include(x => x.Location).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == false && p.isAutoEntry == false).OrderBy(p => p.Id).ToList();

                                attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == false).OrderBy(o => o.Id).ToList();
                                // salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == false).OrderBy(o => o.Id).ToList();
                            }
                        }

                        foreach (var item in salelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.SaleCode + "";
                            doc.DocumentDate = item.SalesDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.SalesDate;
                            //doc.DocumentType = "Sales";
                            doc.DocumentType = item.DocTypeList == null ? "Sales" : item.DocTypeList.DocType;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                                                                       //doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;
                            doc.DocPriority = 2;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;



                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            //doclist.Add(doc);

                            var puchaseTrxnCheck = _docApprovalSettingRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == item.DocTypeId).FirstOrDefault();

                            if (puchaseTrxnCheck == null)
                            {
                                doclist.Add(doc);
                            }
                            else
                            {
                                var trxnmodel = transactionApprovalStatusRepository.All().Where(x => x.SalesId == item.Id).FirstOrDefault();
                                if(trxnmodel != null)
                                {
                                    if (trxnmodel.FinalApproverId != null && trxnmodel.IsDisApproved == false)
                                    {
                                        doclist.Add(doc);
                                    }
                                }
                                
                            }
                        }

                        //  comment by irfan
                        //var purchase_docapprovalsetting = _docApprovalSettingRepository.All().Include(x => x.DocType).Include(x => x.ApprovalType).Where(x => x.isInactive == false && ((x.LuserIdCheck == UserId) || (x.LuserIdVerify == UserId) || (x.LuserIdApprove == UserId)) && (x.DocType.DocType == "Purchase") || (x.DocType.DocType == "Opening Stock") || (x.DocType.DocType == "GRR"));
                        //foreach (var docapproval in purchase_docapprovalsetting)
                        //{
                        //    foreach (var item in purchaselist.Where(x => x.DocStatusCount == 0))
                        //    {
                        //        doc = new DocumentList();
                        //        doc.DocumentId = item.Id;
                        //        doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                        //        doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                        //        doc.DocumentNo = item.PurchaseCode;
                        //        doc.DocumentDate = item.PurchaseDate.ToString("dd-MMM-yy");
                        //        doc.OrderDate = item.PurchaseDate;
                        //        doc.DocumentType = item.DocTypeList.DocType;// "Purchase";
                        //        doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                        //        doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                        //                                                   //doc.Remarks = item.Remarks + " " + item.Notes;
                        //        doc.Remarks = doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Remarks + " " + item.Notes;
                        //        doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                        //        doc.DocPriority = 1;
                        //        //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                        //        doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;

                        //        doclist.Add(doc);
                        //    }
                        //}

                        foreach (var item in purchaselist)  /*(var item in purchaselist.Where(x => x.DocStatusCount == 0))*/
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.PurchaseCode;
                            doc.DocumentDate = item.PurchaseDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PurchaseDate;
                            doc.DocumentType = item.DocTypeList.DocType;// "Purchase";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                                                                       //doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.Remarks = doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 1;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            var puchaseTrxnCheck = _docApprovalSettingRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == item.DocTypeId).FirstOrDefault();

                            if(puchaseTrxnCheck == null)
                            {
                                doclist.Add(doc);
                            }
                            else
                            {
                                var trxnmodel = transactionApprovalStatusRepository.All().Where(x => x.PurchaseId == item.Id).FirstOrDefault();
                                if (trxnmodel != null)
                                {
                                    if (trxnmodel.FinalApproverId != null && trxnmodel.IsDisApproved == false)
                                    {
                                        doclist.Add(doc);
                                    }
                                }
                                    
                            }

                            
                        }

                        foreach (var item in purchasereturnlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.PurchaseReturnCode;
                            doc.DocumentDate = item.PurchaseReturnDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PurchaseReturnDate;
                            doc.DocumentType = "PurchaseReturn";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            doc.Remarks = doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 3;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            doclist.Add(doc);
                        }

                        foreach (var item in salereturnlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.SalesReturnCode;
                            doc.DocumentDate = item.SalesReturnDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.SalesReturnDate;
                            doc.DocumentType = "SalesReturn";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;

                            //fahad
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 4;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            doclist.Add(doc);
                        }

                        foreach (var item in issuelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.IssueCode;
                            doc.DocumentDate = item.IssueDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.IssueDate;
                            doc.DocumentType = "Issue";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.GrandTotal.ToString();// float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 5;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;



                            doclist.Add(doc);
                        }

                        foreach (var item in damagelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.DamageCode;
                            doc.DocumentDate = item.DamageDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.DamageDate;
                            doc.DocumentType = "Damage";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";// float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 6;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            doclist.Add(doc);
                        }

                        foreach (var item in internaltransferlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.InternalTransferCode;
                            doc.DocumentDate = item.InternalTransferDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.InternalTransferDate;
                            doc.DocumentType = "InternalTransfer";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";//float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 7;
                            //doc.Location = item.vWarehouse == null ? "=N/A=" : item.vWarehouse.WhShortName;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;


                            doclist.Add(doc);
                        }

                        foreach (var item in transactionlist)
                        {
                            var suppliername = item.Supplier != null ? item.Supplier.SupplierName + " " + item.Supplier.PrimaryAddress : "";
                            var customername = item.Customer != null ? item.Customer.Name + " " + item.Customer.PrimaryAddress : "";
                            var employeename = item.Employee != null ? item.Employee.EmployeeName + " " + item.Employee.EmployeeCode : "";

                            var salecoe = item.Sales != null ? item.Sales.SaleCode : "";
                            var purchasecode = item.Purchase != null ? item.Purchase.PurchaseCode : "";

                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.InputDate;
                            doc.DocumentNo = item.TransactionCode;
                            doc.DocumentDate = item.InputDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.InputDate;
                            doc.DocumentType = item.TransactionCategory.Length == 0 ?  "Accounts" : "Accounts - " + item.TransactionCategory;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = (item.TransactionAmount + item.DiscountAmount + item.VATAmount + item.AITAmount).ToString();
                            //doc.Remarks = item.Customer != null ? item.Customer.Name : "" + item.Supplier != null ? item.Supplier.SupplierName : "" + item.Sales != null ? item.Sales.SaleCode : "" + item.Purchase != null ? item.Purchase.PurchaseCode : "" +  "Accounts - " + item.TransactionType + " - " + item.Description;
                            doc.Remarks = suppliername + " " + customername + " " + salecoe + " " + purchasecode + " Accounts - " + item.Description;
                            doc.DocumentStatus = item.isPost == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 8;
                            doc.Location = "Accounts";

                            //doclist.Add(doc);

                            var doctypeId = _docTypeRepository.All().Where(x => x.DocType == item.TransactionCategory).FirstOrDefault();
                            
                            if(doctypeId != null)
                            {
                                var voucherTrxnCheck = _docApprovalSettingRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId.Id).FirstOrDefault();

                                if (voucherTrxnCheck == null)
                                {
                                    doclist.Add(doc);
                                }
                                else
                                {
                                    var trxnmodel = transactionApprovalStatusRepository.All().Where(x => x.TransactionId == item.Id).FirstOrDefault();
                                    if (trxnmodel != null)
                                    {
                                        if (trxnmodel.FinalApproverId != null && trxnmodel.IsDisApproved == false)
                                        {
                                            doclist.Add(doc);
                                        }
                                    }

                                }
                            }
                            else
                            {
                                doclist.Add(doc);
                            }
                            
                        }

                        foreach (var item in voucherlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.VoucherDate;
                            doc.DocumentNo = item.VoucherNo;
                            doc.DocumentDate = item.VoucherDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.VoucherDate;
                            doc.DocumentType = "Voucher - " + item.Acc_VoucherTypes.VoucherTypeName;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.VAmount.ToString(); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.VoucherDesc;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 9;
                            doc.Location = "Accounts";

                            //doclist.Add(doc);
                            var doctypeId = _docTypeRepository.All().Where(x => x.DocType == item.Acc_VoucherTypes.VoucherTypeName).FirstOrDefault().Id;
                            var voucherTrxnCheck = _docApprovalSettingRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId).FirstOrDefault();

                            if (voucherTrxnCheck == null)
                            {
                                doclist.Add(doc);
                            }
                            else
                            {
                                var trxnmodel = transactionApprovalStatusRepository.All().Where(x => x.VoucherId == item.Id).FirstOrDefault();
                                if (trxnmodel != null)
                                {
                                    if (trxnmodel.FinalApproverId != null && trxnmodel.IsDisApproved == false)
                                    {
                                        doclist.Add(doc);
                                    }
                                }

                            }
                        }

                        foreach (var item in attendancelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.PunchDateTime;
                            doc.DocumentNo = item.UserAccountList.Name;
                            doc.DocumentDate = item.PunchDateTime.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PunchDateTime;
                            doc.DocumentType = "Attendance";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.Latitude + " " + item.Longitude;
                            doc.Remarks = item.LocationName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 10;
                            doc.Location = "Attendance";

                            doclist.Add(doc);
                        }
                    }

                    else if (DocType == "Sales")
                    {
                        if (criteria == "All")
                        {
                            salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            //salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType))).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                            salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.UserAccountList).Include(x => x.DocTypeList).Include(x => x.CustomerModel).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && p.isPosted == true && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();

                            //fahad
                        }
                        else if (criteria == "UnPost")
                        {
                            salelist = _saleRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.SalesDate >= dtFrom && p.SalesDate <= dtTo && p.isPosted == false && (salesDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                        }

                        if (Warehouse != null)
                        {
                            salelist = salelist.Where(x => x.WarehouseIdMain == Warehouse && x.IsRecurring == false).ToList();
                        }


                        foreach (var item in salelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.SaleCode + "";
                            doc.DocumentDate = item.SalesDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.SalesDate;
                            //doc.DocumentType = "Sales";
                            doc.DocumentType = item.DocTypeList == null ? "Sales" : item.DocTypeList.DocType;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;

                            //fahad

                            doc.DocPriority = 8;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            //doclist.Add(doc);

                            var puchaseTrxnCheck = _docApprovalSettingRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == item.DocTypeId).FirstOrDefault();

                            if (puchaseTrxnCheck == null)
                            {
                                doclist.Add(doc);
                            }
                            else
                            {
                                var trxnmodel = transactionApprovalStatusRepository.All().Where(x => x.SalesId == item.Id).FirstOrDefault();
                                if (trxnmodel.FinalApproverId != null && trxnmodel.IsDisApproved == false)
                                {
                                    doclist.Add(doc);
                                }
                            }
                        }
                    }
                    else if (DocType == "Purchase")
                    {
                        if (criteria == "All")
                        {
                            purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.DocTypeList).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && (purchaseDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.DocTypeList)
                                .Include(x => x.Warehouses).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == true && (purchaseDocTypes.Contains(p.DocTypeList.DocType)) && p.IsRecurring == false)
                                .Include(x => x.UserAccountList).Include(x => x.CheckByUserAccountList).Include(x => x.VerifyByUserAccountList).Include(x => x.ApproveByUserAccountList)
                                .OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            purchaselist = _purchaseRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Include(x => x.DocTypeList).Where(p => p.PurchaseDate >= dtFrom && p.PurchaseDate <= dtTo && p.isPosted == false && (purchaseDocTypes.Contains(p.DocTypeList.DocType)))
                            .Include(x => x.UserAccountList).Include(x => x.CheckByUserAccountList).Include(x => x.VerifyByUserAccountList).Include(x => x.ApproveByUserAccountList)
                            .OrderBy(p => p.PurchaseDate).ToList();
                        }

                        if (Warehouse != null)
                        {
                            purchaselist = purchaselist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }

                        var purchase_docapprovalsetting = _docApprovalSettingRepository.All().Include(x => x.DocType).Include(x => x.ApprovalType).Where(x => x.isInactive == false && ((x.LuserIdCheck == UserId) || (x.LuserIdVerify == UserId) || (x.LuserIdApprove == UserId)) && (x.DocType.DocType == "Purchase"));
                        foreach (var docapproval in purchase_docapprovalsetting)
                        {
                            foreach (var item in purchaselist)//.Where(x => x.DocStatusCount == 0)
                            {
                                doc = new DocumentList();
                                doc.DocumentId = item.Id;
                                doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                                doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                                doc.DocumentNo = item.PurchaseCode;
                                doc.DocumentDate = item.PurchaseDate.ToString("dd-MMM-yy");
                                doc.OrderDate = item.PurchaseDate;
                                doc.DocumentType = item.DocTypeList.DocType;// "Purchase";
                                doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                                doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                                //doc.Remarks = item.Remarks + " " + item.Notes;
                                doc.Remarks = doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Remarks + " " + item.Notes;
                                //doc.ApproveStatus = "Checking Required";
                                doc.ApproveStatus = item.DocStatusCount == 0 ? "Checking Required" : item.DocStatusCount == 1 ? "Verifiy Required" : item.DocStatusCount == 2 ? "Approval Required" : "Approved";
                                doc.DocPriority = 8;
                                doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                                doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted"; // Checking Required // Verify Required // Approval Required
                                doc.UserInfo = item.DocStatusCount == 0 ? "Entry By " + item.UserAccountList.Name : item.DocStatusCount == 1 ? "Checked By " + item.CheckByUserAccountList.Name : item.DocStatusCount == 2 ? "Verify By " + item.VerifyByUserAccountList.Name : "Approved By " + item.ApproveByUserAccountList.Name;
                                //doclist.Add(doc);

                                var puchaseTrxnCheck = _docApprovalSettingRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == item.DocTypeId).FirstOrDefault();

                                if (puchaseTrxnCheck == null)
                                {
                                    doclist.Add(doc);
                                }
                                else
                                {
                                    var trxnmodel = transactionApprovalStatusRepository.All().Where(x => x.PurchaseId == item.Id).FirstOrDefault();
                                    if (trxnmodel.FinalApproverId != null && trxnmodel.IsDisApproved == false)
                                    {
                                        doclist.Add(doc);
                                    }
                                }
                            }
                        }



                    }
                    else if (DocType == "Purchase Return")
                    {
                        if (criteria == "All")
                        {
                            purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            purchasereturnlist = _purchaseReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.PurchaseReturnDate >= dtFrom && p.PurchaseReturnDate <= dtTo && p.isPosted == false).OrderBy(p => p.PurchaseReturnDate).ToList();
                        }


                        if (Warehouse != null)
                        {
                            purchasereturnlist = purchasereturnlist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }

                        foreach (var item in purchasereturnlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.PurchaseReturnCode;
                            doc.DocumentDate = item.PurchaseReturnDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PurchaseReturnDate;
                            doc.DocumentType = "PurchaseReturn";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            doc.Remarks = doc.Remarks = item.SupplierModel == null ? "=N/A=" : item.SupplierModel.SupplierName + " " + item.SupplierModel.PrimaryAddress + " " + item.SupplierModel.Phone + " " + item.SupplierName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;
                            doc.DocPriority = 8;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Sales Return")
                    {
                        if (criteria == "All")
                        {
                            salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            salereturnlist = _salesReturnRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.SalesReturnDate >= dtFrom && p.SalesReturnDate <= dtTo && p.isPosted == false).OrderBy(p => p.SalesReturnDate).ToList();
                        }

                        if (Warehouse != null)
                        {
                            salereturnlist = salereturnlist.Where(x => x.WarehouseIdMain == Warehouse).ToList();
                        }

                        foreach (var item in salereturnlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.SalesReturnCode;
                            doc.DocumentDate = item.SalesReturnDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.SalesReturnDate;
                            doc.DocumentType = "SalesReturn";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.NetAmount.ToString(); //(decimal)item.NetIssueValue;
                            //doc.Remarks = item.Notes;
                            doc.Remarks = item.CustomerModel.Name + " " + item.CustomerModel.PrimaryAddress + " " + item.CustomerModel.Phone + " " + item.CustomerName + " " + item.PrimaryAddress + " " + item.PhoneNo + " " + item.Notes;

                            doc.DocPriority = 4;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Issue")
                    {
                        if (criteria == "All")
                        {
                            issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            issuelist = _issueRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.IssueDate >= dtFrom && p.IssueDate <= dtTo && p.isPosted == false).OrderBy(p => p.IssueDate).ToList();
                        }


                        if (Warehouse != null)
                        {
                            issuelist = issuelist.Where(x => x.WarehouseIdMain == Warehouse).ToList();

                        }

                        foreach (var item in issuelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.IssueCode;
                            doc.DocumentDate = item.IssueDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.IssueDate;
                            doc.DocumentType = "Issue";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";// float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocPriority = 5;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Damage")
                    {
                        if (criteria == "All")
                        {
                            damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            damagelist = _damageRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.DamageDate >= dtFrom && p.DamageDate <= dtTo && p.isPosted == false).OrderBy(p => p.DamageDate).ToList();
                        }


                        if (Warehouse != null)
                        {
                            damagelist = damagelist.Where(x => x.WarehouseIdMain == Warehouse).ToList();

                        }

                        foreach (var item in damagelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.DamageCode;
                            doc.DocumentDate = item.DamageDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.DamageDate;
                            doc.DocumentType = "Damage";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";// float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 7;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "InternalTransfer")
                    {
                        if (criteria == "All")
                        {
                            internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == true).OrderByDescending(p => p.CostCalculations.FirstOrDefault().Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            internaltransferlist = _internaltransferRepository.All().Include(x => x.CostCalculations).Include(x => x.Warehouses).Where(p => p.InternalTransferDate >= dtFrom && p.InternalTransferDate <= dtTo && p.isPosted == false).OrderBy(p => p.InternalTransferDate).ToList();
                        }


                        if (Warehouse != null)
                        {
                            internaltransferlist = internaltransferlist.Where(x => x.WarehouseIdMain == Warehouse).ToList();

                        }

                        foreach (var item in internaltransferlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().Id : null;
                            doc.CreatedDate = item.CostCalculations.Count() > 0 ? item.CostCalculations.Where(x => x.IsDelete == false).FirstOrDefault().CreateDate : null;
                            doc.DocumentNo = item.InternalTransferCode;
                            doc.DocumentDate = item.InternalTransferDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.InternalTransferDate;
                            doc.DocumentType = "InternalTransfer";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = "";//float.Parse(item.NetAmount.ToString()); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.Remarks + " " + item.Notes;
                            doc.DocPriority = 7;
                            doc.Location = item.Warehouses == null ? "=N/A=" : item.Warehouses.WhShortName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Account")
                    {
                        if (criteria == "All")
                        {
                            transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isSystem == false && p.IsRecurring == false).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == true && p.isSystem == false && p.IsRecurring == false).OrderByDescending(o => o.Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            transactionlist = _transactionRepository.All().Include(x => x.Customer).Include(x => x.Supplier).Include(x => x.Sales).Include(x => x.Purchase).Where(p => p.InputDate >= dtFrom && p.InputDate <= dtTo && p.isPost == false && p.isSystem == false && p.IsRecurring == false).OrderBy(p => p.Id).ToList();
                        }


                        if (Warehouse != null)
                        {
                            transactionlist = transactionlist.Where(x => x.WarehouseId == Warehouse && x.IsRecurring == false).ToList();

                        }

                        foreach (var item in transactionlist)
                        {
                            var suppliername = item.Supplier != null ? item.Supplier.SupplierName + " " + item.Supplier.PrimaryAddress : "";
                            var customername = item.Customer != null ? item.Customer.Name + " " + item.Customer.PrimaryAddress : "";
                            var employeename = item.Employee != null ? item.Employee.EmployeeName + " " + item.Employee.EmployeeCode : "";

                            var salecoe = item.Sales != null ? item.Sales.SaleCode : "";
                            var purchasecode = item.Purchase != null ? item.Purchase.PurchaseCode : "";

                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.InputDate;
                            doc.DocumentNo = item.TransactionCode;
                            doc.DocumentDate = item.InputDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.InputDate;
                            doc.DocumentType = "Accounts - " + item.TransactionType;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = (item.TransactionAmount + item.DiscountAmount + item.VATAmount + item.AITAmount).ToString();
                            doc.Remarks = suppliername + " " + customername + " " + salecoe + " " + purchasecode + " Accounts - " + item.Description;
                            //doc.Remarks = item.Description;
                            doc.DocPriority = 8;
                            doc.Location = "Accounts";
                            doc.DocumentStatus = item.isPost == true ? "Posted" : "Not Posted";

                            doclist.Add(doc);
                        }
                    }
                    else if (DocType == "Voucher")
                    {
                        if (criteria == "All")
                        {
                            voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isAutoEntry == false).ToList();
                        }
                        else if (criteria == "Post")
                        {
                            //                    voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false).OrderByDescending(o => o.Id).ToList();

                            voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == true && p.isAutoEntry == false).OrderByDescending(o => o.Id).ToList();
                        }
                        else if (criteria == "UnPost")
                        {
                            voucherlist = _accVoucherMainRepository.All().Include(x => x.Acc_VoucherTypes).Where(p => p.VoucherDate.Date >= dtFrom && p.VoucherDate.Date <= dtTo && p.isPosted == false && p.isAutoEntry == false).OrderBy(p => p.Id).ToList();
                        }

                        if (Warehouse != null)
                        {
                            voucherlist = voucherlist.Where(x => x.WarehouseId == Warehouse).ToList();

                        }

                        foreach (var item in voucherlist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.VoucherDate;
                            doc.DocumentNo = item.VoucherNo;
                            doc.DocumentDate = item.VoucherDate.ToString("dd-MMM-yy");
                            doc.OrderDate = item.VoucherDate;
                            doc.DocumentType = "Voucher - " + item.Acc_VoucherTypes.VoucherTypeName;
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.VAmount.ToString(); //(decimal)item.NetIssueValue;
                            doc.Remarks = item.VoucherDesc;
                            doc.DocPriority = 9;
                            doc.Location = "Voucher";
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";

                            //doclist.Add(doc);

                            var doctypeId = _docTypeRepository.All().Where(x => x.DocType == item.Acc_VoucherTypes.VoucherTypeName).FirstOrDefault().Id;

                            var voucherTrxnCheck = _docApprovalSettingRepository.All().Where(x => x.ComId == ComId && x.DocTypeId == doctypeId).FirstOrDefault();

                            if (voucherTrxnCheck == null)
                            {
                                doclist.Add(doc);
                            }
                            else
                            {
                                var trxnmodel = transactionApprovalStatusRepository.All().Where(x => x.VoucherId == item.Id).FirstOrDefault();
                                if (trxnmodel.FinalApproverId != null && trxnmodel.IsDisApproved == false)
                                {
                                    doclist.Add(doc);
                                }
                            }
                        }





                    }
                    else if (DocType == "Attendance")
                    {
                        if (criteria == "All")
                        {
                            attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo).ToList();

                        }
                        else if (criteria == "Post")
                        {
                            attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == true).OrderByDescending(o => o.Id).ToList();

                        }
                        else if (criteria == "UnPost")
                        {
                            attendancelist = _employeeAttendanceRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.PunchDateTime.Date >= dtFrom && p.PunchDateTime <= dtTo && p.isPosted == false).OrderBy(p => p.Id).ToList();

                        }

                        //if (Warehouse != null)
                        //{
                        //    attendancelist = attendancelist.Where(x => x.WarehouseIdMain == Warehouse).ToList();

                        //}


                        foreach (var item in attendancelist)
                        {
                            doc = new DocumentList();
                            doc.DocumentId = item.Id;
                            doc.CostCaclculatedId = 0;
                            doc.CreatedDate = item.PunchDateTime;
                            doc.DocumentNo = item.UserAccountList.Name;
                            doc.DocumentDate = item.PunchDateTime.ToString("dd-MMM-yy");
                            doc.OrderDate = item.PunchDateTime;
                            doc.DocumentType = "Attendance";
                            doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                            doc.NetAmount = item.Latitude + " " + item.Longitude;
                            doc.Remarks = item.LocationName;
                            doc.DocumentStatus = item.isPosted == true ? "Posted" : "Not Posted";
                            doc.DocPriority = 10;
                            doc.Location = "Attendance";

                            doclist.Add(doc);
                        }





                    }
                    //else if (DocType == "SalarySheet")
                    //{
                    //    if (criteria == "All")
                    //    {
                    //        salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo).ToList();

                    //    }
                    //    else if (criteria == "Post")
                    //    {
                    //        salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == true).OrderByDescending(o => o.Id).ToList();

                    //    }
                    //    else if (criteria == "UnPost")
                    //    {
                    //        salarysheetlist = _empSalarySheetRepository.All().Include(x => x.UserAccountList).ThenInclude(x => x.EmployeeList).Where(p => p.SalaryMonth.Date >= dtFrom && p.SalaryMonth.Date <= dtTo && p.IsPosted == false).OrderBy(p => p.Id).ToList();

                    //    }

                    //    if (Warehouse != null)
                    //    {
                    //        salarysheetlist = salarysheetlist.Where(x => x.WarehouseId == Warehouse).ToList();

                    //    }


                    //    foreach (var item in salarysheetlist)
                    //    {
                    //        doc = new DocumentList();
                    //        doc.DocumentId = item.Id;
                    //        doc.CostCaclculatedId = 0;
                    //        doc.CreatedDate = item.CreateDate;
                    //        doc.DocumentNo = item.SalaryMonth.ToString("dd-MMM-yy");
                    //        doc.DocumentDate = item.SalaryMonth.ToString("dd-MMM-yy");
                    //        doc.OrderDate = item.SalaryMonth;
                    //        doc.DocumentType = "Salary Sheet";
                    //        doc.UserInfo = item.UserAccountList != null ? item.UserAccountList.Name : null;
                    //        // doc.UserInfo = item.Latitude + " " + item.Longitude;
                    //        doc.NetAmount = item.SalaryDetailsList.Sum(x => x.NetAmount).ToString(); //(decimal)item.NetIssueValue;
                    //        doc.Remarks = item.SalaryType.SalaryType;
                    //        doc.DocumentStatus = item.IsPosted == true ? "Posted" : "Not Posted";
                    //        doc.DocPriority = 11;
                    //        doc.Location = item.Location == null ? "=N/A=" : item.Location.WhShortName;

                    //        doclist.Add(doc);
                    //    }






                    //}



                    if (criteria == "All")
                    {
                        return View(doclist.OrderByDescending(x => x.CostCaclculatedId));
                    }
                    else if (criteria == "Post")
                    {
                        var x = doclist.OrderByDescending(x => x.CostCaclculatedId).ToList();
                        return View(x);
                        //return View(doclist.OrderByDescending(x => x.CostCaclculatedId));

                    }
                    else if (criteria == "UnPost")
                    {
                        var x = doclist.OrderBy(x => x.OrderDate).ThenBy(x => x.DocPriority).ToList();
                        return View(x);

                    }

                    return View(doclist);

                }




            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        [AllowAnonymous]
        [Obsolete]
        [ValidateAntiForgeryToken]
        public JsonResult PostUnpostDocument(string[] docid, string criteria, string[] doctype)
        {
            string docidsingle = "";
            string doctypesingle = "";
            try
            {
                string[] docidsuccess = new string[docid.Length + 1];
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");
                
                if (UserId == null || ComId == null)
                {
                    return Json(new { Success = "1", ex = "Session Logged out.Please Login Again to do the Transaction ." });

                }

                string Message = "";

                //if (criteria.ToUpper().ToString() == "Post".ToUpper())
                //{
                if (docid.Count() > 0)
                {
                    for (var i = 0; i < docid.Count(); i++)
                    {
                        docidsingle = docid[i];
                        var substring = doctype[i].StartsWith("Voucher - ") ? doctype[i].Substring(10) : doctype[i].StartsWith("Accounts - ") ? doctype[i].Substring(11) : doctype[i];
                        doctypesingle = doctype[i];
                        var doctypeId = _docTypeRepository.All().Where(x => x.DocType == substring).FirstOrDefault().Id;
                        var docapprovalsetting = _docApprovalSettingRepository.All().Where(x => x.ComId == ComId && x.isInactive == false && x.DocTypeId == doctypeId);

                        if (docapprovalsetting.Count() > 0)
                        {
                            if (doctypesingle == "Purchase" || doctypesingle == "Opening Stock" || (doctypesingle == "GRR") || (doctypesingle == "Expense") || (doctypesingle == "Bill"))
                            {
                                ///need to write code here for understanding doc count ..
                                var purchaseentryuser = _purchaseRepository.All().Where(x => x.Id == int.Parse(docidsingle)).FirstOrDefault();
                                var purchase_docapprovalsetting = _docApprovalSettingRepository.All().Include(x => x.DocType).Include(x => x.ApprovalType).Where(x => x.isInactive == false
                                && ((x.LuserIdCheck == UserId) || (x.LuserIdVerify == UserId) || (x.LuserIdApprove == UserId)) && (x.DocType.DocType == doctypesingle) && (x.LuserIdEntry == purchaseentryuser.LuserId)).FirstOrDefault();

                                //var docapprovalcount = purchase_docapprovalsetting.ApprovalType.ApprovalStage;


                                if (purchase_docapprovalsetting != null)
                                {

                                    //if (purchaseentryuser.DocStatusCount == purchase_docapprovalsetting.ApprovalType.ApprovalStage - 1)
                                    ////var singlesales = _saleRepository.All().Include(x => x.Items).ThenInclude(x => x.vWarehouse).Where(x => x.Id == int.Parse(docidsingle) && x.isPosted == false).FirstOrDefault();
                                    ////using (var tr = db.Database.BeginTransaction())
                                    //{

                                        var query = $"Exec prcAvgCostingProcess '{criteria}','{doctypesingle}',{docidsingle},'{ComId}','{UserId}'";

                                        SqlParameter[] sqlParameter = new SqlParameter[5];
                                        sqlParameter[0] = new SqlParameter("@Criteria", criteria);
                                        sqlParameter[1] = new SqlParameter("@Type", doctypesingle);
                                        sqlParameter[2] = new SqlParameter("@Id", docidsingle);
                                        sqlParameter[3] = new SqlParameter("@ComId", ComId);
                                        sqlParameter[4] = new SqlParameter("@LUserId", UserId);

                                        Message = Helper.ExecProc("prcAvgCostingProcess", sqlParameter);

                                        TempData["Message"] = criteria;
                                        TempData["Status"] = "3";
                                        //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), docidsingle, "prcAvgCostingProcess", doctypesingle);


                                        if (Message != "1")
                                        {

                                            TempData["Message"] = criteria;
                                            TempData["Status"] = "3";
                                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), doctypesingle + " " + docidsingle, "prcAvgCostingProcess", Message);


                                            throw new Exception(Message);
                                        }
                                    //}

                                    purchaseentryuser.DocStatusCount = purchaseentryuser.DocStatusCount + 1;
                                    _purchaseRepository.Update(purchaseentryuser, purchaseentryuser.Id);
                                }

                            }

                            if (doctypesingle == "Invoice" || doctypesingle == "Receive payment" || (doctypesingle == "Credit Note") || (doctypesingle == "Estimate") || (doctypesingle == "Sales receipt")|| (doctypesingle == "Issue"))
                            {
                                
                                var salesentryuser = _saleRepository.All().Where(x => x.Id == int.Parse(docidsingle)).FirstOrDefault();
                                var purchase_docapprovalsetting = _docApprovalSettingRepository.All().Include(x => x.DocType).Include(x => x.ApprovalType).Where(x => x.isInactive == false
                                && ((x.LuserIdCheck == UserId) || (x.LuserIdVerify == UserId) || (x.LuserIdApprove == UserId)) && (x.DocType.DocType == doctypesingle) && (x.LuserIdEntry == salesentryuser.LuserId)).FirstOrDefault();

                                


                                if (purchase_docapprovalsetting != null)
                                {

                                    var query = $"Exec prcAvgCostingProcess '{criteria}','{doctypesingle}',{docidsingle},'{ComId}','{UserId}'";

                                    SqlParameter[] sqlParameter = new SqlParameter[5];
                                    sqlParameter[0] = new SqlParameter("@Criteria", criteria);
                                    sqlParameter[1] = new SqlParameter("@Type", doctypesingle);
                                    sqlParameter[2] = new SqlParameter("@Id", docidsingle);
                                    sqlParameter[3] = new SqlParameter("@ComId", ComId);
                                    sqlParameter[4] = new SqlParameter("@LUserId", UserId);

                                    Message = Helper.ExecProc("prcAvgCostingProcess", sqlParameter);

                                    TempData["Message"] = criteria;
                                    TempData["Status"] = "3";


                                    if (Message != "1")
                                    {

                                        TempData["Message"] = criteria;
                                        TempData["Status"] = "3";


                                        throw new Exception(Message);
                                    }
                                }

                            }

                            if (doctypesingle == "Voucher - Cash Payment" || doctypesingle == "Voucher - Cash Receipt" || (doctypesingle == "Voucher - Bank Payment") || (doctypesingle == "Voucher - Bank Receipt") || (doctypesingle == "Voucher - Contra")
                                || (doctypesingle == "Voucher - Journal") || (doctypesingle == "Voucher - LC Voucher") || (doctypesingle == "Voucher - System Voucher"))
                            {

                                var salesentryuser = _accVoucherMainRepository.All().Where(x => x.Id == int.Parse(docidsingle)).FirstOrDefault();
                                var purchase_docapprovalsetting = _docApprovalSettingRepository.All().Include(x => x.DocType).Include(x => x.ApprovalType).Where(x => x.isInactive == false
                                && ((x.LuserIdCheck == UserId) || (x.LuserIdVerify == UserId) || (x.LuserIdApprove == UserId)) && (x.DocType.DocType == substring) && (x.LuserIdEntry == salesentryuser.LuserId)).FirstOrDefault();




                                if (purchase_docapprovalsetting != null)
                                {

                                    var query = $"Exec prcAvgCostingProcess '{criteria}','{doctypesingle}',{docidsingle},'{ComId}','{UserId}'";

                                    SqlParameter[] sqlParameter = new SqlParameter[5];
                                    sqlParameter[0] = new SqlParameter("@Criteria", criteria);
                                    sqlParameter[1] = new SqlParameter("@Type", doctypesingle);
                                    sqlParameter[2] = new SqlParameter("@Id", docidsingle);
                                    sqlParameter[3] = new SqlParameter("@ComId", ComId);
                                    sqlParameter[4] = new SqlParameter("@LUserId", UserId);

                                    Message = Helper.ExecProc("prcAvgCostingProcess", sqlParameter);

                                    TempData["Message"] = criteria;
                                    TempData["Status"] = "3";


                                    if (Message != "1")
                                    {

                                        TempData["Message"] = criteria;
                                        TempData["Status"] = "3";


                                        throw new Exception(Message);
                                    }
                                }

                            }

                            if (doctypesingle == "Accounts - Payment" || doctypesingle == "Accounts - Receive payment")
                            {

                                var salesentryuser = _transactionRepository.All().Where(x => x.Id == int.Parse(docidsingle)).FirstOrDefault();
                                var purchase_docapprovalsetting = _docApprovalSettingRepository.All().Include(x => x.DocType).Include(x => x.ApprovalType).Where(x => x.isInactive == false
                                && ((x.LuserIdCheck == UserId) || (x.LuserIdVerify == UserId) || (x.LuserIdApprove == UserId)) && (x.DocType.DocType == substring) && (x.LuserIdEntry == salesentryuser.LuserId)).FirstOrDefault();




                                if (purchase_docapprovalsetting != null)
                                {

                                    var query = $"Exec prcAvgCostingProcess '{criteria}','{doctypesingle}',{docidsingle},'{ComId}','{UserId}'";

                                    SqlParameter[] sqlParameter = new SqlParameter[5];
                                    sqlParameter[0] = new SqlParameter("@Criteria", criteria);
                                    sqlParameter[1] = new SqlParameter("@Type", doctypesingle);
                                    sqlParameter[2] = new SqlParameter("@Id", docidsingle);
                                    sqlParameter[3] = new SqlParameter("@ComId", ComId);
                                    sqlParameter[4] = new SqlParameter("@LUserId", UserId);

                                    Message = Helper.ExecProc("prcAvgCostingProcess", sqlParameter);

                                    TempData["Message"] = criteria;
                                    TempData["Status"] = "3";


                                    if (Message != "1")
                                    {

                                        TempData["Message"] = criteria;
                                        TempData["Status"] = "3";


                                        throw new Exception(Message);
                                    }
                                }

                            }
                        }
                        else
                        {
                            var query = $"Exec prcAvgCostingProcess '{criteria}','{doctypesingle}',{docidsingle},'{ComId}','{UserId}'";

                            SqlParameter[] sqlParameter = new SqlParameter[5];
                            sqlParameter[0] = new SqlParameter("@Criteria", criteria);
                            sqlParameter[1] = new SqlParameter("@Type", doctypesingle);
                            sqlParameter[2] = new SqlParameter("@Id", docidsingle);
                            sqlParameter[3] = new SqlParameter("@ComId", ComId);
                            sqlParameter[4] = new SqlParameter("@LUserId", UserId);

                            Message = Helper.ExecProc("prcAvgCostingProcess", sqlParameter);

                            TempData["Message"] = criteria;
                            TempData["Status"] = "3";
                            //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), docidsingle, "prcAvgCostingProcess", doctypesingle);


                            if (Message != "1")
                            {

                                TempData["Message"] = criteria;
                                TempData["Status"] = "3";
                                //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), doctypesingle + " " + docidsingle, "prcAvgCostingProcess", Message);


                                throw new Exception(Message);
                            }
                        }


                        #region no need
                        //if (doctypesingle == "Sales")
                        //{
                        //    var singlesales = _saleRepository.All().Include(x => x.Items).ThenInclude(x => x.vWarehouse).Where(x => x.Id == int.Parse(docidsingle) && x.isPosted == false).FirstOrDefault();

                        //    if (singlesales != null)
                        //    {
                        //        using (var tr = db.Database.BeginTransaction())
                        //        {

                        //            if (singlesales != null)
                        //            {
                        //                var query = $"Exec prcAvgCostingProcess {"Sales"},{singlesales.Id},'{singlesales.ComId}'";

                        //                SqlParameter[] sqlParameter = new SqlParameter[4];
                        //                sqlParameter[0] = new SqlParameter("@Type", "Sales");
                        //                sqlParameter[1] = new SqlParameter("@Id", singlesales.Id);
                        //                sqlParameter[2] = new SqlParameter("@comId", singlesales.ComId);
                        //                sqlParameter[3] = new SqlParameter("@UserId", UserId);

                        //                Helper.ExecProc("prcAvgCostingProcess", sqlParameter);
                        //            }
                        //        }
                        //    }
                        //}
                        //else if (doctypesingle == "Purchase")
                        //{
                        //    var singlpurchase = _purchaseRepository.All().Include(x => x.Items).ThenInclude(x => x.vWarehouse).Where(x => x.Id == int.Parse(docidsingle) && x.isPosted == false).FirstOrDefault();

                        //    if (singlpurchase != null)
                        //    {


                        //        singlpurchase.isPosted = true;
                        //        db.Entry(singlpurchase).State = EntityState.Modified;


                        //        var query = $"Exec prcAvgCostingProcess {"GoodsReceive"},{singlpurchase.Id},'{singlpurchase.ComId}'";

                        //        SqlParameter[] sqlParameter = new SqlParameter[4];
                        //        sqlParameter[0] = new SqlParameter("@Type", "GoodsReceive");
                        //        sqlParameter[1] = new SqlParameter("@Id", singlpurchase.Id);
                        //        sqlParameter[2] = new SqlParameter("@comId", singlpurchase.ComId);
                        //        sqlParameter[3] = new SqlParameter("@UserId", UserId);


                        //        Helper.ExecProc("prcAvgCostingProcess", sqlParameter);


                        //    }
                        //}
                        //db.SaveChanges();

                        #endregion no need
                    }
                }


                #region no need

                //}
                //else if (criteria.ToUpper().ToString() == "UnPost".ToUpper())
                //{
                //    if (docid.Count() > 0)
                //    {

                //        if (doctype[0] == "Sales")
                //        {
                //            var postedDoc = _costCalculatedRepository.All().Where(c => c.IsDelete == false
                //                          && docid.ToList().Contains(c.Id.ToString()))
                //                            .OrderByDescending(c => c.Id).ToList();

                //            docid = postedDoc.Select(c => c.Id.ToString()).Distinct().ToArray();
                //        }




                //        for (var i = 0; i < docid.Count(); i++)
                //        {
                //            string docidsingle = docid[i];
                //            string doctypesingle = doctype[i];


                //            if (doctypesingle == "Sales")
                //            {
                //                var singlesales = _saleRepository.All().Include(x => x.Items).ThenInclude(x => x.vWarehouse).Where(x => x.Id == int.Parse(docidsingle) && x.isPosted == true).FirstOrDefault();

                //                if (singlesales != null)
                //                {
                //                    using (var tr = db.Database.BeginTransaction())
                //                    {

                //                        try
                //                        {
                //                                foreach (var ss in singlesales.Items.OrderByDescending(i => i.Id))
                //                                {
                //                                    CostCalculatedModel costcalculateddb = _costCalculatedRepository.All().Where(x => x.ComId == singlesales.ComId && x.ProductId == ss.ProductId && x.WarehouseId == ss.WarehouseId && x.Id == singlesales.Id && x.IsDelete == false).FirstOrDefault();

                //                                    if (costcalculateddb != null)
                //                                    {
                //                                    CostCalculatedModel nextTranCheck =
                //                                        _costCalculatedRepository.All()
                //                                        .Include(x => x.Sales)
                //                                        .Include(x => x.Purchase)
                //                                        .Where(x => x.ComId == singlesales.ComId && x.ProductId == ss.ProductId && x.WarehouseId == ss.WarehouseId && x.IsDelete == false && x.Id != int.Parse(docidsingle) && x.Id > _costCalculatedRepository.All().OrderByDescending(i => i.Id).FirstOrDefault().Id;

                //                                        var message = "Please Unpost Last Document. Other wise you can not post the document";
                //                                        if (nextTranCheck != null)
                //                                        {
                //                                            if (nextTranCheck.Sales != null)
                //                                            {
                //                                                message = message + " Sales No : " + nextTranCheck.Sales.SaleCode + ", Date: " + nextTranCheck.Sales.SalesDate.ToString("dd-MMM-yyyy");
                //                                            }
                //                                            else if (nextTranCheck.Purchase != null)
                //                                            {
                //                                                message = message + " Purchase / MR No : " + nextTranCheck.Purchase.PurchaseCode + ", Date: " + nextTranCheck.Purchase.PurchaseDate.ToString("dd-MMM-yyyy");
                //                                            }
                //                                            else
                //                                            {
                //                                                message = " Nothing Found";
                //                                            }

                //                                            return Json(new { Success = "3", ex = message });
                //                                        }

                //                                        costcalculateddb.IsDelete = true;
                //                                        db.Entry(costcalculateddb).State = EntityState.Modified;
                //                                        db.SaveChanges();
                //                                    }

                //                                }



                //                            singlesales.isPosted = false;
                //                            db.Entry(singlesales).State = EntityState.Modified;


                //                        }
                //                        catch (SqlException ex)
                //                        {

                //                            Console.WriteLine(ex.Message);
                //                            tr.Rollback();

                //                            return Json(new { Success = "3", ex = "Something Wrong" });

                //                        }

                //                        tr.Commit();
                //                    }
                //                }
                //            }
                //            else if (doctypesingle == "Purchase")
                //            {
                //                var singlepurchase = _purchaseRepository.All().Include(x => x.Items).ThenInclude(x => x.vWarehouse).Where(x => x.Id == int.Parse(docidsingle) && x.isPosted == true).FirstOrDefault();
                //                if (singlepurchase != null)
                //                {
                //                    using (var tr = db.Database.BeginTransaction())
                //                    {
                //                        try
                //                        {

                //                            foreach (var ss in singlepurchase.Items)
                //                                {
                //                                    CostCalculatedModel costcalculateddb = _costCalculatedRepository.All().Where(x => x.ComId == singlepurchase.ComId && x.ProductId == ss.ProductId && x.WarehouseId == ss.WarehouseId && x.Id == singlepurchase.Id && x.IsDelete == false).FirstOrDefault();
                //                                    if (costcalculateddb != null)
                //                                    {
                //                                        ///////Himu coding for checking the greater number of document which contains same product
                //                                        CostCalculatedModel nextTranCheck =
                //                                            _costCalculatedRepository.All()
                //                                            .Include(x => x.Sales)
                //                                            .Include(x => x.Purchase)
                //                                            .Where(x => x.ComId == singlepurchase.ComId && x.ProductId == ss.ProductId && x.WarehouseId == ss.WarehouseId && x.IsDelete == false && x.Id != singlepurchase.Id && x.Id > costcalculated_costCalculatedRepository.All()Id).OrderByDescending(i => i.Id).FirstOrDefault();

                //                                        var message = "Please Unpost Last Document. Other wise you can not post the document";
                //                                        if (nextTranCheck != null)
                //                                        {
                //                                            if (nextTranCheck.Sales != null)
                //                                                message = message + " Sales No : " + nextTranCheck.Sales.SaleCode.ToString();
                //                                            else if (nextTranCheck.Purchase != null)
                //                                                message = message + " Purchase / MR No : " + nextTranCheck.Purchase.PurchaseCode.ToString();
                //                                            else
                //                                                message = " Nothing Found";

                //                                            return Json(new { Success = "3", ex = message });
                //                                        }
                //                                        costcalculateddb.IsDelete = true;
                //                                        db.Entry(costcalculateddb).State = EntityState.Modified;
                //                                    }
                //                                    db.SaveChanges();


                //                                }



                //                            singlepurchase.Status = 0;
                //                            db.Entry(singlepurchase).State = EntityState.Modified;
                //                        }
                //                        catch (SqlException ex)
                //                        {

                //                            Console.WriteLine(ex.Message);
                //                            tr.Rollback();

                //                            return Json(new { Success = "3", ex = "Something Wrong" });

                //                        }

                //                        tr.Commit();
                //                    }
                //                }

                //            }
                //            db.SaveChanges();


                //        }
                //    }

                //}

                #endregion no need


                return Json(new { Success = "1", ex = "Data Post/Unpost Successfully" });

            }
            catch (Exception ex)
            {


                TempData["Message"] = "Error Found Post / Unpost Document";
                TempData["Status"] = "1";
                //tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), doctypesingle + " " + docidsingle, "Create", ex.Message.ToString());


                return Json(new { Success = "3", ex = ex.Message });
                throw ex;

            }


        }


        #endregion

        #region UserLogingInfo





        public IActionResult UserLogingInfoList()
        {
            return View();
        }


        public class loginginforesult : UserLogingInfoModel
        {
            //public string? UserName { get; set; }
            public string? CompanyName { get; set; }
        }


        [AllowAnonymous]
        public JsonResult GetUserLogingInfoList()
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");


                var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;
                var model = _userLogingInfoRepository.All(false).OrderByDescending(x => x.Id);//.Include(x=>x.vUnit).Include(x=>x.Category);

                if (useraccount != "SuperAdmin")
                {
                    model = _userLogingInfoRepository.All().Where(x => x.ComId == ComId).OrderByDescending(x => x.Id);
                }

                var query = from e in model//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new loginginforesult
                            {
                                Id = e.Id,
                                WebLink = e.WebLink,
                                Status = e.Status,
                                LongString = e.LongString,
                                LoginTime = e.LoginTime,
                                IPAddress = e.IPAddress,
                                DeviceType = e.DeviceType,
                                Platform = e.Platform,
                                WebBrowserName = e.WebBrowserName,
                                UserName = e.UserName,
                                CompanyName = e.CompanyList.CompanyName
                            };



                var parser = new Parser<loginginforesult>(Request.Form, query);
                return Json(parser.Parse());

            }
            catch (Exception ex)
            {

                throw ex;
            }

        }


        [AllowAnonymous]
        public JsonResult GetUserLogingInfoListTbltr(int page = 1, decimal size = 5)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");


                var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;
                var model = _userLogingInfoRepository.All(false).OrderByDescending(x => x.Id);//.Include(x=>x.vUnit).Include(x=>x.Category);

                if (useraccount != "SuperAdmin")
                {
                    model = _userLogingInfoRepository.All().Where(x => x.ComId == ComId).OrderByDescending(x => x.Id);
                }

                decimal TotalRecordCount = model.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);

                decimal skip = (page - 1) * size;



                var query = from e in model//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new loginginforesult
                            {
                                Id = e.Id,
                                WebLink = e.WebLink,
                                Status = e.Status,
                                LongString = e.LongString,
                                LoginTime = e.LoginTime,
                                IPAddress = e.IPAddress,
                                DeviceType = e.DeviceType,
                                Platform = e.Platform,
                                WebBrowserName = e.WebBrowserName,
                                UserName = e.UserName,
                                CompanyName = e.CompanyList.CompanyName
                            };

                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(size.ToString())).ToList();
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = page;
                pageinfo.PageSize = int.Parse(size.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                return Json(new { Success = 1, error = false, data = abcd, page = page, size = size, last_page = pageinfo.PageCount, total = pageinfo.TotalRecordCount });



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public IActionResult UserTransactionLogList()
        {
            return View();
        }


        public class usertransactionlog : UserTransactionLogModel
        {
            public string? UserName { get; set; }
            public string? CompanyName { get; set; }
        }
        [AllowAnonymous]
        public JsonResult GetUserTransactionLogList()
        {
            try
            {

                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");


                var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;


                var model = _userTransactionLogRepository.All(false).OrderByDescending(x => x.Id);//.Include(x=>x.vUnit).Include(x=>x.Category);
                                                                                                  //var model = _userLogingInfoRepository.All();


                if (useraccount != "SuperAdmin")
                {
                    model = _userTransactionLogRepository.All().Where(x => x.ComId == ComId).OrderByDescending(x => x.Id);
                }


                //var model = _userTransactionLogRepository.All().OrderByDescending(x => x.Id);//.Include(x=>x.vUnit).Include(x=>x.Category);
                var query = from e in model//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new usertransactionlog
                            {
                                Id = e.Id,
                                WebLink = e.WebLink,
                                TransactionStatement = e.TransactionStatement,
                                ControllerName = e.ControllerName,
                                ActionName = e.ActionName,
                                IPAddress = e.IPAddress,
                                DocumentReferance = e.DocumentReferance,
                                CommandType = e.CommandType,
                                FromDateTime = e.FromDateTime,
                                FlagValue = e.FlagValue,
                                UserName = e.UserAccountList.Name,
                                CompanyName = e.CompanyList.CompanyName

                            };



                var parser = new Parser<usertransactionlog>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }




        public IActionResult CreditUsedLogList()
        {
            return View();
        }




        public class userSMSlog : CreditUsedModel
        {
            public string? UserName { get; set; }
            public string? CompanyName { get; set; }
        }
        [AllowAnonymous]
        public JsonResult GetServiceUsedLogList()
        {
            try
            {

                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");


                var useraccount = _userAccountRepository.All(false).Include(x => x.UserRole).Where(x => x.Id == UserId).FirstOrDefault().UserRole.RoleName;


                var model = _creditUsedLogRepository.All(false).OrderByDescending(x => x.Id);//.Include(x=>x.vUnit).Include(x=>x.Category);
                                                                                             //var model = _userLogingInfoRepository.All();


                if (useraccount != "SuperAdmin")
                {
                    model = _creditUsedLogRepository.All().Where(x => x.ComId == ComId).OrderByDescending(x => x.Id);
                }


                //var model = _userTransactionLogRepository.All().OrderByDescending(x => x.Id);//.Include(x=>x.vUnit).Include(x=>x.Category);
                var query = from e in model//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new userSMSlog
                            {
                                Id = e.Id,
                                SMSText = e.SMSText,
                                TextLength = e.TextLength,
                                Quantity = e.Quantity,
                                SendingDate = e.SendingDate,
                                CommandType = e.CommandType,
                                UserName = e.UserAccountList.Name,
                                Remarks = e.Remarks,
                                CompanyName = e.CompanyList.CompanyName

                            };



                var parser = new Parser<userSMSlog>(Request.Form, query);
                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }




        #endregion

        #region WarrantyClaim



        public class WarrantySerialList
        {
            public int Id { get; set; }
            public string? BatchSerialNo { get; set; }
            public string? ProductName { get; set; }

            public int? ProductId { get; set; }
            public int InvoiceId { get; set; }
            public string? InvoiceNo { get; set; }
            public string? InvoiceDate { get; set; }


            public int? CustomerId { get; set; }
            public string? CustomerName { get; set; }
            public string? PhoneNo { get; set; }
            public string? PrimaryAddress { get; set; }

            public int? SupplierId { get; set; }


            public string? ExchangeSerialNo { get; set; }
            public string? ExchangeDate { get; set; }

        }



        [AllowAnonymous]
        public JsonResult SerialSearchForWarrenty(string query)
        {
            try
            {
                List<WarrantySerialList> FirstList = _purchaseBatchItemsRepository.All()
                    .Include(x => x.Products).Include(x => x.SalesBatchItems).ThenInclude(x => x.SalesItems).ThenInclude(x => x.SalesModel)
                    .Where(x => (x.BatchSerialNo.ToLower().Contains(query.ToLower())) && x.SalesBatchItems.FirstOrDefault().SalesItems.SalesId > 0).Take(10)   ///&& x.IsUsed == true
                    .Select(x => new WarrantySerialList
                    {
                        CustomerId = x.SalesBatchItems.FirstOrDefault().SalesItems.SalesModel.CustomerId,
                        CustomerName = x.SalesBatchItems.FirstOrDefault().SalesItems.SalesModel.CustomerName,
                        PhoneNo = x.SalesBatchItems.FirstOrDefault().SalesItems.SalesModel.PhoneNo,
                        PrimaryAddress = x.SalesBatchItems.FirstOrDefault().SalesItems.SalesModel.PrimaryAddress,
                        SupplierId = x.PurchaseItems.PurchaseModel.SupplierId,


                        Id = x.Id,
                        BatchSerialNo = x.BatchSerialNo,
                        ProductName = x.Products.Name + " " + x.Products.ColorName + " " + x.Products.SizeName + " " + x.Products.ModelName + " " + x.Products.Code,
                        ProductId = x.ProductId,
                        InvoiceId = x.SalesBatchItems.FirstOrDefault().SalesItems.SalesId,
                        InvoiceNo = x.SalesBatchItems.FirstOrDefault().SalesItems.SalesModel.SaleCode,
                        InvoiceDate = x.SalesBatchItems.FirstOrDefault().SalesItems.SalesModel.SalesDate.ToString("dd-MMM-yy")
                    }).ToList();





                List<WarrantySerialList> SecoundList = _warrantyItemsRepository.All()
                   .Include(x => x.Products).Include(x => x.Sales).Include(x => x.PurchaseBatchItems)
                   .Where(x => (x.ReplacedSerialNo.ToLower().Contains(query.ToLower()))).Take(10)   ///&& x.IsUsed == true
                   .Select(x => new WarrantySerialList
                   {
                       Id = x.Id,
                       BatchSerialNo = x.ReplacedSerialNo,
                       ProductName = x.Products.Name + " " + x.Products.ColorName + " " + x.Products.SizeName + " " + x.Products.ModelName + " " + x.Products.Code,
                       ProductId = x.ProductId,
                       InvoiceId = x.SalesId.GetValueOrDefault(),
                       InvoiceNo = x.Sales.SaleCode,
                       InvoiceDate = x.Sales.SalesDate.ToString("dd-MMM-yy")
                   }).ToList();


                FirstList.AddRange(SecoundList);

                return Json(FirstList);



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult SerialSearchForExchange(string query)
        {
            try
            {
                var FirstList = _purchaseBatchItemsRepository.All()
                    .Include(x => x.Products).Where(x => (x.BatchSerialNo.ToLower().Contains(query.ToLower())) && x.ExchangeSerialNo == null && x.IsUsed == false).Take(10)   ///&& x.IsUsed == true
                    .Select(x => new
                    {
                        SupplierId = x.PurchaseItems.PurchaseModel.SupplierId,
                        Id = x.Id,
                        BatchSerialNo = x.BatchSerialNo,
                        ProductName = x.Products.Name + " " + x.Products.ColorName + " " + x.Products.SizeName + " " + x.Products.ModelName + " " + x.Products.Code,
                        ProductId = x.ProductId,
                        InvoiceId = x.PurchaseItems.PurchaseId,
                        InvoiceNo = x.PurchaseItems.PurchaseModel.PurchaseCode,
                        InvoiceDate = x.PurchaseItems.PurchaseModel.PurchaseDate.ToString("dd-MMM-yy"),

                        ExchangeSerialNo = x.ExchangeSerialNo,
                        ExchangeDate = x.ExchangeDate.ToString("dd-MMM-yy"),
                        IsUsd = x.IsUsed


                    }).ToList();





                //List<WarrantySerialList> SecoundList = _warrantyItemsRepository.All()
                //   .Include(x => x.Products).Include(x => x.Sales).Include(x => x.PurchaseBatchItems)
                //   .Where(x => (x.ReplacedSerialNo.ToLower().Contains(query.ToLower()))).Take(10)   ///&& x.IsUsed == true
                //   .Select(x => new WarrantySerialList
                //   {
                //       Id = x.Id,
                //       BatchSerialNo = x.ReplacedSerialNo,
                //       ProductName = x.Products.Name,
                //       ProductId = x.ProductId,
                //       InvoiceId = x.SalesId.GetValueOrDefault(),
                //       InvoiceNo = x.Sales.SaleCode,
                //       InvoiceDate = x.Sales.SalesDate.ToString("dd-MMM-yy")
                //   }).ToList();


                //FirstList.AddRange(SecoundList);

                return Json(FirstList);



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        public IActionResult WarrantyClaimList()
        {
            return View();
        }

        public class WarrantyResult : WarrantyItemsModel
        {
            public string? CreateDateString { get; set; }
            public string? NextFollowDateString { get; set; }
            public string? ReplacedDateString { get; set; }




        }

        [AllowAnonymous]
        public JsonResult GetWarrantyClaimList()
        {
            try
            {
                var claimwarrentylist = _warrantyItemsRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);
                var query = from e in claimwarrentylist//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new WarrantyResult
                            {
                                Id = e.Id,
                                Complainer = e.Complainer,
                                ContactNo = e.ContactNo,
                                InvoiceNo = e.Sales.SaleCode,


                                Problem = e.Problem,
                                Remarks = e.Remarks,

                                ReplacedSerialNo = e.ReplacedSerialNo,
                                ComplainNo = e.ComplainNo,

                                CreateDateString = e.CreateDate.ToString("dd-MMM-yy"),
                                NextFollowDateString = e.NextFollowDate.ToString("dd-MMM-yy"),
                                ReplacedDateString = e.ReplacedDate.GetValueOrDefault().ToString("dd-MMM-yy"),


                                SerialNo = e.PurchaseBatchItems.BatchSerialNo,
                                ProductName = e.PurchaseBatchItems.Products.Name + " " + e.PurchaseBatchItems.Products.Brand != null ? e.PurchaseBatchItems.Products.Brand.BrandName : "" + " " + e.PurchaseBatchItems.Products.ModelName,
                            };


                var parser = new Parser<WarrantyResult>(Request.Form, query);

                return Json(parser.Parse());


            }
            catch (Exception ex)
            {

                throw ex;
            }
        }





        [HttpGet]
        public IActionResult AddWarrantyClaim()
        {
            ViewBag.ActionType = "Create";
            ViewBag.SupplierList = _supplierRepository.GetSupplierLedgerHeadForDropDown();


            WarrantyItemsModel abc = new WarrantyItemsModel();
            abc.CreateDate = DateTime.Now;
            abc.NextFollowDate = DateTime.Now.AddDays(7).Date;

            abc.ComplainNo = "C-" + System.Guid.NewGuid().ToString().Substring(0, 12);

            return View(abc);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddWarrantyClaim(WarrantyItemsModel model)
        {

            var errors = ModelState.Where(x => x.Value.Errors.Any())
        .Select(x => new { x.Key, x.Value.Errors });


            // if (ModelState.IsValid)
            //{
            if (model.Id == 0)
            {
                _warrantyItemsRepository.Insert(model);

                TempData["Message"] = "Data Save Successfully";
                TempData["Status"] = "1";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.ComplainNo);

            }
            else
            {
                _warrantyItemsRepository.Update(model, model.Id);

                TempData["Message"] = "Data Update Successfully";
                TempData["Status"] = "2";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.ComplainNo);

            }

            //if (logoPostedFileBase != null && logoPostedFileBase.Length > 0)
            //{
            //    var path = Path.Combine(
            //     Directory.GetCurrentDirectory(), "wwwroot/Content/WarrantyImages",
            //     logoPostedFileBase.FileName);

            //    using (var stream = new FileStream(path, FileMode.Create))
            //    {
            //        logoPostedFileBase.CopyTo(stream);
            //    }
            //    model.ImagePath = $"/Content/WarrantyImages/{logoPostedFileBase.FileName}";
            //}
            //else
            //{
            //    var Warrantys = _warrantyItemsRepository.Find(model.Id);
            //    if (Warrantys != null)
            //        model.ImagePath = Warrantys.ImagePath;
            //}
            //_warrantyItemsRepository.Update(model, model.Id);


            //TempData["Message"] = "Data Update Successfully";
            //TempData["Status"] = "2";
            tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.ComplainNo);


            return RedirectToAction("WarrantyClaimList");
            //}
            //else
            //{
            //    if (model.Id == 0)
            //    {
            //        ViewBag.ActionType = "Create";
            //    }
            //    else
            //    {
            //        ViewBag.ActionType = "Edit";
            //    }
            //}
            return View(model);



        }


        [HttpGet]
        public IActionResult EditWarrantyClaim(int WarrantyId)
        {
            ViewBag.ActionType = "Edit";
            ViewBag.SupplierList = _supplierRepository.GetSupplierLedgerHeadForDropDown();



            var Warranty = _warrantyItemsRepository.All()
                .Include(x => x.Products)
                .Include(x => x.PurchaseBatchItems)
                .Include(x => x.Sales)
                .Where(x => x.Id == WarrantyId).FirstOrDefault();


            Warranty.ProductName = Warranty.Products.Name;
            Warranty.InvoiceNo = Warranty.Sales.SaleCode;
            Warranty.SerialNo = Warranty.PurchaseBatchItems.BatchSerialNo;


            return View("AddWarrantyClaim", Warranty);
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult UserProfile()
        {

            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");
            //var weburl = HttpContext.Session.GetString("weburl");

            UserAccountModel userdata = _userAccountRepository.All().Include(x => x.EmployeeList).Where(x => x.Id == int.Parse(UserId.ToString())).FirstOrDefault();


            var useractivatedate = _SubscriptionActivationRepository.All().Where(x => x.LuserId == UserId).OrderByDescending(x => x.ActiveToDate).FirstOrDefault();

            userdata.UserActivationList.Add(useractivatedate);

            return View(userdata);
        }


        public ActionResult DeleteWarrantyClaim(int WarrantyId)
        {
            var model = _warrantyItemsRepository.Find(WarrantyId);

            if (model != null)
            {
                _warrantyItemsRepository.Delete(model);

                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.ComplainNo);


                return RedirectToAction("WarrantyClaimList");
            }
            return RedirectToAction("WarrantyClaimList");
        }



        [AllowAnonymous]
        public ActionResult WarrantyClaimReport(int WarrantyId)
        {
            var UserId = HttpContext.Session.GetInt32("UserId");
            var ComId = HttpContext.Session.GetInt32("ComId");
            string weburl = configuration.GetSection("hostimage").Value;
            HttpContext.Session.SetString("weburl", weburl);


            var ReportStyle = HttpContext.Session.GetString("SalesReportStyle");

            string reportname = "rptWarrentyClaim";
            var filename = "WarrentyClaim_";

            if (ReportStyle.ToString().Length > 0)
            {
                reportname = "rptWarrentyClaim_" + ReportStyle.ToString();
            }

            //HttpContext.Session.SetString("ReportQuery", "Exec  [rptInvoice] '" + saleId + "','" + ComId + "', '" + weburl + "', 'Challan'");
            //HttpContext.Session.SetString("ReportPath", "~/ReportViewer/POS/" + reportname + ".rdlc");
            //HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));



            //string reportname = "rptWarrentyClaim";
            //var filename = "rptWarrentyClaim_";
            ////string apppath = "";


            //if (ComId == 23)
            //{
            //    reportname = "rptInvoice_globalmedia";

            //}


            HttpContext.Session.SetString("ReportQuery", "Exec  [rptWarrantyClaim] '" + WarrantyId + "','" + ComId + "', '" + weburl + "'");
            HttpContext.Session.SetString("ReportPath", "~/ReportViewer/POS/" + reportname + ".rdlc");
            HttpContext.Session.SetString("PrintFileName", filename.Replace(".", "").Replace(" ", "").Replace(",", "").Replace("\"", ""));



            return RedirectToAction("Index", "ReportViewer");
        }
        #endregion

        #region PaymentType
        public IActionResult PaymentTypeList()
        {
            return View(_PaymentTypeRepository.All());
        }

        [HttpGet]
        public ActionResult AddPaymentType()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddPaymentType(PaymentTypeModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _PaymentTypeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.TypeName.ToString());

                }
                else
                {
                    _PaymentTypeRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.TypeName.ToString());

                }
                return RedirectToAction("PaymentTypeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditPaymentType(int PaymentTypeId)
        {
            ViewBag.ActionType = "Edit";
            var PaymentType = _PaymentTypeRepository.Find(PaymentTypeId);
            return View("AddPaymentType", PaymentType);
        }

        public ActionResult DeletePaymentType(int PaymentTypeId)
        {
            var model = _PaymentTypeRepository.Find(PaymentTypeId);
            if (model != null)
            {
                _PaymentTypeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.TypeName);


                return RedirectToAction("PaymentTypeList");
            }
            return RedirectToAction("PaymentTypeList");
        }
        #endregion

        #region Notification
        public IActionResult NotificationList()
        {
            return View(_notificationRepository.All());
        }

        [HttpGet]
        public ActionResult AddNotification()
        {
            ViewBag.ActionType = "Create";
            ViewBag.NotificationGroupHead = _notificationRepository.GetAllForDropDown();
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddNotification(NotificationModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _notificationRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.TextMessage.ToString());

                }
                else
                {
                    _notificationRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.TextMessage.ToString());

                }
                return RedirectToAction("NotificationList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditNotification(int NotificationId)
        {
            ViewBag.ActionType = "Edit";
            var Notification = _notificationRepository.Find(NotificationId);
            ViewBag.NotificationGroupHead = _notificationRepository.GetAllForDropDown();
            return View("AddNotification", Notification);
        }

        public ActionResult DeleteNotification(int NotificationId)
        {
            var model = _notificationRepository.Find(NotificationId);
            if (model != null)
            {
                _notificationRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.TextMessage);


                return RedirectToAction("NotificationList");
            }
            return RedirectToAction("NotificationList");
        }
        #endregion

        #region NotificationSeen
        public IActionResult NotificationSeenList()
        {
            return View(_notificationSeenRepository.All());
        }

        [HttpGet]
        public ActionResult AddNotificationSeen()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddNotificationSeen(NotificationSeenModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _notificationSeenRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.NotificationId.ToString());

                }
                else
                {
                    _notificationSeenRepository.Update(model, model.Id);


                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.NotificationId.ToString());

                }
                return RedirectToAction("NotificationSeenList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditNotificationSeen(int NotificationSeenId)
        {
            ViewBag.ActionType = "Edit";
            var NotificationSeen = _notificationSeenRepository.Find(NotificationSeenId);
            return View("AddNotificationSeen", NotificationSeen);
        }

        public ActionResult DeleteNotificationSeen(int NotificationSeenId)
        {
            var model = _notificationSeenRepository.Find(NotificationSeenId);
            if (model != null)
            {
                _notificationSeenRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.NotificationId.ToString());


                return RedirectToAction("NotificationSeenList");
            }
            return RedirectToAction("NotificationSeenList");
        }
        #endregion

        #region ReportFormat


        [AllowAnonymous]
        public JsonResult SetReportFormat(string reportformat)
        {
            HttpContext.Session.SetString("ReportType", reportformat);
            return Json(new { Success = 1, ex = "Data Set Successfully" });

        }

        #endregion

        #region SearchType
        [AllowAnonymous]
        public JsonResult SetSearchType(string searchtype)
        {
            HttpContext.Session.SetString("SearchType", searchtype);
            return Json(new { Success = 1, ex = "Data Set Successfully" });

        }
        #endregion

        #region FiscalYearType
        public IActionResult FiscalYearTypeList()
        {
            return View(_fiscalYearTypeRepository.All());
        }

        [HttpGet]
        public ActionResult AddFiscalYearType()
        {
            ViewBag.ActionType = "Create";
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddFiscalYearType(FiscalYearTypeModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Id == 0)
                {
                    _fiscalYearTypeRepository.Insert(model);


                    TempData["Message"] = "Data Save Successfully";
                    TempData["Status"] = "1";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Create", model.FYName.ToString());

                }
                else
                {
                    _fiscalYearTypeRepository.Update(model, model.Id);

                    TempData["Message"] = "Data Update Successfully";
                    TempData["Status"] = "2";
                    tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Update", model.FYName.ToString());


                }
                return RedirectToAction("FiscalYearTypeList");
            }
            else
            {
                if (model.Id == 0)
                {
                    ViewBag.ActionType = "Create";
                }
                else
                {
                    ViewBag.ActionType = "Edit";
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult EditFiscalYearType(int FiscalYearTypeId)
        {
            ViewBag.ActionType = "Edit";
            var FiscalYearType = _fiscalYearTypeRepository.Find(FiscalYearTypeId);
            return View("AddFiscalYearType", FiscalYearType);
        }

        public ActionResult DeleteFiscalYearType(int FiscalYearTypeId)
        {
            var model = _fiscalYearTypeRepository.Find(FiscalYearTypeId);
            if (model != null)
            {
                _fiscalYearTypeRepository.Delete(model);


                TempData["Message"] = "Data Delete Successfully";
                TempData["Status"] = "3";
                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.FYName);


                return RedirectToAction("FiscalYearTypeList");
            }
            return RedirectToAction("FiscalYearTypeList");
        }
        #endregion


        #region NID
        public IActionResult NIDList()
        {

            //var x = _voterRepository.All().Select(
            //    x => new VoterModel
            //    {
            //        Id = x.Id,
            //        nameEn = x.nameEn,
            //        voterNo = x.voterNo,
            //        photo = x.photo
            //    }
            //    );

            return View();
        }

        [HttpGet]
        public async Task<ActionResult> NIDCheck(string VoterIdCardScan, string dateOfBirth)
        {
            ViewBag.ActionType = "NIDCheck";
            VoterModel abc = new VoterModel();
            abc.DateOfBirth = "";
            var comid = HttpContext.Session.GetInt32("ComId");
            try
            {

                decimal CreditBalance = 0;

                var balancesms = _CreditBalanceRepository.All().Where(x => x.ValidityDate >= DateTime.Now.Date && x.PurchaseQuantity - x.UsedQuantity > 0 && x.ComId == comid && x.Type == "NID").OrderBy(x => x.ValidityDate).FirstOrDefault();
                abc.CreditCost = 0;
                if (abc.CreditCurrent != 0)
                {
                    abc.CreditCurrent = balancesms.PurchaseQuantity - balancesms.UsedQuantity;

                }


                if (VoterIdCardScan != null && dateOfBirth != "0001-01-01T00:00")
                {
                    if (balancesms != null)
                    {
                        if (balancesms.PurchaseQuantity - balancesms.UsedQuantity > 0)
                        {

                            VoterModel nidfromdb = _voterRepository.All(false).Where(x => x.voterNo == VoterIdCardScan).FirstOrDefault();


                            balancesms.UsedQuantity = balancesms.UsedQuantity + 1;
                            //balancesms.UsedAmount = balancesms.UsedAmount + (balancesms.UsedQuantity * balancesms.PurchaseRate);

                            _CreditBalanceRepository.Update(balancesms, balancesms.Id);

                            CreditUsedModel abcd = new CreditUsedModel();
                            abcd.SendingDate = DateTime.Now;
                            abcd.TextLength = 1;
                            abcd.Quantity = 1;
                            abcd.CommandType = "NID Verify";
                            abcd.Remarks = "Credit Deduct for Verify voter Id : " + VoterIdCardScan.ToString();
                            abcd.SMSText = VoterIdCardScan + "  " + dateOfBirth;
                            _creditUsedLogRepository.Insert(abcd);




                            if (nidfromdb != null)
                            {
                                nidfromdb.CreditCost = 1;
                                nidfromdb.CreditCurrent = balancesms.PurchaseQuantity - balancesms.UsedQuantity;

                                nidfromdb.DateOfBirth = nidfromdb.dob.ToString("yyyy-MM-dd");



                                TempData["Message"] = "Data Check Successfully";
                                TempData["Status"] = "1";
                                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), VoterIdCardScan.ToString(), "Create", VoterIdCardScan.ToString());


                                return View(nidfromdb);
                            }
                            else
                            {
                                //var dateformatstring = DateTime.Parse(dateOfBirth).ToString("yyyy-MM-dd");
                                var x = await _nidVerify.NIDVerifyAsync(VoterIdCardScan, dateOfBirth);
                                x.DateOfBirth = x.dob.ToString("yyyy-MM-dd");

                                VoterModel nidfromserver = _voterRepository.All(false).Where(x => x.voterNo == VoterIdCardScan).FirstOrDefault();

                                nidfromserver.CreditCost = 1;
                                nidfromserver.CreditCurrent = balancesms.PurchaseQuantity - balancesms.UsedQuantity;


                                if (x.voterNo == null)
                                {
                                    TempData["Error"] = "No Valid Data found for :" + VoterIdCardScan;
                                }


                                TempData["Message"] = "Data Check Successfully";
                                TempData["Status"] = "1";
                                tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), VoterIdCardScan.ToString(), "Create", VoterIdCardScan.ToString());


                                return View(x);
                            }



                        }
                        else
                        {
                            TempData["Error"] = "You have no Credit";
                            //msg = "You have no Credit";
                            //return Json(new { Success = false, ex = msg });
                            return View(abc);
                        }

                    }
                    else
                    {
                        TempData["Error"] = "You have no Credit";
                        //msg = "You have no Credit";
                        //return Json(new { Success = false, ex = msg });
                        return View(abc);
                    }
                }
                else
                {
                    TempData["Error"] = "Please Provide Voter No and Birthdate in a correct format. Birthday format should be [YYYY-MM-DD]";
                    return View(abc);
                }
            }
            catch (Exception ex)
            {
                TempData["Error"] = "Error Found.";
                return View(abc);
                throw ex;
                //return Json(new { Success = false, ex = "error found" });
            }

            //return View();
        }

        public ActionResult ViewVoter(int VoterId)
        {
            ViewBag.ActionType = "View";
            var voterinfo = _voterRepository.Find(VoterId);
            voterinfo.DateOfBirth = voterinfo.dob.ToString("yyyy-MM-dd");
            var balance = _CreditBalanceRepository.All().Where(x => x.ValidityDate >= DateTime.Now.Date && x.PurchaseQuantity - x.UsedQuantity > 0 && x.Type == "NID").OrderBy(x => x.ValidityDate).FirstOrDefault();
            if (balance != null)
            {
                voterinfo.CreditCurrent = balance.PurchaseQuantity - balance.UsedQuantity;
            }
            return View("NIDCheck", voterinfo);
        }


        public JsonResult GetVoterList(string filter = "All")
        {
            try
            {


                var voterlist = _voterRepository.All();//.Include(x=>x.vUnit).Include(x=>x.Category);

                //if (filter == "All")
                //{
                //    InternetUsers = _voterRepository.All();
                //}

                //voterlist = _voterRepository.All();



                var query = from e in voterlist//.Where(x => x.Id > 0 && x.ComId == ComId).OrderByDescending(x => x.Id)

                            select new VoterModel
                            {
                                Id = e.Id,
                                voterNo = e.voterNo,
                                oldNationalIdNumber = e.oldNationalIdNumber,
                                name = e.name,
                                permanentAddress = e.permanentAddress,
                                presentAddressBN = e.presentAddressBN,
                                father = e.father,
                                profession = e.profession,
                                mother = e.mother,
                                DateOfBirth = e.dob.ToString("dd-MMM-yy")
                            };



                var parser = new Parser<VoterModel>(Request.Form, query);


                return Json(parser.Parse());
                //dynamic abcd = parser.Parse();
                //return Json(abcd);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        //public partial class ListVoterModel
        //{

        //    public string? Id { get; set; }
        //    public string? VoterNo { get; set; }
        //    public string? VoterName { get; set; }

        //    public string? PermanentAddress { get; set; }
        //    public string? FatherName { get; set; }
        //    public string? MotherName { get; set; }

        //    public string? DateOfBirth { get; set; }
        //}



        //[HttpGet]
        //public ActionResult EditNID(int NIDId)
        //{
        //    ViewBag.ActionType = "Edit";
        //    var NID = _voterRepository.Find(NIDId);
        //    return View("AddNID", NID);
        //}

        //public ActionResult DeleteNID(int NIDId)
        //{
        //    var model = _voterRepository.Find(NIDId);
        //    if (model != null)
        //    {
        //        _voterRepository.Delete(model);


        //        TempData["Message"] = "Data Delete Successfully";
        //        TempData["Status"] = "3";
        //        tranlog.TransactionLog(RouteData.Values["controller"].ToString(), RouteData.Values["action"].ToString(), TempData["Message"].ToString(), model.Id.ToString(), "Delete", model.voterNo);


        //        return RedirectToAction("NIDList");
        //    }
        //    return RedirectToAction("NIDList");
        //}
        #endregion


        #region different dropdown get 

        [AllowAnonymous]
        public List<SelectListItem> GetWarehouseDropdown(int? IsReport)
        { // sales list
            var sessionLuserId = (HttpContext.Session.GetInt32("UserId"));
            var UserId = HttpContext.Session.GetInt32("UserId");
            var UserRole = HttpContext.Session.GetString("UserRole") ?? "";

            SelectListItem AllData = new SelectListItem() { Text = "ALL", Value = null };


            var warehosuepermission = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
            if (warehosuepermission.Count() == 0)
            {
                warehosuepermission = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
                if (IsReport == 1)
                {
                    warehosuepermission.Add(AllData);
                }
            }
            //else            //{            //    //x.Append(abc);            //}
            return warehosuepermission.OrderBy(x => x.Value).ToList();



        }



        [AllowAnonymous]
        public List<SelectListItem> GetUserDropdown(int? IsReport)
        {
            // sales list
            //var sessionLuserId = (HttpContext.Session.GetInt32("UserId"));
            //var UserId = HttpContext.Session.GetInt32("UserId");
            //var UserRole = HttpContext.Session.GetString("UserRole") ?? "";

            //SelectListItem AllData = new SelectListItem() { Text = "ALL", Value = null };


            //var warehosuepermission = _FromWarehousePermissionRepository.GetAllForDropDown().ToList();
            //if (warehosuepermission.Count() == 0)
            //{
            //    warehosuepermission = _warehouseRepository.GetWarehouseLedgerHeadForDropDown().ToList();
            //    if (IsReport == 1)
            //    {
            //        warehosuepermission.Add(AllData);
            //    }
            //}
            ////else            //{            //    //x.Append(abc);            //}
            //return warehosuepermission.OrderBy(x => x.Value).ToList();




            //var userpermission = _userAccountRepository.GetAllForDropDown().ToList();
            var sessionLuserId = (HttpContext.Session.GetInt32("UserId"));
            var UserId = HttpContext.Session.GetInt32("UserId");
            var UserRole = HttpContext.Session.GetString("UserRole") ?? "";
            var ComId = HttpContext.Session.GetInt32("ComId").GetValueOrDefault();

            if (UserRole == "SuperAdmin")
            {
                SelectListItem abcd = new SelectListItem() { Text = "All User", Value = "" };

                var alluserdata = _userAccountRepository.GetAllForDropDown().ToList();
                alluserdata.Add(abcd);

                var userpermission = alluserdata.OrderBy(x => x.Value);
                return userpermission.OrderBy(x => x.Value).ToList();
            }


            else if (UserRole == "Admin")
            {
                SelectListItem abcd = new SelectListItem() { Text = "All User", Value = "" };

                //var alluserdata = _userAccountRepository.GetAllForDropDown().ToList();
                var alluserdata = _companyPermissionRepository.GetActivePermitUserDropDown(ComId).ToList();

                alluserdata.Add(abcd);

                var userpermission = alluserdata.OrderBy(x => x.Value);
                return userpermission.OrderBy(x => x.Value).ToList();
            }


            var userpermissionforuser = _userAccountRepository.CurrentUserAccountForDropdown();
            return userpermissionforuser.OrderBy(x => x.Value).ToList();



        }


        [AllowAnonymous]

        public List<SelectListItem> GetAccountHeadDropdown(int? IsReport, string VoucherType)
        { // sales list
            var sessionLuserId = (HttpContext.Session.GetInt32("UserId"));
            var UserId = HttpContext.Session.GetInt32("UserId");
            var UserRole = HttpContext.Session.GetString("UserRole") ?? "";

            SelectListItem AllData = new SelectListItem() { Text = "ALL", Value = null };
            var accountheadpermission = _AccountHeadPermissionRepository.GetAllForDropDown().ToList();
            //var accountheadpermission = _AccountHeadPermissionRepository.All();


            if (VoucherType.ToLower().Contains("cash"))
            {
                accountheadpermission = _AccountHeadPermissionRepository.GetAllForDropDownForCash().ToList();
                //accountheadpermission = accountheadpermission.Where(x => x.AccountHeadList.AccountCategorys != "Bank").ToList();
                if (accountheadpermission.Count() == 0)
                {
                    accountheadpermission = _accountHeadRepository.GetCashHeadForDropDown().ToList();
                    if (IsReport == 1)
                    {
                        accountheadpermission.Add(AllData);
                    }
                }
                //else            //{            //    //x.Append(abc);            //}
                return accountheadpermission.OrderBy(x => x.Value).ToList();

            }
            else if (VoucherType.ToLower().Contains("bank"))
            {
                accountheadpermission = _AccountHeadPermissionRepository.GetAllForDropDownForBank().ToList();
                if (accountheadpermission.Count() == 0)
                {
                    accountheadpermission = _accountHeadRepository.GetBankHeadForDropDown().ToList();
                    if (IsReport == 1)
                    {
                        accountheadpermission.Add(AllData);
                    }
                }
                //else            //{            //    //x.Append(abc);            //}
                return accountheadpermission.OrderBy(x => x.Value).ToList();

            }

            return accountheadpermission;


        }

        [AllowAnonymous]

        public List<SelectListItem> GetAccountCategoryDropdown()
        { // sales list
            var UserId = HttpContext.Session.GetInt32("UserId");

            var accountcategory = _accountCategoryRepository.GetAllForDropDown().ToList();


            return accountcategory;


        }


        [AllowAnonymous]

        public List<SelectListItem> GetAccountParentDropdown()
        { // sales list
            var UserId = HttpContext.Session.GetInt32("UserId");

            var accountparent = _accountHeadRepository.GetAccountGroupHeadForDropDown().ToList();

            return accountparent;

        }

        #endregion
        [AllowAnonymous]
        public JsonResult AccRefresh()
        {
            try
            {
                var comid = HttpContext.Session.GetInt32("ComId");
                var xx = _accountHeadRepository.All().Count();
                if (xx > 0)

                {
                    SqlParameter[] sqlParameter1 = new SqlParameter[1];
                    sqlParameter1[0] = new SqlParameter("@ComId", comid);
                    Helper.ExecProc("[prcProcessAccountData]", sqlParameter1);

                    return Json(new { success = true, message = "Accounts Head Refresh Successfully" });

                }
                else
                {
                    return Json(new { success = false, error = "Accounts Head Not Refresh" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { success = false, error = ex.Message });
            }
            return Json(new { success = false, error = "Accounts Head Not Refresh" });
        }

        //[AllowAnonymous]
        //public IActionResult CustomFormStyle()
        //{
        //    return View();
        //}
        public partial class ProductAnalysisViewModel
        {
            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public int SLNo { get; set; }

            public string? Name { get; set; }
            public string? WarehouseName { get; set; }

            public string? Code { get; set; }

            public decimal TotalSalesQuantity { get; set; }
            public decimal TotalSalesValue { get; set; }
            public decimal TotalCostValue { get; set; }
            public decimal TotalProfit { get; set; }



            public decimal OpeningQty { get; set; }

            public decimal PurchaseQty { get; set; }
            public decimal SalesQty { get; set; }
            public decimal PurchaseReturnQty { get; set; }
            public decimal SalesReturnQty { get; set; }
            public decimal SalesExchangeQty { get; set; }

            public decimal TransferInQty { get; set; }
            public decimal TransferOutQty { get; set; }

            public decimal DamageQty { get; set; }
            public decimal IssueQty { get; set; }
            public decimal ClosingQty { get; set; }
            public decimal TotalStockQuantityCount { get; set; }

            public int CountItem { get; set; }

        }

        public partial class BuyerWiseItemsStockModel
        {
            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public int SLNo { get; set; }

            public string? Buyer { get; set; }
            public string? StyleNo { get; set; }
            public string? BuyerPONo { get; set; }
            public string? Category { get; set; }
            public string? ItemName { get; set; }
            public string? Description { get; set; }
            public string? Code { get; set; }
            public string? ColorName { get; set; }
            public string? SizeName { get; set; }
            public string? BrandName { get; set; }
            public string? ModelName { get; set; }
            public string? UnitName { get; set; }


            public decimal BDPOQty { get; set; }
            public decimal PurchasePrice { get; set; }
            public decimal TotalAmount { get; set; }
            public decimal GRRQty { get; set; }
            public decimal IssueQty { get; set; }

            public string? WhName { get; set; }


        }

        [AllowAnonymous]
        public ActionResult BuyerWiseItemStockViewReport(string dtFrom, string dtTo, string Type, int BuyerId)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }
                var URLLink = "";


                var quary = $"Exec [Inv_BuyerWiseItemsStock]  '" + ComId + "','" + dtFrom + "' ,'" + dtTo + "','" + Type + "','" + URLLink + "','" + BuyerId + "'";


                SqlParameter[] parameters = new SqlParameter[6];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[2] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[3] = new SqlParameter("@Type", Type);
                parameters[4] = new SqlParameter("@UrlLink", URLLink);
                parameters[5] = new SqlParameter("@BuyerId", BuyerId);


                List<BuyerWiseItemsStockModel> Inv_BuyerWiseItemsStock = Helper.ExecProcMapTList<BuyerWiseItemsStockModel>("Inv_BuyerWiseItemsStock", parameters);


                return View(Inv_BuyerWiseItemsStock);

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        [AllowAnonymous]
        public ActionResult SupplierLedgerBalanceViewReport(int ReferanceId, string dtFrom, string dtTo, string Type)
        {
            try
            {
                var result = "";
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                if (ComId == null)
                {
                    result = "Please Login first";
                }

                var supplierid = "";
                if (ReferanceId > 0)
                {
                    supplierid = ReferanceId.ToString();
                }

                var quary = $"Exec Acc_SupplierBalance  '" + ComId + "','" + supplierid + "',0,'" + dtFrom + "' ,'" + dtTo + "','" + Type + "'";


                SqlParameter[] parameters = new SqlParameter[6];
                parameters[0] = new SqlParameter("@ComId", ComId);
                parameters[1] = new SqlParameter("@SupplierId", supplierid);
                parameters[2] = new SqlParameter("@UrlLink", "");
                parameters[3] = new SqlParameter("@FromDate", DateTime.Parse(dtFrom));
                parameters[4] = new SqlParameter("@ToDate", DateTime.Parse(dtTo));
                parameters[5] = new SqlParameter("@LedgerFor", Type);



                List<SupplierLedgerModel> supplierbalancelist = Helper.ExecProcMapTList<SupplierLedgerModel>("Acc_SupplierBalance", parameters);

                //if (Type.ToLower().Contains("notposted"))
                //{
                //    return View("AccountsLedgerViewReportAll", TrialBalanceReport);
                //}


                return View(supplierbalancelist);

                //return Json(new { bookingDeliveryChallan, ex = result });
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        [HttpGet]
        public JsonResult DeleteCustomReport(int id)
        {
            try
            {
                var model = reportsRepository.Find(id);

                if (model != null)
                {

                    reportsRepository.Delete(model);

                    return Json(new { success = "1", msg = "Deleted Successfully" });
                }
                return Json(new { success = "0", msg = "No items found to delete." });

            }
            catch (Exception ex)
            {
                return Json(new { success = "0", msg = "No items found to delete." }); //msg = ex.ToString()
                throw ex;
            }
        }


        public partial class BDPOWiseDetailsModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public string? SLNo { get; set; }

            public int BDPOItemsId { get; set; }
            public int BDPOId { get; set; }

            public string? POQty { get; set; }
            public string? GRRQty { get; set; }
            public string? IssueQty { get; set; }
            public string? IssueReturnQty { get; set; }
            public string? ClosingQty { get; set; }
            public string? RemainingPOQty { get; set; }


            public string? StyleNo { get; set; }
            public string? BuyerPO { get; set; }
            public string? SupplierName { get; set; }
            public string? BuyerName { get; set; }

            public string? BDPONo { get; set; }

            public string? ProductName { get; set; }

            public string? FromDate { get; set; }
            public string? ToDate { get; set; }

            public string? OpeningBalance { get; set; }

        }



        public partial class EmployeeLedgerModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public string? SLNo { get; set; }

            public int? EmployeeId { get; set; }

            public string? EmployeeName { get; set; }
            public string? SectionName { get; set; }
            public string? DepartmentName { get; set; }
            public string? DesignationName { get; set; }

            public string? GrossSalary { get; set; }

            public string? JoiningDate { get; set; }

            public string? PhoneNo { get; set; }
            public string? PrimaryAddress { get; set; }

            public string? FromDate { get; set; }
            public string? ToDate { get; set; }
            public string? OpeningBalance { get; set; }

            public string? AdvanceAmount { get; set; }
            public string? LoanAmount { get; set; }

            public string? AdvanceDeduction { get; set; }
            public string? LoanDeduction { get; set; }

            public string? FinalAmount { get; set; }


            public int? isSystem { get; set; }
        }



        public partial class ProductLedgerViewModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public string? SLNo { get; set; }


            public string? TransactionDate { get; set; }
            public string? DisplayCode { get; set; }
            public string? DocType { get; set; }


            //public int? CustomerId { get; set; }
            public int? SalesId { get; set; }
            public int? PurchaseId { get; set; }

            public int? SalesReturnId { get; set; }
            public int? SalesExchangeId { get; set; }
            public int? PurchaseReturnId { get; set; }

            public int? IssueId { get; set; }
            public int? DamageId { get; set; }



            public string? RefName { get; set; }

            public string? Category { get; set; }
            public string? Name { get; set; }
            public string? Code { get; set; }


            public string? FromDate { get; set; }
            public string? ToDate { get; set; }


            public string? Quantity { get; set; }
            public string? Price { get; set; }

            public string? Amount { get; set; }
            public string? WarehouseName { get; set; }


            public string? CostPrice { get; set; }
            public string? SalesPrice { get; set; }
            public string? AvgPrice { get; set; }



        }

        public partial class SupplierLedgerModel
        {

            public string? ComName { get; set; }
            public string? ComAddress { get; set; }
            public string? ComAddress2 { get; set; }

            public string? ComImagePath { get; set; }
            public string? ComLogo { get; set; }
            public string? ReportCaption { get; set; }
            public string? ReportCaptionSmall { get; set; }

            public string? SLNo { get; set; }

            public string? PhoneNo { get; set; }
            public string? PrimaryAddress { get; set; }

            public string? FromDate { get; set; }
            public string? ToDate { get; set; }

            public int? SupplierId { get; set; }
            public string? SupplierName { get; set; }

            public string? OpeningBalance { get; set; }

            public string? PurchaseAmount { get; set; }
            public string? PurchasePayment { get; set; }
            public string? PurchaseReturn { get; set; }

            public string? PurchaseReturnPayment { get; set; }
            public string? AccountsTransaction { get; set; }
            public string? FinalAmount { get; set; }
            public string? Discount { get; set; }


            public string? ZeroToThirtyDays { get; set; }
            public string? ThirtyToSixtyDays { get; set; }
            public string? SixtyToNinetyDays { get; set; }
            public string? OverNinetyDays { get; set; }

            public int? isSystem { get; set; }
        }

        #region ReportList


        [AllowAnonymous]
        [HttpGet]
        public IActionResult ReportList(string type)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var reportList = reportsRepository.GetAllForDropDown().ToList();

            if (type == null)
            {
                type = "Standard";
            }
            ViewBag.ReportType = type;


            ViewBag.Reports = reportsRepository.All().Where(x => x.InActive == false && x.IsManagement == false && x.CustomValue == null)
                .Select(g => new SelectListItem { Text = g.ReportName, Value = g.ReportLink.Contains("ModernReport") ? $"../accounts/ModernReportView?reportid={g.Id}" : g.ReportLink }).ToList();

            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GroupWiseReport(string group)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");

                var imageFile = reportgroupRepository.All().Where(x => x.ReportGroupName == group).Select(x => x.FileName).FirstOrDefault();

                if (group != "Favourites")
                {
                    var data = reportsRepository.All().Include(x => x.ReportGroup).Where(x => x.ReportGroup.ReportGroupName == group && x.ParentId == null && !x.InActive).ToList();

                    foreach (var item in data)
                    {
                        var temp = reportusertrackingRepository.All().Where(x => x.LuserId == UserId && x.ReportId == item.Id).ToList();

                        if (temp.Count() != 0)
                        {
                            item.IsChecked = true;
                        }
                        else
                        {
                            item.IsChecked = false;
                        }
                    }
                    return Json(new { Success = 1, data = data, Image = imageFile, ex = "Data " });
                }
                else
                {
                    var reportlist = reportusertrackingRepository.All().Where(x => x.LuserId == UserId).Select(x => x.ReportId).ToList();
                    var data = reportsRepository.All().Include(x => x.ReportGroup).Where(x => reportlist.Contains(x.Id)).ToList();
                    foreach (var item in data)
                    {
                        item.IsChecked = true;
                    }

                    return Json(new { Success = 1, data = data, Image = imageFile, ex = "Data " });
                }

            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }


        [AllowAnonymous]
        public JsonResult GetCustomList(string Status, int Page = 1, decimal Size = 10, string searchquery = "")
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");


                var Customs = reportsRepository.All().Include(x => x.ReportGroup).Where(x => x.ComId == ComId && x.ParentId != null && !x.IsManagement && !x.InActive).ToList();



                decimal TotalRecordCount = Customs.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);


                decimal skip = (Page - 1) * Size;

                // Get total number of records
                int total = Customs.Count();



                var query = from e in Customs
                            select new
                            {
                                Id = e.Id,
                                ReportName = e.ReportName,
                                ReportType = e.Type

                            };

                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(Size.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = Page;
                pageinfo.PageSize = int.Parse(Size.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, PageInfo = pageinfo });



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }


        [AllowAnonymous]
        public JsonResult GetManagementList(string Status, int Page = 1, decimal Size = 10, string searchquery = "")
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                var ComId = HttpContext.Session.GetInt32("ComId");


                var Management = reportsRepository.All().Include(x => x.ReportGroup).Where(x => x.ComId == ComId && x.ParentId != null && x.IsManagement == true && x.InActive == false).ToList();



                decimal TotalRecordCount = Management.Count();
                var PageCountabc = decimal.Parse((TotalRecordCount / Size).ToString());
                var PageCount = Math.Ceiling(PageCountabc);


                decimal skip = (Page - 1) * Size;

                // Get total number of records
                int total = Management.Count();



                var query = from e in Management
                            select new
                            {
                                Id = e.Id,
                                ReportName = e.ReportName,
                                UpdateDate = e.UpdateDate.ToString("MMM dd, yyyy h:mm tt")

                            };

                var abcd = query.OrderByDescending(x => x.Id).Skip(int.Parse(skip.ToString())).Take(int.Parse(Size.ToString())).ToList();// Take(50);
                var pageinfo = new PagingInfo();
                pageinfo.PageCount = int.Parse(PageCount.ToString());
                pageinfo.PageNo = Page;
                pageinfo.PageSize = int.Parse(Size.ToString());
                pageinfo.TotalRecordCount = int.Parse(TotalRecordCount.ToString());

                //return  abcd;
                return Json(new { Success = 1, error = false, data = abcd, PageInfo = pageinfo });



            }
            catch (Exception ex)
            {

                throw ex;
            }
        }




        [AllowAnonymous]
        [HttpGet]
        public IActionResult AddBookmark(int id)
        {
            try
            {

                var UserId = HttpContext.Session.GetInt32("UserId");

                var data = reportusertrackingRepository.All().Where(x => x.LuserId == UserId && x.ReportId == id).ToList();

                if (data.Count() != 0)
                {
                    reportusertrackingRepository.Delete(data[0]);
                    return Json(new { Success = 1, data = "Removed", ex = "Data " });
                }
                else
                {
                    var model = new ReportUserTrackingModel();
                    model.ReportId = id;
                    reportusertrackingRepository.Insert(model);
                    return Json(new { Success = 1, data = "Inserted", ex = "Data " });
                }


            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }

        [AllowAnonymous]
        [HttpPost]
        public IActionResult AddReports(string reportName, string reportQuery)
        {
            var model = new ReportModel();
            model.ReportName = reportName;
            model.ReportQuery = reportQuery;
            model.Type = reportName;
            
            model.GroupId = reportgroupRepository.All().Where(x => x.ReportGroupName == "GTR Custom Report").FirstOrDefault().Id;
            reportsRepository.Insert(model);

            model.ReportLink = "../Accounts/ModernReportView?reportId=" + model.Id;
            reportsRepository.Update(model, model.Id);

            TempData["Message"] = "Data Save Successfully";
            TempData["Status"] = "1";
            return Json(new { success = "1", message = "Data Save Successfully" });

        }

        

        #endregion


        #region Taxes

        [AllowAnonymous]
        public IActionResult Taxes()
        {
            return View();
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetAgencyList()
        {
            var incomeAccounts = _agencyRepository.All()
                .Select(g => new SelectListItem { Text = g.AgencyName, Value = g.Id.ToString() }).ToList();

            return Json(incomeAccounts);
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetTaxList()
        {

            var ComId = HttpContext.Session.GetInt32("ComId");

            var taxlists = _mastersalestaxRepository.All().Where(x => x.ComId == ComId)
                .Select(g => new SelectListItem { Text = g.Name, Value = g.Id.ToString() }).ToList();

            return Json(taxlists);
        }
        #endregion


        #region ApprovalSetting

        [HttpGet]
        [AllowAnonymous]
        public IActionResult ApprovalSettings()
        {

            return View();
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult AddApprovalSettings(int id = 0)
        {
            if (id == 0)
            {
                ViewBag.ActionType = "Create";
            }


            ViewBag.Id = id;

            return View();
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult UpdateApprovalSettings(int id)
        {
            ViewBag.ActionType = "Edit";

            ViewBag.Id = id;

            return View("AddApprovalSettings");
        }

        [AllowAnonymous]
        public JsonResult GetUser()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var users = _userAccountRepository.All().Where(x => x.ComId == ComId)
                .Select(x => new
                {
                    x.Id,
                    x.Name
                });
            return Json(users);
        }

        [AllowAnonymous]
        public JsonResult GetApprovalType()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var users = _approvalTypeRepository.All().Where(x => x.ApprovalStage != 0)
                .Select(x => new
                {
                    x.Id,
                    x.ApprovalType,
                    x.ApprovalStage
                });
            return Json(users);
        }

        [AllowAnonymous]
        [HttpPost]
        public IActionResult ApprovalSettingsCreation([FromBody] DocApprovalSettingModel model)
        {
            var ComId = HttpContext.Session.GetInt32("ComId");
            var userid = HttpContext.Session.GetInt32("UserId");

            if (model.Id == 0)
            {

                try
                {
                    _docApprovalSettingRepository.Insert(model);

                    return Json(new { error = false, message = "Approval Setting saved successfully" });
                }
                catch (Exception ex)
                {
                    return Json(new { success = false, values = ex.Message.ToString() });
                }

            }
            else
            {
                _docApprovalSettingRepository.Update(model, model.Id);


                return Json(new { error = false, message = "Approval Setting Updated successfully" });

            }
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult InactiveDocApproval(int Id)
        {
            try
            {
                var data = _docApprovalSettingRepository.All().Where(x => x.Id == Id).FirstOrDefault();



                _docApprovalSettingRepository.Delete(data);

                return Json(new { success = "1", msg = "Deleted Successfully" });
            }
            catch
            {

                return Json(new { success = "0", msg = "Occuring error while deleting" });

            }

        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetDocApprovalSettingsList()
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");

                var data = _docApprovalSettingRepository.All()
                                                        .Where(x => x.ComId == ComId)
                                                        .Include(x => x.DocType)
                                                        .Include(x => x.UserAccountList)
                                                        .Select(x => new
                                                        {
                                                            Id = x.Id,
                                                            DocType = x.DocType.DocType,
                                                            LuserIdEntry = x.EntryUserList.Name,
                                                            LuserIdCheck = x.CheckUserList.Name,
                                                            LuserIdVerify = x.VerifyUserList.Name,
                                                            LuserIdApprove = x.ApproveUserList.Name,
                                                            ApproveType = x.ApprovalType.ApprovalType
                                                        }).OrderByDescending(x => x.Id)
                                                        .ToList();




                return Json(new { Success = 1, error = false, data = data });

            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }

        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetDocApprovalSettingsDetails(int id)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");

                var data = _docApprovalSettingRepository.All()
                                                        .Where(x => x.ComId == ComId && x.Id == id)
                                                        .Include(x => x.DocType)
                                                        .Select(x => new
                                                        {
                                                            Id = x.Id,
                                                            x.DocTypeId,
                                                            x.LuserIdEntry,
                                                            x.LuserIdApprove,
                                                            x.LuserIdCheck,
                                                            x.LuserIdVerify,
                                                            x.ApprovalTypeId
                                                        })
                                                        .FirstOrDefault();

                return Json(new { Success = 1, error = false, data = data });

            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }
        #endregion

        #region Check or Verify

        [HttpGet]
        [AllowAnonymous]
        public IActionResult ApprovalList()
        {

            return View();
        }

        [AllowAnonymous]
        public JsonResult GetDocTypeForDocApproval()
        {
            var ComId = HttpContext.Session.GetInt32("ComId");

            var doctypes = _docApprovalSettingRepository.All().Include(x => x.DocType).Where(x => x.ComId == ComId)
                .Select(x=> new
                {
                    x.DocTypeId,
                    x.DocType.DocType
                });


            return Json(doctypes);
        }
        [AllowAnonymous]
        [HttpGet]
        public IActionResult GetCheckVerifyList(string? type, int? DocTypeId)
        {
            try
            {
                var ComId = HttpContext.Session.GetInt32("ComId");
                var UserId = HttpContext.Session.GetInt32("UserId");

                SqlParameter[] sqlParameter = new SqlParameter[4];
                sqlParameter[0] = new SqlParameter("@ComId", ComId);
                sqlParameter[1] = new SqlParameter("@Type", type);
                sqlParameter[2] = new SqlParameter("@DocTypeId", DocTypeId);
                sqlParameter[3] = new SqlParameter("@UserId", UserId);

                var datasetabc = new System.Data.DataSet();
                datasetabc = Helper.ExecProcMapDS("get_CheckVerifyList", sqlParameter);

                SqlParameter[] sqlParameter1 = new SqlParameter[4];
                sqlParameter1[0] = new SqlParameter("@ComId", ComId);
                sqlParameter1[1] = new SqlParameter("@Type", type);
                sqlParameter1[2] = new SqlParameter("@DocTypeId", DocTypeId);
                sqlParameter1[3] = new SqlParameter("@UserId", UserId);

                var datasetabc1 = new System.Data.DataSet();
                datasetabc1 = Helper.ExecProcMapDS("get_CheckVerifyListCount", sqlParameter1);

                return Json(new { Success = 1, error = false, data = datasetabc, count = datasetabc1.Tables[0] });

            }
            catch (Exception ex)
            {
                return Json(new { Success = 0, ex = ex.InnerException?.InnerException?.Message ?? ex.Message });
            }
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult DisapproveDocInCheckGRR(int Id, int DocTypeId, string Type, int TransactionId)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                if (Type == "Check")
                {
                    if (TransactionId == 0)
                    {
                        var model = new TransactionApprovalStatusModel();
                        var approvalStatus = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Check").FirstOrDefault();

                        var doctype = _docTypeRepository.Find(DocTypeId);

                        if (doctype.DocFor == "Sales" && doctype.DocType != "Receive payment")
                        {
                            model.SalesId = Id;
                        }
                        else if (doctype.DocFor == "Purchase" && doctype.DocType != "Payment")
                        {
                            model.PurchaseId = Id;
                        }
                        else if (doctype.DocFor == "Voucher")
                        {
                            model.VoucherId = Id;
                        }
                        else if (doctype.DocType == "Receive payment" || doctype.DocType == "Payment")
                        {
                            model.TransactionId = Id;
                        }

                        model.ApprovalStatusId = approvalStatus.Id;
                        model.CheckApproverId = UserId;
                        model.DisApproverId = UserId;
                        model.IsDisApproved = true;
                        model.DocTypeId = DocTypeId;

                        transactionApprovalStatusRepository.Insert(model);
                    }
                    else
                    {
                        var model = transactionApprovalStatusRepository.Find(TransactionId);
                        var approvalStatus = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Check").FirstOrDefault();
                        model.ApprovalStatusId = approvalStatus.Id;
                        model.CheckApproverId = UserId;
                        model.DisApproverId = UserId;
                        model.IsDisApproved = true;

                        transactionApprovalStatusRepository.Update(model, model.Id);
                    }
                }
                else
                if (Type == "Verify")
                {
                    var model = transactionApprovalStatusRepository.Find(TransactionId);
                    var approvalStatus = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Verify").FirstOrDefault();
                    model.ApprovalStatusId = approvalStatus.Id;
                    model.VerifyApproverId = UserId;
                    model.DisApproverId = UserId;
                    model.IsDisApproved = true;

                    transactionApprovalStatusRepository.Update(model, model.Id);
                }
                else
                if (Type == "Approve")
                {
                    if (TransactionId != 0)
                    {
                        var model = transactionApprovalStatusRepository.Find(TransactionId);
                        var approvalStatus1 = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Approve").FirstOrDefault();
                        model.ApprovalStatusId = approvalStatus1.Id;
                        model.FinalApproverId = UserId;
                        model.DisApproverId = UserId;
                        model.IsDisApproved = true;

                        transactionApprovalStatusRepository.Update(model, model.Id);
                    }
                    else
                    {
                        var model = new TransactionApprovalStatusModel();
                        var approvalStatus = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Approve").FirstOrDefault();
                        var doctype = _docTypeRepository.Find(DocTypeId);

                        if (doctype.DocFor == "Sales" && doctype.DocType != "Receive payment")
                        {
                            model.SalesId = Id;
                        }
                        else if (doctype.DocFor == "Purchase" && doctype.DocType != "Payment")
                        {
                            model.PurchaseId = Id;
                        }
                        else if (doctype.DocFor == "Approval" && doctype.DocType == "Voucher")
                        {
                            model.VoucherId = Id;
                        }
                        else if (doctype.DocType == "Receive payment" || doctype.DocType == "Payment")
                        {
                            model.TransactionId = Id;
                        }
                        else if (doctype.DocType == "Proforma Invoice")
                        {
                            model.ProformaInvoiceId = Id;
                        }
                        model.ApprovalStatusId = approvalStatus.Id;
                        model.CheckApproverId = UserId;
                        model.DisApproverId = UserId;
                        model.IsDisApproved = true;
                        model.DocTypeId = DocTypeId;

                        transactionApprovalStatusRepository.Insert(model);
                    }


                }


                return Json(new { success = "1", msg = "Disapprove Successfully" });
            }
            catch
            {

                return Json(new { success = "0", msg = "Occuring error while disapproved" });

            }

        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult ApproveDocInCheckGRR(int Id, int DocTypeId, string Type, int TransactionId)
        {
            try
            {
                var UserId = HttpContext.Session.GetInt32("UserId");
                if (Type == "Check")
                {
                    var model = new TransactionApprovalStatusModel();
                    var approvalStatus = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Check").FirstOrDefault();

                    var doctype = _docTypeRepository.Find(DocTypeId);

                    if (doctype.DocFor == "Sales" && doctype.DocType != "Receive payment")
                    {
                        model.SalesId = Id;
                    }
                    else if (doctype.DocFor == "Purchase" && doctype.DocType != "Payment")
                    {
                        model.PurchaseId = Id;
                    }
                    else if (doctype.DocFor == "Voucher")
                    {
                        model.VoucherId = Id;
                    }
                    else if (doctype.DocType == "Receive payment" || doctype.DocType == "Payment")
                    {
                        model.TransactionId = Id;
                    }

                    model.ApprovalStatusId = approvalStatus.Id;
                    model.CheckApproverId = UserId;
                    model.DocTypeId = DocTypeId;

                    transactionApprovalStatusRepository.Insert(model);
                }
                else
                if (Type == "Verify")
                {
                    var model = transactionApprovalStatusRepository.Find(TransactionId);
                    var approvalStatus = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Verify").FirstOrDefault();
                    model.ApprovalStatusId = approvalStatus.Id;
                    model.VerifyApproverId = UserId;

                    transactionApprovalStatusRepository.Update(model, model.Id);
                }
                else
                if (Type == "Approve")
                {
                    if (TransactionId != 0)
                    {
                        var model = transactionApprovalStatusRepository.Find(TransactionId);
                        var approvalStatus1 = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Approve").FirstOrDefault();
                        model.ApprovalStatusId = approvalStatus1.Id;
                        model.FinalApproverId = UserId;

                        transactionApprovalStatusRepository.Update(model, model.Id);
                    }
                    else
                    {
                        var model = new TransactionApprovalStatusModel();
                        var approvalStatus = approvalStatusRepository.All().Where(x => x.ApprovalStatus == "Approve").FirstOrDefault();
                        var doctype = _docTypeRepository.Find(DocTypeId);

                        if (doctype.DocFor == "Sales" && doctype.DocType != "Receive payment")
                        {
                            model.SalesId = Id;
                        }
                        else if (doctype.DocFor == "Purchase" && doctype.DocType != "Payment")
                        {
                            model.PurchaseId = Id;
                        }
                        else if (doctype.DocFor == "Voucher")
                        {
                            model.VoucherId = Id;
                        }
                        else if (doctype.DocType == "Receive payment" || doctype.DocType == "Payment")
                        {
                            model.TransactionId = Id;
                        }
                        else if (doctype.DocType == "Proforma Invoice")
                        {
                            model.ProformaInvoiceId = Id;
                        }
                        model.ApprovalStatusId = approvalStatus.Id;
                        model.FinalApproverId = UserId;
                        model.DocTypeId = DocTypeId;

                        transactionApprovalStatusRepository.Insert(model);
                    }
                }
                else
                if (Type == "Disapprove")
                {
                    var model = transactionApprovalStatusRepository.Find(TransactionId);
                    model.IsDisApproved = false;
                    model.DisApproverId = null;

                    transactionApprovalStatusRepository.Update(model, model.Id);
                }


                return Json(new { success = "1", msg = "Approve Successfully" });
            }
            catch
            {

                return Json(new { success = "0", msg = "Occuring error while Approved" });

            }

        }
        #endregion

    }

    public static class StringExt
    {
        public static bool IsNumeric(this string text) => double.TryParse(text, out _);

    }



}
